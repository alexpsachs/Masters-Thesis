[
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5619639",
        "pull_request_review_id": null,
        "id": 5619639,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTk2Mzk=",
        "diff_hunk": "@@ -129,6 +129,51 @@ class Delete\n     @complete = true\n \n #\n+# It changes everything selected by the following motion.\n+#\n+class Change\n+  motion: null\n+  complete: null\n+  vimState: null\n+\n+  constructor: (@editor, @vimState) ->\n+    @complete = false\n+\n+  isComplete: -> @complete\n+\n+  # Public: Changes the text selected by the given motion.\n+  #\n+  # count - The number of times to execute.\n+  #\n+  # Returns nothing.\n+  execute: (count=1) ->\n+    _.times count, =>",
        "path": "lib/operators.coffee",
        "position": null,
        "original_position": 22,
        "commit_id": "d3502c36f3e8fffde9ba805fa4681969fdd70238",
        "original_commit_id": "7652b132fc69e9bd408c18fceb0c8a1224729d32",
        "user": {
            "login": "ymendel",
            "id": 597,
            "node_id": "MDQ6VXNlcjU5Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/597?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ymendel",
            "html_url": "https://github.com/ymendel",
            "followers_url": "https://api.github.com/users/ymendel/followers",
            "following_url": "https://api.github.com/users/ymendel/following{/other_user}",
            "gists_url": "https://api.github.com/users/ymendel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ymendel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ymendel/subscriptions",
            "organizations_url": "https://api.github.com/users/ymendel/orgs",
            "repos_url": "https://api.github.com/users/ymendel/repos",
            "events_url": "https://api.github.com/users/ymendel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ymendel/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I was thinking of just making this instantiate a `Delete` and pass `execute` on to it.\n",
        "created_at": "2013-08-06T23:14:32Z",
        "updated_at": "2013-08-07T22:04:00Z",
        "html_url": "https://github.com/atom/vim-mode/pull/10#discussion_r5619639",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/10",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5619639"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/10#discussion_r5619639"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/10"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5619785",
        "pull_request_review_id": null,
        "id": 5619785,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTk3ODU=",
        "diff_hunk": "@@ -129,6 +129,51 @@ class Delete\n     @complete = true\n \n #\n+# It changes everything selected by the following motion.\n+#\n+class Change\n+  motion: null\n+  complete: null\n+  vimState: null\n+\n+  constructor: (@editor, @vimState) ->\n+    @complete = false\n+\n+  isComplete: -> @complete\n+\n+  # Public: Changes the text selected by the given motion.\n+  #\n+  # count - The number of times to execute.\n+  #\n+  # Returns nothing.\n+  execute: (count=1) ->\n+    _.times count, =>",
        "path": "lib/operators.coffee",
        "position": null,
        "original_position": 22,
        "commit_id": "d3502c36f3e8fffde9ba805fa4681969fdd70238",
        "original_commit_id": "7652b132fc69e9bd408c18fceb0c8a1224729d32",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "I agree, I think that's a better approach here. You'll have to expose the `@motion` in the constructor of Delete and set it on instantiation.\n",
        "created_at": "2013-08-06T23:23:46Z",
        "updated_at": "2013-08-07T22:04:00Z",
        "html_url": "https://github.com/atom/vim-mode/pull/10#discussion_r5619785",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/10",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5619785"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/10#discussion_r5619785"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/10"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5645178",
        "pull_request_review_id": null,
        "id": 5645178,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDUxNzg=",
        "diff_hunk": "@@ -129,6 +130,42 @@ class Delete\n     @complete = true\n \n #\n+# It changes everything selected by the following motion.\n+#\n+class Change\n+  motion: null\n+  complete: null\n+  vimState: null\n+\n+  constructor: (@editor, @vimState) ->\n+    @complete = false\n+\n+  isComplete: -> @complete\n+\n+  # Public: Changes the text selected by the given motion.\n+  #\n+  # count - The number of times to execute.\n+  #\n+  # Returns nothing.\n+  execute: (count=1) ->\n+    operator = new Delete(@editor, @vimState, @motion)\n+    operator.execute(count)",
        "path": "lib/operators.coffee",
        "position": 32,
        "original_position": 33,
        "commit_id": "d3502c36f3e8fffde9ba805fa4681969fdd70238",
        "original_commit_id": "b525f0e992cebd2b03fcacbf27fe2b307a02ff3f",
        "user": {
            "login": "ymendel",
            "id": 597,
            "node_id": "MDQ6VXNlcjU5Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/597?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ymendel",
            "html_url": "https://github.com/ymendel",
            "followers_url": "https://api.github.com/users/ymendel/followers",
            "following_url": "https://api.github.com/users/ymendel/following{/other_user}",
            "gists_url": "https://api.github.com/users/ymendel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ymendel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ymendel/subscriptions",
            "organizations_url": "https://api.github.com/users/ymendel/orgs",
            "repos_url": "https://api.github.com/users/ymendel/repos",
            "events_url": "https://api.github.com/users/ymendel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ymendel/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I originally tried `delete` instead of `operator` but it turns out that's a reserved word. So many test failures.\n",
        "created_at": "2013-08-07T21:52:50Z",
        "updated_at": "2013-08-07T22:04:00Z",
        "html_url": "https://github.com/atom/vim-mode/pull/10#discussion_r5645178",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/10",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5645178"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/10#discussion_r5645178"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/10"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5645306",
        "pull_request_review_id": null,
        "id": 5645306,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDUzMDY=",
        "diff_hunk": "@@ -93,7 +93,8 @@ class Delete\n   complete: null\n   vimState: null\n \n-  constructor: (@editor, @vimState) ->\n+  constructor: (@editor, @vimState, motion) ->\n+    @motion = motion",
        "path": "lib/operators.coffee",
        "position": null,
        "original_position": 6,
        "commit_id": "d3502c36f3e8fffde9ba805fa4681969fdd70238",
        "original_commit_id": "b525f0e992cebd2b03fcacbf27fe2b307a02ff3f",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "It's more idiomatic to pull the `@` into the argument definition like `@vimState` in the previous line.\n",
        "created_at": "2013-08-07T21:57:11Z",
        "updated_at": "2013-08-07T22:04:00Z",
        "html_url": "https://github.com/atom/vim-mode/pull/10#discussion_r5645306",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/10",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5645306"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/10#discussion_r5645306"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/10"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5645315",
        "pull_request_review_id": null,
        "id": 5645315,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDUzMTU=",
        "diff_hunk": "@@ -129,6 +130,42 @@ class Delete\n     @complete = true\n \n #\n+# It changes everything selected by the following motion.\n+#\n+class Change\n+  motion: null\n+  complete: null\n+  vimState: null\n+\n+  constructor: (@editor, @vimState) ->\n+    @complete = false\n+\n+  isComplete: -> @complete\n+\n+  # Public: Changes the text selected by the given motion.\n+  #\n+  # count - The number of times to execute.\n+  #\n+  # Returns nothing.\n+  execute: (count=1) ->\n+    operator = new Delete(@editor, @vimState, @motion)\n+    operator.execute(count)",
        "path": "lib/operators.coffee",
        "position": 32,
        "original_position": 33,
        "commit_id": "d3502c36f3e8fffde9ba805fa4681969fdd70238",
        "original_commit_id": "b525f0e992cebd2b03fcacbf27fe2b307a02ff3f",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Noted, I guess it's case sensitive then since Delete didn't trigger an issue.\n",
        "created_at": "2013-08-07T21:57:38Z",
        "updated_at": "2013-08-07T22:04:00Z",
        "html_url": "https://github.com/atom/vim-mode/pull/10#discussion_r5645315",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/10",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5645315"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/10#discussion_r5645315"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/10"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5645621",
        "pull_request_review_id": null,
        "id": 5645621,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDU2MjE=",
        "diff_hunk": "@@ -93,7 +93,8 @@ class Delete\n   complete: null\n   vimState: null\n \n-  constructor: (@editor, @vimState) ->\n+  constructor: (@editor, @vimState, motion) ->\n+    @motion = motion",
        "path": "lib/operators.coffee",
        "position": null,
        "original_position": 6,
        "commit_id": "d3502c36f3e8fffde9ba805fa4681969fdd70238",
        "original_commit_id": "b525f0e992cebd2b03fcacbf27fe2b307a02ff3f",
        "user": {
            "login": "ymendel",
            "id": 597,
            "node_id": "MDQ6VXNlcjU5Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/597?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ymendel",
            "html_url": "https://github.com/ymendel",
            "followers_url": "https://api.github.com/users/ymendel/followers",
            "following_url": "https://api.github.com/users/ymendel/following{/other_user}",
            "gists_url": "https://api.github.com/users/ymendel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ymendel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ymendel/subscriptions",
            "organizations_url": "https://api.github.com/users/ymendel/orgs",
            "repos_url": "https://api.github.com/users/ymendel/repos",
            "events_url": "https://api.github.com/users/ymendel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ymendel/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": ":cool:\n\nI thought that was the case, but I wasn't sure. I'm learning!\n",
        "created_at": "2013-08-07T22:08:43Z",
        "updated_at": "2013-08-07T22:08:43Z",
        "html_url": "https://github.com/atom/vim-mode/pull/10#discussion_r5645621",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/10",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5645621"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/10#discussion_r5645621"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/10"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5701363",
        "pull_request_review_id": null,
        "id": 5701363,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDEzNjM=",
        "diff_hunk": "@@ -85,6 +85,14 @@ describe \"VimState\", ->\n         keydown('escape', element: editor[0])\n         expect(vimState.opStack.length).toBe 0\n \n+    describe \"the ctrl-c keybinding\", ->\n+      it \"clears the operator stack\", ->\n+        keydown('d', element: editor[0])\n+        expect(vimState.opStack.length).toBe 1\n+\n+        editor.trigger keydownEvent('ctrl-c')",
        "path": "spec/vim-mode-spec.coffee",
        "position": null,
        "original_position": 9,
        "commit_id": "0717829febbcb486b134f091ff5cd619bf2c61e5",
        "original_commit_id": "eca62eef2a055c6040f2185c59ffbc4bf4d65c95",
        "user": {
            "login": "ymendel",
            "id": 597,
            "node_id": "MDQ6VXNlcjU5Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/597?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ymendel",
            "html_url": "https://github.com/ymendel",
            "followers_url": "https://api.github.com/users/ymendel/followers",
            "following_url": "https://api.github.com/users/ymendel/following{/other_user}",
            "gists_url": "https://api.github.com/users/ymendel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ymendel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ymendel/subscriptions",
            "organizations_url": "https://api.github.com/users/ymendel/orgs",
            "repos_url": "https://api.github.com/users/ymendel/repos",
            "events_url": "https://api.github.com/users/ymendel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ymendel/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'm not sure the difference between `editor.trigger keydownEvent` and `keydown`. Should these all be consistent?\n",
        "created_at": "2013-08-11T22:14:32Z",
        "updated_at": "2013-08-13T02:15:16Z",
        "html_url": "https://github.com/atom/vim-mode/pull/14#discussion_r5701363",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/14",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5701363"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/14#discussion_r5701363"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/14"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5711705",
        "pull_request_review_id": null,
        "id": 5711705,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTE3MDU=",
        "diff_hunk": "@@ -85,6 +85,14 @@ describe \"VimState\", ->\n         keydown('escape', element: editor[0])\n         expect(vimState.opStack.length).toBe 0\n \n+    describe \"the ctrl-c keybinding\", ->\n+      it \"clears the operator stack\", ->\n+        keydown('d', element: editor[0])\n+        expect(vimState.opStack.length).toBe 1\n+\n+        editor.trigger keydownEvent('ctrl-c')",
        "path": "spec/vim-mode-spec.coffee",
        "position": null,
        "original_position": 9,
        "commit_id": "0717829febbcb486b134f091ff5cd619bf2c61e5",
        "original_commit_id": "eca62eef2a055c6040f2185c59ffbc4bf4d65c95",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "That was the old style of specs, I must have missed the instance you found. The new and proper way to send a key command is to use this instead `keydown('c', ctrl: true, element: editor[0])` (without keydown).\n\nIf you want to make a separate pull and correct all of the other instances that would be great.\n",
        "created_at": "2013-08-12T15:06:59Z",
        "updated_at": "2013-08-13T02:15:16Z",
        "html_url": "https://github.com/atom/vim-mode/pull/14#discussion_r5711705",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/14",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5711705"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/14#discussion_r5711705"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/14"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5719629",
        "pull_request_review_id": null,
        "id": 5719629,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTk2Mjk=",
        "diff_hunk": "@@ -85,6 +85,14 @@ describe \"VimState\", ->\n         keydown('escape', element: editor[0])\n         expect(vimState.opStack.length).toBe 0\n \n+    describe \"the ctrl-c keybinding\", ->\n+      it \"clears the operator stack\", ->\n+        keydown('d', element: editor[0])\n+        expect(vimState.opStack.length).toBe 1\n+\n+        editor.trigger keydownEvent('ctrl-c')",
        "path": "spec/vim-mode-spec.coffee",
        "position": null,
        "original_position": 9,
        "commit_id": "0717829febbcb486b134f091ff5cd619bf2c61e5",
        "original_commit_id": "eca62eef2a055c6040f2185c59ffbc4bf4d65c95",
        "user": {
            "login": "ymendel",
            "id": 597,
            "node_id": "MDQ6VXNlcjU5Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/597?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ymendel",
            "html_url": "https://github.com/ymendel",
            "followers_url": "https://api.github.com/users/ymendel/followers",
            "following_url": "https://api.github.com/users/ymendel/following{/other_user}",
            "gists_url": "https://api.github.com/users/ymendel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ymendel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ymendel/subscriptions",
            "organizations_url": "https://api.github.com/users/ymendel/orgs",
            "repos_url": "https://api.github.com/users/ymendel/repos",
            "events_url": "https://api.github.com/users/ymendel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ymendel/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I made that change here. I'm good with making a separate PR, but probably after my outstanding ones get merged. There may already be interesting conflicts or weird stuff going on, and I don't want to miss anything.\n",
        "created_at": "2013-08-12T19:57:25Z",
        "updated_at": "2013-08-13T02:15:16Z",
        "html_url": "https://github.com/atom/vim-mode/pull/14#discussion_r5719629",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/14",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5719629"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/14#discussion_r5719629"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/14"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5696980",
        "pull_request_review_id": null,
        "id": 5696980,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTY5ODA=",
        "diff_hunk": "@@ -74,6 +74,7 @@ class VimState\n       'delete-right': => [new operators.Delete(@editor), new motions.MoveRight(@editor)]\n       'delete-to-last-character-of-line': => [new operators.Delete(@editor), new motions.MoveToLastCharacterOfLine(@editor)]\n       'yank': => @linewiseAliasedOperator(operators.Yank)\n+      'yank-line': => [new operators.Yank(@editor, @), new motions.MoveToLastCharacterOfLine(@editor)]",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 4,
        "commit_id": "2ffae4a5d38111717fa22f888ec6c19ef8ac78a4",
        "original_commit_id": "f9614acfe49b4394b8f94c1957408d8c0696f774",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "It's seems as though this is an alias for yy (http://vimhelp.appspot.com/change.txt.html#Y), which is implemented using motions.MoveToLine which makes the motion linewise instead of to the end of the line.\n",
        "created_at": "2013-08-10T04:56:32Z",
        "updated_at": "2013-08-13T16:53:58Z",
        "html_url": "https://github.com/atom/vim-mode/pull/12#discussion_r5696980",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/12",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5696980"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/12#discussion_r5696980"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/12"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5697034",
        "pull_request_review_id": null,
        "id": 5697034,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTcwMzQ=",
        "diff_hunk": "@@ -74,6 +74,7 @@ class VimState\n       'delete-right': => [new operators.Delete(@editor), new motions.MoveRight(@editor)]\n       'delete-to-last-character-of-line': => [new operators.Delete(@editor), new motions.MoveToLastCharacterOfLine(@editor)]\n       'yank': => @linewiseAliasedOperator(operators.Yank)\n+      'yank-line': => [new operators.Yank(@editor, @), new motions.MoveToLastCharacterOfLine(@editor)]",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 4,
        "commit_id": "2ffae4a5d38111717fa22f888ec6c19ef8ac78a4",
        "original_commit_id": "f9614acfe49b4394b8f94c1957408d8c0696f774",
        "user": {
            "login": "ymendel",
            "id": 597,
            "node_id": "MDQ6VXNlcjU5Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/597?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ymendel",
            "html_url": "https://github.com/ymendel",
            "followers_url": "https://api.github.com/users/ymendel/followers",
            "following_url": "https://api.github.com/users/ymendel/following{/other_user}",
            "gists_url": "https://api.github.com/users/ymendel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ymendel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ymendel/subscriptions",
            "organizations_url": "https://api.github.com/users/ymendel/orgs",
            "repos_url": "https://api.github.com/users/ymendel/repos",
            "events_url": "https://api.github.com/users/ymendel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ymendel/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I can try that. I wasn't getting anything in the register, though.\n",
        "created_at": "2013-08-10T05:12:40Z",
        "updated_at": "2013-08-13T16:53:58Z",
        "html_url": "https://github.com/atom/vim-mode/pull/12#discussion_r5697034",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/12",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5697034"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/12#discussion_r5697034"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/12"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5712330",
        "pull_request_review_id": null,
        "id": 5712330,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTIzMzA=",
        "diff_hunk": "@@ -371,6 +371,31 @@ describe \"VimState\", ->\n \n         expect(vimState.getRegister('\"').text).toBe \"345\"\n \n+    describe \"the Y keybinding\", ->\n+      beforeEach ->\n+        editor.getBuffer().setText \"012 345\\nabc\\n\"\n+        editor.setCursorScreenPosition [0, 4]\n+\n+      it \"saves the line to the default register\", ->\n+        keydown('Y', element: editor[0])",
        "path": "spec/vim-mode-spec.coffee",
        "position": null,
        "original_position": 10,
        "commit_id": "2ffae4a5d38111717fa22f888ec6c19ef8ac78a4",
        "original_commit_id": "91cbe8f02f167817902ac28b04b6559df8d1afce",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "This needs to be `keydown('Y', shift:true, element: editor[0])` yes it's kinda dumb but I hadn't been able to determine a better way.\n",
        "created_at": "2013-08-12T15:28:40Z",
        "updated_at": "2013-08-13T16:53:58Z",
        "html_url": "https://github.com/atom/vim-mode/pull/12#discussion_r5712330",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/12",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5712330"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/12#discussion_r5712330"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/12"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5720568",
        "pull_request_review_id": null,
        "id": 5720568,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjA1Njg=",
        "diff_hunk": "@@ -371,6 +371,31 @@ describe \"VimState\", ->\n \n         expect(vimState.getRegister('\"').text).toBe \"345\"\n \n+    describe \"the Y keybinding\", ->\n+      beforeEach ->\n+        editor.getBuffer().setText \"012 345\\nabc\\n\"\n+        editor.setCursorScreenPosition [0, 4]\n+\n+      it \"saves the line to the default register\", ->\n+        keydown('Y', element: editor[0])",
        "path": "spec/vim-mode-spec.coffee",
        "position": null,
        "original_position": 10,
        "commit_id": "2ffae4a5d38111717fa22f888ec6c19ef8ac78a4",
        "original_commit_id": "91cbe8f02f167817902ac28b04b6559df8d1afce",
        "user": {
            "login": "ymendel",
            "id": 597,
            "node_id": "MDQ6VXNlcjU5Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/597?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ymendel",
            "html_url": "https://github.com/ymendel",
            "followers_url": "https://api.github.com/users/ymendel/followers",
            "following_url": "https://api.github.com/users/ymendel/following{/other_user}",
            "gists_url": "https://api.github.com/users/ymendel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ymendel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ymendel/subscriptions",
            "organizations_url": "https://api.github.com/users/ymendel/orgs",
            "repos_url": "https://api.github.com/users/ymendel/repos",
            "events_url": "https://api.github.com/users/ymendel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ymendel/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Oh dang, I think that will fix all sorts of things. Yay for learning!\n![gi-joe-the-battle-shirt](https://f.cloud.github.com/assets/597/950383/2909db80-038e-11e3-82e8-4c16ae083093.png)\n",
        "created_at": "2013-08-12T20:31:27Z",
        "updated_at": "2013-08-13T16:53:58Z",
        "html_url": "https://github.com/atom/vim-mode/pull/12#discussion_r5720568",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/12",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5720568"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/12#discussion_r5720568"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/12"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5726896",
        "pull_request_review_id": null,
        "id": 5726896,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjY4OTY=",
        "diff_hunk": "@@ -3,7 +3,7 @@ $ = require 'jquery'\n RootView = require 'root-view'\n Keymap = require 'keymap'\n \n-describe \"VimState\", ->\n+fdescribe \"VimState\", ->",
        "path": "spec/vim-mode-spec.coffee",
        "position": null,
        "original_position": 5,
        "commit_id": "48e6d513de411a2fb1117db8e09443c28fa387ee",
        "original_commit_id": "3b7695256b901faf917cd67ee8477648b2bc54b0",
        "user": {
            "login": "ymendel",
            "id": 597,
            "node_id": "MDQ6VXNlcjU5Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/597?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ymendel",
            "html_url": "https://github.com/ymendel",
            "followers_url": "https://api.github.com/users/ymendel/followers",
            "following_url": "https://api.github.com/users/ymendel/following{/other_user}",
            "gists_url": "https://api.github.com/users/ymendel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ymendel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ymendel/subscriptions",
            "organizations_url": "https://api.github.com/users/ymendel/orgs",
            "repos_url": "https://api.github.com/users/ymendel/repos",
            "events_url": "https://api.github.com/users/ymendel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ymendel/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Don't forget to get rid of this.\n",
        "created_at": "2013-08-13T01:57:02Z",
        "updated_at": "2013-08-13T17:36:41Z",
        "html_url": "https://github.com/atom/vim-mode/pull/19#discussion_r5726896",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/19",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5726896"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/19#discussion_r5726896"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/19"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5727440",
        "pull_request_review_id": null,
        "id": 5727440,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Mjc0NDA=",
        "diff_hunk": "@@ -3,7 +3,7 @@ $ = require 'jquery'\n RootView = require 'root-view'\n Keymap = require 'keymap'\n \n-describe \"VimState\", ->\n+fdescribe \"VimState\", ->",
        "path": "spec/vim-mode-spec.coffee",
        "position": null,
        "original_position": 5,
        "commit_id": "48e6d513de411a2fb1117db8e09443c28fa387ee",
        "original_commit_id": "3b7695256b901faf917cd67ee8477648b2bc54b0",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "good catch, fixed.\n\nOn Mon, Aug 12, 2013 at 6:57 PM, Yossef Mendelssohn <\nnotifications@github.com> wrote:\n\n> In spec/vim-mode-spec.coffee:\n> \n> > @@ -3,7 +3,7 @@ $ = require 'jquery'\n> >  RootView = require 'root-view'\n> >  Keymap = require 'keymap'\n> > \n> > -describe \"VimState\", ->\n> > +fdescribe \"VimState\", ->\n> \n> Don't forget to get rid of this.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/atom/vim-mode/pull/19/files#r5726896\n> .\n",
        "created_at": "2013-08-13T03:07:23Z",
        "updated_at": "2013-08-13T17:36:41Z",
        "html_url": "https://github.com/atom/vim-mode/pull/19#discussion_r5727440",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/19",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5727440"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/19#discussion_r5727440"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/19"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5702417",
        "pull_request_review_id": null,
        "id": 5702417,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDI0MTc=",
        "diff_hunk": "@@ -151,6 +151,7 @@ class Change\n     operator.execute(count)\n \n     @vimState.activateInsertMode()\n+    @editor.moveCursorRight() if @motion.constructor.name == 'MoveToLastCharacterOfLine'",
        "path": "lib/operators.coffee",
        "position": null,
        "original_position": 4,
        "commit_id": "520b2f6a13bde8e7629a0204ae6bbdd70a888ebf",
        "original_commit_id": "e22a2e381dfb1ccd83158fdc9b25da4c6d5c31c1",
        "user": {
            "login": "ymendel",
            "id": 597,
            "node_id": "MDQ6VXNlcjU5Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/597?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ymendel",
            "html_url": "https://github.com/ymendel",
            "followers_url": "https://api.github.com/users/ymendel/followers",
            "following_url": "https://api.github.com/users/ymendel/following{/other_user}",
            "gists_url": "https://api.github.com/users/ymendel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ymendel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ymendel/subscriptions",
            "organizations_url": "https://api.github.com/users/ymendel/orgs",
            "repos_url": "https://api.github.com/users/ymendel/repos",
            "events_url": "https://api.github.com/users/ymendel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ymendel/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I wouldn't say this is the _worst_ way of doing this, but definitely not the best.\n",
        "created_at": "2013-08-12T02:57:45Z",
        "updated_at": "2013-08-14T20:15:31Z",
        "html_url": "https://github.com/atom/vim-mode/pull/13#discussion_r5702417",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/13",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5702417"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/13#discussion_r5702417"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/13"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5702648",
        "pull_request_review_id": null,
        "id": 5702648,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDI2NDg=",
        "diff_hunk": "@@ -151,6 +151,7 @@ class Change\n     operator.execute(count)\n \n     @vimState.activateInsertMode()\n+    @editor.moveCursorRight() if @motion.constructor.name == 'MoveToLastCharacterOfLine'",
        "path": "lib/operators.coffee",
        "position": null,
        "original_position": 4,
        "commit_id": "520b2f6a13bde8e7629a0204ae6bbdd70a888ebf",
        "original_commit_id": "e22a2e381dfb1ccd83158fdc9b25da4c6d5c31c1",
        "user": {
            "login": "ymendel",
            "id": 597,
            "node_id": "MDQ6VXNlcjU5Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/597?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ymendel",
            "html_url": "https://github.com/ymendel",
            "followers_url": "https://api.github.com/users/ymendel/followers",
            "following_url": "https://api.github.com/users/ymendel/following{/other_user}",
            "gists_url": "https://api.github.com/users/ymendel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ymendel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ymendel/subscriptions",
            "organizations_url": "https://api.github.com/users/ymendel/orgs",
            "repos_url": "https://api.github.com/users/ymendel/repos",
            "events_url": "https://api.github.com/users/ymendel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ymendel/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I could add some method on the `MoveToLastCharacterOfLine` motion (like `MoveToLine` has `isLinewise`), but that seems ugly in a different way.\n",
        "created_at": "2013-08-12T03:44:58Z",
        "updated_at": "2013-08-14T20:15:31Z",
        "html_url": "https://github.com/atom/vim-mode/pull/13#discussion_r5702648",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/13",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5702648"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/13#discussion_r5702648"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/13"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5712426",
        "pull_request_review_id": null,
        "id": 5712426,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTI0MjY=",
        "diff_hunk": "@@ -151,6 +151,7 @@ class Change\n     operator.execute(count)\n \n     @vimState.activateInsertMode()\n+    @editor.moveCursorRight() if @motion.constructor.name == 'MoveToLastCharacterOfLine'",
        "path": "lib/operators.coffee",
        "position": null,
        "original_position": 4,
        "commit_id": "520b2f6a13bde8e7629a0204ae6bbdd70a888ebf",
        "original_commit_id": "e22a2e381dfb1ccd83158fdc9b25da4c6d5c31c1",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Yeah, I'd rather not start down this path. I'll have to think about this. I'm travelling today so I probably won't have the headspace today to do it but I'll see if I can get to it when I get back.\n",
        "created_at": "2013-08-12T15:32:25Z",
        "updated_at": "2013-08-14T20:15:31Z",
        "html_url": "https://github.com/atom/vim-mode/pull/13#discussion_r5712426",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/13",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5712426"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/13#discussion_r5712426"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/13"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5702850",
        "pull_request_review_id": null,
        "id": 5702850,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDI4NTA=",
        "diff_hunk": "@@ -27,8 +27,16 @@ class InsertBelowWithNewline extends Command\n \n class Substitute extends Command\n   execute: (count=1) ->\n-    @editor.delete()\n+    _.times count, =>\n+      @editor.delete()",
        "path": "lib/commands.coffee",
        "position": null,
        "original_position": 6,
        "commit_id": "7e31406d315c0d4ad90ba3244257447cd12b2f78",
        "original_commit_id": "c392081926f1e591915afc5a18d1e76cd54dd77a",
        "user": {
            "login": "ymendel",
            "id": 597,
            "node_id": "MDQ6VXNlcjU5Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/597?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ymendel",
            "html_url": "https://github.com/ymendel",
            "followers_url": "https://api.github.com/users/ymendel/followers",
            "following_url": "https://api.github.com/users/ymendel/following{/other_user}",
            "gists_url": "https://api.github.com/users/ymendel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ymendel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ymendel/subscriptions",
            "organizations_url": "https://api.github.com/users/ymendel/orgs",
            "repos_url": "https://api.github.com/users/ymendel/repos",
            "events_url": "https://api.github.com/users/ymendel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ymendel/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Possibly what I should be doing here is selecting `count` characters and then deleting the selection. That approach doesn't seem to be working well with `SubstituteLine`, though.\n",
        "created_at": "2013-08-12T04:32:08Z",
        "updated_at": "2013-08-14T21:36:11Z",
        "html_url": "https://github.com/atom/vim-mode/pull/17#discussion_r5702850",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/17",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5702850"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/17#discussion_r5702850"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/17"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5702863",
        "pull_request_review_id": null,
        "id": 5702863,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDI4NjM=",
        "diff_hunk": "@@ -27,8 +27,16 @@ class InsertBelowWithNewline extends Command\n \n class Substitute extends Command\n   execute: (count=1) ->\n-    @editor.delete()\n+    _.times count, =>\n+      @editor.delete()",
        "path": "lib/commands.coffee",
        "position": null,
        "original_position": 6,
        "commit_id": "7e31406d315c0d4ad90ba3244257447cd12b2f78",
        "original_commit_id": "c392081926f1e591915afc5a18d1e76cd54dd77a",
        "user": {
            "login": "ymendel",
            "id": 597,
            "node_id": "MDQ6VXNlcjU5Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/597?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ymendel",
            "html_url": "https://github.com/ymendel",
            "followers_url": "https://api.github.com/users/ymendel/followers",
            "following_url": "https://api.github.com/users/ymendel/following{/other_user}",
            "gists_url": "https://api.github.com/users/ymendel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ymendel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ymendel/subscriptions",
            "organizations_url": "https://api.github.com/users/ymendel/orgs",
            "repos_url": "https://api.github.com/users/ymendel/repos",
            "events_url": "https://api.github.com/users/ymendel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ymendel/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "If the select-and-delete approach _does_ work, however, it could make things nicer in other places, like undoing multiple-line deletions all at once instead of one undo per line.\n",
        "created_at": "2013-08-12T04:34:02Z",
        "updated_at": "2013-08-14T21:36:11Z",
        "html_url": "https://github.com/atom/vim-mode/pull/17#discussion_r5702863",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/17",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5702863"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/17#discussion_r5702863"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/17"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5712473",
        "pull_request_review_id": null,
        "id": 5712473,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTI0NzM=",
        "diff_hunk": "@@ -27,8 +27,16 @@ class InsertBelowWithNewline extends Command\n \n class Substitute extends Command\n   execute: (count=1) ->\n-    @editor.delete()\n+    _.times count, =>\n+      @editor.delete()",
        "path": "lib/commands.coffee",
        "position": null,
        "original_position": 6,
        "commit_id": "7e31406d315c0d4ad90ba3244257447cd12b2f78",
        "original_commit_id": "c392081926f1e591915afc5a18d1e76cd54dd77a",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Yeah, this brings up a good point. I knew `5dd` doesn't put the right thing into `\"` register after deleting (only the last line). \n\nI prefer the select-delete approach but it sounds like we might have to clean up some other things to get that but I think it's worth it.\n",
        "created_at": "2013-08-12T15:34:55Z",
        "updated_at": "2013-08-14T21:36:11Z",
        "html_url": "https://github.com/atom/vim-mode/pull/17#discussion_r5712473",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/17",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5712473"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/17#discussion_r5712473"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/17"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5712530",
        "pull_request_review_id": null,
        "id": 5712530,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTI1MzA=",
        "diff_hunk": "@@ -27,8 +27,16 @@ class InsertBelowWithNewline extends Command\n \n class Substitute extends Command\n   execute: (count=1) ->\n-    @editor.delete()\n+    _.times count, =>\n+      @editor.delete()\n+    @vimState.activateInsertMode()\n+\n+class SubstituteLine extends Command\n+  execute: (count=1) ->\n+    @editor.moveCursorToBeginningOfLine()",
        "path": "lib/commands.coffee",
        "position": null,
        "original_position": 11,
        "commit_id": "7e31406d315c0d4ad90ba3244257447cd12b2f78",
        "original_commit_id": "478a1024dbb90c1db3be716fdad336fa668c36ad",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "I believe atom editor has a deleteLine method (or something close to that) which would be better here.\n",
        "created_at": "2013-08-12T15:37:25Z",
        "updated_at": "2013-08-14T21:36:11Z",
        "html_url": "https://github.com/atom/vim-mode/pull/17#discussion_r5712530",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/17",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5712530"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/17#discussion_r5712530"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/17"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5721169",
        "pull_request_review_id": null,
        "id": 5721169,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjExNjk=",
        "diff_hunk": "@@ -27,8 +27,16 @@ class InsertBelowWithNewline extends Command\n \n class Substitute extends Command\n   execute: (count=1) ->\n-    @editor.delete()\n+    _.times count, =>\n+      @editor.delete()\n+    @vimState.activateInsertMode()\n+\n+class SubstituteLine extends Command\n+  execute: (count=1) ->\n+    @editor.moveCursorToBeginningOfLine()",
        "path": "lib/commands.coffee",
        "position": null,
        "original_position": 11,
        "commit_id": "7e31406d315c0d4ad90ba3244257447cd12b2f78",
        "original_commit_id": "478a1024dbb90c1db3be716fdad336fa668c36ad",
        "user": {
            "login": "ymendel",
            "id": 597,
            "node_id": "MDQ6VXNlcjU5Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/597?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ymendel",
            "html_url": "https://github.com/ymendel",
            "followers_url": "https://api.github.com/users/ymendel/followers",
            "following_url": "https://api.github.com/users/ymendel/following{/other_user}",
            "gists_url": "https://api.github.com/users/ymendel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ymendel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ymendel/subscriptions",
            "organizations_url": "https://api.github.com/users/ymendel/orgs",
            "repos_url": "https://api.github.com/users/ymendel/repos",
            "events_url": "https://api.github.com/users/ymendel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ymendel/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I tried `@editor.deleteLine()` and specs failed. It deletes the newline as well.\n\nSo that could be fixed by using `deleteLine` and then adding a newline, but is that actually better? Or maybe `deleteLine` could get an `leaveNewline` option.\n",
        "created_at": "2013-08-12T20:55:27Z",
        "updated_at": "2013-08-14T21:36:11Z",
        "html_url": "https://github.com/atom/vim-mode/pull/17#discussion_r5721169",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/17",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5721169"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/17#discussion_r5721169"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/17"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5776874",
        "pull_request_review_id": null,
        "id": 5776874,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzY4NzQ=",
        "diff_hunk": "@@ -132,6 +132,29 @@ describe \"VimState\", ->\n         expect(editor.getCursorScreenPosition()).toEqual [0, 0]\n         expect(vimState.getRegister('\"').text).toBe '0'\n \n+      it \"deletes count characters to the right and enters insert mode\", ->\n+        editor.setText(\"012345\")\n+        editor.setCursorScreenPosition([0, 1])\n+\n+        keydown('3', element: editor[0])\n+        keydown('s', element: editor[0])\n+        expect(editor).toHaveClass 'insert-mode'\n+        expect(editor.getText()).toBe '045'\n+        expect(editor.getCursorScreenPosition()).toEqual [0, 1]\n+        expect(vimState.getRegister('\"').text).toBe '123'\n+\n+    describe \"the S keybinding\", ->\n+      it \"deletes the entire line and enters insert mode\", ->\n+        editor.setText(\"12345\\nabcde\\nABCDE\")\n+        editor.setCursorScreenPosition([1,3])\n+\n+        keydown('S', shift: true, element: editor[0])\n+        expect(editor).toHaveClass 'insert-mode'\n+        expect(editor.getText()).toBe \"12345\\n\\nABCDE\"\n+        expect(editor.getCursorScreenPosition()).toEqual [1, 0]\n+        expect(vimState.getRegister('\"').text).toBe \"abcde\\n\"\n+        expect(vimState.getRegister('\"').type).toBe \"linewise\"",
        "path": "spec/vim-mode-spec.coffee",
        "position": 25,
        "original_position": 25,
        "commit_id": "7e31406d315c0d4ad90ba3244257447cd12b2f78",
        "original_commit_id": "8d21c5e7fa114fd1baeb63ca218c33a4ceb5240d",
        "user": {
            "login": "ymendel",
            "id": 597,
            "node_id": "MDQ6VXNlcjU5Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/597?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ymendel",
            "html_url": "https://github.com/ymendel",
            "followers_url": "https://api.github.com/users/ymendel/followers",
            "following_url": "https://api.github.com/users/ymendel/following{/other_user}",
            "gists_url": "https://api.github.com/users/ymendel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ymendel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ymendel/subscriptions",
            "organizations_url": "https://api.github.com/users/ymendel/orgs",
            "repos_url": "https://api.github.com/users/ymendel/repos",
            "events_url": "https://api.github.com/users/ymendel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ymendel/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "oooh, this type check is new\n",
        "created_at": "2013-08-14T21:26:45Z",
        "updated_at": "2013-08-14T21:36:11Z",
        "html_url": "https://github.com/atom/vim-mode/pull/17#discussion_r5776874",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/17",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5776874"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/17#discussion_r5776874"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/17"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5776929",
        "pull_request_review_id": null,
        "id": 5776929,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzY5Mjk=",
        "diff_hunk": "@@ -27,8 +27,20 @@ class InsertBelowWithNewline extends Command\n \n class Substitute extends Command\n   execute: (count=1) ->\n+    _.times count, =>\n+      @editor.selectRight()\n     @editor.delete()\n     @vimState.activateInsertMode()\n \n+class SubstituteLine extends Command\n+  execute: (count=1) ->\n+    @editor.moveCursorToBeginningOfLine()\n+    _.times count, =>\n+      @editor.selectDown()\n+    @editor.delete()",
        "path": "lib/commands.coffee",
        "position": 14,
        "original_position": 14,
        "commit_id": "7e31406d315c0d4ad90ba3244257447cd12b2f78",
        "original_commit_id": "8d21c5e7fa114fd1baeb63ca218c33a4ceb5240d",
        "user": {
            "login": "ymendel",
            "id": 597,
            "node_id": "MDQ6VXNlcjU5Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/597?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ymendel",
            "html_url": "https://github.com/ymendel",
            "followers_url": "https://api.github.com/users/ymendel/followers",
            "following_url": "https://api.github.com/users/ymendel/following{/other_user}",
            "gists_url": "https://api.github.com/users/ymendel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ymendel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ymendel/subscriptions",
            "organizations_url": "https://api.github.com/users/ymendel/orgs",
            "repos_url": "https://api.github.com/users/ymendel/repos",
            "events_url": "https://api.github.com/users/ymendel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ymendel/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "So this automatically operates on the selection? (Instead of needing to do something like `@editor.getSelection().delete()`?\n\nJust asking for info, not questioning the interface.\n",
        "created_at": "2013-08-14T21:29:09Z",
        "updated_at": "2013-08-14T21:36:11Z",
        "html_url": "https://github.com/atom/vim-mode/pull/17#discussion_r5776929",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/17",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5776929"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/17#discussion_r5776929"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/17"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5777026",
        "pull_request_review_id": null,
        "id": 5777026,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzcwMjY=",
        "diff_hunk": "@@ -132,6 +132,29 @@ describe \"VimState\", ->\n         expect(editor.getCursorScreenPosition()).toEqual [0, 0]\n         expect(vimState.getRegister('\"').text).toBe '0'\n \n+      it \"deletes count characters to the right and enters insert mode\", ->\n+        editor.setText(\"012345\")\n+        editor.setCursorScreenPosition([0, 1])\n+\n+        keydown('3', element: editor[0])\n+        keydown('s', element: editor[0])\n+        expect(editor).toHaveClass 'insert-mode'\n+        expect(editor.getText()).toBe '045'\n+        expect(editor.getCursorScreenPosition()).toEqual [0, 1]\n+        expect(vimState.getRegister('\"').text).toBe '123'\n+\n+    describe \"the S keybinding\", ->\n+      it \"deletes the entire line and enters insert mode\", ->\n+        editor.setText(\"12345\\nabcde\\nABCDE\")\n+        editor.setCursorScreenPosition([1,3])\n+\n+        keydown('S', shift: true, element: editor[0])\n+        expect(editor).toHaveClass 'insert-mode'\n+        expect(editor.getText()).toBe \"12345\\n\\nABCDE\"\n+        expect(editor.getCursorScreenPosition()).toEqual [1, 0]\n+        expect(vimState.getRegister('\"').text).toBe \"abcde\\n\"\n+        expect(vimState.getRegister('\"').type).toBe \"linewise\"",
        "path": "spec/vim-mode-spec.coffee",
        "position": 25,
        "original_position": 25,
        "commit_id": "7e31406d315c0d4ad90ba3244257447cd12b2f78",
        "original_commit_id": "8d21c5e7fa114fd1baeb63ca218c33a4ceb5240d",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Yeah, it's kinda hacky. There might be a better way here that I don't see\nyet.\n",
        "created_at": "2013-08-14T21:32:16Z",
        "updated_at": "2013-08-14T21:36:11Z",
        "html_url": "https://github.com/atom/vim-mode/pull/17#discussion_r5777026",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/17",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5777026"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/17#discussion_r5777026"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/17"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5777096",
        "pull_request_review_id": null,
        "id": 5777096,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzcwOTY=",
        "diff_hunk": "@@ -27,8 +27,20 @@ class InsertBelowWithNewline extends Command\n \n class Substitute extends Command\n   execute: (count=1) ->\n+    _.times count, =>\n+      @editor.selectRight()\n     @editor.delete()\n     @vimState.activateInsertMode()\n \n+class SubstituteLine extends Command\n+  execute: (count=1) ->\n+    @editor.moveCursorToBeginningOfLine()\n+    _.times count, =>\n+      @editor.selectDown()\n+    @editor.delete()",
        "path": "lib/commands.coffee",
        "position": 14,
        "original_position": 14,
        "commit_id": "7e31406d315c0d4ad90ba3244257447cd12b2f78",
        "original_commit_id": "8d21c5e7fa114fd1baeb63ca218c33a4ceb5240d",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Yeah it delegates through and we should clean up the other spots.\n\nTechnically it's slightly different, as it will delete multiple selections rather than just the last selected one. Not sure how to handle the multiple cursor stuff. In my mind it's another rabbit hole like the buffer lines vs screen lines, which will have to be sorted out some day just not today.\n",
        "created_at": "2013-08-14T21:35:02Z",
        "updated_at": "2013-08-14T21:36:11Z",
        "html_url": "https://github.com/atom/vim-mode/pull/17#discussion_r5777096",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/17",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5777096"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/17#discussion_r5777096"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/17"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5755235",
        "pull_request_review_id": null,
        "id": 5755235,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTUyMzU=",
        "diff_hunk": "@@ -357,6 +358,18 @@ describe \"VimState\", ->\n         expect(vimState.getRegister('\"').text).toBe \"012 345\\n\"\n         expect(editor.getCursorScreenPosition()).toEqual([0,4])\n \n+      it \"treats a fold like a single line\", ->\n+        text = \"def something\\n  true\\nend\\n\"\n+        editor.getBuffer().setText text\n+        displayBuffer = new DisplayBuffer(editor.getBuffer())",
        "path": "spec/vim-mode-spec.coffee",
        "position": null,
        "original_position": 15,
        "commit_id": "083e45d97cc6d4144cc0e1821d706ba2d4045005",
        "original_commit_id": "a5328b0f91a3c64eda7a2b31b7692a12fc2bf1ae",
        "user": {
            "login": "ymendel",
            "id": 597,
            "node_id": "MDQ6VXNlcjU5Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/597?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ymendel",
            "html_url": "https://github.com/ymendel",
            "followers_url": "https://api.github.com/users/ymendel/followers",
            "following_url": "https://api.github.com/users/ymendel/following{/other_user}",
            "gists_url": "https://api.github.com/users/ymendel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ymendel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ymendel/subscriptions",
            "organizations_url": "https://api.github.com/users/ymendel/orgs",
            "repos_url": "https://api.github.com/users/ymendel/repos",
            "events_url": "https://api.github.com/users/ymendel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ymendel/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think what I should have here is something like `editor.getDisplayBuffer()`, but that doesn't exist. `editor.activeEditSession.displayBuffer` exists, but I don't know if \"active edit session\" is a thing in this context.\n",
        "created_at": "2013-08-14T03:45:18Z",
        "updated_at": "2013-08-15T00:52:49Z",
        "html_url": "https://github.com/atom/vim-mode/pull/24#discussion_r5755235",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/24",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5755235"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/24#discussion_r5755235"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/24"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5755240",
        "pull_request_review_id": null,
        "id": 5755240,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTUyNDA=",
        "diff_hunk": "@@ -357,6 +358,18 @@ describe \"VimState\", ->\n         expect(vimState.getRegister('\"').text).toBe \"012 345\\n\"\n         expect(editor.getCursorScreenPosition()).toEqual([0,4])\n \n+      it \"treats a fold like a single line\", ->\n+        text = \"def something\\n  true\\nend\\n\"\n+        editor.getBuffer().setText text\n+        displayBuffer = new DisplayBuffer(editor.getBuffer())\n+        displayBuffer.createFold(0,2)\n+\n+        keydown('y', element: editor[0])\n+        keydown('y', element: editor[0])\n+\n+        expect(vimState.getRegister('\"').text).toBe text\n+        expect(editor.getCursorScreenPosition()).toEqual([0,4])\n+",
        "path": "spec/vim-mode-spec.coffee",
        "position": null,
        "original_position": 23,
        "commit_id": "083e45d97cc6d4144cc0e1821d706ba2d4045005",
        "original_commit_id": "a5328b0f91a3c64eda7a2b31b7692a12fc2bf1ae",
        "user": {
            "login": "ymendel",
            "id": 597,
            "node_id": "MDQ6VXNlcjU5Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/597?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ymendel",
            "html_url": "https://github.com/ymendel",
            "followers_url": "https://api.github.com/users/ymendel/followers",
            "following_url": "https://api.github.com/users/ymendel/following{/other_user}",
            "gists_url": "https://api.github.com/users/ymendel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ymendel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ymendel/subscriptions",
            "organizations_url": "https://api.github.com/users/ymendel/orgs",
            "repos_url": "https://api.github.com/users/ymendel/repos",
            "events_url": "https://api.github.com/users/ymendel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ymendel/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Here I'd want to check if the fold is still there (still folded). I think that's where making a new `DisplayBuffer` from `editor.getBuffer()` is obviously incorrect.\n",
        "created_at": "2013-08-14T03:46:14Z",
        "updated_at": "2013-08-15T00:52:49Z",
        "html_url": "https://github.com/atom/vim-mode/pull/24#discussion_r5755240",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/24",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5755240"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/24#discussion_r5755240"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/24"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5755273",
        "pull_request_review_id": null,
        "id": 5755273,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTUyNzM=",
        "diff_hunk": "@@ -357,6 +358,18 @@ describe \"VimState\", ->\n         expect(vimState.getRegister('\"').text).toBe \"012 345\\n\"\n         expect(editor.getCursorScreenPosition()).toEqual([0,4])\n \n+      it \"treats a fold like a single line\", ->\n+        text = \"def something\\n  true\\nend\\n\"\n+        editor.getBuffer().setText text\n+        displayBuffer = new DisplayBuffer(editor.getBuffer())",
        "path": "spec/vim-mode-spec.coffee",
        "position": null,
        "original_position": 15,
        "commit_id": "083e45d97cc6d4144cc0e1821d706ba2d4045005",
        "original_commit_id": "a5328b0f91a3c64eda7a2b31b7692a12fc2bf1ae",
        "user": {
            "login": "nathansobo",
            "id": 1789,
            "node_id": "MDQ6VXNlcjE3ODk=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1789?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nathansobo",
            "html_url": "https://github.com/nathansobo",
            "followers_url": "https://api.github.com/users/nathansobo/followers",
            "following_url": "https://api.github.com/users/nathansobo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nathansobo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nathansobo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nathansobo/subscriptions",
            "organizations_url": "https://api.github.com/users/nathansobo/orgs",
            "repos_url": "https://api.github.com/users/nathansobo/repos",
            "events_url": "https://api.github.com/users/nathansobo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nathansobo/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "`activeEditSession` is a bit of a relic and needs to be renamed to `editSession`. Previously, weve added methods to `EditSession` that delegate through to `DisplayBuffer` as needed, so we don't require people to bother with `DisplayBuffer`. Perhaps we should give up and just add `getDisplayBuffer`.\n",
        "created_at": "2013-08-14T03:50:40Z",
        "updated_at": "2013-08-15T00:52:49Z",
        "html_url": "https://github.com/atom/vim-mode/pull/24#discussion_r5755273",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/24",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5755273"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/24#discussion_r5755273"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/24"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5755309",
        "pull_request_review_id": null,
        "id": 5755309,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTUzMDk=",
        "diff_hunk": "@@ -357,6 +358,18 @@ describe \"VimState\", ->\n         expect(vimState.getRegister('\"').text).toBe \"012 345\\n\"\n         expect(editor.getCursorScreenPosition()).toEqual([0,4])\n \n+      it \"treats a fold like a single line\", ->\n+        text = \"def something\\n  true\\nend\\n\"\n+        editor.getBuffer().setText text\n+        displayBuffer = new DisplayBuffer(editor.getBuffer())",
        "path": "spec/vim-mode-spec.coffee",
        "position": null,
        "original_position": 15,
        "commit_id": "083e45d97cc6d4144cc0e1821d706ba2d4045005",
        "original_commit_id": "a5328b0f91a3c64eda7a2b31b7692a12fc2bf1ae",
        "user": {
            "login": "nathansobo",
            "id": 1789,
            "node_id": "MDQ6VXNlcjE3ODk=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1789?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nathansobo",
            "html_url": "https://github.com/nathansobo",
            "followers_url": "https://api.github.com/users/nathansobo/followers",
            "following_url": "https://api.github.com/users/nathansobo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nathansobo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nathansobo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nathansobo/subscriptions",
            "organizations_url": "https://api.github.com/users/nathansobo/orgs",
            "repos_url": "https://api.github.com/users/nathansobo/repos",
            "events_url": "https://api.github.com/users/nathansobo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nathansobo/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "You definitely don't want to build a new `DisplayBuffer`. Just create a fold via `EditSession`'s api maybe?\n",
        "created_at": "2013-08-14T03:54:01Z",
        "updated_at": "2013-08-15T00:52:49Z",
        "html_url": "https://github.com/atom/vim-mode/pull/24#discussion_r5755309",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/24",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5755309"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/24#discussion_r5755309"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/24"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5766988",
        "pull_request_review_id": null,
        "id": 5766988,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjY5ODg=",
        "diff_hunk": "@@ -357,6 +358,18 @@ describe \"VimState\", ->\n         expect(vimState.getRegister('\"').text).toBe \"012 345\\n\"\n         expect(editor.getCursorScreenPosition()).toEqual([0,4])\n \n+      it \"treats a fold like a single line\", ->\n+        text = \"def something\\n  true\\nend\\n\"\n+        editor.getBuffer().setText text\n+        displayBuffer = new DisplayBuffer(editor.getBuffer())\n+        displayBuffer.createFold(0,2)\n+\n+        keydown('y', element: editor[0])\n+        keydown('y', element: editor[0])\n+\n+        expect(vimState.getRegister('\"').text).toBe text\n+        expect(editor.getCursorScreenPosition()).toEqual([0,4])\n+",
        "path": "spec/vim-mode-spec.coffee",
        "position": null,
        "original_position": 23,
        "commit_id": "083e45d97cc6d4144cc0e1821d706ba2d4045005",
        "original_commit_id": "a5328b0f91a3c64eda7a2b31b7692a12fc2bf1ae",
        "user": {
            "login": "nathansobo",
            "id": 1789,
            "node_id": "MDQ6VXNlcjE3ODk=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1789?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nathansobo",
            "html_url": "https://github.com/nathansobo",
            "followers_url": "https://api.github.com/users/nathansobo/followers",
            "following_url": "https://api.github.com/users/nathansobo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nathansobo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nathansobo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nathansobo/subscriptions",
            "organizations_url": "https://api.github.com/users/nathansobo/orgs",
            "repos_url": "https://api.github.com/users/nathansobo/repos",
            "events_url": "https://api.github.com/users/nathansobo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nathansobo/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "There's `EditSession::isFoldedAtBufferRow` which will answer that question for you. It calls down into the `EditSession`'s `DisplayBuffer` instance.\n",
        "created_at": "2013-08-14T15:45:07Z",
        "updated_at": "2013-08-15T00:52:49Z",
        "html_url": "https://github.com/atom/vim-mode/pull/24#discussion_r5766988",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/24",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5766988"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/24#discussion_r5766988"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/24"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5780891",
        "pull_request_review_id": null,
        "id": 5780891,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODA4OTE=",
        "diff_hunk": "@@ -357,6 +358,19 @@ describe \"VimState\", ->\n         expect(vimState.getRegister('\"').text).toBe \"012 345\\n\"\n         expect(editor.getCursorScreenPosition()).toEqual([0,4])\n \n+      it \"treats a fold like a single line\", ->\n+        text = \"def something\\n  true\\nend\\n\"\n+        editor.getBuffer().setText text\n+        editor.setCursorScreenPosition [0, 4]\n+        editor.activeEditSession.foldCurrentRow()",
        "path": "spec/vim-mode-spec.coffee",
        "position": 16,
        "original_position": 16,
        "commit_id": "083e45d97cc6d4144cc0e1821d706ba2d4045005",
        "original_commit_id": "93e8db879a77a3ef6f070e6e1141485ab6ebc767",
        "user": {
            "login": "ymendel",
            "id": 597,
            "node_id": "MDQ6VXNlcjU5Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/597?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ymendel",
            "html_url": "https://github.com/ymendel",
            "followers_url": "https://api.github.com/users/ymendel/followers",
            "following_url": "https://api.github.com/users/ymendel/following{/other_user}",
            "gists_url": "https://api.github.com/users/ymendel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ymendel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ymendel/subscriptions",
            "organizations_url": "https://api.github.com/users/ymendel/orgs",
            "repos_url": "https://api.github.com/users/ymendel/repos",
            "events_url": "https://api.github.com/users/ymendel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ymendel/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This is a lot nicer.\n\ncc @nathansobo \n",
        "created_at": "2013-08-15T00:49:39Z",
        "updated_at": "2013-08-15T00:52:49Z",
        "html_url": "https://github.com/atom/vim-mode/pull/24#discussion_r5780891",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/24",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5780891"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/24#discussion_r5780891"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/24"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5780906",
        "pull_request_review_id": null,
        "id": 5780906,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODA5MDY=",
        "diff_hunk": "@@ -357,6 +358,19 @@ describe \"VimState\", ->\n         expect(vimState.getRegister('\"').text).toBe \"012 345\\n\"\n         expect(editor.getCursorScreenPosition()).toEqual([0,4])\n \n+      it \"treats a fold like a single line\", ->\n+        text = \"def something\\n  true\\nend\\n\"\n+        editor.getBuffer().setText text\n+        editor.setCursorScreenPosition [0, 4]\n+        editor.activeEditSession.foldCurrentRow()\n+\n+        keydown('y', element: editor[0])\n+        keydown('y', element: editor[0])\n+\n+        expect(vimState.getRegister('\"').text).toBe text\n+        expect(editor.getCursorScreenPosition()).toEqual([0,4])",
        "path": "spec/vim-mode-spec.coffee",
        "position": null,
        "original_position": 22,
        "commit_id": "083e45d97cc6d4144cc0e1821d706ba2d4045005",
        "original_commit_id": "93e8db879a77a3ef6f070e6e1141485ab6ebc767",
        "user": {
            "login": "ymendel",
            "id": 597,
            "node_id": "MDQ6VXNlcjU5Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/597?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ymendel",
            "html_url": "https://github.com/ymendel",
            "followers_url": "https://api.github.com/users/ymendel/followers",
            "following_url": "https://api.github.com/users/ymendel/following{/other_user}",
            "gists_url": "https://api.github.com/users/ymendel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ymendel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ymendel/subscriptions",
            "organizations_url": "https://api.github.com/users/ymendel/orgs",
            "repos_url": "https://api.github.com/users/ymendel/repos",
            "events_url": "https://api.github.com/users/ymendel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ymendel/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I have learned that a fold doesn't let you choose a position on the line. That's okay. vim doesn't let you either.\n",
        "created_at": "2013-08-15T00:50:36Z",
        "updated_at": "2013-08-15T00:52:49Z",
        "html_url": "https://github.com/atom/vim-mode/pull/24#discussion_r5780906",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/24",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5780906"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/24#discussion_r5780906"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/24"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5792205",
        "pull_request_review_id": null,
        "id": 5792205,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTIyMDU=",
        "diff_hunk": "@@ -357,6 +358,19 @@ describe \"VimState\", ->\n         expect(vimState.getRegister('\"').text).toBe \"012 345\\n\"\n         expect(editor.getCursorScreenPosition()).toEqual([0,4])\n \n+      it \"treats a fold like a single line\", ->\n+        text = \"def something\\n  true\\nend\\n\"\n+        editor.getBuffer().setText text\n+        editor.setCursorScreenPosition [0, 4]\n+        editor.activeEditSession.foldCurrentRow()",
        "path": "spec/vim-mode-spec.coffee",
        "position": 16,
        "original_position": 16,
        "commit_id": "083e45d97cc6d4144cc0e1821d706ba2d4045005",
        "original_commit_id": "93e8db879a77a3ef6f070e6e1141485ab6ebc767",
        "user": {
            "login": "nathansobo",
            "id": 1789,
            "node_id": "MDQ6VXNlcjE3ODk=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1789?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nathansobo",
            "html_url": "https://github.com/nathansobo",
            "followers_url": "https://api.github.com/users/nathansobo/followers",
            "following_url": "https://api.github.com/users/nathansobo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nathansobo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nathansobo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nathansobo/subscriptions",
            "organizations_url": "https://api.github.com/users/nathansobo/orgs",
            "repos_url": "https://api.github.com/users/nathansobo/repos",
            "events_url": "https://api.github.com/users/nathansobo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nathansobo/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "It will only fold based on the indentation level and other content though, so beware. We may want to surface methods to fold manually?\n",
        "created_at": "2013-08-15T15:01:24Z",
        "updated_at": "2013-08-15T15:01:24Z",
        "html_url": "https://github.com/atom/vim-mode/pull/24#discussion_r5792205",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/24",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5792205"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/24#discussion_r5792205"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/24"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5818748",
        "pull_request_review_id": null,
        "id": 5818748,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTg3NDg=",
        "diff_hunk": "@@ -277,6 +277,17 @@ describe \"Operators\", ->\n         expect(editor.getText()).toBe \"012\\n 345\\n\"\n         expect(editor.getCursorScreenPosition()).toEqual [1, 1]\n \n+    describe \"with multiple linewise contents\", ->\n+      beforeEach ->\n+        editor.getBuffer().setText(\"012\\n\")\n+        editor.setCursorScreenPosition([0, 1])\n+        vimState.setRegister('\"', text: \" 345\\n 678\\n\", type: 'linewise')\n+        keydown('p')\n+\n+      it \"inserts the contents of the default register\", ->\n+        expect(editor.getText()).toBe \"012\\n 345\\n 678\\n\"\n+        expect(editor.getCursorScreenPosition()).toEqual [1, 1]",
        "path": "spec/operators-spec.coffee",
        "position": null,
        "original_position": 13,
        "commit_id": "cffe535f095e694f42f3ba0ae6fb4ca711e35b3c",
        "original_commit_id": "41d6519e8803e877a36ece07906abafadeef9036",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think this should be row 1, column zero. Linewise 'p' resets the cursor to the beginning of the line.\n",
        "created_at": "2013-08-16T17:09:28Z",
        "updated_at": "2013-08-19T17:12:26Z",
        "html_url": "https://github.com/atom/vim-mode/pull/29#discussion_r5818748",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/29",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5818748"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/29#discussion_r5818748"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/29"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5818861",
        "pull_request_review_id": null,
        "id": 5818861,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTg4NjE=",
        "diff_hunk": "@@ -277,6 +277,17 @@ describe \"Operators\", ->\n         expect(editor.getText()).toBe \"012\\n 345\\n\"\n         expect(editor.getCursorScreenPosition()).toEqual [1, 1]\n \n+    describe \"with multiple linewise contents\", ->\n+      beforeEach ->\n+        editor.getBuffer().setText(\"012\\n\")\n+        editor.setCursorScreenPosition([0, 1])\n+        vimState.setRegister('\"', text: \" 345\\n 678\\n\", type: 'linewise')\n+        keydown('p')\n+\n+      it \"inserts the contents of the default register\", ->\n+        expect(editor.getText()).toBe \"012\\n 345\\n 678\\n\"\n+        expect(editor.getCursorScreenPosition()).toEqual [1, 1]",
        "path": "spec/operators-spec.coffee",
        "position": null,
        "original_position": 13,
        "commit_id": "cffe535f095e694f42f3ba0ae6fb4ca711e35b3c",
        "original_commit_id": "41d6519e8803e877a36ece07906abafadeef9036",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "On my vim it goes to the beginning of the line.\n\nIs it possible that vim plugins are the reason for the difference? (I'm\nusing macvim with janus)\n",
        "created_at": "2013-08-16T17:13:44Z",
        "updated_at": "2013-08-19T17:12:26Z",
        "html_url": "https://github.com/atom/vim-mode/pull/29#discussion_r5818861",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/29",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5818861"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/29#discussion_r5818861"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/29"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5818865",
        "pull_request_review_id": null,
        "id": 5818865,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTg4NjU=",
        "diff_hunk": "@@ -277,6 +277,17 @@ describe \"Operators\", ->\n         expect(editor.getText()).toBe \"012\\n 345\\n\"\n         expect(editor.getCursorScreenPosition()).toEqual [1, 1]\n \n+    describe \"with multiple linewise contents\", ->\n+      beforeEach ->\n+        editor.getBuffer().setText(\"012\\n\")\n+        editor.setCursorScreenPosition([0, 1])\n+        vimState.setRegister('\"', text: \" 345\\n 678\\n\", type: 'linewise')\n+        keydown('p')\n+\n+      it \"inserts the contents of the default register\", ->\n+        expect(editor.getText()).toBe \"012\\n 345\\n 678\\n\"\n+        expect(editor.getCursorScreenPosition()).toEqual [1, 1]",
        "path": "spec/operators-spec.coffee",
        "position": null,
        "original_position": 13,
        "commit_id": "cffe535f095e694f42f3ba0ae6fb4ca711e35b3c",
        "original_commit_id": "41d6519e8803e877a36ece07906abafadeef9036",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Sorry and by beginning of the line I mean the first character.\n",
        "created_at": "2013-08-16T17:14:00Z",
        "updated_at": "2013-08-19T17:12:26Z",
        "html_url": "https://github.com/atom/vim-mode/pull/29#discussion_r5818865",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/29",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5818865"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/29#discussion_r5818865"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/29"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5818965",
        "pull_request_review_id": null,
        "id": 5818965,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTg5NjU=",
        "diff_hunk": "@@ -277,6 +277,17 @@ describe \"Operators\", ->\n         expect(editor.getText()).toBe \"012\\n 345\\n\"\n         expect(editor.getCursorScreenPosition()).toEqual [1, 1]\n \n+    describe \"with multiple linewise contents\", ->\n+      beforeEach ->\n+        editor.getBuffer().setText(\"012\\n\")\n+        editor.setCursorScreenPosition([0, 1])\n+        vimState.setRegister('\"', text: \" 345\\n 678\\n\", type: 'linewise')\n+        keydown('p')\n+\n+      it \"inserts the contents of the default register\", ->\n+        expect(editor.getText()).toBe \"012\\n 345\\n 678\\n\"\n+        expect(editor.getCursorScreenPosition()).toEqual [1, 1]",
        "path": "spec/operators-spec.coffee",
        "position": null,
        "original_position": 13,
        "commit_id": "cffe535f095e694f42f3ba0ae6fb4ca711e35b3c",
        "original_commit_id": "41d6519e8803e877a36ece07906abafadeef9036",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "That's what I mean...I thought those indexes were 0-based. If 1,1 means the second row and the first column, then yeah this is right. Playing with the branch now it does indeed seem to pull the cursor to the first character.\n",
        "created_at": "2013-08-16T17:18:31Z",
        "updated_at": "2013-08-19T17:12:26Z",
        "html_url": "https://github.com/atom/vim-mode/pull/29#discussion_r5818965",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/29",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5818965"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/29#discussion_r5818965"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/29"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5819627",
        "pull_request_review_id": null,
        "id": 5819627,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTk2Mjc=",
        "diff_hunk": "@@ -277,6 +277,17 @@ describe \"Operators\", ->\n         expect(editor.getText()).toBe \"012\\n 345\\n\"\n         expect(editor.getCursorScreenPosition()).toEqual [1, 1]\n \n+    describe \"with multiple linewise contents\", ->\n+      beforeEach ->\n+        editor.getBuffer().setText(\"012\\n\")\n+        editor.setCursorScreenPosition([0, 1])\n+        vimState.setRegister('\"', text: \" 345\\n 678\\n\", type: 'linewise')\n+        keydown('p')\n+\n+      it \"inserts the contents of the default register\", ->\n+        expect(editor.getText()).toBe \"012\\n 345\\n 678\\n\"\n+        expect(editor.getCursorScreenPosition()).toEqual [1, 1]",
        "path": "spec/operators-spec.coffee",
        "position": null,
        "original_position": 13,
        "commit_id": "cffe535f095e694f42f3ba0ae6fb4ca711e35b3c",
        "original_commit_id": "41d6519e8803e877a36ece07906abafadeef9036",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Sorry to be clear these are 0-based. So 1,1 means that the cursor is resting on the '3'.\n",
        "created_at": "2013-08-16T17:42:09Z",
        "updated_at": "2013-08-19T17:12:26Z",
        "html_url": "https://github.com/atom/vim-mode/pull/29#discussion_r5819627",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/29",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5819627"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/29#discussion_r5819627"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/29"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5820598",
        "pull_request_review_id": null,
        "id": 5820598,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MjA1OTg=",
        "diff_hunk": "@@ -277,6 +277,17 @@ describe \"Operators\", ->\n         expect(editor.getText()).toBe \"012\\n 345\\n\"\n         expect(editor.getCursorScreenPosition()).toEqual [1, 1]\n \n+    describe \"with multiple linewise contents\", ->\n+      beforeEach ->\n+        editor.getBuffer().setText(\"012\\n\")\n+        editor.setCursorScreenPosition([0, 1])\n+        vimState.setRegister('\"', text: \" 345\\n 678\\n\", type: 'linewise')\n+        keydown('p')\n+\n+      it \"inserts the contents of the default register\", ->\n+        expect(editor.getText()).toBe \"012\\n 345\\n 678\\n\"\n+        expect(editor.getCursorScreenPosition()).toEqual [1, 1]",
        "path": "spec/operators-spec.coffee",
        "position": null,
        "original_position": 13,
        "commit_id": "cffe535f095e694f42f3ba0ae6fb4ca711e35b3c",
        "original_commit_id": "41d6519e8803e877a36ece07906abafadeef9036",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "That's really weird. It's working in my editor, but then this test shouldn't be passing?\n",
        "created_at": "2013-08-16T18:17:06Z",
        "updated_at": "2013-08-19T17:12:26Z",
        "html_url": "https://github.com/atom/vim-mode/pull/29#discussion_r5820598",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/29",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/5820598"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/29#discussion_r5820598"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/29"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10107816",
        "pull_request_review_id": null,
        "id": 10107816,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTA3ODE2",
        "diff_hunk": "@@ -1,8 +1,14 @@\n-.vim-mode.command-mode {\n-  .cursor, .cursor.blink-off {\n+.block-cursor() {\n     border: 0;\n     background-color: white;",
        "path": "stylesheets/vim-mode.less",
        "position": 5,
        "original_position": 5,
        "commit_id": "0f9e2f91dc4650b2d047fe8eb014788de9d256c9",
        "original_commit_id": "0f9e2f91dc4650b2d047fe8eb014788de9d256c9",
        "user": {
            "login": "benogle",
            "id": 69169,
            "node_id": "MDQ6VXNlcjY5MTY5",
            "avatar_url": "https://avatars3.githubusercontent.com/u/69169?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benogle",
            "html_url": "https://github.com/benogle",
            "followers_url": "https://api.github.com/users/benogle/followers",
            "following_url": "https://api.github.com/users/benogle/following{/other_user}",
            "gists_url": "https://api.github.com/users/benogle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benogle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benogle/subscriptions",
            "organizations_url": "https://api.github.com/users/benogle/orgs",
            "repos_url": "https://api.github.com/users/benogle/repos",
            "events_url": "https://api.github.com/users/benogle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benogle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This cant just be white. If someone has a light syntax theme, it will be invisible. We need to add something to `syntax-variables` to support this. \n",
        "created_at": "2014-02-27T00:56:01Z",
        "updated_at": "2014-02-27T00:56:01Z",
        "html_url": "https://github.com/atom/vim-mode/pull/46#discussion_r10107816",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/46",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10107816"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/46#discussion_r10107816"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/46"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10108517",
        "pull_request_review_id": null,
        "id": 10108517,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTA4NTE3",
        "diff_hunk": "@@ -1,8 +1,14 @@\n-.vim-mode.command-mode {\n-  .cursor, .cursor.blink-off {\n+.block-cursor() {\n     border: 0;\n     background-color: white;",
        "path": "stylesheets/vim-mode.less",
        "position": 5,
        "original_position": 5,
        "commit_id": "0f9e2f91dc4650b2d047fe8eb014788de9d256c9",
        "original_commit_id": "0f9e2f91dc4650b2d047fe8eb014788de9d256c9",
        "user": {
            "login": "billyvg",
            "id": 79684,
            "node_id": "MDQ6VXNlcjc5Njg0",
            "avatar_url": "https://avatars3.githubusercontent.com/u/79684?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/billyvg",
            "html_url": "https://github.com/billyvg",
            "followers_url": "https://api.github.com/users/billyvg/followers",
            "following_url": "https://api.github.com/users/billyvg/following{/other_user}",
            "gists_url": "https://api.github.com/users/billyvg/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/billyvg/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/billyvg/subscriptions",
            "organizations_url": "https://api.github.com/users/billyvg/orgs",
            "repos_url": "https://api.github.com/users/billyvg/repos",
            "events_url": "https://api.github.com/users/billyvg/events{/privacy}",
            "received_events_url": "https://api.github.com/users/billyvg/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ah right. Also, the cursor should be blinking in command/visual mode, so this is entirely wrong.\n",
        "created_at": "2014-02-27T01:19:42Z",
        "updated_at": "2014-02-27T01:19:42Z",
        "html_url": "https://github.com/atom/vim-mode/pull/46#discussion_r10108517",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/46",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10108517"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/46#discussion_r10108517"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/46"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10147905",
        "pull_request_review_id": null,
        "id": 10147905,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTQ3OTA1",
        "diff_hunk": "@@ -122,6 +129,7 @@ describe \"VimState\", ->\n       expect(editorView).toHaveClass 'command-mode'\n       expect(editorView).not.toHaveClass 'insert-mode'\n \n+",
        "path": "spec/vim-state-spec.coffee",
        "position": null,
        "original_position": 18,
        "commit_id": "5ebc870cd9c02b8e952b20c577a75bdb3d38e325",
        "original_commit_id": "e9382c740475f9f6f4aa3e67e9c6fa5b80e4d966",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Can you nuke this extra new line?\n",
        "created_at": "2014-02-27T23:35:39Z",
        "updated_at": "2014-02-28T04:22:03Z",
        "html_url": "https://github.com/atom/vim-mode/pull/48#discussion_r10147905",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/48",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10147905"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/48#discussion_r10147905"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/48"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10185272",
        "pull_request_review_id": null,
        "id": 10185272,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTg1Mjcy",
        "diff_hunk": "@@ -98,6 +98,26 @@ class MoveToPreviousWord extends Motion\n       @editor.selectToBeginningOfWord()\n       true\n \n+class MoveToPreviousWholeWord extends Motion\n+  execute: (count=1) ->\n+    _.times count, =>\n+      @editor.moveCursorToBeginningOfWord()\n+      @editor.moveCursorToBeginningOfWord() while not @isWholeWord() and not @isBeginningOfFile()\n+\n+  select: (count=1) ->\n+    _.times count, =>\n+      @editor.selectToBeginningOfWord()\n+      @editor.selectToBeginningOfWord() while not @isWholeWord() and not @isBeginningOfFile()",
        "path": "lib/motions.coffee",
        "position": 13,
        "original_position": 13,
        "commit_id": "815cfafb20b2fa844334cf0891f171fa2fc311e5",
        "original_commit_id": "a93cec59ba6cf3577c4f23d8812bd9977584d31d",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "I love how this line reads, nice use of methods names here.\n",
        "created_at": "2014-02-28T23:00:09Z",
        "updated_at": "2014-03-01T18:06:34Z",
        "html_url": "https://github.com/atom/vim-mode/pull/93#discussion_r10185272",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/93",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10185272"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/93#discussion_r10185272"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/93"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10173945",
        "pull_request_review_id": null,
        "id": 10173945,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTczOTQ1",
        "diff_hunk": "@@ -254,7 +254,39 @@ class MoveToStartOfFile extends MoveToLine\n   execute: (count=1) ->\n     super(count)\n \n+class MoveToTopOfScreen extends MoveToLine\n+  constructor: (@editor, @editorView) ->\n+    super\n+\n+  execute: (count) ->\n+    firstScreenRow = @editorView.getFirstVisibleScreenRow()\n+    destRow = if firstScreenRow != 0 then firstScreenRow + 3 else 0\n+    super(destRow)\n+\n+class MoveToBottomOfScreen extends MoveToLine\n+  constructor: (@editor, @editorView) ->\n+    super\n+\n+  execute: (count) ->\n+    lastScreenRow = @editorView.getLastVisibleScreenRow()\n+    console.log(lastScreenRow)",
        "path": "lib/motions.coffee",
        "position": null,
        "original_position": 19,
        "commit_id": "d9fdcba2b71d1287b70f01a2013e3599ba886f91",
        "original_commit_id": "8cdf0b2f9574c5083d488a7689a4e86013d2e182",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Can we drop this?\n",
        "created_at": "2014-02-28T18:06:39Z",
        "updated_at": "2014-03-05T06:37:53Z",
        "html_url": "https://github.com/atom/vim-mode/pull/77#discussion_r10173945",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/77",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10173945"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/77#discussion_r10173945"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/77"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10173958",
        "pull_request_review_id": null,
        "id": 10173958,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTczOTU4",
        "diff_hunk": "@@ -87,7 +87,7 @@ describe \"Motions\", ->\n \n         # FIXME: The definition of Cursor#getEndOfCurrentWordBufferPosition,\n         # means that the end of the word can't be the current cursor\n-        # position (even though it is when you're cursor is on a new line).\n+        # position (even though it is when your cursor is on a new line).",
        "path": "spec/motions-spec.coffee",
        "position": 5,
        "original_position": 5,
        "commit_id": "d9fdcba2b71d1287b70f01a2013e3599ba886f91",
        "original_commit_id": "8cdf0b2f9574c5083d488a7689a4e86013d2e182",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Thanks for catching that.\n",
        "created_at": "2014-02-28T18:06:54Z",
        "updated_at": "2014-03-05T06:37:53Z",
        "html_url": "https://github.com/atom/vim-mode/pull/77#discussion_r10173958",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/77",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10173958"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/77#discussion_r10173958"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/77"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10199209",
        "pull_request_review_id": null,
        "id": 10199209,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTk5MjA5",
        "diff_hunk": "@@ -209,10 +209,7 @@ class MoveToLine extends Motion\n   isLinewise: -> true\n \n   execute: (count) ->\n-    if count?\n-      @editor.setCursorBufferPosition([count - 1, 0])\n-    else\n-      @editor.setCursorBufferPosition([@editor.getLineCount() - 1, 0])\n+    @editor.setCursorBufferPosition([@getDestinationRow(count), 0])",
        "path": "lib/motions.coffee",
        "position": null,
        "original_position": 8,
        "commit_id": "d9fdcba2b71d1287b70f01a2013e3599ba886f91",
        "original_commit_id": "0c14dc4030c3dabe2ba4a05c2b02a0aa293dc127",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Nice refactor.\n",
        "created_at": "2014-03-03T01:36:09Z",
        "updated_at": "2014-03-05T06:37:53Z",
        "html_url": "https://github.com/atom/vim-mode/pull/77#discussion_r10199209",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/77",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10199209"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/77#discussion_r10199209"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/77"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10199304",
        "pull_request_review_id": null,
        "id": 10199304,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTk5MzA0",
        "diff_hunk": "@@ -274,10 +277,46 @@ class MoveToLastCharacterOfLine extends Motion\n       true\n \n class MoveToStartOfFile extends MoveToLine\n-  execute: (count=1) ->\n-    super(count)\n+  getDestinationRow: (count=0) ->\n+    count\n+\n+class MoveToTopOfScreen extends MoveToLine\n+  constructor: (@editor, @editorView, @scrolloff) ->\n+    super(@editor)\n+\n+  getDestinationRow: (count=0) ->\n+    firstScreenRow = @editorView.getFirstVisibleScreenRow()",
        "path": "lib/motions.coffee",
        "position": null,
        "original_position": 39,
        "commit_id": "d9fdcba2b71d1287b70f01a2013e3599ba886f91",
        "original_commit_id": "0c14dc4030c3dabe2ba4a05c2b02a0aa293dc127",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "So there's a problem here where you're mixing two coordinate spaces. These `getDestinationRows` are done with screen rows but you're setting the cursor position using `setCursorBufferPosition`. This will break if a user has softwraps or folds enabled.\n",
        "created_at": "2014-03-03T01:49:29Z",
        "updated_at": "2014-03-05T06:37:53Z",
        "html_url": "https://github.com/atom/vim-mode/pull/77#discussion_r10199304",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/77",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10199304"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/77#discussion_r10199304"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/77"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10199348",
        "pull_request_review_id": null,
        "id": 10199348,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTk5MzQ4",
        "diff_hunk": "@@ -274,10 +277,46 @@ class MoveToLastCharacterOfLine extends Motion\n       true\n \n class MoveToStartOfFile extends MoveToLine\n-  execute: (count=1) ->\n-    super(count)\n+  getDestinationRow: (count=0) ->\n+    count\n+\n+class MoveToTopOfScreen extends MoveToLine\n+  constructor: (@editor, @editorView, @scrolloff) ->\n+    super(@editor)\n+\n+  getDestinationRow: (count=0) ->\n+    firstScreenRow = @editorView.getFirstVisibleScreenRow()",
        "path": "lib/motions.coffee",
        "position": null,
        "original_position": 39,
        "commit_id": "d9fdcba2b71d1287b70f01a2013e3599ba886f91",
        "original_commit_id": "0c14dc4030c3dabe2ba4a05c2b02a0aa293dc127",
        "user": {
            "login": "dougblack",
            "id": 942395,
            "node_id": "MDQ6VXNlcjk0MjM5NQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/942395?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dougblack",
            "html_url": "https://github.com/dougblack",
            "followers_url": "https://api.github.com/users/dougblack/followers",
            "following_url": "https://api.github.com/users/dougblack/following{/other_user}",
            "gists_url": "https://api.github.com/users/dougblack/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dougblack/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dougblack/subscriptions",
            "organizations_url": "https://api.github.com/users/dougblack/orgs",
            "repos_url": "https://api.github.com/users/dougblack/repos",
            "events_url": "https://api.github.com/users/dougblack/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dougblack/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ah. Hmm.\n\nIt sounds like maybe I should be using [#bufferPosiitonForScreenPosition](https://atom.io/docs/api/v0.64.0/api/classes/Editor.html#bufferPositionForScreenPosition-instance)?\n",
        "created_at": "2014-03-03T01:55:37Z",
        "updated_at": "2014-03-05T06:37:53Z",
        "html_url": "https://github.com/atom/vim-mode/pull/77#discussion_r10199348",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/77",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10199348"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/77#discussion_r10199348"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/77"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10199426",
        "pull_request_review_id": null,
        "id": 10199426,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTk5NDI2",
        "diff_hunk": "@@ -21,6 +21,7 @@ class VimState\n     @history = []\n     @registers = {}\n     @mode = 'command'\n+    @scrolloff = 2 # current chromium default",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 4,
        "commit_id": "d9fdcba2b71d1287b70f01a2013e3599ba886f91",
        "original_commit_id": "0c14dc4030c3dabe2ba4a05c2b02a0aa293dc127",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Okay so I got to the bottom of this.\n\nIt actually isn't adjustable by users currently and it's implemented in Atom so it isn't an Chromium issue. Given that would you mind moving this to a constant on the classes which extend `MoveToLine` and add a small comment to that effect. \n\nIt may be configurable in the future but I'd rather have this reflect the current state of things.\n",
        "created_at": "2014-03-03T02:04:44Z",
        "updated_at": "2014-03-05T06:37:53Z",
        "html_url": "https://github.com/atom/vim-mode/pull/77#discussion_r10199426",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/77",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10199426"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/77#discussion_r10199426"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/77"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10200903",
        "pull_request_review_id": null,
        "id": 10200903,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjAwOTAz",
        "diff_hunk": "@@ -274,10 +277,46 @@ class MoveToLastCharacterOfLine extends Motion\n       true\n \n class MoveToStartOfFile extends MoveToLine\n-  execute: (count=1) ->\n-    super(count)\n+  getDestinationRow: (count=0) ->\n+    count\n+\n+class MoveToTopOfScreen extends MoveToLine\n+  constructor: (@editor, @editorView, @scrolloff) ->\n+    super(@editor)\n+\n+  getDestinationRow: (count=0) ->\n+    firstScreenRow = @editorView.getFirstVisibleScreenRow()",
        "path": "lib/motions.coffee",
        "position": null,
        "original_position": 39,
        "commit_id": "d9fdcba2b71d1287b70f01a2013e3599ba886f91",
        "original_commit_id": "0c14dc4030c3dabe2ba4a05c2b02a0aa293dc127",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Yep that should do the trick.\n",
        "created_at": "2014-03-03T05:07:40Z",
        "updated_at": "2014-03-05T06:37:53Z",
        "html_url": "https://github.com/atom/vim-mode/pull/77#discussion_r10200903",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/77",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10200903"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/77#discussion_r10200903"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/77"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10200912",
        "pull_request_review_id": null,
        "id": 10200912,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjAwOTEy",
        "diff_hunk": "@@ -21,6 +22,7 @@ class VimState\n     @history = []\n     @registers = {}\n     @mode = 'command'\n+    @scrolloff = 2 # chromium default",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 12,
        "commit_id": "f6c073ebebed147f5c9f09cc7781d797d1529324",
        "original_commit_id": "abaf1ac2f34efbb13a1fc62b7d81341e8ce3cc6b",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "See my note on the other pull about `@scrolloff`.\n",
        "created_at": "2014-03-03T05:08:40Z",
        "updated_at": "2014-03-06T18:07:38Z",
        "html_url": "https://github.com/atom/vim-mode/pull/100#discussion_r10200912",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/100",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10200912"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/100#discussion_r10200912"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/100"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10200921",
        "pull_request_review_id": null,
        "id": 10200921,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjAwOTIx",
        "diff_hunk": "@@ -0,0 +1,42 @@\n+class Scroll\n+  constructor: (@editorView, @editor) ->\n+  isComplete: -> true\n+  isRecordable: -> false\n+\n+class ScrollDown extends Scroll\n+  constructor: (@editorView, @editor, @scrolloff) ->\n+    super(@editorView, @editor)\n+\n+  execute: (count=1) ->\n+    @keepCursorOnScreen(count)\n+    @scrollUp(count)\n+\n+  keepCursorOnScreen: (count) ->\n+    {row, column} = @editor.getCursorBufferPosition()\n+    firstScreenRow = @editorView.getFirstVisibleScreenRow() + @scrolloff",
        "path": "lib/scroll.coffee",
        "position": null,
        "original_position": 16,
        "commit_id": "f6c073ebebed147f5c9f09cc7781d797d1529324",
        "original_commit_id": "abaf1ac2f34efbb13a1fc62b7d81341e8ce3cc6b",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "This also has the issue with the screen/buffer coordinates.\n",
        "created_at": "2014-03-03T05:09:45Z",
        "updated_at": "2014-03-06T18:07:38Z",
        "html_url": "https://github.com/atom/vim-mode/pull/100#discussion_r10200921",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/100",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10200921"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/100#discussion_r10200921"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/100"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10352205",
        "pull_request_review_id": null,
        "id": 10352205,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzUyMjA1",
        "diff_hunk": "@@ -116,3 +118,4 @@\n   'ctrl-w v': 'pane:split-right'\n   'ctrl-w ctrl-s': 'pane:split-down'\n   'ctrl-w s': 'pane:split-down'\n+  'ctrl-e': 'vim-mode:scroll-down'",
        "path": "keymaps/vim-mode.cson",
        "position": null,
        "original_position": 13,
        "commit_id": "f6c073ebebed147f5c9f09cc7781d797d1529324",
        "original_commit_id": "f234cff18ed7a21cadb720cee20a77744cb9b71e",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "I think `ctrl-y` might have gotten lost in the rebase, here.\n",
        "created_at": "2014-03-06T17:56:25Z",
        "updated_at": "2014-03-06T18:07:38Z",
        "html_url": "https://github.com/atom/vim-mode/pull/100#discussion_r10352205",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/100",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10352205"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/100#discussion_r10352205"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/100"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10352216",
        "pull_request_review_id": null,
        "id": 10352216,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzUyMjE2",
        "diff_hunk": "@@ -0,0 +1,4 @@\n+## Implemented Scrolling Commands",
        "path": "docs/scrolling.md",
        "position": 1,
        "original_position": 1,
        "commit_id": "f6c073ebebed147f5c9f09cc7781d797d1529324",
        "original_commit_id": "f234cff18ed7a21cadb720cee20a77744cb9b71e",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Can you add a link to `README.md` for this new doc file?\n",
        "created_at": "2014-03-06T17:56:54Z",
        "updated_at": "2014-03-06T18:07:38Z",
        "html_url": "https://github.com/atom/vim-mode/pull/100#discussion_r10352216",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/100",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10352216"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/100#discussion_r10352216"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/100"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/7073293",
        "pull_request_review_id": null,
        "id": 7073293,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNzMyOTM=",
        "diff_hunk": "@@ -1,7 +1,11 @@\n-{_, Point, Range} = require 'atom'\n+{_, $$, Point, Range} = require 'atom'\n+shell = require 'shell'",
        "path": "lib/motions.coffee",
        "position": null,
        "original_position": 3,
        "commit_id": "0cbf6a08acd81534334a7ffc45756ec3a7976773",
        "original_commit_id": "16ce7104a1c2d82f0332b23eafb14edb59a5adab",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "We should create a pull on atom/atom that includes this functionality as we don't want to be requiring this here. Maybe `atom.beep()`?\n",
        "created_at": "2013-10-18T20:36:42Z",
        "updated_at": "2014-03-06T18:59:11Z",
        "html_url": "https://github.com/atom/vim-mode/pull/40#discussion_r7073293",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/40",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/7073293"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/40#discussion_r7073293"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/40"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/7073375",
        "pull_request_review_id": null,
        "id": 7073375,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNzMzNzU=",
        "diff_hunk": "@@ -0,0 +1,36 @@\n+{View} = require 'atom'",
        "path": "lib/vim-command-input-view.coffee",
        "position": null,
        "original_position": 1,
        "commit_id": "0cbf6a08acd81534334a7ffc45756ec3a7976773",
        "original_commit_id": "16ce7104a1c2d82f0332b23eafb14edb59a5adab",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "What do you think about adding an API to `atom/status-bar` that allows a mode for entering text? I don't love having stacked status bars and I think having the ability to use the status bar might be useful in other circumstances. \n\nI know I'd love to have a mode indicator like vim down. However we should probably try to make it a bit more general than that so it's useful for others.\n",
        "created_at": "2013-10-18T20:39:36Z",
        "updated_at": "2014-03-06T18:59:11Z",
        "html_url": "https://github.com/atom/vim-mode/pull/40#discussion_r7073375",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/40",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/7073375"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/40#discussion_r7073375"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/40"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/7073457",
        "pull_request_review_id": null,
        "id": 7073457,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNzM0NTc=",
        "diff_hunk": "@@ -1,7 +1,11 @@\n-{_, Point, Range} = require 'atom'\n+{_, $$, Point, Range} = require 'atom'\n+shell = require 'shell'",
        "path": "lib/motions.coffee",
        "position": null,
        "original_position": 3,
        "commit_id": "0cbf6a08acd81534334a7ffc45756ec3a7976773",
        "original_commit_id": "16ce7104a1c2d82f0332b23eafb14edb59a5adab",
        "user": {
            "login": "kevinsawicki",
            "id": 671378,
            "node_id": "MDQ6VXNlcjY3MTM3OA==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/671378?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kevinsawicki",
            "html_url": "https://github.com/kevinsawicki",
            "followers_url": "https://api.github.com/users/kevinsawicki/followers",
            "following_url": "https://api.github.com/users/kevinsawicki/following{/other_user}",
            "gists_url": "https://api.github.com/users/kevinsawicki/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kevinsawicki/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kevinsawicki/subscriptions",
            "organizations_url": "https://api.github.com/users/kevinsawicki/orgs",
            "repos_url": "https://api.github.com/users/kevinsawicki/repos",
            "events_url": "https://api.github.com/users/kevinsawicki/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kevinsawicki/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "`atom.beep()` already exists.\n",
        "created_at": "2013-10-18T20:43:30Z",
        "updated_at": "2014-03-06T18:59:11Z",
        "html_url": "https://github.com/atom/vim-mode/pull/40#discussion_r7073457",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/40",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/7073457"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/40#discussion_r7073457"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/40"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/7073806",
        "pull_request_review_id": null,
        "id": 7073806,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNzM4MDY=",
        "diff_hunk": "@@ -0,0 +1,36 @@\n+{View} = require 'atom'",
        "path": "lib/vim-command-input-view.coffee",
        "position": null,
        "original_position": 1,
        "commit_id": "0cbf6a08acd81534334a7ffc45756ec3a7976773",
        "original_commit_id": "16ce7104a1c2d82f0332b23eafb14edb59a5adab",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "If it was there, it would be preferable and I'd use it. The logic about detecting the status bar and DOM insertion is :puke:. That would make the status bar plugin a vim requirement (probably okay).\n\nBut the real reason is that I'm doing this vim stuff at 1am to relax. Atom core feels pretty imposing for 1am relaxation. I'm not sure what I need to test, or what the process is. There's a lot of libraries and sub-libraries to learn. I tried to implement atom/atom#962 and gave up after I got 3 layers of inheritance deep within telepath, a whole new library outside of atom. I'm not confident I won't break everything, or which APIs are safe to use up in atom or in plugin land, or what. Why are only some `TextBuffer` methods delegated to `EditSession`? Is there some reason? Is it safe to delegate more? I'm not sure.\n\nIn any case, if we're talking about this, I think the find methodology in `motions.Search` is probably general enough to go there too. 'tell me the position of the next instance of <Blah>' seems a common enough use case for `TextBuffer`.\n",
        "created_at": "2013-10-18T20:57:47Z",
        "updated_at": "2014-03-06T18:59:11Z",
        "html_url": "https://github.com/atom/vim-mode/pull/40#discussion_r7073806",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/40",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/7073806"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/40#discussion_r7073806"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/40"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/7073812",
        "pull_request_review_id": null,
        "id": 7073812,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNzM4MTI=",
        "diff_hunk": "@@ -1,7 +1,11 @@\n-{_, Point, Range} = require 'atom'\n+{_, $$, Point, Range} = require 'atom'\n+shell = require 'shell'",
        "path": "lib/motions.coffee",
        "position": null,
        "original_position": 3,
        "commit_id": "0cbf6a08acd81534334a7ffc45756ec3a7976773",
        "original_commit_id": "16ce7104a1c2d82f0332b23eafb14edb59a5adab",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": ":cool: will update.\n",
        "created_at": "2013-10-18T20:58:01Z",
        "updated_at": "2014-03-06T18:59:11Z",
        "html_url": "https://github.com/atom/vim-mode/pull/40#discussion_r7073812",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/40",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/7073812"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/40#discussion_r7073812"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/40"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/7101530",
        "pull_request_review_id": null,
        "id": 7101530,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcxMDE1MzA=",
        "diff_hunk": "@@ -0,0 +1,36 @@\n+{View} = require 'atom'",
        "path": "lib/vim-command-input-view.coffee",
        "position": null,
        "original_position": 1,
        "commit_id": "0cbf6a08acd81534334a7ffc45756ec3a7976773",
        "original_commit_id": "16ce7104a1c2d82f0332b23eafb14edb59a5adab",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "I wanted to say thanks for writing this. You're a kinder audience than we will face when we release so it's best to hear this now. All of your points are completely valid and I unfortunately don't have a good answers.\n\nThe API documentation is something we know is lacking and is on our list to improve. We have some ideas around running CI against all packages in an easier way for proposed changes (to see what breaks) but we don't have anything concrete yet.\n\nAs to telepath in particular, it's actually in the midst of a rewrite so not changing it for now is probably the best policy. And I don't know why only some things are to `EditSession` from `TextBuffer`\n\n@nathansobo @probablycorey @kevinsawicki maybe you guys can better answer this?\n",
        "created_at": "2013-10-21T17:46:47Z",
        "updated_at": "2014-03-06T18:59:11Z",
        "html_url": "https://github.com/atom/vim-mode/pull/40#discussion_r7101530",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/40",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/7101530"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/40#discussion_r7101530"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/40"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10198954",
        "pull_request_review_id": null,
        "id": 10198954,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTk4OTU0",
        "diff_hunk": "@@ -0,0 +1,16 @@\n+{View} = require 'atom'",
        "path": "lib/debug-window.coffee",
        "position": null,
        "original_position": 1,
        "commit_id": "0cbf6a08acd81534334a7ffc45756ec3a7976773",
        "original_commit_id": "0974b630f4c64cc3c57e679b4c27e7484ebc75fb",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "@bhuga do we need this file? I don't see DebugView referenced anywhere.\n",
        "created_at": "2014-03-03T01:04:28Z",
        "updated_at": "2014-03-06T18:59:11Z",
        "html_url": "https://github.com/atom/vim-mode/pull/40#discussion_r10198954",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/40",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10198954"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/40#discussion_r10198954"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/40"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10198969",
        "pull_request_review_id": null,
        "id": 10198969,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTk4OTY5",
        "diff_hunk": "@@ -66,6 +67,14 @@ class VimState\n   #\n   # Returns nothing.\n   setupCommandMode: ->\n+    @editorView.command 'vim-mode:search', =>\n+      @currentSearch = new motions.Search(@editorView, @)\n+    @editorView.command 'vim-mode:reverse-search', =>\n+      @currentSearch = new motions.Search(@editorView, @)\n+      @currentSearch.reversed()\n+    @editorView.command 'vim-mode:search-history:previous', =>\n+      console.log \"previous!\"",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 18,
        "commit_id": "0cbf6a08acd81534334a7ffc45756ec3a7976773",
        "original_commit_id": "0974b630f4c64cc3c57e679b4c27e7484ebc75fb",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Can we drop this logging statement? Also should this have an implementation?\n",
        "created_at": "2014-03-03T01:06:20Z",
        "updated_at": "2014-03-06T18:59:11Z",
        "html_url": "https://github.com/atom/vim-mode/pull/40#discussion_r10198969",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/40",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10198969"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/40#discussion_r10198969"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/40"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10199003",
        "pull_request_review_id": null,
        "id": 10199003,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTk5MDAz",
        "diff_hunk": "@@ -1,8 +1,11 @@\n _ = require 'underscore-plus'\n-{Point, Range} = require 'atom'\n+{$$, Point, Range} = require 'atom'\n+VimCommandModeInputView = require './vim-command-input-view'\n \n class Motion\n-  constructor: (@editor) ->\n+  constructor: (@editor, @state) ->\n+    @initialize?()",
        "path": "lib/motions.coffee",
        "position": null,
        "original_position": 9,
        "commit_id": "0cbf6a08acd81534334a7ffc45756ec3a7976773",
        "original_commit_id": "0974b630f4c64cc3c57e679b4c27e7484ebc75fb",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Since `Search` overrides the the constructor anyway, how about we inline the initialize function?\n",
        "created_at": "2014-03-03T01:11:30Z",
        "updated_at": "2014-03-06T18:59:11Z",
        "html_url": "https://github.com/atom/vim-mode/pull/40#discussion_r10199003",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/40",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10199003"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/40#discussion_r10199003"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/40"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10199071",
        "pull_request_review_id": null,
        "id": 10199071,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTk5MDcx",
        "diff_hunk": "@@ -277,7 +280,99 @@ class MoveToStartOfFile extends MoveToLine\n   execute: (count=1) ->\n     super(count)\n \n+class Search extends Motion\n+  constructor: (@editorView, @state) ->\n+    super(@editorView.editor, @state)\n+\n+  initialize: =>\n+    @historyLocation = -1\n+    @view = new VimCommandModeInputView(@, class: 'search')",
        "path": "lib/motions.coffee",
        "position": null,
        "original_position": 24,
        "commit_id": "0cbf6a08acd81534334a7ffc45756ec3a7976773",
        "original_commit_id": "0974b630f4c64cc3c57e679b4c27e7484ebc75fb",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "@bhuga how would you feel about moving the functions around history and confiming into `VimCommandModeInputView` and passing the state object along to the view?\n\nI know that this is mixing concerns of the view with the model but I feel like I'd rather drop a ViewModel out of `VimCommandModeInputView` than having them riding along here. \n",
        "created_at": "2014-03-03T01:18:33Z",
        "updated_at": "2014-03-06T18:59:11Z",
        "html_url": "https://github.com/atom/vim-mode/pull/40#discussion_r10199071",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/40",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10199071"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/40#discussion_r10199071"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/40"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10199080",
        "pull_request_review_id": null,
        "id": 10199080,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTk5MDgw",
        "diff_hunk": "@@ -277,7 +280,99 @@ class MoveToStartOfFile extends MoveToLine\n   execute: (count=1) ->\n     super(count)\n \n+class Search extends Motion\n+  constructor: (@editorView, @state) ->\n+    super(@editorView.editor, @state)\n+\n+  initialize: =>\n+    @historyLocation = -1\n+    @view = new VimCommandModeInputView(@, class: 'search')\n+    @editor.commandModeInputView = @view\n+    @view.editor.on 'core:move-up', @increaseHistorySearch\n+    @view.editor.on 'core:move-down', @decreaseHistorySearch\n+\n+  restoreHistory: (location) ->",
        "path": "lib/motions.coffee",
        "position": null,
        "original_position": 29,
        "commit_id": "0cbf6a08acd81534334a7ffc45756ec3a7976773",
        "original_commit_id": "0974b630f4c64cc3c57e679b4c27e7484ebc75fb",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "It's probably best not to use `location` as it might be confused with `window.location`.\n",
        "created_at": "2014-03-03T01:19:31Z",
        "updated_at": "2014-03-06T18:59:11Z",
        "html_url": "https://github.com/atom/vim-mode/pull/40#discussion_r10199080",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/40",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10199080"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/40#discussion_r10199080"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/40"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10199096",
        "pull_request_review_id": null,
        "id": 10199096,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTk5MDk2",
        "diff_hunk": "@@ -0,0 +1,48 @@\n+{View, EditorView} = require 'atom'\n+\n+module.exports =\n+\n+class VimCommandModeInputView extends View\n+  @content: ->\n+    @div class: 'command-mode-input', =>\n+      @div class: 'editor-container', outlet: 'editorContainer', =>\n+        @subview 'editor', new EditorView(mini: true)\n+\n+  initialize: (@motion, opts = {})->\n+    @editor.setFontSize(11)",
        "path": "lib/vim-command-input-view.coffee",
        "position": null,
        "original_position": 12,
        "commit_id": "0cbf6a08acd81534334a7ffc45756ec3a7976773",
        "original_commit_id": "0974b630f4c64cc3c57e679b4c27e7484ebc75fb",
        "user": {
            "login": "dougblack",
            "id": 942395,
            "node_id": "MDQ6VXNlcjk0MjM5NQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/942395?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dougblack",
            "html_url": "https://github.com/dougblack",
            "followers_url": "https://api.github.com/users/dougblack/followers",
            "following_url": "https://api.github.com/users/dougblack/following{/other_user}",
            "gists_url": "https://api.github.com/users/dougblack/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dougblack/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dougblack/subscriptions",
            "organizations_url": "https://api.github.com/users/dougblack/orgs",
            "repos_url": "https://api.github.com/users/dougblack/repos",
            "events_url": "https://api.github.com/users/dougblack/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dougblack/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It would be cool if this could be set from a config variable.\n",
        "created_at": "2014-03-03T01:22:55Z",
        "updated_at": "2014-03-06T18:59:11Z",
        "html_url": "https://github.com/atom/vim-mode/pull/40#discussion_r10199096",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/40",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10199096"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/40#discussion_r10199096"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/40"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10199101",
        "pull_request_review_id": null,
        "id": 10199101,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTk5MTAx",
        "diff_hunk": "@@ -277,7 +280,99 @@ class MoveToStartOfFile extends MoveToLine\n   execute: (count=1) ->\n     super(count)\n \n+class Search extends Motion\n+  constructor: (@editorView, @state) ->\n+    super(@editorView.editor, @state)\n+\n+  initialize: =>\n+    @historyLocation = -1\n+    @view = new VimCommandModeInputView(@, class: 'search')\n+    @editor.commandModeInputView = @view\n+    @view.editor.on 'core:move-up', @increaseHistorySearch\n+    @view.editor.on 'core:move-down', @decreaseHistorySearch\n+\n+  restoreHistory: (location) ->\n+    @view.editor.setText(@history(location).searchTerm)\n+\n+  history: (location) ->\n+    @state.searchHistory[location]\n+\n+  increaseHistorySearch: =>\n+    if @history(@historyLocation + 1)?\n+      @historyLocation += 1\n+      @restoreHistory(@historyLocation)\n+\n+  decreaseHistorySearch: =>\n+    if @historyLocation <= 0\n+      # get us back to a clean slate\n+      @historyLocation = -1\n+      @view.editor.setText('')\n+    else\n+      @historyLocation -= 1\n+      @restoreHistory(@historyLocation)\n+\n+  reversed: =>\n+    @initiallyReversed = @reverse = true\n+\n+  execute: (count=1) ->\n+    @scan()\n+    @match count, (pos) =>\n+      @editor.setCursorBufferPosition(pos)\n+\n+  select: (count=1) ->\n+    @scan()\n+    cur = @editor.getCursorBufferPosition()\n+    @match count, (pos) =>\n+      @editor.setSelectedBufferRange([cur, pos])\n+    [true]\n+\n+  confirm: (view) =>\n+    @searchTerm = view.value\n+    @state.pushSearchHistory @\n+    @editorView.trigger 'vim-mode:search-complete'\n+\n+  repeat: (opts = {}) =>\n+    reverse = opts.backwards\n+    if @initiallyReversed and reverse\n+      @reverse = false\n+    else\n+      @reverse = reverse or @initiallyReversed\n+\n+    return @",
        "path": "lib/motions.coffee",
        "position": null,
        "original_position": 76,
        "commit_id": "0cbf6a08acd81534334a7ffc45756ec3a7976773",
        "original_commit_id": "0974b630f4c64cc3c57e679b4c27e7484ebc75fb",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "It's more coffee-like to just say `@`\n",
        "created_at": "2014-03-03T01:23:17Z",
        "updated_at": "2014-03-06T18:59:11Z",
        "html_url": "https://github.com/atom/vim-mode/pull/40#discussion_r10199101",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/40",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10199101"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/40#discussion_r10199101"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/40"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10199110",
        "pull_request_review_id": null,
        "id": 10199110,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTk5MTEw",
        "diff_hunk": "@@ -0,0 +1,48 @@\n+{View, EditorView} = require 'atom'\n+\n+module.exports =\n+\n+class VimCommandModeInputView extends View\n+  @content: ->\n+    @div class: 'command-mode-input', =>\n+      @div class: 'editor-container', outlet: 'editorContainer', =>\n+        @subview 'editor', new EditorView(mini: true)\n+\n+  initialize: (@motion, opts = {})->\n+    @editor.setFontSize(11)\n+\n+    if opts.class?\n+      @editorContainer.addClass opts.class",
        "path": "lib/vim-command-input-view.coffee",
        "position": null,
        "original_position": 15,
        "commit_id": "0cbf6a08acd81534334a7ffc45756ec3a7976773",
        "original_commit_id": "0974b630f4c64cc3c57e679b4c27e7484ebc75fb",
        "user": {
            "login": "dougblack",
            "id": 942395,
            "node_id": "MDQ6VXNlcjk0MjM5NQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/942395?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dougblack",
            "html_url": "https://github.com/dougblack",
            "followers_url": "https://api.github.com/users/dougblack/followers",
            "following_url": "https://api.github.com/users/dougblack/following{/other_user}",
            "gists_url": "https://api.github.com/users/dougblack/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dougblack/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dougblack/subscriptions",
            "organizations_url": "https://api.github.com/users/dougblack/orgs",
            "repos_url": "https://api.github.com/users/dougblack/repos",
            "events_url": "https://api.github.com/users/dougblack/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dougblack/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I've pulled this branch down to play with it and had a lot of fun. Very cool work.\n\nOne thing I missed from Vim is that hitting `/` populates the command bar with an initial `/`. I added the following two lines here to make it work. Not sure if this is the best way to do it.\n\n``` coffeescript\n      if opts.class == 'search'\n        @editor.setText('/')\n```\n\nOf course, we'd need to strip the `/` out before we actually search.\n",
        "created_at": "2014-03-03T01:25:07Z",
        "updated_at": "2014-03-06T18:59:11Z",
        "html_url": "https://github.com/atom/vim-mode/pull/40#discussion_r10199110",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/40",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10199110"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/40#discussion_r10199110"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/40"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10199115",
        "pull_request_review_id": null,
        "id": 10199115,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTk5MTE1",
        "diff_hunk": "@@ -277,7 +280,99 @@ class MoveToStartOfFile extends MoveToLine\n   execute: (count=1) ->\n     super(count)\n \n+class Search extends Motion\n+  constructor: (@editorView, @state) ->\n+    super(@editorView.editor, @state)\n+\n+  initialize: =>\n+    @historyLocation = -1\n+    @view = new VimCommandModeInputView(@, class: 'search')",
        "path": "lib/motions.coffee",
        "position": null,
        "original_position": 24,
        "commit_id": "0cbf6a08acd81534334a7ffc45756ec3a7976773",
        "original_commit_id": "0974b630f4c64cc3c57e679b4c27e7484ebc75fb",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Oh wait I remembered that you wanted `VimCommandModeInputView` to remain general for other commands. Would you mind moving these to a ViewModel that interacts with that instead?\n",
        "created_at": "2014-03-03T01:25:48Z",
        "updated_at": "2014-03-06T18:59:11Z",
        "html_url": "https://github.com/atom/vim-mode/pull/40#discussion_r10199115",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/40",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10199115"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/40#discussion_r10199115"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/40"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10199156",
        "pull_request_review_id": null,
        "id": 10199156,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTk5MTU2",
        "diff_hunk": "@@ -386,3 +386,117 @@ describe \"Motions\", ->\n \n       it \"moves the cursor to a specified line\", ->\n         expect(editor.getCursorScreenPosition()).toEqual [1, 4]\n+\n+  describe \"the / keybinding\", ->\n+    beforeEach ->\n+      editor.setText(\"abc\\ndef\\nabc\\ndef\\n\")\n+      editor.setCursorBufferPosition([0, 0])\n+\n+    describe \"as a motion\", ->\n+      it \"moves the cursor to the specified search pattern\", ->\n+        keydown '/'",
        "path": "spec/motions-spec.coffee",
        "position": null,
        "original_position": 12,
        "commit_id": "0cbf6a08acd81534334a7ffc45756ec3a7976773",
        "original_commit_id": "0974b630f4c64cc3c57e679b4c27e7484ebc75fb",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Atom's is generous with parens. The only place their usage isn't suggested is when the last argument is a multiline function. Can you switch this and the instances below?\n",
        "created_at": "2014-03-03T01:30:23Z",
        "updated_at": "2014-03-06T18:59:11Z",
        "html_url": "https://github.com/atom/vim-mode/pull/40#discussion_r10199156",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/40",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10199156"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/40#discussion_r10199156"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/40"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10199165",
        "pull_request_review_id": null,
        "id": 10199165,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTk5MTY1",
        "diff_hunk": "@@ -386,3 +386,117 @@ describe \"Motions\", ->\n \n       it \"moves the cursor to a specified line\", ->\n         expect(editor.getCursorScreenPosition()).toEqual [1, 4]\n+\n+  describe \"the / keybinding\", ->\n+    beforeEach ->\n+      editor.setText(\"abc\\ndef\\nabc\\ndef\\n\")\n+      editor.setCursorBufferPosition([0, 0])\n+\n+    describe \"as a motion\", ->\n+      it \"moves the cursor to the specified search pattern\", ->\n+        keydown '/'\n+\n+        # How to simulate typing?",
        "path": "spec/motions-spec.coffee",
        "position": null,
        "original_position": 14,
        "commit_id": "0cbf6a08acd81534334a7ffc45756ec3a7976773",
        "original_commit_id": "0974b630f4c64cc3c57e679b4c27e7484ebc75fb",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "I think this works for now, can you drop the comment so it isn't confusing for others?\n",
        "created_at": "2014-03-03T01:31:28Z",
        "updated_at": "2014-03-06T18:59:11Z",
        "html_url": "https://github.com/atom/vim-mode/pull/40#discussion_r10199165",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/40",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10199165"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/40#discussion_r10199165"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/40"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10199175",
        "pull_request_review_id": null,
        "id": 10199175,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTk5MTc1",
        "diff_hunk": "@@ -386,3 +386,117 @@ describe \"Motions\", ->\n \n       it \"moves the cursor to a specified line\", ->\n         expect(editor.getCursorScreenPosition()).toEqual [1, 4]\n+\n+  describe \"the / keybinding\", ->\n+    beforeEach ->\n+      editor.setText(\"abc\\ndef\\nabc\\ndef\\n\")\n+      editor.setCursorBufferPosition([0, 0])\n+\n+    describe \"as a motion\", ->\n+      it \"moves the cursor to the specified search pattern\", ->\n+        keydown '/'",
        "path": "spec/motions-spec.coffee",
        "position": null,
        "original_position": 12,
        "commit_id": "0cbf6a08acd81534334a7ffc45756ec3a7976773",
        "original_commit_id": "0974b630f4c64cc3c57e679b4c27e7484ebc75fb",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Oh and we don't use parens on expectations (but you already got that).\n",
        "created_at": "2014-03-03T01:33:21Z",
        "updated_at": "2014-03-06T18:59:11Z",
        "html_url": "https://github.com/atom/vim-mode/pull/40#discussion_r10199175",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/40",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10199175"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/40#discussion_r10199175"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/40"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10354555",
        "pull_request_review_id": null,
        "id": 10354555,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzU0NTU1",
        "diff_hunk": "@@ -1,8 +1,11 @@\n _ = require 'underscore-plus'\n-{Point, Range} = require 'atom'\n+{$$, Point, Range} = require 'atom'\n+VimCommandModeInputView = require './vim-command-input-view'\n \n class Motion\n-  constructor: (@editor) ->\n+  constructor: (@editor, @state) ->\n+    @initialize?()",
        "path": "lib/motions.coffee",
        "position": null,
        "original_position": 9,
        "commit_id": "0cbf6a08acd81534334a7ffc45756ec3a7976773",
        "original_commit_id": "0974b630f4c64cc3c57e679b4c27e7484ebc75fb",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "I don't think we need this now, right?\n",
        "created_at": "2014-03-06T18:48:37Z",
        "updated_at": "2014-03-06T18:59:11Z",
        "html_url": "https://github.com/atom/vim-mode/pull/40#discussion_r10354555",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/40",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10354555"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/40#discussion_r10354555"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/40"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10354680",
        "pull_request_review_id": null,
        "id": 10354680,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzU0Njgw",
        "diff_hunk": "@@ -1,8 +1,11 @@\n _ = require 'underscore-plus'\n-{Point, Range} = require 'atom'\n+{$$, Point, Range} = require 'atom'\n+VimCommandModeInputView = require './vim-command-input-view'\n \n class Motion\n-  constructor: (@editor) ->\n+  constructor: (@editor, @state) ->\n+    @initialize?()",
        "path": "lib/motions.coffee",
        "position": null,
        "original_position": 9,
        "commit_id": "0cbf6a08acd81534334a7ffc45756ec3a7976773",
        "original_commit_id": "0974b630f4c64cc3c57e679b4c27e7484ebc75fb",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Nope, fixed. Been so long since I added it, I forgot about it :blush:\n",
        "created_at": "2014-03-06T18:51:11Z",
        "updated_at": "2014-03-06T18:59:11Z",
        "html_url": "https://github.com/atom/vim-mode/pull/40#discussion_r10354680",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/40",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10354680"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/40#discussion_r10354680"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/40"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10332113",
        "pull_request_review_id": null,
        "id": 10332113,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzMyMTEz",
        "diff_hunk": "@@ -14,13 +14,14 @@ class VimState\n   opStack: null\n   mode: null\n   submode: null\n-  registers: null\n \n   constructor: (@editorView) ->\n     @editor = @editorView.editor\n     @opStack = []\n     @history = []\n-    @registers = {}\n+    atom.workspace ||= {}",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 11,
        "commit_id": "215b9278bbb042abfca0ad954bb3b7d9ebb7bb24",
        "original_commit_id": "eae4eaf3c309598e313471c54c38bea4a8bf7f9c",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This isn't necessarily initialized in test.\n",
        "created_at": "2014-03-06T05:30:57Z",
        "updated_at": "2014-03-06T20:12:24Z",
        "html_url": "https://github.com/atom/vim-mode/pull/134#discussion_r10332113",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/134",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10332113"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/134#discussion_r10332113"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/134"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10351467",
        "pull_request_review_id": null,
        "id": 10351467,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzUxNDY3",
        "diff_hunk": "@@ -14,13 +14,14 @@ class VimState\n   opStack: null\n   mode: null\n   submode: null\n-  registers: null\n \n   constructor: (@editorView) ->\n     @editor = @editorView.editor\n     @opStack = []\n     @history = []\n-    @registers = {}\n+    atom.workspace ||= {}",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 11,
        "commit_id": "215b9278bbb042abfca0ad954bb3b7d9ebb7bb24",
        "original_commit_id": "eae4eaf3c309598e313471c54c38bea4a8bf7f9c",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Would be better placed in `spec/spec-helper.coffee` like so:\n\n```\nbeforeEach ->\n  atom.workspace ||= {}\n```\n",
        "created_at": "2014-03-06T17:38:25Z",
        "updated_at": "2014-03-06T20:12:24Z",
        "html_url": "https://github.com/atom/vim-mode/pull/134#discussion_r10351467",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/134",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10351467"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/134#discussion_r10351467"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/134"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10351543",
        "pull_request_review_id": null,
        "id": 10351543,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzUxNTQz",
        "diff_hunk": "@@ -14,13 +14,14 @@ class VimState\n   opStack: null\n   mode: null\n   submode: null\n-  registers: null\n \n   constructor: (@editorView) ->\n     @editor = @editorView.editor\n     @opStack = []\n     @history = []\n-    @registers = {}\n+    atom.workspace ||= {}\n+    atom.workspace.vimState ||= {}\n+    atom.workspace.vimState.registers ||= {}",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 13,
        "commit_id": "215b9278bbb042abfca0ad954bb3b7d9ebb7bb24",
        "original_commit_id": "eae4eaf3c309598e313471c54c38bea4a8bf7f9c",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Also this stuff should probably go in `vim-mode.coffee` since that's the global package activation file.\n",
        "created_at": "2014-03-06T17:40:21Z",
        "updated_at": "2014-03-06T20:12:24Z",
        "html_url": "https://github.com/atom/vim-mode/pull/134#discussion_r10351543",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/134",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10351543"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/134#discussion_r10351543"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/134"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10352586",
        "pull_request_review_id": null,
        "id": 10352586,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzUyNTg2",
        "diff_hunk": "@@ -14,13 +14,14 @@ class VimState\n   opStack: null\n   mode: null\n   submode: null\n-  registers: null\n \n   constructor: (@editorView) ->\n     @editor = @editorView.editor\n     @opStack = []\n     @history = []\n-    @registers = {}\n+    atom.workspace ||= {}\n+    atom.workspace.vimState ||= {}\n+    atom.workspace.vimState.registers ||= {}",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 13,
        "commit_id": "215b9278bbb042abfca0ad954bb3b7d9ebb7bb24",
        "original_commit_id": "eae4eaf3c309598e313471c54c38bea4a8bf7f9c",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I've moved the `atom.workspace` initialization to test, but `vim-mode.coffee` seems to get reinitialized between files. `atom.workspace.vimState = {}` or `atom.workspace.vimState ||= {}` will not get tests passing anywhere.\n",
        "created_at": "2014-03-06T18:06:08Z",
        "updated_at": "2014-03-06T20:12:24Z",
        "html_url": "https://github.com/atom/vim-mode/pull/134#discussion_r10352586",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/134",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10352586"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/134#discussion_r10352586"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/134"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10352631",
        "pull_request_review_id": null,
        "id": 10352631,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzUyNjMx",
        "diff_hunk": "@@ -14,13 +14,14 @@ class VimState\n   opStack: null\n   mode: null\n   submode: null\n-  registers: null\n \n   constructor: (@editorView) ->\n     @editor = @editorView.editor\n     @opStack = []\n     @history = []\n-    @registers = {}\n+    atom.workspace ||= {}\n+    atom.workspace.vimState ||= {}\n+    atom.workspace.vimState.registers ||= {}",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 13,
        "commit_id": "215b9278bbb042abfca0ad954bb3b7d9ebb7bb24",
        "original_commit_id": "eae4eaf3c309598e313471c54c38bea4a8bf7f9c",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Excuse me if that wasn't clear--adding the vimState initialization _to anywhere in vim-mode.coffee_ won't get tests passing.\n",
        "created_at": "2014-03-06T18:07:12Z",
        "updated_at": "2014-03-06T20:12:24Z",
        "html_url": "https://github.com/atom/vim-mode/pull/134#discussion_r10352631",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/134",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10352631"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/134#discussion_r10352631"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/134"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10353336",
        "pull_request_review_id": null,
        "id": 10353336,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzUzMzM2",
        "diff_hunk": "@@ -14,13 +14,14 @@ class VimState\n   opStack: null\n   mode: null\n   submode: null\n-  registers: null\n \n   constructor: (@editorView) ->\n     @editor = @editorView.editor\n     @opStack = []\n     @history = []\n-    @registers = {}\n+    atom.workspace ||= {}\n+    atom.workspace.vimState ||= {}\n+    atom.workspace.vimState.registers ||= {}",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 13,
        "commit_id": "215b9278bbb042abfca0ad954bb3b7d9ebb7bb24",
        "original_commit_id": "eae4eaf3c309598e313471c54c38bea4a8bf7f9c",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Yeah sorry those were unrelated comments. I meant that I think this code should live in `vim-mode.coffee` as that is only executed once upon package activation instead of for every new editor (as it is currently).\n\nAnd you're right, this will require additional initialization in the specs.\n",
        "created_at": "2014-03-06T18:23:17Z",
        "updated_at": "2014-03-06T20:12:24Z",
        "html_url": "https://github.com/atom/vim-mode/pull/134#discussion_r10353336",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/134",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10353336"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/134#discussion_r10353336"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/134"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10353504",
        "pull_request_review_id": null,
        "id": 10353504,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzUzNTA0",
        "diff_hunk": "@@ -14,13 +14,14 @@ class VimState\n   opStack: null\n   mode: null\n   submode: null\n-  registers: null\n \n   constructor: (@editorView) ->\n     @editor = @editorView.editor\n     @opStack = []\n     @history = []\n-    @registers = {}\n+    atom.workspace ||= {}\n+    atom.workspace.vimState ||= {}\n+    atom.workspace.vimState.registers ||= {}",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 13,
        "commit_id": "215b9278bbb042abfca0ad954bb3b7d9ebb7bb24",
        "original_commit_id": "eae4eaf3c309598e313471c54c38bea4a8bf7f9c",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'll go ahead and move things and duplicate the code in tests to get it working, but it feels awkward to duplicate code from what's under test in a spec helper.\n",
        "created_at": "2014-03-06T18:27:08Z",
        "updated_at": "2014-03-06T20:12:24Z",
        "html_url": "https://github.com/atom/vim-mode/pull/134#discussion_r10353504",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/134",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10353504"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/134#discussion_r10353504"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/134"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10356253",
        "pull_request_review_id": null,
        "id": 10356253,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzU2MjUz",
        "diff_hunk": "@@ -5,6 +5,10 @@ module.exports =\n     'commandModeInputViewFontSize': 11\n \n   activate: (state) ->\n+    atom.workspace.vimState ||= {}",
        "path": "lib/vim-mode.coffee",
        "position": null,
        "original_position": 4,
        "commit_id": "215b9278bbb042abfca0ad954bb3b7d9ebb7bb24",
        "original_commit_id": "b75046fbbbf2eb4aa38a3643a06a49bffec8d159",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "What if we move these calls into a `_initializeGlobalState` on this object and then call that from `spec-helper`?\n",
        "created_at": "2014-03-06T19:22:27Z",
        "updated_at": "2014-03-06T20:12:24Z",
        "html_url": "https://github.com/atom/vim-mode/pull/134#discussion_r10356253",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/134",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10356253"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/134#discussion_r10356253"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/134"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10356273",
        "pull_request_review_id": null,
        "id": 10356273,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzU2Mjcz",
        "diff_hunk": "@@ -1,9 +1,15 @@\n {EditorView} = require 'atom'\n+atom.workspace ||= {}",
        "path": "spec/spec-helper.coffee",
        "position": null,
        "original_position": 2,
        "commit_id": "215b9278bbb042abfca0ad954bb3b7d9ebb7bb24",
        "original_commit_id": "b75046fbbbf2eb4aa38a3643a06a49bffec8d159",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "I think I would group push this down into the beforeEach.\n",
        "created_at": "2014-03-06T19:22:55Z",
        "updated_at": "2014-03-06T20:12:24Z",
        "html_url": "https://github.com/atom/vim-mode/pull/134#discussion_r10356273",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/134",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10356273"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/134#discussion_r10356273"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/134"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10356443",
        "pull_request_review_id": null,
        "id": 10356443,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzU2NDQz",
        "diff_hunk": "@@ -5,6 +5,10 @@ module.exports =\n     'commandModeInputViewFontSize': 11\n \n   activate: (state) ->\n+    atom.workspace.vimState ||= {}",
        "path": "lib/vim-mode.coffee",
        "position": null,
        "original_position": 4,
        "commit_id": "215b9278bbb042abfca0ad954bb3b7d9ebb7bb24",
        "original_commit_id": "b75046fbbbf2eb4aa38a3643a06a49bffec8d159",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I thought about that but...I don't actually know what object this is in order to call it :blush:. We're halfway through some package magic here. Is a `VimMode` global automagically created here? Can we access it somehow via `atom`, i.e. `atom.packages['vim-mode']` or something?\n\nThe only thing we require in `spec_helper` is `VimState`. Should we just export a function and require this from spec helper too?\n",
        "created_at": "2014-03-06T19:26:35Z",
        "updated_at": "2014-03-06T20:12:24Z",
        "html_url": "https://github.com/atom/vim-mode/pull/134#discussion_r10356443",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/134",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10356443"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/134#discussion_r10356443"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/134"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10356486",
        "pull_request_review_id": null,
        "id": 10356486,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzU2NDg2",
        "diff_hunk": "@@ -1,9 +1,15 @@\n {EditorView} = require 'atom'\n+atom.workspace ||= {}",
        "path": "spec/spec-helper.coffee",
        "position": null,
        "original_position": 2,
        "commit_id": "215b9278bbb042abfca0ad954bb3b7d9ebb7bb24",
        "original_commit_id": "b75046fbbbf2eb4aa38a3643a06a49bffec8d159",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Sorry, artifact from when I had them split into two files. Will fix.\n",
        "created_at": "2014-03-06T19:27:25Z",
        "updated_at": "2014-03-06T20:12:24Z",
        "html_url": "https://github.com/atom/vim-mode/pull/134#discussion_r10356486",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/134",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10356486"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/134#discussion_r10356486"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/134"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10356783",
        "pull_request_review_id": null,
        "id": 10356783,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzU2Nzgz",
        "diff_hunk": "@@ -5,6 +5,10 @@ module.exports =\n     'commandModeInputViewFontSize': 11\n \n   activate: (state) ->\n+    atom.workspace.vimState ||= {}",
        "path": "lib/vim-mode.coffee",
        "position": null,
        "original_position": 4,
        "commit_id": "215b9278bbb042abfca0ad954bb3b7d9ebb7bb24",
        "original_commit_id": "b75046fbbbf2eb4aa38a3643a06a49bffec8d159",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Yeah so I was thinking of adding the following to spec-helper:\n\n``` coffeescript\nVimMode = require '../lib/vim-mode'\n\nbeforeEach ->\n  atom.workspace = {}\n  VimMode._initializeGlobalState()\n```\n\nAlso you're totally right that we're reaching across interfaces with our crazy cache-editor-don't-load-the-package stuff in specs but the speed differences were greater than 50x so I figured it was worth munging the abstraction a bit.\n\nFWIW we actually do the proper package initialization in `vim-mode-spec.coffee` and in that spec `atom.packages.getPackageState('vim-mode')` will do what you're thinking it does.\n",
        "created_at": "2014-03-06T19:33:55Z",
        "updated_at": "2014-03-06T20:12:24Z",
        "html_url": "https://github.com/atom/vim-mode/pull/134#discussion_r10356783",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/134",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10356783"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/134#discussion_r10356783"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/134"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10356860",
        "pull_request_review_id": null,
        "id": 10356860,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzU2ODYw",
        "diff_hunk": "@@ -5,6 +5,10 @@ module.exports =\n     'commandModeInputViewFontSize': 11\n \n   activate: (state) ->\n+    atom.workspace.vimState ||= {}",
        "path": "lib/vim-mode.coffee",
        "position": null,
        "original_position": 4,
        "commit_id": "215b9278bbb042abfca0ad954bb3b7d9ebb7bb24",
        "original_commit_id": "b75046fbbbf2eb4aa38a3643a06a49bffec8d159",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "I forgot to mention, in most of our specs `atom.packages.getPackageState('vim-mode')` won't work because we don't do the proper package loading dance.\n",
        "created_at": "2014-03-06T19:35:35Z",
        "updated_at": "2014-03-06T20:12:24Z",
        "html_url": "https://github.com/atom/vim-mode/pull/134#discussion_r10356860",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/134",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10356860"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/134#discussion_r10356860"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/134"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10357424",
        "pull_request_review_id": null,
        "id": 10357424,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzU3NDI0",
        "diff_hunk": "@@ -5,6 +5,10 @@ module.exports =\n     'commandModeInputViewFontSize': 11\n \n   activate: (state) ->\n+    atom.workspace.vimState ||= {}",
        "path": "lib/vim-mode.coffee",
        "position": null,
        "original_position": 4,
        "commit_id": "215b9278bbb042abfca0ad954bb3b7d9ebb7bb24",
        "original_commit_id": "b75046fbbbf2eb4aa38a3643a06a49bffec8d159",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "> speed differences were greater than 50x\n\nThere's the context I was missing! I'll get this cleaned up.\n",
        "created_at": "2014-03-06T19:49:30Z",
        "updated_at": "2014-03-06T20:12:24Z",
        "html_url": "https://github.com/atom/vim-mode/pull/134#discussion_r10357424",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/134",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10357424"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/134#discussion_r10357424"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/134"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10358201",
        "pull_request_review_id": null,
        "id": 10358201,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzU4MjAx",
        "diff_hunk": "@@ -5,6 +5,10 @@ module.exports =\n     'commandModeInputViewFontSize': 11\n \n   activate: (state) ->\n+    atom.workspace.vimState ||= {}",
        "path": "lib/vim-mode.coffee",
        "position": null,
        "original_position": 4,
        "commit_id": "215b9278bbb042abfca0ad954bb3b7d9ebb7bb24",
        "original_commit_id": "b75046fbbbf2eb4aa38a3643a06a49bffec8d159",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Opps, I totally should have mentioned that sooner then. Onwards and upwards.\n",
        "created_at": "2014-03-06T20:08:16Z",
        "updated_at": "2014-03-06T20:12:24Z",
        "html_url": "https://github.com/atom/vim-mode/pull/134#discussion_r10358201",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/134",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10358201"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/134#discussion_r10358201"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/134"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10358240",
        "pull_request_review_id": null,
        "id": 10358240,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzU4MjQw",
        "diff_hunk": "@@ -4,7 +4,14 @@ module.exports =\n   configDefaults:\n     'commandModeInputViewFontSize': 11\n \n+  _initializeWorkspaceState: ->\n+    atom.workspace.vimState ||= {}\n+    atom.workspace.vimState.registers ||= {}\n+    atom.workspace.vimState.searchHistory ||= []\n+",
        "path": "lib/vim-mode.coffee",
        "position": 8,
        "original_position": 8,
        "commit_id": "215b9278bbb042abfca0ad954bb3b7d9ebb7bb24",
        "original_commit_id": "996024ebef414dda643ffd520dd54c3451712ced",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Sorry for the nitpick but I think there's an extra line here.\n",
        "created_at": "2014-03-06T20:09:12Z",
        "updated_at": "2014-03-06T20:12:24Z",
        "html_url": "https://github.com/atom/vim-mode/pull/134#discussion_r10358240",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/134",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10358240"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/134#discussion_r10358240"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/134"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10365509",
        "pull_request_review_id": null,
        "id": 10365509,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzY1NTA5",
        "diff_hunk": "@@ -0,0 +1,28 @@\n+## Maintainers Guide\n+\n+We'd like to foster an active community of mutual respect. With that as our\n+guiding principal, we strive to do the following:\n+\n+* Respond to issues/pulls in a timely manner.\n+* Encourage new contributors when possible.\n+* Maintain high code quality by ensuring all pulls request:",
        "path": "MAINTAINERS.md",
        "position": null,
        "original_position": 8,
        "commit_id": "160c376e38bbc6dba56d2f6d554e54279c4f9ab9",
        "original_commit_id": "805c8140b502b28c76cbf0de6a296269a109a58e",
        "user": {
            "login": "rgbkrk",
            "id": 836375,
            "node_id": "MDQ6VXNlcjgzNjM3NQ==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/836375?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rgbkrk",
            "html_url": "https://github.com/rgbkrk",
            "followers_url": "https://api.github.com/users/rgbkrk/followers",
            "following_url": "https://api.github.com/users/rgbkrk/following{/other_user}",
            "gists_url": "https://api.github.com/users/rgbkrk/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rgbkrk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rgbkrk/subscriptions",
            "organizations_url": "https://api.github.com/users/rgbkrk/orgs",
            "repos_url": "https://api.github.com/users/rgbkrk/repos",
            "events_url": "https://api.github.com/users/rgbkrk/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rgbkrk/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "s/pulls request/pull requests\n",
        "created_at": "2014-03-06T22:51:44Z",
        "updated_at": "2014-03-07T05:31:47Z",
        "html_url": "https://github.com/atom/vim-mode/pull/139#discussion_r10365509",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/139",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10365509"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/139#discussion_r10365509"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/139"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10365522",
        "pull_request_review_id": null,
        "id": 10365522,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzY1NTIy",
        "diff_hunk": "@@ -0,0 +1,28 @@\n+## Maintainers Guide\n+\n+We'd like to foster an active community of mutual respect. With that as our\n+guiding principal, we strive to do the following:\n+\n+* Respond to issues/pulls in a timely manner.\n+* Encourage new contributors when possible.\n+* Maintain high code quality by ensuring all pulls request:\n+  * Have clear concise code.\n+  * Have passing specs.\n+  * Have a proper note in the docs (if appropriate).\n+  * Be made mergable by it's creator (good feedback is hard enough).",
        "path": "MAINTAINERS.md",
        "position": null,
        "original_position": 12,
        "commit_id": "160c376e38bbc6dba56d2f6d554e54279c4f9ab9",
        "original_commit_id": "805c8140b502b28c76cbf0de6a296269a109a58e",
        "user": {
            "login": "rgbkrk",
            "id": 836375,
            "node_id": "MDQ6VXNlcjgzNjM3NQ==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/836375?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rgbkrk",
            "html_url": "https://github.com/rgbkrk",
            "followers_url": "https://api.github.com/users/rgbkrk/followers",
            "following_url": "https://api.github.com/users/rgbkrk/following{/other_user}",
            "gists_url": "https://api.github.com/users/rgbkrk/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rgbkrk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rgbkrk/subscriptions",
            "organizations_url": "https://api.github.com/users/rgbkrk/orgs",
            "repos_url": "https://api.github.com/users/rgbkrk/repos",
            "events_url": "https://api.github.com/users/rgbkrk/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rgbkrk/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "its\n",
        "created_at": "2014-03-06T22:51:57Z",
        "updated_at": "2014-03-07T05:31:47Z",
        "html_url": "https://github.com/atom/vim-mode/pull/139#discussion_r10365522",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/139",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10365522"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/139#discussion_r10365522"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/139"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10365536",
        "pull_request_review_id": null,
        "id": 10365536,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzY1NTM2",
        "diff_hunk": "@@ -0,0 +1,28 @@\n+## Maintainers Guide\n+\n+We'd like to foster an active community of mutual respect. With that as our\n+guiding principal, we strive to do the following:\n+\n+* Respond to issues/pulls in a timely manner.\n+* Encourage new contributors when possible.\n+* Maintain high code quality by ensuring all pulls request:\n+  * Have clear concise code.\n+  * Have passing specs.\n+  * Have a proper note in the docs (if appropriate).\n+  * Be made mergable by it's creator (good feedback is hard enough).\n+  * If a pull doesn't meet these standards, we should offer helpful actionable\n+    advice to get it there.\n+* Add `CHANGELOG.md` entries for every pull merged.\n+* Publish new releases in a timely manner.\n+* Label issues clearly\n+  * As either an `issue`, `enhancement` or `question`",
        "path": "MAINTAINERS.md",
        "position": null,
        "original_position": 18,
        "commit_id": "160c376e38bbc6dba56d2f6d554e54279c4f9ab9",
        "original_commit_id": "805c8140b502b28c76cbf0de6a296269a109a58e",
        "user": {
            "login": "dougblack",
            "id": 942395,
            "node_id": "MDQ6VXNlcjk0MjM5NQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/942395?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dougblack",
            "html_url": "https://github.com/dougblack",
            "followers_url": "https://api.github.com/users/dougblack/followers",
            "following_url": "https://api.github.com/users/dougblack/following{/other_user}",
            "gists_url": "https://api.github.com/users/dougblack/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dougblack/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dougblack/subscriptions",
            "organizations_url": "https://api.github.com/users/dougblack/orgs",
            "repos_url": "https://api.github.com/users/dougblack/repos",
            "events_url": "https://api.github.com/users/dougblack/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dougblack/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Looks like this is the only sub-bullet that doesn't end in a period.\n",
        "created_at": "2014-03-06T22:52:18Z",
        "updated_at": "2014-03-07T05:31:47Z",
        "html_url": "https://github.com/atom/vim-mode/pull/139#discussion_r10365536",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/139",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10365536"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/139#discussion_r10365536"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/139"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10365640",
        "pull_request_review_id": null,
        "id": 10365640,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzY1NjQw",
        "diff_hunk": "@@ -0,0 +1,28 @@\n+## Maintainers Guide\n+\n+We'd like to foster an active community of mutual respect. With that as our\n+guiding principal, we strive to do the following:\n+\n+* Respond to issues/pulls in a timely manner.\n+* Encourage new contributors when possible.\n+* Maintain high code quality by ensuring all pulls request:\n+  * Have clear concise code.\n+  * Have passing specs.\n+  * Have a proper note in the docs (if appropriate).\n+  * Be made mergable by it's creator (good feedback is hard enough).\n+  * If a pull doesn't meet these standards, we should offer helpful actionable\n+    advice to get it there.\n+* Add `CHANGELOG.md` entries for every pull merged.\n+* Publish new releases in a timely manner.\n+* Label issues clearly\n+  * As either an `issue`, `enhancement` or `question`\n+  * The `question` label indicates that there's a question about current\n+    functionality or future functionality.\n+* Label pull requests clearly\n+  * As either an `issue` or `enhancement`.\n+  * While being reviewed mark an additional `under-review` label is appropriate,\n+    so the community know the status.",
        "path": "MAINTAINERS.md",
        "position": null,
        "original_position": 24,
        "commit_id": "160c376e38bbc6dba56d2f6d554e54279c4f9ab9",
        "original_commit_id": "805c8140b502b28c76cbf0de6a296269a109a58e",
        "user": {
            "login": "rgbkrk",
            "id": 836375,
            "node_id": "MDQ6VXNlcjgzNjM3NQ==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/836375?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rgbkrk",
            "html_url": "https://github.com/rgbkrk",
            "followers_url": "https://api.github.com/users/rgbkrk/followers",
            "following_url": "https://api.github.com/users/rgbkrk/following{/other_user}",
            "gists_url": "https://api.github.com/users/rgbkrk/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rgbkrk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rgbkrk/subscriptions",
            "organizations_url": "https://api.github.com/users/rgbkrk/orgs",
            "repos_url": "https://api.github.com/users/rgbkrk/repos",
            "events_url": "https://api.github.com/users/rgbkrk/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rgbkrk/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This is all :lipstick:, sorry.\n\ns/label is/label if/\n\ns/community know the status/community knows the status\n",
        "created_at": "2014-03-06T22:54:20Z",
        "updated_at": "2014-03-07T05:31:47Z",
        "html_url": "https://github.com/atom/vim-mode/pull/139#discussion_r10365640",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/139",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10365640"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/139#discussion_r10365640"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/139"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10365700",
        "pull_request_review_id": null,
        "id": 10365700,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzY1NzAw",
        "diff_hunk": "@@ -0,0 +1,28 @@\n+## Maintainers Guide\n+\n+We'd like to foster an active community of mutual respect. With that as our\n+guiding principal, we strive to do the following:",
        "path": "MAINTAINERS.md",
        "position": null,
        "original_position": 4,
        "commit_id": "160c376e38bbc6dba56d2f6d554e54279c4f9ab9",
        "original_commit_id": "805c8140b502b28c76cbf0de6a296269a109a58e",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "principle\n\nYou make a nice pull request, and out march the grammar nazis, eh? No good deed goes unpunished :laughing:\n",
        "created_at": "2014-03-06T22:55:40Z",
        "updated_at": "2014-03-07T05:31:47Z",
        "html_url": "https://github.com/atom/vim-mode/pull/139#discussion_r10365700",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/139",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10365700"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/139#discussion_r10365700"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/139"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10365772",
        "pull_request_review_id": null,
        "id": 10365772,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzY1Nzcy",
        "diff_hunk": "@@ -0,0 +1,28 @@\n+## Maintainers Guide\n+\n+We'd like to foster an active community of mutual respect. With that as our\n+guiding principal, we strive to do the following:",
        "path": "MAINTAINERS.md",
        "position": null,
        "original_position": 4,
        "commit_id": "160c376e38bbc6dba56d2f6d554e54279c4f9ab9",
        "original_commit_id": "805c8140b502b28c76cbf0de6a296269a109a58e",
        "user": {
            "login": "dougblack",
            "id": 942395,
            "node_id": "MDQ6VXNlcjk0MjM5NQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/942395?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dougblack",
            "html_url": "https://github.com/dougblack",
            "followers_url": "https://api.github.com/users/dougblack/followers",
            "following_url": "https://api.github.com/users/dougblack/following{/other_user}",
            "gists_url": "https://api.github.com/users/dougblack/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dougblack/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dougblack/subscriptions",
            "organizations_url": "https://api.github.com/users/dougblack/orgs",
            "repos_url": "https://api.github.com/users/dougblack/repos",
            "events_url": "https://api.github.com/users/dougblack/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dougblack/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "So true! Sorry for any nitpicks @mcolyer!\n",
        "created_at": "2014-03-06T22:57:16Z",
        "updated_at": "2014-03-07T05:31:47Z",
        "html_url": "https://github.com/atom/vim-mode/pull/139#discussion_r10365772",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/139",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10365772"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/139#discussion_r10365772"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/139"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10367367",
        "pull_request_review_id": null,
        "id": 10367367,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzY3MzY3",
        "diff_hunk": "@@ -0,0 +1,28 @@\n+## Maintainers Guide\n+\n+We'd like to foster an active community of mutual respect. With that as our\n+guiding principal, we strive to do the following:",
        "path": "MAINTAINERS.md",
        "position": null,
        "original_position": 4,
        "commit_id": "160c376e38bbc6dba56d2f6d554e54279c4f9ab9",
        "original_commit_id": "805c8140b502b28c76cbf0de6a296269a109a58e",
        "user": {
            "login": "rgbkrk",
            "id": 836375,
            "node_id": "MDQ6VXNlcjgzNjM3NQ==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/836375?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rgbkrk",
            "html_url": "https://github.com/rgbkrk",
            "followers_url": "https://api.github.com/users/rgbkrk/followers",
            "following_url": "https://api.github.com/users/rgbkrk/following{/other_user}",
            "gists_url": "https://api.github.com/users/rgbkrk/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rgbkrk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rgbkrk/subscriptions",
            "organizations_url": "https://api.github.com/users/rgbkrk/orgs",
            "repos_url": "https://api.github.com/users/rgbkrk/repos",
            "events_url": "https://api.github.com/users/rgbkrk/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rgbkrk/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yeah, sorry. Guess I could have made a PR against the branch...\n",
        "created_at": "2014-03-06T23:39:54Z",
        "updated_at": "2014-03-07T05:31:47Z",
        "html_url": "https://github.com/atom/vim-mode/pull/139#discussion_r10367367",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/139",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10367367"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/139#discussion_r10367367"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/139"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10367528",
        "pull_request_review_id": null,
        "id": 10367528,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzY3NTI4",
        "diff_hunk": "@@ -0,0 +1,28 @@\n+## Maintainers Guide\n+\n+We'd like to foster an active community of mutual respect. With that as our\n+guiding principal, we strive to do the following:",
        "path": "MAINTAINERS.md",
        "position": null,
        "original_position": 4,
        "commit_id": "160c376e38bbc6dba56d2f6d554e54279c4f9ab9",
        "original_commit_id": "805c8140b502b28c76cbf0de6a296269a109a58e",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "It's totally okay. I know everyone here is working towards making things better (and they are all valid points).\n",
        "created_at": "2014-03-06T23:45:05Z",
        "updated_at": "2014-03-07T05:31:47Z",
        "html_url": "https://github.com/atom/vim-mode/pull/139#discussion_r10367528",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/139",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10367528"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/139#discussion_r10367528"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/139"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10415569",
        "pull_request_review_id": null,
        "id": 10415569,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDE1NTY5",
        "diff_hunk": "@@ -119,3 +119,47 @@\n   'ctrl-w v': 'pane:split-right'\n   'ctrl-w ctrl-s': 'pane:split-down'\n   'ctrl-w s': 'pane:split-down'\n+\n+'.vim-mode.operator-pending-mode:not(.mini)':",
        "path": "keymaps/vim-mode.cson",
        "position": 21,
        "original_position": 21,
        "commit_id": "634745ab0817ee0ddec4078fbfcb785662ccdb1b",
        "original_commit_id": "634745ab0817ee0ddec4078fbfcb785662ccdb1b",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "There's a lot of duplication here...could we rephrase the regular vim-mode list as `not(.operator-pending)`?\n",
        "created_at": "2014-03-09T20:41:01Z",
        "updated_at": "2014-03-09T20:41:01Z",
        "html_url": "https://github.com/atom/vim-mode/pull/152#discussion_r10415569",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/152",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10415569"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/152#discussion_r10415569"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/152"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10416094",
        "pull_request_review_id": null,
        "id": 10416094,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDE2MDk0",
        "diff_hunk": "@@ -125,7 +125,14 @@ class MoveToPreviousWholeWord extends Motion\n class MoveToNextWord extends Motion\n   execute: (count=1) ->\n     _.times count, =>\n-      @editor.moveCursorToBeginningOfNextWord()\n+      cursor = @editor.getCursor()\n+      current = cursor.getBufferPosition()\n+      next = cursor.getBeginningOfNextWordBufferPosition()\n+\n+      if current != next\n+        @editor.moveCursorToBeginningOfNextWord()",
        "path": "lib/motions.coffee",
        "position": null,
        "original_position": 10,
        "commit_id": "5c6b9e766cfda8202f338baa978a656e8967cc2d",
        "original_commit_id": "0ac91a9d8bca29e9145864e5a19807ef2ecbead9",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "As long as we have the cursor available, a lot of these calls can be `cursor.moveToBeginningOfNextWord` or whatever the method may be.\n",
        "created_at": "2014-03-09T22:05:49Z",
        "updated_at": "2014-03-09T22:09:46Z",
        "html_url": "https://github.com/atom/vim-mode/pull/153#discussion_r10416094",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/153",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10416094"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/153#discussion_r10416094"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/153"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10416148",
        "pull_request_review_id": null,
        "id": 10416148,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDE2MTQ4",
        "diff_hunk": "@@ -125,7 +125,14 @@ class MoveToPreviousWholeWord extends Motion\n class MoveToNextWord extends Motion\n   execute: (count=1) ->\n     _.times count, =>\n-      @editor.moveCursorToBeginningOfNextWord()\n+      cursor = @editor.getCursor()\n+      current = cursor.getBufferPosition()\n+      next = cursor.getBeginningOfNextWordBufferPosition()\n+\n+      if current != next\n+        @editor.moveCursorToBeginningOfNextWord()",
        "path": "lib/motions.coffee",
        "position": null,
        "original_position": 10,
        "commit_id": "5c6b9e766cfda8202f338baa978a656e8967cc2d",
        "original_commit_id": "0ac91a9d8bca29e9145864e5a19807ef2ecbead9",
        "user": {
            "login": "dougblack",
            "id": 942395,
            "node_id": "MDQ6VXNlcjk0MjM5NQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/942395?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dougblack",
            "html_url": "https://github.com/dougblack",
            "followers_url": "https://api.github.com/users/dougblack/followers",
            "following_url": "https://api.github.com/users/dougblack/following{/other_user}",
            "gists_url": "https://api.github.com/users/dougblack/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dougblack/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dougblack/subscriptions",
            "organizations_url": "https://api.github.com/users/dougblack/orgs",
            "repos_url": "https://api.github.com/users/dougblack/repos",
            "events_url": "https://api.github.com/users/dougblack/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dougblack/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Good point. Updated.\n",
        "created_at": "2014-03-09T22:15:18Z",
        "updated_at": "2014-03-09T22:15:18Z",
        "html_url": "https://github.com/atom/vim-mode/pull/153#discussion_r10416148",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/153",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10416148"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/153#discussion_r10416148"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/153"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10419085",
        "pull_request_review_id": null,
        "id": 10419085,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDE5MDg1",
        "diff_hunk": "@@ -426,7 +426,7 @@ describe \"Motions\", ->\n \n   describe \"the gg keybinding\", ->\n     beforeEach ->\n-      editor.setText(\" 1abc\\n2\\n3\\n\")\n+      editor.setText(\" 1abc\\n 2\\n3\\n\")",
        "path": "spec/motions-spec.coffee",
        "position": 5,
        "original_position": 5,
        "commit_id": "9762fedb391d7a181d0d8a9d033ec08b4f67fdc9",
        "original_commit_id": "9762fedb391d7a181d0d8a9d033ec08b4f67fdc9",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Why was this needed?\n",
        "created_at": "2014-03-10T04:31:53Z",
        "updated_at": "2014-03-10T04:31:53Z",
        "html_url": "https://github.com/atom/vim-mode/pull/151#discussion_r10419085",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/151",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10419085"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/151#discussion_r10419085"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/151"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10419108",
        "pull_request_review_id": null,
        "id": 10419108,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDE5MTA4",
        "diff_hunk": "@@ -426,7 +426,7 @@ describe \"Motions\", ->\n \n   describe \"the gg keybinding\", ->\n     beforeEach ->\n-      editor.setText(\" 1abc\\n2\\n3\\n\")\n+      editor.setText(\" 1abc\\n 2\\n3\\n\")",
        "path": "spec/motions-spec.coffee",
        "position": 5,
        "original_position": 5,
        "commit_id": "9762fedb391d7a181d0d8a9d033ec08b4f67fdc9",
        "original_commit_id": "9762fedb391d7a181d0d8a9d033ec08b4f67fdc9",
        "user": {
            "login": "tony612",
            "id": 1253659,
            "node_id": "MDQ6VXNlcjEyNTM2NTk=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1253659?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tony612",
            "html_url": "https://github.com/tony612",
            "followers_url": "https://api.github.com/users/tony612/followers",
            "following_url": "https://api.github.com/users/tony612/following{/other_user}",
            "gists_url": "https://api.github.com/users/tony612/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tony612/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tony612/subscriptions",
            "organizations_url": "https://api.github.com/users/tony612/orgs",
            "repos_url": "https://api.github.com/users/tony612/repos",
            "events_url": "https://api.github.com/users/tony612/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tony612/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I just want to make sure the cursor will be at the `2` instead of the space before the `2`, just like https://github.com/atom/vim-mode/blob/master/spec/motions-spec.coffee#L451..L457 does. But it seems https://github.com/atom/vim-mode/blob/master/spec/motions-spec.coffee#L438 has tested that?\n",
        "created_at": "2014-03-10T04:36:43Z",
        "updated_at": "2014-03-10T04:36:58Z",
        "html_url": "https://github.com/atom/vim-mode/pull/151#discussion_r10419108",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/151",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10419108"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/151#discussion_r10419108"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/151"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10419145",
        "pull_request_review_id": null,
        "id": 10419145,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDE5MTQ1",
        "diff_hunk": "@@ -426,7 +426,7 @@ describe \"Motions\", ->\n \n   describe \"the gg keybinding\", ->\n     beforeEach ->\n-      editor.setText(\" 1abc\\n2\\n3\\n\")\n+      editor.setText(\" 1abc\\n 2\\n3\\n\")",
        "path": "spec/motions-spec.coffee",
        "position": 5,
        "original_position": 5,
        "commit_id": "9762fedb391d7a181d0d8a9d033ec08b4f67fdc9",
        "original_commit_id": "9762fedb391d7a181d0d8a9d033ec08b4f67fdc9",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": ":+1: gotcha. Will test and merge tomorrow. I'll add you to the changelog. Thanks for the patch!\n",
        "created_at": "2014-03-10T04:42:45Z",
        "updated_at": "2014-03-10T04:42:45Z",
        "html_url": "https://github.com/atom/vim-mode/pull/151#discussion_r10419145",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/151",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10419145"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/151#discussion_r10419145"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/151"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10438121",
        "pull_request_review_id": null,
        "id": 10438121,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDM4MTIx",
        "diff_hunk": "@@ -119,3 +119,47 @@\n   'ctrl-w v': 'pane:split-right'\n   'ctrl-w ctrl-s': 'pane:split-down'\n   'ctrl-w s': 'pane:split-down'\n+\n+'.vim-mode.operator-pending-mode:not(.mini)':",
        "path": "keymaps/vim-mode.cson",
        "position": 21,
        "original_position": 21,
        "commit_id": "634745ab0817ee0ddec4078fbfcb785662ccdb1b",
        "original_commit_id": "634745ab0817ee0ddec4078fbfcb785662ccdb1b",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "I like this idea.\n",
        "created_at": "2014-03-10T16:55:22Z",
        "updated_at": "2014-03-10T16:55:22Z",
        "html_url": "https://github.com/atom/vim-mode/pull/152#discussion_r10438121",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/152",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10438121"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/152#discussion_r10438121"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/152"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10438318",
        "pull_request_review_id": null,
        "id": 10438318,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDM4MzE4",
        "diff_hunk": "@@ -120,6 +133,11 @@ class Yank extends Operator\n     else\n       @editor.clearSelections()\n \n+    if @motion instanceof textObjects.InnerWord",
        "path": "lib/operators.coffee",
        "position": 36,
        "original_position": 36,
        "commit_id": "634745ab0817ee0ddec4078fbfcb785662ccdb1b",
        "original_commit_id": "634745ab0817ee0ddec4078fbfcb785662ccdb1b",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "I think this needs to be done in a more generic way on the motion. Otherwise we're going to start including a check for many different text objects.\n",
        "created_at": "2014-03-10T16:59:36Z",
        "updated_at": "2014-03-10T16:59:36Z",
        "html_url": "https://github.com/atom/vim-mode/pull/152#discussion_r10438318",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/152",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10438318"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/152#discussion_r10438318"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/152"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10438352",
        "pull_request_review_id": null,
        "id": 10438352,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDM4MzUy",
        "diff_hunk": "@@ -148,20 +152,20 @@ class VimState\n     _.each commands, (fn, commandName) =>\n       eventName = \"vim-mode:#{commandName}\"\n       @editorView.command eventName, (e) =>\n-        possibleOperators = fn(e)\n-        possibleOperators = if _.isArray(possibleOperators) then possibleOperators else [possibleOperators]\n-        for possibleOperator in possibleOperators\n+        operations = fn(e)",
        "path": "lib/vim-state.coffee",
        "position": 57,
        "original_position": 57,
        "commit_id": "634745ab0817ee0ddec4078fbfcb785662ccdb1b",
        "original_commit_id": "634745ab0817ee0ddec4078fbfcb785662ccdb1b",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": ":+1: on the rename here, definitely clarifies.\n",
        "created_at": "2014-03-10T17:00:33Z",
        "updated_at": "2014-03-10T17:00:33Z",
        "html_url": "https://github.com/atom/vim-mode/pull/152#discussion_r10438352",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/152",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10438352"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/152#discussion_r10438352"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/152"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10367463",
        "pull_request_review_id": null,
        "id": 10367463,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzY3NDYz",
        "diff_hunk": "@@ -0,0 +1,18 @@\n+VimCommandModeInputView = require './vim-command-mode-input-view'\n+\n+module.exports =\n+\n+# This is the view model for a Replace operator. It is an implementation\n+# detail of the same, and is tested via the use of the `r` keybinding\n+# in operators-spec.coffee.\n+class ReplaceViewModel",
        "path": "lib/replace-view-model.coffee",
        "position": 8,
        "original_position": 8,
        "commit_id": "81d3e1b832a04d84da107c2d670384500e6fad7a",
        "original_commit_id": "5b869ee782fed07600f90ae11aa1ab879d689e6f",
        "user": {
            "login": "dougblack",
            "id": 942395,
            "node_id": "MDQ6VXNlcjk0MjM5NQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/942395?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dougblack",
            "html_url": "https://github.com/dougblack",
            "followers_url": "https://api.github.com/users/dougblack/followers",
            "following_url": "https://api.github.com/users/dougblack/following{/other_user}",
            "gists_url": "https://api.github.com/users/dougblack/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dougblack/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dougblack/subscriptions",
            "organizations_url": "https://api.github.com/users/dougblack/orgs",
            "repos_url": "https://api.github.com/users/dougblack/repos",
            "events_url": "https://api.github.com/users/dougblack/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dougblack/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Looking ahead at commands such as `t` and `f` that will also need to accept a single character, I think we could save some lines by making this a bit more generic. Could we get away with making this a `SingleCharInputViewModel` with a constructor something like\n\n``` coffeescript\nclass SingleCharInputViewModel\n  constructor: (@operator, @class, @completeCommand) ->\n    ...\n```\n\nthat replaces the existing `replace` specific things with those variables?\n",
        "created_at": "2014-03-06T23:43:16Z",
        "updated_at": "2014-03-10T17:32:51Z",
        "html_url": "https://github.com/atom/vim-mode/pull/138#discussion_r10367463",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/138",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10367463"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/138#discussion_r10367463"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/138"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10367598",
        "pull_request_review_id": null,
        "id": 10367598,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzY3NTk4",
        "diff_hunk": "@@ -0,0 +1,18 @@\n+VimCommandModeInputView = require './vim-command-mode-input-view'\n+\n+module.exports =\n+\n+# This is the view model for a Replace operator. It is an implementation\n+# detail of the same, and is tested via the use of the `r` keybinding\n+# in operators-spec.coffee.\n+class ReplaceViewModel",
        "path": "lib/replace-view-model.coffee",
        "position": 8,
        "original_position": 8,
        "commit_id": "81d3e1b832a04d84da107c2d670384500e6fad7a",
        "original_commit_id": "5b869ee782fed07600f90ae11aa1ab879d689e6f",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "We'll almost certainly do that, but my usual M.O. is to merge the first time and extract the second. It prevents gooberish fixes like the ones to `vim-mode.less` where I got ahead of myself and merged broken CSS earlier today. No problem getting ahead of ourselves if @mcolyer agrees with you, though.\n",
        "created_at": "2014-03-06T23:47:02Z",
        "updated_at": "2014-03-10T17:32:51Z",
        "html_url": "https://github.com/atom/vim-mode/pull/138#discussion_r10367598",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/138",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10367598"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/138#discussion_r10367598"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/138"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10439472",
        "pull_request_review_id": null,
        "id": 10439472,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDM5NDcy",
        "diff_hunk": "@@ -246,5 +248,31 @@ class Repeat extends Operator\n         cmd = @vimState.history[0]\n         cmd?.execute()\n \n+#\n+# Replace the character under the cursor\n+#\n+class Replace extends Operator\n+  constructor: (@editorView, @vimState, {@selectOptions}={}) ->\n+    @editor = @editorView.editor\n+    @complete = true\n+    @viewModel = new ReplaceViewModel(@)\n+\n+  execute: (count=1) ->\n+    editor = @editorView.editor\n+    pos = editor.getCursorBufferPosition()\n+    currentRowLength = editor.lineLengthForBufferRow(pos.row)\n+    # Do nothing on an empty line\n+    return unless currentRowLength > 0\n+\n+    # Do nothing if asked to replace more characters than there are on a line",
        "path": "lib/operators.coffee",
        "position": null,
        "original_position": 27,
        "commit_id": "81d3e1b832a04d84da107c2d670384500e6fad7a",
        "original_commit_id": "8e24e3615b4e56dbb1e896cb6ec6b2edcdca1678",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "This is purely stylistic, I usually group guards together so 264-268 would be a single group separated by blank lines.\n",
        "created_at": "2014-03-10T17:23:11Z",
        "updated_at": "2014-03-10T17:32:51Z",
        "html_url": "https://github.com/atom/vim-mode/pull/138#discussion_r10439472",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/138",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10439472"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/138#discussion_r10439472"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/138"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10439526",
        "pull_request_review_id": null,
        "id": 10439526,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDM5NTI2",
        "diff_hunk": "@@ -0,0 +1,18 @@\n+VimCommandModeInputView = require './vim-command-mode-input-view'",
        "path": "lib/replace-view-model.coffee",
        "position": 1,
        "original_position": 1,
        "commit_id": "81d3e1b832a04d84da107c2d670384500e6fad7a",
        "original_commit_id": "8e24e3615b4e56dbb1e896cb6ec6b2edcdca1678",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "If we're going to have several of these, what do you think about creating a new folder called `views`? Not sure if it should go under lib or the top-level, I'm leaning top-level.\n",
        "created_at": "2014-03-10T17:24:15Z",
        "updated_at": "2014-03-10T17:32:51Z",
        "html_url": "https://github.com/atom/vim-mode/pull/138#discussion_r10439526",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/138",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10439526"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/138#discussion_r10439526"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/138"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10439577",
        "pull_request_review_id": null,
        "id": 10439577,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDM5NTc3",
        "diff_hunk": "@@ -246,5 +248,31 @@ class Repeat extends Operator\n         cmd = @vimState.history[0]\n         cmd?.execute()\n \n+#\n+# Replace the character under the cursor\n+#\n+class Replace extends Operator\n+  constructor: (@editorView, @vimState, {@selectOptions}={}) ->\n+    @editor = @editorView.editor\n+    @complete = true\n+    @viewModel = new ReplaceViewModel(@)\n+\n+  execute: (count=1) ->\n+    editor = @editorView.editor\n+    pos = editor.getCursorBufferPosition()\n+    currentRowLength = editor.lineLengthForBufferRow(pos.row)\n+    # Do nothing on an empty line\n+    return unless currentRowLength > 0\n+\n+    # Do nothing if asked to replace more characters than there are on a line\n+    return unless currentRowLength - pos.column >= count\n+    @undoTransaction =>\n+      start = editor.getCursorBufferPosition()\n+      _.times count, =>\n+        point = editor.getCursorBufferPosition()\n+        editor.setTextInBufferRange(Range.fromPointWithDelta(point, 0, 1),  @viewModel.char)",
        "path": "lib/operators.coffee",
        "position": null,
        "original_position": 33,
        "commit_id": "81d3e1b832a04d84da107c2d670384500e6fad7a",
        "original_commit_id": "8e24e3615b4e56dbb1e896cb6ec6b2edcdca1678",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "There are two spaces after the comma here, :lipstick: \n",
        "created_at": "2014-03-10T17:25:18Z",
        "updated_at": "2014-03-10T17:32:51Z",
        "html_url": "https://github.com/atom/vim-mode/pull/138#discussion_r10439577",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/138",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10439577"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/138#discussion_r10439577"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/138"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10439628",
        "pull_request_review_id": null,
        "id": 10439628,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDM5NjI4",
        "diff_hunk": "@@ -0,0 +1,18 @@\n+VimCommandModeInputView = require './vim-command-mode-input-view'\n+\n+module.exports =\n+\n+# This is the view model for a Replace operator. It is an implementation\n+# detail of the same, and is tested via the use of the `r` keybinding\n+# in operators-spec.coffee.\n+class ReplaceViewModel",
        "path": "lib/replace-view-model.coffee",
        "position": 8,
        "original_position": 8,
        "commit_id": "81d3e1b832a04d84da107c2d670384500e6fad7a",
        "original_commit_id": "5b869ee782fed07600f90ae11aa1ab879d689e6f",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "I'm fine with waiting. I would like to get these moved into a separate folder as mentioned above though.\n",
        "created_at": "2014-03-10T17:26:14Z",
        "updated_at": "2014-03-10T17:32:51Z",
        "html_url": "https://github.com/atom/vim-mode/pull/138#discussion_r10439628",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/138",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10439628"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/138#discussion_r10439628"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/138"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10439676",
        "pull_request_review_id": null,
        "id": 10439676,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDM5Njc2",
        "diff_hunk": "@@ -0,0 +1,18 @@\n+VimCommandModeInputView = require './vim-command-mode-input-view'",
        "path": "lib/replace-view-model.coffee",
        "position": 1,
        "original_position": 1,
        "commit_id": "81d3e1b832a04d84da107c2d670384500e6fad7a",
        "original_commit_id": "8e24e3615b4e56dbb1e896cb6ec6b2edcdca1678",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'd be :+1: on that. I lean to `lib/views`, so the `require` statements are just `./views/xyz`.\n\nCould it wait until a next pull for `f` and `t`, which might refactor the main view model a bit?\n",
        "created_at": "2014-03-10T17:27:10Z",
        "updated_at": "2014-03-10T17:32:51Z",
        "html_url": "https://github.com/atom/vim-mode/pull/138#discussion_r10439676",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/138",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10439676"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/138#discussion_r10439676"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/138"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10439690",
        "pull_request_review_id": null,
        "id": 10439690,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDM5Njkw",
        "diff_hunk": "@@ -246,5 +248,31 @@ class Repeat extends Operator\n         cmd = @vimState.history[0]\n         cmd?.execute()\n \n+#\n+# Replace the character under the cursor\n+#\n+class Replace extends Operator\n+  constructor: (@editorView, @vimState, {@selectOptions}={}) ->\n+    @editor = @editorView.editor\n+    @complete = true\n+    @viewModel = new ReplaceViewModel(@)\n+\n+  execute: (count=1) ->\n+    editor = @editorView.editor\n+    pos = editor.getCursorBufferPosition()\n+    currentRowLength = editor.lineLengthForBufferRow(pos.row)\n+    # Do nothing on an empty line\n+    return unless currentRowLength > 0\n+\n+    # Do nothing if asked to replace more characters than there are on a line",
        "path": "lib/operators.coffee",
        "position": null,
        "original_position": 27,
        "commit_id": "81d3e1b832a04d84da107c2d670384500e6fad7a",
        "original_commit_id": "8e24e3615b4e56dbb1e896cb6ec6b2edcdca1678",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "consistency :+1:, will fix.\n",
        "created_at": "2014-03-10T17:27:22Z",
        "updated_at": "2014-03-10T17:32:51Z",
        "html_url": "https://github.com/atom/vim-mode/pull/138#discussion_r10439690",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/138",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10439690"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/138#discussion_r10439690"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/138"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10439765",
        "pull_request_review_id": null,
        "id": 10439765,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDM5NzY1",
        "diff_hunk": "@@ -18,6 +18,11 @@ describe \"Operators\", ->\n     options.element ?= editorView[0]\n     helpers.keydown(key, options)\n \n+  commandModeInputKeydown = (key, opts = {}) ->\n+    opts.element = editor.commandModeInputView.editor.find('input').get(0)\n+    opts.raw     = true",
        "path": "spec/operators-spec.coffee",
        "position": null,
        "original_position": 6,
        "commit_id": "81d3e1b832a04d84da107c2d670384500e6fad7a",
        "original_commit_id": "8e24e3615b4e56dbb1e896cb6ec6b2edcdca1678",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "I actually try to stay away from balanced equal signs to keep diffs line based. Mislav has a great [writeup](http://mislav.uniqpath.com/2014/02/hidden-documentation/) about it (search for \"stick to a line-based coding style \")\n",
        "created_at": "2014-03-10T17:29:04Z",
        "updated_at": "2014-03-10T17:32:51Z",
        "html_url": "https://github.com/atom/vim-mode/pull/138#discussion_r10439765",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/138",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10439765"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/138#discussion_r10439765"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/138"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10439797",
        "pull_request_review_id": null,
        "id": 10439797,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDM5Nzk3",
        "diff_hunk": "@@ -246,5 +248,31 @@ class Repeat extends Operator\n         cmd = @vimState.history[0]\n         cmd?.execute()\n \n+#\n+# Replace the character under the cursor\n+#\n+class Replace extends Operator\n+  constructor: (@editorView, @vimState, {@selectOptions}={}) ->\n+    @editor = @editorView.editor\n+    @complete = true\n+    @viewModel = new ReplaceViewModel(@)\n+\n+  execute: (count=1) ->\n+    editor = @editorView.editor\n+    pos = editor.getCursorBufferPosition()\n+    currentRowLength = editor.lineLengthForBufferRow(pos.row)\n+    # Do nothing on an empty line\n+    return unless currentRowLength > 0\n+\n+    # Do nothing if asked to replace more characters than there are on a line\n+    return unless currentRowLength - pos.column >= count\n+    @undoTransaction =>\n+      start = editor.getCursorBufferPosition()\n+      _.times count, =>\n+        point = editor.getCursorBufferPosition()\n+        editor.setTextInBufferRange(Range.fromPointWithDelta(point, 0, 1),  @viewModel.char)",
        "path": "lib/operators.coffee",
        "position": null,
        "original_position": 33,
        "commit_id": "81d3e1b832a04d84da107c2d670384500e6fad7a",
        "original_commit_id": "8e24e3615b4e56dbb1e896cb6ec6b2edcdca1678",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "good :eyes:\n",
        "created_at": "2014-03-10T17:29:31Z",
        "updated_at": "2014-03-10T17:32:51Z",
        "html_url": "https://github.com/atom/vim-mode/pull/138#discussion_r10439797",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/138",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10439797"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/138#discussion_r10439797"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/138"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10439818",
        "pull_request_review_id": null,
        "id": 10439818,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDM5ODE4",
        "diff_hunk": "@@ -37,7 +37,7 @@ keydown = (key, {element, ctrl, shift, alt, meta}={}) ->\n     e.initTextEvent eventArgs...\n     target.dispatchEvent e\n \n-  key = \"U+#{key.charCodeAt(0).toString(16)}\" unless key == 'escape'\n+  key = \"U+#{key.charCodeAt(0).toString(16)}\" unless key == 'escape' || raw?",
        "path": "spec/spec-helper.coffee",
        "position": 14,
        "original_position": 14,
        "commit_id": "81d3e1b832a04d84da107c2d670384500e6fad7a",
        "original_commit_id": "8e24e3615b4e56dbb1e896cb6ec6b2edcdca1678",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Sorry I forgot to mention this when you said you were struggling with the key stuff in specs. This function is ... special.\n",
        "created_at": "2014-03-10T17:29:56Z",
        "updated_at": "2014-03-10T17:32:51Z",
        "html_url": "https://github.com/atom/vim-mode/pull/138#discussion_r10439818",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/138",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10439818"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/138#discussion_r10439818"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/138"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10439912",
        "pull_request_review_id": null,
        "id": 10439912,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDM5OTEy",
        "diff_hunk": "@@ -37,7 +37,7 @@ keydown = (key, {element, ctrl, shift, alt, meta}={}) ->\n     e.initTextEvent eventArgs...\n     target.dispatchEvent e\n \n-  key = \"U+#{key.charCodeAt(0).toString(16)}\" unless key == 'escape'\n+  key = \"U+#{key.charCodeAt(0).toString(16)}\" unless key == 'escape' || raw?",
        "path": "spec/spec-helper.coffee",
        "position": 14,
        "original_position": 14,
        "commit_id": "81d3e1b832a04d84da107c2d670384500e6fad7a",
        "original_commit_id": "8e24e3615b4e56dbb1e896cb6ec6b2edcdca1678",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Special but required. I understand it all now. The raw argument actually means we can test typing in the main editor too, which is working great for an experimental 'undo the whole last insert mode worth of typing' branch I'm playing with.\n",
        "created_at": "2014-03-10T17:31:29Z",
        "updated_at": "2014-03-10T17:32:51Z",
        "html_url": "https://github.com/atom/vim-mode/pull/138#discussion_r10439912",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/138",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10439912"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/138#discussion_r10439912"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/138"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10439956",
        "pull_request_review_id": null,
        "id": 10439956,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDM5OTU2",
        "diff_hunk": "@@ -0,0 +1,18 @@\n+VimCommandModeInputView = require './vim-command-mode-input-view'",
        "path": "lib/replace-view-model.coffee",
        "position": 1,
        "original_position": 1,
        "commit_id": "81d3e1b832a04d84da107c2d670384500e6fad7a",
        "original_commit_id": "8e24e3615b4e56dbb1e896cb6ec6b2edcdca1678",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "That works and feel free to push it until then (I get the sense it's coming shortly).\n",
        "created_at": "2014-03-10T17:32:15Z",
        "updated_at": "2014-03-10T17:32:51Z",
        "html_url": "https://github.com/atom/vim-mode/pull/138#discussion_r10439956",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/138",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10439956"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/138#discussion_r10439956"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/138"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10265659",
        "pull_request_review_id": null,
        "id": 10265659,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjY1NjU5",
        "diff_hunk": "@@ -559,6 +559,19 @@ describe \"Operators\", ->\n         it \"indents both lines\", ->\n           expect(editor.getText()).toBe \"  12345\\n  abcde\\nABCDE\"\n \n+  xdescribe \"the = keybinding\", ->\n+    beforeEach ->\n+      editor.setText(\"12345\\n  abcde\")",
        "path": "spec/operators-spec.coffee",
        "position": null,
        "original_position": 6,
        "commit_id": "ee76c8638e10e55788fa40d351518f497973f9f1",
        "original_commit_id": "f32eaed8514635b365b9788bf322828794d6fb49",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "So I'd set this text up so that it's using the js grammar (which has indent rules) just for this spec and then reset it so it doesn't affect the other specs.\n\nHere are a few examples of the calls that you'll need in order to do this.\nhttps://github.com/atom/grammar-selector/blob/master/lib/grammar-list-view.coffee#L36\nhttps://github.com/atom/grammar-selector/blob/master/spec/grammar-selector-spec.coffee#L28\nhttps://github.com/atom/grammar-selector/blob/master/spec/grammar-selector-spec.coffee#L40\n\nDoes that help?\n",
        "created_at": "2014-03-04T17:51:52Z",
        "updated_at": "2014-03-10T18:45:24Z",
        "html_url": "https://github.com/atom/vim-mode/pull/125#discussion_r10265659",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/125",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10265659"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/125#discussion_r10265659"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/125"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10307003",
        "pull_request_review_id": null,
        "id": 10307003,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzA3MDAz",
        "diff_hunk": "@@ -198,10 +198,18 @@ class VimState\n   # Returns the value of the given register or undefined if it hasn't\n   # been set.\n   getRegister: (name) ->\n-    if name == '*'\n+    if name == '*' || name == '+'\n       text = atom.clipboard.read()\n       type = utils.copyType(text)\n       {text, type}\n+    else if name == '%'\n+      text = @editor.getUri()\n+      type = utils.copyType(text)\n+      {text, type}\n+    else if name == \"_\" # Blackhole always returns nothing",
        "path": "lib/vim-state.coffee",
        "position": 13,
        "original_position": 13,
        "commit_id": "d4b453d84a7c3555229b91662043da5e7e58287c",
        "original_commit_id": "2e5bbbfb98617215420446d8a374259733eee900",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "This is for my own personal curiosity, why does one use the `_` register?\n",
        "created_at": "2014-03-05T16:47:19Z",
        "updated_at": "2014-03-10T19:46:01Z",
        "html_url": "https://github.com/atom/vim-mode/pull/127#discussion_r10307003",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/127",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10307003"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/127#discussion_r10307003"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/127"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10307062",
        "pull_request_review_id": null,
        "id": 10307062,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzA3MDYy",
        "diff_hunk": "@@ -44,7 +44,26 @@\n   '\" h': 'vim-mode:register-prefix'\n   '\" i': 'vim-mode:register-prefix'\n   '\" j': 'vim-mode:register-prefix'\n+  '\" k': 'vim-mode:register-prefix'",
        "path": "keymaps/vim-mode.cson",
        "position": 4,
        "original_position": 4,
        "commit_id": "d4b453d84a7c3555229b91662043da5e7e58287c",
        "original_commit_id": "2e5bbbfb98617215420446d8a374259733eee900",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Can you update the note in `docs/overview.md` concerning registers?\n",
        "created_at": "2014-03-05T16:48:40Z",
        "updated_at": "2014-03-10T19:46:01Z",
        "html_url": "https://github.com/atom/vim-mode/pull/127#discussion_r10307062",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/127",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10307062"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/127#discussion_r10307062"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/127"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10307071",
        "pull_request_review_id": null,
        "id": 10307071,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzA3MDcx",
        "diff_hunk": "@@ -198,10 +198,18 @@ class VimState\n   # Returns the value of the given register or undefined if it hasn't\n   # been set.\n   getRegister: (name) ->\n-    if name == '*'\n+    if name == '*' || name == '+'\n       text = atom.clipboard.read()\n       type = utils.copyType(text)\n       {text, type}\n+    else if name == '%'\n+      text = @editor.getUri()\n+      type = utils.copyType(text)\n+      {text, type}\n+    else if name == \"_\" # Blackhole always returns nothing",
        "path": "lib/vim-state.coffee",
        "position": 13,
        "original_position": 13,
        "commit_id": "d4b453d84a7c3555229b91662043da5e7e58287c",
        "original_commit_id": "2e5bbbfb98617215420446d8a374259733eee900",
        "user": {
            "login": "zenhob",
            "id": 12092,
            "node_id": "MDQ6VXNlcjEyMDky",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12092?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zenhob",
            "html_url": "https://github.com/zenhob",
            "followers_url": "https://api.github.com/users/zenhob/followers",
            "following_url": "https://api.github.com/users/zenhob/following{/other_user}",
            "gists_url": "https://api.github.com/users/zenhob/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zenhob/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zenhob/subscriptions",
            "organizations_url": "https://api.github.com/users/zenhob/orgs",
            "repos_url": "https://api.github.com/users/zenhob/repos",
            "events_url": "https://api.github.com/users/zenhob/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zenhob/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "From the Vim docs:\n\n> When writing to this register, nothing happens.  This can be used to delete\n> text without affecting the normal registers.  When reading from this register,\n> nothing is returned.\n",
        "created_at": "2014-03-05T16:48:45Z",
        "updated_at": "2014-03-10T19:46:01Z",
        "html_url": "https://github.com/atom/vim-mode/pull/127#discussion_r10307071",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/127",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10307071"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/127#discussion_r10307071"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/127"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10307163",
        "pull_request_review_id": null,
        "id": 10307163,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzA3MTYz",
        "diff_hunk": "@@ -198,10 +198,18 @@ class VimState\n   # Returns the value of the given register or undefined if it hasn't\n   # been set.\n   getRegister: (name) ->\n-    if name == '*'\n+    if name == '*' || name == '+'",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 5,
        "commit_id": "d4b453d84a7c3555229b91662043da5e7e58287c",
        "original_commit_id": "2e5bbbfb98617215420446d8a374259733eee900",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "It's more idiomatic to say `name in ['*', '+']`\n",
        "created_at": "2014-03-05T16:50:44Z",
        "updated_at": "2014-03-10T19:46:01Z",
        "html_url": "https://github.com/atom/vim-mode/pull/127#discussion_r10307163",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/127",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10307163"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/127#discussion_r10307163"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/127"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10307185",
        "pull_request_review_id": null,
        "id": 10307185,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzA3MTg1",
        "diff_hunk": "@@ -212,8 +220,10 @@ class VimState\n   #\n   # Returns nothing.\n   setRegister: (name, value) ->\n-    if name == '*'\n+    if name == '*' || name == '+'",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 25,
        "commit_id": "d4b453d84a7c3555229b91662043da5e7e58287c",
        "original_commit_id": "2e5bbbfb98617215420446d8a374259733eee900",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Same as above.\n",
        "created_at": "2014-03-05T16:51:09Z",
        "updated_at": "2014-03-10T19:46:01Z",
        "html_url": "https://github.com/atom/vim-mode/pull/127#discussion_r10307185",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/127",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10307185"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/127#discussion_r10307185"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/127"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10307291",
        "pull_request_review_id": null,
        "id": 10307291,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzA3Mjkx",
        "diff_hunk": "@@ -198,10 +198,18 @@ class VimState\n   # Returns the value of the given register or undefined if it hasn't\n   # been set.\n   getRegister: (name) ->\n-    if name == '*'\n+    if name == '*' || name == '+'\n       text = atom.clipboard.read()\n       type = utils.copyType(text)\n       {text, type}\n+    else if name == '%'\n+      text = @editor.getUri()\n+      type = utils.copyType(text)\n+      {text, type}\n+    else if name == \"_\" # Blackhole always returns nothing",
        "path": "lib/vim-state.coffee",
        "position": 13,
        "original_position": 13,
        "commit_id": "d4b453d84a7c3555229b91662043da5e7e58287c",
        "original_commit_id": "2e5bbbfb98617215420446d8a374259733eee900",
        "user": {
            "login": "cschneid",
            "id": 6119,
            "node_id": "MDQ6VXNlcjYxMTk=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/6119?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cschneid",
            "html_url": "https://github.com/cschneid",
            "followers_url": "https://api.github.com/users/cschneid/followers",
            "following_url": "https://api.github.com/users/cschneid/following{/other_user}",
            "gists_url": "https://api.github.com/users/cschneid/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cschneid/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cschneid/subscriptions",
            "organizations_url": "https://api.github.com/users/cschneid/orgs",
            "repos_url": "https://api.github.com/users/cschneid/repos",
            "events_url": "https://api.github.com/users/cschneid/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cschneid/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yeah, its used to not touch other registers:\n\n`\"_D` to delete to end of line without saving it into a register.\n\nI mostly just implemented it because it was there on the `:help registers` page in vim, and doing literally nothing is the easiest feature to implement.\n",
        "created_at": "2014-03-05T16:53:30Z",
        "updated_at": "2014-03-10T19:46:01Z",
        "html_url": "https://github.com/atom/vim-mode/pull/127#discussion_r10307291",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/127",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10307291"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/127#discussion_r10307291"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/127"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10307303",
        "pull_request_review_id": null,
        "id": 10307303,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzA3MzAz",
        "diff_hunk": "@@ -198,10 +198,18 @@ class VimState\n   # Returns the value of the given register or undefined if it hasn't\n   # been set.\n   getRegister: (name) ->\n-    if name == '*'\n+    if name == '*' || name == '+'",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 5,
        "commit_id": "d4b453d84a7c3555229b91662043da5e7e58287c",
        "original_commit_id": "2e5bbbfb98617215420446d8a374259733eee900",
        "user": {
            "login": "cschneid",
            "id": 6119,
            "node_id": "MDQ6VXNlcjYxMTk=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/6119?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cschneid",
            "html_url": "https://github.com/cschneid",
            "followers_url": "https://api.github.com/users/cschneid/followers",
            "following_url": "https://api.github.com/users/cschneid/following{/other_user}",
            "gists_url": "https://api.github.com/users/cschneid/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cschneid/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cschneid/subscriptions",
            "organizations_url": "https://api.github.com/users/cschneid/orgs",
            "repos_url": "https://api.github.com/users/cschneid/repos",
            "events_url": "https://api.github.com/users/cschneid/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cschneid/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Cool, total noob to coffeescript, will update in a few.\n",
        "created_at": "2014-03-05T16:53:43Z",
        "updated_at": "2014-03-10T19:46:01Z",
        "html_url": "https://github.com/atom/vim-mode/pull/127#discussion_r10307303",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/127",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10307303"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/127#discussion_r10307303"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/127"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10441366",
        "pull_request_review_id": null,
        "id": 10441366,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDQxMzY2",
        "diff_hunk": "@@ -62,3 +73,40 @@ describe \"Prefixes\", ->\n \n         it \"overwrites the contents of the system clipboard\", ->\n           expect(atom.clipboard.read()).toEqual 'new content'\n+\n+    # FIXME: once linux support comes out, this needs to read from",
        "path": "spec/prefixes-spec.coffee",
        "position": 23,
        "original_position": 23,
        "commit_id": "d4b453d84a7c3555229b91662043da5e7e58287c",
        "original_commit_id": "fbf2e408df543c5b8edd70621c9e7e5afc85475e",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "I'd like to strike these comments, `atom.clipboard` should encapsulate that issue.\n",
        "created_at": "2014-03-10T17:58:57Z",
        "updated_at": "2014-03-10T19:46:01Z",
        "html_url": "https://github.com/atom/vim-mode/pull/127#discussion_r10441366",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/127",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10441366"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/127#discussion_r10441366"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/127"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10441442",
        "pull_request_review_id": null,
        "id": 10441442,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDQxNDQy",
        "diff_hunk": "@@ -62,3 +73,40 @@ describe \"Prefixes\", ->\n \n         it \"overwrites the contents of the system clipboard\", ->\n           expect(atom.clipboard.read()).toEqual 'new content'\n+\n+    # FIXME: once linux support comes out, this needs to read from\n+    # the correct system clipboard. For now it behaves just like the * register\n+    describe \"the + register\", ->\n+      describe \"reading\", ->\n+        it \"is the same the system clipboard\", ->\n+          expect(vimState.getRegister('*').text).toEqual 'initial clipboard content'\n+          expect(vimState.getRegister('*').type).toEqual 'character'\n+\n+      describe \"writing\", ->\n+        beforeEach ->\n+          vimState.setRegister('*', text: 'new content')\n+\n+        it \"overwrites the contents of the system clipboard\", ->\n+          expect(atom.clipboard.read()).toEqual 'new content'\n+\n+    describe \"the _ register\", ->\n+      describe \"reading\", ->\n+        it \"is always the empty string\", ->\n+          expect(vimState.getRegister(\"_\").text).toEqual ''\n+\n+      describe \"writing\", ->\n+        it \"throws away anything written to it\", ->\n+          vimState.setRegister('_', text: 'new content')\n+          expect(vimState.getRegister(\"_\").text).toEqual ''\n+\n+    # FIXME: @editor.getUri() is returning undefined. Not sure how to setup",
        "path": "spec/prefixes-spec.coffee",
        "position": null,
        "original_position": 48,
        "commit_id": "d4b453d84a7c3555229b91662043da5e7e58287c",
        "original_commit_id": "fbf2e408df543c5b8edd70621c9e7e5afc85475e",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "This is because an unsaved buffer has an undefined uri. You'll want to use [jasmine's](http://jasmine.github.io/1.3/introduction.html) `spyOn` functionality to stub the return value.\n",
        "created_at": "2014-03-10T18:00:16Z",
        "updated_at": "2014-03-10T19:46:01Z",
        "html_url": "https://github.com/atom/vim-mode/pull/127#discussion_r10441442",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/127",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10441442"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/127#discussion_r10441442"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/127"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10441993",
        "pull_request_review_id": null,
        "id": 10441993,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDQxOTkz",
        "diff_hunk": "@@ -62,3 +73,40 @@ describe \"Prefixes\", ->\n \n         it \"overwrites the contents of the system clipboard\", ->\n           expect(atom.clipboard.read()).toEqual 'new content'\n+\n+    # FIXME: once linux support comes out, this needs to read from",
        "path": "spec/prefixes-spec.coffee",
        "position": 23,
        "original_position": 23,
        "commit_id": "d4b453d84a7c3555229b91662043da5e7e58287c",
        "original_commit_id": "fbf2e408df543c5b8edd70621c9e7e5afc85475e",
        "user": {
            "login": "cschneid",
            "id": 6119,
            "node_id": "MDQ6VXNlcjYxMTk=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/6119?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cschneid",
            "html_url": "https://github.com/cschneid",
            "followers_url": "https://api.github.com/users/cschneid/followers",
            "following_url": "https://api.github.com/users/cschneid/following{/other_user}",
            "gists_url": "https://api.github.com/users/cschneid/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cschneid/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cschneid/subscriptions",
            "organizations_url": "https://api.github.com/users/cschneid/orgs",
            "repos_url": "https://api.github.com/users/cschneid/repos",
            "events_url": "https://api.github.com/users/cschneid/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cschneid/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Well, the `+` and `*` registers need to talk with different clipboards.\n\nFrom Vim's docs:\n\n```\n7. Selection and drop registers \"*, \"+ and \"~ \nUse these registers for storing and retrieving the selected text for the GUI.\nSee |quotestar| and |quoteplus|.  When the clipboard is not available or not\nworking, the unnamed register is used instead.  For Unix systems the clipboard\nis only available when the |+xterm_clipboard| feature is present.  {not in Vi}\n\nNote that there is only a distinction between \"* and \"+ for X11 systems.  For\nan explanation of the difference, see |x11-selection|.  Under MS-Windows, use\nof \"* and \"+ is actually synonymous and refers to the |gui-clipboard|.\n```\n\nSo we'll need the register code to recognize that's the case.  Presumably the register code just will ask `atom.clipboard` the correct thing, but it will need to branch.\n",
        "created_at": "2014-03-10T18:11:07Z",
        "updated_at": "2014-03-10T19:46:01Z",
        "html_url": "https://github.com/atom/vim-mode/pull/127#discussion_r10441993",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/127",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10441993"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/127#discussion_r10441993"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/127"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10442015",
        "pull_request_review_id": null,
        "id": 10442015,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDQyMDE1",
        "diff_hunk": "@@ -62,3 +73,40 @@ describe \"Prefixes\", ->\n \n         it \"overwrites the contents of the system clipboard\", ->\n           expect(atom.clipboard.read()).toEqual 'new content'\n+\n+    # FIXME: once linux support comes out, this needs to read from\n+    # the correct system clipboard. For now it behaves just like the * register\n+    describe \"the + register\", ->\n+      describe \"reading\", ->\n+        it \"is the same the system clipboard\", ->\n+          expect(vimState.getRegister('*').text).toEqual 'initial clipboard content'\n+          expect(vimState.getRegister('*').type).toEqual 'character'\n+\n+      describe \"writing\", ->\n+        beforeEach ->\n+          vimState.setRegister('*', text: 'new content')\n+\n+        it \"overwrites the contents of the system clipboard\", ->\n+          expect(atom.clipboard.read()).toEqual 'new content'\n+\n+    describe \"the _ register\", ->\n+      describe \"reading\", ->\n+        it \"is always the empty string\", ->\n+          expect(vimState.getRegister(\"_\").text).toEqual ''\n+\n+      describe \"writing\", ->\n+        it \"throws away anything written to it\", ->\n+          vimState.setRegister('_', text: 'new content')\n+          expect(vimState.getRegister(\"_\").text).toEqual ''\n+\n+    # FIXME: @editor.getUri() is returning undefined. Not sure how to setup",
        "path": "spec/prefixes-spec.coffee",
        "position": null,
        "original_position": 48,
        "commit_id": "d4b453d84a7c3555229b91662043da5e7e58287c",
        "original_commit_id": "fbf2e408df543c5b8edd70621c9e7e5afc85475e",
        "user": {
            "login": "cschneid",
            "id": 6119,
            "node_id": "MDQ6VXNlcjYxMTk=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/6119?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cschneid",
            "html_url": "https://github.com/cschneid",
            "followers_url": "https://api.github.com/users/cschneid/followers",
            "following_url": "https://api.github.com/users/cschneid/following{/other_user}",
            "gists_url": "https://api.github.com/users/cschneid/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cschneid/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cschneid/subscriptions",
            "organizations_url": "https://api.github.com/users/cschneid/orgs",
            "repos_url": "https://api.github.com/users/cschneid/repos",
            "events_url": "https://api.github.com/users/cschneid/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cschneid/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Cool - I'll fix that up\nThanks\n",
        "created_at": "2014-03-10T18:11:39Z",
        "updated_at": "2014-03-10T19:46:01Z",
        "html_url": "https://github.com/atom/vim-mode/pull/127#discussion_r10442015",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/127",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10442015"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/127#discussion_r10442015"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/127"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10445304",
        "pull_request_review_id": null,
        "id": 10445304,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDQ1MzA0",
        "diff_hunk": "@@ -62,3 +73,40 @@ describe \"Prefixes\", ->\n \n         it \"overwrites the contents of the system clipboard\", ->\n           expect(atom.clipboard.read()).toEqual 'new content'\n+\n+    # FIXME: once linux support comes out, this needs to read from",
        "path": "spec/prefixes-spec.coffee",
        "position": 23,
        "original_position": 23,
        "commit_id": "d4b453d84a7c3555229b91662043da5e7e58287c",
        "original_commit_id": "fbf2e408df543c5b8edd70621c9e7e5afc85475e",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Opps, sorry that I didn't understand that. Can you add a link to that section of the docs in the comment so our future-selves will remember that?\n",
        "created_at": "2014-03-10T19:14:28Z",
        "updated_at": "2014-03-10T19:46:01Z",
        "html_url": "https://github.com/atom/vim-mode/pull/127#discussion_r10445304",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/127",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10445304"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/127#discussion_r10445304"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/127"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10576600",
        "pull_request_review_id": null,
        "id": 10576600,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNTc2NjAw",
        "diff_hunk": "@@ -74,7 +74,11 @@ class SearchViewModel\n \n   scan: ->\n     term = @searchTerm\n-    regexp = new RegExp(term, 'g')\n+    regexp = try\n+               new RegExp(term, 'g')",
        "path": "lib/search-view-model.coffee",
        "position": 6,
        "original_position": 6,
        "commit_id": "54d3e4a08ef29f3dda63e509287ce78c9acaf94d",
        "original_commit_id": "54d3e4a08ef29f3dda63e509287ce78c9acaf94d",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "I'm not super crazy about having alignment on the equals here. I'd rather have two space indent so that if we change the name of `regexp` in the future it doesn't cause unnecessary line diffs.\n",
        "created_at": "2014-03-13T17:47:58Z",
        "updated_at": "2014-03-13T17:47:58Z",
        "html_url": "https://github.com/atom/vim-mode/pull/164#discussion_r10576600",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/164",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10576600"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/164#discussion_r10576600"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/164"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10596791",
        "pull_request_review_id": null,
        "id": 10596791,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNTk2Nzkx",
        "diff_hunk": "@@ -119,3 +119,47 @@\n   'ctrl-w v': 'pane:split-right'\n   'ctrl-w ctrl-s': 'pane:split-down'\n   'ctrl-w s': 'pane:split-down'\n+\n+'.vim-mode.operator-pending-mode:not(.mini)':",
        "path": "keymaps/vim-mode.cson",
        "position": 21,
        "original_position": 21,
        "commit_id": "634745ab0817ee0ddec4078fbfcb785662ccdb1b",
        "original_commit_id": "634745ab0817ee0ddec4078fbfcb785662ccdb1b",
        "user": {
            "login": "jroes",
            "id": 27847,
            "node_id": "MDQ6VXNlcjI3ODQ3",
            "avatar_url": "https://avatars0.githubusercontent.com/u/27847?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jroes",
            "html_url": "https://github.com/jroes",
            "followers_url": "https://api.github.com/users/jroes/followers",
            "following_url": "https://api.github.com/users/jroes/following{/other_user}",
            "gists_url": "https://api.github.com/users/jroes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jroes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jroes/subscriptions",
            "organizations_url": "https://api.github.com/users/jroes/orgs",
            "repos_url": "https://api.github.com/users/jroes/repos",
            "events_url": "https://api.github.com/users/jroes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jroes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yeah, I hate the duplication too. I'm not sure if I can do that though. If by regular vim-mode you mean command-mode, once I start doing that things disappear from command-mode, because they aren't necessarily exclusive. They kind of mean something different in each mode. Maybe I can do two comma-separated selectors though...\n",
        "created_at": "2014-03-14T05:22:33Z",
        "updated_at": "2014-03-14T05:22:33Z",
        "html_url": "https://github.com/atom/vim-mode/pull/152#discussion_r10596791",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/152",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10596791"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/152#discussion_r10596791"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/152"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10596810",
        "pull_request_review_id": null,
        "id": 10596810,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNTk2ODEw",
        "diff_hunk": "@@ -120,6 +133,11 @@ class Yank extends Operator\n     else\n       @editor.clearSelections()\n \n+    if @motion instanceof textObjects.InnerWord",
        "path": "lib/operators.coffee",
        "position": 36,
        "original_position": 36,
        "commit_id": "634745ab0817ee0ddec4078fbfcb785662ccdb1b",
        "original_commit_id": "634745ab0817ee0ddec4078fbfcb785662ccdb1b",
        "user": {
            "login": "jroes",
            "id": 27847,
            "node_id": "MDQ6VXNlcjI3ODQ3",
            "avatar_url": "https://avatars0.githubusercontent.com/u/27847?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jroes",
            "html_url": "https://github.com/jroes",
            "followers_url": "https://api.github.com/users/jroes/followers",
            "following_url": "https://api.github.com/users/jroes/following{/other_user}",
            "gists_url": "https://api.github.com/users/jroes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jroes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jroes/subscriptions",
            "organizations_url": "https://api.github.com/users/jroes/orgs",
            "repos_url": "https://api.github.com/users/jroes/repos",
            "events_url": "https://api.github.com/users/jroes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jroes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Agreed. Total hack here. I think we have to change the interface a bit to support an `after` callback.\n",
        "created_at": "2014-03-14T05:24:02Z",
        "updated_at": "2014-03-14T05:24:02Z",
        "html_url": "https://github.com/atom/vim-mode/pull/152#discussion_r10596810",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/152",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10596810"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/152#discussion_r10596810"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/152"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10597017",
        "pull_request_review_id": null,
        "id": 10597017,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNTk3MDE3",
        "diff_hunk": "@@ -119,3 +119,47 @@\n   'ctrl-w v': 'pane:split-right'\n   'ctrl-w ctrl-s': 'pane:split-down'\n   'ctrl-w s': 'pane:split-down'\n+\n+'.vim-mode.operator-pending-mode:not(.mini)':",
        "path": "keymaps/vim-mode.cson",
        "position": 21,
        "original_position": 21,
        "commit_id": "634745ab0817ee0ddec4078fbfcb785662ccdb1b",
        "original_commit_id": "634745ab0817ee0ddec4078fbfcb785662ccdb1b",
        "user": {
            "login": "jroes",
            "id": 27847,
            "node_id": "MDQ6VXNlcjI3ODQ3",
            "avatar_url": "https://avatars0.githubusercontent.com/u/27847?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jroes",
            "html_url": "https://github.com/jroes",
            "followers_url": "https://api.github.com/users/jroes/followers",
            "following_url": "https://api.github.com/users/jroes/following{/other_user}",
            "gists_url": "https://api.github.com/users/jroes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jroes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jroes/subscriptions",
            "organizations_url": "https://api.github.com/users/jroes/orgs",
            "repos_url": "https://api.github.com/users/jroes/repos",
            "events_url": "https://api.github.com/users/jroes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jroes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Tried doing something like this:\n\n```\n'.vim-mode.command-mode:not(.mini), .vim-mode.operator-pending-mode:not(.mini)':\n     'w': 'vim-mode:move-to-next-word'\n    'e': 'vim-mode:move-to-end-of-word'\n    'b': 'vim-mode:move-to-previous-word'\n    'x': 'vim-mode:delete'\n    'd': 'vim-mode:delete'\n    'c': 'vim-mode:change'\n...\n```\n\nBut I don't think it's working. Is it possible this multiple selector format isn't supported by atom core?\n",
        "created_at": "2014-03-14T05:44:24Z",
        "updated_at": "2014-03-14T05:44:24Z",
        "html_url": "https://github.com/atom/vim-mode/pull/152#discussion_r10597017",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/152",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10597017"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/152#discussion_r10597017"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/152"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10576288",
        "pull_request_review_id": null,
        "id": 10576288,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNTc2Mjg4",
        "diff_hunk": "@@ -10,5 +10,6 @@\n * [Substitute](http://vimhelp.appspot.com/change.txt.html#s)\n   * `s` - delete character and switch to insert mode\n   * `S` - delete entire line and switch to insert mode\n+  * `v_s` - deletes the highlighted text and start insert",
        "path": "docs/commands.md",
        "position": null,
        "original_position": 4,
        "commit_id": "b0bedd82ce67769a2535534c14ccfdfce27d4d05",
        "original_commit_id": "7dc6697b6d8ad70b02117f94d705a2cd9a719d23",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "This is just `s` in visual mode, correct? In which case I don't think we need this.\n",
        "created_at": "2014-03-13T17:42:54Z",
        "updated_at": "2014-03-14T16:10:12Z",
        "html_url": "https://github.com/atom/vim-mode/pull/166#discussion_r10576288",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/166",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10576288"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/166#discussion_r10576288"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/166"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10576377",
        "pull_request_review_id": null,
        "id": 10576377,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNTc2Mzc3",
        "diff_hunk": "@@ -10,5 +10,6 @@\n * [Substitute](http://vimhelp.appspot.com/change.txt.html#s)\n   * `s` - delete character and switch to insert mode\n   * `S` - delete entire line and switch to insert mode\n+  * `v_s` - deletes the highlighted text and start insert",
        "path": "docs/commands.md",
        "position": null,
        "original_position": 4,
        "commit_id": "b0bedd82ce67769a2535534c14ccfdfce27d4d05",
        "original_commit_id": "7dc6697b6d8ad70b02117f94d705a2cd9a719d23",
        "user": {
            "login": "tony612",
            "id": 1253659,
            "node_id": "MDQ6VXNlcjEyNTM2NTk=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1253659?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tony612",
            "html_url": "https://github.com/tony612",
            "followers_url": "https://api.github.com/users/tony612/followers",
            "following_url": "https://api.github.com/users/tony612/following{/other_user}",
            "gists_url": "https://api.github.com/users/tony612/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tony612/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tony612/subscriptions",
            "organizations_url": "https://api.github.com/users/tony612/orgs",
            "repos_url": "https://api.github.com/users/tony612/repos",
            "events_url": "https://api.github.com/users/tony612/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tony612/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "yeah\uff0c do you mean this line for doc?\n",
        "created_at": "2014-03-13T17:44:46Z",
        "updated_at": "2014-03-14T16:10:12Z",
        "html_url": "https://github.com/atom/vim-mode/pull/166#discussion_r10576377",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/166",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10576377"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/166#discussion_r10576377"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/166"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10576395",
        "pull_request_review_id": null,
        "id": 10576395,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNTc2Mzk1",
        "diff_hunk": "@@ -97,6 +97,21 @@ describe \"Operators\", ->\n       expect(editor.getCursorScreenPosition()).toEqual [0, 1]\n       expect(vimState.getRegister('\"').text).toBe '1'\n \n+  describe \"the v_s keybinding\", ->\n+    beforeEach ->\n+      editor.setText('012345')\n+      editor.setCursorScreenPosition([0, 1])\n+      keydown('v')\n+      editor.selectRight()\n+      editor.selectRight()\n+      keydown('s')\n+\n+    it \"deletes the selected characters and enters insert mode\", ->",
        "path": "spec/operators-spec.coffee",
        "position": null,
        "original_position": 13,
        "commit_id": "b0bedd82ce67769a2535534c14ccfdfce27d4d05",
        "original_commit_id": "7dc6697b6d8ad70b02117f94d705a2cd9a719d23",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "I think this should be moved under 'the s keybinding' and having a new describe for 'in visual mode' like on https://github.com/tony612/vim-mode/blob/add-v-s-command/spec/operators-spec.coffee#L249\n",
        "created_at": "2014-03-13T17:45:02Z",
        "updated_at": "2014-03-14T16:10:12Z",
        "html_url": "https://github.com/atom/vim-mode/pull/166#discussion_r10576395",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/166",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10576395"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/166#discussion_r10576395"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/166"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10576475",
        "pull_request_review_id": null,
        "id": 10576475,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNTc2NDc1",
        "diff_hunk": "@@ -10,5 +10,6 @@\n * [Substitute](http://vimhelp.appspot.com/change.txt.html#s)\n   * `s` - delete character and switch to insert mode\n   * `S` - delete entire line and switch to insert mode\n+  * `v_s` - deletes the highlighted text and start insert",
        "path": "docs/commands.md",
        "position": null,
        "original_position": 4,
        "commit_id": "b0bedd82ce67769a2535534c14ccfdfce27d4d05",
        "original_commit_id": "7dc6697b6d8ad70b02117f94d705a2cd9a719d23",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Yes, we don't want to list out every possible combination in the docs.\n",
        "created_at": "2014-03-13T17:46:29Z",
        "updated_at": "2014-03-14T16:10:12Z",
        "html_url": "https://github.com/atom/vim-mode/pull/166#discussion_r10576475",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/166",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10576475"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/166#discussion_r10576475"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/166"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10576504",
        "pull_request_review_id": null,
        "id": 10576504,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNTc2NTA0",
        "diff_hunk": "@@ -10,5 +10,6 @@\n * [Substitute](http://vimhelp.appspot.com/change.txt.html#s)\n   * `s` - delete character and switch to insert mode\n   * `S` - delete entire line and switch to insert mode\n+  * `v_s` - deletes the highlighted text and start insert",
        "path": "docs/commands.md",
        "position": null,
        "original_position": 4,
        "commit_id": "b0bedd82ce67769a2535534c14ccfdfce27d4d05",
        "original_commit_id": "7dc6697b6d8ad70b02117f94d705a2cd9a719d23",
        "user": {
            "login": "tony612",
            "id": 1253659,
            "node_id": "MDQ6VXNlcjEyNTM2NTk=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1253659?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tony612",
            "html_url": "https://github.com/tony612",
            "followers_url": "https://api.github.com/users/tony612/followers",
            "following_url": "https://api.github.com/users/tony612/following{/other_user}",
            "gists_url": "https://api.github.com/users/tony612/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tony612/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tony612/subscriptions",
            "organizations_url": "https://api.github.com/users/tony612/orgs",
            "repos_url": "https://api.github.com/users/tony612/repos",
            "events_url": "https://api.github.com/users/tony612/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tony612/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "got it :)\n",
        "created_at": "2014-03-13T17:47:02Z",
        "updated_at": "2014-03-14T16:10:12Z",
        "html_url": "https://github.com/atom/vim-mode/pull/166#discussion_r10576504",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/166",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10576504"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/166#discussion_r10576504"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/166"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10613111",
        "pull_request_review_id": null,
        "id": 10613111,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjEzMTEx",
        "diff_hunk": "@@ -89,14 +89,27 @@ describe \"Operators\", ->\n     beforeEach ->\n       editor.setText('012345')\n       editor.setCursorScreenPosition([0, 1])\n-      keydown('s')\n \n     it \"deletes the character to the right and enters insert mode\", ->\n+      keydown('s')\n       expect(editorView).toHaveClass 'insert-mode'\n       expect(editor.getText()).toBe '02345'\n       expect(editor.getCursorScreenPosition()).toEqual [0, 1]\n       expect(vimState.getRegister('\"').text).toBe '1'\n \n+    describe \"in visual mode\", ->\n+      beforeEach ->\n+        keydown('v')\n+        editor.selectRight()\n+        editor.selectRight()\n+        keydown('s')\n+\n+      it \"deletes the selected characters and enters insert mode\", ->\n+        expect(editorView).toHaveClass 'insert-mode'\n+        expect(editor.getText()).toBe '0345'\n+        expect(editor.getCursorScreenPosition()).toEqual [0, 1]\n+        expect(vimState.getRegister('\"').text).toBe '12'\n+",
        "path": "spec/operators-spec.coffee",
        "position": 25,
        "original_position": 25,
        "commit_id": "b0bedd82ce67769a2535534c14ccfdfce27d4d05",
        "original_commit_id": "81964cc705c19e2571f4b060411610a4bf9b9276",
        "user": {
            "login": "tony612",
            "id": 1253659,
            "node_id": "MDQ6VXNlcjEyNTM2NTk=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1253659?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tony612",
            "html_url": "https://github.com/tony612",
            "followers_url": "https://api.github.com/users/tony612/followers",
            "following_url": "https://api.github.com/users/tony612/following{/other_user}",
            "gists_url": "https://api.github.com/users/tony612/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tony612/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tony612/subscriptions",
            "organizations_url": "https://api.github.com/users/tony612/orgs",
            "repos_url": "https://api.github.com/users/tony612/repos",
            "events_url": "https://api.github.com/users/tony612/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tony612/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@mcolyer Please review this :)\n",
        "created_at": "2014-03-14T15:46:54Z",
        "updated_at": "2014-03-14T16:10:12Z",
        "html_url": "https://github.com/atom/vim-mode/pull/166#discussion_r10613111",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/166",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10613111"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/166#discussion_r10613111"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/166"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10613285",
        "pull_request_review_id": null,
        "id": 10613285,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjEzMjg1",
        "diff_hunk": "@@ -89,14 +89,27 @@ describe \"Operators\", ->\n     beforeEach ->\n       editor.setText('012345')\n       editor.setCursorScreenPosition([0, 1])\n-      keydown('s')\n \n     it \"deletes the character to the right and enters insert mode\", ->\n+      keydown('s')\n       expect(editorView).toHaveClass 'insert-mode'\n       expect(editor.getText()).toBe '02345'\n       expect(editor.getCursorScreenPosition()).toEqual [0, 1]\n       expect(vimState.getRegister('\"').text).toBe '1'\n \n+    describe \"in visual mode\", ->\n+      beforeEach ->\n+        keydown('v')\n+        editor.selectRight()\n+        editor.selectRight()\n+        keydown('s')\n+\n+      it \"deletes the selected characters and enters insert mode\", ->\n+        expect(editorView).toHaveClass 'insert-mode'\n+        expect(editor.getText()).toBe '0345'\n+        expect(editor.getCursorScreenPosition()).toEqual [0, 1]\n+        expect(vimState.getRegister('\"').text).toBe '12'\n+",
        "path": "spec/operators-spec.coffee",
        "position": 25,
        "original_position": 25,
        "commit_id": "b0bedd82ce67769a2535534c14ccfdfce27d4d05",
        "original_commit_id": "81964cc705c19e2571f4b060411610a4bf9b9276",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@tony612 this is a good test; is it passing?\n",
        "created_at": "2014-03-14T15:49:58Z",
        "updated_at": "2014-03-14T16:10:12Z",
        "html_url": "https://github.com/atom/vim-mode/pull/166#discussion_r10613285",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/166",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10613285"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/166#discussion_r10613285"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/166"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10613404",
        "pull_request_review_id": null,
        "id": 10613404,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjEzNDA0",
        "diff_hunk": "@@ -89,14 +89,27 @@ describe \"Operators\", ->\n     beforeEach ->\n       editor.setText('012345')\n       editor.setCursorScreenPosition([0, 1])\n-      keydown('s')\n \n     it \"deletes the character to the right and enters insert mode\", ->\n+      keydown('s')\n       expect(editorView).toHaveClass 'insert-mode'\n       expect(editor.getText()).toBe '02345'\n       expect(editor.getCursorScreenPosition()).toEqual [0, 1]\n       expect(vimState.getRegister('\"').text).toBe '1'\n \n+    describe \"in visual mode\", ->\n+      beforeEach ->\n+        keydown('v')\n+        editor.selectRight()\n+        editor.selectRight()\n+        keydown('s')\n+\n+      it \"deletes the selected characters and enters insert mode\", ->\n+        expect(editorView).toHaveClass 'insert-mode'\n+        expect(editor.getText()).toBe '0345'\n+        expect(editor.getCursorScreenPosition()).toEqual [0, 1]\n+        expect(vimState.getRegister('\"').text).toBe '12'\n+",
        "path": "spec/operators-spec.coffee",
        "position": 25,
        "original_position": 25,
        "commit_id": "b0bedd82ce67769a2535534c14ccfdfce27d4d05",
        "original_commit_id": "81964cc705c19e2571f4b060411610a4bf9b9276",
        "user": {
            "login": "tony612",
            "id": 1253659,
            "node_id": "MDQ6VXNlcjEyNTM2NTk=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1253659?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tony612",
            "html_url": "https://github.com/tony612",
            "followers_url": "https://api.github.com/users/tony612/followers",
            "following_url": "https://api.github.com/users/tony612/following{/other_user}",
            "gists_url": "https://api.github.com/users/tony612/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tony612/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tony612/subscriptions",
            "organizations_url": "https://api.github.com/users/tony612/orgs",
            "repos_url": "https://api.github.com/users/tony612/repos",
            "events_url": "https://api.github.com/users/tony612/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tony612/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@bhuga Yeah :yellow_heart: \n",
        "created_at": "2014-03-14T15:52:09Z",
        "updated_at": "2014-03-14T16:10:12Z",
        "html_url": "https://github.com/atom/vim-mode/pull/166#discussion_r10613404",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/166",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10613404"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/166#discussion_r10613404"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/166"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10615449",
        "pull_request_review_id": null,
        "id": 10615449,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjE1NDQ5",
        "diff_hunk": "@@ -89,14 +89,27 @@ describe \"Operators\", ->\n     beforeEach ->\n       editor.setText('012345')\n       editor.setCursorScreenPosition([0, 1])\n-      keydown('s')\n \n     it \"deletes the character to the right and enters insert mode\", ->\n+      keydown('s')\n       expect(editorView).toHaveClass 'insert-mode'\n       expect(editor.getText()).toBe '02345'\n       expect(editor.getCursorScreenPosition()).toEqual [0, 1]\n       expect(vimState.getRegister('\"').text).toBe '1'\n \n+    describe \"in visual mode\", ->\n+      beforeEach ->\n+        keydown('v')\n+        editor.selectRight()\n+        editor.selectRight()\n+        keydown('s')\n+\n+      it \"deletes the selected characters and enters insert mode\", ->\n+        expect(editorView).toHaveClass 'insert-mode'\n+        expect(editor.getText()).toBe '0345'\n+        expect(editor.getCursorScreenPosition()).toEqual [0, 1]\n+        expect(vimState.getRegister('\"').text).toBe '12'\n+",
        "path": "spec/operators-spec.coffee",
        "position": 25,
        "original_position": 25,
        "commit_id": "b0bedd82ce67769a2535534c14ccfdfce27d4d05",
        "original_commit_id": "81964cc705c19e2571f4b060411610a4bf9b9276",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Looks like I'm late to the party but exactly what I was thinking, thanks for adjusting @tony612 \n",
        "created_at": "2014-03-14T16:37:02Z",
        "updated_at": "2014-03-14T16:37:02Z",
        "html_url": "https://github.com/atom/vim-mode/pull/166#discussion_r10615449",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/166",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10615449"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/166#discussion_r10615449"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/166"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644469",
        "pull_request_review_id": null,
        "id": 10644469,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjQ0NDY5",
        "diff_hunk": "@@ -21,11 +21,11 @@ class VimState\n     @opStack = []\n     @history = []\n     @mode = 'command'\n-\n     @setupCommandMode()\n     @registerInsertIntercept()\n     @activateCommandMode()\n \n+",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 9,
        "commit_id": "afc5405bf7adf0c96d2b5d9e262d692351379b2f",
        "original_commit_id": "c5f5f6a628ef3f6bd0f0aeb125340cbe413938f9",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Why the newline changes? We like to avoid extra added/removed lines like this unless they're near the code being worked on.\n",
        "created_at": "2014-03-17T03:02:13Z",
        "updated_at": "2014-03-17T12:31:46Z",
        "html_url": "https://github.com/atom/vim-mode/pull/179#discussion_r10644469",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/179",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644469"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/179#discussion_r10644469"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/179"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644477",
        "pull_request_review_id": null,
        "id": 10644477,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjQ0NDc3",
        "diff_hunk": "@@ -377,3 +383,15 @@ class VimState\n     for op in @opStack\n       return op if op instanceof constructor\n     false\n+\n+  updateStatusBar: ->\n+    if !$('#status-bar-vim-mode').length\n+      atom.packages.once 'activated', ->\n+        atom.workspaceView.statusBar?.prependRight(\"<div id='status-bar-vim-mode' class='inline-block'>Command</div>\")",
        "path": "lib/vim-state.coffee",
        "position": 43,
        "original_position": 48,
        "commit_id": "afc5405bf7adf0c96d2b5d9e262d692351379b2f",
        "original_commit_id": "c5f5f6a628ef3f6bd0f0aeb125340cbe413938f9",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@nathansobo is there an API for this we're missing? If not this is :+1: for now.\n",
        "created_at": "2014-03-17T03:03:06Z",
        "updated_at": "2014-03-17T12:31:46Z",
        "html_url": "https://github.com/atom/vim-mode/pull/179#discussion_r10644477",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/179",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644477"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/179#discussion_r10644477"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/179"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10670166",
        "pull_request_review_id": null,
        "id": 10670166,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjcwMTY2",
        "diff_hunk": "@@ -377,3 +383,15 @@ class VimState\n     for op in @opStack\n       return op if op instanceof constructor\n     false\n+\n+  updateStatusBar: ->\n+    if !$('#status-bar-vim-mode').length\n+      atom.packages.once 'activated', ->\n+        atom.workspaceView.statusBar?.prependRight(\"<div id='status-bar-vim-mode' class='inline-block'>Command</div>\")",
        "path": "lib/vim-state.coffee",
        "position": 43,
        "original_position": 48,
        "commit_id": "afc5405bf7adf0c96d2b5d9e262d692351379b2f",
        "original_commit_id": "c5f5f6a628ef3f6bd0f0aeb125340cbe413938f9",
        "user": {
            "login": "mcolyer",
            "id": 1424,
            "node_id": "MDQ6VXNlcjE0MjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcolyer",
            "html_url": "https://github.com/mcolyer",
            "followers_url": "https://api.github.com/users/mcolyer/followers",
            "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
            "organizations_url": "https://api.github.com/users/mcolyer/orgs",
            "repos_url": "https://api.github.com/users/mcolyer/repos",
            "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcolyer/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "@bhuga yep, this is considered correct. There are a few notes about it at the bottom of https://github.com/atom/status-bar \n",
        "created_at": "2014-03-17T18:13:01Z",
        "updated_at": "2014-03-17T18:13:01Z",
        "html_url": "https://github.com/atom/vim-mode/pull/179#discussion_r10670166",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/179",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10670166"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/179#discussion_r10670166"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/179"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10687002",
        "pull_request_review_id": null,
        "id": 10687002,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjg3MDAy",
        "diff_hunk": "@@ -346,7 +344,10 @@ class VimState\n     if @topOperator() instanceof prefixes.Repeat\n       @topOperator().addDigit(num)\n     else\n-      @pushOperator(new prefixes.Repeat(num))\n+      if num is 0",
        "path": "lib/vim-state.coffee",
        "position": 25,
        "original_position": 25,
        "commit_id": "9bcbcdd1d226cb1f93383f73fc27934501739b24",
        "original_commit_id": "c2e949e3102cf013594e8933608fff08ed131f81",
        "user": {
            "login": "jroes",
            "id": 27847,
            "node_id": "MDQ6VXNlcjI3ODQ3",
            "avatar_url": "https://avatars0.githubusercontent.com/u/27847?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jroes",
            "html_url": "https://github.com/jroes",
            "followers_url": "https://api.github.com/users/jroes/followers",
            "following_url": "https://api.github.com/users/jroes/following{/other_user}",
            "gists_url": "https://api.github.com/users/jroes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jroes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jroes/subscriptions",
            "organizations_url": "https://api.github.com/users/jroes/orgs",
            "repos_url": "https://api.github.com/users/jroes/repos",
            "events_url": "https://api.github.com/users/jroes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jroes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This is totally how I'd originally tried to implement `0` as move-to-beginning-of-line, but the event wasn't getting passed along to the next handler. Glad you were able to figure that out.\n",
        "created_at": "2014-03-18T01:19:58Z",
        "updated_at": "2014-03-18T04:07:55Z",
        "html_url": "https://github.com/atom/vim-mode/pull/182#discussion_r10687002",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/182",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10687002"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/182#discussion_r10687002"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/182"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10689197",
        "pull_request_review_id": null,
        "id": 10689197,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjg5MTk3",
        "diff_hunk": "@@ -1,46 +1,124 @@\n-'.vim-mode.insert-mode:not(.mini)':\n+'.vim-mode:not(.command-mode)':\n   'escape': 'vim-mode:activate-command-mode'\n   'ctrl-c': 'vim-mode:activate-command-mode'\n   'ctrl-[': 'vim-mode:activate-command-mode'\n \n-'.vim-mode.visual-mode:not(.mini)':\n-  'escape': 'vim-mode:activate-command-mode'\n-  'ctrl-c': 'vim-mode:activate-command-mode'\n-  'ctrl-[': 'vim-mode:activate-command-mode'\n-  'h': 'vim-mode:select-left'\n-  'l': 'vim-mode:select-right'\n-  'j': 'vim-mode:move-down'\n+'.vim-mode:not(.insert-mode)':",
        "path": "keymaps/vim-mode.cson",
        "position": 14,
        "original_position": 14,
        "commit_id": "9bcbcdd1d226cb1f93383f73fc27934501739b24",
        "original_commit_id": "c2e949e3102cf013594e8933608fff08ed131f81",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Does this work with the mini-input associated with `/` and `r`?\n",
        "created_at": "2014-03-18T03:27:29Z",
        "updated_at": "2014-03-18T04:07:55Z",
        "html_url": "https://github.com/atom/vim-mode/pull/182#discussion_r10689197",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/182",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10689197"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/182#discussion_r10689197"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/182"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10689219",
        "pull_request_review_id": null,
        "id": 10689219,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjg5MjE5",
        "diff_hunk": "@@ -17,24 +17,6 @@ class CurrentSelection extends Motion\n \n   isLinewise: -> @editor.mode == 'visual' and @editor.submode == 'linewise'\n \n-class SelectLeft extends Motion",
        "path": "lib/motions.coffee",
        "position": 4,
        "original_position": 4,
        "commit_id": "9bcbcdd1d226cb1f93383f73fc27934501739b24",
        "original_commit_id": "c2e949e3102cf013594e8933608fff08ed131f81",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Awesome how these got factored out by making visual mode just move left!\n",
        "created_at": "2014-03-18T03:28:48Z",
        "updated_at": "2014-03-18T04:07:55Z",
        "html_url": "https://github.com/atom/vim-mode/pull/182#discussion_r10689219",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/182",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10689219"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/182#discussion_r10689219"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/182"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10689262",
        "pull_request_review_id": null,
        "id": 10689262,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjg5MjYy",
        "diff_hunk": "@@ -1,46 +1,124 @@\n-'.vim-mode.insert-mode:not(.mini)':\n+'.vim-mode:not(.command-mode)':\n   'escape': 'vim-mode:activate-command-mode'\n   'ctrl-c': 'vim-mode:activate-command-mode'\n   'ctrl-[': 'vim-mode:activate-command-mode'\n \n-'.vim-mode.visual-mode:not(.mini)':\n-  'escape': 'vim-mode:activate-command-mode'\n-  'ctrl-c': 'vim-mode:activate-command-mode'\n-  'ctrl-[': 'vim-mode:activate-command-mode'\n-  'h': 'vim-mode:select-left'\n-  'l': 'vim-mode:select-right'\n-  'j': 'vim-mode:move-down'\n+'.vim-mode:not(.insert-mode)':",
        "path": "keymaps/vim-mode.cson",
        "position": 14,
        "original_position": 14,
        "commit_id": "9bcbcdd1d226cb1f93383f73fc27934501739b24",
        "original_commit_id": "c2e949e3102cf013594e8933608fff08ed131f81",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I verified that this works, but I honestly don't know why. It seems like this would steal an input key from the mini inputs.\n",
        "created_at": "2014-03-18T03:31:01Z",
        "updated_at": "2014-03-18T04:07:55Z",
        "html_url": "https://github.com/atom/vim-mode/pull/182#discussion_r10689262",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/182",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10689262"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/182#discussion_r10689262"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/182"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10689355",
        "pull_request_review_id": null,
        "id": 10689355,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjg5MzU1",
        "diff_hunk": "@@ -1,46 +1,124 @@\n-'.vim-mode.insert-mode:not(.mini)':\n+'.vim-mode:not(.command-mode)':\n   'escape': 'vim-mode:activate-command-mode'\n   'ctrl-c': 'vim-mode:activate-command-mode'\n   'ctrl-[': 'vim-mode:activate-command-mode'\n \n-'.vim-mode.visual-mode:not(.mini)':\n-  'escape': 'vim-mode:activate-command-mode'\n-  'ctrl-c': 'vim-mode:activate-command-mode'\n-  'ctrl-[': 'vim-mode:activate-command-mode'\n-  'h': 'vim-mode:select-left'\n-  'l': 'vim-mode:select-right'\n-  'j': 'vim-mode:move-down'\n+'.vim-mode:not(.insert-mode)':\n+  'h': 'vim-mode:move-left'\n+  'left': 'vim-mode:move-left'\n+  'backspace': 'core:move-left'\n+  'l': 'vim-mode:move-right'\n+  'right': 'vim-mode:move-right'\n   'k': 'vim-mode:move-up'\n-  'left': 'vim-mode:select-left'\n-  'right': 'vim-mode:select-right'\n-  'down': 'vim-mode:move-down'\n   'up': 'vim-mode:move-up'\n+  'j': 'vim-mode:move-down'\n+  'down': 'vim-mode:move-down'\n+  'enter': 'vim-mode:move-down'\n+\n   'w': 'vim-mode:move-to-next-word'\n   'W': 'vim-mode:move-to-next-whole-word'\n   'e': 'vim-mode:move-to-end-of-word'\n   'E': 'vim-mode:move-to-end-of-whole-word'\n   'b': 'vim-mode:move-to-previous-word'\n   'B': 'vim-mode:move-to-previous-whole-word'\n-  'x': 'vim-mode:delete'\n   '}': 'vim-mode:move-to-next-paragraph'\n   '{': 'vim-mode:move-to-previous-paragraph'\n+  '0': 'vim-mode:move-to-beginning-of-line'\n+  '^': 'vim-mode:move-to-first-character-of-line'\n+  '$': 'vim-mode:move-to-last-character-of-line'\n+  'g g': 'vim-mode:move-to-start-of-file'\n+  'ctrl-u': 'core:page-up'\n+  'ctrl-b': 'core:page-up'\n+  'ctrl-d': 'core:page-down'\n+  'ctrl-f': 'core:page-down'\n+  'ctrl-e': 'vim-mode:scroll-down'\n+  'ctrl-y': 'vim-mode:scroll-up'\n+  'G': 'vim-mode:move-to-line'\n+  'H': 'vim-mode:move-to-top-of-screen'\n+  'L': 'vim-mode:move-to-bottom-of-screen'\n+  'M': 'vim-mode:move-to-middle-of-screen'\n+\n   'd': 'vim-mode:delete'\n+  'D': 'vim-mode:delete-to-last-character-of-line'\n   'c': 'vim-mode:change'\n+  'C': 'vim-mode:change-to-last-character-of-line'\n   's': 'vim-mode:change'",
        "path": "keymaps/vim-mode.cson",
        "position": null,
        "original_position": 57,
        "commit_id": "9bcbcdd1d226cb1f93383f73fc27934501739b24",
        "original_commit_id": "c2e949e3102cf013594e8933608fff08ed131f81",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "If I'm reading this right, this `s` binding is overwritten by a later one, right? (this is on master, nothing you've done here)\n",
        "created_at": "2014-03-18T03:36:33Z",
        "updated_at": "2014-03-18T04:07:55Z",
        "html_url": "https://github.com/atom/vim-mode/pull/182#discussion_r10689355",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/182",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10689355"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/182#discussion_r10689355"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/182"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10689815",
        "pull_request_review_id": null,
        "id": 10689815,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjg5ODE1",
        "diff_hunk": "@@ -1,46 +1,124 @@\n-'.vim-mode.insert-mode:not(.mini)':\n+'.vim-mode:not(.command-mode)':\n   'escape': 'vim-mode:activate-command-mode'\n   'ctrl-c': 'vim-mode:activate-command-mode'\n   'ctrl-[': 'vim-mode:activate-command-mode'\n \n-'.vim-mode.visual-mode:not(.mini)':\n-  'escape': 'vim-mode:activate-command-mode'\n-  'ctrl-c': 'vim-mode:activate-command-mode'\n-  'ctrl-[': 'vim-mode:activate-command-mode'\n-  'h': 'vim-mode:select-left'\n-  'l': 'vim-mode:select-right'\n-  'j': 'vim-mode:move-down'\n+'.vim-mode:not(.insert-mode)':\n+  'h': 'vim-mode:move-left'\n+  'left': 'vim-mode:move-left'\n+  'backspace': 'core:move-left'\n+  'l': 'vim-mode:move-right'\n+  'right': 'vim-mode:move-right'\n   'k': 'vim-mode:move-up'\n-  'left': 'vim-mode:select-left'\n-  'right': 'vim-mode:select-right'\n-  'down': 'vim-mode:move-down'\n   'up': 'vim-mode:move-up'\n+  'j': 'vim-mode:move-down'\n+  'down': 'vim-mode:move-down'\n+  'enter': 'vim-mode:move-down'\n+\n   'w': 'vim-mode:move-to-next-word'\n   'W': 'vim-mode:move-to-next-whole-word'\n   'e': 'vim-mode:move-to-end-of-word'\n   'E': 'vim-mode:move-to-end-of-whole-word'\n   'b': 'vim-mode:move-to-previous-word'\n   'B': 'vim-mode:move-to-previous-whole-word'\n-  'x': 'vim-mode:delete'\n   '}': 'vim-mode:move-to-next-paragraph'\n   '{': 'vim-mode:move-to-previous-paragraph'\n+  '0': 'vim-mode:move-to-beginning-of-line'\n+  '^': 'vim-mode:move-to-first-character-of-line'\n+  '$': 'vim-mode:move-to-last-character-of-line'\n+  'g g': 'vim-mode:move-to-start-of-file'\n+  'ctrl-u': 'core:page-up'\n+  'ctrl-b': 'core:page-up'\n+  'ctrl-d': 'core:page-down'\n+  'ctrl-f': 'core:page-down'\n+  'ctrl-e': 'vim-mode:scroll-down'\n+  'ctrl-y': 'vim-mode:scroll-up'\n+  'G': 'vim-mode:move-to-line'\n+  'H': 'vim-mode:move-to-top-of-screen'\n+  'L': 'vim-mode:move-to-bottom-of-screen'\n+  'M': 'vim-mode:move-to-middle-of-screen'\n+\n   'd': 'vim-mode:delete'\n+  'D': 'vim-mode:delete-to-last-character-of-line'\n   'c': 'vim-mode:change'\n+  'C': 'vim-mode:change-to-last-character-of-line'\n   's': 'vim-mode:change'",
        "path": "keymaps/vim-mode.cson",
        "position": null,
        "original_position": 57,
        "commit_id": "9bcbcdd1d226cb1f93383f73fc27934501739b24",
        "original_commit_id": "c2e949e3102cf013594e8933608fff08ed131f81",
        "user": {
            "login": "nathansobo",
            "id": 1789,
            "node_id": "MDQ6VXNlcjE3ODk=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1789?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nathansobo",
            "html_url": "https://github.com/nathansobo",
            "followers_url": "https://api.github.com/users/nathansobo/followers",
            "following_url": "https://api.github.com/users/nathansobo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nathansobo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nathansobo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nathansobo/subscriptions",
            "organizations_url": "https://api.github.com/users/nathansobo/orgs",
            "repos_url": "https://api.github.com/users/nathansobo/repos",
            "events_url": "https://api.github.com/users/nathansobo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nathansobo/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Good catch. It's defined in both visual mode and command mode so no need for it here.\n",
        "created_at": "2014-03-18T04:07:10Z",
        "updated_at": "2014-03-18T04:07:55Z",
        "html_url": "https://github.com/atom/vim-mode/pull/182#discussion_r10689815",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/182",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10689815"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/182#discussion_r10689815"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/182"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10689922",
        "pull_request_review_id": null,
        "id": 10689922,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjg5OTIy",
        "diff_hunk": "@@ -1,46 +1,124 @@\n-'.vim-mode.insert-mode:not(.mini)':\n+'.vim-mode:not(.command-mode)':\n   'escape': 'vim-mode:activate-command-mode'\n   'ctrl-c': 'vim-mode:activate-command-mode'\n   'ctrl-[': 'vim-mode:activate-command-mode'\n \n-'.vim-mode.visual-mode:not(.mini)':\n-  'escape': 'vim-mode:activate-command-mode'\n-  'ctrl-c': 'vim-mode:activate-command-mode'\n-  'ctrl-[': 'vim-mode:activate-command-mode'\n-  'h': 'vim-mode:select-left'\n-  'l': 'vim-mode:select-right'\n-  'j': 'vim-mode:move-down'\n+'.vim-mode:not(.insert-mode)':",
        "path": "keymaps/vim-mode.cson",
        "position": 14,
        "original_position": 14,
        "commit_id": "9bcbcdd1d226cb1f93383f73fc27934501739b24",
        "original_commit_id": "c2e949e3102cf013594e8933608fff08ed131f81",
        "user": {
            "login": "nathansobo",
            "id": 1789,
            "node_id": "MDQ6VXNlcjE3ODk=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1789?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nathansobo",
            "html_url": "https://github.com/nathansobo",
            "followers_url": "https://api.github.com/users/nathansobo/followers",
            "following_url": "https://api.github.com/users/nathansobo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nathansobo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nathansobo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nathansobo/subscriptions",
            "organizations_url": "https://api.github.com/users/nathansobo/orgs",
            "repos_url": "https://api.github.com/users/nathansobo/repos",
            "events_url": "https://api.github.com/users/nathansobo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nathansobo/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "I'm only attaching vim-mode to editors that aren't mini. The find/replace editor is getting attached to the editor's pane, so it doesn't have anything matching `.vim-mode` as an ancestor, so there's no match. Perhaps this has changed recently?\n",
        "created_at": "2014-03-18T04:13:59Z",
        "updated_at": "2014-03-18T04:13:59Z",
        "html_url": "https://github.com/atom/vim-mode/pull/182#discussion_r10689922",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/182",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10689922"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/182#discussion_r10689922"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/182"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10690636",
        "pull_request_review_id": null,
        "id": 10690636,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjkwNjM2",
        "diff_hunk": "@@ -1,46 +1,124 @@\n-'.vim-mode.insert-mode:not(.mini)':\n+'.vim-mode:not(.command-mode)':\n   'escape': 'vim-mode:activate-command-mode'\n   'ctrl-c': 'vim-mode:activate-command-mode'\n   'ctrl-[': 'vim-mode:activate-command-mode'\n \n-'.vim-mode.visual-mode:not(.mini)':\n-  'escape': 'vim-mode:activate-command-mode'\n-  'ctrl-c': 'vim-mode:activate-command-mode'\n-  'ctrl-[': 'vim-mode:activate-command-mode'\n-  'h': 'vim-mode:select-left'\n-  'l': 'vim-mode:select-right'\n-  'j': 'vim-mode:move-down'\n+'.vim-mode:not(.insert-mode)':",
        "path": "keymaps/vim-mode.cson",
        "position": 14,
        "original_position": 14,
        "commit_id": "9bcbcdd1d226cb1f93383f73fc27934501739b24",
        "original_commit_id": "c2e949e3102cf013594e8933608fff08ed131f81",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ahh, okay. Makes sense. Thanks!\n",
        "created_at": "2014-03-18T04:57:46Z",
        "updated_at": "2014-03-18T04:57:46Z",
        "html_url": "https://github.com/atom/vim-mode/pull/182#discussion_r10690636",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/182",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10690636"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/182#discussion_r10690636"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/182"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10641793",
        "pull_request_review_id": null,
        "id": 10641793,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjQxNzkz",
        "diff_hunk": "@@ -154,7 +162,7 @@ class VimState\n       eventName = \"vim-mode:#{commandName}\"\n       @editorView.command eventName, (e) =>\n         possibleOperators = fn(e)\n-        possibleOperators = if _.isArray(possibleOperators) then possibleOperators else [possibleOperators]\n+        possibleOperators = if possibleOperators? then (if _.isArray(possibleOperators) then possibleOperators else [possibleOperators]) else []",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 27,
        "commit_id": "43dca6a84551cf88bebe7da7f5dd855f63b5c4d8",
        "original_commit_id": "7b42d2aada59e08966878b4a7fa2b62430311afa",
        "user": {
            "login": "danzimm",
            "id": 166757,
            "node_id": "MDQ6VXNlcjE2Njc1Nw==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/166757?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/danzimm",
            "html_url": "https://github.com/danzimm",
            "followers_url": "https://api.github.com/users/danzimm/followers",
            "following_url": "https://api.github.com/users/danzimm/following{/other_user}",
            "gists_url": "https://api.github.com/users/danzimm/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/danzimm/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/danzimm/subscriptions",
            "organizations_url": "https://api.github.com/users/danzimm/orgs",
            "repos_url": "https://api.github.com/users/danzimm/repos",
            "events_url": "https://api.github.com/users/danzimm/events{/privacy}",
            "received_events_url": "https://api.github.com/users/danzimm/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Hrm not sure if this is necessary but I put it in there because I felt safer with it\n",
        "created_at": "2014-03-16T21:28:32Z",
        "updated_at": "2014-03-19T03:00:46Z",
        "html_url": "https://github.com/atom/vim-mode/pull/180#discussion_r10641793",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/180",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10641793"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/180#discussion_r10641793"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/180"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644046",
        "pull_request_review_id": null,
        "id": 10644046,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjQ0MDQ2",
        "diff_hunk": "@@ -0,0 +1,18 @@\n+VimCommandModeInputView = require './vim-command-mode-input-view'\n+\n+module.exports =\n+\n+# This is the view model for a Replace operator. It is an implementation\n+# detail of the same, and is tested via the use of the `r` keybinding\n+# in operators-spec.coffee.",
        "path": "lib/mark-view-model.coffee",
        "position": null,
        "original_position": 7,
        "commit_id": "43dca6a84551cf88bebe7da7f5dd855f63b5c4d8",
        "original_commit_id": "45edf36ede1863e8b5014ce9338a9210683bb8cf",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Looks like these comments got copied wholesale.\n",
        "created_at": "2014-03-17T02:24:08Z",
        "updated_at": "2014-03-19T03:00:46Z",
        "html_url": "https://github.com/atom/vim-mode/pull/180#discussion_r10644046",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/180",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644046"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/180#discussion_r10644046"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/180"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644069",
        "pull_request_review_id": null,
        "id": 10644069,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjQ0MDY5",
        "diff_hunk": "@@ -437,10 +438,55 @@ class Search extends Motion\n   select: (count=1) ->\n     @viewModel.select(count)\n \n+class MoveToMark extends Motion\n+\n+  isLinewise: -> @linewise",
        "path": "lib/motions.coffee",
        "position": null,
        "original_position": 14,
        "commit_id": "43dca6a84551cf88bebe7da7f5dd855f63b5c4d8",
        "original_commit_id": "45edf36ede1863e8b5014ce9338a9210683bb8cf",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Sylistically, we've not been placing any functions in a class before the constructor.\n",
        "created_at": "2014-03-17T02:26:12Z",
        "updated_at": "2014-03-19T03:00:46Z",
        "html_url": "https://github.com/atom/vim-mode/pull/180#discussion_r10644069",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/180",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644069"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/180#discussion_r10644069"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/180"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644073",
        "pull_request_review_id": null,
        "id": 10644073,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjQ0MDcz",
        "diff_hunk": "@@ -437,10 +438,55 @@ class Search extends Motion\n   select: (count=1) ->\n     @viewModel.select(count)\n \n+class MoveToMark extends Motion\n+\n+  isLinewise: -> @linewise\n+\n+  constructor: (@editorView, @state, @linewise=true) ->\n+      super(@editorView.editor, @state)\n+      @viewModel = new MoveToMarkViewModel(@)\n+\n+  execute: ->\n+    @position = @state.getMark(@viewModel.char)\n+    @editor.setCursorBufferPosition(@position)\n+    # @editor.getCursor().skipLeadingWhitespace()",
        "path": "lib/motions.coffee",
        "position": null,
        "original_position": 23,
        "commit_id": "43dca6a84551cf88bebe7da7f5dd855f63b5c4d8",
        "original_commit_id": "45edf36ede1863e8b5014ce9338a9210683bb8cf",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This can probably :skull:\n",
        "created_at": "2014-03-17T02:26:26Z",
        "updated_at": "2014-03-19T03:00:46Z",
        "html_url": "https://github.com/atom/vim-mode/pull/180#discussion_r10644073",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/180",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644073"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/180#discussion_r10644073"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/180"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644081",
        "pull_request_review_id": null,
        "id": 10644081,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjQ0MDgx",
        "diff_hunk": "@@ -437,10 +438,55 @@ class Search extends Motion\n   select: (count=1) ->\n     @viewModel.select(count)\n \n+class MoveToMark extends Motion\n+\n+  isLinewise: -> @linewise\n+\n+  constructor: (@editorView, @state, @linewise=true) ->\n+      super(@editorView.editor, @state)\n+      @viewModel = new MoveToMarkViewModel(@)\n+\n+  execute: ->\n+    @position = @state.getMark(@viewModel.char)\n+    @editor.setCursorBufferPosition(@position)\n+    # @editor.getCursor().skipLeadingWhitespace()\n+\n+  select: (count=1, {requireEOL}={}) ->\n+    @position = @state.getMark(@viewModel.char)\n+    cpos = @editor.getCursorBufferPosition()",
        "path": "lib/motions.coffee",
        "position": null,
        "original_position": 27,
        "commit_id": "43dca6a84551cf88bebe7da7f5dd855f63b5c4d8",
        "original_commit_id": "45edf36ede1863e8b5014ce9338a9210683bb8cf",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "These names are a little confusing. How about something like `currentPosition` and `markPosition`?\n",
        "created_at": "2014-03-17T02:27:43Z",
        "updated_at": "2014-03-19T03:00:46Z",
        "html_url": "https://github.com/atom/vim-mode/pull/180#discussion_r10644081",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/180",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644081"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/180#discussion_r10644081"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/180"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644096",
        "pull_request_review_id": null,
        "id": 10644096,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjQ0MDk2",
        "diff_hunk": "@@ -437,10 +438,55 @@ class Search extends Motion\n   select: (count=1) ->\n     @viewModel.select(count)\n \n+class MoveToMark extends Motion\n+\n+  isLinewise: -> @linewise\n+\n+  constructor: (@editorView, @state, @linewise=true) ->\n+      super(@editorView.editor, @state)\n+      @viewModel = new MoveToMarkViewModel(@)\n+\n+  execute: ->\n+    @position = @state.getMark(@viewModel.char)\n+    @editor.setCursorBufferPosition(@position)\n+    # @editor.getCursor().skipLeadingWhitespace()\n+\n+  select: (count=1, {requireEOL}={}) ->\n+    @position = @state.getMark(@viewModel.char)\n+    cpos = @editor.getCursorBufferPosition()\n+\n+    if cpos.isEqual @position",
        "path": "lib/motions.coffee",
        "position": null,
        "original_position": 29,
        "commit_id": "43dca6a84551cf88bebe7da7f5dd855f63b5c4d8",
        "original_commit_id": "45edf36ede1863e8b5014ce9338a9210683bb8cf",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Stylistically we've been using parens most everywhere.\n",
        "created_at": "2014-03-17T02:28:36Z",
        "updated_at": "2014-03-19T03:00:46Z",
        "html_url": "https://github.com/atom/vim-mode/pull/180#discussion_r10644096",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/180",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644096"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/180#discussion_r10644096"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/180"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644122",
        "pull_request_review_id": null,
        "id": 10644122,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjQ0MTIy",
        "diff_hunk": "@@ -437,10 +438,55 @@ class Search extends Motion\n   select: (count=1) ->\n     @viewModel.select(count)\n \n+class MoveToMark extends Motion\n+\n+  isLinewise: -> @linewise\n+\n+  constructor: (@editorView, @state, @linewise=true) ->\n+      super(@editorView.editor, @state)\n+      @viewModel = new MoveToMarkViewModel(@)\n+\n+  execute: ->\n+    @position = @state.getMark(@viewModel.char)\n+    @editor.setCursorBufferPosition(@position)\n+    # @editor.getCursor().skipLeadingWhitespace()\n+\n+  select: (count=1, {requireEOL}={}) ->\n+    @position = @state.getMark(@viewModel.char)\n+    cpos = @editor.getCursorBufferPosition()\n+\n+    if cpos.isEqual @position\n+      position = new Point @position.row, @position.column\n+\n+      if @linewise\n+        cpos.column = 0\n+        position.column = Infinity\n+        position = @editor.clipBufferPosition(position)\n+\n+      @editor.setSelectedBufferRange(new Range(cpos,position), requireEOL: requireEOL)\n+\n+\n+    if cpos.isGreaterThan @position\n+      position = new Point @position.row, @position.column",
        "path": "lib/motions.coffee",
        "position": null,
        "original_position": 41,
        "commit_id": "43dca6a84551cf88bebe7da7f5dd855f63b5c4d8",
        "original_commit_id": "45edf36ede1863e8b5014ce9338a9210683bb8cf",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Another `position`. Can you give this a more descriptive name?\n",
        "created_at": "2014-03-17T02:31:02Z",
        "updated_at": "2014-03-19T03:00:46Z",
        "html_url": "https://github.com/atom/vim-mode/pull/180#discussion_r10644122",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/180",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644122"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/180#discussion_r10644122"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/180"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644133",
        "pull_request_review_id": null,
        "id": 10644133,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjQ0MTMz",
        "diff_hunk": "@@ -437,10 +438,55 @@ class Search extends Motion\n   select: (count=1) ->\n     @viewModel.select(count)\n \n+class MoveToMark extends Motion\n+\n+  isLinewise: -> @linewise\n+\n+  constructor: (@editorView, @state, @linewise=true) ->\n+      super(@editorView.editor, @state)\n+      @viewModel = new MoveToMarkViewModel(@)\n+\n+  execute: ->\n+    @position = @state.getMark(@viewModel.char)\n+    @editor.setCursorBufferPosition(@position)\n+    # @editor.getCursor().skipLeadingWhitespace()\n+\n+  select: (count=1, {requireEOL}={}) ->\n+    @position = @state.getMark(@viewModel.char)\n+    cpos = @editor.getCursorBufferPosition()\n+\n+    if cpos.isEqual @position\n+      position = new Point @position.row, @position.column\n+\n+      if @linewise\n+        cpos.column = 0\n+        position.column = Infinity\n+        position = @editor.clipBufferPosition(position)\n+\n+      @editor.setSelectedBufferRange(new Range(cpos,position), requireEOL: requireEOL)\n+\n+\n+    if cpos.isGreaterThan @position\n+      position = new Point @position.row, @position.column\n+      if @linewise\n+        cpos = @editor.clipBufferPosition([cpos.row, Infinity])\n+        position.column = 0\n+      @editor.setSelectedBufferRange(new Range(position, cpos), requireEOL: requireEOL)\n+    else\n+      position = new Point @position.row, @position.column\n+      if (@linewise)\n+        position = @editor.clipBufferPosition([position.row, Infinity])\n+        cpos.column = 0\n+      @editor.setSelectedBufferRange(new Range(cpos, position), requireEOL: requireEOL)\n+\n+",
        "path": "lib/motions.coffee",
        "position": null,
        "original_position": 53,
        "commit_id": "43dca6a84551cf88bebe7da7f5dd855f63b5c4d8",
        "original_commit_id": "45edf36ede1863e8b5014ce9338a9210683bb8cf",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Extra newline\n",
        "created_at": "2014-03-17T02:31:54Z",
        "updated_at": "2014-03-19T03:00:46Z",
        "html_url": "https://github.com/atom/vim-mode/pull/180#discussion_r10644133",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/180",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644133"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/180#discussion_r10644133"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/180"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644148",
        "pull_request_review_id": null,
        "id": 10644148,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjQ0MTQ4",
        "diff_hunk": "@@ -437,10 +438,55 @@ class Search extends Motion\n   select: (count=1) ->\n     @viewModel.select(count)\n \n+class MoveToMark extends Motion\n+\n+  isLinewise: -> @linewise\n+\n+  constructor: (@editorView, @state, @linewise=true) ->\n+      super(@editorView.editor, @state)\n+      @viewModel = new MoveToMarkViewModel(@)\n+\n+  execute: ->\n+    @position = @state.getMark(@viewModel.char)\n+    @editor.setCursorBufferPosition(@position)\n+    # @editor.getCursor().skipLeadingWhitespace()\n+\n+  select: (count=1, {requireEOL}={}) ->",
        "path": "lib/motions.coffee",
        "position": null,
        "original_position": 25,
        "commit_id": "43dca6a84551cf88bebe7da7f5dd855f63b5c4d8",
        "original_commit_id": "45edf36ede1863e8b5014ce9338a9210683bb8cf",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It would be nice if a lot of the logic in this method could end up down in the view model.\n",
        "created_at": "2014-03-17T02:33:33Z",
        "updated_at": "2014-03-19T03:00:46Z",
        "html_url": "https://github.com/atom/vim-mode/pull/180#discussion_r10644148",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/180",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644148"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/180#discussion_r10644148"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/180"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644157",
        "pull_request_review_id": null,
        "id": 10644157,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjQ0MTU3",
        "diff_hunk": "@@ -154,7 +162,7 @@ class VimState\n       eventName = \"vim-mode:#{commandName}\"\n       @editorView.command eventName, (e) =>\n         possibleOperators = fn(e)\n-        possibleOperators = if _.isArray(possibleOperators) then possibleOperators else [possibleOperators]\n+        possibleOperators = if possibleOperators? then (if _.isArray(possibleOperators) then possibleOperators else [possibleOperators]) else []",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 27,
        "commit_id": "43dca6a84551cf88bebe7da7f5dd855f63b5c4d8",
        "original_commit_id": "7b42d2aada59e08966878b4a7fa2b62430311afa",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'm :-1: on this unless you can write a test that fails without it. If we need the change, this line's pretty busy now and we should break it down a little.\n",
        "created_at": "2014-03-17T02:34:42Z",
        "updated_at": "2014-03-19T03:00:46Z",
        "html_url": "https://github.com/atom/vim-mode/pull/180#discussion_r10644157",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/180",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644157"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/180#discussion_r10644157"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/180"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644166",
        "pull_request_review_id": null,
        "id": 10644166,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjQ0MTY2",
        "diff_hunk": "@@ -239,6 +247,14 @@ class VimState\n     else\n       atom.workspace.vimState.registers[name]\n \n+  # Private: Fetches the value of a given mark.\n+  #\n+  # name - The name of the mark to fetch.\n+  #\n+  # Returns the value of the given mark or undefined if it hasn't\n+  # been set.\n+  getMark: (name) -> atom.workspace.vimState.marks[name]",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 41,
        "commit_id": "43dca6a84551cf88bebe7da7f5dd855f63b5c4d8",
        "original_commit_id": "45edf36ede1863e8b5014ce9338a9210683bb8cf",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": ":+1: Nice job wrapping up access to state behind an API.\n",
        "created_at": "2014-03-17T02:35:34Z",
        "updated_at": "2014-03-19T03:00:46Z",
        "html_url": "https://github.com/atom/vim-mode/pull/180#discussion_r10644166",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/180",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644166"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/180#discussion_r10644166"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/180"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644173",
        "pull_request_review_id": null,
        "id": 10644173,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjQ0MTcz",
        "diff_hunk": "@@ -122,6 +123,7 @@ class Yank extends Operator\n     else\n       @editor.clearSelections()\n \n+",
        "path": "lib/operators.coffee",
        "position": null,
        "original_position": 12,
        "commit_id": "43dca6a84551cf88bebe7da7f5dd855f63b5c4d8",
        "original_commit_id": "45edf36ede1863e8b5014ce9338a9210683bb8cf",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Extra newline :fire:\n",
        "created_at": "2014-03-17T02:36:12Z",
        "updated_at": "2014-03-19T03:00:46Z",
        "html_url": "https://github.com/atom/vim-mode/pull/180#discussion_r10644173",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/180",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644173"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/180#discussion_r10644173"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/180"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644181",
        "pull_request_review_id": null,
        "id": 10644181,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjQ0MTgx",
        "diff_hunk": "@@ -0,0 +1,18 @@\n+VimCommandModeInputView = require './vim-command-mode-input-view'\n+\n+module.exports =\n+\n+# This is the view model for a Replace operator. It is an implementation\n+# detail of the same, and is tested via the use of the `r` keybinding\n+# in operators-spec.coffee.",
        "path": "lib/move-to-mark-view-model.coffee",
        "position": null,
        "original_position": 7,
        "commit_id": "43dca6a84551cf88bebe7da7f5dd855f63b5c4d8",
        "original_commit_id": "45edf36ede1863e8b5014ce9338a9210683bb8cf",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Comments copied again.\n",
        "created_at": "2014-03-17T02:36:59Z",
        "updated_at": "2014-03-19T03:00:46Z",
        "html_url": "https://github.com/atom/vim-mode/pull/180#discussion_r10644181",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/180",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644181"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/180#discussion_r10644181"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/180"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644216",
        "pull_request_review_id": null,
        "id": 10644216,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjQ0MjE2",
        "diff_hunk": "@@ -331,6 +356,37 @@ class VimState\n     name = atom.keymap.keystrokeStringForEvent(e.originalEvent)\n     @pushOperator(new prefixes.Register(name))\n \n+  # Private: A generic way to create a Mark op based on the event\n+  #\n+  # e - The event that triggered the Mark op\n+  #\n+  # Returns nothing.\n+  markCommand: (e) ->",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 71,
        "commit_id": "43dca6a84551cf88bebe7da7f5dd855f63b5c4d8",
        "original_commit_id": "45edf36ede1863e8b5014ce9338a9210683bb8cf",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Is this used? It's the only instance of 'markcommand' in the diff.\n",
        "created_at": "2014-03-17T02:40:30Z",
        "updated_at": "2014-03-19T03:00:46Z",
        "html_url": "https://github.com/atom/vim-mode/pull/180#discussion_r10644216",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/180",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644216"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/180#discussion_r10644216"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/180"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644219",
        "pull_request_review_id": null,
        "id": 10644219,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjQ0MjE5",
        "diff_hunk": "@@ -331,6 +356,37 @@ class VimState\n     name = atom.keymap.keystrokeStringForEvent(e.originalEvent)\n     @pushOperator(new prefixes.Register(name))\n \n+  # Private: A generic way to create a Mark op based on the event\n+  #\n+  # e - The event that triggered the Mark op\n+  #\n+  # Returns nothing.\n+  markCommand: (e) ->\n+    name = atom.keymap.keystrokeStringForEvent(e.originalEvent)\n+    new commands.Mark(@editor, @, name)\n+\n+  # Private: A generic way to create a Mark Motion based on the event, is linewise\n+  #\n+  # e - The event that triggered the Mark Motion\n+  #\n+  # Returns nothing.\n+  moveToMark: (e) ->",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 80,
        "commit_id": "43dca6a84551cf88bebe7da7f5dd855f63b5c4d8",
        "original_commit_id": "45edf36ede1863e8b5014ce9338a9210683bb8cf",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Same question about this and moveToLiteralMark, below. Are they used?\n",
        "created_at": "2014-03-17T02:40:58Z",
        "updated_at": "2014-03-19T03:00:46Z",
        "html_url": "https://github.com/atom/vim-mode/pull/180#discussion_r10644219",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/180",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644219"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/180#discussion_r10644219"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/180"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644233",
        "pull_request_review_id": null,
        "id": 10644233,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjQ0MjMz",
        "diff_hunk": "@@ -743,3 +748,37 @@ describe \"Motions\", ->\n     it \"moves the cursor to the first row if visible\", ->\n       keydown('M', shift: true)\n       expect(editor.setCursorScreenPosition).toHaveBeenCalledWith([5, 0])\n+\n+  describe 'the \\`/` keybindings', ->",
        "path": "spec/motions-spec.coffee",
        "position": null,
        "original_position": 17,
        "commit_id": "43dca6a84551cf88bebe7da7f5dd855f63b5c4d8",
        "original_commit_id": "45edf36ede1863e8b5014ce9338a9210683bb8cf",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Woa, lot of quotes! Maybe just `\"the \\ keybinding\"`?\n",
        "created_at": "2014-03-17T02:42:40Z",
        "updated_at": "2014-03-19T03:00:46Z",
        "html_url": "https://github.com/atom/vim-mode/pull/180#discussion_r10644233",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/180",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644233"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/180#discussion_r10644233"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/180"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644253",
        "pull_request_review_id": null,
        "id": 10644253,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjQ0MjUz",
        "diff_hunk": "@@ -668,3 +668,14 @@ describe \"Operators\", ->\n       keydown('r')\n       commandModeInputKeydown('x')\n       expect(editor.getText()).toBe '12\\n34\\n\\n'\n+\n+  describe 'the m keybinding', ->",
        "path": "spec/operators-spec.coffee",
        "position": 5,
        "original_position": 5,
        "commit_id": "43dca6a84551cf88bebe7da7f5dd855f63b5c4d8",
        "original_commit_id": "45edf36ede1863e8b5014ce9338a9210683bb8cf",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Does vim do anything with motions and marks (i.e. `15m`?) I honestly don't know; just asking because we try to test at least one motion-operator composition if so.\n",
        "created_at": "2014-03-17T02:44:05Z",
        "updated_at": "2014-03-19T03:00:46Z",
        "html_url": "https://github.com/atom/vim-mode/pull/180#discussion_r10644253",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/180",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644253"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/180#discussion_r10644253"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/180"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644274",
        "pull_request_review_id": null,
        "id": 10644274,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjQ0Mjc0",
        "diff_hunk": "@@ -437,10 +438,55 @@ class Search extends Motion\n   select: (count=1) ->\n     @viewModel.select(count)\n \n+class MoveToMark extends Motion\n+\n+  isLinewise: -> @linewise\n+\n+  constructor: (@editorView, @state, @linewise=true) ->\n+      super(@editorView.editor, @state)\n+      @viewModel = new MoveToMarkViewModel(@)\n+\n+  execute: ->\n+    @position = @state.getMark(@viewModel.char)\n+    @editor.setCursorBufferPosition(@position)\n+    # @editor.getCursor().skipLeadingWhitespace()",
        "path": "lib/motions.coffee",
        "position": null,
        "original_position": 23,
        "commit_id": "43dca6a84551cf88bebe7da7f5dd855f63b5c4d8",
        "original_commit_id": "45edf36ede1863e8b5014ce9338a9210683bb8cf",
        "user": {
            "login": "danzimm",
            "id": 166757,
            "node_id": "MDQ6VXNlcjE2Njc1Nw==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/166757?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/danzimm",
            "html_url": "https://github.com/danzimm",
            "followers_url": "https://api.github.com/users/danzimm/followers",
            "following_url": "https://api.github.com/users/danzimm/following{/other_user}",
            "gists_url": "https://api.github.com/users/danzimm/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/danzimm/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/danzimm/subscriptions",
            "organizations_url": "https://api.github.com/users/danzimm/orgs",
            "repos_url": "https://api.github.com/users/danzimm/repos",
            "events_url": "https://api.github.com/users/danzimm/events{/privacy}",
            "received_events_url": "https://api.github.com/users/danzimm/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "yeah, not sure why I left it in, sorry again!\n",
        "created_at": "2014-03-17T02:46:47Z",
        "updated_at": "2014-03-19T03:00:46Z",
        "html_url": "https://github.com/atom/vim-mode/pull/180#discussion_r10644274",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/180",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644274"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/180#discussion_r10644274"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/180"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644275",
        "pull_request_review_id": null,
        "id": 10644275,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjQ0Mjc1",
        "diff_hunk": "@@ -437,10 +438,55 @@ class Search extends Motion\n   select: (count=1) ->\n     @viewModel.select(count)\n \n+class MoveToMark extends Motion\n+\n+  isLinewise: -> @linewise",
        "path": "lib/motions.coffee",
        "position": null,
        "original_position": 14,
        "commit_id": "43dca6a84551cf88bebe7da7f5dd855f63b5c4d8",
        "original_commit_id": "45edf36ede1863e8b5014ce9338a9210683bb8cf",
        "user": {
            "login": "danzimm",
            "id": 166757,
            "node_id": "MDQ6VXNlcjE2Njc1Nw==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/166757?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/danzimm",
            "html_url": "https://github.com/danzimm",
            "followers_url": "https://api.github.com/users/danzimm/followers",
            "following_url": "https://api.github.com/users/danzimm/following{/other_user}",
            "gists_url": "https://api.github.com/users/danzimm/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/danzimm/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/danzimm/subscriptions",
            "organizations_url": "https://api.github.com/users/danzimm/orgs",
            "repos_url": "https://api.github.com/users/danzimm/repos",
            "events_url": "https://api.github.com/users/danzimm/events{/privacy}",
            "received_events_url": "https://api.github.com/users/danzimm/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "fair enough, will change in next commit\n",
        "created_at": "2014-03-17T02:46:48Z",
        "updated_at": "2014-03-19T03:00:46Z",
        "html_url": "https://github.com/atom/vim-mode/pull/180#discussion_r10644275",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/180",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644275"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/180#discussion_r10644275"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/180"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644276",
        "pull_request_review_id": null,
        "id": 10644276,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjQ0Mjc2",
        "diff_hunk": "@@ -0,0 +1,18 @@\n+VimCommandModeInputView = require './vim-command-mode-input-view'\n+\n+module.exports =\n+\n+# This is the view model for a Replace operator. It is an implementation\n+# detail of the same, and is tested via the use of the `r` keybinding\n+# in operators-spec.coffee.",
        "path": "lib/mark-view-model.coffee",
        "position": null,
        "original_position": 7,
        "commit_id": "43dca6a84551cf88bebe7da7f5dd855f63b5c4d8",
        "original_commit_id": "45edf36ede1863e8b5014ce9338a9210683bb8cf",
        "user": {
            "login": "danzimm",
            "id": 166757,
            "node_id": "MDQ6VXNlcjE2Njc1Nw==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/166757?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/danzimm",
            "html_url": "https://github.com/danzimm",
            "followers_url": "https://api.github.com/users/danzimm/followers",
            "following_url": "https://api.github.com/users/danzimm/following{/other_user}",
            "gists_url": "https://api.github.com/users/danzimm/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/danzimm/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/danzimm/subscriptions",
            "organizations_url": "https://api.github.com/users/danzimm/orgs",
            "repos_url": "https://api.github.com/users/danzimm/repos",
            "events_url": "https://api.github.com/users/danzimm/events{/privacy}",
            "received_events_url": "https://api.github.com/users/danzimm/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "oops forgot to change those, was on my mental todo list, I apologize!\n",
        "created_at": "2014-03-17T02:46:50Z",
        "updated_at": "2014-03-19T03:00:46Z",
        "html_url": "https://github.com/atom/vim-mode/pull/180#discussion_r10644276",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/180",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644276"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/180#discussion_r10644276"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/180"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644281",
        "pull_request_review_id": null,
        "id": 10644281,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjQ0Mjgx",
        "diff_hunk": "@@ -437,10 +438,55 @@ class Search extends Motion\n   select: (count=1) ->\n     @viewModel.select(count)\n \n+class MoveToMark extends Motion\n+\n+  isLinewise: -> @linewise\n+\n+  constructor: (@editorView, @state, @linewise=true) ->\n+      super(@editorView.editor, @state)\n+      @viewModel = new MoveToMarkViewModel(@)\n+\n+  execute: ->\n+    @position = @state.getMark(@viewModel.char)\n+    @editor.setCursorBufferPosition(@position)\n+    # @editor.getCursor().skipLeadingWhitespace()\n+\n+  select: (count=1, {requireEOL}={}) ->",
        "path": "lib/motions.coffee",
        "position": null,
        "original_position": 25,
        "commit_id": "43dca6a84551cf88bebe7da7f5dd855f63b5c4d8",
        "original_commit_id": "45edf36ede1863e8b5014ce9338a9210683bb8cf",
        "user": {
            "login": "danzimm",
            "id": 166757,
            "node_id": "MDQ6VXNlcjE2Njc1Nw==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/166757?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/danzimm",
            "html_url": "https://github.com/danzimm",
            "followers_url": "https://api.github.com/users/danzimm/followers",
            "following_url": "https://api.github.com/users/danzimm/following{/other_user}",
            "gists_url": "https://api.github.com/users/danzimm/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/danzimm/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/danzimm/subscriptions",
            "organizations_url": "https://api.github.com/users/danzimm/orgs",
            "repos_url": "https://api.github.com/users/danzimm/repos",
            "events_url": "https://api.github.com/users/danzimm/events{/privacy}",
            "received_events_url": "https://api.github.com/users/danzimm/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "fair enough, will do in next commit!\n",
        "created_at": "2014-03-17T02:47:07Z",
        "updated_at": "2014-03-19T03:00:46Z",
        "html_url": "https://github.com/atom/vim-mode/pull/180#discussion_r10644281",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/180",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644281"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/180#discussion_r10644281"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/180"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644283",
        "pull_request_review_id": null,
        "id": 10644283,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjQ0Mjgz",
        "diff_hunk": "@@ -437,10 +438,55 @@ class Search extends Motion\n   select: (count=1) ->\n     @viewModel.select(count)\n \n+class MoveToMark extends Motion\n+\n+  isLinewise: -> @linewise\n+\n+  constructor: (@editorView, @state, @linewise=true) ->\n+      super(@editorView.editor, @state)\n+      @viewModel = new MoveToMarkViewModel(@)\n+\n+  execute: ->\n+    @position = @state.getMark(@viewModel.char)\n+    @editor.setCursorBufferPosition(@position)\n+    # @editor.getCursor().skipLeadingWhitespace()\n+\n+  select: (count=1, {requireEOL}={}) ->\n+    @position = @state.getMark(@viewModel.char)\n+    cpos = @editor.getCursorBufferPosition()",
        "path": "lib/motions.coffee",
        "position": null,
        "original_position": 27,
        "commit_id": "43dca6a84551cf88bebe7da7f5dd855f63b5c4d8",
        "original_commit_id": "45edf36ede1863e8b5014ce9338a9210683bb8cf",
        "user": {
            "login": "danzimm",
            "id": 166757,
            "node_id": "MDQ6VXNlcjE2Njc1Nw==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/166757?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/danzimm",
            "html_url": "https://github.com/danzimm",
            "followers_url": "https://api.github.com/users/danzimm/followers",
            "following_url": "https://api.github.com/users/danzimm/following{/other_user}",
            "gists_url": "https://api.github.com/users/danzimm/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/danzimm/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/danzimm/subscriptions",
            "organizations_url": "https://api.github.com/users/danzimm/orgs",
            "repos_url": "https://api.github.com/users/danzimm/repos",
            "events_url": "https://api.github.com/users/danzimm/events{/privacy}",
            "received_events_url": "https://api.github.com/users/danzimm/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "good idea!\n",
        "created_at": "2014-03-17T02:47:19Z",
        "updated_at": "2014-03-19T03:00:46Z",
        "html_url": "https://github.com/atom/vim-mode/pull/180#discussion_r10644283",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/180",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644283"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/180#discussion_r10644283"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/180"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644298",
        "pull_request_review_id": null,
        "id": 10644298,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjQ0Mjk4",
        "diff_hunk": "@@ -331,6 +356,37 @@ class VimState\n     name = atom.keymap.keystrokeStringForEvent(e.originalEvent)\n     @pushOperator(new prefixes.Register(name))\n \n+  # Private: A generic way to create a Mark op based on the event\n+  #\n+  # e - The event that triggered the Mark op\n+  #\n+  # Returns nothing.\n+  markCommand: (e) ->\n+    name = atom.keymap.keystrokeStringForEvent(e.originalEvent)\n+    new commands.Mark(@editor, @, name)\n+\n+  # Private: A generic way to create a Mark Motion based on the event, is linewise\n+  #\n+  # e - The event that triggered the Mark Motion\n+  #\n+  # Returns nothing.\n+  moveToMark: (e) ->",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 80,
        "commit_id": "43dca6a84551cf88bebe7da7f5dd855f63b5c4d8",
        "original_commit_id": "45edf36ede1863e8b5014ce9338a9210683bb8cf",
        "user": {
            "login": "danzimm",
            "id": 166757,
            "node_id": "MDQ6VXNlcjE2Njc1Nw==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/166757?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/danzimm",
            "html_url": "https://github.com/danzimm",
            "followers_url": "https://api.github.com/users/danzimm/followers",
            "following_url": "https://api.github.com/users/danzimm/following{/other_user}",
            "gists_url": "https://api.github.com/users/danzimm/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/danzimm/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/danzimm/subscriptions",
            "organizations_url": "https://api.github.com/users/danzimm/orgs",
            "repos_url": "https://api.github.com/users/danzimm/repos",
            "events_url": "https://api.github.com/users/danzimm/events{/privacy}",
            "received_events_url": "https://api.github.com/users/danzimm/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "these last two functions were left over, forgot to remove them in the last commit, sorry!\n",
        "created_at": "2014-03-17T02:48:23Z",
        "updated_at": "2014-03-19T03:00:46Z",
        "html_url": "https://github.com/atom/vim-mode/pull/180#discussion_r10644298",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/180",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644298"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/180#discussion_r10644298"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/180"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644320",
        "pull_request_review_id": null,
        "id": 10644320,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjQ0MzIw",
        "diff_hunk": "@@ -743,3 +748,37 @@ describe \"Motions\", ->\n     it \"moves the cursor to the first row if visible\", ->\n       keydown('M', shift: true)\n       expect(editor.setCursorScreenPosition).toHaveBeenCalledWith([5, 0])\n+\n+  describe 'the \\`/` keybindings', ->",
        "path": "spec/motions-spec.coffee",
        "position": null,
        "original_position": 17,
        "commit_id": "43dca6a84551cf88bebe7da7f5dd855f63b5c4d8",
        "original_commit_id": "45edf36ede1863e8b5014ce9338a9210683bb8cf",
        "user": {
            "login": "danzimm",
            "id": 166757,
            "node_id": "MDQ6VXNlcjE2Njc1Nw==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/166757?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/danzimm",
            "html_url": "https://github.com/danzimm",
            "followers_url": "https://api.github.com/users/danzimm/followers",
            "following_url": "https://api.github.com/users/danzimm/following{/other_user}",
            "gists_url": "https://api.github.com/users/danzimm/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/danzimm/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/danzimm/subscriptions",
            "organizations_url": "https://api.github.com/users/danzimm/orgs",
            "repos_url": "https://api.github.com/users/danzimm/repos",
            "events_url": "https://api.github.com/users/danzimm/events{/privacy}",
            "received_events_url": "https://api.github.com/users/danzimm/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The motions this is describing are `'` and the `commands, so \"the \\ keybinding\" would be inaccurate - I could change to \"the '/` keybindings\" however to remove that one escape\n",
        "created_at": "2014-03-17T02:50:08Z",
        "updated_at": "2014-03-19T03:00:46Z",
        "html_url": "https://github.com/atom/vim-mode/pull/180#discussion_r10644320",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/180",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644320"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/180#discussion_r10644320"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/180"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644336",
        "pull_request_review_id": null,
        "id": 10644336,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjQ0MzM2",
        "diff_hunk": "@@ -668,3 +668,14 @@ describe \"Operators\", ->\n       keydown('r')\n       commandModeInputKeydown('x')\n       expect(editor.getText()).toBe '12\\n34\\n\\n'\n+\n+  describe 'the m keybinding', ->",
        "path": "spec/operators-spec.coffee",
        "position": 5,
        "original_position": 5,
        "commit_id": "43dca6a84551cf88bebe7da7f5dd855f63b5c4d8",
        "original_commit_id": "45edf36ede1863e8b5014ce9338a9210683bb8cf",
        "user": {
            "login": "danzimm",
            "id": 166757,
            "node_id": "MDQ6VXNlcjE2Njc1Nw==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/166757?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/danzimm",
            "html_url": "https://github.com/danzimm",
            "followers_url": "https://api.github.com/users/danzimm/followers",
            "following_url": "https://api.github.com/users/danzimm/following{/other_user}",
            "gists_url": "https://api.github.com/users/danzimm/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/danzimm/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/danzimm/subscriptions",
            "organizations_url": "https://api.github.com/users/danzimm/orgs",
            "repos_url": "https://api.github.com/users/danzimm/repos",
            "events_url": "https://api.github.com/users/danzimm/events{/privacy}",
            "received_events_url": "https://api.github.com/users/danzimm/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "No, marks are kind of their own thing, you create one by first typing `m` and it saves the cursor position into the specified mark register (note these aren't the normal registers for c/p, theyre their own thing)\n",
        "created_at": "2014-03-17T02:52:04Z",
        "updated_at": "2014-03-19T03:00:46Z",
        "html_url": "https://github.com/atom/vim-mode/pull/180#discussion_r10644336",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/180",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644336"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/180#discussion_r10644336"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/180"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644351",
        "pull_request_review_id": null,
        "id": 10644351,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjQ0MzUx",
        "diff_hunk": "@@ -743,3 +748,37 @@ describe \"Motions\", ->\n     it \"moves the cursor to the first row if visible\", ->\n       keydown('M', shift: true)\n       expect(editor.setCursorScreenPosition).toHaveBeenCalledWith([5, 0])\n+\n+  describe 'the \\`/` keybindings', ->",
        "path": "spec/motions-spec.coffee",
        "position": null,
        "original_position": 17,
        "commit_id": "43dca6a84551cf88bebe7da7f5dd855f63b5c4d8",
        "original_commit_id": "45edf36ede1863e8b5014ce9338a9210683bb8cf",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Maybe just `\"marks\"` then. It's hard to tell what this line says.\n",
        "created_at": "2014-03-17T02:52:55Z",
        "updated_at": "2014-03-19T03:00:46Z",
        "html_url": "https://github.com/atom/vim-mode/pull/180#discussion_r10644351",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/180",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644351"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/180#discussion_r10644351"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/180"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644452",
        "pull_request_review_id": null,
        "id": 10644452,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjQ0NDUy",
        "diff_hunk": "@@ -239,6 +247,14 @@ class VimState\n     else\n       atom.workspace.vimState.registers[name]\n \n+  # Private: Fetches the value of a given mark.\n+  #\n+  # name - The name of the mark to fetch.\n+  #\n+  # Returns the value of the given mark or undefined if it hasn't\n+  # been set.\n+  getMark: (name) -> atom.workspace.vimState.marks[name]",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 41,
        "commit_id": "43dca6a84551cf88bebe7da7f5dd855f63b5c4d8",
        "original_commit_id": "45edf36ede1863e8b5014ce9338a9210683bb8cf",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I just realized--won't this share marks across buffers? That's not the right behavior, is it? You can just hang them off of `@` to make them be per-buffer.\n",
        "created_at": "2014-03-17T03:00:14Z",
        "updated_at": "2014-03-19T03:00:46Z",
        "html_url": "https://github.com/atom/vim-mode/pull/180#discussion_r10644452",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/180",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10644452"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/180#discussion_r10644452"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/180"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10734305",
        "pull_request_review_id": null,
        "id": 10734305,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzM0MzA1",
        "diff_hunk": "@@ -437,10 +438,24 @@ class Search extends Motion\n   select: (count=1) ->\n     @viewModel.select(count)\n \n+class MoveToMark extends Motion\n+  constructor: (@editorView, @state, @linewise=true) ->\n+      super(@editorView.editor, @state)",
        "path": "lib/motions.coffee",
        "position": null,
        "original_position": 14,
        "commit_id": "43dca6a84551cf88bebe7da7f5dd855f63b5c4d8",
        "original_commit_id": "d2595bd61944ac96a797deb5cbcb0686be129c3e",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "two spaces indent, please! :trollface:\n",
        "created_at": "2014-03-19T01:41:34Z",
        "updated_at": "2014-03-19T03:00:46Z",
        "html_url": "https://github.com/atom/vim-mode/pull/180#discussion_r10734305",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/180",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10734305"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/180#discussion_r10734305"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/180"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10734372",
        "pull_request_review_id": null,
        "id": 10734372,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzM0Mzcy",
        "diff_hunk": "@@ -253,6 +270,17 @@ class VimState\n     else\n       atom.workspace.vimState.registers[name] = value\n \n+  # Private: Sets the value of a given mark.\n+  #\n+  # name  - The name of the mark to fetch.\n+  # value {Point} - The value to set the mark to.\n+  #\n+  # Returns nothing.\n+  setMark: (name, pos) ->\n+    # unsure if I should throw an error / if I should start returning a true/false for success",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 56,
        "commit_id": "43dca6a84551cf88bebe7da7f5dd855f63b5c4d8",
        "original_commit_id": "d2595bd61944ac96a797deb5cbcb0686be129c3e",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I would just return undefined if we fail, but make sure the view model is checking and doesn't call the completion function if an invalid character is entered.\n",
        "created_at": "2014-03-19T01:45:20Z",
        "updated_at": "2014-03-19T03:00:46Z",
        "html_url": "https://github.com/atom/vim-mode/pull/180#discussion_r10734372",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/180",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10734372"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/180#discussion_r10734372"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/180"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10734379",
        "pull_request_review_id": null,
        "id": 10734379,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzM0Mzc5",
        "diff_hunk": "@@ -253,6 +270,17 @@ class VimState\n     else\n       atom.workspace.vimState.registers[name] = value\n \n+  # Private: Sets the value of a given mark.\n+  #\n+  # name  - The name of the mark to fetch.\n+  # value {Point} - The value to set the mark to.\n+  #\n+  # Returns nothing.\n+  setMark: (name, pos) ->\n+    # unsure if I should throw an error / if I should start returning a true/false for success\n+    if (charCode = name.charCodeAt(0)) >= 97 and charCode <= 122",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 57,
        "commit_id": "43dca6a84551cf88bebe7da7f5dd855f63b5c4d8",
        "original_commit_id": "d2595bd61944ac96a797deb5cbcb0686be129c3e",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This line could use a comment.\n",
        "created_at": "2014-03-19T01:45:37Z",
        "updated_at": "2014-03-19T03:00:46Z",
        "html_url": "https://github.com/atom/vim-mode/pull/180#discussion_r10734379",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/180",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10734379"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/180#discussion_r10734379"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/180"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10734387",
        "pull_request_review_id": null,
        "id": 10734387,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzM0Mzg3",
        "diff_hunk": "@@ -6,6 +6,7 @@ module.exports =\n \n   _initializeWorkspaceState: ->\n     atom.workspace.vimState ||= {}\n+    atom.workspace.vimState.marks ||= {}",
        "path": "lib/vim-mode.coffee",
        "position": null,
        "original_position": 4,
        "commit_id": "43dca6a84551cf88bebe7da7f5dd855f63b5c4d8",
        "original_commit_id": "d2595bd61944ac96a797deb5cbcb0686be129c3e",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think this went away?\n",
        "created_at": "2014-03-19T01:46:02Z",
        "updated_at": "2014-03-19T03:00:46Z",
        "html_url": "https://github.com/atom/vim-mode/pull/180#discussion_r10734387",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/180",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10734387"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/180#discussion_r10734387"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/180"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10734401",
        "pull_request_review_id": null,
        "id": 10734401,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzM0NDAx",
        "diff_hunk": "@@ -0,0 +1,41 @@\n+VimCommandModeInputView = require './vim-command-mode-input-view'\n+{Point, Range} = require 'atom'\n+\n+module.exports =\n+\n+# This is the view model for a Mark Motion. It is an implementation\n+# detail of the same, and is tested via the use of the `mark` keybindings\n+# in motions-spec.coffee.\n+class MoveToMarkViewModel\n+  constructor: (@moveToMarkOperator) ->\n+    @editorView = @moveToMarkOperator.editorView\n+    @vimState   = @moveToMarkOperator.state\n+    @editor     = @moveToMarkOperator.editor\n+\n+    @view = new VimCommandModeInputView(@, class: 'move-to-mark', hidden: true, singleChar: true)\n+    @editorView.editor.commandModeInputView = @view\n+\n+  confirm: (view) ->\n+    @char = @view.value\n+    @editorView.trigger('vim-mode:move-to-mark-complete')\n+\n+  select: (requireEOL) ->\n+    markPosition = @vimState.getMark(@char)\n+    currentPosition = @editor.getCursorBufferPosition()\n+    selectionRange = null\n+    if currentPosition.isGreaterThan(markPosition)\n+      if @moveToMarkOperator.linewise\n+        currentPosition = @editor.clipBufferPosition([currentPosition.row, Infinity])\n+        markPosition = new Point(markPosition.row, 0)\n+      selectionRange = new Range(markPosition, currentPosition)\n+    else\n+      if @moveToMarkOperator.linewise\n+        markPosition = @editor.clipBufferPosition([markPosition.row, Infinity])\n+        currentPosition = new Point(currentPosition.row, 0)\n+      selectionRange = new Range(currentPosition, markPosition)\n+    console.log(selectionRange)",
        "path": "lib/move-to-mark-view-model.coffee",
        "position": null,
        "original_position": 36,
        "commit_id": "43dca6a84551cf88bebe7da7f5dd855f63b5c4d8",
        "original_commit_id": "d2595bd61944ac96a797deb5cbcb0686be129c3e",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": ":rotating_light: \n",
        "created_at": "2014-03-19T01:46:38Z",
        "updated_at": "2014-03-19T03:00:46Z",
        "html_url": "https://github.com/atom/vim-mode/pull/180#discussion_r10734401",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/180",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10734401"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/180#discussion_r10734401"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/180"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10760895",
        "pull_request_review_id": null,
        "id": 10760895,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzYwODk1",
        "diff_hunk": "@@ -153,6 +138,26 @@\n   '\" %': 'vim-mode:register-prefix'\n   '\" _': 'vim-mode:register-prefix'\n \n+'.vim-mode.command-mode, .vim-mode.operator-pending-mode':\n+  '/': 'vim-mode:search'\n+  '?': 'vim-mode:reverse-search'\n+  'n': 'vim-mode:repeat-search'\n+  'N': 'vim-mode:repeat-search-backwards'",
        "path": "keymaps/vim-mode.cson",
        "position": 37,
        "original_position": 37,
        "commit_id": "b12749cdf58a809eddbbbc8e487f67ba25936504",
        "original_commit_id": "cadb9057863fbe98fd342b113e640c264201d54e",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "These should also work in visual mode. Guess I need a test for that.\n",
        "created_at": "2014-03-19T17:34:49Z",
        "updated_at": "2014-03-19T20:49:24Z",
        "html_url": "https://github.com/atom/vim-mode/pull/183#discussion_r10760895",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/183",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10760895"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/183#discussion_r10760895"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/183"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10760951",
        "pull_request_review_id": null,
        "id": 10760951,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzYwOTUx",
        "diff_hunk": "@@ -0,0 +1,16 @@\n+_ = require 'underscore-plus'\n+{$$, Point, Range} = require 'atom'\n+SearchViewModel = require './search-view-model'",
        "path": "lib/text-objects.coffee",
        "position": null,
        "original_position": 3,
        "commit_id": "b12749cdf58a809eddbbbc8e487f67ba25936504",
        "original_commit_id": "cadb9057863fbe98fd342b113e640c264201d54e",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": ":fire:\n",
        "created_at": "2014-03-19T17:35:52Z",
        "updated_at": "2014-03-19T20:49:24Z",
        "html_url": "https://github.com/atom/vim-mode/pull/183#discussion_r10760951",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/183",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10760951"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/183#discussion_r10760951"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/183"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10761028",
        "pull_request_review_id": null,
        "id": 10761028,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzYxMDI4",
        "diff_hunk": "@@ -204,23 +202,29 @@ class VimState\n   #\n   # Returns nothing.\n   processOpStack: ->\n-    return unless @topOperator().isComplete()\n+    unless @opStack.length > 0\n+      return\n \n-    poppedOperator = @opStack.pop()\n+    unless @topOperation().isComplete()\n+      if @mode is 'command' and @topOperation() instanceof Operators.Operator\n+        @activateOperatorPendingMode()\n+      return\n+\n+    poppedOperation = @opStack.pop()\n     if @opStack.length\n       try\n-        @topOperator().compose(poppedOperator)\n+        @topOperation().compose(poppedOperation)\n         @processOpStack()\n       catch e\n-        (e instanceof operators.OperatorError) and @resetCommandMode() or throw e\n+        (e instanceof Operators.OperatorError) and @resetCommandMode() or throw e\n     else\n-      @history.unshift(poppedOperator) if poppedOperator.isRecordable()\n-      poppedOperator.execute()\n+      @history.unshift(poppedOperation) if poppedOperation.isRecordable()\n+      poppedOperation.execute()",
        "path": "lib/vim-state.coffee",
        "position": 283,
        "original_position": 283,
        "commit_id": "b12749cdf58a809eddbbbc8e487f67ba25936504",
        "original_commit_id": "cadb9057863fbe98fd342b113e640c264201d54e",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Could we put `@activateCommandMode()` here and remove it from all the operators?\n",
        "created_at": "2014-03-19T17:37:18Z",
        "updated_at": "2014-03-19T20:49:24Z",
        "html_url": "https://github.com/atom/vim-mode/pull/183#discussion_r10761028",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/183",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10761028"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/183#discussion_r10761028"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/183"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10761351",
        "pull_request_review_id": null,
        "id": 10761351,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzYxMzUx",
        "diff_hunk": "@@ -204,23 +202,29 @@ class VimState\n   #\n   # Returns nothing.\n   processOpStack: ->\n-    return unless @topOperator().isComplete()\n+    unless @opStack.length > 0\n+      return\n \n-    poppedOperator = @opStack.pop()\n+    unless @topOperation().isComplete()\n+      if @mode is 'command' and @topOperation() instanceof Operators.Operator\n+        @activateOperatorPendingMode()\n+      return\n+\n+    poppedOperation = @opStack.pop()\n     if @opStack.length\n       try\n-        @topOperator().compose(poppedOperator)\n+        @topOperation().compose(poppedOperation)\n         @processOpStack()\n       catch e\n-        (e instanceof operators.OperatorError) and @resetCommandMode() or throw e\n+        (e instanceof Operators.OperatorError) and @resetCommandMode() or throw e\n     else\n-      @history.unshift(poppedOperator) if poppedOperator.isRecordable()\n-      poppedOperator.execute()\n+      @history.unshift(poppedOperation) if poppedOperation.isRecordable()\n+      poppedOperation.execute()",
        "path": "lib/vim-state.coffee",
        "position": 283,
        "original_position": 283,
        "commit_id": "b12749cdf58a809eddbbbc8e487f67ba25936504",
        "original_commit_id": "cadb9057863fbe98fd342b113e640c264201d54e",
        "user": {
            "login": "nathansobo",
            "id": 1789,
            "node_id": "MDQ6VXNlcjE3ODk=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1789?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nathansobo",
            "html_url": "https://github.com/nathansobo",
            "followers_url": "https://api.github.com/users/nathansobo/followers",
            "following_url": "https://api.github.com/users/nathansobo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nathansobo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nathansobo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nathansobo/subscriptions",
            "organizations_url": "https://api.github.com/users/nathansobo/orgs",
            "repos_url": "https://api.github.com/users/nathansobo/repos",
            "events_url": "https://api.github.com/users/nathansobo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nathansobo/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "I remember either thinking about doing that or trying it and hitting a hangup, but I can't remember why. It might not be relevant anymore now that I've cleaned up what we call this method with. What are the circumstances in which we should reactivate command mode? When the op stack is empty? When the executed command was an operator? Always?\n",
        "created_at": "2014-03-19T17:43:30Z",
        "updated_at": "2014-03-19T20:49:24Z",
        "html_url": "https://github.com/atom/vim-mode/pull/183#discussion_r10761351",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/183",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10761351"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/183#discussion_r10761351"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/183"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10761743",
        "pull_request_review_id": null,
        "id": 10761743,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzYxNzQz",
        "diff_hunk": "@@ -204,23 +202,29 @@ class VimState\n   #\n   # Returns nothing.\n   processOpStack: ->\n-    return unless @topOperator().isComplete()\n+    unless @opStack.length > 0\n+      return\n \n-    poppedOperator = @opStack.pop()\n+    unless @topOperation().isComplete()\n+      if @mode is 'command' and @topOperation() instanceof Operators.Operator\n+        @activateOperatorPendingMode()\n+      return\n+\n+    poppedOperation = @opStack.pop()\n     if @opStack.length\n       try\n-        @topOperator().compose(poppedOperator)\n+        @topOperation().compose(poppedOperation)\n         @processOpStack()\n       catch e\n-        (e instanceof operators.OperatorError) and @resetCommandMode() or throw e\n+        (e instanceof Operators.OperatorError) and @resetCommandMode() or throw e\n     else\n-      @history.unshift(poppedOperator) if poppedOperator.isRecordable()\n-      poppedOperator.execute()\n+      @history.unshift(poppedOperation) if poppedOperation.isRecordable()\n+      poppedOperation.execute()",
        "path": "lib/vim-state.coffee",
        "position": 283,
        "original_position": 283,
        "commit_id": "b12749cdf58a809eddbbbc8e487f67ba25936504",
        "original_commit_id": "cadb9057863fbe98fd342b113e640c264201d54e",
        "user": {
            "login": "nathansobo",
            "id": 1789,
            "node_id": "MDQ6VXNlcjE3ODk=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1789?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nathansobo",
            "html_url": "https://github.com/nathansobo",
            "followers_url": "https://api.github.com/users/nathansobo/followers",
            "following_url": "https://api.github.com/users/nathansobo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nathansobo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nathansobo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nathansobo/subscriptions",
            "organizations_url": "https://api.github.com/users/nathansobo/orgs",
            "repos_url": "https://api.github.com/users/nathansobo/repos",
            "events_url": "https://api.github.com/users/nathansobo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nathansobo/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Ah yes, not all operators want to go back to command mode. For example, change leaves us in insert mode.\n",
        "created_at": "2014-03-19T17:50:00Z",
        "updated_at": "2014-03-19T20:49:24Z",
        "html_url": "https://github.com/atom/vim-mode/pull/183#discussion_r10761743",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/183",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10761743"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/183#discussion_r10761743"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/183"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10784204",
        "pull_request_review_id": null,
        "id": 10784204,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzg0MjA0",
        "diff_hunk": "@@ -423,3 +428,27 @@ class VimState\n       $('#status-bar-vim-mode').html(\"Command\")\n     else if @mode is \"visual\"\n       $('#status-bar-vim-mode').html(\"Visual\")\n+\n+  adjustCursorWidth: ->\n+    cursorValue = @getCursorValueForCharacter @getCharUnderCursor()\n+    cursorView = @editorView.getCursorView()\n+    # >>> THERE HAS TO BE A BETTER WAY THAN THIS HACK <<<\n+    $(cursorView[0]).html $('<span/>').addClass('chr').html(cursorValue)",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 28,
        "commit_id": "ea703e77cd1968e8a2fe0b10fe43f7c5d2300ac0",
        "original_commit_id": "9ff4ea92ccdceee5c72d945d1423329acbf85feb",
        "user": {
            "login": "execjosh",
            "id": 189989,
            "node_id": "MDQ6VXNlcjE4OTk4OQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/189989?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/execjosh",
            "html_url": "https://github.com/execjosh",
            "followers_url": "https://api.github.com/users/execjosh/followers",
            "following_url": "https://api.github.com/users/execjosh/following{/other_user}",
            "gists_url": "https://api.github.com/users/execjosh/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/execjosh/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/execjosh/subscriptions",
            "organizations_url": "https://api.github.com/users/execjosh/orgs",
            "repos_url": "https://api.github.com/users/execjosh/repos",
            "events_url": "https://api.github.com/users/execjosh/events{/privacy}",
            "received_events_url": "https://api.github.com/users/execjosh/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Oh, wait.  This is the better way:\n\n``` coffeescript\ncursorView.html $('<span/>')......\n```\n\nDuh...\n",
        "created_at": "2014-03-20T06:40:28Z",
        "updated_at": "2014-03-20T15:43:33Z",
        "html_url": "https://github.com/atom/vim-mode/pull/187#discussion_r10784204",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/187",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10784204"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/187#discussion_r10784204"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/187"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10736159",
        "pull_request_review_id": null,
        "id": 10736159,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzM2MTU5",
        "diff_hunk": "@@ -285,9 +285,20 @@ class Replace extends Operator\n       start = editor.getCursorBufferPosition()\n       _.times count, =>\n         point = editor.getCursorBufferPosition()\n-        editor.setTextInBufferRange(Range.fromPointWithDelta(point, 0, 1), @viewModel.char)\n+        editor.setTextInBufferRange(Range.fromPointWithDelta(point, 0, 1), @viewModel.value)\n         editor.moveCursorRight()\n       editor.setCursorBufferPosition(start)\n \n+class Mark extends Operator",
        "path": "lib/operators.coffee",
        "position": null,
        "original_position": 17,
        "commit_id": "6481898cd9a5e945d3fa395571931a07c8d5abc9",
        "original_commit_id": "af42e8221b0beb258a237364803f38d6f4d7043c",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "There's a lot in this diff that is in master...is this up to date?\n",
        "created_at": "2014-03-19T03:37:09Z",
        "updated_at": "2014-03-25T17:52:31Z",
        "html_url": "https://github.com/atom/vim-mode/pull/184#discussion_r10736159",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/184",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10736159"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/184#discussion_r10736159"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/184"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10736206",
        "pull_request_review_id": null,
        "id": 10736206,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzM2MjA2",
        "diff_hunk": "@@ -285,9 +285,20 @@ class Replace extends Operator\n       start = editor.getCursorBufferPosition()\n       _.times count, =>\n         point = editor.getCursorBufferPosition()\n-        editor.setTextInBufferRange(Range.fromPointWithDelta(point, 0, 1), @viewModel.char)\n+        editor.setTextInBufferRange(Range.fromPointWithDelta(point, 0, 1), @viewModel.value)\n         editor.moveCursorRight()\n       editor.setCursorBufferPosition(start)\n \n+class Mark extends Operator",
        "path": "lib/operators.coffee",
        "position": null,
        "original_position": 17,
        "commit_id": "6481898cd9a5e945d3fa395571931a07c8d5abc9",
        "original_commit_id": "af42e8221b0beb258a237364803f38d6f4d7043c",
        "user": {
            "login": "danzimm",
            "id": 166757,
            "node_id": "MDQ6VXNlcjE2Njc1Nw==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/166757?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/danzimm",
            "html_url": "https://github.com/danzimm",
            "followers_url": "https://api.github.com/users/danzimm/followers",
            "following_url": "https://api.github.com/users/danzimm/following{/other_user}",
            "gists_url": "https://api.github.com/users/danzimm/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/danzimm/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/danzimm/subscriptions",
            "organizations_url": "https://api.github.com/users/danzimm/orgs",
            "repos_url": "https://api.github.com/users/danzimm/repos",
            "events_url": "https://api.github.com/users/danzimm/events{/privacy}",
            "received_events_url": "https://api.github.com/users/danzimm/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I merged my local `marks` branch before you merged it to `master` and forgot to remerge from master once you had done so :/ sorry, merging now\n",
        "created_at": "2014-03-19T03:40:11Z",
        "updated_at": "2014-03-25T17:52:31Z",
        "html_url": "https://github.com/atom/vim-mode/pull/184#discussion_r10736206",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/184",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10736206"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/184#discussion_r10736206"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/184"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10738098",
        "pull_request_review_id": null,
        "id": 10738098,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzM4MDk4",
        "diff_hunk": "@@ -0,0 +1,214 @@\n+VimCommandModeInputView = require './vim-command-mode-input-view'",
        "path": "lib/view-models.coffee",
        "position": null,
        "original_position": 1,
        "commit_id": "6481898cd9a5e945d3fa395571931a07c8d5abc9",
        "original_commit_id": "caa7b2245e2323f21a04af9389042da38a2687c1",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This is looking really good, but I think it would be better broken out into a file per view model.\n",
        "created_at": "2014-03-19T06:09:50Z",
        "updated_at": "2014-03-25T17:52:31Z",
        "html_url": "https://github.com/atom/vim-mode/pull/184#discussion_r10738098",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/184",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10738098"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/184#discussion_r10738098"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/184"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10738149",
        "pull_request_review_id": null,
        "id": 10738149,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzM4MTQ5",
        "diff_hunk": "@@ -0,0 +1,214 @@\n+VimCommandModeInputView = require './vim-command-mode-input-view'",
        "path": "lib/view-models.coffee",
        "position": null,
        "original_position": 1,
        "commit_id": "6481898cd9a5e945d3fa395571931a07c8d5abc9",
        "original_commit_id": "caa7b2245e2323f21a04af9389042da38a2687c1",
        "user": {
            "login": "danzimm",
            "id": 166757,
            "node_id": "MDQ6VXNlcjE2Njc1Nw==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/166757?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/danzimm",
            "html_url": "https://github.com/danzimm",
            "followers_url": "https://api.github.com/users/danzimm/followers",
            "following_url": "https://api.github.com/users/danzimm/following{/other_user}",
            "gists_url": "https://api.github.com/users/danzimm/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/danzimm/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/danzimm/subscriptions",
            "organizations_url": "https://api.github.com/users/danzimm/orgs",
            "repos_url": "https://api.github.com/users/danzimm/repos",
            "events_url": "https://api.github.com/users/danzimm/events{/privacy}",
            "received_events_url": "https://api.github.com/users/danzimm/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Why would you prefer a file per model? I figured this found be better to keep the files cleaner. Maybe we could put them in a subdir at least?\n",
        "created_at": "2014-03-19T06:14:01Z",
        "updated_at": "2014-03-25T17:52:31Z",
        "html_url": "https://github.com/atom/vim-mode/pull/184#discussion_r10738149",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/184",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10738149"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/184#discussion_r10738149"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/184"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10738165",
        "pull_request_review_id": null,
        "id": 10738165,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzM4MTY1",
        "diff_hunk": "@@ -0,0 +1,214 @@\n+VimCommandModeInputView = require './vim-command-mode-input-view'\n+{Point, Range} = require 'atom'\n+_ = require 'underscore-plus'\n+\n+# Public: Base class for all view models; a view model\n+#         is the model attached to a VimCommandModeInputView\n+#         which is used when a given operator, motion, etc\n+#         needs extra keystroke.\n+#\n+# Ivars:\n+#\n+#   @completionCommand - if set will automatically be triggered on the editorView\n+#                        when the `confirm` method is called on the view model\n+#\n+#   @value - automatically set to the value of typed into the `VimCommandModeInputView`\n+#            when the `confirm` method is called\n+#\n+class ViewModel\n+  # Public: Override this in subclasses for custom initialization\n+  #\n+  # operator - An operator, motion, prefix, etc with `@editorView` and `@state` set",
        "path": "lib/view-models.coffee",
        "position": null,
        "original_position": 21,
        "commit_id": "6481898cd9a5e945d3fa395571931a07c8d5abc9",
        "original_commit_id": "caa7b2245e2323f21a04af9389042da38a2687c1",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "`etc`? It's just those three, right?\n",
        "created_at": "2014-03-19T06:15:20Z",
        "updated_at": "2014-03-25T17:52:31Z",
        "html_url": "https://github.com/atom/vim-mode/pull/184#discussion_r10738165",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/184",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10738165"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/184#discussion_r10738165"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/184"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10738167",
        "pull_request_review_id": null,
        "id": 10738167,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzM4MTY3",
        "diff_hunk": "@@ -0,0 +1,214 @@\n+VimCommandModeInputView = require './vim-command-mode-input-view'\n+{Point, Range} = require 'atom'\n+_ = require 'underscore-plus'\n+\n+# Public: Base class for all view models; a view model\n+#         is the model attached to a VimCommandModeInputView\n+#         which is used when a given operator, motion, etc\n+#         needs extra keystroke.\n+#\n+# Ivars:\n+#\n+#   @completionCommand - if set will automatically be triggered on the editorView\n+#                        when the `confirm` method is called on the view model\n+#\n+#   @value - automatically set to the value of typed into the `VimCommandModeInputView`\n+#            when the `confirm` method is called\n+#\n+class ViewModel\n+  # Public: Override this in subclasses for custom initialization\n+  #\n+  # operator - An operator, motion, prefix, etc with `@editorView` and `@state` set\n+  #\n+  # opts - the options to be passed to `VimCommandModeInputView`\n+  #\n+  constructor: (@operator, opts = {}) ->\n+    @editorView        = @operator.editorView\n+    @vimState          = @operator.state\n+\n+    @view = new VimCommandModeInputView(@, opts)\n+    @editorView.editor.commandModeInputView = @view\n+\n+  # Public: Override this in subclasses for custom behavior when the `VimCommandModeInputView`\n+  #         has called `confirm`, optionally call super to get the default behavior of setting\n+  #         `@value` and triggering `@completionCommand`, if set\n+  #\n+  # view - the `VimCommandModeInputView` that called this method\n+  #\n+  confirm: (view) ->\n+    @value = @view.value\n+    @editorView.trigger(@completionCommand) if @completionCommand?\n+\n+class ReplaceViewModel extends ViewModel\n+  constructor: (@replaceOperator) ->\n+    super(@replaceOperator, class: 'replace', hidden: true, singleChar: true)\n+    @completionCommand = 'vim-mode:replace-complete'\n+\n+",
        "path": "lib/view-models.coffee",
        "position": null,
        "original_position": 47,
        "commit_id": "6481898cd9a5e945d3fa395571931a07c8d5abc9",
        "original_commit_id": "caa7b2245e2323f21a04af9389042da38a2687c1",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Extra newline\n",
        "created_at": "2014-03-19T06:15:29Z",
        "updated_at": "2014-03-25T17:52:31Z",
        "html_url": "https://github.com/atom/vim-mode/pull/184#discussion_r10738167",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/184",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10738167"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/184#discussion_r10738167"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/184"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10738200",
        "pull_request_review_id": null,
        "id": 10738200,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzM4MjAw",
        "diff_hunk": "@@ -0,0 +1,214 @@\n+VimCommandModeInputView = require './vim-command-mode-input-view'\n+{Point, Range} = require 'atom'\n+_ = require 'underscore-plus'\n+\n+# Public: Base class for all view models; a view model\n+#         is the model attached to a VimCommandModeInputView\n+#         which is used when a given operator, motion, etc\n+#         needs extra keystroke.\n+#\n+# Ivars:\n+#\n+#   @completionCommand - if set will automatically be triggered on the editorView\n+#                        when the `confirm` method is called on the view model\n+#\n+#   @value - automatically set to the value of typed into the `VimCommandModeInputView`\n+#            when the `confirm` method is called\n+#\n+class ViewModel\n+  # Public: Override this in subclasses for custom initialization\n+  #\n+  # operator - An operator, motion, prefix, etc with `@editorView` and `@state` set",
        "path": "lib/view-models.coffee",
        "position": null,
        "original_position": 21,
        "commit_id": "6481898cd9a5e945d3fa395571931a07c8d5abc9",
        "original_commit_id": "caa7b2245e2323f21a04af9389042da38a2687c1",
        "user": {
            "login": "danzimm",
            "id": 166757,
            "node_id": "MDQ6VXNlcjE2Njc1Nw==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/166757?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/danzimm",
            "html_url": "https://github.com/danzimm",
            "followers_url": "https://api.github.com/users/danzimm/followers",
            "following_url": "https://api.github.com/users/danzimm/following{/other_user}",
            "gists_url": "https://api.github.com/users/danzimm/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/danzimm/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/danzimm/subscriptions",
            "organizations_url": "https://api.github.com/users/danzimm/orgs",
            "repos_url": "https://api.github.com/users/danzimm/repos",
            "events_url": "https://api.github.com/users/danzimm/events{/privacy}",
            "received_events_url": "https://api.github.com/users/danzimm/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I was thinking we could move the registers over to this new model instead of registering 28 or so key bindings, so possibly prefixes too\n",
        "created_at": "2014-03-19T06:17:28Z",
        "updated_at": "2014-03-25T17:52:31Z",
        "html_url": "https://github.com/atom/vim-mode/pull/184#discussion_r10738200",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/184",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10738200"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/184#discussion_r10738200"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/184"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10738205",
        "pull_request_review_id": null,
        "id": 10738205,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzM4MjA1",
        "diff_hunk": "@@ -68,19 +70,26 @@ class VimState\n   setupCommandMode: ->\n     # Commands here start a new mode instead of popping the operator stack\n     # immediately.\n-    @editorView.command 'vim-mode:search', =>\n-      @currentSearch = new motions.Search(@editorView, @)\n-    @editorView.command 'vim-mode:reverse-search', =>\n-      @currentSearch = new motions.Search(@editorView, @)\n-      @currentSearch.reversed()\n-    @editorView.command 'vim-mode:replace', =>\n-      @currentReplace = new operators.Replace(@editorView, @)\n-    @editorView.command 'vim-mode:mark', =>\n-      @currentMark = new operators.Mark(@editorView, @)\n-    @editorView.command 'vim-mode:move-to-mark', =>\n-      @currentMoveToMark = new motions.MoveToMark(@editorView, @)\n-    @editorView.command 'vim-mode:move-to-mark-literal', =>\n-      @currentMoveToMark = new motions.MoveToMark(@editorView, @, false)\n+    @handleRawCommands",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 26,
        "commit_id": "6481898cd9a5e945d3fa395571931a07c8d5abc9",
        "original_commit_id": "caa7b2245e2323f21a04af9389042da38a2687c1",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "What's different about these commands is that they require typing, not rawness. How about `handleInputCommands` or `handleTypedCommands`?\n",
        "created_at": "2014-03-19T06:17:50Z",
        "updated_at": "2014-03-25T17:52:31Z",
        "html_url": "https://github.com/atom/vim-mode/pull/184#discussion_r10738205",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/184",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10738205"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/184#discussion_r10738205"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/184"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10738219",
        "pull_request_review_id": null,
        "id": 10738219,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzM4MjE5",
        "diff_hunk": "@@ -68,19 +70,26 @@ class VimState\n   setupCommandMode: ->\n     # Commands here start a new mode instead of popping the operator stack\n     # immediately.\n-    @editorView.command 'vim-mode:search', =>\n-      @currentSearch = new motions.Search(@editorView, @)\n-    @editorView.command 'vim-mode:reverse-search', =>\n-      @currentSearch = new motions.Search(@editorView, @)\n-      @currentSearch.reversed()\n-    @editorView.command 'vim-mode:replace', =>\n-      @currentReplace = new operators.Replace(@editorView, @)\n-    @editorView.command 'vim-mode:mark', =>\n-      @currentMark = new operators.Mark(@editorView, @)\n-    @editorView.command 'vim-mode:move-to-mark', =>\n-      @currentMoveToMark = new motions.MoveToMark(@editorView, @)\n-    @editorView.command 'vim-mode:move-to-mark-literal', =>\n-      @currentMoveToMark = new motions.MoveToMark(@editorView, @, false)\n+    @handleRawCommands",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 26,
        "commit_id": "6481898cd9a5e945d3fa395571931a07c8d5abc9",
        "original_commit_id": "caa7b2245e2323f21a04af9389042da38a2687c1",
        "user": {
            "login": "danzimm",
            "id": 166757,
            "node_id": "MDQ6VXNlcjE2Njc1Nw==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/166757?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/danzimm",
            "html_url": "https://github.com/danzimm",
            "followers_url": "https://api.github.com/users/danzimm/followers",
            "following_url": "https://api.github.com/users/danzimm/following{/other_user}",
            "gists_url": "https://api.github.com/users/danzimm/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/danzimm/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/danzimm/subscriptions",
            "organizations_url": "https://api.github.com/users/danzimm/orgs",
            "repos_url": "https://api.github.com/users/danzimm/repos",
            "events_url": "https://api.github.com/users/danzimm/events{/privacy}",
            "received_events_url": "https://api.github.com/users/danzimm/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I was thinking that the name was a misfit whilst coding but couldn't figure out what would be best, I like `handleInputCommands` though!\n",
        "created_at": "2014-03-19T06:18:47Z",
        "updated_at": "2014-03-25T17:52:31Z",
        "html_url": "https://github.com/atom/vim-mode/pull/184#discussion_r10738219",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/184",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10738219"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/184#discussion_r10738219"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/184"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10738259",
        "pull_request_review_id": null,
        "id": 10738259,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzM4MjU5",
        "diff_hunk": "@@ -135,17 +144,18 @@ class VimState\n       'register-prefix': (e) => @registerPrefix(e)\n       'repeat-prefix': (e) => @repeatPrefix(e)\n       'repeat': (e) => new operators.Repeat(@editor, @)\n-      'search-complete': (e) => @currentSearch\n-      'replace-complete': (e) => @currentReplace\n-      'repeat-search': (e) => @currentSearch.repeat() if @currentSearch?\n-      'repeat-search-backwards': (e) => @currentSearch.repeat(backwards: true) if @currentSearch?\n+      'search-complete': (e) => @currentOperators.search\n+      'replace-complete': (e) => @currentOperators.replace\n+      'repeat-search': (e) => @currentOperators.search.repeat() if @currentOperators.search?",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 59,
        "commit_id": "6481898cd9a5e945d3fa395571931a07c8d5abc9",
        "original_commit_id": "caa7b2245e2323f21a04af9389042da38a2687c1",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I feel like `@currentOperators` as an object is asking for trouble. If I press `escape` during a search, for example, the search is still hanging around, half-complete.\n\nThese commands are all mutually exclusive, right? Is there any reason we can't just have `operatorUnderConstruction`, or `currentlyEditedOperator`? Less state is less bugs!\n",
        "created_at": "2014-03-19T06:21:59Z",
        "updated_at": "2014-03-25T17:52:31Z",
        "html_url": "https://github.com/atom/vim-mode/pull/184#discussion_r10738259",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/184",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10738259"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/184#discussion_r10738259"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/184"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10738262",
        "pull_request_review_id": null,
        "id": 10738262,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzM4MjYy",
        "diff_hunk": "@@ -68,19 +70,26 @@ class VimState\n   setupCommandMode: ->\n     # Commands here start a new mode instead of popping the operator stack\n     # immediately.\n-    @editorView.command 'vim-mode:search', =>\n-      @currentSearch = new motions.Search(@editorView, @)\n-    @editorView.command 'vim-mode:reverse-search', =>\n-      @currentSearch = new motions.Search(@editorView, @)\n-      @currentSearch.reversed()\n-    @editorView.command 'vim-mode:replace', =>\n-      @currentReplace = new operators.Replace(@editorView, @)\n-    @editorView.command 'vim-mode:mark', =>\n-      @currentMark = new operators.Mark(@editorView, @)\n-    @editorView.command 'vim-mode:move-to-mark', =>\n-      @currentMoveToMark = new motions.MoveToMark(@editorView, @)\n-    @editorView.command 'vim-mode:move-to-mark-literal', =>\n-      @currentMoveToMark = new motions.MoveToMark(@editorView, @, false)\n+    @handleRawCommands\n+      'search':\n+        fn: => new motions.Search(@editorView, @)\n+      'reverse-search':\n+        name: 'search'\n+        fn: => (new motions.Search(@editorView, @)).reversed()\n+      'replace':\n+        fn: => new operators.Replace(@editorView, @)",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 33,
        "commit_id": "6481898cd9a5e945d3fa395571931a07c8d5abc9",
        "original_commit_id": "caa7b2245e2323f21a04af9389042da38a2687c1",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Really like how all this turned out.\n",
        "created_at": "2014-03-19T06:22:37Z",
        "updated_at": "2014-03-25T17:52:31Z",
        "html_url": "https://github.com/atom/vim-mode/pull/184#discussion_r10738262",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/184",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10738262"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/184#discussion_r10738262"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/184"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10738282",
        "pull_request_review_id": null,
        "id": 10738282,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzM4Mjgy",
        "diff_hunk": "@@ -782,3 +782,44 @@ describe \"Motions\", ->\n       keydown('`')\n       commandModeInputKeydown('a')\n       expect(editor.getText()).toEqual '14\\n56\\n'\n+\n+  describe 'the f/F keybindings', ->",
        "path": "spec/motions-spec.coffee",
        "position": null,
        "original_position": 5,
        "commit_id": "6481898cd9a5e945d3fa395571931a07c8d5abc9",
        "original_commit_id": "caa7b2245e2323f21a04af9389042da38a2687c1",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Would be great to throw in a test composing this with an operator like `d` or `y`.\n",
        "created_at": "2014-03-19T06:23:36Z",
        "updated_at": "2014-03-25T17:52:31Z",
        "html_url": "https://github.com/atom/vim-mode/pull/184#discussion_r10738282",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/184",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10738282"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/184#discussion_r10738282"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/184"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10738331",
        "pull_request_review_id": null,
        "id": 10738331,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzM4MzMx",
        "diff_hunk": "@@ -0,0 +1,214 @@\n+VimCommandModeInputView = require './vim-command-mode-input-view'\n+{Point, Range} = require 'atom'\n+_ = require 'underscore-plus'\n+\n+# Public: Base class for all view models; a view model\n+#         is the model attached to a VimCommandModeInputView\n+#         which is used when a given operator, motion, etc\n+#         needs extra keystroke.\n+#\n+# Ivars:\n+#\n+#   @completionCommand - if set will automatically be triggered on the editorView\n+#                        when the `confirm` method is called on the view model\n+#\n+#   @value - automatically set to the value of typed into the `VimCommandModeInputView`\n+#            when the `confirm` method is called\n+#\n+class ViewModel\n+  # Public: Override this in subclasses for custom initialization\n+  #\n+  # operator - An operator, motion, prefix, etc with `@editorView` and `@state` set\n+  #\n+  # opts - the options to be passed to `VimCommandModeInputView`\n+  #\n+  constructor: (@operator, opts = {}) ->\n+    @editorView        = @operator.editorView\n+    @vimState          = @operator.state\n+\n+    @view = new VimCommandModeInputView(@, opts)\n+    @editorView.editor.commandModeInputView = @view\n+\n+  # Public: Override this in subclasses for custom behavior when the `VimCommandModeInputView`\n+  #         has called `confirm`, optionally call super to get the default behavior of setting\n+  #         `@value` and triggering `@completionCommand`, if set\n+  #\n+  # view - the `VimCommandModeInputView` that called this method\n+  #\n+  confirm: (view) ->\n+    @value = @view.value\n+    @editorView.trigger(@completionCommand) if @completionCommand?\n+\n+class ReplaceViewModel extends ViewModel\n+  constructor: (@replaceOperator) ->\n+    super(@replaceOperator, class: 'replace', hidden: true, singleChar: true)\n+    @completionCommand = 'vim-mode:replace-complete'\n+\n+\n+class SearchViewModel extends ViewModel\n+  constructor: (@searchMotion) ->\n+    super(@searchMotion, class: 'search')\n+    @completionCommand = 'vim-mode:search-complete'\n+    @historyIndex = -1\n+    @editor = @searchMotion.editor\n+\n+    @view.editor.on('core:move-up', @increaseHistorySearch)\n+    @view.editor.on('core:move-down', @decreaseHistorySearch)\n+\n+  restoreHistory: (index) ->\n+    @view.editor.setText(@history(index).value)\n+\n+  history: (index) ->\n+    @vimState.getSearchHistoryItem(index)\n+\n+  increaseHistorySearch: =>\n+    if @history(@historyIndex + 1)?\n+      @historyIndex += 1\n+      @restoreHistory(@historyIndex)\n+\n+  decreaseHistorySearch: =>\n+    if @historyIndex <= 0\n+      # get us back to a clean slate\n+      @historyIndex = -1\n+      @view.editor.setText('')\n+    else\n+      @historyIndex -= 1\n+      @restoreHistory(@historyIndex)\n+\n+  reversed: =>\n+    @initiallyReversed = @reverse = true\n+\n+  confirm: (view) =>\n+    super(view)\n+    @vimState.pushSearchHistory(@)\n+\n+  repeat: (opts) =>\n+    reverse = opts.backwards\n+    if @initiallyReversed and reverse\n+      @reverse = false\n+    else\n+      @reverse = reverse or @initiallyReversed\n+\n+  execute: (count) =>\n+    @scan()\n+    @match count, (pos) =>\n+      @editor.setCursorBufferPosition(pos)\n+\n+  select: (count) =>\n+    @scan()\n+    cur = @editor.getCursorBufferPosition()\n+    @match count, (pos) =>\n+      @editor.setSelectedBufferRange([cur, pos])\n+    [true]\n+\n+  match: (count, callback) ->\n+    pos = @matches[(count - 1) % @matches.length]\n+    if pos?\n+      callback(pos)\n+    else\n+      atom.beep()\n+\n+  scan: ->\n+    term = @value\n+    regexp =\n+      try\n+        new RegExp(term, 'g')\n+      catch\n+        new RegExp(_.escapeRegExp(term), 'g')\n+\n+    cur = @editor.getCursorBufferPosition()\n+    matchPoints = []\n+    iterator = (item) =>\n+      matchPoints.push(item.range.start)\n+\n+    @editor.scan(regexp, iterator)\n+\n+    previous = _.filter matchPoints, (point) =>\n+      if @reverse\n+        point.compare(cur) < 0\n+      else\n+        point.compare(cur) <= 0\n+\n+    after = _.difference(matchPoints, previous)\n+    after.push(previous...)\n+    after = after.reverse() if @reverse\n+\n+    @matches = after\n+\n+class MarkViewModel extends ViewModel\n+  constructor: (@markOperator) ->\n+    super(@markOperator, class: 'mark', hidden: true, singleChar: true)\n+    @completionCommand = 'vim-mode:mark-complete'\n+\n+class FindViewModel extends ViewModel\n+  constructor: (@findMotion) ->\n+    super(@findMotion, class: 'mark', hidden: true, singleChar: true)\n+    @completionCommand = 'vim-mode:find-complete'\n+    @reversed = false\n+\n+  reverse: -> @reversed = !@reversed\n+\n+  execute: (count) ->\n+    currentPosition = @editorView.editor.getCursorBufferPosition()\n+    line = @editorView.editor.lineForBufferRow(currentPosition.row)\n+    if @reversed\n+      index = currentPosition.column-1\n+      for i in [0..count-1]\n+        index = line.lastIndexOf(@value, index-1)\n+      if index != -1\n+        @editorView.editor.setCursorBufferPosition([currentPosition.row, index])\n+    else\n+      index = currentPosition.column+1\n+      for i in [0..count-1]\n+        index = line.indexOf(@value, index+1)\n+      if index != -1\n+        @editorView.editor.setCursorBufferPosition([currentPosition.row, index])\n+\n+  select: (count, requireEOL) ->\n+    currentPosition = @editorView.editor.getCursorBufferPosition()\n+    line = @editorView.editor.lineForBufferRow(currentPosition.row)\n+    if @reversed\n+      index = currentPosition.column-1\n+      for i in [0..count-1]\n+        index = line.lastIndexOf(@value, index-1)\n+      if index != -1\n+        @editorView.editor.setSelectedBufferRange(new Range(new Point(currentPosition.row, index), currentPosition))",
        "path": "lib/view-models.coffee",
        "position": null,
        "original_position": 175,
        "commit_id": "6481898cd9a5e945d3fa395571931a07c8d5abc9",
        "original_commit_id": "caa7b2245e2323f21a04af9389042da38a2687c1",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "`select` and `execute` are almost identical. This one line could be in a callback and save a lot of this duplication. Check out how `SearchViewModel` uses `match`.\n",
        "created_at": "2014-03-19T06:27:49Z",
        "updated_at": "2014-03-25T17:52:31Z",
        "html_url": "https://github.com/atom/vim-mode/pull/184#discussion_r10738331",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/184",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10738331"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/184#discussion_r10738331"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/184"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10738402",
        "pull_request_review_id": null,
        "id": 10738402,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzM4NDAy",
        "diff_hunk": "@@ -0,0 +1,214 @@\n+VimCommandModeInputView = require './vim-command-mode-input-view'",
        "path": "lib/view-models.coffee",
        "position": null,
        "original_position": 1,
        "commit_id": "6481898cd9a5e945d3fa395571931a07c8d5abc9",
        "original_commit_id": "caa7b2245e2323f21a04af9389042da38a2687c1",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yeah, it's definitely time for `lib/view_model.coffee` and `lib/view_models/{search, replace, etc}.coffee`\n",
        "created_at": "2014-03-19T06:32:44Z",
        "updated_at": "2014-03-25T17:52:31Z",
        "html_url": "https://github.com/atom/vim-mode/pull/184#discussion_r10738402",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/184",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10738402"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/184#discussion_r10738402"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/184"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10738531",
        "pull_request_review_id": null,
        "id": 10738531,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzM4NTMx",
        "diff_hunk": "@@ -0,0 +1,214 @@\n+VimCommandModeInputView = require './vim-command-mode-input-view'\n+{Point, Range} = require 'atom'\n+_ = require 'underscore-plus'\n+\n+# Public: Base class for all view models; a view model\n+#         is the model attached to a VimCommandModeInputView\n+#         which is used when a given operator, motion, etc\n+#         needs extra keystroke.\n+#\n+# Ivars:\n+#\n+#   @completionCommand - if set will automatically be triggered on the editorView\n+#                        when the `confirm` method is called on the view model\n+#\n+#   @value - automatically set to the value of typed into the `VimCommandModeInputView`\n+#            when the `confirm` method is called\n+#\n+class ViewModel\n+  # Public: Override this in subclasses for custom initialization\n+  #\n+  # operator - An operator, motion, prefix, etc with `@editorView` and `@state` set\n+  #\n+  # opts - the options to be passed to `VimCommandModeInputView`\n+  #\n+  constructor: (@operator, opts = {}) ->\n+    @editorView        = @operator.editorView\n+    @vimState          = @operator.state\n+\n+    @view = new VimCommandModeInputView(@, opts)\n+    @editorView.editor.commandModeInputView = @view\n+\n+  # Public: Override this in subclasses for custom behavior when the `VimCommandModeInputView`\n+  #         has called `confirm`, optionally call super to get the default behavior of setting\n+  #         `@value` and triggering `@completionCommand`, if set\n+  #\n+  # view - the `VimCommandModeInputView` that called this method\n+  #\n+  confirm: (view) ->\n+    @value = @view.value\n+    @editorView.trigger(@completionCommand) if @completionCommand?\n+\n+class ReplaceViewModel extends ViewModel\n+  constructor: (@replaceOperator) ->\n+    super(@replaceOperator, class: 'replace', hidden: true, singleChar: true)\n+    @completionCommand = 'vim-mode:replace-complete'\n+\n+\n+class SearchViewModel extends ViewModel\n+  constructor: (@searchMotion) ->",
        "path": "lib/view-models.coffee",
        "position": null,
        "original_position": 49,
        "commit_id": "6481898cd9a5e945d3fa395571931a07c8d5abc9",
        "original_commit_id": "caa7b2245e2323f21a04af9389042da38a2687c1",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "To answer your _why_ a file per model, this one is neither boilerplate nor trivial. Likewise `Find` and `MoveToMark`. We only want to put a lot of classes into one file if, like the basic motions and operators, they're just a few lines long. It's easy to see how they differ.\n\nThat's why we broke them out into view models instead of stuffing all this logic into `motions.coffee` and `operators.coffee` in the first place. If all of these were as simple as `Mark` and `Replace` it'd be fine to have them  all here, I think.\n",
        "created_at": "2014-03-19T06:43:23Z",
        "updated_at": "2014-03-25T17:52:31Z",
        "html_url": "https://github.com/atom/vim-mode/pull/184#discussion_r10738531",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/184",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10738531"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/184#discussion_r10738531"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/184"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10761160",
        "pull_request_review_id": null,
        "id": 10761160,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzYxMTYw",
        "diff_hunk": "@@ -135,17 +144,18 @@ class VimState\n       'register-prefix': (e) => @registerPrefix(e)\n       'repeat-prefix': (e) => @repeatPrefix(e)\n       'repeat': (e) => new operators.Repeat(@editor, @)\n-      'search-complete': (e) => @currentSearch\n-      'replace-complete': (e) => @currentReplace\n-      'repeat-search': (e) => @currentSearch.repeat() if @currentSearch?\n-      'repeat-search-backwards': (e) => @currentSearch.repeat(backwards: true) if @currentSearch?\n+      'search-complete': (e) => @currentOperators.search\n+      'replace-complete': (e) => @currentOperators.replace\n+      'repeat-search': (e) => @currentOperators.search.repeat() if @currentOperators.search?",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 59,
        "commit_id": "6481898cd9a5e945d3fa395571931a07c8d5abc9",
        "original_commit_id": "caa7b2245e2323f21a04af9389042da38a2687c1",
        "user": {
            "login": "nathansobo",
            "id": 1789,
            "node_id": "MDQ6VXNlcjE3ODk=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1789?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nathansobo",
            "html_url": "https://github.com/nathansobo",
            "followers_url": "https://api.github.com/users/nathansobo/followers",
            "following_url": "https://api.github.com/users/nathansobo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nathansobo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nathansobo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nathansobo/subscriptions",
            "organizations_url": "https://api.github.com/users/nathansobo/orgs",
            "repos_url": "https://api.github.com/users/nathansobo/repos",
            "events_url": "https://api.github.com/users/nathansobo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nathansobo/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Can we use the `opStack` for this? This is rough thinking, but it seems like we could have an \"input-pending mode\" and a \"character-pending mode\". In input-pending, we're just looking for an \"vim-mode:input-complete\" command. In character-pending, the next typed character is automatically pushed to the stack as a `CharacterInput` operation. It composes with the `t` or `f` command below it, and voila.\n",
        "created_at": "2014-03-19T17:39:35Z",
        "updated_at": "2014-03-25T17:52:31Z",
        "html_url": "https://github.com/atom/vim-mode/pull/184#discussion_r10761160",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/184",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10761160"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/184#discussion_r10761160"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/184"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10762614",
        "pull_request_review_id": null,
        "id": 10762614,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzYyNjE0",
        "diff_hunk": "@@ -135,17 +144,18 @@ class VimState\n       'register-prefix': (e) => @registerPrefix(e)\n       'repeat-prefix': (e) => @repeatPrefix(e)\n       'repeat': (e) => new operators.Repeat(@editor, @)\n-      'search-complete': (e) => @currentSearch\n-      'replace-complete': (e) => @currentReplace\n-      'repeat-search': (e) => @currentSearch.repeat() if @currentSearch?\n-      'repeat-search-backwards': (e) => @currentSearch.repeat(backwards: true) if @currentSearch?\n+      'search-complete': (e) => @currentOperators.search\n+      'replace-complete': (e) => @currentOperators.replace\n+      'repeat-search': (e) => @currentOperators.search.repeat() if @currentOperators.search?",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 59,
        "commit_id": "6481898cd9a5e945d3fa395571931a07c8d5abc9",
        "original_commit_id": "caa7b2245e2323f21a04af9389042da38a2687c1",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "A little discussion has led me to believe you're right. Currently, if we abort a replace, find, or etc, we don't clear the whole op stack, like vim does, just the currently-being-created operation. The difference in behavior between vim and atom for `dr<esc>d` shows this: vim waits for more input, atom deletes a line.\n\nThe right solution is probably to go ahead and use the op stack, but it requires getting cancellations to bubble up all the way up. If we wanted to leave that for a later pull, I think that would be okay.\n",
        "created_at": "2014-03-19T18:04:45Z",
        "updated_at": "2014-03-25T17:52:31Z",
        "html_url": "https://github.com/atom/vim-mode/pull/184#discussion_r10762614",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/184",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10762614"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/184#discussion_r10762614"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/184"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10764484",
        "pull_request_review_id": null,
        "id": 10764484,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzY0NDg0",
        "diff_hunk": "@@ -135,17 +144,18 @@ class VimState\n       'register-prefix': (e) => @registerPrefix(e)\n       'repeat-prefix': (e) => @repeatPrefix(e)\n       'repeat': (e) => new operators.Repeat(@editor, @)\n-      'search-complete': (e) => @currentSearch\n-      'replace-complete': (e) => @currentReplace\n-      'repeat-search': (e) => @currentSearch.repeat() if @currentSearch?\n-      'repeat-search-backwards': (e) => @currentSearch.repeat(backwards: true) if @currentSearch?\n+      'search-complete': (e) => @currentOperators.search\n+      'replace-complete': (e) => @currentOperators.replace\n+      'repeat-search': (e) => @currentOperators.search.repeat() if @currentOperators.search?",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 59,
        "commit_id": "6481898cd9a5e945d3fa395571931a07c8d5abc9",
        "original_commit_id": "caa7b2245e2323f21a04af9389042da38a2687c1",
        "user": {
            "login": "nathansobo",
            "id": 1789,
            "node_id": "MDQ6VXNlcjE3ODk=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1789?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nathansobo",
            "html_url": "https://github.com/nathansobo",
            "followers_url": "https://api.github.com/users/nathansobo/followers",
            "following_url": "https://api.github.com/users/nathansobo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nathansobo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nathansobo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nathansobo/subscriptions",
            "organizations_url": "https://api.github.com/users/nathansobo/orgs",
            "repos_url": "https://api.github.com/users/nathansobo/repos",
            "events_url": "https://api.github.com/users/nathansobo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nathansobo/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Sounds good. We can come back to it.\n",
        "created_at": "2014-03-19T18:37:45Z",
        "updated_at": "2014-03-25T17:52:31Z",
        "html_url": "https://github.com/atom/vim-mode/pull/184#discussion_r10764484",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/184",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10764484"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/184#discussion_r10764484"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/184"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10768803",
        "pull_request_review_id": null,
        "id": 10768803,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzY4ODAz",
        "diff_hunk": "@@ -135,17 +144,18 @@ class VimState\n       'register-prefix': (e) => @registerPrefix(e)\n       'repeat-prefix': (e) => @repeatPrefix(e)\n       'repeat': (e) => new operators.Repeat(@editor, @)\n-      'search-complete': (e) => @currentSearch\n-      'replace-complete': (e) => @currentReplace\n-      'repeat-search': (e) => @currentSearch.repeat() if @currentSearch?\n-      'repeat-search-backwards': (e) => @currentSearch.repeat(backwards: true) if @currentSearch?\n+      'search-complete': (e) => @currentOperators.search\n+      'replace-complete': (e) => @currentOperators.replace\n+      'repeat-search': (e) => @currentOperators.search.repeat() if @currentOperators.search?",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 59,
        "commit_id": "6481898cd9a5e945d3fa395571931a07c8d5abc9",
        "original_commit_id": "caa7b2245e2323f21a04af9389042da38a2687c1",
        "user": {
            "login": "danzimm",
            "id": 166757,
            "node_id": "MDQ6VXNlcjE2Njc1Nw==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/166757?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/danzimm",
            "html_url": "https://github.com/danzimm",
            "followers_url": "https://api.github.com/users/danzimm/followers",
            "following_url": "https://api.github.com/users/danzimm/following{/other_user}",
            "gists_url": "https://api.github.com/users/danzimm/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/danzimm/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/danzimm/subscriptions",
            "organizations_url": "https://api.github.com/users/danzimm/orgs",
            "repos_url": "https://api.github.com/users/danzimm/repos",
            "events_url": "https://api.github.com/users/danzimm/events{/privacy}",
            "received_events_url": "https://api.github.com/users/danzimm/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "So I have finished changing the things @bhuga suggested and am taking a stab at what @nathansobo suggested. I like your idea of putting everything onto the opStack. As of right now I have characterInput successfully implemented (for operations that require one character) and am about to ensure stringInput for operations like Search works\n\nLet me know if this is ok or if I should drop it\n",
        "created_at": "2014-03-19T20:05:14Z",
        "updated_at": "2014-03-25T17:52:31Z",
        "html_url": "https://github.com/atom/vim-mode/pull/184#discussion_r10768803",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/184",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10768803"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/184#discussion_r10768803"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/184"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10768965",
        "pull_request_review_id": null,
        "id": 10768965,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzY4OTY1",
        "diff_hunk": "@@ -135,17 +144,18 @@ class VimState\n       'register-prefix': (e) => @registerPrefix(e)\n       'repeat-prefix': (e) => @repeatPrefix(e)\n       'repeat': (e) => new operators.Repeat(@editor, @)\n-      'search-complete': (e) => @currentSearch\n-      'replace-complete': (e) => @currentReplace\n-      'repeat-search': (e) => @currentSearch.repeat() if @currentSearch?\n-      'repeat-search-backwards': (e) => @currentSearch.repeat(backwards: true) if @currentSearch?\n+      'search-complete': (e) => @currentOperators.search\n+      'replace-complete': (e) => @currentOperators.replace\n+      'repeat-search': (e) => @currentOperators.search.repeat() if @currentOperators.search?",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 59,
        "commit_id": "6481898cd9a5e945d3fa395571931a07c8d5abc9",
        "original_commit_id": "caa7b2245e2323f21a04af9389042da38a2687c1",
        "user": {
            "login": "nathansobo",
            "id": 1789,
            "node_id": "MDQ6VXNlcjE3ODk=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1789?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nathansobo",
            "html_url": "https://github.com/nathansobo",
            "followers_url": "https://api.github.com/users/nathansobo/followers",
            "following_url": "https://api.github.com/users/nathansobo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nathansobo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nathansobo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nathansobo/subscriptions",
            "organizations_url": "https://api.github.com/users/nathansobo/orgs",
            "repos_url": "https://api.github.com/users/nathansobo/repos",
            "events_url": "https://api.github.com/users/nathansobo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nathansobo/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "If you're excited to try it I wouldn't want to stand in your way. Use your best judgment about the granularity of the PR, but I think it's reasonable to address it as part of a general cleanup if you want to.\n",
        "created_at": "2014-03-19T20:09:03Z",
        "updated_at": "2014-03-25T17:52:31Z",
        "html_url": "https://github.com/atom/vim-mode/pull/184#discussion_r10768965",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/184",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10768965"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/184#discussion_r10768965"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/184"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10770505",
        "pull_request_review_id": null,
        "id": 10770505,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzcwNTA1",
        "diff_hunk": "@@ -135,17 +144,18 @@ class VimState\n       'register-prefix': (e) => @registerPrefix(e)\n       'repeat-prefix': (e) => @repeatPrefix(e)\n       'repeat': (e) => new operators.Repeat(@editor, @)\n-      'search-complete': (e) => @currentSearch\n-      'replace-complete': (e) => @currentReplace\n-      'repeat-search': (e) => @currentSearch.repeat() if @currentSearch?\n-      'repeat-search-backwards': (e) => @currentSearch.repeat(backwards: true) if @currentSearch?\n+      'search-complete': (e) => @currentOperators.search\n+      'replace-complete': (e) => @currentOperators.replace\n+      'repeat-search': (e) => @currentOperators.search.repeat() if @currentOperators.search?",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 59,
        "commit_id": "6481898cd9a5e945d3fa395571931a07c8d5abc9",
        "original_commit_id": "caa7b2245e2323f21a04af9389042da38a2687c1",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'm :+1: if you want to hit it in this PR. Just be sure to add a test for something like `dr<esc>d` (should not delete a line).\n",
        "created_at": "2014-03-19T20:42:31Z",
        "updated_at": "2014-03-25T17:52:31Z",
        "html_url": "https://github.com/atom/vim-mode/pull/184#discussion_r10770505",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/184",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10770505"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/184#discussion_r10770505"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/184"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10808257",
        "pull_request_review_id": null,
        "id": 10808257,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODA4MjU3",
        "diff_hunk": "@@ -104,6 +109,16 @@ describe \"VimState\", ->\n         it \"allows the cursor to be placed on the \\n character\", ->\n           expect(editor.getCursorScreenPosition()).toEqual [1, 0]\n \n+    describe 'with character-input operations', ->\n+      beforeEach -> editor.setText('012345\\nabcdef')\n+\n+      it 'properly clears the opStack', ->",
        "path": "spec/vim-state-spec.coffee",
        "position": 19,
        "original_position": 19,
        "commit_id": "6481898cd9a5e945d3fa395571931a07c8d5abc9",
        "original_commit_id": "589041a51e37b8b9aae8e8c63245b211785658d4",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": ":heart:\n",
        "created_at": "2014-03-20T18:10:16Z",
        "updated_at": "2014-03-25T17:52:31Z",
        "html_url": "https://github.com/atom/vim-mode/pull/184#discussion_r10808257",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/184",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10808257"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/184#discussion_r10808257"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/184"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10850467",
        "pull_request_review_id": null,
        "id": 10850467,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODUwNDY3",
        "diff_hunk": "@@ -0,0 +1,52 @@\n+VimCommandModeInputView = require './vim-command-mode-input-view'\n+\n+module.exports =\n+# Public: Base class for all view models; a view model\n+#         is the model attached to a VimCommandModeInputView\n+#         which is used when a given operator, motion\n+#         needs extra keystroke.\n+#\n+# Ivars:\n+#\n+#   @completionCommand - if set will automatically be triggered on the editorView\n+#                        when the `confirm` method is called on the view model\n+#\n+#   @value - automatically set to the value of typed into the `VimCommandModeInputView`\n+#            when the `confirm` method is called\n+#\n+class ViewModel\n+  # Public: Override this in subclasses for custom initialization\n+  #\n+  # operator - An operator, motion, prefix, etc with `@editorView` and `@state` set\n+  #\n+  # opts - the options to be passed to `VimCommandModeInputView`\n+  #\n+  constructor: (@operator, opts={}) ->\n+    @editorView = @operator.editorView\n+    @vimState   = @operator.vimState ? @operator.state # so motions seem to have .state defined\n+                                                       # and operators have .vimState\n+                                                       # can we change this to be uniform across\n+                                                       # all types of operators?\n+\n+    @view = new VimCommandModeInputView(@, opts)\n+    @editorView.editor.commandModeInputView = @view\n+\n+  # Public: Override this in subclasses for custom behavior when the `VimCommandModeInputView`\n+  #         has called `confirm`, optionally call super to get the default behavior of setting\n+  #         `@value` and triggering `@completionCommand`, if set\n+  #\n+  # view - the `VimCommandModeInputView` that called this method\n+  #\n+  confirm: (view) ->\n+    @vimState.pushOperations(new Input(@view.value))\n+\n+  cancel: (view) ->\n+    if not view?",
        "path": "lib/view-models/view-model.coffee",
        "position": null,
        "original_position": 44,
        "commit_id": "6481898cd9a5e945d3fa395571931a07c8d5abc9",
        "original_commit_id": "54e5e5c51c9e25157faef8bcb514e608c6ad714b",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "maybe `unless view?`\n",
        "created_at": "2014-03-21T19:16:43Z",
        "updated_at": "2014-03-25T17:52:31Z",
        "html_url": "https://github.com/atom/vim-mode/pull/184#discussion_r10850467",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/184",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10850467"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/184#discussion_r10850467"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/184"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10850646",
        "pull_request_review_id": null,
        "id": 10850646,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODUwNjQ2",
        "diff_hunk": "@@ -183,6 +185,24 @@ class VimState\n       if @mode is 'visual' and (operation instanceof Motions.Motion or operation instanceof TextObjects.TextObject)\n         operation.execute = operation.select\n \n+      # if we have started an operation that responds to canComposeWith check if it can compose\n+      # with the operation we're going to push onto the stack\n+      if (topOp = @topOperation())? and topOp.canComposeWith? and not topOp.canComposeWith(operation)\n+        # if the operation is an input operation then cancel its input\n+        if operation.viewModel?\n+          operation.viewModel.cancel()\n+        # so personally I feel like I should be calling @resetCommandMode() but that doesn't\n+        # actually kick us out of operator-pending mode. This in fact might be a bug over when we\n+        # catch an Operator/Motion error in the processOpStack function (it only calls",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 80,
        "commit_id": "6481898cd9a5e945d3fa395571931a07c8d5abc9",
        "original_commit_id": "54e5e5c51c9e25157faef8bcb514e608c6ad714b",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "If you have questions/comments like this, it's usually best to keep them out of the code and comment on your own stuff in the pull. These comments will have to go, however this lands.\n",
        "created_at": "2014-03-21T19:21:00Z",
        "updated_at": "2014-03-25T17:52:31Z",
        "html_url": "https://github.com/atom/vim-mode/pull/184#discussion_r10850646",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/184",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10850646"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/184#discussion_r10850646"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/184"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10850668",
        "pull_request_review_id": null,
        "id": 10850668,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODUwNjY4",
        "diff_hunk": "@@ -183,6 +185,24 @@ class VimState\n       if @mode is 'visual' and (operation instanceof Motions.Motion or operation instanceof TextObjects.TextObject)\n         operation.execute = operation.select\n \n+      # if we have started an operation that responds to canComposeWith check if it can compose\n+      # with the operation we're going to push onto the stack\n+      if (topOp = @topOperation())? and topOp.canComposeWith? and not topOp.canComposeWith(operation)\n+        # if the operation is an input operation then cancel its input\n+        if operation.viewModel?\n+          operation.viewModel.cancel()",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 77,
        "commit_id": "6481898cd9a5e945d3fa395571931a07c8d5abc9",
        "original_commit_id": "54e5e5c51c9e25157faef8bcb514e608c6ad714b",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I don't like reaching into the view model here. let's make this a method on operation.\n",
        "created_at": "2014-03-21T19:21:27Z",
        "updated_at": "2014-03-25T17:52:31Z",
        "html_url": "https://github.com/atom/vim-mode/pull/184#discussion_r10850668",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/184",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10850668"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/184#discussion_r10850668"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/184"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10851274",
        "pull_request_review_id": null,
        "id": 10851274,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODUxMjc0",
        "diff_hunk": "@@ -183,6 +185,24 @@ class VimState\n       if @mode is 'visual' and (operation instanceof Motions.Motion or operation instanceof TextObjects.TextObject)\n         operation.execute = operation.select\n \n+      # if we have started an operation that responds to canComposeWith check if it can compose\n+      # with the operation we're going to push onto the stack\n+      if (topOp = @topOperation())? and topOp.canComposeWith? and not topOp.canComposeWith(operation)\n+        # if the operation is an input operation then cancel its input\n+        if operation.viewModel?\n+          operation.viewModel.cancel()\n+        # so personally I feel like I should be calling @resetCommandMode() but that doesn't\n+        # actually kick us out of operator-pending mode. This in fact might be a bug over when we\n+        # catch an Operator/Motion error in the processOpStack function (it only calls",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 80,
        "commit_id": "6481898cd9a5e945d3fa395571931a07c8d5abc9",
        "original_commit_id": "54e5e5c51c9e25157faef8bcb514e608c6ad714b",
        "user": {
            "login": "danzimm",
            "id": 166757,
            "node_id": "MDQ6VXNlcjE2Njc1Nw==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/166757?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/danzimm",
            "html_url": "https://github.com/danzimm",
            "followers_url": "https://api.github.com/users/danzimm/followers",
            "following_url": "https://api.github.com/users/danzimm/following{/other_user}",
            "gists_url": "https://api.github.com/users/danzimm/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/danzimm/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/danzimm/subscriptions",
            "organizations_url": "https://api.github.com/users/danzimm/orgs",
            "repos_url": "https://api.github.com/users/danzimm/repos",
            "events_url": "https://api.github.com/users/danzimm/events{/privacy}",
            "received_events_url": "https://api.github.com/users/danzimm/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I meant to leave that in there only as a personal note and not commit it, my apologies!\n",
        "created_at": "2014-03-21T19:37:06Z",
        "updated_at": "2014-03-25T17:52:31Z",
        "html_url": "https://github.com/atom/vim-mode/pull/184#discussion_r10851274",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/184",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10851274"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/184#discussion_r10851274"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/184"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10909212",
        "pull_request_review_id": null,
        "id": 10909212,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTA5MjEy",
        "diff_hunk": "@@ -1,7 +1,12 @@\n _ = require 'underscore-plus'\n {$$, Point, Range} = require 'atom'\n-SearchViewModel = require './search-view-model'\n-MoveToMarkViewModel = require './move-to-mark-view-model'\n+SearchViewModel = require './view-models/search'",
        "path": "lib/motions.coffee",
        "position": null,
        "original_position": 5,
        "commit_id": "6481898cd9a5e945d3fa395571931a07c8d5abc9",
        "original_commit_id": "770ee8aabb103522d23a84fde08062642e4e4eeb",
        "user": {
            "login": "nathansobo",
            "id": 1789,
            "node_id": "MDQ6VXNlcjE3ODk=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1789?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nathansobo",
            "html_url": "https://github.com/nathansobo",
            "followers_url": "https://api.github.com/users/nathansobo/followers",
            "following_url": "https://api.github.com/users/nathansobo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nathansobo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nathansobo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nathansobo/subscriptions",
            "organizations_url": "https://api.github.com/users/nathansobo/orgs",
            "repos_url": "https://api.github.com/users/nathansobo/repos",
            "events_url": "https://api.github.com/users/nathansobo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nathansobo/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "I know it's a bit redundant, but I'd prefer if the file name matched the class name on these view models: `search-view-model`, etc.\n",
        "created_at": "2014-03-24T22:12:11Z",
        "updated_at": "2014-03-25T17:52:31Z",
        "html_url": "https://github.com/atom/vim-mode/pull/184#discussion_r10909212",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/184",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10909212"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/184#discussion_r10909212"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/184"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10909297",
        "pull_request_review_id": null,
        "id": 10909297,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTA5Mjk3",
        "diff_hunk": "@@ -0,0 +1,42 @@\n+{Point, Range} = require 'atom'\n+ViewModel = require './view-model'\n+\n+module.exports =\n+class FindViewModel extends ViewModel\n+  constructor: (@findMotion) ->\n+    super(@findMotion, class: 'find', singleChar: true, hidden: true)\n+    @reversed = false\n+\n+  reverse: -> @reversed = !@reversed\n+\n+  match: (count) ->\n+    currentPosition = @editorView.editor.getCursorBufferPosition()\n+    line = @editorView.editor.lineForBufferRow(currentPosition.row)\n+    if @reversed\n+      index = currentPosition.column\n+      for i in [0..count-1]\n+        index = line.lastIndexOf(@value, index-1)\n+      if index != -1\n+        point = new Point(currentPosition.row, index)\n+        return {} =\n+          point: point\n+          range: new Range(point, currentPosition)\n+    else\n+      index = currentPosition.column\n+      for i in [0..count-1]\n+        index = line.indexOf(@value, index+1)\n+      if index != -1\n+        point = new Point(currentPosition.row, index)\n+        return {} =\n+          point: point\n+          range: new Range(currentPosition, point.translate([0,1]))\n+\n+  execute: (@value, count) ->",
        "path": "lib/view-models/find.coffee",
        "position": null,
        "original_position": 34,
        "commit_id": "6481898cd9a5e945d3fa395571931a07c8d5abc9",
        "original_commit_id": "770ee8aabb103522d23a84fde08062642e4e4eeb",
        "user": {
            "login": "nathansobo",
            "id": 1789,
            "node_id": "MDQ6VXNlcjE3ODk=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1789?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nathansobo",
            "html_url": "https://github.com/nathansobo",
            "followers_url": "https://api.github.com/users/nathansobo/followers",
            "following_url": "https://api.github.com/users/nathansobo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nathansobo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nathansobo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nathansobo/subscriptions",
            "organizations_url": "https://api.github.com/users/nathansobo/orgs",
            "repos_url": "https://api.github.com/users/nathansobo/repos",
            "events_url": "https://api.github.com/users/nathansobo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nathansobo/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Why is execute on the view model instead of on the operation itself? Seems to me the view model's job is to tell the operation what to search for, but that search should occur within the operation.\n",
        "created_at": "2014-03-24T22:15:01Z",
        "updated_at": "2014-03-25T17:52:31Z",
        "html_url": "https://github.com/atom/vim-mode/pull/184#discussion_r10909297",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/184",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10909297"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/184#discussion_r10909297"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/184"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10909445",
        "pull_request_review_id": null,
        "id": 10909445,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTA5NDQ1",
        "diff_hunk": "@@ -0,0 +1,42 @@\n+{Point, Range} = require 'atom'\n+ViewModel = require './view-model'\n+\n+module.exports =\n+class FindViewModel extends ViewModel\n+  constructor: (@findMotion) ->\n+    super(@findMotion, class: 'find', singleChar: true, hidden: true)\n+    @reversed = false\n+\n+  reverse: -> @reversed = !@reversed\n+\n+  match: (count) ->\n+    currentPosition = @editorView.editor.getCursorBufferPosition()\n+    line = @editorView.editor.lineForBufferRow(currentPosition.row)\n+    if @reversed\n+      index = currentPosition.column\n+      for i in [0..count-1]\n+        index = line.lastIndexOf(@value, index-1)\n+      if index != -1\n+        point = new Point(currentPosition.row, index)\n+        return {} =\n+          point: point\n+          range: new Range(point, currentPosition)\n+    else\n+      index = currentPosition.column\n+      for i in [0..count-1]\n+        index = line.indexOf(@value, index+1)\n+      if index != -1\n+        point = new Point(currentPosition.row, index)\n+        return {} =\n+          point: point\n+          range: new Range(currentPosition, point.translate([0,1]))\n+\n+  execute: (@value, count) ->",
        "path": "lib/view-models/find.coffee",
        "position": null,
        "original_position": 34,
        "commit_id": "6481898cd9a5e945d3fa395571931a07c8d5abc9",
        "original_commit_id": "770ee8aabb103522d23a84fde08062642e4e4eeb",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Maybe 'ViewModel' is the wrong name, but I like all this search-specific code here. `Operators.coffee` was getting unwieldy.\n",
        "created_at": "2014-03-24T22:18:40Z",
        "updated_at": "2014-03-25T17:52:31Z",
        "html_url": "https://github.com/atom/vim-mode/pull/184#discussion_r10909445",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/184",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10909445"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/184#discussion_r10909445"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/184"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10909664",
        "pull_request_review_id": null,
        "id": 10909664,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTA5NjY0",
        "diff_hunk": "@@ -0,0 +1,42 @@\n+{Point, Range} = require 'atom'\n+ViewModel = require './view-model'\n+\n+module.exports =\n+class FindViewModel extends ViewModel\n+  constructor: (@findMotion) ->\n+    super(@findMotion, class: 'find', singleChar: true, hidden: true)\n+    @reversed = false\n+\n+  reverse: -> @reversed = !@reversed\n+\n+  match: (count) ->\n+    currentPosition = @editorView.editor.getCursorBufferPosition()\n+    line = @editorView.editor.lineForBufferRow(currentPosition.row)\n+    if @reversed\n+      index = currentPosition.column\n+      for i in [0..count-1]\n+        index = line.lastIndexOf(@value, index-1)\n+      if index != -1\n+        point = new Point(currentPosition.row, index)\n+        return {} =\n+          point: point\n+          range: new Range(point, currentPosition)\n+    else\n+      index = currentPosition.column\n+      for i in [0..count-1]\n+        index = line.indexOf(@value, index+1)\n+      if index != -1\n+        point = new Point(currentPosition.row, index)\n+        return {} =\n+          point: point\n+          range: new Range(currentPosition, point.translate([0,1]))\n+\n+  execute: (@value, count) ->",
        "path": "lib/view-models/find.coffee",
        "position": null,
        "original_position": 34,
        "commit_id": "6481898cd9a5e945d3fa395571931a07c8d5abc9",
        "original_commit_id": "770ee8aabb103522d23a84fde08062642e4e4eeb",
        "user": {
            "login": "nathansobo",
            "id": 1789,
            "node_id": "MDQ6VXNlcjE3ODk=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1789?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nathansobo",
            "html_url": "https://github.com/nathansobo",
            "followers_url": "https://api.github.com/users/nathansobo/followers",
            "following_url": "https://api.github.com/users/nathansobo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nathansobo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nathansobo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nathansobo/subscriptions",
            "organizations_url": "https://api.github.com/users/nathansobo/orgs",
            "repos_url": "https://api.github.com/users/nathansobo/repos",
            "events_url": "https://api.github.com/users/nathansobo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nathansobo/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Maybe we should break out the operations then? It seems weird that the operation itself wouldn't take care of this. I think the difficulty naming this extra class may be due to that?\n",
        "created_at": "2014-03-24T22:24:06Z",
        "updated_at": "2014-03-25T17:52:31Z",
        "html_url": "https://github.com/atom/vim-mode/pull/184#discussion_r10909664",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/184",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10909664"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/184#discussion_r10909664"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/184"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10944414",
        "pull_request_review_id": null,
        "id": 10944414,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTQ0NDE0",
        "diff_hunk": "@@ -166,16 +165,19 @@ class VimState\n   # Private: Attempts to prevent the cursor from selecting the newline\n   # while in command mode.\n   #\n-  # FIXME: This doesn't work.\n+  # FIXME: This causes a ton of specs to just fail..\n   #\n   # Returns nothing.\n   moveCursorBeforeNewline: =>\n-    if not @editor.getSelection().modifyingSelection and @editor.cursor.isOnEOL() and @editor.getCurrentBufferLine().length > 0\n-      @editor.setCursorBufferColumn(@editor.getCurrentBufferLine().length - 1)",
        "path": "lib/vim-state.coffee",
        "position": 72,
        "original_position": 72,
        "commit_id": "6481898cd9a5e945d3fa395571931a07c8d5abc9",
        "original_commit_id": "6481898cd9a5e945d3fa395571931a07c8d5abc9",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Why this change in this diff?\n",
        "created_at": "2014-03-25T18:06:20Z",
        "updated_at": "2014-03-25T18:06:20Z",
        "html_url": "https://github.com/atom/vim-mode/pull/184#discussion_r10944414",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/184",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10944414"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/184#discussion_r10944414"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/184"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10944929",
        "pull_request_review_id": null,
        "id": 10944929,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTQ0OTI5",
        "diff_hunk": "@@ -166,16 +165,19 @@ class VimState\n   # Private: Attempts to prevent the cursor from selecting the newline\n   # while in command mode.\n   #\n-  # FIXME: This doesn't work.\n+  # FIXME: This causes a ton of specs to just fail..\n   #\n   # Returns nothing.\n   moveCursorBeforeNewline: =>\n-    if not @editor.getSelection().modifyingSelection and @editor.cursor.isOnEOL() and @editor.getCurrentBufferLine().length > 0\n-      @editor.setCursorBufferColumn(@editor.getCurrentBufferLine().length - 1)",
        "path": "lib/vim-state.coffee",
        "position": 72,
        "original_position": 72,
        "commit_id": "6481898cd9a5e945d3fa395571931a07c8d5abc9",
        "original_commit_id": "6481898cd9a5e945d3fa395571931a07c8d5abc9",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It looks like the code you've commented out actually fixes the cursor behavior, but let's not fix the broken tests right now. I see what you're doing. :+1:.\n",
        "created_at": "2014-03-25T18:16:26Z",
        "updated_at": "2014-03-25T18:16:26Z",
        "html_url": "https://github.com/atom/vim-mode/pull/184#discussion_r10944929",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/184",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10944929"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/184#discussion_r10944929"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/184"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/11566125",
        "pull_request_review_id": null,
        "id": 11566125,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTY2MTI1",
        "diff_hunk": "@@ -375,9 +375,28 @@ describe \"Operators\", ->\n         keydown('p')\n \n       it \"inserts the contents of the default register\", ->\n-        expect(editor.getText()).toBe \"012\\n 345\\n\"\n+        expect(editor.getText()).toBe \"012\\n 345\"\n         expect(editor.getCursorScreenPosition()).toEqual [1, 1]\n \n+      describe \"at the middle line\", ->\n+        beforeEach ->\n+          vimState.setRegister('\"', text: \" 456\\n\", type: 'linewise')",
        "path": "spec/operators-spec.coffee",
        "position": null,
        "original_position": 10,
        "commit_id": "278fc84e6804304304d92fb0059636e0d6aa01a4",
        "original_commit_id": "e0ddb11d9cd7a6112c8690aaa295d16a03aab3a6",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I really want an integration test of the issues you're solving. Something that sets up an editor, yanks a line, moves, and pastes it. This test will continue to work if we broke the behavior of yank to not include a newline or something silly like that.\n",
        "created_at": "2014-04-13T17:44:57Z",
        "updated_at": "2014-04-13T17:57:39Z",
        "html_url": "https://github.com/atom/vim-mode/pull/205#discussion_r11566125",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/205",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/11566125"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/205#discussion_r11566125"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/205"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/11566135",
        "pull_request_review_id": null,
        "id": 11566135,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTY2MTM1",
        "diff_hunk": "@@ -21,6 +21,14 @@ class Put extends Operator\n     {text, type} = @vimState.getRegister(@register) || {}\n     return unless text\n \n+    textToInsert = _.times(count, -> text).join('')\n+    if type == 'linewise'",
        "path": "lib/operators/put-operator.coffee",
        "position": null,
        "original_position": 5,
        "commit_id": "278fc84e6804304304d92fb0059636e0d6aa01a4",
        "original_commit_id": "e0ddb11d9cd7a6112c8690aaa295d16a03aab3a6",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Can we document what this little block is doing? something like `# Clean up some corner cases on the last line of the file` or something.\n",
        "created_at": "2014-04-13T17:46:53Z",
        "updated_at": "2014-04-13T17:57:39Z",
        "html_url": "https://github.com/atom/vim-mode/pull/205#discussion_r11566135",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/205",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/11566135"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/205#discussion_r11566135"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/205"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/11376742",
        "pull_request_review_id": null,
        "id": 11376742,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzc2NzQy",
        "diff_hunk": "@@ -72,3 +67,41 @@ class Search extends MotionWithInput\n     after = after.reverse() if @reverse\n \n     @matches = after\n+\n+\n+class Search extends BasicSearch\n+  constructor: (@editorView, @vimState) ->\n+    super(@editorView, @vimState)\n+    @viewModel = new SearchViewModel(@)\n+    Search.currentSearch = @\n+    @reverse = @initiallyReversed = false\n+\n+  compose: (input) ->\n+    super(input)\n+    @viewModel.value = @input.characters\n+\n+class SearchCurrentWord extends BasicSearch\n+  constructor: (@editorView, @vimState) ->\n+    super(@editorView, @vimState)\n+    Search.currentSearch = @\n+    @reverse = @initiallyReversed = false\n+    @input = new Input(@getCurrentWordMatch())\n+\n+  getCurrentWord: ->\n+    wordRange  = @editor.getCursor().getCurrentWordBufferRange()",
        "path": "lib/motions/search-motion.coffee",
        "position": null,
        "original_position": 48,
        "commit_id": "234ad193b41f618ce99e5bd6a8f7aca037ed96cb",
        "original_commit_id": "f9afb9c58f40a56b6e030d07e834a608541fd495",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "extra space after wordRange\n",
        "created_at": "2014-04-08T05:28:53Z",
        "updated_at": "2014-04-14T07:34:19Z",
        "html_url": "https://github.com/atom/vim-mode/pull/197#discussion_r11376742",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/197",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/11376742"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/197#discussion_r11376742"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/197"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/11376780",
        "pull_request_review_id": null,
        "id": 11376780,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzc2Nzgw",
        "diff_hunk": "@@ -72,3 +67,41 @@ class Search extends MotionWithInput\n     after = after.reverse() if @reverse\n \n     @matches = after\n+\n+\n+class Search extends BasicSearch\n+  constructor: (@editorView, @vimState) ->\n+    super(@editorView, @vimState)\n+    @viewModel = new SearchViewModel(@)\n+    Search.currentSearch = @\n+    @reverse = @initiallyReversed = false\n+\n+  compose: (input) ->\n+    super(input)\n+    @viewModel.value = @input.characters\n+\n+class SearchCurrentWord extends BasicSearch\n+  constructor: (@editorView, @vimState) ->\n+    super(@editorView, @vimState)\n+    Search.currentSearch = @\n+    @reverse = @initiallyReversed = false\n+    @input = new Input(@getCurrentWordMatch())\n+\n+  getCurrentWord: ->\n+    wordRange  = @editor.getCursor().getCurrentWordBufferRange()\n+    @editor.getTextInBufferRange(wordRange)\n+\n+  getCurrentWordMatch: ->\n+    characters = @getCurrentWord()\n+    if /\\W/.test(characters) then \"#{characters}\\\\b\" else \"\\\\b#{characters}\\\\b\"\n+\n+  isOnWord: ->\n+    @getCurrentWord().length isnt 0\n+\n+  isComplete: -> true\n+\n+  execute: (count=1) ->\n+    super(count) if @isOnWord()\n+\n+",
        "path": "lib/motions/search-motion.coffee",
        "position": null,
        "original_position": 63,
        "commit_id": "234ad193b41f618ce99e5bd6a8f7aca037ed96cb",
        "original_commit_id": "f9afb9c58f40a56b6e030d07e834a608541fd495",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Extra newline\n",
        "created_at": "2014-04-08T05:30:52Z",
        "updated_at": "2014-04-14T07:34:19Z",
        "html_url": "https://github.com/atom/vim-mode/pull/197#discussion_r11376780",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/197",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/11376780"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/197#discussion_r11376780"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/197"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/11376794",
        "pull_request_review_id": null,
        "id": 11376794,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzc2Nzk0",
        "diff_hunk": "@@ -693,6 +693,100 @@ describe \"Motions\", ->\n         editor.commandModeInputView.editor.trigger('core:move-down')\n         expect(editor.commandModeInputView.editor.getText()).toEqual ''\n \n+  describe \"the * keybinding\", ->\n+    beforeEach ->\n+      editor.setText(\"abc\\n@def\\nabc\\ndef\\n\")\n+      editor.setCursorBufferPosition([0, 0])\n+\n+    describe \"as a motion\", ->\n+      it \"moves cursor to next occurence of word under cursor\", ->\n+        keydown(\"*\")\n+        expect(editor.getCursorBufferPosition()).toEqual [2, 0]\n+\n+      it \"doesn't move cursor unless next occurence is the exact word (no partial matches)\", ->\n+        editor.setText(\"abc\\ndef\\nghiabc\\njkl\\nabcdef\")\n+        editor.setCursorBufferPosition([0, 0])\n+        keydown(\"*\")\n+        expect(editor.getCursorBufferPosition()).toEqual [0, 0]\n+\n+      describe \"with words that containt 'non-word' characters\", ->\n+        it \"moves cursor to next occurence of word under cursor\", ->\n+          editor.setText(\"abc\\n@def\\nabc\\n@def\\n\")\n+          editor.setCursorBufferPosition([1, 0])\n+          keydown(\"*\")\n+          expect(editor.getCursorBufferPosition()).toEqual [3, 0]\n+\n+        it \"doesn't move cursor unless next match has exact word ending\", ->\n+          editor.setText(\"abc\\n@def\\nabc\\n@def1\\n\")\n+          # FIXME: I suspect there is a bug laying around\n+          # Cursor#getEndOfCurrentWordBufferPosition, this function\n+          # is returning '@' as a word, instead of returning the whole\n+          # word '@def', this behavior is avoid in this test, when we",
        "path": "spec/motions-spec.coffee",
        "position": null,
        "original_position": 32,
        "commit_id": "234ad193b41f618ce99e5bd6a8f7aca037ed96cb",
        "original_commit_id": "f9afb9c58f40a56b6e030d07e834a608541fd495",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "behavior is avoid_ed_\n",
        "created_at": "2014-04-08T05:31:42Z",
        "updated_at": "2014-04-14T07:34:19Z",
        "html_url": "https://github.com/atom/vim-mode/pull/197#discussion_r11376794",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/197",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/11376794"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/197#discussion_r11376794"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/197"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/11376810",
        "pull_request_review_id": null,
        "id": 11376810,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzc2ODEw",
        "diff_hunk": "@@ -693,6 +693,100 @@ describe \"Motions\", ->\n         editor.commandModeInputView.editor.trigger('core:move-down')\n         expect(editor.commandModeInputView.editor.getText()).toEqual ''\n \n+  describe \"the * keybinding\", ->\n+    beforeEach ->\n+      editor.setText(\"abc\\n@def\\nabc\\ndef\\n\")\n+      editor.setCursorBufferPosition([0, 0])\n+\n+    describe \"as a motion\", ->\n+      it \"moves cursor to next occurence of word under cursor\", ->\n+        keydown(\"*\")\n+        expect(editor.getCursorBufferPosition()).toEqual [2, 0]\n+\n+      it \"doesn't move cursor unless next occurence is the exact word (no partial matches)\", ->\n+        editor.setText(\"abc\\ndef\\nghiabc\\njkl\\nabcdef\")\n+        editor.setCursorBufferPosition([0, 0])\n+        keydown(\"*\")\n+        expect(editor.getCursorBufferPosition()).toEqual [0, 0]\n+\n+      describe \"with words that containt 'non-word' characters\", ->\n+        it \"moves cursor to next occurence of word under cursor\", ->\n+          editor.setText(\"abc\\n@def\\nabc\\n@def\\n\")\n+          editor.setCursorBufferPosition([1, 0])\n+          keydown(\"*\")\n+          expect(editor.getCursorBufferPosition()).toEqual [3, 0]\n+\n+        it \"doesn't move cursor unless next match has exact word ending\", ->\n+          editor.setText(\"abc\\n@def\\nabc\\n@def1\\n\")\n+          # FIXME: I suspect there is a bug laying around\n+          # Cursor#getEndOfCurrentWordBufferPosition, this function\n+          # is returning '@' as a word, instead of returning the whole\n+          # word '@def', this behavior is avoid in this test, when we\n+          # execute the '*' command when cursor is on character after '@'\n+          # (in this particular example, the 'd' char)",
        "path": "spec/motions-spec.coffee",
        "position": null,
        "original_position": 34,
        "commit_id": "234ad193b41f618ce99e5bd6a8f7aca037ed96cb",
        "original_commit_id": "f9afb9c58f40a56b6e030d07e834a608541fd495",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This is just a difference in behavior for the concept of 'word'. We'd have to rewrite the concept of 'get current word' to make it match vim. Maybe one day we can absolutely start this way.\n",
        "created_at": "2014-04-08T05:32:44Z",
        "updated_at": "2014-04-14T07:34:19Z",
        "html_url": "https://github.com/atom/vim-mode/pull/197#discussion_r11376810",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/197",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/11376810"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/197#discussion_r11376810"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/197"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/11376830",
        "pull_request_review_id": null,
        "id": 11376830,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzc2ODMw",
        "diff_hunk": "@@ -693,6 +693,100 @@ describe \"Motions\", ->\n         editor.commandModeInputView.editor.trigger('core:move-down')\n         expect(editor.commandModeInputView.editor.getText()).toEqual ''\n \n+  describe \"the * keybinding\", ->\n+    beforeEach ->\n+      editor.setText(\"abc\\n@def\\nabc\\ndef\\n\")\n+      editor.setCursorBufferPosition([0, 0])\n+\n+    describe \"as a motion\", ->\n+      it \"moves cursor to next occurence of word under cursor\", ->\n+        keydown(\"*\")\n+        expect(editor.getCursorBufferPosition()).toEqual [2, 0]\n+\n+      it \"doesn't move cursor unless next occurence is the exact word (no partial matches)\", ->\n+        editor.setText(\"abc\\ndef\\nghiabc\\njkl\\nabcdef\")\n+        editor.setCursorBufferPosition([0, 0])\n+        keydown(\"*\")\n+        expect(editor.getCursorBufferPosition()).toEqual [0, 0]\n+\n+      describe \"with words that containt 'non-word' characters\", ->\n+        it \"moves cursor to next occurence of word under cursor\", ->\n+          editor.setText(\"abc\\n@def\\nabc\\n@def\\n\")\n+          editor.setCursorBufferPosition([1, 0])\n+          keydown(\"*\")\n+          expect(editor.getCursorBufferPosition()).toEqual [3, 0]\n+\n+        it \"doesn't move cursor unless next match has exact word ending\", ->\n+          editor.setText(\"abc\\n@def\\nabc\\n@def1\\n\")\n+          # FIXME: I suspect there is a bug laying around\n+          # Cursor#getEndOfCurrentWordBufferPosition, this function\n+          # is returning '@' as a word, instead of returning the whole\n+          # word '@def', this behavior is avoid in this test, when we\n+          # execute the '*' command when cursor is on character after '@'\n+          # (in this particular example, the 'd' char)\n+          editor.setCursorBufferPosition([1, 1])\n+          keydown(\"*\")\n+          expect(editor.getCursorBufferPosition()).toEqual [1, 0]\n+\n+        it \"moves cursor to the start of valid word char\", ->\n+          editor.setText(\"abc\\ndef\\nabc\\n@def\\n\")\n+          editor.setCursorBufferPosition([1, 0])\n+          keydown(\"*\")\n+          expect(editor.getCursorBufferPosition()).toEqual [3, 1]\n+\n+      describe \"when cursor is on non-word char column\", ->\n+        it \"matches only the non-word char\", ->\n+          editor.setText(\"abc\\n@def\\nabc\\n@def\\n\")\n+          editor.setCursorBufferPosition([1, 0])\n+          keydown(\"*\")\n+          expect(editor.getCursorBufferPosition()).toEqual [3, 0]\n+\n+  # FIXME: for some reasons this tests are being skipped on test execution\n+  #\n+  #describe \"the # keybinding\", ->\n+  #  describe \"as a motion\", ->\n+  #    it \"moves cursor to next occurence of word under cursor\", ->\n+  #      editor.setText(\"abc\\n@def\\nabc\\ndef\\n\")\n+  #      editor.setCursorBufferPosition([2, 0])\n+  #      keydown(\"#\")\n+  #      expect(editor.getCursorBufferPosition()).toEqual [0, 0]\n+\n+  #    it \"doesn't move cursor unless next occurence is the exact word (no partial matches)\", ->\n+  #      editor.setText(\"abc\\ndef\\nghiabc\\njkl\\nabcdef\")\n+  #      editor.setCursorBufferPosition([0, 0])\n+  #      keydown(\"#\")\n+  #      expect(editor.getCursorBufferPosition()).toEqual [0, 0]\n+\n+  #    describe \"with words that containt 'non-word' characters\", ->\n+  #      it \"moves cursor to next occurence of word under cursor\", ->\n+  #        editor.setText(\"abc\\n@def\\nabc\\n@def\\n\")\n+  #        editor.setCursorBufferPosition([3, 0])\n+  #        keydown(\"#\")\n+  #        expect(editor.getCursorBufferPosition()).toEqual [1, 0]\n+\n+  #      it \"doesn't move cursor unless next match has exact word ending\", ->\n+  #        editor.setText(\"abc\\n@def\\nabc\\n@def1\\n\")\n+  #        editor.setCursorBufferPosition([3, 1])\n+  #        keydown(\"#\")\n+  #        expect(editor.getCursorBufferPosition()).toEqual [1, 0]\n+\n+  #      it \"moves cursor to the start of valid word char\", ->\n+  #        editor.setText(\"abc\\ndef\\nabc\\n@def\\n\")\n+  #        editor.setCursorBufferPosition([1, 0])\n+  #        keydown(\"#\")\n+  #        expect(editor.getCursorBufferPosition()).toEqual [3, 1]\n+\n+  #    describe \"when cursor is on non-word char column\", ->\n+  #      # NOTE: I suspect there is a bug laying around\n+  #      # Cursor#getEndOfCurrentWordBufferPosition, this function\n+  #      # is returning '@' as a word, instead of returning the whole\n+  #      # word '@def'",
        "path": "spec/motions-spec.coffee",
        "position": null,
        "original_position": 91,
        "commit_id": "234ad193b41f618ce99e5bd6a8f7aca037ed96cb",
        "original_commit_id": "f9afb9c58f40a56b6e030d07e834a608541fd495",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Let's not repeat this comment and a pending test. Just let things be documented on `*`. We can just add a one-line comment to the `*` comments to add a `#` test if it's ever fixed.\n",
        "created_at": "2014-04-08T05:33:56Z",
        "updated_at": "2014-04-14T07:34:19Z",
        "html_url": "https://github.com/atom/vim-mode/pull/197#discussion_r11376830",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/197",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/11376830"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/197#discussion_r11376830"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/197"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/11565720",
        "pull_request_review_id": null,
        "id": 11565720,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTY1NzIw",
        "diff_hunk": "@@ -1,20 +1,15 @@\n _ = require 'underscore-plus'\n {MotionWithInput} = require './general-motions'\n SearchViewModel = require '../view-models/search-view-model'\n+{Input} = require '../view-models/view-model'\n \n-module.exports =\n-class Search extends MotionWithInput\n+class Base extends MotionWithInput",
        "path": "lib/motions/search-motion.coffee",
        "position": null,
        "original_position": 8,
        "commit_id": "234ad193b41f618ce99e5bd6a8f7aca037ed96cb",
        "original_commit_id": "1fad5291604481c3cb1cfba82e32d8dca22d7a86",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think what we want here is `SearchBase`.\n",
        "created_at": "2014-04-13T16:35:19Z",
        "updated_at": "2014-04-14T07:34:19Z",
        "html_url": "https://github.com/atom/vim-mode/pull/197#discussion_r11565720",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/197",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/11565720"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/197#discussion_r11565720"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/197"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/11586635",
        "pull_request_review_id": null,
        "id": 11586635,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTg2NjM1",
        "diff_hunk": "@@ -2,19 +2,13 @@ _ = require 'underscore-plus'\n {MotionWithInput} = require './general-motions'\n SearchViewModel = require '../view-models/search-view-model'\n \n-module.exports =\n-class Search extends MotionWithInput\n+class SearchBase extends MotionWithInput",
        "path": "lib/motions/search-motion.coffee",
        "position": 6,
        "original_position": 6,
        "commit_id": "475ecd50805db1a7992a9091e09b8a35b0bfdb18",
        "original_commit_id": "475ecd50805db1a7992a9091e09b8a35b0bfdb18",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Love how this doesn't even get exported. Nice encapsulation.\n",
        "created_at": "2014-04-14T14:27:21Z",
        "updated_at": "2014-04-14T14:27:21Z",
        "html_url": "https://github.com/atom/vim-mode/pull/209#discussion_r11586635",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/209",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/11586635"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/209#discussion_r11586635"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/209"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/11565532",
        "pull_request_review_id": null,
        "id": 11565532,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTY1NTMy",
        "diff_hunk": "@@ -703,3 +703,20 @@ describe \"Operators\", ->\n       keydown('m')\n       commandModeInputKeydown('a')\n       expect(vimState.getMark('a')).toEqual [0,1]\n+\n+  describe 'the ~ keybinding', ->\n+    beforeEach ->\n+      editor.setText('aB12')\n+      editor.setCursorBufferPosition([0, 0])",
        "path": "spec/operators-spec.coffee",
        "position": null,
        "original_position": 8,
        "commit_id": "a861fb85ad22878c0b114d10c14b6d0aa9525261",
        "original_commit_id": "27a66a8486525ce327c0a3e80d8debef5a90c1cf",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "There should be a newline after this before block.\n",
        "created_at": "2014-04-13T15:36:56Z",
        "updated_at": "2014-04-16T07:47:05Z",
        "html_url": "https://github.com/atom/vim-mode/pull/207#discussion_r11565532",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/207",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/11565532"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/207#discussion_r11565532"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/207"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/11565537",
        "pull_request_review_id": null,
        "id": 11565537,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTY1NTM3",
        "diff_hunk": "@@ -98,7 +98,25 @@ class Delete extends Operator\n       @editor.setCursorScreenPosition([cursor.getScreenRow(), 0])\n \n     @vimState.activateCommandMode()\n+#\n+# It toggles the case of everything selected by the following motion\n+#\n+class ToggleCase extends Operator\n+  allowEOL: null\n+\n+  constructor: (@editor, @vimState, {@selectOptions}={}) -> @complete = true",
        "path": "lib/operators/general-operators.coffee",
        "position": null,
        "original_position": 17,
        "commit_id": "a861fb85ad22878c0b114d10c14b6d0aa9525261",
        "original_commit_id": "27a66a8486525ce327c0a3e80d8debef5a90c1cf",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "newline after this constructor, please\n",
        "created_at": "2014-04-13T15:39:16Z",
        "updated_at": "2014-04-16T07:47:05Z",
        "html_url": "https://github.com/atom/vim-mode/pull/207#discussion_r11565537",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/207",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/11565537"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/207#discussion_r11565537"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/207"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/11661472",
        "pull_request_review_id": null,
        "id": 11661472,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNjYxNDcy",
        "diff_hunk": "@@ -98,7 +98,37 @@ class Delete extends Operator\n       @editor.setCursorScreenPosition([cursor.getScreenRow(), 0])\n \n     @vimState.activateCommandMode()\n+#\n+# It toggles the case of everything selected by the following motion\n+#\n+class ToggleCase extends Operator\n+\n+  constructor: (@editor, @vimState, {@selectOptions}={}) -> @complete = true\n+\n+  execute: (count=1) ->\n+    pos = @editor.getCursorBufferPosition()\n+    currentRowLength = @editor.lineLengthForBufferRow(pos.row)\n+    lastCharIndex = @editor.getBuffer().lineForRow(pos.row).length - 1\n+\n+    # Do nothing on an empty line\n+    return unless currentRowLength > 0\n \n+    @undoTransaction =>\n+      start = @editor.getCursorBufferPosition()\n+      _.times count, =>\n+        point = @editor.getCursorBufferPosition()\n+        range = Range.fromPointWithDelta(point, 0, 1)\n+        char = @editor.getTextInBufferRange(range)\n+\n+        if char is char.toLowerCase()\n+          @editor.setTextInBufferRange(range, char.toUpperCase())\n+        else\n+          @editor.setTextInBufferRange(range, char.toLowerCase())\n+\n+        unless point.column >= lastCharIndex",
        "path": "lib/operators/general-operators.coffee",
        "position": 37,
        "original_position": 38,
        "commit_id": "a861fb85ad22878c0b114d10c14b6d0aa9525261",
        "original_commit_id": "ef66cef954b13742ef76fba7875edf5ba47b5223",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Try out `editor.getCursor().isAtEndOfLine()`.\n",
        "created_at": "2014-04-15T22:28:59Z",
        "updated_at": "2014-04-16T07:47:05Z",
        "html_url": "https://github.com/atom/vim-mode/pull/207#discussion_r11661472",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/207",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/11661472"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/207#discussion_r11661472"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/207"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/11661561",
        "pull_request_review_id": null,
        "id": 11661561,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNjYxNTYx",
        "diff_hunk": "@@ -98,7 +98,37 @@ class Delete extends Operator\n       @editor.setCursorScreenPosition([cursor.getScreenRow(), 0])\n \n     @vimState.activateCommandMode()\n+#\n+# It toggles the case of everything selected by the following motion\n+#\n+class ToggleCase extends Operator\n+\n+  constructor: (@editor, @vimState, {@selectOptions}={}) -> @complete = true\n+\n+  execute: (count=1) ->\n+    pos = @editor.getCursorBufferPosition()\n+    currentRowLength = @editor.lineLengthForBufferRow(pos.row)\n+    lastCharIndex = @editor.getBuffer().lineForRow(pos.row).length - 1\n+\n+    # Do nothing on an empty line\n+    return unless currentRowLength > 0",
        "path": "lib/operators/general-operators.coffee",
        "position": null,
        "original_position": 24,
        "commit_id": "a861fb85ad22878c0b114d10c14b6d0aa9525261",
        "original_commit_id": "ef66cef954b13742ef76fba7875edf5ba47b5223",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Would be clearer using something like `editor.getBuffer().isRowBlank(editor.getCursorScreenRow())`\n",
        "created_at": "2014-04-15T22:31:24Z",
        "updated_at": "2014-04-16T07:47:05Z",
        "html_url": "https://github.com/atom/vim-mode/pull/207#discussion_r11661561",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/207",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/11661561"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/207#discussion_r11661561"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/207"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/11672077",
        "pull_request_review_id": null,
        "id": 11672077,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNjcyMDc3",
        "diff_hunk": "@@ -98,7 +98,37 @@ class Delete extends Operator\n       @editor.setCursorScreenPosition([cursor.getScreenRow(), 0])\n \n     @vimState.activateCommandMode()\n+#\n+# It toggles the case of everything selected by the following motion\n+#\n+class ToggleCase extends Operator\n+\n+  constructor: (@editor, @vimState, {@selectOptions}={}) -> @complete = true\n+\n+  execute: (count=1) ->\n+    pos = @editor.getCursorBufferPosition()\n+    currentRowLength = @editor.lineLengthForBufferRow(pos.row)\n+    lastCharIndex = @editor.getBuffer().lineForRow(pos.row).length - 1\n+\n+    # Do nothing on an empty line\n+    return unless currentRowLength > 0\n \n+    @undoTransaction =>\n+      start = @editor.getCursorBufferPosition()\n+      _.times count, =>\n+        point = @editor.getCursorBufferPosition()\n+        range = Range.fromPointWithDelta(point, 0, 1)\n+        char = @editor.getTextInBufferRange(range)\n+\n+        if char is char.toLowerCase()\n+          @editor.setTextInBufferRange(range, char.toUpperCase())\n+        else\n+          @editor.setTextInBufferRange(range, char.toLowerCase())\n+\n+        unless point.column >= lastCharIndex",
        "path": "lib/operators/general-operators.coffee",
        "position": 37,
        "original_position": 38,
        "commit_id": "a861fb85ad22878c0b114d10c14b6d0aa9525261",
        "original_commit_id": "ef66cef954b13742ef76fba7875edf5ba47b5223",
        "user": {
            "login": "badunk",
            "id": 263556,
            "node_id": "MDQ6VXNlcjI2MzU1Ng==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/263556?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/badunk",
            "html_url": "https://github.com/badunk",
            "followers_url": "https://api.github.com/users/badunk/followers",
            "following_url": "https://api.github.com/users/badunk/following{/other_user}",
            "gists_url": "https://api.github.com/users/badunk/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/badunk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/badunk/subscriptions",
            "organizations_url": "https://api.github.com/users/badunk/orgs",
            "repos_url": "https://api.github.com/users/badunk/repos",
            "events_url": "https://api.github.com/users/badunk/events{/privacy}",
            "received_events_url": "https://api.github.com/users/badunk/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Shouldn't it stop one column before `isAtEndOfLine()`?  I got the lastCharIndex logic from `MoveRight`\n",
        "created_at": "2014-04-16T07:01:37Z",
        "updated_at": "2014-04-16T07:47:05Z",
        "html_url": "https://github.com/atom/vim-mode/pull/207#discussion_r11672077",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/207",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/11672077"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/207#discussion_r11672077"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/207"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12505904",
        "pull_request_review_id": null,
        "id": 12505904,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTA1OTA0",
        "diff_hunk": "@@ -953,3 +953,52 @@ describe \"Motions\", ->\n       keydown('f')\n       commandModeInputKeydown('a')\n       expect(editor.getText()).toEqual 'abcbc\\n'\n+\n+describe 'the t/T keybindings', ->\n+  beforeEach ->\n+    editor.setText(\"abcabcabcabc\\n\")",
        "path": "spec/motions-spec.coffee",
        "position": null,
        "original_position": 7,
        "commit_id": "d786d993ccb14810ed6858497f4321819705d6a5",
        "original_commit_id": "143b1d17b999b256591d97ce51e712c3f0d8461e",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Can we make this something a little easier on the eyes when looking at test results, like `abc123abc123`?\n",
        "created_at": "2014-05-10T20:05:46Z",
        "updated_at": "2014-05-10T20:07:50Z",
        "html_url": "https://github.com/atom/vim-mode/pull/225#discussion_r12505904",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/225",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12505904"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/225#discussion_r12505904"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/225"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12505908",
        "pull_request_review_id": null,
        "id": 12505908,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTA1OTA4",
        "diff_hunk": "@@ -17,7 +17,7 @@ class Find extends MotionWithInput\n       for i in [0..count-1]\n         index = line.lastIndexOf(@input.characters, index-1)\n       if index != -1\n-        point = new Point(currentPosition.row, index)\n+        point = new Point(currentPosition.row, index+@offset)",
        "path": "lib/motions/find-motion.coffee",
        "position": 19,
        "original_position": 19,
        "commit_id": "d786d993ccb14810ed6858497f4321819705d6a5",
        "original_commit_id": "143b1d17b999b256591d97ce51e712c3f0d8461e",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Spaces around `+` please.\n",
        "created_at": "2014-05-10T20:07:03Z",
        "updated_at": "2014-05-10T20:07:50Z",
        "html_url": "https://github.com/atom/vim-mode/pull/225#discussion_r12505908",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/225",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12505908"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/225#discussion_r12505908"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/225"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12505911",
        "pull_request_review_id": null,
        "id": 12505911,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTA1OTEx",
        "diff_hunk": "@@ -26,7 +26,7 @@ class Find extends MotionWithInput\n       for i in [0..count-1]\n         index = line.indexOf(@input.characters, index+1)\n       if index != -1\n-        point = new Point(currentPosition.row, index)\n+        point = new Point(currentPosition.row, index-@offset)",
        "path": "lib/motions/find-motion.coffee",
        "position": 28,
        "original_position": 28,
        "commit_id": "d786d993ccb14810ed6858497f4321819705d6a5",
        "original_commit_id": "143b1d17b999b256591d97ce51e712c3f0d8461e",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Spaces around `-` please.\n",
        "created_at": "2014-05-10T20:07:12Z",
        "updated_at": "2014-05-10T20:07:50Z",
        "html_url": "https://github.com/atom/vim-mode/pull/225#discussion_r12505911",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/225",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12505911"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/225#discussion_r12505911"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/225"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12505916",
        "pull_request_review_id": null,
        "id": 12505916,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTA1OTE2",
        "diff_hunk": "@@ -17,7 +17,7 @@ class Find extends MotionWithInput\n       for i in [0..count-1]\n         index = line.lastIndexOf(@input.characters, index-1)\n       if index != -1\n-        point = new Point(currentPosition.row, index)\n+        point = new Point(currentPosition.row, index+@offset)",
        "path": "lib/motions/find-motion.coffee",
        "position": 19,
        "original_position": 19,
        "commit_id": "d786d993ccb14810ed6858497f4321819705d6a5",
        "original_commit_id": "143b1d17b999b256591d97ce51e712c3f0d8461e",
        "user": {
            "login": "udp",
            "id": 454895,
            "node_id": "MDQ6VXNlcjQ1NDg5NQ==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/454895?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/udp",
            "html_url": "https://github.com/udp",
            "followers_url": "https://api.github.com/users/udp/followers",
            "following_url": "https://api.github.com/users/udp/following{/other_user}",
            "gists_url": "https://api.github.com/users/udp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/udp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/udp/subscriptions",
            "organizations_url": "https://api.github.com/users/udp/orgs",
            "repos_url": "https://api.github.com/users/udp/repos",
            "events_url": "https://api.github.com/users/udp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/udp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@bhuga Sure, but I was actually following the style of the rest of the file.  What about the `index-1` above? (I didn't write it.)\n",
        "created_at": "2014-05-10T20:08:21Z",
        "updated_at": "2014-05-10T20:09:22Z",
        "html_url": "https://github.com/atom/vim-mode/pull/225#discussion_r12505916",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/225",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12505916"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/225#discussion_r12505916"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/225"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12505921",
        "pull_request_review_id": null,
        "id": 12505921,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTA1OTIx",
        "diff_hunk": "@@ -17,7 +17,7 @@ class Find extends MotionWithInput\n       for i in [0..count-1]\n         index = line.lastIndexOf(@input.characters, index-1)\n       if index != -1\n-        point = new Point(currentPosition.row, index)\n+        point = new Point(currentPosition.row, index+@offset)",
        "path": "lib/motions/find-motion.coffee",
        "position": 19,
        "original_position": 19,
        "commit_id": "d786d993ccb14810ed6858497f4321819705d6a5",
        "original_commit_id": "143b1d17b999b256591d97ce51e712c3f0d8461e",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I know. Can't ask you to go back and fix what's a little off, just not to make it worse :smile_cat: \n",
        "created_at": "2014-05-10T20:09:22Z",
        "updated_at": "2014-05-10T20:09:22Z",
        "html_url": "https://github.com/atom/vim-mode/pull/225#discussion_r12505921",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/225",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12505921"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/225#discussion_r12505921"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/225"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12505863",
        "pull_request_review_id": null,
        "id": 12505863,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTA1ODYz",
        "diff_hunk": "@@ -52,15 +56,28 @@ class SearchBase extends MotionWithInput\n     cur = @editor.getCursorBufferPosition()\n     matchPoints = []\n     iterator = (item) =>\n-      matchPoints.push(item.range.start)\n+      matchPointItem =\n+        start: item.range.start\n+        matchText: item.matchText\n+      matchPoints.push(matchPointItem)\n \n     @editor.scan(regexp, iterator)\n \n-    previous = _.filter matchPoints, (point) =>\n-      if @reverse\n-        point.compare(cur) < 0\n+    previous2 = _.filter matchPoints, (point) =>\n+        point.start.compare(cur) <= 0\n+    if @reverse\n+      if previous2.length>0",
        "path": "lib/motions/search-motion.coffee",
        "position": null,
        "original_position": 45,
        "commit_id": "e78a0f555f5911938bdb8400320bc01c0cfdf10a",
        "original_commit_id": "c715671d0693f7af4734419a44028a657d6aed4f",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Missing spaces around `>`\n",
        "created_at": "2014-05-10T19:55:54Z",
        "updated_at": "2014-05-11T04:46:15Z",
        "html_url": "https://github.com/atom/vim-mode/pull/224#discussion_r12505863",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/224",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12505863"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/224#discussion_r12505863"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/224"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12505876",
        "pull_request_review_id": null,
        "id": 12505876,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTA1ODc2",
        "diff_hunk": "@@ -52,15 +56,28 @@ class SearchBase extends MotionWithInput\n     cur = @editor.getCursorBufferPosition()\n     matchPoints = []\n     iterator = (item) =>\n-      matchPoints.push(item.range.start)\n+      matchPointItem =\n+        start: item.range.start\n+        matchText: item.matchText\n+      matchPoints.push(matchPointItem)\n \n     @editor.scan(regexp, iterator)\n \n-    previous = _.filter matchPoints, (point) =>\n-      if @reverse\n-        point.compare(cur) < 0\n+    previous2 = _.filter matchPoints, (point) =>",
        "path": "lib/motions/search-motion.coffee",
        "position": null,
        "original_position": 42,
        "commit_id": "e78a0f555f5911938bdb8400320bc01c0cfdf10a",
        "original_commit_id": "c715671d0693f7af4734419a44028a657d6aed4f",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "`previous2` is :no_good: as a variable name. What's this doing? Maybe `previousMatchPoint`?\n",
        "created_at": "2014-05-10T19:57:41Z",
        "updated_at": "2014-05-11T04:46:15Z",
        "html_url": "https://github.com/atom/vim-mode/pull/224#discussion_r12505876",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/224",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12505876"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/224#discussion_r12505876"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/224"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12505880",
        "pull_request_review_id": null,
        "id": 12505880,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTA1ODgw",
        "diff_hunk": "@@ -52,15 +56,28 @@ class SearchBase extends MotionWithInput\n     cur = @editor.getCursorBufferPosition()\n     matchPoints = []\n     iterator = (item) =>\n-      matchPoints.push(item.range.start)\n+      matchPointItem =\n+        start: item.range.start\n+        matchText: item.matchText\n+      matchPoints.push(matchPointItem)\n \n     @editor.scan(regexp, iterator)\n \n-    previous = _.filter matchPoints, (point) =>\n-      if @reverse\n-        point.compare(cur) < 0\n+    previous2 = _.filter matchPoints, (point) =>\n+        point.start.compare(cur) <= 0\n+    if @reverse\n+      if previous2.length>0\n+        if previous2[previous2.length-1].start.compare(cur)<0",
        "path": "lib/motions/search-motion.coffee",
        "position": null,
        "original_position": 46,
        "commit_id": "e78a0f555f5911938bdb8400320bc01c0cfdf10a",
        "original_commit_id": "c715671d0693f7af4734419a44028a657d6aed4f",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Also missing spaces around `<` and `-`. We could probably stand to break this conditional out into a named function; I'm not understanding what the check is anymore.\n",
        "created_at": "2014-05-10T19:58:32Z",
        "updated_at": "2014-05-11T04:46:15Z",
        "html_url": "https://github.com/atom/vim-mode/pull/224#discussion_r12505880",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/224",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12505880"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/224#discussion_r12505880"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/224"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12505888",
        "pull_request_review_id": null,
        "id": 12505888,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTA1ODg4",
        "diff_hunk": "@@ -52,15 +56,28 @@ class SearchBase extends MotionWithInput\n     cur = @editor.getCursorBufferPosition()\n     matchPoints = []\n     iterator = (item) =>\n-      matchPoints.push(item.range.start)\n+      matchPointItem =\n+        start: item.range.start\n+        matchText: item.matchText\n+      matchPoints.push(matchPointItem)\n \n     @editor.scan(regexp, iterator)\n \n-    previous = _.filter matchPoints, (point) =>\n-      if @reverse\n-        point.compare(cur) < 0\n+    previous2 = _.filter matchPoints, (point) =>\n+        point.start.compare(cur) <= 0\n+    if @reverse\n+      if previous2.length>0\n+        if previous2[previous2.length-1].start.compare(cur)<0\n+          previous = previous2[..]\n+        else\n+          if previous2.length > 1\n+            previous = previous2[0..previous2.length-2]\n+          else\n+            previous = []\n       else\n-        point.compare(cur) <= 0\n+        previous2 = []\n+    else\n+        previous = previous2[..]",
        "path": "lib/motions/search-motion.coffee",
        "position": null,
        "original_position": 57,
        "commit_id": "e78a0f555f5911938bdb8400320bc01c0cfdf10a",
        "original_commit_id": "c715671d0693f7af4734419a44028a657d6aed4f",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The `[..]` syntax is obtuse at best. Are you just trying to create a copy of the set of previous match points? `_.clone` would be a lot more readable.\n",
        "created_at": "2014-05-10T20:01:08Z",
        "updated_at": "2014-05-11T04:46:15Z",
        "html_url": "https://github.com/atom/vim-mode/pull/224#discussion_r12505888",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/224",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12505888"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/224#discussion_r12505888"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/224"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12505891",
        "pull_request_review_id": null,
        "id": 12505891,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTA1ODkx",
        "diff_hunk": "@@ -25,13 +26,16 @@ class SearchBase extends MotionWithInput\n   execute: (count=1) ->\n     @scan()\n     @match count, (pos) =>\n-      @editor.setCursorBufferPosition(pos)\n+        q = pos.start.toArray()\n+        @editor.setCursorBufferPosition(new Point(q[0],q[1]+pos.matchText.length))",
        "path": "lib/motions/search-motion.coffee",
        "position": null,
        "original_position": 14,
        "commit_id": "e78a0f555f5911938bdb8400320bc01c0cfdf10a",
        "original_commit_id": "c715671d0693f7af4734419a44028a657d6aed4f",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Spaces around `+` please.\n",
        "created_at": "2014-05-10T20:01:56Z",
        "updated_at": "2014-05-11T04:46:15Z",
        "html_url": "https://github.com/atom/vim-mode/pull/224#discussion_r12505891",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/224",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12505891"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/224#discussion_r12505891"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/224"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12505895",
        "pull_request_review_id": null,
        "id": 12505895,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTA1ODk1",
        "diff_hunk": "@@ -25,13 +26,16 @@ class SearchBase extends MotionWithInput\n   execute: (count=1) ->\n     @scan()\n     @match count, (pos) =>\n-      @editor.setCursorBufferPosition(pos)\n+        q = pos.start.toArray()",
        "path": "lib/motions/search-motion.coffee",
        "position": null,
        "original_position": 13,
        "commit_id": "e78a0f555f5911938bdb8400320bc01c0cfdf10a",
        "original_commit_id": "c715671d0693f7af4734419a44028a657d6aed4f",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "What is `q` here? We definitely need a better name.\n",
        "created_at": "2014-05-10T20:02:28Z",
        "updated_at": "2014-05-11T04:46:15Z",
        "html_url": "https://github.com/atom/vim-mode/pull/224#discussion_r12505895",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/224",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12505895"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/224#discussion_r12505895"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/224"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12505924",
        "pull_request_review_id": null,
        "id": 12505924,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTA1OTI0",
        "diff_hunk": "@@ -25,13 +26,16 @@ class SearchBase extends MotionWithInput\n   execute: (count=1) ->\n     @scan()\n     @match count, (pos) =>\n-      @editor.setCursorBufferPosition(pos)\n+        q = pos.start.toArray()",
        "path": "lib/motions/search-motion.coffee",
        "position": null,
        "original_position": 13,
        "commit_id": "e78a0f555f5911938bdb8400320bc01c0cfdf10a",
        "original_commit_id": "c715671d0693f7af4734419a44028a657d6aed4f",
        "user": {
            "login": "carlosdcastillo",
            "id": 5503702,
            "node_id": "MDQ6VXNlcjU1MDM3MDI=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5503702?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/carlosdcastillo",
            "html_url": "https://github.com/carlosdcastillo",
            "followers_url": "https://api.github.com/users/carlosdcastillo/followers",
            "following_url": "https://api.github.com/users/carlosdcastillo/following{/other_user}",
            "gists_url": "https://api.github.com/users/carlosdcastillo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/carlosdcastillo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/carlosdcastillo/subscriptions",
            "organizations_url": "https://api.github.com/users/carlosdcastillo/orgs",
            "repos_url": "https://api.github.com/users/carlosdcastillo/repos",
            "events_url": "https://api.github.com/users/carlosdcastillo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/carlosdcastillo/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "a better name for q would be startOfMatch. Will change and update.\n",
        "created_at": "2014-05-10T20:11:34Z",
        "updated_at": "2014-05-11T04:46:15Z",
        "html_url": "https://github.com/atom/vim-mode/pull/224#discussion_r12505924",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/224",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12505924"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/224#discussion_r12505924"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/224"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12538995",
        "pull_request_review_id": null,
        "id": 12538995,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTM4OTk1",
        "diff_hunk": "@@ -9,4 +10,85 @@ class SelectInsideWord extends TextObject\n     @editor.selectWord()\n     [true]\n \n-module.exports = {TextObject, SelectInsideWord}\n+class SelectInsideQuotes extends TextObject\n+  constructor: (@editor, @char) ->\n+  select: ->\n+    start = @editor.getCursorBufferPosition().copy()\n+\n+    return [false] unless (=>",
        "path": "lib/text-objects.coffee",
        "position": null,
        "original_position": 15,
        "commit_id": "04cbeea1512275691ca737c7aa55ec44412f1762",
        "original_commit_id": "306a1be27fb48be85309f5bf70c6587e9531418b",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Please make a named function out of the check so that this line can be an easily-readable `return unless insideQuotes()`\n",
        "created_at": "2014-05-12T16:28:54Z",
        "updated_at": "2014-05-12T17:03:52Z",
        "html_url": "https://github.com/atom/vim-mode/pull/229#discussion_r12538995",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/229",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12538995"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/229#discussion_r12538995"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/229"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12540830",
        "pull_request_review_id": null,
        "id": 12540830,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTQwODMw",
        "diff_hunk": "@@ -9,4 +10,85 @@ class SelectInsideWord extends TextObject\n     @editor.selectWord()\n     [true]\n \n-module.exports = {TextObject, SelectInsideWord}\n+class SelectInsideQuotes extends TextObject\n+  constructor: (@editor, @char) ->\n+  select: ->\n+    start = @editor.getCursorBufferPosition().copy()\n+\n+    return [false] unless (=>",
        "path": "lib/text-objects.coffee",
        "position": null,
        "original_position": 15,
        "commit_id": "04cbeea1512275691ca737c7aa55ec44412f1762",
        "original_commit_id": "306a1be27fb48be85309f5bf70c6587e9531418b",
        "user": {
            "login": "udp",
            "id": 454895,
            "node_id": "MDQ6VXNlcjQ1NDg5NQ==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/454895?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/udp",
            "html_url": "https://github.com/udp",
            "followers_url": "https://api.github.com/users/udp/followers",
            "following_url": "https://api.github.com/users/udp/following{/other_user}",
            "gists_url": "https://api.github.com/users/udp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/udp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/udp/subscriptions",
            "organizations_url": "https://api.github.com/users/udp/orgs",
            "repos_url": "https://api.github.com/users/udp/repos",
            "events_url": "https://api.github.com/users/udp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/udp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Done!\n",
        "created_at": "2014-05-12T17:04:52Z",
        "updated_at": "2014-05-12T17:04:52Z",
        "html_url": "https://github.com/atom/vim-mode/pull/229#discussion_r12540830",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/229",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12540830"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/229#discussion_r12540830"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/229"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12546625",
        "pull_request_review_id": null,
        "id": 12546625,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTQ2NjI1",
        "diff_hunk": "@@ -9,4 +10,93 @@ class SelectInsideWord extends TextObject\n     @editor.selectWord()\n     [true]\n \n-module.exports = {TextObject, SelectInsideWord}\n+class SelectInsideQuotes extends TextObject\n+  constructor: (@editor, @char) ->\n+\n+  findOpeningQuote: (pos) ->\n+\n+    pos = pos.copy()\n+    while pos.row >= 0\n+      line = @editor.lineForBufferRow(pos.row)\n+      pos.column = line.length - 1 if pos.column == -1\n+      while pos.column >= 0\n+        if line[pos.column] == @char\n+          return pos if pos.column == 0 or line[pos.column - 1] != '\\\\'\n+        -- pos.column\n+      pos.column = -1\n+      -- pos.row\n+\n+  select: ->\n+\n+    start = @findOpeningQuote(@editor.getCursorBufferPosition())\n+    return [false] unless start?\n+     \n+    ++ start.column  # skip the opening quote\n+     \n+    end = start.copy()\n+    escaping = false\n+     \n+    while end.row < @editor.getLineCount()",
        "path": "lib/text-objects.coffee",
        "position": 36,
        "original_position": 36,
        "commit_id": "04cbeea1512275691ca737c7aa55ec44412f1762",
        "original_commit_id": "04cbeea1512275691ca737c7aa55ec44412f1762",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'm still having trouble reading `select`. Could this chunk of code be refactored into something like (warning, pseudocode:)\n\n```\nend = @findClosingQuote(start)\nreturn [false] unless end\neditor.selectToPosition(end)\n[true]\n```\n",
        "created_at": "2014-05-12T18:48:06Z",
        "updated_at": "2014-05-12T18:48:06Z",
        "html_url": "https://github.com/atom/vim-mode/pull/229#discussion_r12546625",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/229",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12546625"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/229#discussion_r12546625"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/229"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12546654",
        "pull_request_review_id": null,
        "id": 12546654,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTQ2NjU0",
        "diff_hunk": "@@ -9,4 +10,93 @@ class SelectInsideWord extends TextObject\n     @editor.selectWord()\n     [true]\n \n-module.exports = {TextObject, SelectInsideWord}\n+class SelectInsideQuotes extends TextObject\n+  constructor: (@editor, @char) ->\n+\n+  findOpeningQuote: (pos) ->\n+\n+    pos = pos.copy()\n+    while pos.row >= 0\n+      line = @editor.lineForBufferRow(pos.row)\n+      pos.column = line.length - 1 if pos.column == -1\n+      while pos.column >= 0\n+        if line[pos.column] == @char\n+          return pos if pos.column == 0 or line[pos.column - 1] != '\\\\'\n+        -- pos.column\n+      pos.column = -1\n+      -- pos.row\n+\n+  select: ->\n+",
        "path": "lib/text-objects.coffee",
        "position": 27,
        "original_position": 27,
        "commit_id": "04cbeea1512275691ca737c7aa55ec44412f1762",
        "original_commit_id": "04cbeea1512275691ca737c7aa55ec44412f1762",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "No empty newlines at the start of functions please.\n",
        "created_at": "2014-05-12T18:48:34Z",
        "updated_at": "2014-05-12T18:48:34Z",
        "html_url": "https://github.com/atom/vim-mode/pull/229#discussion_r12546654",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/229",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12546654"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/229#discussion_r12546654"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/229"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12546658",
        "pull_request_review_id": null,
        "id": 12546658,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTQ2NjU4",
        "diff_hunk": "@@ -9,4 +10,93 @@ class SelectInsideWord extends TextObject\n     @editor.selectWord()\n     [true]\n \n-module.exports = {TextObject, SelectInsideWord}\n+class SelectInsideQuotes extends TextObject\n+  constructor: (@editor, @char) ->\n+\n+  findOpeningQuote: (pos) ->\n+",
        "path": "lib/text-objects.coffee",
        "position": 14,
        "original_position": 14,
        "commit_id": "04cbeea1512275691ca737c7aa55ec44412f1762",
        "original_commit_id": "04cbeea1512275691ca737c7aa55ec44412f1762",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Another empty newline.\n",
        "created_at": "2014-05-12T18:48:40Z",
        "updated_at": "2014-05-12T18:48:40Z",
        "html_url": "https://github.com/atom/vim-mode/pull/229#discussion_r12546658",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/229",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12546658"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/229#discussion_r12546658"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/229"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12546665",
        "pull_request_review_id": null,
        "id": 12546665,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTQ2NjY1",
        "diff_hunk": "@@ -9,4 +10,93 @@ class SelectInsideWord extends TextObject\n     @editor.selectWord()\n     [true]\n \n-module.exports = {TextObject, SelectInsideWord}\n+class SelectInsideQuotes extends TextObject\n+  constructor: (@editor, @char) ->\n+\n+  findOpeningQuote: (pos) ->\n+\n+    pos = pos.copy()\n+    while pos.row >= 0\n+      line = @editor.lineForBufferRow(pos.row)\n+      pos.column = line.length - 1 if pos.column == -1\n+      while pos.column >= 0\n+        if line[pos.column] == @char\n+          return pos if pos.column == 0 or line[pos.column - 1] != '\\\\'\n+        -- pos.column\n+      pos.column = -1\n+      -- pos.row\n+\n+  select: ->\n+\n+    start = @findOpeningQuote(@editor.getCursorBufferPosition())\n+    return [false] unless start?\n+     \n+    ++ start.column  # skip the opening quote\n+     \n+    end = start.copy()\n+    escaping = false\n+     \n+    while end.row < @editor.getLineCount()\n+      endLine = @editor.lineForBufferRow(end.row)\n+      while end.column < endLine.length\n+        if endLine[end.column] == '\\\\'\n+          ++ end.column\n+        else if endLine[end.column] == @char\n+          @editor.expandSelectionsForward (selection) =>\n+            selection.cursor.setBufferPosition start\n+            selection.selectToBufferPosition end\n+          return [true]\n+        ++ end.column\n+      end.column = 0\n+      ++ end.row\n+    \n+    [false]\n+\n+class SelectInsideBrackets extends TextObject\n+  constructor: (@editor, @beginChar, @endChar) ->\n+\n+  findOpeningBracket: (pos) ->\n+",
        "path": "lib/text-objects.coffee",
        "position": 56,
        "original_position": 56,
        "commit_id": "04cbeea1512275691ca737c7aa55ec44412f1762",
        "original_commit_id": "04cbeea1512275691ca737c7aa55ec44412f1762",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Also empty.\n",
        "created_at": "2014-05-12T18:48:47Z",
        "updated_at": "2014-05-12T18:48:47Z",
        "html_url": "https://github.com/atom/vim-mode/pull/229#discussion_r12546665",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/229",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12546665"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/229#discussion_r12546665"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/229"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12637604",
        "pull_request_review_id": null,
        "id": 12637604,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjM3NjA0",
        "diff_hunk": "@@ -167,6 +167,7 @@ class VimState\n     for commandName, operationFn of operationCommands\n       do (operationFn) =>\n         commands[commandName] = (event) => @pushOperations(operationFn(event))\n+",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 13,
        "commit_id": "de66be60cff885917560bd02bdb3a76649b1e270",
        "original_commit_id": "8fd4214b935531c3704e0c25148379aafd94c7d6",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Can we :fire: this newline?\n",
        "created_at": "2014-05-14T14:11:19Z",
        "updated_at": "2014-05-14T14:24:28Z",
        "html_url": "https://github.com/atom/vim-mode/pull/237#discussion_r12637604",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/237",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12637604"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/237#discussion_r12637604"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/237"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12764170",
        "pull_request_review_id": null,
        "id": 12764170,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzY0MTcw",
        "diff_hunk": "@@ -1,8 +1,11 @@\n '.vim-mode:not(.command-mode)':\n   'escape': 'vim-mode:activate-command-mode'\n-  'ctrl-c': 'vim-mode:activate-command-mode'\n   'ctrl-[': 'vim-mode:activate-command-mode'\n \n+'.platform-darwin .vim-mode:not(.command-mode)':\n+  'ctrl-c': 'vim-mode:activate-command-mode'\n+\n+",
        "path": "keymaps/vim-mode.cson",
        "position": 9,
        "original_position": 9,
        "commit_id": "147c9a83514a5c0a203eebbe936cfcd3fc033a2c",
        "original_commit_id": "147c9a83514a5c0a203eebbe936cfcd3fc033a2c",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Extra newline.\n",
        "created_at": "2014-05-17T00:01:53Z",
        "updated_at": "2014-05-17T00:01:53Z",
        "html_url": "https://github.com/atom/vim-mode/pull/252#discussion_r12764170",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/252",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12764170"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/252#discussion_r12764170"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/252"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12761805",
        "pull_request_review_id": null,
        "id": 12761805,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzYxODA1",
        "diff_hunk": "@@ -492,15 +492,21 @@ describe \"Motions\", ->\n \n   describe \"the $ keybinding\", ->\n     beforeEach ->\n-      editor.setText(\"  abcde\\n\")\n+      editor.setText(\"  abcde\\n\\n\")\n       editor.setCursorScreenPosition([0, 4])\n \n+    describe \"as a motion from empty line\", ->\n+      beforeEach -> editor.setCursorScreenPosition([1, 0])\n+\n+      it \"moves the cursor to the end of the line\", ->\n+        expect(editor.getCursorScreenPosition()).toEqual {row:1, column:0}\n+\n     describe \"as a motion\", ->\n       beforeEach -> keydown('$')\n \n       # FIXME: See atom/vim-mode#2",
        "path": "spec/motions-spec.coffee",
        "position": 17,
        "original_position": 17,
        "commit_id": "d7938f4dd835b06935bd04a85533a587bfa57f76",
        "original_commit_id": "22457aa625a81995db14c7214b0b45f615d0a6c1",
        "user": {
            "login": "abijr",
            "id": 102641,
            "node_id": "MDQ6VXNlcjEwMjY0MQ==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/102641?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/abijr",
            "html_url": "https://github.com/abijr",
            "followers_url": "https://api.github.com/users/abijr/followers",
            "following_url": "https://api.github.com/users/abijr/following{/other_user}",
            "gists_url": "https://api.github.com/users/abijr/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/abijr/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/abijr/subscriptions",
            "organizations_url": "https://api.github.com/users/abijr/orgs",
            "repos_url": "https://api.github.com/users/abijr/repos",
            "events_url": "https://api.github.com/users/abijr/events{/privacy}",
            "received_events_url": "https://api.github.com/users/abijr/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "^^^ Should I leave this comment?\n",
        "created_at": "2014-05-16T22:11:20Z",
        "updated_at": "2014-05-17T04:33:19Z",
        "html_url": "https://github.com/atom/vim-mode/pull/249#discussion_r12761805",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/249",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12761805"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/249#discussion_r12761805"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/249"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12764062",
        "pull_request_review_id": null,
        "id": 12764062,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzY0MDYy",
        "diff_hunk": "@@ -492,15 +492,21 @@ describe \"Motions\", ->\n \n   describe \"the $ keybinding\", ->\n     beforeEach ->\n-      editor.setText(\"  abcde\\n\")\n+      editor.setText(\"  abcde\\n\\n\")\n       editor.setCursorScreenPosition([0, 4])\n \n+    describe \"as a motion from empty line\", ->\n+      beforeEach -> editor.setCursorScreenPosition([1, 0])\n+\n+      it \"moves the cursor to the end of the line\", ->\n+        expect(editor.getCursorScreenPosition()).toEqual {row:1, column:0}\n+\n     describe \"as a motion\", ->\n       beforeEach -> keydown('$')\n \n       # FIXME: See atom/vim-mode#2",
        "path": "spec/motions-spec.coffee",
        "position": 17,
        "original_position": 17,
        "commit_id": "d7938f4dd835b06935bd04a85533a587bfa57f76",
        "original_commit_id": "22457aa625a81995db14c7214b0b45f615d0a6c1",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yeah. The issue as a whole is not done yet.\n",
        "created_at": "2014-05-16T23:55:59Z",
        "updated_at": "2014-05-17T04:33:19Z",
        "html_url": "https://github.com/atom/vim-mode/pull/249#discussion_r12764062",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/249",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12764062"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/249#discussion_r12764062"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/249"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12764108",
        "pull_request_review_id": null,
        "id": 12764108,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzY0MTA4",
        "diff_hunk": "@@ -380,6 +380,8 @@ class MoveToLastCharacterOfLine extends Motion\n   execute: (count=1) ->\n     _.times count, =>\n       @editor.moveCursorToEndOfLine()\n+      if @editor.getCursor().getBufferColumn() isnt 0",
        "path": "lib/motions/general-motions.coffee",
        "position": null,
        "original_position": 4,
        "commit_id": "d7938f4dd835b06935bd04a85533a587bfa57f76",
        "original_commit_id": "22457aa625a81995db14c7214b0b45f615d0a6c1",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Let's save some space with `@editor.moveCursorLeft unless @editor.getCursor().getBufferColumn is 0`\n",
        "created_at": "2014-05-16T23:58:18Z",
        "updated_at": "2014-05-17T04:33:19Z",
        "html_url": "https://github.com/atom/vim-mode/pull/249#discussion_r12764108",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/249",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12764108"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/249#discussion_r12764108"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/249"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12764139",
        "pull_request_review_id": null,
        "id": 12764139,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzY0MTM5",
        "diff_hunk": "@@ -492,15 +492,21 @@ describe \"Motions\", ->\n \n   describe \"the $ keybinding\", ->\n     beforeEach ->\n-      editor.setText(\"  abcde\\n\")\n+      editor.setText(\"  abcde\\n\\n\")\n       editor.setCursorScreenPosition([0, 4])\n \n+    describe \"as a motion from empty line\", ->\n+      beforeEach -> editor.setCursorScreenPosition([1, 0])\n+\n+      it \"moves the cursor to the end of the line\", ->\n+        expect(editor.getCursorScreenPosition()).toEqual {row:1, column:0}\n+\n     describe \"as a motion\", ->\n       beforeEach -> keydown('$')\n \n       # FIXME: See atom/vim-mode#2\n-      xit \"moves the cursor to the end of the line\", ->\n-        expect(editor.getCursorScreenPosition()).toEqual [0, 6]\n+      it \"moves the cursor to the end of the line\", ->\n+        expect(editor.getCursorScreenPosition()).toEqual {row:0, column:6}",
        "path": "spec/motions-spec.coffee",
        "position": null,
        "original_position": 21,
        "commit_id": "d7938f4dd835b06935bd04a85533a587bfa57f76",
        "original_commit_id": "22457aa625a81995db14c7214b0b45f615d0a6c1",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Why the change from `[a, b]` to `{ row:a, column: b}`? We use this pattern throughout the specs and it'd be best to keep it.\n\nI :heart: seeing that `xit` go to `it`!\n",
        "created_at": "2014-05-16T23:59:56Z",
        "updated_at": "2014-05-17T04:33:19Z",
        "html_url": "https://github.com/atom/vim-mode/pull/249#discussion_r12764139",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/249",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12764139"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/249#discussion_r12764139"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/249"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12766374",
        "pull_request_review_id": null,
        "id": 12766374,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzY2Mzc0",
        "diff_hunk": "@@ -102,8 +102,9 @@ describe \"Motions\", ->\n         keydown('w')\n         expect(editor.getCursorScreenPosition()).toEqual [3, 0]\n \n-        keydown('w')\n-        expect(editor.getCursorScreenPosition()).toEqual [3, 2]\n+        # TODO: Is it really expected to be on [3,2]? or [3,3]?",
        "path": "spec/motions-spec.coffee",
        "position": null,
        "original_position": 15,
        "commit_id": "d3e828fb138eeb1a1f325dae315bc0d8ab64cc6d",
        "original_commit_id": "ff90c9568974232bee47beb2eecb45f8f1a1d85c",
        "user": {
            "login": "abijr",
            "id": 102641,
            "node_id": "MDQ6VXNlcjEwMjY0MQ==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/102641?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/abijr",
            "html_url": "https://github.com/abijr",
            "followers_url": "https://api.github.com/users/abijr/followers",
            "following_url": "https://api.github.com/users/abijr/following{/other_user}",
            "gists_url": "https://api.github.com/users/abijr/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/abijr/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/abijr/subscriptions",
            "organizations_url": "https://api.github.com/users/abijr/orgs",
            "repos_url": "https://api.github.com/users/abijr/repos",
            "events_url": "https://api.github.com/users/abijr/events{/privacy}",
            "received_events_url": "https://api.github.com/users/abijr/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "For this one test I'm not sure what to do. I expect the behaviour to be [3, 3], but I don't want to impose (maybe I've forgotten how to vim xD).\n",
        "created_at": "2014-05-17T06:13:46Z",
        "updated_at": "2014-05-18T17:16:08Z",
        "html_url": "https://github.com/atom/vim-mode/pull/256#discussion_r12766374",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/256",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12766374"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/256#discussion_r12766374"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/256"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12769044",
        "pull_request_review_id": null,
        "id": 12769044,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzY5MDQ0",
        "diff_hunk": "@@ -130,11 +130,17 @@ class MoveToNextWord extends Motion\n     _.times count, =>\n       current = cursor.getBufferPosition()\n       next = cursor.getBeginningOfNextWordBufferPosition()\n-\n-      if current != next\n-        cursor.moveToBeginningOfNextWord()\n-      else\n+      lineEnd = cursor.getCurrentLineBufferRange().end\n+\n+      if current.column is lineEnd.column and current.row is lineEnd.row\n+        cursor.moveDown()\n+        if cursor.row isnt current.row",
        "path": "lib/motions/general-motions.coffee",
        "position": null,
        "original_position": 12,
        "commit_id": "d3e828fb138eeb1a1f325dae315bc0d8ab64cc6d",
        "original_commit_id": "ff90c9568974232bee47beb2eecb45f8f1a1d85c",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This is checking that we actually did move down a line, so we were on the last row, right? This line could use a comment, or, better, we could check for being on the last row in the if statement above.\n",
        "created_at": "2014-05-17T15:24:27Z",
        "updated_at": "2014-05-18T17:16:08Z",
        "html_url": "https://github.com/atom/vim-mode/pull/256#discussion_r12769044",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/256",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12769044"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/256#discussion_r12769044"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/256"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12769071",
        "pull_request_review_id": null,
        "id": 12769071,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzY5MDcx",
        "diff_hunk": "@@ -102,8 +102,9 @@ describe \"Motions\", ->\n         keydown('w')\n         expect(editor.getCursorScreenPosition()).toEqual [3, 0]\n \n-        keydown('w')\n-        expect(editor.getCursorScreenPosition()).toEqual [3, 2]\n+        # TODO: Is it really expected to be on [3,2]? or [3,3]?",
        "path": "spec/motions-spec.coffee",
        "position": null,
        "original_position": 15,
        "commit_id": "d3e828fb138eeb1a1f325dae315bc0d8ab64cc6d",
        "original_commit_id": "ff90c9568974232bee47beb2eecb45f8f1a1d85c",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This test has been `xit`'d so long that the old test may be wrong. Just make the behavior match.\n",
        "created_at": "2014-05-17T15:29:50Z",
        "updated_at": "2014-05-18T17:16:08Z",
        "html_url": "https://github.com/atom/vim-mode/pull/256#discussion_r12769071",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/256",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12769071"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/256#discussion_r12769071"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/256"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12774191",
        "pull_request_review_id": null,
        "id": 12774191,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzc0MTkx",
        "diff_hunk": "@@ -152,6 +158,16 @@ class MoveToNextWord extends Motion\n \n       true\n \n+  isEndOfLine: ->",
        "path": "lib/motions/general-motions.coffee",
        "position": null,
        "original_position": 24,
        "commit_id": "d3e828fb138eeb1a1f325dae315bc0d8ab64cc6d",
        "original_commit_id": "f529e98852da3b4201e26be22efde2d0a60bbb38",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Is this any different from `@editor.getCursor().isAtEndOfLine()`? Does that one return results different than you need, counting EOF or something? If so, let's document that.\n",
        "created_at": "2014-05-18T16:00:49Z",
        "updated_at": "2014-05-18T17:16:08Z",
        "html_url": "https://github.com/atom/vim-mode/pull/256#discussion_r12774191",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/256",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12774191"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/256#discussion_r12774191"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/256"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12774559",
        "pull_request_review_id": null,
        "id": 12774559,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzc0NTU5",
        "diff_hunk": "@@ -152,6 +158,16 @@ class MoveToNextWord extends Motion\n \n       true\n \n+  isEndOfLine: ->",
        "path": "lib/motions/general-motions.coffee",
        "position": null,
        "original_position": 24,
        "commit_id": "d3e828fb138eeb1a1f325dae315bc0d8ab64cc6d",
        "original_commit_id": "f529e98852da3b4201e26be22efde2d0a60bbb38",
        "user": {
            "login": "abijr",
            "id": 102641,
            "node_id": "MDQ6VXNlcjEwMjY0MQ==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/102641?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/abijr",
            "html_url": "https://github.com/abijr",
            "followers_url": "https://api.github.com/users/abijr/followers",
            "following_url": "https://api.github.com/users/abijr/following{/other_user}",
            "gists_url": "https://api.github.com/users/abijr/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/abijr/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/abijr/subscriptions",
            "organizations_url": "https://api.github.com/users/abijr/orgs",
            "repos_url": "https://api.github.com/users/abijr/repos",
            "events_url": "https://api.github.com/users/abijr/events{/privacy}",
            "received_events_url": "https://api.github.com/users/abijr/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "No it doesn't. Didn't see that function over at cursor.coffee! \n",
        "created_at": "2014-05-18T17:16:35Z",
        "updated_at": "2014-05-18T17:16:35Z",
        "html_url": "https://github.com/atom/vim-mode/pull/256#discussion_r12774559",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/256",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12774559"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/256#discussion_r12774559"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/256"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12811520",
        "pull_request_review_id": null,
        "id": 12811520,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODExNTIw",
        "diff_hunk": "@@ -247,8 +247,20 @@ describe \"Operators\", ->\n         keydown('c')\n         keydown('c')\n \n-        expect(editor.getText()).toBe \"12345\\nabcde\"\n-        expect(editor.getCursorScreenPosition()).toEqual [1, 0]\n+        expect(editor.getText()).toBe \"12345\\nabcde\\n\"\n+        expect(editor.getCursorScreenPosition()).toEqual [2, 0]\n+        expect(editorView).not.toHaveClass 'command-mode'\n+        expect(editorView).toHaveClass 'insert-mode'\n+\n+      it \"deletes the only line and enters insert mode\", ->",
        "path": "spec/operators-spec.coffee",
        "position": null,
        "original_position": 20,
        "commit_id": "4cbbbe42d5e8068c575889d42f605f0099b8cd4b",
        "original_commit_id": "fa779e4bd8e54dc5f93877ceae37cc7d8859bc4c",
        "user": {
            "login": "nathansobo",
            "id": 1789,
            "node_id": "MDQ6VXNlcjE3ODk=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1789?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nathansobo",
            "html_url": "https://github.com/nathansobo",
            "followers_url": "https://api.github.com/users/nathansobo/followers",
            "following_url": "https://api.github.com/users/nathansobo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nathansobo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nathansobo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nathansobo/subscriptions",
            "organizations_url": "https://api.github.com/users/nathansobo/orgs",
            "repos_url": "https://api.github.com/users/nathansobo/repos",
            "events_url": "https://api.github.com/users/nathansobo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nathansobo/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "I'd like to see another layer of `describe` for these last two cases:\n\n``` coffee\ndescribe \"when the cursor is on the last line\", ->\n  it \"deletes the line's content and enters insert mode on the last line\", ->\n\ndescribe \"when the cursor is on the only line\", ->\n  it \"deletes the line's content and enters insert mode\", ->\n```\n",
        "created_at": "2014-05-19T19:24:40Z",
        "updated_at": "2014-05-20T19:02:22Z",
        "html_url": "https://github.com/atom/vim-mode/pull/174#discussion_r12811520",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/174",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12811520"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/174#discussion_r12811520"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/174"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12811588",
        "pull_request_review_id": null,
        "id": 12811588,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODExNTg4",
        "diff_hunk": "@@ -140,10 +140,23 @@ class Change extends Operator\n   execute: (count=1) ->\n     operator = new Delete(@editor, @vimState, allowEOL: true, selectOptions: {excludeWhitespace: true})\n     operator.compose(@motion)\n-    operator.execute(count)\n+\n+    @editor.transact =>\n+      lastRow = @onLastRow()\n+      onlyRow = @editor.getBuffer().getLineCount() is 1\n+      operator.execute(count)\n+      if @motion.isLinewise?() and not onlyRow\n+        if lastRow\n+          @editor.insertNewlineBelow()\n+        else\n+          @editor.insertNewlineAbove()\n \n     @vimState.activateInsertMode()\n \n+  onLastRow: ->\n+    {row, column} = @editor.getCursorBufferPosition()\n+    row == @editor.getBuffer().getLastRow()",
        "path": "lib/operators/general-operators.coffee",
        "position": null,
        "original_position": 20,
        "commit_id": "4cbbbe42d5e8068c575889d42f605f0099b8cd4b",
        "original_commit_id": "fa779e4bd8e54dc5f93877ceae37cc7d8859bc4c",
        "user": {
            "login": "nathansobo",
            "id": 1789,
            "node_id": "MDQ6VXNlcjE3ODk=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1789?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nathansobo",
            "html_url": "https://github.com/nathansobo",
            "followers_url": "https://api.github.com/users/nathansobo/followers",
            "following_url": "https://api.github.com/users/nathansobo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nathansobo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nathansobo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nathansobo/subscriptions",
            "organizations_url": "https://api.github.com/users/nathansobo/orgs",
            "repos_url": "https://api.github.com/users/nathansobo/repos",
            "events_url": "https://api.github.com/users/nathansobo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nathansobo/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Minor, but we're trying to use `is` instead of `==`\n",
        "created_at": "2014-05-19T19:25:52Z",
        "updated_at": "2014-05-20T19:02:22Z",
        "html_url": "https://github.com/atom/vim-mode/pull/174#discussion_r12811588",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/174",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12811588"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/174#discussion_r12811588"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/174"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13032451",
        "pull_request_review_id": null,
        "id": 13032451,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDMyNDUx",
        "diff_hunk": "@@ -433,7 +433,8 @@ class VimState\n   updateStatusBar: ->\n     if !$('#status-bar-vim-mode').length\n       atom.packages.once 'activated', ->\n-        atom.workspaceView.statusBar?.prependRight(\"<div id='status-bar-vim-mode' class='inline-block'>Command</div>\")\n+        if !$('#status-bar-vim-mode').length",
        "path": "lib/vim-state.coffee",
        "position": 5,
        "original_position": 5,
        "commit_id": "61ec2261d8ce436b588f812db160c7cfe008226f",
        "original_commit_id": "61ec2261d8ce436b588f812db160c7cfe008226f",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "With the check here (where it belongs), we can remove the length check above.\n",
        "created_at": "2014-05-25T19:38:04Z",
        "updated_at": "2014-05-25T19:38:04Z",
        "html_url": "https://github.com/atom/vim-mode/pull/251#discussion_r13032451",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/251",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13032451"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/251#discussion_r13032451"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/251"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13050557",
        "pull_request_review_id": null,
        "id": 13050557,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDUwNTU3",
        "diff_hunk": "@@ -93,17 +93,29 @@ class MoveDown extends Motion\n       @editor.selectDown()\n       true\n \n-class MoveToPreviousWord extends Motion\n+class MoveToPrevious extends Motion\n+  ensureCharUnderCursorSelection: ->\n+    doEnsure = @isCharacterwise() and not @editor.getSelectedText().length\n+    if doEnsure\n+      @editor.moveCursorRight()",
        "path": "lib/motions/general-motions.coffee",
        "position": null,
        "original_position": 9,
        "commit_id": "3df37c44d557f1b42e5f2aed9fc0d3d1434dfa68",
        "original_commit_id": "6c6238cbbd361370d7cd4766c48bd589c5cd8b97",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Normally I'd want this to be squashed on to one line, i.e. `@editor.moveCursorRight() if doEnsure`\n",
        "created_at": "2014-05-26T15:25:51Z",
        "updated_at": "2014-05-26T16:48:06Z",
        "html_url": "https://github.com/atom/vim-mode/pull/276#discussion_r13050557",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/276",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13050557"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/276#discussion_r13050557"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/276"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13032347",
        "pull_request_review_id": null,
        "id": 13032347,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDMyMzQ3",
        "diff_hunk": "@@ -133,4 +136,129 @@ class SearchCurrentWord extends SearchBase\n   execute: (count=1) ->\n     super(count) if @input.characters.length > 0\n \n-module.exports = {Search, SearchCurrentWord}\n+\n+class BracketMatchingMotion extends SearchBase\n+  @keywordRegex: null\n+  constructor: (@editorView, @vimState) ->\n+    super(@editorView, @vimState)\n+    Search.currentSearch = @\n+    @reverse = @initiallyReversed = false\n+\n+    # FIXME: This must depend on the current language\n+    @input = new Input(@getCurrentWordMatch())\n+\n+  getCurrentWord: (onRecursion=false) ->\n+    cursor = @editor.getCursor()\n+    tempPoint = cursor.getBufferPosition().toArray()\n+    @character = @editor.getTextInBufferRange([cursor.getBufferPosition(),new Point(tempPoint[0],tempPoint[1] + 1)])\n+    if @character == ']'",
        "path": "lib/motions/search-motion.coffee",
        "position": null,
        "original_position": 67,
        "commit_id": "32da647291cb13eadea88d1a682c945e23abdf35",
        "original_commit_id": "58a1f325b34a00b322abc051a9032b19c47fdfd4",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This block is pretty wordy. What about something like this pseudocode:\n\n```\nswitch @character\n  when ']' then '['\n  when '[' then ']'\n  ...\n  else ''\n\n@reverse = true if _.contains(['(', '[', '{')], @character)\n```\n",
        "created_at": "2014-05-25T19:22:01Z",
        "updated_at": "2014-05-28T01:04:50Z",
        "html_url": "https://github.com/atom/vim-mode/pull/254#discussion_r13032347",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/254",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13032347"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/254#discussion_r13032347"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/254"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13111751",
        "pull_request_review_id": null,
        "id": 13111751,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTExNzUx",
        "diff_hunk": "@@ -133,4 +136,146 @@ class SearchCurrentWord extends SearchBase\n   execute: (count=1) ->\n     super(count) if @input.characters.length > 0\n \n-module.exports = {Search, SearchCurrentWord}\n+\n+class BracketMatchingMotion extends SearchBase\n+  @keywordRegex: null\n+  constructor: (@editorView, @vimState) ->\n+    super(@editorView, @vimState)\n+    Search.currentSearch = @\n+    @reverse = @initiallyReversed = false\n+    @characters         = [')','(','}','{',']','[']\n+    @charactersMatching = ['(',')','{','}','[',']']\n+    @reverseSearch      = [true,false,true,false,true,false]\n+\n+    # FIXME: This must depend on the current language\n+    @input = new Input(@getCurrentWordMatch())\n+\n+  getCurrentWord: (onRecursion=false) ->\n+    cursor = @editor.getCursor()\n+    tempPoint = cursor.getBufferPosition().toArray()\n+    @character = @editor.getTextInBufferRange([cursor.getBufferPosition(),new Point(tempPoint[0],tempPoint[1] + 1)])\n+    @startUp = false;\n+    index = @characters.indexOf(@character)\n+    if index >= 0\n+      @matching = @charactersMatching[index]\n+      @reverse = @reverseSearch[index]\n+    else\n+      @startUp = true\n+\n+    @character\n+\n+  getCurrentWordMatch: ->\n+    characters = @getCurrentWord()\n+    characters\n+\n+  isComplete: -> true\n+\n+  searchFor:(character) ->\n+    term = character\n+    regexp =\n+        new RegExp(_.escapeRegExp(term), 'g')\n+\n+    cur = @editor.getCursorBufferPosition()\n+    matchPoints = []\n+    iterator = (item) =>\n+      matchPointItem =\n+        range: item.range\n+      matchPoints.push(matchPointItem)\n+\n+    @editor.scan(regexp, iterator)\n+\n+    previous = _.filter matchPoints, (point) =>\n+      if @reverse\n+        point.range.start.compare(cur) < 0\n+      else\n+        point.range.start.compare(cur) <= 0\n+\n+    if @reverse\n+      after = []\n+      after.push(previous...)\n+      after = after.reverse()\n+    else\n+      after = _.difference(matchPoints, previous)\n+\n+    matches = after\n+    matches\n+\n+  select: (count=1) ->\n+    @scan()\n+    if @startUp\n+      cur = @startUpPos\n+    else\n+      cur = @editor.getCursorBufferPosition()",
        "path": "lib/motions/search-motion.coffee",
        "position": null,
        "original_position": 121,
        "commit_id": "32da647291cb13eadea88d1a682c945e23abdf35",
        "original_commit_id": "8ed322688cf779c7c88264d02223fccd2e5fd82f",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "easy one liner: `cur = if @startUp then @startUpPos else @editor.getCursorBufferPosition()`\n",
        "created_at": "2014-05-28T00:59:47Z",
        "updated_at": "2014-05-28T01:04:50Z",
        "html_url": "https://github.com/atom/vim-mode/pull/254#discussion_r13111751",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/254",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13111751"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/254#discussion_r13111751"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/254"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10633662",
        "pull_request_review_id": null,
        "id": 10633662,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjMzNjYy",
        "diff_hunk": "@@ -135,12 +141,29 @@ describe \"VimState\", ->\n \n       expect(editorView).toHaveClass 'command-mode'\n       expect(editorView).not.toHaveClass 'insert-mode'\n+      expect(editorView).not.toHaveClass 'visual-mode'\n \n-    it \"puts the editor into command mode when <ctrl-c> is pressed\", ->\n+    fit \"puts the editor into command mode when <ctrl-c> is pressed\", ->\n       keydown('c', ctrl: true)\n \n       expect(editorView).toHaveClass 'command-mode'\n       expect(editorView).not.toHaveClass 'insert-mode'\n+      expect(editorView).not.toHaveClass 'visual-mode'\n+\n+    fit \"allows undoing an entire batch of typing\", ->\n+      type('a')",
        "path": "spec/vim-state-spec.coffee",
        "position": null,
        "original_position": 37,
        "commit_id": "9578d92dbae6f6f43238078b632e9f7a60c0029f",
        "original_commit_id": "38aa0a13acef9772cfc830b1a05e95c9c6d72e2b",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@nathansobo This tries to type a character in the main editor, but the editor never gets it.\n",
        "created_at": "2014-03-15T05:55:57Z",
        "updated_at": "2014-05-31T04:00:02Z",
        "html_url": "https://github.com/atom/vim-mode/pull/176#discussion_r10633662",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/176",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10633662"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/176#discussion_r10633662"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/176"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10633670",
        "pull_request_review_id": null,
        "id": 10633670,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjMzNjcw",
        "diff_hunk": "@@ -288,6 +288,37 @@ class Replace extends Operator\n         editor.setTextInBufferRange(Range.fromPointWithDelta(point, 0, 1), @viewModel.char)\n         editor.moveCursorRight()\n       editor.setCursorBufferPosition(start)\n+#\n+# The operation for text entered in input mode. This operator is not\n+# used as the user types, but is created when the user leaves insert mode,\n+# and is available for repeating with the . operator (Replace)\n+#\n+# Currently, limitations with Transaction (from the text-buffer package)\n+# prevent us from doing anything reasonable with text input if it is\n+# anything but straight-up typed characters. No backspacing. It won't match\n+# vim when using the substitution command. You'll regret using this code.\n+# Never use this code.\n+#\n+class Input extends Operator\n+  constructor: (@editor, @vimState, @transaction) ->\n+    @typedText = @buildInsertText()\n+\n+  buildInsertText: ->\n+    return undefined unless @isJustTyping()\n+    typedCharacters = (patch.newText for patch in @transaction.patches)\n+    typedCharacters.join(\"\")",
        "path": "lib/operators.coffee",
        "position": null,
        "original_position": 22,
        "commit_id": "9578d92dbae6f6f43238078b632e9f7a60c0029f",
        "original_commit_id": "4dfd4f10383b6ab32bce34b8d8f919bce4a56695",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This nastiness creates a string out of all of the inserted text; it works great if there were no deletions. I can't figure out a way to determine if a deletion in a transaction deletes another piece of text typed in the transaction, or if it's a completely unrelated operation. Other than diffing patch locations to see if the deletion position was already inserted, which is a pretty monstrous task. It doesn't look like Transaction has a better way to do this today, but I'm wondering if there's something planned that I can contribute towards that might make this sort of thing easier.\n",
        "created_at": "2014-03-15T05:59:18Z",
        "updated_at": "2014-05-31T04:00:02Z",
        "html_url": "https://github.com/atom/vim-mode/pull/176#discussion_r10633670",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/176",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10633670"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/176#discussion_r10633670"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/176"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10636616",
        "pull_request_review_id": null,
        "id": 10636616,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjM2NjE2",
        "diff_hunk": "@@ -135,12 +141,29 @@ describe \"VimState\", ->\n \n       expect(editorView).toHaveClass 'command-mode'\n       expect(editorView).not.toHaveClass 'insert-mode'\n+      expect(editorView).not.toHaveClass 'visual-mode'\n \n-    it \"puts the editor into command mode when <ctrl-c> is pressed\", ->\n+    fit \"puts the editor into command mode when <ctrl-c> is pressed\", ->\n       keydown('c', ctrl: true)\n \n       expect(editorView).toHaveClass 'command-mode'\n       expect(editorView).not.toHaveClass 'insert-mode'\n+      expect(editorView).not.toHaveClass 'visual-mode'\n+\n+    fit \"allows undoing an entire batch of typing\", ->\n+      type('a')",
        "path": "spec/vim-state-spec.coffee",
        "position": null,
        "original_position": 37,
        "commit_id": "9578d92dbae6f6f43238078b632e9f7a60c0029f",
        "original_commit_id": "38aa0a13acef9772cfc830b1a05e95c9c6d72e2b",
        "user": {
            "login": "nathansobo",
            "id": 1789,
            "node_id": "MDQ6VXNlcjE3ODk=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1789?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nathansobo",
            "html_url": "https://github.com/nathansobo",
            "followers_url": "https://api.github.com/users/nathansobo/followers",
            "following_url": "https://api.github.com/users/nathansobo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nathansobo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nathansobo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nathansobo/subscriptions",
            "organizations_url": "https://api.github.com/users/nathansobo/orgs",
            "repos_url": "https://api.github.com/users/nathansobo/repos",
            "events_url": "https://api.github.com/users/nathansobo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nathansobo/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "The editor uses textInput events rather than keydown.\n",
        "created_at": "2014-03-15T21:01:50Z",
        "updated_at": "2014-05-31T04:00:02Z",
        "html_url": "https://github.com/atom/vim-mode/pull/176#discussion_r10636616",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/176",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/10636616"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/176#discussion_r10636616"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/176"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12540022",
        "pull_request_review_id": null,
        "id": 12540022,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTQwMDIy",
        "diff_hunk": "@@ -0,0 +1,75 @@\n+{Operator, Delete} = require './general-operators'\n+_ = require 'underscore-plus'\n+\n+# The operation for text entered in input mode. This operator is not\n+# used as the user types, but is created when the user leaves insert mode,\n+# and is available for repeating with the . operator (Replace)\n+#\n+# Currently, limitations with Transaction (from the text-buffer package)\n+# prevent us from doing anything reasonable with text input if it is\n+# anything but straight-up typed characters. No backspacing. It won't match\n+# vim when using the substitution command. You'll regret using this code.\n+# Never use this code.",
        "path": "lib/operators/input.coffee",
        "position": null,
        "original_position": 12,
        "commit_id": "9578d92dbae6f6f43238078b632e9f7a60c0029f",
        "original_commit_id": "04f483b22b9deacb205c9746d89979268cf66e3b",
        "user": {
            "login": "nathansobo",
            "id": 1789,
            "node_id": "MDQ6VXNlcjE3ODk=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1789?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nathansobo",
            "html_url": "https://github.com/nathansobo",
            "followers_url": "https://api.github.com/users/nathansobo/followers",
            "following_url": "https://api.github.com/users/nathansobo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nathansobo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nathansobo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nathansobo/subscriptions",
            "organizations_url": "https://api.github.com/users/nathansobo/orgs",
            "repos_url": "https://api.github.com/users/nathansobo/repos",
            "events_url": "https://api.github.com/users/nathansobo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nathansobo/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Is this still true?\n",
        "created_at": "2014-05-12T16:50:39Z",
        "updated_at": "2014-05-31T04:00:02Z",
        "html_url": "https://github.com/atom/vim-mode/pull/176#discussion_r12540022",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/176",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12540022"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/176#discussion_r12540022"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/176"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12540151",
        "pull_request_review_id": null,
        "id": 12540151,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTQwMTUx",
        "diff_hunk": "@@ -0,0 +1,75 @@\n+{Operator, Delete} = require './general-operators'\n+_ = require 'underscore-plus'\n+\n+# The operation for text entered in input mode. This operator is not\n+# used as the user types, but is created when the user leaves insert mode,\n+# and is available for repeating with the . operator (Replace)\n+#\n+# Currently, limitations with Transaction (from the text-buffer package)\n+# prevent us from doing anything reasonable with text input if it is\n+# anything but straight-up typed characters. No backspacing. It won't match\n+# vim when using the substitution command. You'll regret using this code.\n+# Never use this code.",
        "path": "lib/operators/input.coffee",
        "position": null,
        "original_position": 12,
        "commit_id": "9578d92dbae6f6f43238078b632e9f7a60c0029f",
        "original_commit_id": "04f483b22b9deacb205c9746d89979268cf66e3b",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The risk of death is greatly reduced, but it's one of my favorite comments! Will clean it up after I get reset-on-movement done.\n",
        "created_at": "2014-05-12T16:52:20Z",
        "updated_at": "2014-05-31T04:00:02Z",
        "html_url": "https://github.com/atom/vim-mode/pull/176#discussion_r12540151",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/176",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/12540151"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/176#discussion_r12540151"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/176"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13089791",
        "pull_request_review_id": null,
        "id": 13089791,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDg5Nzkx",
        "diff_hunk": "@@ -0,0 +1,90 @@\n+{Operator, Delete} = require './general-operators'\n+_ = require 'underscore-plus'\n+\n+# The operation for text entered in input mode. This operator is not\n+# used as the user types, but is created when the user leaves insert mode,\n+# and is available for repeating with the . operator (Replace)\n+#\n+class Insert extends Operator\n+  standalone: true\n+\n+  isComplete: -> @standalone || super\n+\n+  confirmTransaction: (transaction) ->\n+    bundler = new TransactionBundler(transaction)\n+    @typedText = bundler.buildInsertText()\n+\n+  execute: ->\n+    if @typed\n+      @undoTransaction =>\n+        @editor.getBuffer().insert(@editor.getCursorBufferPosition(), @typedText, true)\n+    else\n+      @vimState.activateInsertMode()\n+      @typed = true",
        "path": "lib/operators/input.coffee",
        "position": null,
        "original_position": 23,
        "commit_id": "9578d92dbae6f6f43238078b632e9f7a60c0029f",
        "original_commit_id": "d9b4aa63720e2047a9fded8d8599c2774b835f07",
        "user": {
            "login": "nathansobo",
            "id": 1789,
            "node_id": "MDQ6VXNlcjE3ODk=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1789?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nathansobo",
            "html_url": "https://github.com/nathansobo",
            "followers_url": "https://api.github.com/users/nathansobo/followers",
            "following_url": "https://api.github.com/users/nathansobo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nathansobo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nathansobo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nathansobo/subscriptions",
            "organizations_url": "https://api.github.com/users/nathansobo/orgs",
            "repos_url": "https://api.github.com/users/nathansobo/repos",
            "events_url": "https://api.github.com/users/nathansobo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nathansobo/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "We try to have all potential fields on the object by the time the constructor completes, so it would be a good idea to put `typed: false` in the prototype.\n",
        "created_at": "2014-05-27T17:22:43Z",
        "updated_at": "2014-05-31T04:00:02Z",
        "html_url": "https://github.com/atom/vim-mode/pull/176#discussion_r13089791",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/176",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13089791"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/176#discussion_r13089791"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/176"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13090004",
        "pull_request_review_id": null,
        "id": 13090004,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDkwMDA0",
        "diff_hunk": "@@ -266,6 +266,28 @@ describe \"Operators\", ->\n           expect(editorView).not.toHaveClass 'command-mode'\n           expect(editorView).toHaveClass 'insert-mode'\n \n+    describe \"when followed by i w\", ->\n+      it \"undo's and redo's completely\", ->\n+        editor.setCursorScreenPosition([1, 1])\n+\n+        keydown('c')\n+        keydown('i')\n+        keydown('w')\n+        expect(editor.getText()).toBe \"12345\\n\\nABCDE\"\n+        expect(editor.getCursorScreenPosition()).toEqual [1, 0]\n+        expect(editorView).toHaveClass 'insert-mode'\n+\n+        # Just cannot get \"typing\" to work correctly in test.\n+        editor.setText(\"12345\\nfg\\nABCDE\")",
        "path": "spec/operators-spec.coffee",
        "position": 95,
        "original_position": 30,
        "commit_id": "9578d92dbae6f6f43238078b632e9f7a60c0029f",
        "original_commit_id": "d9b4aa63720e2047a9fded8d8599c2774b835f07",
        "user": {
            "login": "nathansobo",
            "id": 1789,
            "node_id": "MDQ6VXNlcjE3ODk=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1789?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nathansobo",
            "html_url": "https://github.com/nathansobo",
            "followers_url": "https://api.github.com/users/nathansobo/followers",
            "following_url": "https://api.github.com/users/nathansobo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nathansobo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nathansobo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nathansobo/subscriptions",
            "organizations_url": "https://api.github.com/users/nathansobo/orgs",
            "repos_url": "https://api.github.com/users/nathansobo/repos",
            "events_url": "https://api.github.com/users/nathansobo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nathansobo/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Couldn't you use `insert` here? It would insert at the cursor location and be less drastic than setting the text of the entire buffer.\n",
        "created_at": "2014-05-27T17:26:45Z",
        "updated_at": "2014-05-31T04:00:02Z",
        "html_url": "https://github.com/atom/vim-mode/pull/176#discussion_r13090004",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/176",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13090004"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/176#discussion_r13090004"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/176"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13090132",
        "pull_request_review_id": null,
        "id": 13090132,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDkwMTMy",
        "diff_hunk": "@@ -791,3 +813,64 @@ describe \"Operators\", ->\n \n       expect(editor.getText()).toBe 'AbC'\n       expect(editor.getCursorScreenPosition()).toEqual [0, 2]\n+\n+  describe \"the i keybinding\", ->\n+    beforeEach ->\n+      editor.setText('')\n+      editor.setCursorBufferPosition([0, 0])\n+\n+    it \"allows undoing an entire batch of typing\", ->\n+      keydown 'i'\n+      editor.setText(\"abc\")",
        "path": "spec/operators-spec.coffee",
        "position": null,
        "original_position": 55,
        "commit_id": "9578d92dbae6f6f43238078b632e9f7a60c0029f",
        "original_commit_id": "d9b4aa63720e2047a9fded8d8599c2774b835f07",
        "user": {
            "login": "nathansobo",
            "id": 1789,
            "node_id": "MDQ6VXNlcjE3ODk=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1789?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nathansobo",
            "html_url": "https://github.com/nathansobo",
            "followers_url": "https://api.github.com/users/nathansobo/followers",
            "following_url": "https://api.github.com/users/nathansobo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nathansobo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nathansobo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nathansobo/subscriptions",
            "organizations_url": "https://api.github.com/users/nathansobo/orgs",
            "repos_url": "https://api.github.com/users/nathansobo/repos",
            "events_url": "https://api.github.com/users/nathansobo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nathansobo/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Again, here, can't we use `insert`. Seems like you'd want to call it multiple times before leaving insert mode to test that they are batched together correctly.\n",
        "created_at": "2014-05-27T17:28:51Z",
        "updated_at": "2014-05-31T04:00:02Z",
        "html_url": "https://github.com/atom/vim-mode/pull/176#discussion_r13090132",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/176",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13090132"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/176#discussion_r13090132"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/176"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13090259",
        "pull_request_review_id": null,
        "id": 13090259,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDkwMjU5",
        "diff_hunk": "@@ -55,6 +56,17 @@ class VimState\n         @clearOpStack()\n         false\n \n+  # Private: Reset transactions on input for undo/redo/repeat on several\n+  # core and vim-mode events\n+  registerInsertTransactionResets: ->\n+    events = [ 'core:move-up'\n+               'core:move-down'\n+               'core:move-right'\n+               'core:move-left' ]\n+    @editorView.on events.join(' '), =>\n+      @resetInputTransactions()",
        "path": "lib/vim-state.coffee",
        "position": 30,
        "original_position": 20,
        "commit_id": "9578d92dbae6f6f43238078b632e9f7a60c0029f",
        "original_commit_id": "d9b4aa63720e2047a9fded8d8599c2774b835f07",
        "user": {
            "login": "nathansobo",
            "id": 1789,
            "node_id": "MDQ6VXNlcjE3ODk=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1789?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nathansobo",
            "html_url": "https://github.com/nathansobo",
            "followers_url": "https://api.github.com/users/nathansobo/followers",
            "following_url": "https://api.github.com/users/nathansobo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nathansobo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nathansobo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nathansobo/subscriptions",
            "organizations_url": "https://api.github.com/users/nathansobo/orgs",
            "repos_url": "https://api.github.com/users/nathansobo/repos",
            "events_url": "https://api.github.com/users/nathansobo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nathansobo/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "I don't fully understand what this does. Shouldn't it be required for other types of movement as well?\n",
        "created_at": "2014-05-27T17:31:08Z",
        "updated_at": "2014-05-31T04:00:02Z",
        "html_url": "https://github.com/atom/vim-mode/pull/176#discussion_r13090259",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/176",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13090259"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/176#discussion_r13090259"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/176"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13090383",
        "pull_request_review_id": null,
        "id": 13090383,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDkwMzgz",
        "diff_hunk": "@@ -327,19 +345,28 @@ class VimState\n   # Private: Used to enable insert mode.\n   #\n   # Returns nothing.\n-  activateInsertMode: ->\n+  activateInsertMode: (transactionStarted = false)->\n     @mode = 'insert'\n+    @editor.beginTransaction() unless transactionStarted\n     @submode = null\n     @changeModeClass('insert-mode')\n-\n     @updateStatusBar()\n \n+  deactivateInsertMode: ->\n+    return unless @mode == 'insert'\n+    @editor.commitTransaction()\n+    transaction = _.last(@editor.buffer.history.undoStack)",
        "path": "lib/vim-state.coffee",
        "position": 135,
        "original_position": 101,
        "commit_id": "9578d92dbae6f6f43238078b632e9f7a60c0029f",
        "original_commit_id": "d9b4aa63720e2047a9fded8d8599c2774b835f07",
        "user": {
            "login": "nathansobo",
            "id": 1789,
            "node_id": "MDQ6VXNlcjE3ODk=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1789?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nathansobo",
            "html_url": "https://github.com/nathansobo",
            "followers_url": "https://api.github.com/users/nathansobo/followers",
            "following_url": "https://api.github.com/users/nathansobo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nathansobo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nathansobo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nathansobo/subscriptions",
            "organizations_url": "https://api.github.com/users/nathansobo/orgs",
            "repos_url": "https://api.github.com/users/nathansobo/repos",
            "events_url": "https://api.github.com/users/nathansobo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nathansobo/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "I feel pretty weird about digging into the state of the buffer like this. What exactly are you after, the inserted text? Is that something we could provide an API for you to access in `TextBuffer` itself? What would the ideal API look like to you?\n",
        "created_at": "2014-05-27T17:33:10Z",
        "updated_at": "2014-05-31T04:00:02Z",
        "html_url": "https://github.com/atom/vim-mode/pull/176#discussion_r13090383",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/176",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13090383"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/176#discussion_r13090383"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/176"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13090647",
        "pull_request_review_id": null,
        "id": 13090647,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDkwNjQ3",
        "diff_hunk": "@@ -0,0 +1,90 @@\n+{Operator, Delete} = require './general-operators'\n+_ = require 'underscore-plus'\n+\n+# The operation for text entered in input mode. This operator is not\n+# used as the user types, but is created when the user leaves insert mode,\n+# and is available for repeating with the . operator (Replace)\n+#\n+class Insert extends Operator\n+  standalone: true\n+\n+  isComplete: -> @standalone || super\n+\n+  confirmTransaction: (transaction) ->\n+    bundler = new TransactionBundler(transaction)\n+    @typedText = bundler.buildInsertText()\n+\n+  execute: ->\n+    if @typed\n+      @undoTransaction =>",
        "path": "lib/operators/input.coffee",
        "position": null,
        "original_position": 19,
        "commit_id": "9578d92dbae6f6f43238078b632e9f7a60c0029f",
        "original_commit_id": "d9b4aa63720e2047a9fded8d8599c2774b835f07",
        "user": {
            "login": "nathansobo",
            "id": 1789,
            "node_id": "MDQ6VXNlcjE3ODk=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1789?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nathansobo",
            "html_url": "https://github.com/nathansobo",
            "followers_url": "https://api.github.com/users/nathansobo/followers",
            "following_url": "https://api.github.com/users/nathansobo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nathansobo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nathansobo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nathansobo/subscriptions",
            "organizations_url": "https://api.github.com/users/nathansobo/orgs",
            "repos_url": "https://api.github.com/users/nathansobo/repos",
            "events_url": "https://api.github.com/users/nathansobo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nathansobo/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "This method should be called `transact`\n",
        "created_at": "2014-05-27T17:37:26Z",
        "updated_at": "2014-05-31T04:00:02Z",
        "html_url": "https://github.com/atom/vim-mode/pull/176#discussion_r13090647",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/176",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13090647"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/176#discussion_r13090647"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/176"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13090680",
        "pull_request_review_id": null,
        "id": 13090680,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDkwNjgw",
        "diff_hunk": "@@ -0,0 +1,90 @@\n+{Operator, Delete} = require './general-operators'\n+_ = require 'underscore-plus'\n+\n+# The operation for text entered in input mode. This operator is not\n+# used as the user types, but is created when the user leaves insert mode,\n+# and is available for repeating with the . operator (Replace)\n+#\n+class Insert extends Operator\n+  standalone: true\n+\n+  isComplete: -> @standalone || super\n+\n+  confirmTransaction: (transaction) ->\n+    bundler = new TransactionBundler(transaction)\n+    @typedText = bundler.buildInsertText()\n+\n+  execute: ->\n+    if @typed\n+      @undoTransaction =>",
        "path": "lib/operators/input.coffee",
        "position": null,
        "original_position": 19,
        "commit_id": "9578d92dbae6f6f43238078b632e9f7a60c0029f",
        "original_commit_id": "d9b4aa63720e2047a9fded8d8599c2774b835f07",
        "user": {
            "login": "nathansobo",
            "id": 1789,
            "node_id": "MDQ6VXNlcjE3ODk=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1789?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nathansobo",
            "html_url": "https://github.com/nathansobo",
            "followers_url": "https://api.github.com/users/nathansobo/followers",
            "following_url": "https://api.github.com/users/nathansobo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nathansobo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nathansobo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nathansobo/subscriptions",
            "organizations_url": "https://api.github.com/users/nathansobo/orgs",
            "repos_url": "https://api.github.com/users/nathansobo/repos",
            "events_url": "https://api.github.com/users/nathansobo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nathansobo/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "On further thought, why do we need a transaction here? Isn't it only a single operation?\n",
        "created_at": "2014-05-27T17:38:04Z",
        "updated_at": "2014-05-31T04:00:02Z",
        "html_url": "https://github.com/atom/vim-mode/pull/176#discussion_r13090680",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/176",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13090680"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/176#discussion_r13090680"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/176"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13090839",
        "pull_request_review_id": null,
        "id": 13090839,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDkwODM5",
        "diff_hunk": "@@ -55,6 +56,17 @@ class VimState\n         @clearOpStack()\n         false\n \n+  # Private: Reset transactions on input for undo/redo/repeat on several\n+  # core and vim-mode events\n+  registerInsertTransactionResets: ->\n+    events = [ 'core:move-up'\n+               'core:move-down'\n+               'core:move-right'\n+               'core:move-left' ]\n+    @editorView.on events.join(' '), =>\n+      @resetInputTransactions()",
        "path": "lib/vim-state.coffee",
        "position": 30,
        "original_position": 20,
        "commit_id": "9578d92dbae6f6f43238078b632e9f7a60c0029f",
        "original_commit_id": "d9b4aa63720e2047a9fded8d8599c2774b835f07",
        "user": {
            "login": "nathansobo",
            "id": 1789,
            "node_id": "MDQ6VXNlcjE3ODk=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1789?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nathansobo",
            "html_url": "https://github.com/nathansobo",
            "followers_url": "https://api.github.com/users/nathansobo/followers",
            "following_url": "https://api.github.com/users/nathansobo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nathansobo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nathansobo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nathansobo/subscriptions",
            "organizations_url": "https://api.github.com/users/nathansobo/orgs",
            "repos_url": "https://api.github.com/users/nathansobo/repos",
            "events_url": "https://api.github.com/users/nathansobo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nathansobo/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "I guess what I'm saying is shouldn't we \"reset\" the transaction for any movement not associated with text insertion or backspace? All the more reason I think to handle this in `TextBuffer`. We need an API that gives us the most recent contiguous inserted text from the most recent transaction. Perhaps that could be the return value of committing a transaction?\n",
        "created_at": "2014-05-27T17:40:47Z",
        "updated_at": "2014-05-31T04:00:02Z",
        "html_url": "https://github.com/atom/vim-mode/pull/176#discussion_r13090839",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/176",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13090839"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/176#discussion_r13090839"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/176"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13090919",
        "pull_request_review_id": null,
        "id": 13090919,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDkwOTE5",
        "diff_hunk": "@@ -0,0 +1,90 @@\n+{Operator, Delete} = require './general-operators'\n+_ = require 'underscore-plus'\n+\n+# The operation for text entered in input mode. This operator is not\n+# used as the user types, but is created when the user leaves insert mode,\n+# and is available for repeating with the . operator (Replace)\n+#\n+class Insert extends Operator\n+  standalone: true\n+\n+  isComplete: -> @standalone || super\n+\n+  confirmTransaction: (transaction) ->\n+    bundler = new TransactionBundler(transaction)\n+    @typedText = bundler.buildInsertText()\n+\n+  execute: ->\n+    if @typed\n+      @undoTransaction =>\n+        @editor.getBuffer().insert(@editor.getCursorBufferPosition(), @typedText, true)\n+    else\n+      @vimState.activateInsertMode()\n+      @typed = true\n+\n+  inputOperator: -> true\n+\n+class InsertAfter extends Insert\n+  execute: ->\n+    @editor.moveCursorRight() unless @editor.getCursor().isAtEndOfLine()\n+    super\n+\n+#\n+# Delete the following motion and enter insert mode to replace it.\n+#\n+class Change extends Insert\n+  standalone: false\n+\n+  # Public: Changes the text selected by the given motion.\n+  #\n+  # count - The number of times to execute.\n+  #\n+  # Returns nothing.\n+  execute: (count=1) ->\n+    # If we've typed, we're being repeated. If we're being repeated,\n+    # undo transactions are already handled.\n+    @editor.beginTransaction() unless @typed\n+    operator = new Delete(@editor, @vimState, allowEOL: true, selectOptions: {excludeWhitespace: true})\n+    operator.compose(@motion)\n+\n+    lastRow = @onLastRow()\n+    onlyRow = @editor.getBuffer().getLineCount() is 1\n+    operator.execute(count)\n+    if @motion.isLinewise?() and not onlyRow\n+      if lastRow\n+        @editor.insertNewlineBelow()\n+      else\n+        @editor.insertNewlineAbove()\n+\n+    return super if @typed\n+\n+    @vimState.activateInsertMode(transactionStarted = true)\n+    @typed = true",
        "path": "lib/operators/input.coffee",
        "position": null,
        "original_position": 62,
        "commit_id": "9578d92dbae6f6f43238078b632e9f7a60c0029f",
        "original_commit_id": "d9b4aa63720e2047a9fded8d8599c2774b835f07",
        "user": {
            "login": "nathansobo",
            "id": 1789,
            "node_id": "MDQ6VXNlcjE3ODk=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1789?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nathansobo",
            "html_url": "https://github.com/nathansobo",
            "followers_url": "https://api.github.com/users/nathansobo/followers",
            "following_url": "https://api.github.com/users/nathansobo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nathansobo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nathansobo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nathansobo/subscriptions",
            "organizations_url": "https://api.github.com/users/nathansobo/orgs",
            "repos_url": "https://api.github.com/users/nathansobo/repos",
            "events_url": "https://api.github.com/users/nathansobo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nathansobo/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "The name of this instance variable confuses me a bit.\n",
        "created_at": "2014-05-27T17:42:16Z",
        "updated_at": "2014-05-31T04:00:02Z",
        "html_url": "https://github.com/atom/vim-mode/pull/176#discussion_r13090919",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/176",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13090919"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/176#discussion_r13090919"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/176"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13091030",
        "pull_request_review_id": null,
        "id": 13091030,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDkxMDMw",
        "diff_hunk": "@@ -0,0 +1,90 @@\n+{Operator, Delete} = require './general-operators'\n+_ = require 'underscore-plus'\n+\n+# The operation for text entered in input mode. This operator is not\n+# used as the user types, but is created when the user leaves insert mode,",
        "path": "lib/operators/input.coffee",
        "position": null,
        "original_position": 5,
        "commit_id": "9578d92dbae6f6f43238078b632e9f7a60c0029f",
        "original_commit_id": "d9b4aa63720e2047a9fded8d8599c2774b835f07",
        "user": {
            "login": "nathansobo",
            "id": 1789,
            "node_id": "MDQ6VXNlcjE3ODk=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1789?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nathansobo",
            "html_url": "https://github.com/nathansobo",
            "followers_url": "https://api.github.com/users/nathansobo/followers",
            "following_url": "https://api.github.com/users/nathansobo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nathansobo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nathansobo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nathansobo/subscriptions",
            "organizations_url": "https://api.github.com/users/nathansobo/orgs",
            "repos_url": "https://api.github.com/users/nathansobo/repos",
            "events_url": "https://api.github.com/users/nathansobo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nathansobo/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "It seems from reading the code that this comment is somewhat inaccurate. Isn't the operator created as soon as they run the command to enter insert mode, but it doesn't do anything the first time around?\n",
        "created_at": "2014-05-27T17:44:21Z",
        "updated_at": "2014-05-31T04:00:02Z",
        "html_url": "https://github.com/atom/vim-mode/pull/176#discussion_r13091030",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/176",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13091030"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/176#discussion_r13091030"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/176"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13091114",
        "pull_request_review_id": null,
        "id": 13091114,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDkxMTE0",
        "diff_hunk": "@@ -37,7 +37,9 @@ class MotionWithInput extends Motion\n     @complete = true\n \n class MoveLeft extends Motion\n+\n   execute: (count=1) ->\n+    @vimState.resetInputTransactions()",
        "path": "lib/motions/general-motions.coffee",
        "position": null,
        "original_position": 6,
        "commit_id": "9578d92dbae6f6f43238078b632e9f7a60c0029f",
        "original_commit_id": "d9b4aa63720e2047a9fded8d8599c2774b835f07",
        "user": {
            "login": "nathansobo",
            "id": 1789,
            "node_id": "MDQ6VXNlcjE3ODk=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1789?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nathansobo",
            "html_url": "https://github.com/nathansobo",
            "followers_url": "https://api.github.com/users/nathansobo/followers",
            "following_url": "https://api.github.com/users/nathansobo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nathansobo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nathansobo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nathansobo/subscriptions",
            "organizations_url": "https://api.github.com/users/nathansobo/orgs",
            "repos_url": "https://api.github.com/users/nathansobo/repos",
            "events_url": "https://api.github.com/users/nathansobo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nathansobo/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "How are these different from the manual reset that occurs in `registerInsertTransactionResets`?\n",
        "created_at": "2014-05-27T17:45:55Z",
        "updated_at": "2014-05-31T04:00:02Z",
        "html_url": "https://github.com/atom/vim-mode/pull/176#discussion_r13091114",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/176",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13091114"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/176#discussion_r13091114"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/176"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13092534",
        "pull_request_review_id": null,
        "id": 13092534,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDkyNTM0",
        "diff_hunk": "@@ -266,6 +266,28 @@ describe \"Operators\", ->\n           expect(editorView).not.toHaveClass 'command-mode'\n           expect(editorView).toHaveClass 'insert-mode'\n \n+    describe \"when followed by i w\", ->\n+      it \"undo's and redo's completely\", ->\n+        editor.setCursorScreenPosition([1, 1])\n+\n+        keydown('c')\n+        keydown('i')\n+        keydown('w')\n+        expect(editor.getText()).toBe \"12345\\n\\nABCDE\"\n+        expect(editor.getCursorScreenPosition()).toEqual [1, 0]\n+        expect(editorView).toHaveClass 'insert-mode'\n+\n+        # Just cannot get \"typing\" to work correctly in test.\n+        editor.setText(\"12345\\nfg\\nABCDE\")",
        "path": "spec/operators-spec.coffee",
        "position": 95,
        "original_position": 30,
        "commit_id": "9578d92dbae6f6f43238078b632e9f7a60c0029f",
        "original_commit_id": "d9b4aa63720e2047a9fded8d8599c2774b835f07",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "That creates its own undo transaction, which I'm managing by hand here.\n",
        "created_at": "2014-05-27T18:11:32Z",
        "updated_at": "2014-05-31T04:00:02Z",
        "html_url": "https://github.com/atom/vim-mode/pull/176#discussion_r13092534",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/176",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13092534"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/176#discussion_r13092534"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/176"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13092841",
        "pull_request_review_id": null,
        "id": 13092841,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDkyODQx",
        "diff_hunk": "@@ -55,6 +56,17 @@ class VimState\n         @clearOpStack()\n         false\n \n+  # Private: Reset transactions on input for undo/redo/repeat on several\n+  # core and vim-mode events\n+  registerInsertTransactionResets: ->\n+    events = [ 'core:move-up'\n+               'core:move-down'\n+               'core:move-right'\n+               'core:move-left' ]\n+    @editorView.on events.join(' '), =>\n+      @resetInputTransactions()",
        "path": "lib/vim-state.coffee",
        "position": 30,
        "original_position": 20,
        "commit_id": "9578d92dbae6f6f43238078b632e9f7a60c0029f",
        "original_commit_id": "d9b4aa63720e2047a9fded8d8599c2774b835f07",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "> I don't fully understand what this does. Shouldn't it be required for other types of movement as well?\n\nThis creates a new transaction if we move during input mode. In vim, `i<type><move><type><escape>.` repeats the last bit of typing. Other core movements should apply as well, but I am having trouble finding a list of them.\n\n> Perhaps that could be the return value of committing a transaction?\n\nI've suggested this exact thing before :wink:. This would make life a lot easier, but would not be enough, as is, to prevent me from getting into the guts. The reason is that I can do something like `ciw<type><move-up><type>`. In that case, `.` should repeat the last bit of typing, but the `ciw<type>` is on the undo stack as a single unit. They become two undo transactions.\n",
        "created_at": "2014-05-27T18:16:33Z",
        "updated_at": "2014-05-31T04:00:02Z",
        "html_url": "https://github.com/atom/vim-mode/pull/176#discussion_r13092841",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/176",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13092841"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/176#discussion_r13092841"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/176"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13092984",
        "pull_request_review_id": null,
        "id": 13092984,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDkyOTg0",
        "diff_hunk": "@@ -327,19 +345,28 @@ class VimState\n   # Private: Used to enable insert mode.\n   #\n   # Returns nothing.\n-  activateInsertMode: ->\n+  activateInsertMode: (transactionStarted = false)->\n     @mode = 'insert'\n+    @editor.beginTransaction() unless transactionStarted\n     @submode = null\n     @changeModeClass('insert-mode')\n-\n     @updateStatusBar()\n \n+  deactivateInsertMode: ->\n+    return unless @mode == 'insert'\n+    @editor.commitTransaction()\n+    transaction = _.last(@editor.buffer.history.undoStack)",
        "path": "lib/vim-state.coffee",
        "position": 135,
        "original_position": 101,
        "commit_id": "9578d92dbae6f6f43238078b632e9f7a60c0029f",
        "original_commit_id": "d9b4aa63720e2047a9fded8d8599c2774b835f07",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yeah, this is pretty dirty. In this case, what I'm after is the last transaction so that I can pass it off to the `InsertOperation` that is associated with it. It will use that transaction to extract the typed text in case someone `.`'s it.\n",
        "created_at": "2014-05-27T18:18:50Z",
        "updated_at": "2014-05-31T04:00:02Z",
        "html_url": "https://github.com/atom/vim-mode/pull/176#discussion_r13092984",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/176",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13092984"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/176#discussion_r13092984"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/176"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13093008",
        "pull_request_review_id": null,
        "id": 13093008,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDkzMDA4",
        "diff_hunk": "@@ -0,0 +1,90 @@\n+{Operator, Delete} = require './general-operators'\n+_ = require 'underscore-plus'\n+\n+# The operation for text entered in input mode. This operator is not\n+# used as the user types, but is created when the user leaves insert mode,\n+# and is available for repeating with the . operator (Replace)\n+#\n+class Insert extends Operator\n+  standalone: true\n+\n+  isComplete: -> @standalone || super\n+\n+  confirmTransaction: (transaction) ->\n+    bundler = new TransactionBundler(transaction)\n+    @typedText = bundler.buildInsertText()\n+\n+  execute: ->\n+    if @typed\n+      @undoTransaction =>",
        "path": "lib/operators/input.coffee",
        "position": null,
        "original_position": 19,
        "commit_id": "9578d92dbae6f6f43238078b632e9f7a60c0029f",
        "original_commit_id": "d9b4aa63720e2047a9fded8d8599c2774b835f07",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The transaction is needed for `c` and `s` and such.\n",
        "created_at": "2014-05-27T18:19:22Z",
        "updated_at": "2014-05-31T04:00:02Z",
        "html_url": "https://github.com/atom/vim-mode/pull/176#discussion_r13093008",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/176",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13093008"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/176#discussion_r13093008"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/176"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13093033",
        "pull_request_review_id": null,
        "id": 13093033,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDkzMDMz",
        "diff_hunk": "@@ -0,0 +1,90 @@\n+{Operator, Delete} = require './general-operators'\n+_ = require 'underscore-plus'\n+\n+# The operation for text entered in input mode. This operator is not\n+# used as the user types, but is created when the user leaves insert mode,",
        "path": "lib/operators/input.coffee",
        "position": null,
        "original_position": 5,
        "commit_id": "9578d92dbae6f6f43238078b632e9f7a60c0029f",
        "original_commit_id": "d9b4aa63720e2047a9fded8d8599c2774b835f07",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You're right, this comment is out of date. Thanks.\n",
        "created_at": "2014-05-27T18:19:50Z",
        "updated_at": "2014-05-31T04:00:02Z",
        "html_url": "https://github.com/atom/vim-mode/pull/176#discussion_r13093033",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/176",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13093033"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/176#discussion_r13093033"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/176"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13093051",
        "pull_request_review_id": null,
        "id": 13093051,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDkzMDUx",
        "diff_hunk": "@@ -327,19 +345,28 @@ class VimState\n   # Private: Used to enable insert mode.\n   #\n   # Returns nothing.\n-  activateInsertMode: ->\n+  activateInsertMode: (transactionStarted = false)->\n     @mode = 'insert'\n+    @editor.beginTransaction() unless transactionStarted\n     @submode = null\n     @changeModeClass('insert-mode')\n-\n     @updateStatusBar()\n \n+  deactivateInsertMode: ->\n+    return unless @mode == 'insert'\n+    @editor.commitTransaction()\n+    transaction = _.last(@editor.buffer.history.undoStack)",
        "path": "lib/vim-state.coffee",
        "position": 135,
        "original_position": 101,
        "commit_id": "9578d92dbae6f6f43238078b632e9f7a60c0029f",
        "original_commit_id": "d9b4aa63720e2047a9fded8d8599c2774b835f07",
        "user": {
            "login": "nathansobo",
            "id": 1789,
            "node_id": "MDQ6VXNlcjE3ODk=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1789?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nathansobo",
            "html_url": "https://github.com/nathansobo",
            "followers_url": "https://api.github.com/users/nathansobo/followers",
            "following_url": "https://api.github.com/users/nathansobo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nathansobo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nathansobo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nathansobo/subscriptions",
            "organizations_url": "https://api.github.com/users/nathansobo/orgs",
            "repos_url": "https://api.github.com/users/nathansobo/repos",
            "events_url": "https://api.github.com/users/nathansobo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nathansobo/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Can't we do something similar to what you're doing here inside `TextBuffer` itself? Then at least we're making a single API call instead of making assumptions about structure.\n",
        "created_at": "2014-05-27T18:20:11Z",
        "updated_at": "2014-05-31T04:00:02Z",
        "html_url": "https://github.com/atom/vim-mode/pull/176#discussion_r13093051",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/176",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13093051"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/176#discussion_r13093051"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/176"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13093532",
        "pull_request_review_id": null,
        "id": 13093532,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDkzNTMy",
        "diff_hunk": "@@ -327,19 +345,28 @@ class VimState\n   # Private: Used to enable insert mode.\n   #\n   # Returns nothing.\n-  activateInsertMode: ->\n+  activateInsertMode: (transactionStarted = false)->\n     @mode = 'insert'\n+    @editor.beginTransaction() unless transactionStarted\n     @submode = null\n     @changeModeClass('insert-mode')\n-\n     @updateStatusBar()\n \n+  deactivateInsertMode: ->\n+    return unless @mode == 'insert'\n+    @editor.commitTransaction()\n+    transaction = _.last(@editor.buffer.history.undoStack)",
        "path": "lib/vim-state.coffee",
        "position": 135,
        "original_position": 101,
        "commit_id": "9578d92dbae6f6f43238078b632e9f7a60c0029f",
        "original_commit_id": "d9b4aa63720e2047a9fded8d8599c2774b835f07",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think if the editor had push/pop/peek operations on the undo stack, I'd be happy to use them.\n",
        "created_at": "2014-05-27T18:27:39Z",
        "updated_at": "2014-05-31T04:00:02Z",
        "html_url": "https://github.com/atom/vim-mode/pull/176#discussion_r13093532",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/176",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13093532"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/176#discussion_r13093532"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/176"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13112064",
        "pull_request_review_id": null,
        "id": 13112064,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTEyMDY0",
        "diff_hunk": "@@ -327,19 +345,28 @@ class VimState\n   # Private: Used to enable insert mode.\n   #\n   # Returns nothing.\n-  activateInsertMode: ->\n+  activateInsertMode: (transactionStarted = false)->\n     @mode = 'insert'\n+    @editor.beginTransaction() unless transactionStarted\n     @submode = null\n     @changeModeClass('insert-mode')\n-\n     @updateStatusBar()\n \n+  deactivateInsertMode: ->\n+    return unless @mode == 'insert'\n+    @editor.commitTransaction()\n+    transaction = _.last(@editor.buffer.history.undoStack)",
        "path": "lib/vim-state.coffee",
        "position": 135,
        "original_position": 101,
        "commit_id": "9578d92dbae6f6f43238078b632e9f7a60c0029f",
        "original_commit_id": "d9b4aa63720e2047a9fded8d8599c2774b835f07",
        "user": {
            "login": "nathansobo",
            "id": 1789,
            "node_id": "MDQ6VXNlcjE3ODk=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1789?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nathansobo",
            "html_url": "https://github.com/nathansobo",
            "followers_url": "https://api.github.com/users/nathansobo/followers",
            "following_url": "https://api.github.com/users/nathansobo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nathansobo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nathansobo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nathansobo/subscriptions",
            "organizations_url": "https://api.github.com/users/nathansobo/orgs",
            "repos_url": "https://api.github.com/users/nathansobo/repos",
            "events_url": "https://api.github.com/users/nathansobo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nathansobo/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Are you interested in opening a PR on TextBuffer? You can feel free to dig in and make the changes you need there, too.\n",
        "created_at": "2014-05-28T01:12:00Z",
        "updated_at": "2014-05-31T04:00:02Z",
        "html_url": "https://github.com/atom/vim-mode/pull/176#discussion_r13112064",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/176",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13112064"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/176#discussion_r13112064"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/176"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13112104",
        "pull_request_review_id": null,
        "id": 13112104,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTEyMTA0",
        "diff_hunk": "@@ -327,19 +345,28 @@ class VimState\n   # Private: Used to enable insert mode.\n   #\n   # Returns nothing.\n-  activateInsertMode: ->\n+  activateInsertMode: (transactionStarted = false)->\n     @mode = 'insert'\n+    @editor.beginTransaction() unless transactionStarted\n     @submode = null\n     @changeModeClass('insert-mode')\n-\n     @updateStatusBar()\n \n+  deactivateInsertMode: ->\n+    return unless @mode == 'insert'\n+    @editor.commitTransaction()\n+    transaction = _.last(@editor.buffer.history.undoStack)",
        "path": "lib/vim-state.coffee",
        "position": 135,
        "original_position": 101,
        "commit_id": "9578d92dbae6f6f43238078b632e9f7a60c0029f",
        "original_commit_id": "d9b4aa63720e2047a9fded8d8599c2774b835f07",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Maybe after the first version of this lands. It was the first issue I ever opened on vim-mode, and the second on atom. I want this bad.\n",
        "created_at": "2014-05-28T01:13:56Z",
        "updated_at": "2014-05-31T04:00:02Z",
        "html_url": "https://github.com/atom/vim-mode/pull/176#discussion_r13112104",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/176",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13112104"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/176#discussion_r13112104"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/176"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13259940",
        "pull_request_review_id": null,
        "id": 13259940,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjU5OTQw",
        "diff_hunk": "@@ -0,0 +1,159 @@\n+{Operator, Delete} = require './general-operators'\n+_ = require 'underscore-plus'\n+\n+# The operation for text entered in input mode. Broadly speaking, input\n+# operators manage an undo transaction and set a @typingCompleted variable when\n+# it's done. When the input operation is completed, the typingCompleted variable\n+# tells the operation to repeat itself instead of enter insert mode.\n+class Insert extends Operator\n+  standalone: true\n+\n+  isComplete: -> @standalone || super\n+\n+  confirmTransaction: (transaction) ->\n+    bundler = new TransactionBundler(transaction)\n+    @typedText = bundler.buildInsertText()\n+\n+  execute: ->\n+    if @typingCompleted\n+      @undoTransaction =>\n+        @editor.getBuffer().insert(@editor.getCursorBufferPosition(), @typedText, true)",
        "path": "lib/operators/input.coffee",
        "position": 20,
        "original_position": 20,
        "commit_id": "9578d92dbae6f6f43238078b632e9f7a60c0029f",
        "original_commit_id": "9578d92dbae6f6f43238078b632e9f7a60c0029f",
        "user": {
            "login": "tony612",
            "id": 1253659,
            "node_id": "MDQ6VXNlcjEyNTM2NTk=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1253659?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tony612",
            "html_url": "https://github.com/tony612",
            "followers_url": "https://api.github.com/users/tony612/followers",
            "following_url": "https://api.github.com/users/tony612/following{/other_user}",
            "gists_url": "https://api.github.com/users/tony612/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tony612/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tony612/subscriptions",
            "organizations_url": "https://api.github.com/users/tony612/orgs",
            "repos_url": "https://api.github.com/users/tony612/repos",
            "events_url": "https://api.github.com/users/tony612/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tony612/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "But there's a bug when you press `a` or `i`, insert nothing then press `escape`.There'll be a error raised.\nIt can fixed simply by changing this line to `@editor.getBuffer().insert(@editor.getCursorBufferPosition(), @typedText || \"\", true)`\n",
        "created_at": "2014-05-31T07:37:17Z",
        "updated_at": "2014-05-31T07:37:17Z",
        "html_url": "https://github.com/atom/vim-mode/pull/176#discussion_r13259940",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/176",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13259940"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/176#discussion_r13259940"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/176"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13447584",
        "pull_request_review_id": null,
        "id": 13447584,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNDQ3NTg0",
        "diff_hunk": "@@ -11,6 +11,7 @@ class MoveToMark extends MotionWithInput\n   isLinewise: -> @linewise\n \n   execute: ->\n+    @editor.desiredCursorColumn = null",
        "path": "lib/motions/move-to-mark-motion.coffee",
        "position": null,
        "original_position": 4,
        "commit_id": "fa3b50db2480ae3119dd77d07788bdf4f869dd6d",
        "original_commit_id": "79e5f98586a6725497e2c13a1e96737f340719a6",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I really don't like having to add this to every motion. We need to find another way.\n",
        "created_at": "2014-06-05T15:52:51Z",
        "updated_at": "2014-06-06T03:08:09Z",
        "html_url": "https://github.com/atom/vim-mode/pull/301#discussion_r13447584",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/301",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13447584"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/301#discussion_r13447584"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/301"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13447597",
        "pull_request_review_id": null,
        "id": 13447597,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNDQ3NTk3",
        "diff_hunk": "@@ -435,7 +515,7 @@ class MoveToMiddleOfScreen extends MoveToScreenLine\n     Math.floor(firstScreenRow + (height / 2))\n \n module.exports = {\n-  Motion, MotionWithInput, CurrentSelection, MoveLeft, MoveRight, MoveUp, MoveDown,\n+  Motion, MotionWithInput, CurrentSelection, MoveLeft, MoveRight, MoveVertically, MoveUp, MoveDown,",
        "path": "lib/motions/general-motions.coffee",
        "position": null,
        "original_position": 200,
        "commit_id": "fa3b50db2480ae3119dd77d07788bdf4f869dd6d",
        "original_commit_id": "79e5f98586a6725497e2c13a1e96737f340719a6",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Do we need to export MoveVertically? It's only used internally right?\n",
        "created_at": "2014-06-05T15:53:06Z",
        "updated_at": "2014-06-06T03:08:09Z",
        "html_url": "https://github.com/atom/vim-mode/pull/301#discussion_r13447597",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/301",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13447597"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/301#discussion_r13447597"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/301"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13447684",
        "pull_request_review_id": null,
        "id": 13447684,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNDQ3Njg0",
        "diff_hunk": "@@ -36,6 +36,7 @@ class Find extends MotionWithInput\n     @\n \n   execute: (count=1) ->\n+    @editor.desiredCursorColumn = null",
        "path": "lib/motions/find-motion.coffee",
        "position": null,
        "original_position": 4,
        "commit_id": "fa3b50db2480ae3119dd77d07788bdf4f869dd6d",
        "original_commit_id": "79e5f98586a6725497e2c13a1e96737f340719a6",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This piece of state should exist on `@vimState`.\n",
        "created_at": "2014-06-05T15:54:37Z",
        "updated_at": "2014-06-06T03:08:09Z",
        "html_url": "https://github.com/atom/vim-mode/pull/301#discussion_r13447684",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/301",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13447684"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/301#discussion_r13447684"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/301"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13448055",
        "pull_request_review_id": null,
        "id": 13448055,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNDQ4MDU1",
        "diff_hunk": "@@ -72,22 +74,87 @@ class MoveRight extends Motion\n       else\n         false\n \n-class MoveUp extends Motion\n+class MoveVertically extends Motion\n   execute: (count=1) ->\n+    {row, column} = @editor.getCursorBufferPosition()\n+\n+    nextRow = @nextValidRow(count)\n+\n+    if nextRow != row\n+      nextLineLength = @editor.lineLengthForBufferRow(nextRow)\n+\n+      # The 'nextColumn' the cursor should be in is the\n+      # 'desiredCursorColumn', if it exists. If it does\n+      # not, the current column should be used.\n+      nextColumn = @editor.desiredCursorColumn || column\n+\n+      # Check to see if the 'nextColumn' position of\n+      # cursor is greater than or equal to the length\n+      # of the next line.\n+      if nextColumn >= nextLineLength\n+        # When the 'nextColumn' is greater than the\n+        # length of the next line, we should move the\n+        # cursor to the end of the next line and save\n+        # 'nextColumn' in 'desiredCursorColumn'.\n+        @editor.setCursorBufferPosition([nextRow, nextLineLength-1])\n+        @editor.desiredCursorColumn = nextColumn\n+      else\n+        # When the 'nextColumn' is a valid spot to\n+        # move into, in the next line, simply move\n+        # there and unset 'desiredCursorColumn'.\n+        @editor.setCursorBufferPosition([nextRow, nextColumn])\n+        @editor.desiredCursorColumn = null\n+\n+  # Internal: Finds the next valid row that can be moved\n+  # to. This move takes folded lines into account when\n+  # calculating the next valid row.\n+  #\n+  # count - The number of folded 'buffer' rows away from\n+  #         the current row.\n+  #\n+  # Returns an integer row index.\n+  nextValidRow: (count) ->\n+    {row, column} = @editor.getCursorBufferPosition()\n+\n+    maxRow = @editor.getLastBufferRow()\n+    minRow = 0\n+\n+    # For each count, add 1 'directionIncrement' to\n+    # row. Folded rows count as a single row.\n     _.times count, =>\n-      {row, column} = @editor.getCursorScreenPosition()\n-      @editor.moveCursorUp() if row > 0\n+      if @editor.isFoldedAtBufferRow(row)",
        "path": "lib/motions/general-motions.coffee",
        "position": 87,
        "original_position": 71,
        "commit_id": "fa3b50db2480ae3119dd77d07788bdf4f869dd6d",
        "original_commit_id": "79e5f98586a6725497e2c13a1e96737f340719a6",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Good example of the kind of work we need to do to work with folded lines. There's a lot of motions that need checks like this.\n",
        "created_at": "2014-06-05T16:00:00Z",
        "updated_at": "2014-06-06T03:08:09Z",
        "html_url": "https://github.com/atom/vim-mode/pull/301#discussion_r13448055",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/301",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13448055"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/301#discussion_r13448055"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/301"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13449063",
        "pull_request_review_id": null,
        "id": 13449063,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNDQ5MDYz",
        "diff_hunk": "@@ -435,7 +515,7 @@ class MoveToMiddleOfScreen extends MoveToScreenLine\n     Math.floor(firstScreenRow + (height / 2))\n \n module.exports = {\n-  Motion, MotionWithInput, CurrentSelection, MoveLeft, MoveRight, MoveUp, MoveDown,\n+  Motion, MotionWithInput, CurrentSelection, MoveLeft, MoveRight, MoveVertically, MoveUp, MoveDown,",
        "path": "lib/motions/general-motions.coffee",
        "position": null,
        "original_position": 200,
        "commit_id": "fa3b50db2480ae3119dd77d07788bdf4f869dd6d",
        "original_commit_id": "79e5f98586a6725497e2c13a1e96737f340719a6",
        "user": {
            "login": "iamjwc",
            "id": 4146,
            "node_id": "MDQ6VXNlcjQxNDY=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4146?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/iamjwc",
            "html_url": "https://github.com/iamjwc",
            "followers_url": "https://api.github.com/users/iamjwc/followers",
            "following_url": "https://api.github.com/users/iamjwc/following{/other_user}",
            "gists_url": "https://api.github.com/users/iamjwc/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/iamjwc/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/iamjwc/subscriptions",
            "organizations_url": "https://api.github.com/users/iamjwc/orgs",
            "repos_url": "https://api.github.com/users/iamjwc/repos",
            "events_url": "https://api.github.com/users/iamjwc/events{/privacy}",
            "received_events_url": "https://api.github.com/users/iamjwc/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Good call. I'll remove that. I'm not familiar with Node, so I just added this cause all other classes were here.\n",
        "created_at": "2014-06-05T16:19:58Z",
        "updated_at": "2014-06-06T03:08:09Z",
        "html_url": "https://github.com/atom/vim-mode/pull/301#discussion_r13449063",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/301",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13449063"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/301#discussion_r13449063"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/301"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13498013",
        "pull_request_review_id": null,
        "id": 13498013,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNDk4MDEz",
        "diff_hunk": "@@ -537,34 +537,77 @@ describe \"Motions\", ->\n       editor.setCursorScreenPosition([0, 2])\n \n     describe \"as a motion\", ->\n-      beforeEach ->\n-        keydown('g')\n-        keydown('g')\n+      describe \"in command mode\", ->\n+        beforeEach ->\n+          keydown('g')\n+          keydown('g')\n \n-      it \"moves the cursor to the beginning of the first line\", ->\n-        expect(editor.getCursorScreenPosition()).toEqual [0, 1]\n+        it \"moves the cursor to the beginning of the first line\", ->\n+          expect(editor.getCursorScreenPosition()).toEqual [0, 1]\n+\n+      describe \"in linewise visual mode\", ->\n+        beforeEach ->\n+          editor.setCursorScreenPosition([1, 0])\n+          vimState.activateVisualMode('linewise')\n+          keydown('g')\n+          keydown('g')\n+\n+        it \"selects to the first line in the file\", ->\n+          expect(editor.getSelectedText()).toBe \" 1abc\\n 2\\n\"\n+\n+        it \"moves the cursor to a specified line\", ->\n+          expect(editor.getCursorScreenPosition()).toEqual [0, 0]\n+\n+      describe \"in characterwise visual mode\", ->\n+        beforeEach ->\n+          editor.setCursorScreenPosition([1, 1])\n+          vimState.activateVisualMode()\n+          keydown('g')\n+          keydown('g')\n+\n+        it \"selects to the first line in the file\", ->\n+          expect(editor.getSelectedText()).toBe \"1abc\\n 2\"",
        "path": "spec/motions-spec.coffee",
        "position": 38,
        "original_position": 38,
        "commit_id": "f380d3d67e7daac8d45ffae830c607c11775fe21",
        "original_commit_id": "f380d3d67e7daac8d45ffae830c607c11775fe21",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I could not replicate this behavior in vim. In characterwise visual mode, `gg` took me to the first character of the first line, not the desired character on the first line.\n",
        "created_at": "2014-06-06T16:20:19Z",
        "updated_at": "2014-06-06T16:20:19Z",
        "html_url": "https://github.com/atom/vim-mode/pull/275#discussion_r13498013",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/275",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13498013"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/275#discussion_r13498013"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/275"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13498592",
        "pull_request_review_id": null,
        "id": 13498592,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNDk4NTky",
        "diff_hunk": "@@ -82,6 +83,27 @@ class VimState\n       if newText == ''\n         @setRegister('\"', text: oldText, type: Utils.copyType(oldText))\n \n+  # Private: Keeps Atom from placing your cursor past the EOL\n+  # when you click in the right gutter.\n+  #\n+  # Returns nothing.\n+  registerPastEndOfLineHandler: ->\n+   @editorView.on 'mousedown', =>",
        "path": "lib/vim-state.coffee",
        "position": 17,
        "original_position": 17,
        "commit_id": "760a3eec6c8dbba1bcf83fa60a35c291219bd8af",
        "original_commit_id": "760a3eec6c8dbba1bcf83fa60a35c291219bd8af",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I kind of doubt this is the right trigger; I'll bet there's something like `core:mouse-clicked` or something. @nathansobo?\n",
        "created_at": "2014-06-06T16:34:19Z",
        "updated_at": "2014-06-06T16:34:19Z",
        "html_url": "https://github.com/atom/vim-mode/pull/292#discussion_r13498592",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/292",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13498592"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/292#discussion_r13498592"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/292"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13250467",
        "pull_request_review_id": null,
        "id": 13250467,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjUwNDY3",
        "diff_hunk": "@@ -1,3 +1,4 @@\n+",
        "path": "lib/text-objects.coffee",
        "position": 8,
        "original_position": 1,
        "commit_id": "e409030703c492201c845a04d70ec4ce2a5ba6e4",
        "original_commit_id": "b9b459f5d2bf7bfad20cd3d5898e47217eef5eb8",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": ":fire: this newline please.\n",
        "created_at": "2014-05-30T21:04:32Z",
        "updated_at": "2014-06-06T20:51:51Z",
        "html_url": "https://github.com/atom/vim-mode/pull/286#discussion_r13250467",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/286",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13250467"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/286#discussion_r13250467"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/286"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13250522",
        "pull_request_review_id": null,
        "id": 13250522,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjUwNTIy",
        "diff_hunk": "@@ -9,4 +10,93 @@ class SelectInsideWord extends TextObject\n     @editor.selectWord()\n     [true]\n \n-module.exports = {TextObject, SelectInsideWord}\n+class SelectInsideQuotes extends TextObject\n+  constructor: (@editor, @char) ->\n+\n+  findOpeningQuote: (pos) ->",
        "path": "lib/text-objects.coffee",
        "position": null,
        "original_position": 13,
        "commit_id": "e409030703c492201c845a04d70ec4ce2a5ba6e4",
        "original_commit_id": "b9b459f5d2bf7bfad20cd3d5898e47217eef5eb8",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Let's add a comment here and in SelectInsideBracket that the reason this almost-but-not-quite-repeated code is different is because of the depth checks in the bracket matcher.\n",
        "created_at": "2014-05-30T21:06:29Z",
        "updated_at": "2014-06-06T20:51:51Z",
        "html_url": "https://github.com/atom/vim-mode/pull/286#discussion_r13250522",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/286",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13250522"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/286#discussion_r13250522"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/286"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13250571",
        "pull_request_review_id": null,
        "id": 13250571,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjUwNTcx",
        "diff_hunk": "@@ -45,3 +45,51 @@ describe \"TextObjects\", ->\n       keydown('w')\n \n       expect(editor.getSelectedScreenRange()).toEqual [[0, 6], [0, 11]]\n+\n+  describe \"the 'i(' text object\", ->\n+    beforeEach ->\n+      editor.setText(\"( something in here and in (here) )\")\n+      editor.setCursorScreenPosition([0, 9])\n+\n+    it \"applies operators inside the current word in operator-pending mode\", ->\n+      keydown('d')\n+      keydown('i')\n+      keydown('(')\n+      expect(editor.getText()).toBe \"()\"\n+      expect(editor.getCursorScreenPosition()).toEqual [0, 1]\n+      expect(editorView).not.toHaveClass('operator-pending-mode')\n+      expect(editorView).toHaveClass('command-mode')\n+\n+    it \"applies operators inside the current word in operator-pending mode (second test)\", ->\n+      editor.setCursorScreenPosition([0, 29])\n+      keydown('d')\n+      keydown('i')\n+      keydown('(')\n+      expect(editor.getText()).toBe \"( something in here and in () )\"\n+      expect(editor.getCursorScreenPosition()).toEqual [0, 28]\n+      expect(editorView).not.toHaveClass('operator-pending-mode')\n+      expect(editorView).toHaveClass('command-mode')\n+\n+  describe \"the 'i\\'' text object\", ->\n+    beforeEach ->\n+      editor.setText(\"' something in here and in 'here' '\")\n+      editor.setCursorScreenPosition([0, 9])\n+\n+    it \"applies operators inside the current word in operator-pending mode\", ->\n+      keydown('d')\n+      keydown('i')\n+      keydown('\\'')\n+      expect(editor.getText()).toBe \"''here' '\"\n+      expect(editor.getCursorScreenPosition()).toEqual [0, 1]\n+      expect(editorView).not.toHaveClass('operator-pending-mode')\n+      expect(editorView).toHaveClass('command-mode')\n+\n+    it \"applies operators inside the current word in operator-pending mode (second test)\", ->\n+      editor.setCursorScreenPosition([0, 29])\n+      keydown('d')\n+      keydown('i')\n+      keydown('\\'')\n+      expect(editor.getText()).toBe \"' something in here and in '' '\"\n+      expect(editor.getCursorScreenPosition()).toEqual [0, 28]\n+      expect(editorView).not.toHaveClass('operator-pending-mode')\n+      expect(editorView).toHaveClass('command-mode')",
        "path": "spec/text-objects-spec.coffee",
        "position": 100,
        "original_position": 51,
        "commit_id": "e409030703c492201c845a04d70ec4ce2a5ba6e4",
        "original_commit_id": "b9b459f5d2bf7bfad20cd3d5898e47217eef5eb8",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "These tests are perfect, but can we add them for `}`, `>`, and `\"` too?\n",
        "created_at": "2014-05-30T21:07:40Z",
        "updated_at": "2014-06-06T20:51:51Z",
        "html_url": "https://github.com/atom/vim-mode/pull/286#discussion_r13250571",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/286",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13250571"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/286#discussion_r13250571"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/286"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13519250",
        "pull_request_review_id": null,
        "id": 13519250,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTE5MjUw",
        "diff_hunk": "@@ -537,34 +537,77 @@ describe \"Motions\", ->\n       editor.setCursorScreenPosition([0, 2])\n \n     describe \"as a motion\", ->\n-      beforeEach ->\n-        keydown('g')\n-        keydown('g')\n+      describe \"in command mode\", ->\n+        beforeEach ->\n+          keydown('g')\n+          keydown('g')\n \n-      it \"moves the cursor to the beginning of the first line\", ->\n-        expect(editor.getCursorScreenPosition()).toEqual [0, 1]\n+        it \"moves the cursor to the beginning of the first line\", ->\n+          expect(editor.getCursorScreenPosition()).toEqual [0, 1]\n+\n+      describe \"in linewise visual mode\", ->\n+        beforeEach ->\n+          editor.setCursorScreenPosition([1, 0])\n+          vimState.activateVisualMode('linewise')\n+          keydown('g')\n+          keydown('g')\n+\n+        it \"selects to the first line in the file\", ->\n+          expect(editor.getSelectedText()).toBe \" 1abc\\n 2\\n\"\n+\n+        it \"moves the cursor to a specified line\", ->\n+          expect(editor.getCursorScreenPosition()).toEqual [0, 0]\n+\n+      describe \"in characterwise visual mode\", ->\n+        beforeEach ->\n+          editor.setCursorScreenPosition([1, 1])\n+          vimState.activateVisualMode()\n+          keydown('g')\n+          keydown('g')\n+\n+        it \"selects to the first line in the file\", ->\n+          expect(editor.getSelectedText()).toBe \"1abc\\n 2\"",
        "path": "spec/motions-spec.coffee",
        "position": 38,
        "original_position": 38,
        "commit_id": "f380d3d67e7daac8d45ffae830c607c11775fe21",
        "original_commit_id": "f380d3d67e7daac8d45ffae830c607c11775fe21",
        "user": {
            "login": "tony612",
            "id": 1253659,
            "node_id": "MDQ6VXNlcjEyNTM2NTk=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1253659?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tony612",
            "html_url": "https://github.com/tony612",
            "followers_url": "https://api.github.com/users/tony612/followers",
            "following_url": "https://api.github.com/users/tony612/following{/other_user}",
            "gists_url": "https://api.github.com/users/tony612/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tony612/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tony612/subscriptions",
            "organizations_url": "https://api.github.com/users/tony612/orgs",
            "repos_url": "https://api.github.com/users/tony612/repos",
            "events_url": "https://api.github.com/users/tony612/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tony612/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "In this doc http://vimhelp.appspot.com/motion.txt.html#gg, it says:\n\n> Goto line [count], default first line, on the first non-blank character linewise.  If 'startofline' not set, keep the same column.\n\nAnd in my situation, `gg` took me to the first non-blank character. Did you set the `startofline` to `off`?\n\nOr someone else can try this?\n",
        "created_at": "2014-06-07T12:36:17Z",
        "updated_at": "2014-06-07T12:42:06Z",
        "html_url": "https://github.com/atom/vim-mode/pull/275#discussion_r13519250",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/275",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13519250"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/275#discussion_r13519250"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/275"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13521568",
        "pull_request_review_id": null,
        "id": 13521568,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTIxNTY4",
        "diff_hunk": "@@ -537,34 +537,77 @@ describe \"Motions\", ->\n       editor.setCursorScreenPosition([0, 2])\n \n     describe \"as a motion\", ->\n-      beforeEach ->\n-        keydown('g')\n-        keydown('g')\n+      describe \"in command mode\", ->\n+        beforeEach ->\n+          keydown('g')\n+          keydown('g')\n \n-      it \"moves the cursor to the beginning of the first line\", ->\n-        expect(editor.getCursorScreenPosition()).toEqual [0, 1]\n+        it \"moves the cursor to the beginning of the first line\", ->\n+          expect(editor.getCursorScreenPosition()).toEqual [0, 1]\n+\n+      describe \"in linewise visual mode\", ->\n+        beforeEach ->\n+          editor.setCursorScreenPosition([1, 0])\n+          vimState.activateVisualMode('linewise')\n+          keydown('g')\n+          keydown('g')\n+\n+        it \"selects to the first line in the file\", ->\n+          expect(editor.getSelectedText()).toBe \" 1abc\\n 2\\n\"\n+\n+        it \"moves the cursor to a specified line\", ->\n+          expect(editor.getCursorScreenPosition()).toEqual [0, 0]\n+\n+      describe \"in characterwise visual mode\", ->\n+        beforeEach ->\n+          editor.setCursorScreenPosition([1, 1])\n+          vimState.activateVisualMode()\n+          keydown('g')\n+          keydown('g')\n+\n+        it \"selects to the first line in the file\", ->\n+          expect(editor.getSelectedText()).toBe \"1abc\\n 2\"",
        "path": "spec/motions-spec.coffee",
        "position": 38,
        "original_position": 38,
        "commit_id": "f380d3d67e7daac8d45ffae830c607c11775fe21",
        "original_commit_id": "f380d3d67e7daac8d45ffae830c607c11775fe21",
        "user": {
            "login": "erwinmombay",
            "id": 354746,
            "node_id": "MDQ6VXNlcjM1NDc0Ng==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/354746?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erwinmombay",
            "html_url": "https://github.com/erwinmombay",
            "followers_url": "https://api.github.com/users/erwinmombay/followers",
            "following_url": "https://api.github.com/users/erwinmombay/following{/other_user}",
            "gists_url": "https://api.github.com/users/erwinmombay/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erwinmombay/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erwinmombay/subscriptions",
            "organizations_url": "https://api.github.com/users/erwinmombay/orgs",
            "repos_url": "https://api.github.com/users/erwinmombay/repos",
            "events_url": "https://api.github.com/users/erwinmombay/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erwinmombay/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "i can confirm this behavior that it should be on the first non-blank character. try running in `vim -u NONE` so that no plugins/vimrc settings get in the way\n",
        "created_at": "2014-06-07T21:43:09Z",
        "updated_at": "2014-06-07T21:43:09Z",
        "html_url": "https://github.com/atom/vim-mode/pull/275#discussion_r13521568",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/275",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13521568"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/275#discussion_r13521568"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/275"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13522520",
        "pull_request_review_id": null,
        "id": 13522520,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTIyNTIw",
        "diff_hunk": "@@ -537,34 +537,77 @@ describe \"Motions\", ->\n       editor.setCursorScreenPosition([0, 2])\n \n     describe \"as a motion\", ->\n-      beforeEach ->\n-        keydown('g')\n-        keydown('g')\n+      describe \"in command mode\", ->\n+        beforeEach ->\n+          keydown('g')\n+          keydown('g')\n \n-      it \"moves the cursor to the beginning of the first line\", ->\n-        expect(editor.getCursorScreenPosition()).toEqual [0, 1]\n+        it \"moves the cursor to the beginning of the first line\", ->\n+          expect(editor.getCursorScreenPosition()).toEqual [0, 1]\n+\n+      describe \"in linewise visual mode\", ->\n+        beforeEach ->\n+          editor.setCursorScreenPosition([1, 0])\n+          vimState.activateVisualMode('linewise')\n+          keydown('g')\n+          keydown('g')\n+\n+        it \"selects to the first line in the file\", ->\n+          expect(editor.getSelectedText()).toBe \" 1abc\\n 2\\n\"\n+\n+        it \"moves the cursor to a specified line\", ->\n+          expect(editor.getCursorScreenPosition()).toEqual [0, 0]\n+\n+      describe \"in characterwise visual mode\", ->\n+        beforeEach ->\n+          editor.setCursorScreenPosition([1, 1])\n+          vimState.activateVisualMode()\n+          keydown('g')\n+          keydown('g')\n+\n+        it \"selects to the first line in the file\", ->\n+          expect(editor.getSelectedText()).toBe \"1abc\\n 2\"",
        "path": "spec/motions-spec.coffee",
        "position": 38,
        "original_position": 38,
        "commit_id": "f380d3d67e7daac8d45ffae830c607c11775fe21",
        "original_commit_id": "f380d3d67e7daac8d45ffae830c607c11775fe21",
        "user": {
            "login": "tony612",
            "id": 1253659,
            "node_id": "MDQ6VXNlcjEyNTM2NTk=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1253659?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tony612",
            "html_url": "https://github.com/tony612",
            "followers_url": "https://api.github.com/users/tony612/followers",
            "following_url": "https://api.github.com/users/tony612/following{/other_user}",
            "gists_url": "https://api.github.com/users/tony612/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tony612/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tony612/subscriptions",
            "organizations_url": "https://api.github.com/users/tony612/orgs",
            "repos_url": "https://api.github.com/users/tony612/repos",
            "events_url": "https://api.github.com/users/tony612/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tony612/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@erwinmombay Thanks for this tip :+1: \n",
        "created_at": "2014-06-08T04:06:06Z",
        "updated_at": "2014-06-08T04:06:06Z",
        "html_url": "https://github.com/atom/vim-mode/pull/275#discussion_r13522520",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/275",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13522520"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/275#discussion_r13522520"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/275"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13529561",
        "pull_request_review_id": null,
        "id": 13529561,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTI5NTYx",
        "diff_hunk": "@@ -399,12 +399,23 @@ class MoveToLastCharacterOfLine extends Motion\n       true\n \n class MoveToStartOfFile extends MoveToLine\n+  isLinewise: -> @vimState.mode == 'visual' and @vimState.submode == 'linewise'",
        "path": "lib/motions/general-motions.coffee",
        "position": 4,
        "original_position": 4,
        "commit_id": "f380d3d67e7daac8d45ffae830c607c11775fe21",
        "original_commit_id": "f380d3d67e7daac8d45ffae830c607c11775fe21",
        "user": {
            "login": "erwinmombay",
            "id": 354746,
            "node_id": "MDQ6VXNlcjM1NDc0Ng==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/354746?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erwinmombay",
            "html_url": "https://github.com/erwinmombay",
            "followers_url": "https://api.github.com/users/erwinmombay/followers",
            "following_url": "https://api.github.com/users/erwinmombay/following{/other_user}",
            "gists_url": "https://api.github.com/users/erwinmombay/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erwinmombay/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erwinmombay/subscriptions",
            "organizations_url": "https://api.github.com/users/erwinmombay/orgs",
            "repos_url": "https://api.github.com/users/erwinmombay/repos",
            "events_url": "https://api.github.com/users/erwinmombay/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erwinmombay/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "can we move `isLinewise` to `MoveToLine` instead? i am trying to fix the `G` (by creating a `MoveToEndOfFile` class) implementation and im going to need it there too (trying to fix https://github.com/atom/vim-mode/issues/291)\n",
        "created_at": "2014-06-09T05:08:38Z",
        "updated_at": "2014-06-09T05:09:53Z",
        "html_url": "https://github.com/atom/vim-mode/pull/275#discussion_r13529561",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/275",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13529561"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/275#discussion_r13529561"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/275"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13529889",
        "pull_request_review_id": null,
        "id": 13529889,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTI5ODg5",
        "diff_hunk": "@@ -399,12 +399,23 @@ class MoveToLastCharacterOfLine extends Motion\n       true\n \n class MoveToStartOfFile extends MoveToLine\n+  isLinewise: -> @vimState.mode == 'visual' and @vimState.submode == 'linewise'",
        "path": "lib/motions/general-motions.coffee",
        "position": 4,
        "original_position": 4,
        "commit_id": "f380d3d67e7daac8d45ffae830c607c11775fe21",
        "original_commit_id": "f380d3d67e7daac8d45ffae830c607c11775fe21",
        "user": {
            "login": "erwinmombay",
            "id": 354746,
            "node_id": "MDQ6VXNlcjM1NDc0Ng==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/354746?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erwinmombay",
            "html_url": "https://github.com/erwinmombay",
            "followers_url": "https://api.github.com/users/erwinmombay/followers",
            "following_url": "https://api.github.com/users/erwinmombay/following{/other_user}",
            "gists_url": "https://api.github.com/users/erwinmombay/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erwinmombay/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erwinmombay/subscriptions",
            "organizations_url": "https://api.github.com/users/erwinmombay/orgs",
            "repos_url": "https://api.github.com/users/erwinmombay/repos",
            "events_url": "https://api.github.com/users/erwinmombay/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erwinmombay/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "actually nevermind... making that change breaks alot of tests\n",
        "created_at": "2014-06-09T05:42:40Z",
        "updated_at": "2014-06-09T06:41:15Z",
        "html_url": "https://github.com/atom/vim-mode/pull/275#discussion_r13529889",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/275",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13529889"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/275#discussion_r13529889"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/275"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13791784",
        "pull_request_review_id": null,
        "id": 13791784,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzkxNzg0",
        "diff_hunk": "@@ -23,6 +23,19 @@ describe \"Operators\", ->\n     opts.raw = true\n     keydown(key, opts)\n \n+  describe \"cancel operation is robust\", ->\n+    it \"can call cancel operation, even if no operator pending\", ->\n+      expect(-> vimState.pushOperations(new Input(''))).toThrow()\n+\n+      # make sure commandModeInputView is created\n+      keydown('/')\n+      expect(vimState.isOperatorPending()).toBe true\n+      editor.commandModeInputView.viewModel.cancel()\n+\n+      # now again cancel op, although there is none pending\n+      expect(vimState.isOperatorPending()).toBe false\n+      editor.commandModeInputView.viewModel.cancel()",
        "path": "spec/operators-spec.coffee",
        "position": null,
        "original_position": 15,
        "commit_id": "16b8de8db315bbbcce937811d749843aa9895a12",
        "original_commit_id": "81459ae180e87a62dffb47f6521b73bc2f067383",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This test is looking better, but should there be an expectation after this `cancel()`? If we only expect it to not raise an exception, can we add a comment to that effect?\n",
        "created_at": "2014-06-16T04:44:52Z",
        "updated_at": "2014-06-16T05:11:36Z",
        "html_url": "https://github.com/atom/vim-mode/pull/290#discussion_r13791784",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/290",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13791784"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/290#discussion_r13791784"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/290"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13447085",
        "pull_request_review_id": null,
        "id": 13447085,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNDQ3MDg1",
        "diff_hunk": "@@ -481,11 +481,16 @@ class VimState\n   updateStatusBar: ->\n     if !$('#status-bar-vim-mode').length\n       atom.packages.once 'activated', ->\n-        atom.workspaceView.statusBar?.prependRight(\"<div id='status-bar-vim-mode' class='inline-block'>Command</div>\")\n+        atom.workspaceView.statusBar?.prependRight(\"<div id='status-bar-vim-mode' class='inline-block status-bar-vim-mode-command'>Command</div>\")",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 5,
        "commit_id": "51f1741e6f1eb4f35cb512ee40d1c635615d7111",
        "original_commit_id": "326a85431d973573b0e687a09b646081c61f6a78",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It's an option to start in insert mode, so this won't do. Maybe just call this function recursively in the `once` block to set it up correctly?\n",
        "created_at": "2014-06-05T15:45:31Z",
        "updated_at": "2014-06-17T06:37:51Z",
        "html_url": "https://github.com/atom/vim-mode/pull/302#discussion_r13447085",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/302",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13447085"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/302#discussion_r13447085"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/302"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13474131",
        "pull_request_review_id": null,
        "id": 13474131,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNDc0MTMx",
        "diff_hunk": "@@ -481,11 +481,16 @@ class VimState\n   updateStatusBar: ->\n     if !$('#status-bar-vim-mode').length\n       atom.packages.once 'activated', ->\n-        atom.workspaceView.statusBar?.prependRight(\"<div id='status-bar-vim-mode' class='inline-block'>Command</div>\")\n+        atom.workspaceView.statusBar?.prependRight(\"<div id='status-bar-vim-mode' class='inline-block status-bar-vim-mode-command'>Command</div>\")",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 5,
        "commit_id": "51f1741e6f1eb4f35cb512ee40d1c635615d7111",
        "original_commit_id": "326a85431d973573b0e687a09b646081c61f6a78",
        "user": {
            "login": "e-jigsaw",
            "id": 557961,
            "node_id": "MDQ6VXNlcjU1Nzk2MQ==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/557961?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/e-jigsaw",
            "html_url": "https://github.com/e-jigsaw",
            "followers_url": "https://api.github.com/users/e-jigsaw/followers",
            "following_url": "https://api.github.com/users/e-jigsaw/following{/other_user}",
            "gists_url": "https://api.github.com/users/e-jigsaw/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/e-jigsaw/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/e-jigsaw/subscriptions",
            "organizations_url": "https://api.github.com/users/e-jigsaw/orgs",
            "repos_url": "https://api.github.com/users/e-jigsaw/repos",
            "events_url": "https://api.github.com/users/e-jigsaw/events{/privacy}",
            "received_events_url": "https://api.github.com/users/e-jigsaw/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Thats right, I fixed it.\n",
        "created_at": "2014-06-06T02:07:25Z",
        "updated_at": "2014-06-17T06:37:51Z",
        "html_url": "https://github.com/atom/vim-mode/pull/302#discussion_r13474131",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/302",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13474131"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/302#discussion_r13474131"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/302"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13495711",
        "pull_request_review_id": null,
        "id": 13495711,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNDk1NzEx",
        "diff_hunk": "@@ -480,12 +480,18 @@ class VimState\n \n   updateStatusBar: ->\n     if !$('#status-bar-vim-mode').length\n-      atom.packages.once 'activated', ->\n+      atom.packages.once 'activated', =>\n         atom.workspaceView.statusBar?.prependRight(\"<div id='status-bar-vim-mode' class='inline-block'>Command</div>\")\n+        @updateStatusBar()\n \n     if @mode is \"insert\"\n-      $('#status-bar-vim-mode').html(\"Insert\")\n+      @removeStatusBarClass()\n+      $('#status-bar-vim-mode').addClass('status-bar-vim-mode-insert').html(\"Insert\")\n     else if @mode is \"command\"\n-      $('#status-bar-vim-mode').html(\"Command\")\n+      @removeStatusBarClass()\n+      $('#status-bar-vim-mode').addClass('status-bar-vim-mode-command').html(\"Command\")\n     else if @mode is \"visual\"\n-      $('#status-bar-vim-mode').html(\"Visual\")\n+      @removeStatusBarClass()\n+      $('#status-bar-vim-mode').addClass('status-bar-vim-mode-visual').html(\"Visual\")\n+\n+  removeStatusBarClass: -> $('#status-bar-vim-mode').removeClass('status-bar-vim-mode-insert').removeClass('status-bar-vim-mode-command').removeClass('status-bar-vim-mode-visual')",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 22,
        "commit_id": "51f1741e6f1eb4f35cb512ee40d1c635615d7111",
        "original_commit_id": "5f24a4144c582c05145ac2374004d16132478c3b",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "We should be able to do `$('#status-bar-vim-mode').removeClass('status-bar-vim-mode-insert status-bar-vim-mode-command status-bar-vim-mode-visual')` and clean this up slightly\n",
        "created_at": "2014-06-06T15:37:35Z",
        "updated_at": "2014-06-17T06:37:51Z",
        "html_url": "https://github.com/atom/vim-mode/pull/302#discussion_r13495711",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/302",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13495711"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/302#discussion_r13495711"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/302"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13517736",
        "pull_request_review_id": null,
        "id": 13517736,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTE3NzM2",
        "diff_hunk": "@@ -480,12 +480,18 @@ class VimState\n \n   updateStatusBar: ->\n     if !$('#status-bar-vim-mode').length\n-      atom.packages.once 'activated', ->\n+      atom.packages.once 'activated', =>\n         atom.workspaceView.statusBar?.prependRight(\"<div id='status-bar-vim-mode' class='inline-block'>Command</div>\")\n+        @updateStatusBar()\n \n     if @mode is \"insert\"\n-      $('#status-bar-vim-mode').html(\"Insert\")\n+      @removeStatusBarClass()\n+      $('#status-bar-vim-mode').addClass('status-bar-vim-mode-insert').html(\"Insert\")\n     else if @mode is \"command\"\n-      $('#status-bar-vim-mode').html(\"Command\")\n+      @removeStatusBarClass()\n+      $('#status-bar-vim-mode').addClass('status-bar-vim-mode-command').html(\"Command\")\n     else if @mode is \"visual\"\n-      $('#status-bar-vim-mode').html(\"Visual\")\n+      @removeStatusBarClass()\n+      $('#status-bar-vim-mode').addClass('status-bar-vim-mode-visual').html(\"Visual\")\n+\n+  removeStatusBarClass: -> $('#status-bar-vim-mode').removeClass('status-bar-vim-mode-insert').removeClass('status-bar-vim-mode-command').removeClass('status-bar-vim-mode-visual')",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 22,
        "commit_id": "51f1741e6f1eb4f35cb512ee40d1c635615d7111",
        "original_commit_id": "5f24a4144c582c05145ac2374004d16132478c3b",
        "user": {
            "login": "e-jigsaw",
            "id": 557961,
            "node_id": "MDQ6VXNlcjU1Nzk2MQ==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/557961?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/e-jigsaw",
            "html_url": "https://github.com/e-jigsaw",
            "followers_url": "https://api.github.com/users/e-jigsaw/followers",
            "following_url": "https://api.github.com/users/e-jigsaw/following{/other_user}",
            "gists_url": "https://api.github.com/users/e-jigsaw/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/e-jigsaw/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/e-jigsaw/subscriptions",
            "organizations_url": "https://api.github.com/users/e-jigsaw/orgs",
            "repos_url": "https://api.github.com/users/e-jigsaw/repos",
            "events_url": "https://api.github.com/users/e-jigsaw/events{/privacy}",
            "received_events_url": "https://api.github.com/users/e-jigsaw/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "yes, fixed!\n",
        "created_at": "2014-06-07T03:50:22Z",
        "updated_at": "2014-06-17T06:37:51Z",
        "html_url": "https://github.com/atom/vim-mode/pull/302#discussion_r13517736",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/302",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13517736"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/302#discussion_r13517736"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/302"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13601826",
        "pull_request_review_id": null,
        "id": 13601826,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjAxODI2",
        "diff_hunk": "@@ -480,12 +480,18 @@ class VimState\n \n   updateStatusBar: ->\n     if !$('#status-bar-vim-mode').length\n-      atom.packages.once 'activated', ->\n+      atom.packages.once 'activated', =>\n         atom.workspaceView.statusBar?.prependRight(\"<div id='status-bar-vim-mode' class='inline-block'>Command</div>\")\n+        @updateStatusBar()\n \n     if @mode is \"insert\"\n-      $('#status-bar-vim-mode').html(\"Insert\")\n+      @removeStatusBarClass()",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 11,
        "commit_id": "51f1741e6f1eb4f35cb512ee40d1c635615d7111",
        "original_commit_id": "19824342314b74ce33f9b50bed296bda8a0a195a",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Why not just call this once, before the `if` statement starts? Would read a little cleaner.\n",
        "created_at": "2014-06-10T15:54:16Z",
        "updated_at": "2014-06-17T06:37:51Z",
        "html_url": "https://github.com/atom/vim-mode/pull/302#discussion_r13601826",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/302",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13601826"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/302#discussion_r13601826"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/302"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13631460",
        "pull_request_review_id": null,
        "id": 13631460,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjMxNDYw",
        "diff_hunk": "@@ -480,12 +480,18 @@ class VimState\n \n   updateStatusBar: ->\n     if !$('#status-bar-vim-mode').length\n-      atom.packages.once 'activated', ->\n+      atom.packages.once 'activated', =>\n         atom.workspaceView.statusBar?.prependRight(\"<div id='status-bar-vim-mode' class='inline-block'>Command</div>\")\n+        @updateStatusBar()\n \n     if @mode is \"insert\"\n-      $('#status-bar-vim-mode').html(\"Insert\")\n+      @removeStatusBarClass()",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 11,
        "commit_id": "51f1741e6f1eb4f35cb512ee40d1c635615d7111",
        "original_commit_id": "19824342314b74ce33f9b50bed296bda8a0a195a",
        "user": {
            "login": "e-jigsaw",
            "id": 557961,
            "node_id": "MDQ6VXNlcjU1Nzk2MQ==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/557961?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/e-jigsaw",
            "html_url": "https://github.com/e-jigsaw",
            "followers_url": "https://api.github.com/users/e-jigsaw/followers",
            "following_url": "https://api.github.com/users/e-jigsaw/following{/other_user}",
            "gists_url": "https://api.github.com/users/e-jigsaw/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/e-jigsaw/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/e-jigsaw/subscriptions",
            "organizations_url": "https://api.github.com/users/e-jigsaw/orgs",
            "repos_url": "https://api.github.com/users/e-jigsaw/repos",
            "events_url": "https://api.github.com/users/e-jigsaw/events{/privacy}",
            "received_events_url": "https://api.github.com/users/e-jigsaw/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I fixed it.\n",
        "created_at": "2014-06-11T02:39:52Z",
        "updated_at": "2014-06-17T06:37:51Z",
        "html_url": "https://github.com/atom/vim-mode/pull/302#discussion_r13631460",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/302",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/13631460"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/302#discussion_r13631460"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/302"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/14327126",
        "pull_request_review_id": null,
        "id": 14327126,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MzI3MTI2",
        "diff_hunk": "@@ -83,7 +83,7 @@ class Delete extends Operator\n   # count - The number of times to execute.\n   #\n   # Returns nothing.\n-  execute: (count=1) ->\n+  execute: (count) ->",
        "path": "lib/operators/general-operators.coffee",
        "position": 5,
        "original_position": 5,
        "commit_id": "b3e33394fde95c4a51e586b22ae655333e65cc9e",
        "original_commit_id": "b3e33394fde95c4a51e586b22ae655333e65cc9e",
        "user": {
            "login": "daveenguyen",
            "id": 2568174,
            "node_id": "MDQ6VXNlcjI1NjgxNzQ=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/2568174?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/daveenguyen",
            "html_url": "https://github.com/daveenguyen",
            "followers_url": "https://api.github.com/users/daveenguyen/followers",
            "following_url": "https://api.github.com/users/daveenguyen/following{/other_user}",
            "gists_url": "https://api.github.com/users/daveenguyen/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/daveenguyen/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/daveenguyen/subscriptions",
            "organizations_url": "https://api.github.com/users/daveenguyen/orgs",
            "repos_url": "https://api.github.com/users/daveenguyen/repos",
            "events_url": "https://api.github.com/users/daveenguyen/events{/privacy}",
            "received_events_url": "https://api.github.com/users/daveenguyen/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This makes `dG` use the default `count=@editor.getLineCount()` from `MoveToLine`.\n",
        "created_at": "2014-06-29T01:46:43Z",
        "updated_at": "2014-06-29T01:46:43Z",
        "html_url": "https://github.com/atom/vim-mode/pull/332#discussion_r14327126",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/332",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/14327126"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/332#discussion_r14327126"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/332"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/14327127",
        "pull_request_review_id": null,
        "id": 14327127,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MzI3MTI3",
        "diff_hunk": "@@ -402,7 +402,12 @@ class MoveToLine extends Motion\n   #  requireEOL - if true, ensure an end of line character is always selected\n   select: (count=@editor.getLineCount(), {requireEOL}={}) ->\n     {row, column} = @editor.getCursorBufferPosition()\n-    @editor.setSelectedBufferRange(@selectRows(row, row + (count - 1), requireEOL: requireEOL))\n+    min = row\n+    max = count - 1;\n+    if (min > max)\n+        min = max\n+        max = row\n+    @editor.setSelectedBufferRange(@selectRows(min, max, requireEOL: requireEOL))",
        "path": "lib/motions/general-motions.coffee",
        "position": 10,
        "original_position": 10,
        "commit_id": "b3e33394fde95c4a51e586b22ae655333e65cc9e",
        "original_commit_id": "b3e33394fde95c4a51e586b22ae655333e65cc9e",
        "user": {
            "login": "daveenguyen",
            "id": 2568174,
            "node_id": "MDQ6VXNlcjI1NjgxNzQ=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/2568174?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/daveenguyen",
            "html_url": "https://github.com/daveenguyen",
            "followers_url": "https://api.github.com/users/daveenguyen/followers",
            "following_url": "https://api.github.com/users/daveenguyen/following{/other_user}",
            "gists_url": "https://api.github.com/users/daveenguyen/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/daveenguyen/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/daveenguyen/subscriptions",
            "organizations_url": "https://api.github.com/users/daveenguyen/orgs",
            "repos_url": "https://api.github.com/users/daveenguyen/repos",
            "events_url": "https://api.github.com/users/daveenguyen/events{/privacy}",
            "received_events_url": "https://api.github.com/users/daveenguyen/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Originally the selections were relative to the row. That made d#G motions select the wrong lines.\n`selectRows` with the bigger number first would select lines between the targeted lines.\n",
        "created_at": "2014-06-29T01:49:09Z",
        "updated_at": "2014-07-04T07:48:53Z",
        "html_url": "https://github.com/atom/vim-mode/pull/332#discussion_r14327127",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/332",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/14327127"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/332#discussion_r14327127"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/332"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/15236544",
        "pull_request_review_id": null,
        "id": 15236544,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MjM2NTQ0",
        "diff_hunk": "@@ -5,14 +5,16 @@\n class Find extends MotionWithInput\n   constructor: (@editorView, @vimState) ->\n     super(@editorView, @vimState)\n+    Find.currentFind = @",
        "path": "lib/motions/find-motion.coffee",
        "position": null,
        "original_position": 4,
        "commit_id": "ce3e381c9f6a97a3fef6f211b29177423dd05d66",
        "original_commit_id": "a0f2f9b6f259fb931229092e30c1cee1393e2038",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "All state needs to be attached to `vimState`. Just `@vimState.currentFind` should be fine.\n",
        "created_at": "2014-07-22T15:58:22Z",
        "updated_at": "2014-07-23T02:10:12Z",
        "html_url": "https://github.com/atom/vim-mode/pull/351#discussion_r15236544",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/351",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/15236544"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/351#discussion_r15236544"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/351"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/15236697",
        "pull_request_review_id": null,
        "id": 15236697,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MjM2Njk3",
        "diff_hunk": "@@ -45,6 +47,13 @@ class Find extends MotionWithInput\n       return [true]\n     [false]\n \n+  repeat: (opts={}) ->\n+    opts.reverse = !!opts.reverse\n+    if opts.reverse isnt @repeatReversed\n+      @reverse()\n+      @repeatReversed = opts.reverse",
        "path": "lib/motions/find-motion.coffee",
        "position": 36,
        "original_position": 36,
        "commit_id": "ce3e381c9f6a97a3fef6f211b29177423dd05d66",
        "original_commit_id": "a0f2f9b6f259fb931229092e30c1cee1393e2038",
        "user": {
            "login": "bhuga",
            "id": 12676,
            "node_id": "MDQ6VXNlcjEyNjc2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhuga",
            "html_url": "https://github.com/bhuga",
            "followers_url": "https://api.github.com/users/bhuga/followers",
            "following_url": "https://api.github.com/users/bhuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhuga/subscriptions",
            "organizations_url": "https://api.github.com/users/bhuga/orgs",
            "repos_url": "https://api.github.com/users/bhuga/repos",
            "events_url": "https://api.github.com/users/bhuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Any reason this little dance can't just be `@reverse() if opts.reverse?`\n",
        "created_at": "2014-07-22T16:00:48Z",
        "updated_at": "2014-07-23T02:10:12Z",
        "html_url": "https://github.com/atom/vim-mode/pull/351#discussion_r15236697",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/351",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/15236697"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/351#discussion_r15236697"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/351"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/15268334",
        "pull_request_review_id": null,
        "id": 15268334,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MjY4MzM0",
        "diff_hunk": "@@ -5,14 +5,16 @@\n class Find extends MotionWithInput\n   constructor: (@editorView, @vimState) ->\n     super(@editorView, @vimState)\n+    Find.currentFind = @",
        "path": "lib/motions/find-motion.coffee",
        "position": null,
        "original_position": 4,
        "commit_id": "ce3e381c9f6a97a3fef6f211b29177423dd05d66",
        "original_commit_id": "a0f2f9b6f259fb931229092e30c1cee1393e2038",
        "user": {
            "login": "garcg",
            "id": 4009153,
            "node_id": "MDQ6VXNlcjQwMDkxNTM=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4009153?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/garcg",
            "html_url": "https://github.com/garcg",
            "followers_url": "https://api.github.com/users/garcg/followers",
            "following_url": "https://api.github.com/users/garcg/following{/other_user}",
            "gists_url": "https://api.github.com/users/garcg/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/garcg/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/garcg/subscriptions",
            "organizations_url": "https://api.github.com/users/garcg/orgs",
            "repos_url": "https://api.github.com/users/garcg/repos",
            "events_url": "https://api.github.com/users/garcg/events{/privacy}",
            "received_events_url": "https://api.github.com/users/garcg/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ok, changed.\n",
        "created_at": "2014-07-23T02:13:14Z",
        "updated_at": "2014-07-23T02:13:14Z",
        "html_url": "https://github.com/atom/vim-mode/pull/351#discussion_r15268334",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/351",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/15268334"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/351#discussion_r15268334"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/351"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/15268564",
        "pull_request_review_id": null,
        "id": 15268564,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MjY4NTY0",
        "diff_hunk": "@@ -45,6 +47,13 @@ class Find extends MotionWithInput\n       return [true]\n     [false]\n \n+  repeat: (opts={}) ->\n+    opts.reverse = !!opts.reverse\n+    if opts.reverse isnt @repeatReversed\n+      @reverse()\n+      @repeatReversed = opts.reverse",
        "path": "lib/motions/find-motion.coffee",
        "position": 36,
        "original_position": 36,
        "commit_id": "ce3e381c9f6a97a3fef6f211b29177423dd05d66",
        "original_commit_id": "a0f2f9b6f259fb931229092e30c1cee1393e2038",
        "user": {
            "login": "garcg",
            "id": 4009153,
            "node_id": "MDQ6VXNlcjQwMDkxNTM=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4009153?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/garcg",
            "html_url": "https://github.com/garcg",
            "followers_url": "https://api.github.com/users/garcg/followers",
            "following_url": "https://api.github.com/users/garcg/following{/other_user}",
            "gists_url": "https://api.github.com/users/garcg/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/garcg/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/garcg/subscriptions",
            "organizations_url": "https://api.github.com/users/garcg/orgs",
            "repos_url": "https://api.github.com/users/garcg/repos",
            "events_url": "https://api.github.com/users/garcg/events{/privacy}",
            "received_events_url": "https://api.github.com/users/garcg/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It's because we don't want to reverse in subsequent presses of `,`. Only when the direction is different from the last repeat command.\n\nFor example, pressing `,` a first time goes backwards if we were searching forwards. Pressing `,` again should keep going backwards (instead of reversing again). \nAlso, pressing `;` should actually reverse if the last repeat was `,`.\n\n```\nf(->)   ,(<-)   ,(<-)   ;(->)   ;(->) \n```\n\nI hope that makes sense.\n",
        "created_at": "2014-07-23T02:24:39Z",
        "updated_at": "2014-07-23T02:24:39Z",
        "html_url": "https://github.com/atom/vim-mode/pull/351#discussion_r15268564",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/351",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/15268564"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/351#discussion_r15268564"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/351"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/15268873",
        "pull_request_review_id": null,
        "id": 15268873,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MjY4ODcz",
        "diff_hunk": "@@ -5,14 +5,16 @@\n class Find extends MotionWithInput\n   constructor: (@editorView, @vimState) ->\n     super(@editorView, @vimState)\n+    Find.currentFind = @",
        "path": "lib/motions/find-motion.coffee",
        "position": null,
        "original_position": 4,
        "commit_id": "ce3e381c9f6a97a3fef6f211b29177423dd05d66",
        "original_commit_id": "a0f2f9b6f259fb931229092e30c1cee1393e2038",
        "user": {
            "login": "garcg",
            "id": 4009153,
            "node_id": "MDQ6VXNlcjQwMDkxNTM=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4009153?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/garcg",
            "html_url": "https://github.com/garcg",
            "followers_url": "https://api.github.com/users/garcg/followers",
            "following_url": "https://api.github.com/users/garcg/following{/other_user}",
            "gists_url": "https://api.github.com/users/garcg/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/garcg/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/garcg/subscriptions",
            "organizations_url": "https://api.github.com/users/garcg/orgs",
            "repos_url": "https://api.github.com/users/garcg/repos",
            "events_url": "https://api.github.com/users/garcg/events{/privacy}",
            "received_events_url": "https://api.github.com/users/garcg/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "By the way, a heads up in case it should be changed to `vimState` as well: [search-motion](https://github.com/atom/vim-mode/blob/2ec1119b2a34587aae44f774b84a35d9cb207a68/lib/motions/search-motion.coffee#L11).\n",
        "created_at": "2014-07-23T02:43:16Z",
        "updated_at": "2014-07-23T02:43:16Z",
        "html_url": "https://github.com/atom/vim-mode/pull/351#discussion_r15268873",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/351",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/15268873"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/351#discussion_r15268873"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/351"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/16079169",
        "pull_request_review_id": null,
        "id": 16079169,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MDc5MTY5",
        "diff_hunk": "@@ -555,6 +563,18 @@ describe \"Operators\", ->\n \n     describe \"with linewise contents\", ->\n       beforeEach ->\n+        editor.getBuffer().setText(\"012\")\n+        editor.setCursorScreenPosition([0, 1])\n+        editor.selectRight()\n+        vimState.setRegister('\"', text: \" 345\\n\", type: 'linewise')\n+        keydown('p')\n+\n+      it \"replaces the current selection\", ->\n+        expect(editor.getText()).toBe \"0 345\\n2\"\n+        expect(editor.getCursorScreenPosition()).toEqual [1, 0]\n+\n+    describe \"with linewise contents\", ->\n+      beforeEach ->",
        "path": "spec/operators-spec.coffee",
        "position": null,
        "original_position": 30,
        "commit_id": "7e34b867b8bec1c9677a8358c118182aeeb8eb68",
        "original_commit_id": "02e1a0ae1763136cd7ba981b360214ef9cd03ed2",
        "user": {
            "login": "nathansobo",
            "id": 1789,
            "node_id": "MDQ6VXNlcjE3ODk=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1789?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nathansobo",
            "html_url": "https://github.com/nathansobo",
            "followers_url": "https://api.github.com/users/nathansobo/followers",
            "following_url": "https://api.github.com/users/nathansobo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nathansobo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nathansobo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nathansobo/subscriptions",
            "organizations_url": "https://api.github.com/users/nathansobo/orgs",
            "repos_url": "https://api.github.com/users/nathansobo/repos",
            "events_url": "https://api.github.com/users/nathansobo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nathansobo/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "It's kinda weird how we have multiple \"with linewise contents\" blocks here. I know that predated this PR, but would you be opposed to combining them before we add another?\n",
        "created_at": "2014-08-11T20:47:56Z",
        "updated_at": "2014-08-12T05:15:30Z",
        "html_url": "https://github.com/atom/vim-mode/pull/367#discussion_r16079169",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/367",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/16079169"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/367#discussion_r16079169"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/367"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/16096831",
        "pull_request_review_id": null,
        "id": 16096831,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MDk2ODMx",
        "diff_hunk": "@@ -156,7 +159,23 @@ class MoveUp extends MoveVertically\n       @editor.selectUp()\n \n     _.times count, =>\n-      @editor.selectUp()\n+      #bug 219, entering linewise visual mode \"V\" causes the first line to be omitted.\n+      #The fix is to incrementally add or subtract a new range with each line.\n+      #The initial selected range is built through the vim-state file. It is used to know whether to reference the start or end of a range.",
        "path": "lib/motions/general-motions.coffee",
        "position": 24,
        "original_position": 24,
        "commit_id": "7c820ac35ef006cd2de5f54a4fcad357531dd3bf",
        "original_commit_id": "7c820ac35ef006cd2de5f54a4fcad357531dd3bf",
        "user": {
            "login": "jspahrsummers",
            "id": 432536,
            "node_id": "MDQ6VXNlcjQzMjUzNg==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/432536?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jspahrsummers",
            "html_url": "https://github.com/jspahrsummers",
            "followers_url": "https://api.github.com/users/jspahrsummers/followers",
            "following_url": "https://api.github.com/users/jspahrsummers/following{/other_user}",
            "gists_url": "https://api.github.com/users/jspahrsummers/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jspahrsummers/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jspahrsummers/subscriptions",
            "organizations_url": "https://api.github.com/users/jspahrsummers/orgs",
            "repos_url": "https://api.github.com/users/jspahrsummers/repos",
            "events_url": "https://api.github.com/users/jspahrsummers/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jspahrsummers/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "No need to include these comments\u2014they'll quickly get out of date anyways.\n",
        "created_at": "2014-08-12T06:03:51Z",
        "updated_at": "2014-08-12T06:03:51Z",
        "html_url": "https://github.com/atom/vim-mode/pull/362#discussion_r16096831",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/362",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/16096831"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/362#discussion_r16096831"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/362"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/16096868",
        "pull_request_review_id": null,
        "id": 16096868,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MDk2ODY4",
        "diff_hunk": "@@ -156,7 +159,23 @@ class MoveUp extends MoveVertically\n       @editor.selectUp()\n \n     _.times count, =>\n-      @editor.selectUp()\n+      #bug 219, entering linewise visual mode \"V\" causes the first line to be omitted.\n+      #The fix is to incrementally add or subtract a new range with each line.\n+      #The initial selected range is built through the vim-state file. It is used to know whether to reference the start or end of a range.\n+      if @isLinewise()\n+        selection = @editor.getSelection()\n+        range = selection.getBufferRange().copy()\n+        if range.coversSameRows(@vimState.InitialSelectedRange)\n+          range.start.row--\n+        else\n+          if range.start.row < @vimState.InitialSelectedRange.start.row",
        "path": "lib/motions/general-motions.coffee",
        "position": 31,
        "original_position": 31,
        "commit_id": "7c820ac35ef006cd2de5f54a4fcad357531dd3bf",
        "original_commit_id": "7c820ac35ef006cd2de5f54a4fcad357531dd3bf",
        "user": {
            "login": "jspahrsummers",
            "id": 432536,
            "node_id": "MDQ6VXNlcjQzMjUzNg==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/432536?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jspahrsummers",
            "html_url": "https://github.com/jspahrsummers",
            "followers_url": "https://api.github.com/users/jspahrsummers/followers",
            "following_url": "https://api.github.com/users/jspahrsummers/following{/other_user}",
            "gists_url": "https://api.github.com/users/jspahrsummers/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jspahrsummers/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jspahrsummers/subscriptions",
            "organizations_url": "https://api.github.com/users/jspahrsummers/orgs",
            "repos_url": "https://api.github.com/users/jspahrsummers/repos",
            "events_url": "https://api.github.com/users/jspahrsummers/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jspahrsummers/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Seems like this could be combined with the above condition, so there's only one `if` and one `else`.\n",
        "created_at": "2014-08-12T06:05:05Z",
        "updated_at": "2014-08-12T06:05:05Z",
        "html_url": "https://github.com/atom/vim-mode/pull/362#discussion_r16096868",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/362",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/16096868"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/362#discussion_r16096868"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/362"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/16096899",
        "pull_request_review_id": null,
        "id": 16096899,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MDk2ODk5",
        "diff_hunk": "@@ -168,9 +187,29 @@ class MoveDown extends MoveVertically\n     1\n \n   select: (count=1) ->\n+\n     @editor.selectLine() unless @inVisualMode()\n+\n     _.times count, =>\n-      @editor.selectDown()\n+\n+      #bug 219, entering linewise visual mode \"V\" causes the first line to be omitted.\n+      #The fix is to incrementally add or subtract a new range with each line. \n+      #The initial selected range is built through the vim-state file. It is used to know whether to reference the start or end of a range.\n+      if @isLinewise()",
        "path": "lib/motions/general-motions.coffee",
        "position": 55,
        "original_position": 55,
        "commit_id": "7c820ac35ef006cd2de5f54a4fcad357531dd3bf",
        "original_commit_id": "7c820ac35ef006cd2de5f54a4fcad357531dd3bf",
        "user": {
            "login": "jspahrsummers",
            "id": 432536,
            "node_id": "MDQ6VXNlcjQzMjUzNg==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/432536?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jspahrsummers",
            "html_url": "https://github.com/jspahrsummers",
            "followers_url": "https://api.github.com/users/jspahrsummers/followers",
            "following_url": "https://api.github.com/users/jspahrsummers/following{/other_user}",
            "gists_url": "https://api.github.com/users/jspahrsummers/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jspahrsummers/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jspahrsummers/subscriptions",
            "organizations_url": "https://api.github.com/users/jspahrsummers/orgs",
            "repos_url": "https://api.github.com/users/jspahrsummers/repos",
            "events_url": "https://api.github.com/users/jspahrsummers/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jspahrsummers/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It looks like the body of this conditional is the same as the other one, except with `--` replaced by `++`. Maybe it'd make sense to abstract out to a method within `MoveVertically`?\n",
        "created_at": "2014-08-12T06:06:22Z",
        "updated_at": "2014-08-12T06:06:22Z",
        "html_url": "https://github.com/atom/vim-mode/pull/362#discussion_r16096899",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/362",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/16096899"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/362#discussion_r16096899"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/362"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/16096902",
        "pull_request_review_id": null,
        "id": 16096902,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MDk2OTAy",
        "diff_hunk": "@@ -18,6 +18,7 @@ class VimState\n   opStack: null\n   mode: null\n   submode: null\n+  InitialSelectedRange: null",
        "path": "lib/vim-state.coffee",
        "position": 4,
        "original_position": 4,
        "commit_id": "7c820ac35ef006cd2de5f54a4fcad357531dd3bf",
        "original_commit_id": "7c820ac35ef006cd2de5f54a4fcad357531dd3bf",
        "user": {
            "login": "jspahrsummers",
            "id": 432536,
            "node_id": "MDQ6VXNlcjQzMjUzNg==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/432536?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jspahrsummers",
            "html_url": "https://github.com/jspahrsummers",
            "followers_url": "https://api.github.com/users/jspahrsummers/followers",
            "following_url": "https://api.github.com/users/jspahrsummers/following{/other_user}",
            "gists_url": "https://api.github.com/users/jspahrsummers/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jspahrsummers/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jspahrsummers/subscriptions",
            "organizations_url": "https://api.github.com/users/jspahrsummers/orgs",
            "repos_url": "https://api.github.com/users/jspahrsummers/repos",
            "events_url": "https://api.github.com/users/jspahrsummers/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jspahrsummers/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This should start with a lowercase letter.\n",
        "created_at": "2014-08-12T06:06:30Z",
        "updated_at": "2014-08-12T06:06:30Z",
        "html_url": "https://github.com/atom/vim-mode/pull/362#discussion_r16096902",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/362",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/16096902"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/362#discussion_r16096902"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/362"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/16096304",
        "pull_request_review_id": null,
        "id": 16096304,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MDk2MzA0",
        "diff_hunk": "@@ -926,6 +926,33 @@ describe \"Motions\", ->\n         keydown('n')\n         expect(editor.getCursorBufferPosition()).toEqual [1, 0]\n \n+      it \"works in case sensitive mode\", ->\n+        editor.setText(\"abc\\nABC\\n\")",
        "path": "spec/motions-spec.coffee",
        "position": null,
        "original_position": 5,
        "commit_id": "61f3ab2835bfc421d2f1fb5f42a32b102e3827a9",
        "original_commit_id": "6e2a73defe53ae4492347ff38786eea31b62f415",
        "user": {
            "login": "jspahrsummers",
            "id": 432536,
            "node_id": "MDQ6VXNlcjQzMjUzNg==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/432536?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jspahrsummers",
            "html_url": "https://github.com/jspahrsummers",
            "followers_url": "https://api.github.com/users/jspahrsummers/followers",
            "following_url": "https://api.github.com/users/jspahrsummers/following{/other_user}",
            "gists_url": "https://api.github.com/users/jspahrsummers/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jspahrsummers/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jspahrsummers/subscriptions",
            "organizations_url": "https://api.github.com/users/jspahrsummers/orgs",
            "repos_url": "https://api.github.com/users/jspahrsummers/repos",
            "events_url": "https://api.github.com/users/jspahrsummers/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jspahrsummers/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It looks like this can start with `\\n`, just like the below ones, which would offer an opportunity to wrap them all in a `describe` and do this setup work in a `beforeEach`.\n",
        "created_at": "2014-08-12T05:33:23Z",
        "updated_at": "2014-08-12T15:05:24Z",
        "html_url": "https://github.com/atom/vim-mode/pull/366#discussion_r16096304",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/366",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/16096304"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/366#discussion_r16096304"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/366"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/18775858",
        "pull_request_review_id": null,
        "id": 18775858,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Nzc1ODU4",
        "diff_hunk": "@@ -141,11 +141,11 @@ class Yank extends Operator\n   #\n   # Returns nothing.\n   execute: (count=1) ->\n-    originalPosition = @editor.getCursorScreenPosition()\n+    selection = @editor.getLastSelection()\n     if _.contains(@motion.select(count), true)\n-      selectedPosition = @editor.getCursorScreenPosition()\n-      text = @editor.getSelection().getText()\n-      originalPosition = Point.min(originalPosition, selectedPosition)\n+      text = @editor.getLastSelection().getText()\n+      selectionRange = selection.getScreenRange()",
        "path": "lib/operators/general-operators.coffee",
        "position": 11,
        "original_position": 11,
        "commit_id": "128775e42d295a63dbcee5fb1892315123a150eb",
        "original_commit_id": "f712ca2a22582eccabe844d699991642fb6c26f5",
        "user": {
            "login": "isaachess",
            "id": 3473742,
            "node_id": "MDQ6VXNlcjM0NzM3NDI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/3473742?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/isaachess",
            "html_url": "https://github.com/isaachess",
            "followers_url": "https://api.github.com/users/isaachess/followers",
            "following_url": "https://api.github.com/users/isaachess/following{/other_user}",
            "gists_url": "https://api.github.com/users/isaachess/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/isaachess/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/isaachess/subscriptions",
            "organizations_url": "https://api.github.com/users/isaachess/orgs",
            "repos_url": "https://api.github.com/users/isaachess/repos",
            "events_url": "https://api.github.com/users/isaachess/events{/privacy}",
            "received_events_url": "https://api.github.com/users/isaachess/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Rather than just measure the screen position, we get the range of the selection and use that to check the selection position.\n",
        "created_at": "2014-10-13T15:29:45Z",
        "updated_at": "2014-10-15T14:34:37Z",
        "html_url": "https://github.com/atom/vim-mode/pull/417#discussion_r18775858",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/417",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/18775858"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/417#discussion_r18775858"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/417"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/18784248",
        "pull_request_review_id": null,
        "id": 18784248,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Nzg0MjQ4",
        "diff_hunk": "@@ -51,6 +51,8 @@ class SearchBase extends MotionWithInput\n   scan: ->\n     term = @input.characters\n     mod = 'g'\n+    if atom.config.get 'vim-mode.useSmartcaseForSearch'",
        "path": "lib/motions/search-motion.coffee",
        "position": null,
        "original_position": 4,
        "commit_id": "c99d5b4f7a4ab71635b19011c27c67e01aa251b6",
        "original_commit_id": "dc12261105997160a6182399631f701658ccc5c4",
        "user": {
            "login": "jspahrsummers",
            "id": 432536,
            "node_id": "MDQ6VXNlcjQzMjUzNg==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/432536?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jspahrsummers",
            "html_url": "https://github.com/jspahrsummers",
            "followers_url": "https://api.github.com/users/jspahrsummers/followers",
            "following_url": "https://api.github.com/users/jspahrsummers/following{/other_user}",
            "gists_url": "https://api.github.com/users/jspahrsummers/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jspahrsummers/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jspahrsummers/subscriptions",
            "organizations_url": "https://api.github.com/users/jspahrsummers/orgs",
            "repos_url": "https://api.github.com/users/jspahrsummers/repos",
            "events_url": "https://api.github.com/users/jspahrsummers/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jspahrsummers/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Should this be `Ignorecase` instead? My understanding is that `smartcase` forces case-sensitivity once you include an uppercase character.\n",
        "created_at": "2014-10-13T18:04:05Z",
        "updated_at": "2014-10-15T19:46:45Z",
        "html_url": "https://github.com/atom/vim-mode/pull/416#discussion_r18784248",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/416",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/18784248"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/416#discussion_r18784248"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/416"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/18785231",
        "pull_request_review_id": null,
        "id": 18785231,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Nzg1MjMx",
        "diff_hunk": "@@ -51,6 +51,8 @@ class SearchBase extends MotionWithInput\n   scan: ->\n     term = @input.characters\n     mod = 'g'\n+    if atom.config.get 'vim-mode.useSmartcaseForSearch'",
        "path": "lib/motions/search-motion.coffee",
        "position": null,
        "original_position": 4,
        "commit_id": "c99d5b4f7a4ab71635b19011c27c67e01aa251b6",
        "original_commit_id": "dc12261105997160a6182399631f701658ccc5c4",
        "user": {
            "login": "isaachess",
            "id": 3473742,
            "node_id": "MDQ6VXNlcjM0NzM3NDI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/3473742?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/isaachess",
            "html_url": "https://github.com/isaachess",
            "followers_url": "https://api.github.com/users/isaachess/followers",
            "following_url": "https://api.github.com/users/isaachess/following{/other_user}",
            "gists_url": "https://api.github.com/users/isaachess/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/isaachess/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/isaachess/subscriptions",
            "organizations_url": "https://api.github.com/users/isaachess/orgs",
            "repos_url": "https://api.github.com/users/isaachess/repos",
            "events_url": "https://api.github.com/users/isaachess/events{/privacy}",
            "received_events_url": "https://api.github.com/users/isaachess/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Sorry, I meant for it to work that way. I've updated it. If you have the 'smartcase' option selected, it will still allow case-sensitive search if you are including an upper-case letter.\n",
        "created_at": "2014-10-13T18:18:17Z",
        "updated_at": "2014-10-15T19:46:45Z",
        "html_url": "https://github.com/atom/vim-mode/pull/416#discussion_r18785231",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/416",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/18785231"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/416#discussion_r18785231"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/416"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/18916132",
        "pull_request_review_id": null,
        "id": 18916132,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTE2MTMy",
        "diff_hunk": "@@ -51,6 +51,9 @@ class SearchBase extends MotionWithInput\n   scan: ->\n     term = @input.characters\n     mod = 'g'\n+    usingSmartcase = atom.config.get 'vim-mode.useSmartcaseForSearch'\n+    if usingSmartcase && !term.match('[A-Z]')\n+      mod += 'i'\n     if term.indexOf('\\\\c') != -1\n       term = term.replace('\\\\c','')\n       mod += 'i'",
        "path": "lib/motions/search-motion.coffee",
        "position": null,
        "original_position": 9,
        "commit_id": "c99d5b4f7a4ab71635b19011c27c67e01aa251b6",
        "original_commit_id": "5161b684310a7dde1672a123926003f8a73d8b33",
        "user": {
            "login": "jspahrsummers",
            "id": 432536,
            "node_id": "MDQ6VXNlcjQzMjUzNg==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/432536?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jspahrsummers",
            "html_url": "https://github.com/jspahrsummers",
            "followers_url": "https://api.github.com/users/jspahrsummers/followers",
            "following_url": "https://api.github.com/users/jspahrsummers/following{/other_user}",
            "gists_url": "https://api.github.com/users/jspahrsummers/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jspahrsummers/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jspahrsummers/subscriptions",
            "organizations_url": "https://api.github.com/users/jspahrsummers/orgs",
            "repos_url": "https://api.github.com/users/jspahrsummers/repos",
            "events_url": "https://api.github.com/users/jspahrsummers/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jspahrsummers/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Would anything bad happen if two `i` modifiers get added?\n",
        "created_at": "2014-10-15T19:23:48Z",
        "updated_at": "2014-10-15T19:46:45Z",
        "html_url": "https://github.com/atom/vim-mode/pull/416#discussion_r18916132",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/416",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/18916132"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/416#discussion_r18916132"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/416"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/18916172",
        "pull_request_review_id": null,
        "id": 18916172,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTE2MTcy",
        "diff_hunk": "@@ -977,6 +977,22 @@ describe \"Motions\", ->\n           keydown('n')\n           expect(editor.getCursorBufferPosition()).toEqual [2, 0]\n \n+        it \"uses Smartcase insensitive search if useSmartcaseForSearch is true and searching lowercase\", ->",
        "path": "spec/motions-spec.coffee",
        "position": null,
        "original_position": 4,
        "commit_id": "c99d5b4f7a4ab71635b19011c27c67e01aa251b6",
        "original_commit_id": "5161b684310a7dde1672a123926003f8a73d8b33",
        "user": {
            "login": "jspahrsummers",
            "id": 432536,
            "node_id": "MDQ6VXNlcjQzMjUzNg==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/432536?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jspahrsummers",
            "html_url": "https://github.com/jspahrsummers",
            "followers_url": "https://api.github.com/users/jspahrsummers/followers",
            "following_url": "https://api.github.com/users/jspahrsummers/following{/other_user}",
            "gists_url": "https://api.github.com/users/jspahrsummers/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jspahrsummers/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jspahrsummers/subscriptions",
            "organizations_url": "https://api.github.com/users/jspahrsummers/orgs",
            "repos_url": "https://api.github.com/users/jspahrsummers/repos",
            "events_url": "https://api.github.com/users/jspahrsummers/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jspahrsummers/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think this first \u201cSmartcase\u201d was just supposed to be \u201ccase.\u201d\u00a0Find/replace\u00a0error, maybe? :wink:\n",
        "created_at": "2014-10-15T19:24:21Z",
        "updated_at": "2014-10-15T19:46:45Z",
        "html_url": "https://github.com/atom/vim-mode/pull/416#discussion_r18916172",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/416",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/18916172"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/416#discussion_r18916172"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/416"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/19560447",
        "pull_request_review_id": null,
        "id": 19560447,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTYwNDQ3",
        "diff_hunk": "@@ -50,6 +51,18 @@ class Operator\n   undoTransaction: (fn) ->\n     @editor.getBuffer().transact(fn)\n \n+  # Public: Preps text and sets the text register\n+  #\n+  # Returns nothing\n+  setTextRegister: (register, text) ->\n+    if @motion? and @motion.isLinewise?()",
        "path": "lib/operators/general-operators.coffee",
        "position": null,
        "original_position": 16,
        "commit_id": "18bbf193650c32bc0fd44d4d734a155a61b26eef",
        "original_commit_id": "033c29a397ccf2722a21fc535ad46a846c334a4b",
        "user": {
            "login": "kevinsawicki",
            "id": 671378,
            "node_id": "MDQ6VXNlcjY3MTM3OA==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/671378?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kevinsawicki",
            "html_url": "https://github.com/kevinsawicki",
            "followers_url": "https://api.github.com/users/kevinsawicki/followers",
            "following_url": "https://api.github.com/users/kevinsawicki/following{/other_user}",
            "gists_url": "https://api.github.com/users/kevinsawicki/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kevinsawicki/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kevinsawicki/subscriptions",
            "organizations_url": "https://api.github.com/users/kevinsawicki/orgs",
            "repos_url": "https://api.github.com/users/kevinsawicki/repos",
            "events_url": "https://api.github.com/users/kevinsawicki/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kevinsawicki/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "This might be a bit simpler taking advantage of the `?` in CoffeeScript:\n\n``` coffee\nif @motion?.isLinewise?()\n```\n",
        "created_at": "2014-10-29T18:21:32Z",
        "updated_at": "2014-10-29T18:52:47Z",
        "html_url": "https://github.com/atom/vim-mode/pull/420#discussion_r19560447",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/420",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/19560447"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/420#discussion_r19560447"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/420"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/19560532",
        "pull_request_review_id": null,
        "id": 19560532,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTYwNTMy",
        "diff_hunk": "@@ -90,6 +104,9 @@ class Delete extends Operator\n       validSelection = true\n \n     if validSelection?\n+      text = @editor.getSelection().getText()",
        "path": "lib/operators/general-operators.coffee",
        "position": null,
        "original_position": 39,
        "commit_id": "18bbf193650c32bc0fd44d4d734a155a61b26eef",
        "original_commit_id": "033c29a397ccf2722a21fc535ad46a846c334a4b",
        "user": {
            "login": "kevinsawicki",
            "id": 671378,
            "node_id": "MDQ6VXNlcjY3MTM3OA==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/671378?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kevinsawicki",
            "html_url": "https://github.com/kevinsawicki",
            "followers_url": "https://api.github.com/users/kevinsawicki/followers",
            "following_url": "https://api.github.com/users/kevinsawicki/following{/other_user}",
            "gists_url": "https://api.github.com/users/kevinsawicki/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kevinsawicki/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kevinsawicki/subscriptions",
            "organizations_url": "https://api.github.com/users/kevinsawicki/orgs",
            "repos_url": "https://api.github.com/users/kevinsawicki/repos",
            "events_url": "https://api.github.com/users/kevinsawicki/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kevinsawicki/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "This could just be:\n\n``` coffee\ntext = @editor.getSelectedText()\n```\n",
        "created_at": "2014-10-29T18:22:32Z",
        "updated_at": "2014-10-29T18:52:47Z",
        "html_url": "https://github.com/atom/vim-mode/pull/420#discussion_r19560532",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/420",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/19560532"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/420#discussion_r19560532"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/420"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/19562921",
        "pull_request_review_id": null,
        "id": 19562921,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTYyOTIx",
        "diff_hunk": "@@ -90,6 +104,9 @@ class Delete extends Operator\n       validSelection = true\n \n     if validSelection?\n+      text = @editor.getSelection().getText()",
        "path": "lib/operators/general-operators.coffee",
        "position": null,
        "original_position": 39,
        "commit_id": "18bbf193650c32bc0fd44d4d734a155a61b26eef",
        "original_commit_id": "033c29a397ccf2722a21fc535ad46a846c334a4b",
        "user": {
            "login": "isaachess",
            "id": 3473742,
            "node_id": "MDQ6VXNlcjM0NzM3NDI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/3473742?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/isaachess",
            "html_url": "https://github.com/isaachess",
            "followers_url": "https://api.github.com/users/isaachess/followers",
            "following_url": "https://api.github.com/users/isaachess/following{/other_user}",
            "gists_url": "https://api.github.com/users/isaachess/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/isaachess/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/isaachess/subscriptions",
            "organizations_url": "https://api.github.com/users/isaachess/orgs",
            "repos_url": "https://api.github.com/users/isaachess/repos",
            "events_url": "https://api.github.com/users/isaachess/events{/privacy}",
            "received_events_url": "https://api.github.com/users/isaachess/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Thanks, fixed that.\n",
        "created_at": "2014-10-29T18:53:11Z",
        "updated_at": "2014-10-29T18:53:11Z",
        "html_url": "https://github.com/atom/vim-mode/pull/420#discussion_r19562921",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/420",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/19562921"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/420#discussion_r19562921"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/420"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/19562964",
        "pull_request_review_id": null,
        "id": 19562964,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTYyOTY0",
        "diff_hunk": "@@ -50,6 +51,18 @@ class Operator\n   undoTransaction: (fn) ->\n     @editor.getBuffer().transact(fn)\n \n+  # Public: Preps text and sets the text register\n+  #\n+  # Returns nothing\n+  setTextRegister: (register, text) ->\n+    if @motion? and @motion.isLinewise?()",
        "path": "lib/operators/general-operators.coffee",
        "position": null,
        "original_position": 16,
        "commit_id": "18bbf193650c32bc0fd44d4d734a155a61b26eef",
        "original_commit_id": "033c29a397ccf2722a21fc535ad46a846c334a4b",
        "user": {
            "login": "isaachess",
            "id": 3473742,
            "node_id": "MDQ6VXNlcjM0NzM3NDI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/3473742?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/isaachess",
            "html_url": "https://github.com/isaachess",
            "followers_url": "https://api.github.com/users/isaachess/followers",
            "following_url": "https://api.github.com/users/isaachess/following{/other_user}",
            "gists_url": "https://api.github.com/users/isaachess/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/isaachess/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/isaachess/subscriptions",
            "organizations_url": "https://api.github.com/users/isaachess/orgs",
            "repos_url": "https://api.github.com/users/isaachess/repos",
            "events_url": "https://api.github.com/users/isaachess/events{/privacy}",
            "received_events_url": "https://api.github.com/users/isaachess/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Thank you! I'm new to coffeescript, and some things I don't like, but _this_ I like a lot. I wish general javascript had this functionality.\n\nI've updated this.\n",
        "created_at": "2014-10-29T18:53:46Z",
        "updated_at": "2014-10-29T18:53:46Z",
        "html_url": "https://github.com/atom/vim-mode/pull/420#discussion_r19562964",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/420",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/19562964"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/420#discussion_r19562964"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/420"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/19772221",
        "pull_request_review_id": null,
        "id": 19772221,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzcyMjIx",
        "diff_hunk": "@@ -141,11 +141,11 @@ class Yank extends Operator\n   #\n   # Returns nothing.\n   execute: (count=1) ->\n-    originalPosition = @editor.getCursorScreenPosition()\n+    selection = @editor.getLastSelection()\n     if _.contains(@motion.select(count), true)\n-      selectedPosition = @editor.getCursorScreenPosition()\n-      text = @editor.getSelection().getText()\n-      originalPosition = Point.min(originalPosition, selectedPosition)\n+      text = @editor.getLastSelection().getText()",
        "path": "lib/operators/general-operators.coffee",
        "position": 10,
        "original_position": 10,
        "commit_id": "128775e42d295a63dbcee5fb1892315123a150eb",
        "original_commit_id": "128775e42d295a63dbcee5fb1892315123a150eb",
        "user": {
            "login": "kevinsawicki",
            "id": 671378,
            "node_id": "MDQ6VXNlcjY3MTM3OA==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/671378?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kevinsawicki",
            "html_url": "https://github.com/kevinsawicki",
            "followers_url": "https://api.github.com/users/kevinsawicki/followers",
            "following_url": "https://api.github.com/users/kevinsawicki/following{/other_user}",
            "gists_url": "https://api.github.com/users/kevinsawicki/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kevinsawicki/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kevinsawicki/subscriptions",
            "organizations_url": "https://api.github.com/users/kevinsawicki/orgs",
            "repos_url": "https://api.github.com/users/kevinsawicki/repos",
            "events_url": "https://api.github.com/users/kevinsawicki/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kevinsawicki/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Could this be `selection.getText()` since you already have the selection variable?\n",
        "created_at": "2014-11-03T22:31:36Z",
        "updated_at": "2014-11-03T22:31:36Z",
        "html_url": "https://github.com/atom/vim-mode/pull/417#discussion_r19772221",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/417",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/19772221"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/417#discussion_r19772221"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/417"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/19772317",
        "pull_request_review_id": null,
        "id": 19772317,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzcyMzE3",
        "diff_hunk": "@@ -141,11 +141,11 @@ class Yank extends Operator\n   #\n   # Returns nothing.\n   execute: (count=1) ->\n-    originalPosition = @editor.getCursorScreenPosition()\n+    selection = @editor.getLastSelection()\n     if _.contains(@motion.select(count), true)\n-      selectedPosition = @editor.getCursorScreenPosition()\n-      text = @editor.getSelection().getText()\n-      originalPosition = Point.min(originalPosition, selectedPosition)\n+      text = @editor.getLastSelection().getText()",
        "path": "lib/operators/general-operators.coffee",
        "position": 10,
        "original_position": 10,
        "commit_id": "128775e42d295a63dbcee5fb1892315123a150eb",
        "original_commit_id": "128775e42d295a63dbcee5fb1892315123a150eb",
        "user": {
            "login": "kevinsawicki",
            "id": 671378,
            "node_id": "MDQ6VXNlcjY3MTM3OA==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/671378?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kevinsawicki",
            "html_url": "https://github.com/kevinsawicki",
            "followers_url": "https://api.github.com/users/kevinsawicki/followers",
            "following_url": "https://api.github.com/users/kevinsawicki/following{/other_user}",
            "gists_url": "https://api.github.com/users/kevinsawicki/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kevinsawicki/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kevinsawicki/subscriptions",
            "organizations_url": "https://api.github.com/users/kevinsawicki/orgs",
            "repos_url": "https://api.github.com/users/kevinsawicki/repos",
            "events_url": "https://api.github.com/users/kevinsawicki/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kevinsawicki/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Never mind, I'm assuming that line 145 may have changed the selection so you would need to re-grab it?\n",
        "created_at": "2014-11-03T22:33:03Z",
        "updated_at": "2014-11-03T22:33:03Z",
        "html_url": "https://github.com/atom/vim-mode/pull/417#discussion_r19772317",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/417",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/19772317"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/417#discussion_r19772317"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/417"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/19779159",
        "pull_request_review_id": null,
        "id": 19779159,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Nzc5MTU5",
        "diff_hunk": "@@ -83,7 +88,7 @@ class Delete extends Operator\n   # count - The number of times to execute.\n   #\n   # Returns nothing.\n-  execute: (count=1) ->\n+  execute: (count) ->",
        "path": "lib/operators/general-operators.coffee",
        "position": 17,
        "original_position": 17,
        "commit_id": "6b7890dffc1206201276f0ed4c6a491a8aa776b0",
        "original_commit_id": "6b7890dffc1206201276f0ed4c6a491a8aa776b0",
        "user": {
            "login": "kevinsawicki",
            "id": 671378,
            "node_id": "MDQ6VXNlcjY3MTM3OA==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/671378?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kevinsawicki",
            "html_url": "https://github.com/kevinsawicki",
            "followers_url": "https://api.github.com/users/kevinsawicki/followers",
            "following_url": "https://api.github.com/users/kevinsawicki/following{/other_user}",
            "gists_url": "https://api.github.com/users/kevinsawicki/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kevinsawicki/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kevinsawicki/subscriptions",
            "organizations_url": "https://api.github.com/users/kevinsawicki/orgs",
            "repos_url": "https://api.github.com/users/kevinsawicki/repos",
            "events_url": "https://api.github.com/users/kevinsawicki/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kevinsawicki/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "What was the reason for deleting the defaulting of the count value to one?\n",
        "created_at": "2014-11-04T00:51:30Z",
        "updated_at": "2014-11-04T00:51:30Z",
        "html_url": "https://github.com/atom/vim-mode/pull/431#discussion_r19779159",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/431",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/19779159"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/431#discussion_r19779159"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/431"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/19779260",
        "pull_request_review_id": null,
        "id": 19779260,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Nzc5MjYw",
        "diff_hunk": "@@ -432,6 +439,16 @@ class MoveToLine extends Motion\n   getDestinationRow: (count) ->\n     if count? then count - 1 else (@editor.getLineCount() - 1)\n \n+class MoveToRelativeLine extends MoveToLine\n+  # Options\n+  #  requireEOL - if true, ensure an end of line character is always selected\n+  select: (count=1, {requireEOL}={}) ->\n+    {row, column} = @editor.getCursorBufferPosition()\n+    @editor.setSelectedBufferRange(@selectRows(row, row + (count - 1), requireEOL: requireEOL))",
        "path": "lib/motions/general-motions.coffee",
        "position": 36,
        "original_position": 36,
        "commit_id": "6b7890dffc1206201276f0ed4c6a491a8aa776b0",
        "original_commit_id": "6b7890dffc1206201276f0ed4c6a491a8aa776b0",
        "user": {
            "login": "kevinsawicki",
            "id": 671378,
            "node_id": "MDQ6VXNlcjY3MTM3OA==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/671378?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kevinsawicki",
            "html_url": "https://github.com/kevinsawicki",
            "followers_url": "https://api.github.com/users/kevinsawicki/followers",
            "following_url": "https://api.github.com/users/kevinsawicki/following{/other_user}",
            "gists_url": "https://api.github.com/users/kevinsawicki/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kevinsawicki/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kevinsawicki/subscriptions",
            "organizations_url": "https://api.github.com/users/kevinsawicki/orgs",
            "repos_url": "https://api.github.com/users/kevinsawicki/repos",
            "events_url": "https://api.github.com/users/kevinsawicki/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kevinsawicki/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "You can use `{requireEOL}` to create the object:\n\n``` coffee\n@editor.setSelectedBufferRange(@selectRows(row, row + (count - 1), {requireEOL}))\n```\n",
        "created_at": "2014-11-04T00:53:49Z",
        "updated_at": "2014-11-04T00:53:49Z",
        "html_url": "https://github.com/atom/vim-mode/pull/431#discussion_r19779260",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/431",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/19779260"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/431#discussion_r19779260"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/431"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/19779384",
        "pull_request_review_id": null,
        "id": 19779384,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Nzc5Mzg0",
        "diff_hunk": "@@ -37,6 +37,11 @@ class Operator\n     if not motion.select\n       throw new OperatorError('Must compose with a motion')\n \n+    # Take on the composed object's isLinewise function if this object\n+    # doesn't have one.\n+    if !motion.isLinewise and motion.composedObject?.isLinewise\n+      motion.isLinewise = motion.composedObject.isLinewise",
        "path": "lib/operators/general-operators.coffee",
        "position": 7,
        "original_position": 7,
        "commit_id": "6b7890dffc1206201276f0ed4c6a491a8aa776b0",
        "original_commit_id": "6b7890dffc1206201276f0ed4c6a491a8aa776b0",
        "user": {
            "login": "kevinsawicki",
            "id": 671378,
            "node_id": "MDQ6VXNlcjY3MTM3OA==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/671378?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kevinsawicki",
            "html_url": "https://github.com/kevinsawicki",
            "followers_url": "https://api.github.com/users/kevinsawicki/followers",
            "following_url": "https://api.github.com/users/kevinsawicki/following{/other_user}",
            "gists_url": "https://api.github.com/users/kevinsawicki/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kevinsawicki/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kevinsawicki/subscriptions",
            "organizations_url": "https://api.github.com/users/kevinsawicki/orgs",
            "repos_url": "https://api.github.com/users/kevinsawicki/repos",
            "events_url": "https://api.github.com/users/kevinsawicki/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kevinsawicki/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "This might be simpler as just:\n\n``` coffee\nmotion.isLinewise ?= motion.composedObject?.isLinewise\n```\n",
        "created_at": "2014-11-04T00:56:39Z",
        "updated_at": "2014-11-04T00:56:39Z",
        "html_url": "https://github.com/atom/vim-mode/pull/431#discussion_r19779384",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/431",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/19779384"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/431#discussion_r19779384"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/431"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/19780078",
        "pull_request_review_id": null,
        "id": 19780078,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzgwMDc4",
        "diff_hunk": "@@ -3,6 +3,10 @@ class Scroll\n   isRecordable: -> false\n   constructor: (@editorView, @editor) ->\n     @scrolloff = 2 # atom default\n+    @rows =\n+      first: @editorView.getFirstVisibleScreenRow()",
        "path": "lib/scroll.coffee",
        "position": 5,
        "original_position": 5,
        "commit_id": "0997a634bcd80805e41c18b66ad077d16a6787c6",
        "original_commit_id": "0997a634bcd80805e41c18b66ad077d16a6787c6",
        "user": {
            "login": "kevinsawicki",
            "id": 671378,
            "node_id": "MDQ6VXNlcjY3MTM3OA==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/671378?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kevinsawicki",
            "html_url": "https://github.com/kevinsawicki",
            "followers_url": "https://api.github.com/users/kevinsawicki/followers",
            "following_url": "https://api.github.com/users/kevinsawicki/following{/other_user}",
            "gists_url": "https://api.github.com/users/kevinsawicki/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kevinsawicki/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kevinsawicki/subscriptions",
            "organizations_url": "https://api.github.com/users/kevinsawicki/orgs",
            "repos_url": "https://api.github.com/users/kevinsawicki/repos",
            "events_url": "https://api.github.com/users/kevinsawicki/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kevinsawicki/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "This is also on the Editor model, `@editor.getFirstVisibleScreenRow()`\n",
        "created_at": "2014-11-04T01:13:35Z",
        "updated_at": "2014-11-04T01:13:35Z",
        "html_url": "https://github.com/atom/vim-mode/pull/427#discussion_r19780078",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/427",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/19780078"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/427#discussion_r19780078"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/427"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/19780080",
        "pull_request_review_id": null,
        "id": 19780080,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzgwMDgw",
        "diff_hunk": "@@ -3,6 +3,10 @@ class Scroll\n   isRecordable: -> false\n   constructor: (@editorView, @editor) ->\n     @scrolloff = 2 # atom default\n+    @rows =\n+      first: @editorView.getFirstVisibleScreenRow()\n+      last: @editorView.getLastVisibleScreenRow()",
        "path": "lib/scroll.coffee",
        "position": 6,
        "original_position": 6,
        "commit_id": "0997a634bcd80805e41c18b66ad077d16a6787c6",
        "original_commit_id": "0997a634bcd80805e41c18b66ad077d16a6787c6",
        "user": {
            "login": "kevinsawicki",
            "id": 671378,
            "node_id": "MDQ6VXNlcjY3MTM3OA==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/671378?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kevinsawicki",
            "html_url": "https://github.com/kevinsawicki",
            "followers_url": "https://api.github.com/users/kevinsawicki/followers",
            "following_url": "https://api.github.com/users/kevinsawicki/following{/other_user}",
            "gists_url": "https://api.github.com/users/kevinsawicki/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kevinsawicki/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kevinsawicki/subscriptions",
            "organizations_url": "https://api.github.com/users/kevinsawicki/orgs",
            "repos_url": "https://api.github.com/users/kevinsawicki/repos",
            "events_url": "https://api.github.com/users/kevinsawicki/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kevinsawicki/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "This is also on the Editor model, `@editor.getLastVisibleScreenRow()`\n",
        "created_at": "2014-11-04T01:13:43Z",
        "updated_at": "2014-11-04T01:13:43Z",
        "html_url": "https://github.com/atom/vim-mode/pull/427#discussion_r19780080",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/427",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/19780080"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/427#discussion_r19780080"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/427"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/19789788",
        "pull_request_review_id": null,
        "id": 19789788,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Nzg5Nzg4",
        "diff_hunk": "@@ -83,7 +88,7 @@ class Delete extends Operator\n   # count - The number of times to execute.\n   #\n   # Returns nothing.\n-  execute: (count=1) ->\n+  execute: (count) ->",
        "path": "lib/operators/general-operators.coffee",
        "position": 17,
        "original_position": 17,
        "commit_id": "6b7890dffc1206201276f0ed4c6a491a8aa776b0",
        "original_commit_id": "6b7890dffc1206201276f0ed4c6a491a8aa776b0",
        "user": {
            "login": "daveenguyen",
            "id": 2568174,
            "node_id": "MDQ6VXNlcjI1NjgxNzQ=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/2568174?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/daveenguyen",
            "html_url": "https://github.com/daveenguyen",
            "followers_url": "https://api.github.com/users/daveenguyen/followers",
            "following_url": "https://api.github.com/users/daveenguyen/following{/other_user}",
            "gists_url": "https://api.github.com/users/daveenguyen/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/daveenguyen/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/daveenguyen/subscriptions",
            "organizations_url": "https://api.github.com/users/daveenguyen/orgs",
            "repos_url": "https://api.github.com/users/daveenguyen/repos",
            "events_url": "https://api.github.com/users/daveenguyen/events{/privacy}",
            "received_events_url": "https://api.github.com/users/daveenguyen/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "My reason from my #332 attempt was 'This makes `dG` use the default `count=@editor.getLineCount()` from `MoveToLine`.'\n",
        "created_at": "2014-11-04T08:20:46Z",
        "updated_at": "2014-11-04T08:20:46Z",
        "html_url": "https://github.com/atom/vim-mode/pull/431#discussion_r19789788",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/431",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/19789788"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/431#discussion_r19789788"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/431"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/24871960",
        "pull_request_review_id": null,
        "id": 24871960,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODcxOTYw",
        "diff_hunk": "@@ -150,6 +150,7 @@ class MoveRight extends Motion\n   moveCursor: (cursor, count=1) ->\n     _.times count, =>\n       cursor.moveRight() unless cursor.isAtEndOfLine()\n+      cursor.moveRight() if atom.config.get('vim-mode.wrapLeftRightMotion') and cursor.isAtEndOfLine()",
        "path": "lib/motions/general-motions.coffee",
        "position": 17,
        "original_position": 17,
        "commit_id": "edd22cf79b0374323b77c9a61011ce33c0726b85",
        "original_commit_id": "1735f799bb63d2853e0deffcd93cbdccb68e18a2",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Does `l` still work with this change? It used to call `cursor.moveRight()` _unless_ the cursor was at the end of the line. Now, if `wrapLeftRightMotion` is `true`, it does it _only if_ the cursor is at the end of the line.\n\nI would think it should be this:\n\n``` coffee\ncursor.moveRight() if (not cursor.isAtEndOfLine()) or atom.config.get('vim-mode.wrapLeftRightMotion')\n```\n",
        "created_at": "2015-02-18T01:15:10Z",
        "updated_at": "2015-02-18T02:54:33Z",
        "html_url": "https://github.com/atom/vim-mode/pull/526#discussion_r24871960",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/526",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/24871960"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/526#discussion_r24871960"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/526"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/24872004",
        "pull_request_review_id": null,
        "id": 24872004,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODcyMDA0",
        "diff_hunk": "@@ -140,9 +140,9 @@ class MoveLeft extends Motion\n   operatesInclusively: false\n \n   moveCursor: (cursor, count=1) ->\n-    _.times count, ->\n-      unless cursor.isAtBeginningOfLine()\n-        cursor.moveLeft()\n+    _.times count, =>\n+      cursor.moveLeft() unless cursor.isAtBeginningOfLine() and !atom.config.get('vim-mode.wrapLeftRightMotion')",
        "path": "lib/motions/general-motions.coffee",
        "position": null,
        "original_position": 8,
        "commit_id": "edd22cf79b0374323b77c9a61011ce33c0726b85",
        "original_commit_id": "1735f799bb63d2853e0deffcd93cbdccb68e18a2",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "This looks right, but the combination of `unless` and `!` is a little confusing to me. Could you switch this to use an `if` instead?\n",
        "created_at": "2015-02-18T01:16:12Z",
        "updated_at": "2015-02-18T02:54:33Z",
        "html_url": "https://github.com/atom/vim-mode/pull/526#discussion_r24872004",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/526",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/24872004"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/526#discussion_r24872004"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/526"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/24872438",
        "pull_request_review_id": null,
        "id": 24872438,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODcyNDM4",
        "diff_hunk": "@@ -150,6 +150,7 @@ class MoveRight extends Motion\n   moveCursor: (cursor, count=1) ->\n     _.times count, =>\n       cursor.moveRight() unless cursor.isAtEndOfLine()\n+      cursor.moveRight() if atom.config.get('vim-mode.wrapLeftRightMotion') and cursor.isAtEndOfLine()",
        "path": "lib/motions/general-motions.coffee",
        "position": 17,
        "original_position": 17,
        "commit_id": "edd22cf79b0374323b77c9a61011ce33c0726b85",
        "original_commit_id": "1735f799bb63d2853e0deffcd93cbdccb68e18a2",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "moveRight is actually called once on the line before, and then, if we're at the end of the line, it's called again so Atom takes care of going to the next line for us.\n",
        "created_at": "2015-02-18T01:26:08Z",
        "updated_at": "2015-02-18T02:54:33Z",
        "html_url": "https://github.com/atom/vim-mode/pull/526#discussion_r24872438",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/526",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/24872438"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/526#discussion_r24872438"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/526"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/24872843",
        "pull_request_review_id": null,
        "id": 24872843,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODcyODQz",
        "diff_hunk": "@@ -150,6 +150,7 @@ class MoveRight extends Motion\n   moveCursor: (cursor, count=1) ->\n     _.times count, =>\n       cursor.moveRight() unless cursor.isAtEndOfLine()\n+      cursor.moveRight() if atom.config.get('vim-mode.wrapLeftRightMotion') and cursor.isAtEndOfLine()",
        "path": "lib/motions/general-motions.coffee",
        "position": 17,
        "original_position": 17,
        "commit_id": "edd22cf79b0374323b77c9a61011ce33c0726b85",
        "original_commit_id": "1735f799bb63d2853e0deffcd93cbdccb68e18a2",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Got it :+1:\n",
        "created_at": "2015-02-18T01:35:10Z",
        "updated_at": "2015-02-18T02:54:33Z",
        "html_url": "https://github.com/atom/vim-mode/pull/526#discussion_r24872843",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/526",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/24872843"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/526#discussion_r24872843"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/526"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/24872957",
        "pull_request_review_id": null,
        "id": 24872957,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODcyOTU3",
        "diff_hunk": "@@ -140,9 +140,9 @@ class MoveLeft extends Motion\n   operatesInclusively: false\n \n   moveCursor: (cursor, count=1) ->\n-    _.times count, ->\n-      unless cursor.isAtBeginningOfLine()\n-        cursor.moveLeft()\n+    _.times count, =>\n+      cursor.moveLeft() unless cursor.isAtBeginningOfLine() and !atom.config.get('vim-mode.wrapLeftRightMotion')",
        "path": "lib/motions/general-motions.coffee",
        "position": null,
        "original_position": 8,
        "commit_id": "edd22cf79b0374323b77c9a61011ce33c0726b85",
        "original_commit_id": "1735f799bb63d2853e0deffcd93cbdccb68e18a2",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Sorry, I'm not sure I can do that. I could make it \n\n```\n      cursor.moveLeft() if atom.config.get('vim-mode.wrapLeftRightMotion') or !cursor.isAtBeginningOfLine()\nor\n      cursor.moveLeft() if !cursor.isAtBeginningOfLine() or atom.config.get('vim-mode.wrapLeftRightMotion')\n```\n\nBut that's not really better, I suspect. What do you think?\n",
        "created_at": "2015-02-18T01:37:38Z",
        "updated_at": "2015-02-18T02:54:33Z",
        "html_url": "https://github.com/atom/vim-mode/pull/526#discussion_r24872957",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/526",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/24872957"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/526#discussion_r24872957"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/526"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/24873210",
        "pull_request_review_id": null,
        "id": 24873210,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODczMjEw",
        "diff_hunk": "@@ -140,9 +140,9 @@ class MoveLeft extends Motion\n   operatesInclusively: false\n \n   moveCursor: (cursor, count=1) ->\n-    _.times count, ->\n-      unless cursor.isAtBeginningOfLine()\n-        cursor.moveLeft()\n+    _.times count, =>\n+      cursor.moveLeft() unless cursor.isAtBeginningOfLine() and !atom.config.get('vim-mode.wrapLeftRightMotion')",
        "path": "lib/motions/general-motions.coffee",
        "position": null,
        "original_position": 8,
        "commit_id": "edd22cf79b0374323b77c9a61011ce33c0726b85",
        "original_commit_id": "1735f799bb63d2853e0deffcd93cbdccb68e18a2",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "In my opinion, either of those would be better than `unless ... and ! ...`, as they avoid double-negation. Also, we generally use coffee-script's `not` instead of `!`.\n",
        "created_at": "2015-02-18T01:41:54Z",
        "updated_at": "2015-02-18T02:54:33Z",
        "html_url": "https://github.com/atom/vim-mode/pull/526#discussion_r24873210",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/526",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/24873210"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/526#discussion_r24873210"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/526"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/24875939",
        "pull_request_review_id": null,
        "id": 24875939,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODc1OTM5",
        "diff_hunk": "@@ -140,9 +140,9 @@ class MoveLeft extends Motion\n   operatesInclusively: false\n \n   moveCursor: (cursor, count=1) ->\n-    _.times count, ->\n-      unless cursor.isAtBeginningOfLine()\n-        cursor.moveLeft()\n+    _.times count, =>\n+      cursor.moveLeft() unless cursor.isAtBeginningOfLine() and !atom.config.get('vim-mode.wrapLeftRightMotion')",
        "path": "lib/motions/general-motions.coffee",
        "position": null,
        "original_position": 8,
        "commit_id": "edd22cf79b0374323b77c9a61011ce33c0726b85",
        "original_commit_id": "1735f799bb63d2853e0deffcd93cbdccb68e18a2",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "thanks, I'm new to coffeescript. Sorry about the double commit, I missed part of your reply.\n",
        "created_at": "2015-02-18T02:54:37Z",
        "updated_at": "2015-02-18T02:54:37Z",
        "html_url": "https://github.com/atom/vim-mode/pull/526#discussion_r24875939",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/526",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/24875939"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/526#discussion_r24875939"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/526"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/24877265",
        "pull_request_review_id": null,
        "id": 24877265,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODc3MjY1",
        "diff_hunk": "@@ -140,9 +140,9 @@ class MoveLeft extends Motion\n   operatesInclusively: false\n \n   moveCursor: (cursor, count=1) ->\n-    _.times count, ->\n-      unless cursor.isAtBeginningOfLine()\n-        cursor.moveLeft()\n+    _.times count, =>\n+      cursor.moveLeft() unless cursor.isAtBeginningOfLine() and !atom.config.get('vim-mode.wrapLeftRightMotion')",
        "path": "lib/motions/general-motions.coffee",
        "position": null,
        "original_position": 8,
        "commit_id": "edd22cf79b0374323b77c9a61011ce33c0726b85",
        "original_commit_id": "1735f799bb63d2853e0deffcd93cbdccb68e18a2",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "No worries! And the `not` thing is just our preference in the Atom codebases; not something I'd expect anyone to just _know_ as contributor. Thanks a lot for all of these contributions.\n",
        "created_at": "2015-02-18T03:40:20Z",
        "updated_at": "2015-02-18T03:40:20Z",
        "html_url": "https://github.com/atom/vim-mode/pull/526#discussion_r24877265",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/526",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/24877265"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/526#discussion_r24877265"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/526"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/25275897",
        "pull_request_review_id": null,
        "id": 25275897,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1Mjc1ODk3",
        "diff_hunk": "@@ -33,8 +33,18 @@ module.exports =\n   deactivate: ->\n     @disposables.dispose()\n \n+  getGlobalState: ->\n+    @globalVimState\n+\n+  getState: (editor) ->\n+    @vimStates.get(editor)\n+\n   consumeStatusBar: (statusBar) ->\n     @statusBarManager.initialize(statusBar)\n     @statusBarManager.attach()\n     @disposables.add new Disposable =>\n       @statusBarManager.detach()\n+\n+  provideVimMode: ->\n+    getGlobalState: @getGlobalState.bind(@)\n+    getState: @getState.bind(@)",
        "path": "lib/vim-mode.coffee",
        "position": null,
        "original_position": 47,
        "commit_id": "73d3df95ecd2ca114a33ac2e7d8311142a8fbfc5",
        "original_commit_id": "c2c52c71dd239eab9c1c8054602696a5f680d171",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "I think I'd rather have this be called `getEditorState` to make it clear that you need to pass a `TextEditor`. You cool w/ that @lloeki?\n",
        "created_at": "2015-02-24T18:10:05Z",
        "updated_at": "2015-02-25T08:05:30Z",
        "html_url": "https://github.com/atom/vim-mode/pull/540#discussion_r25275897",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/540",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/25275897"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/540#discussion_r25275897"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/540"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/25276097",
        "pull_request_review_id": null,
        "id": 25276097,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1Mjc2MDk3",
        "diff_hunk": "@@ -19,5 +19,13 @@\n         \"^0.58.0\": \"consumeStatusBar\"\n       }\n     }\n+  },\n+  \"providedServices\": {\n+    \"vim-mode\": {\n+      \"description\": \"\",\n+      \"versions\": {\n+        \"0.33.0\": \"provideVimMode\"",
        "path": "package.json",
        "position": null,
        "original_position": 9,
        "commit_id": "73d3df95ecd2ca114a33ac2e7d8311142a8fbfc5",
        "original_commit_id": "c2c52c71dd239eab9c1c8054602696a5f680d171",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "In general, we don't intent to have these service versions match the package versions, since the package may go through many versions w/o changing its API. I believe we made this mistake in the status-bar service, which made for a confusing example.\n\nWould you mind changing this to `0.1.0`? I think that is a good default to use, since the service is still new and should be considered somewhat unstable/evolving.\n",
        "created_at": "2015-02-24T18:12:17Z",
        "updated_at": "2015-02-25T08:05:30Z",
        "html_url": "https://github.com/atom/vim-mode/pull/540#discussion_r25276097",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/540",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/25276097"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/540#discussion_r25276097"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/540"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/25323305",
        "pull_request_review_id": null,
        "id": 25323305,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MzIzMzA1",
        "diff_hunk": "@@ -33,8 +33,18 @@ module.exports =\n   deactivate: ->\n     @disposables.dispose()\n \n+  getGlobalState: ->\n+    @globalVimState\n+\n+  getState: (editor) ->\n+    @vimStates.get(editor)\n+\n   consumeStatusBar: (statusBar) ->\n     @statusBarManager.initialize(statusBar)\n     @statusBarManager.attach()\n     @disposables.add new Disposable =>\n       @statusBarManager.detach()\n+\n+  provideVimMode: ->\n+    getGlobalState: @getGlobalState.bind(@)\n+    getState: @getState.bind(@)",
        "path": "lib/vim-mode.coffee",
        "position": null,
        "original_position": 47,
        "commit_id": "73d3df95ecd2ca114a33ac2e7d8311142a8fbfc5",
        "original_commit_id": "c2c52c71dd239eab9c1c8054602696a5f680d171",
        "user": {
            "login": "lloeki",
            "id": 75445,
            "node_id": "MDQ6VXNlcjc1NDQ1",
            "avatar_url": "https://avatars2.githubusercontent.com/u/75445?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lloeki",
            "html_url": "https://github.com/lloeki",
            "followers_url": "https://api.github.com/users/lloeki/followers",
            "following_url": "https://api.github.com/users/lloeki/following{/other_user}",
            "gists_url": "https://api.github.com/users/lloeki/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lloeki/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lloeki/subscriptions",
            "organizations_url": "https://api.github.com/users/lloeki/orgs",
            "repos_url": "https://api.github.com/users/lloeki/repos",
            "events_url": "https://api.github.com/users/lloeki/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lloeki/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "No problem, I wasn't sure about the name either.\n",
        "created_at": "2015-02-25T08:01:20Z",
        "updated_at": "2015-02-25T08:05:30Z",
        "html_url": "https://github.com/atom/vim-mode/pull/540#discussion_r25323305",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/540",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/25323305"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/540#discussion_r25323305"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/540"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/25323367",
        "pull_request_review_id": null,
        "id": 25323367,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MzIzMzY3",
        "diff_hunk": "@@ -19,5 +19,13 @@\n         \"^0.58.0\": \"consumeStatusBar\"\n       }\n     }\n+  },\n+  \"providedServices\": {\n+    \"vim-mode\": {\n+      \"description\": \"\",\n+      \"versions\": {\n+        \"0.33.0\": \"provideVimMode\"",
        "path": "package.json",
        "position": null,
        "original_position": 9,
        "commit_id": "73d3df95ecd2ca114a33ac2e7d8311142a8fbfc5",
        "original_commit_id": "c2c52c71dd239eab9c1c8054602696a5f680d171",
        "user": {
            "login": "lloeki",
            "id": 75445,
            "node_id": "MDQ6VXNlcjc1NDQ1",
            "avatar_url": "https://avatars2.githubusercontent.com/u/75445?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lloeki",
            "html_url": "https://github.com/lloeki",
            "followers_url": "https://api.github.com/users/lloeki/followers",
            "following_url": "https://api.github.com/users/lloeki/following{/other_user}",
            "gists_url": "https://api.github.com/users/lloeki/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lloeki/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lloeki/subscriptions",
            "organizations_url": "https://api.github.com/users/lloeki/orgs",
            "repos_url": "https://api.github.com/users/lloeki/repos",
            "events_url": "https://api.github.com/users/lloeki/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lloeki/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "That's sensible.\n",
        "created_at": "2015-02-25T08:03:08Z",
        "updated_at": "2015-02-25T08:05:30Z",
        "html_url": "https://github.com/atom/vim-mode/pull/540#discussion_r25323367",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/540",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/25323367"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/540#discussion_r25323367"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/540"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/26230834",
        "pull_request_review_id": null,
        "id": 26230834,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2MjMwODM0",
        "diff_hunk": "@@ -24,6 +24,8 @@ class Insert extends Operator\n           @typedText,\n           normalizeLineEndings: true\n         )\n+        cursor = @editor.getLastCursor()\n+        cursor.moveLeft() unless cursor.isAtBeginningOfLine()",
        "path": "lib/operators/input.coffee",
        "position": 5,
        "original_position": 5,
        "commit_id": "ecd02206c5caf6e6420dc97f0f8777f8badf8989",
        "original_commit_id": "ecd02206c5caf6e6420dc97f0f8777f8badf8989",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Can you explain why you added these two lines? I'm thinking we should avoid operating only on the editor's _last_ cursor, to make sure that these commands work smoothly with multiple cursors.\n",
        "created_at": "2015-03-11T16:52:14Z",
        "updated_at": "2015-03-11T16:52:14Z",
        "html_url": "https://github.com/atom/vim-mode/pull/560#discussion_r26230834",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/560",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/26230834"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/560#discussion_r26230834"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/560"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/26232731",
        "pull_request_review_id": null,
        "id": 26232731,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2MjMyNzMx",
        "diff_hunk": "@@ -24,6 +24,8 @@ class Insert extends Operator\n           @typedText,\n           normalizeLineEndings: true\n         )\n+        cursor = @editor.getLastCursor()\n+        cursor.moveLeft() unless cursor.isAtBeginningOfLine()",
        "path": "lib/operators/input.coffee",
        "position": 5,
        "original_position": 5,
        "commit_id": "ecd02206c5caf6e6420dc97f0f8777f8badf8989",
        "original_commit_id": "ecd02206c5caf6e6420dc97f0f8777f8badf8989",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This was because line 23 uses getCursorBufferPosition which only deals with the last cursor. If that gets changed, my two lines would want to be updated too. \n\n(I'm still new here so I go by existing code \u2013 I haven't even used multiple cursor much yet, and never in vim-mode.)\n",
        "created_at": "2015-03-11T17:11:09Z",
        "updated_at": "2015-03-11T17:11:09Z",
        "html_url": "https://github.com/atom/vim-mode/pull/560#discussion_r26232731",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/560",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/26232731"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/560#discussion_r26232731"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/560"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/26237862",
        "pull_request_review_id": null,
        "id": 26237862,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2MjM3ODYy",
        "diff_hunk": "@@ -24,6 +24,8 @@ class Insert extends Operator\n           @typedText,\n           normalizeLineEndings: true\n         )\n+        cursor = @editor.getLastCursor()\n+        cursor.moveLeft() unless cursor.isAtBeginningOfLine()",
        "path": "lib/operators/input.coffee",
        "position": 5,
        "original_position": 5,
        "commit_id": "ecd02206c5caf6e6420dc97f0f8777f8badf8989",
        "original_commit_id": "ecd02206c5caf6e6420dc97f0f8777f8badf8989",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Got it. I didn't realize that repeating insert operations still only worked on the last cursor.\n",
        "created_at": "2015-03-11T17:57:52Z",
        "updated_at": "2015-03-11T17:57:52Z",
        "html_url": "https://github.com/atom/vim-mode/pull/560#discussion_r26237862",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/560",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/26237862"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/560#discussion_r26237862"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/560"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/26414391",
        "pull_request_review_id": null,
        "id": 26414391,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2NDE0Mzkx",
        "diff_hunk": "@@ -14,9 +19,10 @@ class StatusBarManager\n \n   initialize: (@statusBar) ->\n \n-  update: (currentMode) ->\n+  update: (currentMode, currentSubmode) ->\n+    currentFullMode = currentMode + \"$\" + currentSubmode if currentSubmode?",
        "path": "lib/status-bar-manager.coffee",
        "position": null,
        "original_position": 24,
        "commit_id": "5490b33685f5f619ff795ac4189ee0b583aaa9b2",
        "original_commit_id": "4423c646becbb48888165ea77bb1a87622fb9445",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "I like it; nice solution. Nitpicks:\n- I'd rather use `.` as the delimiter than `$`. It would just mean we'd have to quote the keys.\n- I think you could avoid depending on the order of `ContentsByMode` if you did this:\n\n``` coffee\ncurrentMode = currentMode + \".\" + currentSubmode if currentSubmode?\nfor mode, [klass, html] of ContentsByMode\n  if mode is currentMode\n    # ...  \n```\n",
        "created_at": "2015-03-13T19:07:46Z",
        "updated_at": "2015-03-15T14:14:03Z",
        "html_url": "https://github.com/atom/vim-mode/pull/574#discussion_r26414391",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/574",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/26414391"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/574#discussion_r26414391"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/574"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/26420402",
        "pull_request_review_id": null,
        "id": 26420402,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2NDIwNDAy",
        "diff_hunk": "@@ -14,9 +19,10 @@ class StatusBarManager\n \n   initialize: (@statusBar) ->\n \n-  update: (currentMode) ->\n+  update: (currentMode, currentSubmode) ->\n+    currentFullMode = currentMode + \"$\" + currentSubmode if currentSubmode?",
        "path": "lib/status-bar-manager.coffee",
        "position": null,
        "original_position": 24,
        "commit_id": "5490b33685f5f619ff795ac4189ee0b583aaa9b2",
        "original_commit_id": "4423c646becbb48888165ea77bb1a87622fb9445",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Thank you.\nI've committed a fix in 91069db61fd16d6f7c6a03880cceea0fc8eeb235 so the code doesn't rely on order, keeping the ability to match only on the `mode`. If we don't keep `currentFullMode` we'd have to enumerate all submodes in ContentsByMode.\nWhich alternative would you prefer?\n",
        "created_at": "2015-03-13T20:31:17Z",
        "updated_at": "2015-03-15T14:14:03Z",
        "html_url": "https://github.com/atom/vim-mode/pull/574#discussion_r26420402",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/574",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/26420402"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/574#discussion_r26420402"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/574"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/26439227",
        "pull_request_review_id": null,
        "id": 26439227,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2NDM5MjI3",
        "diff_hunk": "@@ -14,9 +19,10 @@ class StatusBarManager\n \n   initialize: (@statusBar) ->\n \n-  update: (currentMode) ->\n+  update: (currentMode, currentSubmode) ->\n+    currentFullMode = currentMode + \"$\" + currentSubmode if currentSubmode?",
        "path": "lib/status-bar-manager.coffee",
        "position": null,
        "original_position": 24,
        "commit_id": "5490b33685f5f619ff795ac4189ee0b583aaa9b2",
        "original_commit_id": "4423c646becbb48888165ea77bb1a87622fb9445",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Oh, I see what you're saying. I think the most straightforward thing to do is to use the code snippet I wrote above; we just need to enumerate _all_ possible combinations of `mode` and `submode` in `ContentsByMode`, rather than abbreviating `visual.characterwise` as `visual`.\n\nI don't think we can use a `break` statement like you have on line 30, because it could incorrectly prevent classes from being removed from the `@element` div.\n",
        "created_at": "2015-03-14T16:31:59Z",
        "updated_at": "2015-03-15T14:14:03Z",
        "html_url": "https://github.com/atom/vim-mode/pull/574#discussion_r26439227",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/574",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/26439227"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/574#discussion_r26439227"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/574"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/26447865",
        "pull_request_review_id": null,
        "id": 26447865,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2NDQ3ODY1",
        "diff_hunk": "@@ -14,9 +19,10 @@ class StatusBarManager\n \n   initialize: (@statusBar) ->\n \n-  update: (currentMode) ->\n+  update: (currentMode, currentSubmode) ->\n+    currentFullMode = currentMode + \"$\" + currentSubmode if currentSubmode?",
        "path": "lib/status-bar-manager.coffee",
        "position": null,
        "original_position": 24,
        "commit_id": "5490b33685f5f619ff795ac4189ee0b583aaa9b2",
        "original_commit_id": "4423c646becbb48888165ea77bb1a87622fb9445",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You're right, I missed that. OK, enumeration it is; the longer I've thought about it the better this option has sounded anyway. Commit coming soon.\n",
        "created_at": "2015-03-15T13:49:24Z",
        "updated_at": "2015-03-15T14:14:03Z",
        "html_url": "https://github.com/atom/vim-mode/pull/574#discussion_r26447865",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/574",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/26447865"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/574#discussion_r26447865"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/574"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/26442021",
        "pull_request_review_id": null,
        "id": 26442021,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2NDQyMDIx",
        "diff_hunk": "@@ -4,16 +4,21 @@ module.exports =\n class VimCommandModeInputView extends View\n   @content: ->\n     @div class: 'command-mode-input', =>\n-      @div class: 'editor-container', outlet: 'editorContainer', =>\n-        @subview 'editor', new TextEditorView(mini: true)\n+      @div class: 'editor-container', outlet: 'editorContainer'\n \n   initialize: (@viewModel, opts = {})->\n     if opts.class?\n       @editorContainer.addClass opts.class\n \n     if opts.hidden\n+      # TODO: this no longer works with atom-text-editor\n       @editorContainer.addClass 'hidden-input'",
        "path": "lib/view-models/vim-command-mode-input-view.coffee",
        "position": null,
        "original_position": 14,
        "commit_id": "96b4dc71b869fc292581377c936eed75c3f1de72",
        "original_commit_id": "29462abc58b3302f6806558dc41413d5e4e3b7d1",
        "user": {
            "login": "tmm1",
            "id": 2567,
            "node_id": "MDQ6VXNlcjI1Njc=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/2567?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tmm1",
            "html_url": "https://github.com/tmm1",
            "followers_url": "https://api.github.com/users/tmm1/followers",
            "following_url": "https://api.github.com/users/tmm1/following{/other_user}",
            "gists_url": "https://api.github.com/users/tmm1/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tmm1/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tmm1/subscriptions",
            "organizations_url": "https://api.github.com/users/tmm1/orgs",
            "repos_url": "https://api.github.com/users/tmm1/repos",
            "events_url": "https://api.github.com/users/tmm1/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tmm1/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The `hidden-input` class was a special case in the deprecated TextEditorView. I'm not sure what the equivalent is for TextEditorElement\n",
        "created_at": "2015-03-14T21:41:09Z",
        "updated_at": "2015-03-19T04:20:46Z",
        "html_url": "https://github.com/atom/vim-mode/pull/582#discussion_r26442021",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/582",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/26442021"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/582#discussion_r26442021"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/582"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/26714349",
        "pull_request_review_id": null,
        "id": 26714349,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2NzE0MzQ5",
        "diff_hunk": "@@ -24,35 +29,29 @@ class VimCommandModeInputView extends View\n \n   handleEvents: ->\n     if @singleChar?\n-      @editor.find('input').on 'textInput', @autosubmit\n-    @editor.on 'core:confirm', @confirm\n-    @editor.on 'core:cancel', @cancel\n-    @editor.find('input').on 'blur', @cancel\n-\n-  stopHandlingEvents: ->\n-    if @singleChar?\n-      @editor.find('input').off 'textInput', @autosubmit\n-    @editor.off 'core:confirm', @confirm\n-    @editor.off 'core:cancel', @cancel\n-    @editor.find('input').off 'blur', @cancel\n-\n-  autosubmit: (event) =>\n-    @editor.setText(event.originalEvent.data)\n+      @editorElement.addEventListener('textInput', @autoSubmit)",
        "path": "lib/view-models/vim-command-mode-input-view.coffee",
        "position": null,
        "original_position": 46,
        "commit_id": "96b4dc71b869fc292581377c936eed75c3f1de72",
        "original_commit_id": "39939dc6c66a7c8f649688199789d1c88c3ae0bb",
        "user": {
            "login": "tmm1",
            "id": 2567,
            "node_id": "MDQ6VXNlcjI1Njc=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/2567?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tmm1",
            "html_url": "https://github.com/tmm1",
            "followers_url": "https://api.github.com/users/tmm1/followers",
            "following_url": "https://api.github.com/users/tmm1/following{/other_user}",
            "gists_url": "https://api.github.com/users/tmm1/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tmm1/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tmm1/subscriptions",
            "organizations_url": "https://api.github.com/users/tmm1/orgs",
            "repos_url": "https://api.github.com/users/tmm1/repos",
            "events_url": "https://api.github.com/users/tmm1/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tmm1/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This doesn't seem to work with addEventListener. Maybe the event needs to be keyup or something different\n",
        "created_at": "2015-03-18T22:28:52Z",
        "updated_at": "2015-03-19T04:20:46Z",
        "html_url": "https://github.com/atom/vim-mode/pull/582#discussion_r26714349",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/582",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/26714349"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/582#discussion_r26714349"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/582"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/26729006",
        "pull_request_review_id": null,
        "id": 26729006,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2NzI5MDA2",
        "diff_hunk": "@@ -24,35 +29,29 @@ class VimCommandModeInputView extends View\n \n   handleEvents: ->\n     if @singleChar?\n-      @editor.find('input').on 'textInput', @autosubmit\n-    @editor.on 'core:confirm', @confirm\n-    @editor.on 'core:cancel', @cancel\n-    @editor.find('input').on 'blur', @cancel\n-\n-  stopHandlingEvents: ->\n-    if @singleChar?\n-      @editor.find('input').off 'textInput', @autosubmit\n-    @editor.off 'core:confirm', @confirm\n-    @editor.off 'core:cancel', @cancel\n-    @editor.find('input').off 'blur', @cancel\n-\n-  autosubmit: (event) =>\n-    @editor.setText(event.originalEvent.data)\n+      @editorElement.addEventListener('textInput', @autoSubmit)",
        "path": "lib/view-models/vim-command-mode-input-view.coffee",
        "position": null,
        "original_position": 46,
        "commit_id": "96b4dc71b869fc292581377c936eed75c3f1de72",
        "original_commit_id": "39939dc6c66a7c8f649688199789d1c88c3ae0bb",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Yeah, I can't remember why that doesn't work. Observing text changes on the model seems to work ok though.\n",
        "created_at": "2015-03-19T04:23:39Z",
        "updated_at": "2015-03-19T04:23:39Z",
        "html_url": "https://github.com/atom/vim-mode/pull/582#discussion_r26729006",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/582",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/26729006"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/582#discussion_r26729006"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/582"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/27836008",
        "pull_request_review_id": null,
        "id": 27836008,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3ODM2MDA4",
        "diff_hunk": "@@ -30,5 +30,5 @@ class SearchViewModel extends ViewModel\n       @restoreHistory(@historyIndex)\n \n   confirm: (view) =>\n-    @vimState.pushSearchHistory(@)",
        "path": "lib/view-models/search-view-model.coffee",
        "position": 13,
        "original_position": 13,
        "commit_id": "d8e83c86e0b5a33cec10dfde3a35989a1a74202c",
        "original_commit_id": "d8e83c86e0b5a33cec10dfde3a35989a1a74202c",
        "user": {
            "login": "jazzpi",
            "id": 7340130,
            "node_id": "MDQ6VXNlcjczNDAxMzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/7340130?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jazzpi",
            "html_url": "https://github.com/jazzpi",
            "followers_url": "https://api.github.com/users/jazzpi/followers",
            "following_url": "https://api.github.com/users/jazzpi/following{/other_user}",
            "gists_url": "https://api.github.com/users/jazzpi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jazzpi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jazzpi/subscriptions",
            "organizations_url": "https://api.github.com/users/jazzpi/orgs",
            "repos_url": "https://api.github.com/users/jazzpi/repos",
            "events_url": "https://api.github.com/users/jazzpi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jazzpi/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "If we add something like\n\n``` coffeescript\nif @view.value is '/'\n  # somehow repeat current search without circular referencing\n```\n\ncould this fix #578?\n",
        "created_at": "2015-04-06T22:15:12Z",
        "updated_at": "2015-04-06T22:15:12Z",
        "html_url": "https://github.com/atom/vim-mode/pull/607#discussion_r27836008",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/607",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/27836008"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/607#discussion_r27836008"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/607"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/27838214",
        "pull_request_review_id": null,
        "id": 27838214,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3ODM4MjE0",
        "diff_hunk": "@@ -30,5 +30,5 @@ class SearchViewModel extends ViewModel\n       @restoreHistory(@historyIndex)\n \n   confirm: (view) =>\n-    @vimState.pushSearchHistory(@)",
        "path": "lib/view-models/search-view-model.coffee",
        "position": 13,
        "original_position": 13,
        "commit_id": "d8e83c86e0b5a33cec10dfde3a35989a1a74202c",
        "original_commit_id": "d8e83c86e0b5a33cec10dfde3a35989a1a74202c",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yes, I think so: `//<enter>`, `??<enter>`, `/<enter>` and `?<enter>` would all be easy to implement with this, I think. \nI'll be happy to try and add that if the powers that be (@maxbrunsfeld?) like this PR.\n",
        "created_at": "2015-04-06T22:49:16Z",
        "updated_at": "2015-04-06T22:49:16Z",
        "html_url": "https://github.com/atom/vim-mode/pull/607#discussion_r27838214",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/607",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/27838214"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/607#discussion_r27838214"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/607"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/27838790",
        "pull_request_review_id": null,
        "id": 27838790,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3ODM4Nzkw",
        "diff_hunk": "@@ -30,5 +30,5 @@ class SearchViewModel extends ViewModel\n       @restoreHistory(@historyIndex)\n \n   confirm: (view) =>\n-    @vimState.pushSearchHistory(@)",
        "path": "lib/view-models/search-view-model.coffee",
        "position": 13,
        "original_position": 13,
        "commit_id": "d8e83c86e0b5a33cec10dfde3a35989a1a74202c",
        "original_commit_id": "d8e83c86e0b5a33cec10dfde3a35989a1a74202c",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Yeah, I'll definitely merge this. Do you mind if I do so now, and you can do the features you mentioned above on a separate PR?\n",
        "created_at": "2015-04-06T22:59:12Z",
        "updated_at": "2015-04-06T22:59:12Z",
        "html_url": "https://github.com/atom/vim-mode/pull/607#discussion_r27838790",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/607",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/27838790"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/607#discussion_r27838790"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/607"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/27839256",
        "pull_request_review_id": null,
        "id": 27839256,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3ODM5MjU2",
        "diff_hunk": "@@ -30,5 +30,5 @@ class SearchViewModel extends ViewModel\n       @restoreHistory(@historyIndex)\n \n   confirm: (view) =>\n-    @vimState.pushSearchHistory(@)",
        "path": "lib/view-models/search-view-model.coffee",
        "position": 13,
        "original_position": 13,
        "commit_id": "d8e83c86e0b5a33cec10dfde3a35989a1a74202c",
        "original_commit_id": "d8e83c86e0b5a33cec10dfde3a35989a1a74202c",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Oh go ahead, of course. 8-)\n",
        "created_at": "2015-04-06T23:06:58Z",
        "updated_at": "2015-04-06T23:06:58Z",
        "html_url": "https://github.com/atom/vim-mode/pull/607#discussion_r27839256",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/607",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/27839256"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/607#discussion_r27839256"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/607"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/28208913",
        "pull_request_review_id": null,
        "id": 28208913,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4MjA4OTEz",
        "diff_hunk": "@@ -390,7 +390,7 @@ describe \"Operators\", ->\n \n     describe \"with multiple cursors\", ->\n       it \"deletes each selection\", ->\n-        editor.setText(\"abcd\\n1234\\nABCD\")\n+        editor.setText(\"abcd\\n1234\\nABCD\\n\")",
        "path": "spec/operators-spec.coffee",
        "position": 5,
        "original_position": 5,
        "commit_id": "902a39e7b0bf823964d5aa10cefcb6c04ecebd45",
        "original_commit_id": "902a39e7b0bf823964d5aa10cefcb6c04ecebd45",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "the missing `\\n` above was triggering another bug uncovered by this PR's fix: bug #622 is quite unrelated to this PR but the bug fixed by this PR was behaving just like we expect `de` to behave at the end of the file. With the `\\n` above, the test still tests the same expected behaviour, but without triggering #622.\n",
        "created_at": "2015-04-12T23:41:55Z",
        "updated_at": "2015-04-12T23:41:55Z",
        "html_url": "https://github.com/atom/vim-mode/pull/621#discussion_r28208913",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/621",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/28208913"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/621#discussion_r28208913"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/621"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/28610380",
        "pull_request_review_id": null,
        "id": 28610380,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4NjEwMzgw",
        "diff_hunk": "@@ -121,31 +121,79 @@ describe \"Scrolling\", ->\n         expect(editor.setScrollTop).toHaveBeenCalledWith(860)\n         expect(editor.moveToFirstCharacterOfLine).not.toHaveBeenCalled()\n \n-  describe \"scrolling half screen keybindings\", ->\n+  describe \"scrolling screen and keeping cursor in the same screen position\", ->\n     beforeEach ->\n-      text = \"\"\n-      for i in [1..80]\n-        text += \"#{i}\\n\"\n-      editor.setText(text)\n-\n-      spyOn(editor, 'setScrollTop')\n-      spyOn(editor, 'getFirstVisibleScreenRow').andReturn(40)\n-      spyOn(editor, 'getLastVisibleScreenRow').andReturn(60)\n-      spyOn(editor, 'getHeight').andReturn(400)\n-      spyOn(editor, 'getScrollTop').andReturn(600)\n+      editor.setText([0...80].join(\"\\n\"))\n+      editor.setHeight(20 * 10)\n+      editor.setLineHeightInPixels(10)\n+      editor.setCursorBufferPosition([42, 0])\n+      editor.setScrollTop(40 * 10)\n \n     describe \"the ctrl-u keybinding\", ->\n-      beforeEach ->\n-        spyOn(editor, 'setCursorScreenPosition')\n-\n       it \"moves the screen down by half screen size and keeps cursor onscreen\", ->\n         keydown('u', ctrl: true)\n-        expect(editor.setScrollTop).toHaveBeenCalledWith(400)\n+        expect(editor.getScrollTop()).toEqual 300\n+        expect(editor.getCursorBufferPosition()).toEqual [32, 0]\n \n-    describe \"the ctrl-d keybinding\", ->\n-      beforeEach ->\n-        spyOn(editor, 'setCursorScreenPosition')\n+      it \"selects on visual mode\", ->\n+        editor.setCursorBufferPosition([42, 1])\n+        vimState.activateVisualMode()\n+        keydown('u', ctrl: true)\n+        expect(editor.getSelectedText()).toEqual [32..42].join(\"\\n\").slice(1)\n \n+      it \"selects on linewise mode\", ->\n+        vimState.activateVisualMode('linewise')\n+        keydown('u', ctrl: true)\n+        expect(editor.getSelectedText()).toEqual [32..42].join(\"\\n\").concat(\"\\n\")\n+\n+    fdescribe \"the ctrl-b keybinding\", ->\n+      it \"moves screen up one page\", ->\n+        keydown('b', ctrl: true)\n+        expect(editor.getScrollTop()).toEqual 200\n+        expect(editor.getCursorScreenPosition()).toEqual [22, 0]\n+\n+      it \"selects on visual mode\", ->\n+        editor.setCursorBufferPosition([42, 1])\n+        vimState.activateVisualMode()\n+        keydown('b', ctrl: true)\n+        expect(editor.getSelectedText()).toEqual [22..42].join(\"\\n\").slice(1)\n+\n+      it \"selects on linewise mode\", ->\n+        vimState.activateVisualMode('linewise')\n+        keydown('b', ctrl: true)\n+        expect(editor.getSelectedText()).toEqual [22..42].join(\"\\n\").concat(\"\\n\")\n+\n+\n+    describe \"the ctrl-d keybinding\", ->\n       it \"moves the screen down by half screen size and keeps cursor onscreen\", ->\n         keydown('d', ctrl: true)\n-        expect(editor.setScrollTop).toHaveBeenCalledWith(800)\n+        expect(editor.getScrollTop()).toEqual 500\n+        expect(editor.getCursorBufferPosition()).toEqual [52, 0]\n+\n+      it \"selects on visual mode\", ->\n+        editor.setCursorBufferPosition([42, 1])\n+        vimState.activateVisualMode()\n+        keydown('d', ctrl: true)\n+        expect(editor.getSelectedText()).toEqual [42..52].join(\"\\n\").slice(1)\n+\n+      it \"selects on linewise mode\", ->\n+        vimState.activateVisualMode('linewise')\n+        keydown('d', ctrl: true)\n+        expect(editor.getSelectedText()).toEqual [42..52].join(\"\\n\").concat(\"\\n\")\n+\n+    fdescribe \"the ctrl-f keybinding\", ->",
        "path": "spec/scroll-spec.coffee",
        "position": null,
        "original_position": 83,
        "commit_id": "69ce29599839dc93b9082c453cef3adbe353bffd",
        "original_commit_id": "3e62ad84d5c49a63893e8ef0820cea8138473c6b",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Same here.\n",
        "created_at": "2015-04-17T16:49:47Z",
        "updated_at": "2015-04-20T19:01:13Z",
        "html_url": "https://github.com/atom/vim-mode/pull/616#discussion_r28610380",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/616",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/28610380"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/616#discussion_r28610380"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/616"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/28610384",
        "pull_request_review_id": null,
        "id": 28610384,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4NjEwMzg0",
        "diff_hunk": "@@ -121,31 +121,79 @@ describe \"Scrolling\", ->\n         expect(editor.setScrollTop).toHaveBeenCalledWith(860)\n         expect(editor.moveToFirstCharacterOfLine).not.toHaveBeenCalled()\n \n-  describe \"scrolling half screen keybindings\", ->\n+  describe \"scrolling screen and keeping cursor in the same screen position\", ->\n     beforeEach ->\n-      text = \"\"\n-      for i in [1..80]\n-        text += \"#{i}\\n\"\n-      editor.setText(text)\n-\n-      spyOn(editor, 'setScrollTop')\n-      spyOn(editor, 'getFirstVisibleScreenRow').andReturn(40)\n-      spyOn(editor, 'getLastVisibleScreenRow').andReturn(60)\n-      spyOn(editor, 'getHeight').andReturn(400)\n-      spyOn(editor, 'getScrollTop').andReturn(600)\n+      editor.setText([0...80].join(\"\\n\"))\n+      editor.setHeight(20 * 10)\n+      editor.setLineHeightInPixels(10)\n+      editor.setCursorBufferPosition([42, 0])\n+      editor.setScrollTop(40 * 10)\n \n     describe \"the ctrl-u keybinding\", ->\n-      beforeEach ->\n-        spyOn(editor, 'setCursorScreenPosition')\n-\n       it \"moves the screen down by half screen size and keeps cursor onscreen\", ->\n         keydown('u', ctrl: true)\n-        expect(editor.setScrollTop).toHaveBeenCalledWith(400)\n+        expect(editor.getScrollTop()).toEqual 300\n+        expect(editor.getCursorBufferPosition()).toEqual [32, 0]\n \n-    describe \"the ctrl-d keybinding\", ->\n-      beforeEach ->\n-        spyOn(editor, 'setCursorScreenPosition')\n+      it \"selects on visual mode\", ->\n+        editor.setCursorBufferPosition([42, 1])\n+        vimState.activateVisualMode()\n+        keydown('u', ctrl: true)\n+        expect(editor.getSelectedText()).toEqual [32..42].join(\"\\n\").slice(1)\n \n+      it \"selects on linewise mode\", ->\n+        vimState.activateVisualMode('linewise')\n+        keydown('u', ctrl: true)\n+        expect(editor.getSelectedText()).toEqual [32..42].join(\"\\n\").concat(\"\\n\")\n+\n+    fdescribe \"the ctrl-b keybinding\", ->",
        "path": "spec/scroll-spec.coffee",
        "position": null,
        "original_position": 47,
        "commit_id": "69ce29599839dc93b9082c453cef3adbe353bffd",
        "original_commit_id": "3e62ad84d5c49a63893e8ef0820cea8138473c6b",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Gotta remove the `f` here before we merge, too.\n",
        "created_at": "2015-04-17T16:49:49Z",
        "updated_at": "2015-04-20T19:01:13Z",
        "html_url": "https://github.com/atom/vim-mode/pull/616#discussion_r28610384",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/616",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/28610384"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/616#discussion_r28610384"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/616"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/28635683",
        "pull_request_review_id": null,
        "id": 28635683,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4NjM1Njgz",
        "diff_hunk": "@@ -379,11 +379,56 @@ class MoveToMiddleOfScreen extends MoveToScreenLine\n     height = lastScreenRow - firstScreenRow\n     Math.floor(firstScreenRow + (height / 2))\n \n+class ScrollKeepingCursor extends MoveToLine\n+  previousFirstScreenRow: 0\n+  currentFirstScreenRow: 0\n+\n+  constructor: (@editor, @vimState) ->\n+    super(@editor, @vimState)\n+\n+  select: (count, options) ->\n+    @scrollScreen(count)\n+    super(count, options)",
        "path": "lib/motions/general-motions.coffee",
        "position": null,
        "original_position": 13,
        "commit_id": "69ce29599839dc93b9082c453cef3adbe353bffd",
        "original_commit_id": "aaa772f786d7ce2771ca5a235d0aafcd98899062",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "So I just tried out your changes. I noticed that when in visual mode, the cursor's position is not preserved relative to the screen. I think you may need to call `@scrollScreen()` _after_ calling `super` here, because the selection change causes another scroll.\n\n``` coffee\nresult = super\n@scrollScreen(count)\nresult\n```\n",
        "created_at": "2015-04-17T22:42:58Z",
        "updated_at": "2015-04-20T19:01:13Z",
        "html_url": "https://github.com/atom/vim-mode/pull/616#discussion_r28635683",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/616",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/28635683"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/616#discussion_r28635683"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/616"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/28635722",
        "pull_request_review_id": null,
        "id": 28635722,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4NjM1NzIy",
        "diff_hunk": "@@ -379,11 +379,56 @@ class MoveToMiddleOfScreen extends MoveToScreenLine\n     height = lastScreenRow - firstScreenRow\n     Math.floor(firstScreenRow + (height / 2))\n \n+class ScrollKeepingCursor extends MoveToLine\n+  previousFirstScreenRow: 0\n+  currentFirstScreenRow: 0\n+\n+  constructor: (@editor, @vimState) ->\n+    super(@editor, @vimState)\n+\n+  select: (count, options) ->\n+    @scrollScreen(count)\n+    super(count, options)\n+\n+  execute: (count) ->\n+    @scrollScreen(count)\n+    super(count)",
        "path": "lib/motions/general-motions.coffee",
        "position": null,
        "original_position": 17,
        "commit_id": "69ce29599839dc93b9082c453cef3adbe353bffd",
        "original_commit_id": "aaa772f786d7ce2771ca5a235d0aafcd98899062",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "You may need to do the same thing here, but I'm not sure.\n",
        "created_at": "2015-04-17T22:43:48Z",
        "updated_at": "2015-04-20T19:01:13Z",
        "html_url": "https://github.com/atom/vim-mode/pull/616#discussion_r28635722",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/616",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/28635722"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/616#discussion_r28635722"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/616"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/28640235",
        "pull_request_review_id": null,
        "id": 28640235,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4NjQwMjM1",
        "diff_hunk": "@@ -379,11 +379,56 @@ class MoveToMiddleOfScreen extends MoveToScreenLine\n     height = lastScreenRow - firstScreenRow\n     Math.floor(firstScreenRow + (height / 2))\n \n+class ScrollKeepingCursor extends MoveToLine\n+  previousFirstScreenRow: 0\n+  currentFirstScreenRow: 0\n+\n+  constructor: (@editor, @vimState) ->\n+    super(@editor, @vimState)\n+\n+  select: (count, options) ->\n+    @scrollScreen(count)\n+    super(count, options)",
        "path": "lib/motions/general-motions.coffee",
        "position": null,
        "original_position": 13,
        "commit_id": "69ce29599839dc93b9082c453cef3adbe353bffd",
        "original_commit_id": "aaa772f786d7ce2771ca5a235d0aafcd98899062",
        "user": {
            "login": "daniloisr",
            "id": 157134,
            "node_id": "MDQ6VXNlcjE1NzEzNA==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/157134?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/daniloisr",
            "html_url": "https://github.com/daniloisr",
            "followers_url": "https://api.github.com/users/daniloisr/followers",
            "following_url": "https://api.github.com/users/daniloisr/following{/other_user}",
            "gists_url": "https://api.github.com/users/daniloisr/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/daniloisr/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/daniloisr/subscriptions",
            "organizations_url": "https://api.github.com/users/daniloisr/orgs",
            "repos_url": "https://api.github.com/users/daniloisr/repos",
            "events_url": "https://api.github.com/users/daniloisr/events{/privacy}",
            "received_events_url": "https://api.github.com/users/daniloisr/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@maxbrunsfeld fixed it storing the `destination` of  `setScrollTop` before calling `super` and setting the `@editor.setScrollTop` again. I know that this is not the best solution but this happen because the `Motion.select` is changing the scroll value, I tried to sove this changing the `moveSelectionLinewise` and `moveSelectionInclusively` code but I could not find a better solution.\n",
        "created_at": "2015-04-18T01:46:17Z",
        "updated_at": "2015-04-20T19:01:13Z",
        "html_url": "https://github.com/atom/vim-mode/pull/616#discussion_r28640235",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/616",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/28640235"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/616#discussion_r28640235"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/616"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/28703414",
        "pull_request_review_id": null,
        "id": 28703414,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4NzAzNDE0",
        "diff_hunk": "@@ -379,11 +379,62 @@ class MoveToMiddleOfScreen extends MoveToScreenLine\n     height = lastScreenRow - firstScreenRow\n     Math.floor(firstScreenRow + (height / 2))\n \n+class ScrollKeepingCursor extends MoveToLine\n+  previousFirstScreenRow: 0\n+  currentFirstScreenRow: 0\n+\n+  constructor: (@editor, @vimState) ->\n+    super(@editor, @vimState)",
        "path": "lib/motions/general-motions.coffee",
        "position": null,
        "original_position": 9,
        "commit_id": "69ce29599839dc93b9082c453cef3adbe353bffd",
        "original_commit_id": "ddeb7d414542a9d72e35355ecaa3c78e7da6f769",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "You can remove this `constructor` definition, since it only calls `super`.\n",
        "created_at": "2015-04-20T16:16:34Z",
        "updated_at": "2015-04-20T19:01:13Z",
        "html_url": "https://github.com/atom/vim-mode/pull/616#discussion_r28703414",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/616",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/28703414"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/616#discussion_r28703414"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/616"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/28703537",
        "pull_request_review_id": null,
        "id": 28703537,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4NzAzNTM3",
        "diff_hunk": "@@ -379,11 +379,62 @@ class MoveToMiddleOfScreen extends MoveToScreenLine\n     height = lastScreenRow - firstScreenRow\n     Math.floor(firstScreenRow + (height / 2))\n \n+class ScrollKeepingCursor extends MoveToLine\n+  previousFirstScreenRow: 0\n+  currentFirstScreenRow: 0\n+\n+  constructor: (@editor, @vimState) ->\n+    super(@editor, @vimState)\n+\n+  select: (count, options) ->\n+    final_destination = @scrollScreen(count)\n+    super(count, options)\n+    @editor.setScrollTop(final_destination)\n+\n+  execute: (count) ->\n+    final_destination = @scrollScreen(count)",
        "path": "lib/motions/general-motions.coffee",
        "position": null,
        "original_position": 17,
        "commit_id": "69ce29599839dc93b9082c453cef3adbe353bffd",
        "original_commit_id": "ddeb7d414542a9d72e35355ecaa3c78e7da6f769",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "We usually don't use `snake_case` variable names. I would say call this variable `scrollDestination`.\n",
        "created_at": "2015-04-20T16:18:04Z",
        "updated_at": "2015-04-20T19:01:13Z",
        "html_url": "https://github.com/atom/vim-mode/pull/616#discussion_r28703537",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/616",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/28703537"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/616#discussion_r28703537"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/616"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/26779644",
        "pull_request_review_id": null,
        "id": 26779644,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2Nzc5NjQ0",
        "diff_hunk": "@@ -149,10 +149,16 @@ class MoveLeft extends Motion\n class MoveRight extends Motion\n   operatesInclusively: false\n \n-  moveCursor: (cursor, count=1) ->\n+  # MoveRight can be combined with Delete, which will indicate it by the presence of options.deleting\n+  moveCursor: (cursor, count=1, options={}) ->\n     _.times count, =>\n-      cursor.moveRight() unless cursor.isAtEndOfLine()\n-      cursor.moveRight() if settings.wrapLeftRightMotion() and cursor.isAtEndOfLine()\n+      goingToNextLine = atom.config.get('vim-mode.wrapLeftRightMotion')\n+\n+      if not cursor.isAtEndOfLine() # the line is not empty\n+        cursor.moveRight()\n+        goingToNextLine = false if options.deleting # when deleting, wrapLeftRightMotion only works on an empty line",
        "path": "lib/motions/general-motions.coffee",
        "position": null,
        "original_position": 14,
        "commit_id": "3573c640767a69465cc8e5022945f319c642c767",
        "original_commit_id": "10f22a199080169ee4bb33112c6999474c52b8c0",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "I'm pretty sure `h` should perform this motion for _any_ operator, not just `d` (e.g. `y`, `gU`, `g~`). Could you try checking `@vimState.mode is 'operator-pending'` instead of `options.deleting`? If that works, you wouldn't need the `deleting` option that you added on `general-operators.coffee:87`, and could probably :fire: these comments :point_up:.\n",
        "created_at": "2015-03-19T17:49:01Z",
        "updated_at": "2015-04-28T22:35:57Z",
        "html_url": "https://github.com/atom/vim-mode/pull/555#discussion_r26779644",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/555",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/26779644"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/555#discussion_r26779644"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/555"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/26779701",
        "pull_request_review_id": null,
        "id": 26779701,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2Nzc5NzAx",
        "diff_hunk": "@@ -39,65 +39,179 @@ describe \"Operators\", ->\n \n   describe \"the x keybinding\", ->\n     describe \"on a line with content\", ->\n-      beforeEach ->\n-        editor.setText(\"012345\")\n-        editor.setCursorScreenPosition([0, 4])\n+      describe \"without vim-mode.wrapLeftRightMotion\", ->\n+        beforeEach ->\n+          editor.setText(\"abc\\n012345\\n\\nxyz\")\n+          editor.setCursorScreenPosition([1, 4])\n \n-      it \"deletes a character\", ->\n-        keydown('x')\n-        expect(editor.getText()).toBe '01235'\n-        expect(editor.getCursorScreenPosition()).toEqual [0, 4]\n-        expect(vimState.getRegister('\"').text).toBe '4'\n+        it \"deletes a character\", ->\n+          keydown('x')\n+          expect(editor.getText()).toBe 'abc\\n01235\\n\\nxyz'\n+          expect(editor.getCursorScreenPosition()).toEqual [1, 4]\n+          expect(vimState.getRegister('\"').text).toBe '4'\n \n-        keydown('x')\n-        expect(editor.getText()).toBe '0123'\n-        expect(editor.getCursorScreenPosition()).toEqual [0, 3]\n-        expect(vimState.getRegister('\"').text).toBe '5'\n+          keydown('x')\n+          expect(editor.getText()).toBe 'abc\\n0123\\n\\nxyz'\n+          expect(editor.getCursorScreenPosition()).toEqual [1, 3]\n+          expect(vimState.getRegister('\"').text).toBe '5'\n+\n+          keydown('x')\n+          expect(editor.getText()).toBe 'abc\\n012\\n\\nxyz'\n+          expect(editor.getCursorScreenPosition()).toEqual [1, 2]\n+          expect(vimState.getRegister('\"').text).toBe '3'\n+\n+          keydown('x')\n+          expect(editor.getText()).toBe 'abc\\n01\\n\\nxyz'\n+          expect(editor.getCursorScreenPosition()).toEqual [1, 1]\n+          expect(vimState.getRegister('\"').text).toBe '2'\n+\n+          keydown('x')\n+          expect(editor.getText()).toBe 'abc\\n0\\n\\nxyz'\n+          expect(editor.getCursorScreenPosition()).toEqual [1, 0]\n+          expect(vimState.getRegister('\"').text).toBe '1'\n+\n+          keydown('x')\n+          expect(editor.getText()).toBe 'abc\\n\\n\\nxyz'\n+          expect(editor.getCursorScreenPosition()).toEqual [1, 0]\n+          expect(vimState.getRegister('\"').text).toBe '0'\n+\n+        it \"deletes multiple characters with a count\", ->\n+          keydown('2')\n+          keydown('x')\n+          expect(editor.getText()).toBe 'abc\\n0123\\n\\nxyz'\n+          expect(editor.getCursorScreenPosition()).toEqual [1, 3]\n+          expect(vimState.getRegister('\"').text).toBe '45'\n+\n+          editor.setCursorScreenPosition([0, 1])\n+          keydown('3')\n+          keydown('x')\n+          expect(editor.getText()).toBe 'a\\n0123\\n\\nxyz'\n+          expect(editor.getCursorScreenPosition()).toEqual [0, 0]\n+          expect(vimState.getRegister('\"').text).toBe 'bc'\n+\n+      describe \"with vim-mode.wrapLeftRightMotion\", ->\n+        beforeEach ->\n+          editor.setText(\"abc\\n012345\\n\\nxyz\")\n+          editor.setCursorScreenPosition([1, 4])\n+          atom.config.set('vim-mode.wrapLeftRightMotion', true)\n+\n+        it \"deletes a character\", ->\n+          # copy of the earlier test because wrapLeftRightMotion should not affect it\n+          keydown('x')\n+          expect(editor.getText()).toBe 'abc\\n01235\\n\\nxyz'\n+          expect(editor.getCursorScreenPosition()).toEqual [1, 4]\n+          expect(vimState.getRegister('\"').text).toBe '4'\n+\n+          keydown('x')\n+          expect(editor.getText()).toBe 'abc\\n0123\\n\\nxyz'\n+          expect(editor.getCursorScreenPosition()).toEqual [1, 3]\n+          expect(vimState.getRegister('\"').text).toBe '5'\n+\n+          keydown('x')\n+          expect(editor.getText()).toBe 'abc\\n012\\n\\nxyz'\n+          expect(editor.getCursorScreenPosition()).toEqual [1, 2]\n+          expect(vimState.getRegister('\"').text).toBe '3'\n+\n+          keydown('x')\n+          expect(editor.getText()).toBe 'abc\\n01\\n\\nxyz'\n+          expect(editor.getCursorScreenPosition()).toEqual [1, 1]\n+          expect(vimState.getRegister('\"').text).toBe '2'\n+\n+          keydown('x')\n+          expect(editor.getText()).toBe 'abc\\n0\\n\\nxyz'\n+          expect(editor.getCursorScreenPosition()).toEqual [1, 0]\n+          expect(vimState.getRegister('\"').text).toBe '1'\n+\n+          keydown('x')\n+          expect(editor.getText()).toBe 'abc\\n\\n\\nxyz'\n+          expect(editor.getCursorScreenPosition()).toEqual [1, 0]\n+          expect(vimState.getRegister('\"').text).toBe '0'\n+\n+        it \"deletes multiple characters and newlines with a count\", ->\n+          atom.config.set('vim-mode.wrapLeftRightMotion', true)\n+          keydown('2')\n+          keydown('x')\n+          expect(editor.getText()).toBe 'abc\\n0123\\n\\nxyz'\n+          expect(editor.getCursorScreenPosition()).toEqual [1, 3]\n+          expect(vimState.getRegister('\"').text).toBe '45'\n+\n+          editor.setCursorScreenPosition([0, 1])\n+          keydown('3')\n+          keydown('x')\n+          expect(editor.getText()).toBe 'a0123\\n\\nxyz'\n+          expect(editor.getCursorScreenPosition()).toEqual [0, 1]\n+          expect(vimState.getRegister('\"').text).toBe 'bc\\n'\n+\n+          keydown('7')\n+          keydown('x')\n+          expect(editor.getText()).toBe 'ayz'\n+          expect(editor.getCursorScreenPosition()).toEqual [0, 1]\n+          expect(vimState.getRegister('\"').text).toBe '0123\\n\\nx'",
        "path": "spec/operators-spec.coffee",
        "position": 123,
        "original_position": 123,
        "commit_id": "3573c640767a69465cc8e5022945f319c642c767",
        "original_commit_id": "10f22a199080169ee4bb33112c6999474c52b8c0",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Nice tests :sparkles:.\n",
        "created_at": "2015-03-19T17:49:30Z",
        "updated_at": "2015-04-28T22:35:57Z",
        "html_url": "https://github.com/atom/vim-mode/pull/555#discussion_r26779701",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/555",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/26779701"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/555#discussion_r26779701"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/555"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/26828015",
        "pull_request_review_id": null,
        "id": 26828015,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2ODI4MDE1",
        "diff_hunk": "@@ -149,10 +149,16 @@ class MoveLeft extends Motion\n class MoveRight extends Motion\n   operatesInclusively: false\n \n-  moveCursor: (cursor, count=1) ->\n+  # MoveRight can be combined with Delete, which will indicate it by the presence of options.deleting\n+  moveCursor: (cursor, count=1, options={}) ->\n     _.times count, =>\n-      cursor.moveRight() unless cursor.isAtEndOfLine()\n-      cursor.moveRight() if settings.wrapLeftRightMotion() and cursor.isAtEndOfLine()\n+      goingToNextLine = atom.config.get('vim-mode.wrapLeftRightMotion')\n+\n+      if not cursor.isAtEndOfLine() # the line is not empty\n+        cursor.moveRight()\n+        goingToNextLine = false if options.deleting # when deleting, wrapLeftRightMotion only works on an empty line",
        "path": "lib/motions/general-motions.coffee",
        "position": null,
        "original_position": 14,
        "commit_id": "3573c640767a69465cc8e5022945f319c642c767",
        "original_commit_id": "10f22a199080169ee4bb33112c6999474c52b8c0",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Oh right, I'll check that - it would be cleaner indeed. I just need to ask for patience please, my dayjob is extra busy right now so I can't give vim-mode as much time as I'd like... Thank you.\n",
        "created_at": "2015-03-20T09:47:45Z",
        "updated_at": "2015-04-28T22:35:57Z",
        "html_url": "https://github.com/atom/vim-mode/pull/555#discussion_r26828015",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/555",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/26828015"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/555#discussion_r26828015"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/555"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/27170153",
        "pull_request_review_id": null,
        "id": 27170153,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MTcwMTUz",
        "diff_hunk": "@@ -149,10 +149,16 @@ class MoveLeft extends Motion\n class MoveRight extends Motion\n   operatesInclusively: false\n \n-  moveCursor: (cursor, count=1) ->\n+  # MoveRight can be combined with Delete, which will indicate it by the presence of options.deleting\n+  moveCursor: (cursor, count=1, options={}) ->\n     _.times count, =>\n-      cursor.moveRight() unless cursor.isAtEndOfLine()\n-      cursor.moveRight() if settings.wrapLeftRightMotion() and cursor.isAtEndOfLine()\n+      goingToNextLine = atom.config.get('vim-mode.wrapLeftRightMotion')\n+\n+      if not cursor.isAtEndOfLine() # the line is not empty\n+        cursor.moveRight()\n+        goingToNextLine = false if options.deleting # when deleting, wrapLeftRightMotion only works on an empty line",
        "path": "lib/motions/general-motions.coffee",
        "position": null,
        "original_position": 14,
        "commit_id": "3573c640767a69465cc8e5022945f319c642c767",
        "original_commit_id": "10f22a199080169ee4bb33112c6999474c52b8c0",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Just checked it and it's not simple:\n- `gUl` will not move the cursor in VIM, but in vim-mode it does (I may look into that)\n- `gUl` will do nothing in VIM on an empty line, in vim-mode with wrapping on it will move to the next line (and probably try to uppercase the newline which is a no-op)\n- `gU3l` in VIM will span a newline if done on an empty line or near the end of a line, so does vim-mode but it uppercases one more character than VIM does, in a way that's more consistent with the `l` motion so it doesn't bother me\n- `yl` in VIM on a non-empty line only yanks the character under the cursor, same in vim-mode\n- `yl` in VIM on an empty line yanks the newline and treats it as linewise for `p`; vim-mode does the same \n- `y2l` in VIM on a non-empty line on the last character only yanks that character, not including the newline, in vim-mode it also yanks the newline which makes more sense to me (and `p` sees it as a linewise selection because that's what Utils.coffee does, can't blame it)\n- `y3l` in VIM on the last character will yank the character under the cursor, the newline, and the first character of the next line, and the same in vim-mode\n\nNone of the above is affected by this PR or should be. Does this make sense?\n",
        "created_at": "2015-03-25T21:52:07Z",
        "updated_at": "2015-04-28T22:35:57Z",
        "html_url": "https://github.com/atom/vim-mode/pull/555#discussion_r27170153",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/555",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/27170153"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/555#discussion_r27170153"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/555"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/27170632",
        "pull_request_review_id": null,
        "id": 27170632,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MTcwNjMy",
        "diff_hunk": "@@ -39,65 +39,179 @@ describe \"Operators\", ->\n \n   describe \"the x keybinding\", ->\n     describe \"on a line with content\", ->\n-      beforeEach ->\n-        editor.setText(\"012345\")\n-        editor.setCursorScreenPosition([0, 4])\n+      describe \"without vim-mode.wrapLeftRightMotion\", ->\n+        beforeEach ->\n+          editor.setText(\"abc\\n012345\\n\\nxyz\")\n+          editor.setCursorScreenPosition([1, 4])\n \n-      it \"deletes a character\", ->\n-        keydown('x')\n-        expect(editor.getText()).toBe '01235'\n-        expect(editor.getCursorScreenPosition()).toEqual [0, 4]\n-        expect(vimState.getRegister('\"').text).toBe '4'\n+        it \"deletes a character\", ->\n+          keydown('x')\n+          expect(editor.getText()).toBe 'abc\\n01235\\n\\nxyz'\n+          expect(editor.getCursorScreenPosition()).toEqual [1, 4]\n+          expect(vimState.getRegister('\"').text).toBe '4'\n \n-        keydown('x')\n-        expect(editor.getText()).toBe '0123'\n-        expect(editor.getCursorScreenPosition()).toEqual [0, 3]\n-        expect(vimState.getRegister('\"').text).toBe '5'\n+          keydown('x')\n+          expect(editor.getText()).toBe 'abc\\n0123\\n\\nxyz'\n+          expect(editor.getCursorScreenPosition()).toEqual [1, 3]\n+          expect(vimState.getRegister('\"').text).toBe '5'\n+\n+          keydown('x')\n+          expect(editor.getText()).toBe 'abc\\n012\\n\\nxyz'\n+          expect(editor.getCursorScreenPosition()).toEqual [1, 2]\n+          expect(vimState.getRegister('\"').text).toBe '3'\n+\n+          keydown('x')\n+          expect(editor.getText()).toBe 'abc\\n01\\n\\nxyz'\n+          expect(editor.getCursorScreenPosition()).toEqual [1, 1]\n+          expect(vimState.getRegister('\"').text).toBe '2'\n+\n+          keydown('x')\n+          expect(editor.getText()).toBe 'abc\\n0\\n\\nxyz'\n+          expect(editor.getCursorScreenPosition()).toEqual [1, 0]\n+          expect(vimState.getRegister('\"').text).toBe '1'\n+\n+          keydown('x')\n+          expect(editor.getText()).toBe 'abc\\n\\n\\nxyz'\n+          expect(editor.getCursorScreenPosition()).toEqual [1, 0]\n+          expect(vimState.getRegister('\"').text).toBe '0'\n+\n+        it \"deletes multiple characters with a count\", ->\n+          keydown('2')\n+          keydown('x')\n+          expect(editor.getText()).toBe 'abc\\n0123\\n\\nxyz'\n+          expect(editor.getCursorScreenPosition()).toEqual [1, 3]\n+          expect(vimState.getRegister('\"').text).toBe '45'\n+\n+          editor.setCursorScreenPosition([0, 1])\n+          keydown('3')\n+          keydown('x')\n+          expect(editor.getText()).toBe 'a\\n0123\\n\\nxyz'\n+          expect(editor.getCursorScreenPosition()).toEqual [0, 0]\n+          expect(vimState.getRegister('\"').text).toBe 'bc'\n+\n+      describe \"with vim-mode.wrapLeftRightMotion\", ->\n+        beforeEach ->\n+          editor.setText(\"abc\\n012345\\n\\nxyz\")\n+          editor.setCursorScreenPosition([1, 4])\n+          atom.config.set('vim-mode.wrapLeftRightMotion', true)\n+\n+        it \"deletes a character\", ->\n+          # copy of the earlier test because wrapLeftRightMotion should not affect it\n+          keydown('x')\n+          expect(editor.getText()).toBe 'abc\\n01235\\n\\nxyz'\n+          expect(editor.getCursorScreenPosition()).toEqual [1, 4]\n+          expect(vimState.getRegister('\"').text).toBe '4'\n+\n+          keydown('x')\n+          expect(editor.getText()).toBe 'abc\\n0123\\n\\nxyz'\n+          expect(editor.getCursorScreenPosition()).toEqual [1, 3]\n+          expect(vimState.getRegister('\"').text).toBe '5'\n+\n+          keydown('x')\n+          expect(editor.getText()).toBe 'abc\\n012\\n\\nxyz'\n+          expect(editor.getCursorScreenPosition()).toEqual [1, 2]\n+          expect(vimState.getRegister('\"').text).toBe '3'\n+\n+          keydown('x')\n+          expect(editor.getText()).toBe 'abc\\n01\\n\\nxyz'\n+          expect(editor.getCursorScreenPosition()).toEqual [1, 1]\n+          expect(vimState.getRegister('\"').text).toBe '2'\n+\n+          keydown('x')\n+          expect(editor.getText()).toBe 'abc\\n0\\n\\nxyz'\n+          expect(editor.getCursorScreenPosition()).toEqual [1, 0]\n+          expect(vimState.getRegister('\"').text).toBe '1'\n+\n+          keydown('x')\n+          expect(editor.getText()).toBe 'abc\\n\\n\\nxyz'\n+          expect(editor.getCursorScreenPosition()).toEqual [1, 0]\n+          expect(vimState.getRegister('\"').text).toBe '0'\n+\n+        it \"deletes multiple characters and newlines with a count\", ->\n+          atom.config.set('vim-mode.wrapLeftRightMotion', true)\n+          keydown('2')\n+          keydown('x')\n+          expect(editor.getText()).toBe 'abc\\n0123\\n\\nxyz'\n+          expect(editor.getCursorScreenPosition()).toEqual [1, 3]\n+          expect(vimState.getRegister('\"').text).toBe '45'\n+\n+          editor.setCursorScreenPosition([0, 1])\n+          keydown('3')\n+          keydown('x')\n+          expect(editor.getText()).toBe 'a0123\\n\\nxyz'\n+          expect(editor.getCursorScreenPosition()).toEqual [0, 1]\n+          expect(vimState.getRegister('\"').text).toBe 'bc\\n'\n+\n+          keydown('7')\n+          keydown('x')\n+          expect(editor.getText()).toBe 'ayz'\n+          expect(editor.getCursorScreenPosition()).toEqual [0, 1]\n+          expect(vimState.getRegister('\"').text).toBe '0123\\n\\nx'",
        "path": "spec/operators-spec.coffee",
        "position": 123,
        "original_position": 123,
        "commit_id": "3573c640767a69465cc8e5022945f319c642c767",
        "original_commit_id": "10f22a199080169ee4bb33112c6999474c52b8c0",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Thanks. 8-)\n",
        "created_at": "2015-03-25T21:58:32Z",
        "updated_at": "2015-04-28T22:35:57Z",
        "html_url": "https://github.com/atom/vim-mode/pull/555#discussion_r27170632",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/555",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/27170632"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/555#discussion_r27170632"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/555"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/29173237",
        "pull_request_review_id": null,
        "id": 29173237,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MTczMjM3",
        "diff_hunk": "@@ -149,10 +149,16 @@ class MoveLeft extends Motion\n class MoveRight extends Motion\n   operatesInclusively: false\n \n-  moveCursor: (cursor, count=1) ->\n+  # MoveRight can be combined with Delete, which will indicate it by the presence of options.deleting\n+  moveCursor: (cursor, count=1, options={}) ->\n     _.times count, =>\n-      cursor.moveRight() unless cursor.isAtEndOfLine()\n-      cursor.moveRight() if settings.wrapLeftRightMotion() and cursor.isAtEndOfLine()\n+      goingToNextLine = atom.config.get('vim-mode.wrapLeftRightMotion')\n+\n+      if not cursor.isAtEndOfLine() # the line is not empty\n+        cursor.moveRight()\n+        goingToNextLine = false if options.deleting # when deleting, wrapLeftRightMotion only works on an empty line",
        "path": "lib/motions/general-motions.coffee",
        "position": null,
        "original_position": 14,
        "commit_id": "3573c640767a69465cc8e5022945f319c642c767",
        "original_commit_id": "10f22a199080169ee4bb33112c6999474c52b8c0",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "My general sense is that we should make Atom feel like vim, but not necessarily reimplement all of vim's inconsistencies. The `deleting` option that you added makes complete sense as a fix for this particular bug, but it bothers me that a specific motion like `MoveRight` would have knowledge of a particular type of operator (`deleting`) and take on a different behavior when used with those operators.\n\nRegarding the findings that you shared above, in your opinion, are there any operators whose behavior would _badly_ diverge from their behavior in vim if we were to handle `wrapLeftRightMotion` uniformly for all operators (by replacing `if options.deleting` with `if @vimState.mode is 'operator-pending'`)?\n",
        "created_at": "2015-04-27T18:06:43Z",
        "updated_at": "2015-04-28T22:35:57Z",
        "html_url": "https://github.com/atom/vim-mode/pull/555#discussion_r29173237",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/555",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/29173237"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/555#discussion_r29173237"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/555"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/29283909",
        "pull_request_review_id": null,
        "id": 29283909,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MjgzOTA5",
        "diff_hunk": "@@ -149,10 +149,16 @@ class MoveLeft extends Motion\n class MoveRight extends Motion\n   operatesInclusively: false\n \n-  moveCursor: (cursor, count=1) ->\n+  # MoveRight can be combined with Delete, which will indicate it by the presence of options.deleting\n+  moveCursor: (cursor, count=1, options={}) ->\n     _.times count, =>\n-      cursor.moveRight() unless cursor.isAtEndOfLine()\n-      cursor.moveRight() if settings.wrapLeftRightMotion() and cursor.isAtEndOfLine()\n+      goingToNextLine = atom.config.get('vim-mode.wrapLeftRightMotion')\n+\n+      if not cursor.isAtEndOfLine() # the line is not empty\n+        cursor.moveRight()\n+        goingToNextLine = false if options.deleting # when deleting, wrapLeftRightMotion only works on an empty line",
        "path": "lib/motions/general-motions.coffee",
        "position": null,
        "original_position": 14,
        "commit_id": "3573c640767a69465cc8e5022945f319c642c767",
        "original_commit_id": "10f22a199080169ee4bb33112c6999474c52b8c0",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ah, well put. I very much agree that _\"we should make Atom feel like vim, but not necessarily reimplement all of vim's inconsistencies.\"_ I've switched to checking for `operator-pending` and all my tests still work (as do all the other tests); the findings above change a bit but not in ways that I mind.\n",
        "created_at": "2015-04-28T20:21:25Z",
        "updated_at": "2015-04-28T22:35:57Z",
        "html_url": "https://github.com/atom/vim-mode/pull/555#discussion_r29283909",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/555",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/29283909"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/555#discussion_r29283909"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/555"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/29284114",
        "pull_request_review_id": null,
        "id": 29284114,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5Mjg0MTE0",
        "diff_hunk": "@@ -377,6 +377,9 @@ class VimState\n \n     @clearOpStack()\n     selection.clear(autoscroll: false) for selection in @editor.getSelections()\n+    for cursor in @editor.getCursors()\n+      if cursor.isAtEndOfLine() and not cursor.isAtBeginningOfLine()\n+        cursor.moveLeft()",
        "path": "lib/vim-state.coffee",
        "position": 6,
        "original_position": 6,
        "commit_id": "3573c640767a69465cc8e5022945f319c642c767",
        "original_commit_id": "643c13807f17107a2a212a395a46d2874707381a",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This is so that things like `gUl` don't put the cursor after the end of a line.\n",
        "created_at": "2015-04-28T20:23:27Z",
        "updated_at": "2015-04-28T22:35:57Z",
        "html_url": "https://github.com/atom/vim-mode/pull/555#discussion_r29284114",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/555",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/29284114"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/555#discussion_r29284114"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/555"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/29284720",
        "pull_request_review_id": null,
        "id": 29284720,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5Mjg0NzIw",
        "diff_hunk": "@@ -149,10 +149,16 @@ class MoveLeft extends Motion\n class MoveRight extends Motion\n   operatesInclusively: false\n \n-  moveCursor: (cursor, count=1) ->\n+  moveCursor: (cursor, count=1, options={}) ->",
        "path": "lib/motions/general-motions.coffee",
        "position": null,
        "original_position": 5,
        "commit_id": "3573c640767a69465cc8e5022945f319c642c767",
        "original_commit_id": "643c13807f17107a2a212a395a46d2874707381a",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Could you remove the `options` parameter here now?\n",
        "created_at": "2015-04-28T20:28:56Z",
        "updated_at": "2015-04-28T22:35:57Z",
        "html_url": "https://github.com/atom/vim-mode/pull/555#discussion_r29284720",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/555",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/29284720"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/555#discussion_r29284720"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/555"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/29284762",
        "pull_request_review_id": null,
        "id": 29284762,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5Mjg0NzYy",
        "diff_hunk": "@@ -149,10 +149,16 @@ class MoveLeft extends Motion\n class MoveRight extends Motion\n   operatesInclusively: false\n \n-  moveCursor: (cursor, count=1) ->\n+  moveCursor: (cursor, count=1, options={}) ->\n     _.times count, =>\n+      wrapToNextLine = settings.wrapLeftRightMotion()\n+\n+      # when the motion is combined with an operator, we will only wrap to the next line\n+      # if we are already at the end of the line (after the last character)\n+      wrapToNextLine = false if @vimState.mode is 'operator-pending' and not cursor.isAtEndOfLine()\n+",
        "path": "lib/motions/general-motions.coffee",
        "position": 9,
        "original_position": 12,
        "commit_id": "3573c640767a69465cc8e5022945f319c642c767",
        "original_commit_id": "643c13807f17107a2a212a395a46d2874707381a",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": ":+1: I like this latest formulation.\n",
        "created_at": "2015-04-28T20:29:16Z",
        "updated_at": "2015-04-28T22:35:57Z",
        "html_url": "https://github.com/atom/vim-mode/pull/555#discussion_r29284762",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/555",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/29284762"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/555#discussion_r29284762"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/555"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/29295733",
        "pull_request_review_id": null,
        "id": 29295733,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5Mjk1NzMz",
        "diff_hunk": "@@ -149,10 +149,16 @@ class MoveLeft extends Motion\n class MoveRight extends Motion\n   operatesInclusively: false\n \n-  moveCursor: (cursor, count=1) ->\n+  moveCursor: (cursor, count=1, options={}) ->",
        "path": "lib/motions/general-motions.coffee",
        "position": null,
        "original_position": 5,
        "commit_id": "3573c640767a69465cc8e5022945f319c642c767",
        "original_commit_id": "643c13807f17107a2a212a395a46d2874707381a",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "done, thanks for spotting it.\n",
        "created_at": "2015-04-28T22:36:32Z",
        "updated_at": "2015-04-28T22:36:32Z",
        "html_url": "https://github.com/atom/vim-mode/pull/555#discussion_r29295733",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/555",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/29295733"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/555#discussion_r29295733"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/555"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/30721019",
        "pull_request_review_id": null,
        "id": 30721019,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNzIxMDE5",
        "diff_hunk": "@@ -22,6 +25,8 @@ more often than other developers. Adding a feature can be quick and easy. Check\n out the [closed pull requests](https://github.com/atom/vim-mode/pulls?direction=desc&page=1&sort=created&state=closed)\n to see examples of community contributions. We're looking forward to yours, too.\n \n+\n+",
        "path": "README.md",
        "position": null,
        "original_position": 15,
        "commit_id": "5c106497199017e73274ab5408a09ae6a274395e",
        "original_commit_id": "40e7f3d6fea306063e6249953954c0d873f345de",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Could you :fire: these extra line breaks?\n",
        "created_at": "2015-05-20T16:29:34Z",
        "updated_at": "2015-05-20T16:32:01Z",
        "html_url": "https://github.com/atom/vim-mode/pull/669#discussion_r30721019",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/669",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/30721019"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/669#discussion_r30721019"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/669"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/30990438",
        "pull_request_review_id": null,
        "id": 30990438,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwOTkwNDM4",
        "diff_hunk": "@@ -633,9 +632,10 @@ describe \"Motions\", ->\n           keydown('-')\n \n         it \"selects to the first character of the previous line (directly above)\", ->\n-          expect(editor.getText()).toBe \"abcdefg\\n\"\n+          # commented out because vim does not put a newline but vim-mode does\n+          #expect(editor.getText()).toBe \"abcdefg\"",
        "path": "spec/motions-spec.coffee",
        "position": null,
        "original_position": 16,
        "commit_id": "c6dada3c9ec7052a17a11c514669edc806e4ef8a",
        "original_commit_id": "d569428a7b49dd2c05eceb0fabcb534df89a4070",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Did your change cause this assertion to fail? I can't tell why this would be affected by skipping the leading whitespace.\n",
        "created_at": "2015-05-25T18:25:19Z",
        "updated_at": "2015-05-26T17:42:47Z",
        "html_url": "https://github.com/atom/vim-mode/pull/677#discussion_r30990438",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/677",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/30990438"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/677#discussion_r30990438"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/677"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/30990491",
        "pull_request_review_id": null,
        "id": 30990491,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwOTkwNDkx",
        "diff_hunk": "@@ -328,6 +328,17 @@ describe \"Operators\", ->\n         expect(editor.getText()).toBe \"12345\\nabcde\\n\"\n         expect(editor.getCursorScreenPosition()).toEqual [2, 0]\n \n+      it \"leaves the cursor on the first nonblank character\", ->\n+        editor.setText(\"12345\\n  abcde\\n\")\n+        editor.setCursorScreenPosition([0, 4])\n+\n+        keydown('d')\n+        keydown('d')\n+\n+        expect(editor.getText()).toBe \"  abcde\\n\"\n+        expect(editor.getCursorScreenPosition()).toEqual [0, 2]\n+\n+",
        "path": "spec/operators-spec.coffee",
        "position": null,
        "original_position": 14,
        "commit_id": "c6dada3c9ec7052a17a11c514669edc806e4ef8a",
        "original_commit_id": "d569428a7b49dd2c05eceb0fabcb534df89a4070",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Could you remove this second blank line? Very minor, but seems worth mentioning since it looks like you're doing a lot of work on this package :+1:.\n",
        "created_at": "2015-05-25T18:26:57Z",
        "updated_at": "2015-05-26T17:42:47Z",
        "html_url": "https://github.com/atom/vim-mode/pull/677#discussion_r30990491",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/677",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/30990491"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/677#discussion_r30990491"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/677"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/30990800",
        "pull_request_review_id": null,
        "id": 30990800,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwOTkwODAw",
        "diff_hunk": "@@ -633,9 +632,10 @@ describe \"Motions\", ->\n           keydown('-')\n \n         it \"selects to the first character of the previous line (directly above)\", ->\n-          expect(editor.getText()).toBe \"abcdefg\\n\"\n+          # commented out because vim does not put a newline but vim-mode does\n+          #expect(editor.getText()).toBe \"abcdefg\"",
        "path": "spec/motions-spec.coffee",
        "position": null,
        "original_position": 16,
        "commit_id": "c6dada3c9ec7052a17a11c514669edc806e4ef8a",
        "original_commit_id": "d569428a7b49dd2c05eceb0fabcb534df89a4070",
        "user": {
            "login": "bronson",
            "id": 1776,
            "node_id": "MDQ6VXNlcjE3NzY=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1776?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bronson",
            "html_url": "https://github.com/bronson",
            "followers_url": "https://api.github.com/users/bronson/followers",
            "following_url": "https://api.github.com/users/bronson/following{/other_user}",
            "gists_url": "https://api.github.com/users/bronson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bronson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bronson/subscriptions",
            "organizations_url": "https://api.github.com/users/bronson/orgs",
            "repos_url": "https://api.github.com/users/bronson/repos",
            "events_url": "https://api.github.com/users/bronson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bronson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I pulled these commits out of a hairier patchset fixing https://github.com/atom/vim-mode/pull/386 and accidentally let this line come along for the ride.\n\nTechnically, this assertion is wrong -- vim doesn't put the newline.  But that's a fix for another day.\n",
        "created_at": "2015-05-25T18:37:59Z",
        "updated_at": "2015-05-26T17:42:47Z",
        "html_url": "https://github.com/atom/vim-mode/pull/677#discussion_r30990800",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/677",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/30990800"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/677#discussion_r30990800"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/677"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/30990963",
        "pull_request_review_id": null,
        "id": 30990963,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwOTkwOTYz",
        "diff_hunk": "@@ -652,7 +651,8 @@ describe \"Motions\", ->\n           keydown('-')\n \n         it \"selects to the first character of the previous line\", ->\n-          expect(editor.getText()).toBe \"abcdefg\\n\"\n+          # commented out because vim does not put a newline but vim-mode does\n+          #expect(editor.getText()).toBe \"abcdefg\"",
        "path": "spec/motions-spec.coffee",
        "position": null,
        "original_position": 25,
        "commit_id": "c6dada3c9ec7052a17a11c514669edc806e4ef8a",
        "original_commit_id": "ec8d6280402f551d1bf5bf916a3a5931f789d042",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Could you restore this too?\n",
        "created_at": "2015-05-25T18:43:12Z",
        "updated_at": "2015-05-26T17:42:47Z",
        "html_url": "https://github.com/atom/vim-mode/pull/677#discussion_r30990963",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/677",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/30990963"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/677#discussion_r30990963"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/677"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/30990973",
        "pull_request_review_id": null,
        "id": 30990973,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwOTkwOTcz",
        "diff_hunk": "@@ -699,7 +698,8 @@ describe \"Motions\", ->\n           keydown('+')\n \n         it \"deletes the current and next line\", ->\n-          expect(editor.getText()).toBe \"  abc\\n\"\n+          # commented out because vim does not put a newline but vim-mode does\n+          #expect(editor.getText()).toBe \"  abc\"",
        "path": "spec/motions-spec.coffee",
        "position": null,
        "original_position": 45,
        "commit_id": "c6dada3c9ec7052a17a11c514669edc806e4ef8a",
        "original_commit_id": "ec8d6280402f551d1bf5bf916a3a5931f789d042",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "and this\n",
        "created_at": "2015-05-25T18:43:29Z",
        "updated_at": "2015-05-26T17:42:47Z",
        "html_url": "https://github.com/atom/vim-mode/pull/677#discussion_r30990973",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/677",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/30990973"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/677#discussion_r30990973"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/677"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/30991426",
        "pull_request_review_id": null,
        "id": 30991426,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwOTkxNDI2",
        "diff_hunk": "@@ -652,7 +651,8 @@ describe \"Motions\", ->\n           keydown('-')\n \n         it \"selects to the first character of the previous line\", ->\n-          expect(editor.getText()).toBe \"abcdefg\\n\"\n+          # commented out because vim does not put a newline but vim-mode does\n+          #expect(editor.getText()).toBe \"abcdefg\"",
        "path": "spec/motions-spec.coffee",
        "position": null,
        "original_position": 25,
        "commit_id": "c6dada3c9ec7052a17a11c514669edc806e4ef8a",
        "original_commit_id": "ec8d6280402f551d1bf5bf916a3a5931f789d042",
        "user": {
            "login": "bronson",
            "id": 1776,
            "node_id": "MDQ6VXNlcjE3NzY=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1776?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bronson",
            "html_url": "https://github.com/bronson",
            "followers_url": "https://api.github.com/users/bronson/followers",
            "following_url": "https://api.github.com/users/bronson/following{/other_user}",
            "gists_url": "https://api.github.com/users/bronson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bronson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bronson/subscriptions",
            "organizations_url": "https://api.github.com/users/bronson/orgs",
            "repos_url": "https://api.github.com/users/bronson/repos",
            "events_url": "https://api.github.com/users/bronson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bronson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "sure.  what's worse: missing specs, or incorrect specs?  :)\n",
        "created_at": "2015-05-25T19:00:47Z",
        "updated_at": "2015-05-26T17:42:47Z",
        "html_url": "https://github.com/atom/vim-mode/pull/677#discussion_r30991426",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/677",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/30991426"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/677#discussion_r30991426"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/677"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/30996780",
        "pull_request_review_id": null,
        "id": 30996780,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwOTk2Nzgw",
        "diff_hunk": "@@ -652,7 +651,8 @@ describe \"Motions\", ->\n           keydown('-')\n \n         it \"selects to the first character of the previous line\", ->\n-          expect(editor.getText()).toBe \"abcdefg\\n\"\n+          # commented out because vim does not put a newline but vim-mode does\n+          #expect(editor.getText()).toBe \"abcdefg\"",
        "path": "spec/motions-spec.coffee",
        "position": null,
        "original_position": 25,
        "commit_id": "c6dada3c9ec7052a17a11c514669edc806e4ef8a",
        "original_commit_id": "ec8d6280402f551d1bf5bf916a3a5931f789d042",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "This is fine, but for future PRs, it'd be better to not add comments on things unrelated to the PR. It would be better to leave those lines unchanged and then possibly submit a separate PR that fixes the other bug.\n",
        "created_at": "2015-05-25T22:48:55Z",
        "updated_at": "2015-05-26T17:42:47Z",
        "html_url": "https://github.com/atom/vim-mode/pull/677#discussion_r30996780",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/677",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/30996780"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/677#discussion_r30996780"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/677"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/29511567",
        "pull_request_review_id": null,
        "id": 29511567,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5NTExNTY3",
        "diff_hunk": "@@ -1,16 +1,17 @@\n {Operator} = require './general-operators'\n {Range} = require 'atom'\n+settings = require '../settings'\n \n #\n # It increases or decreases the next number on the line\n #\n class Increase extends Operator\n   step: 1\n-  numberRegex: new RegExp(\"-?[0-9]+\")\n \n   constructor: ->\n     super\n     @complete = true\n+    @numberRegex = new RegExp(settings.numberRegex() or settings.config.numberRegex.default)",
        "path": "lib/operators/increase-operators.coffee",
        "position": null,
        "original_position": 15,
        "commit_id": "087303d36af1d04d4fc0ffff8604a2f64882e722",
        "original_commit_id": "5051aed50f451caa500305bcae67890479c0b484",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "I think you don't need to explicitly fall back on the default value; [`atom.config.get`](https://atom.io/docs/api/v0.196.0/Config#instance-get) should return the default value if the user has not overridden it.\n",
        "created_at": "2015-05-01T16:14:13Z",
        "updated_at": "2015-06-05T19:07:49Z",
        "html_url": "https://github.com/atom/vim-mode/pull/643#discussion_r29511567",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/643",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/29511567"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/643#discussion_r29511567"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/643"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/29523223",
        "pull_request_review_id": null,
        "id": 29523223,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5NTIzMjIz",
        "diff_hunk": "@@ -1,16 +1,17 @@\n {Operator} = require './general-operators'\n {Range} = require 'atom'\n+settings = require '../settings'\n \n #\n # It increases or decreases the next number on the line\n #\n class Increase extends Operator\n   step: 1\n-  numberRegex: new RegExp(\"-?[0-9]+\")\n \n   constructor: ->\n     super\n     @complete = true\n+    @numberRegex = new RegExp(settings.numberRegex() or settings.config.numberRegex.default)",
        "path": "lib/operators/increase-operators.coffee",
        "position": null,
        "original_position": 15,
        "commit_id": "087303d36af1d04d4fc0ffff8604a2f64882e722",
        "original_commit_id": "5051aed50f451caa500305bcae67890479c0b484",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "For some reason the tests won't run for me without that.\n",
        "created_at": "2015-05-01T18:39:10Z",
        "updated_at": "2015-06-05T19:07:49Z",
        "html_url": "https://github.com/atom/vim-mode/pull/643#discussion_r29523223",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/643",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/29523223"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/643#discussion_r29523223"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/643"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/33899912",
        "pull_request_review_id": null,
        "id": 33899912,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODk5OTEy",
        "diff_hunk": "@@ -0,0 +1,58 @@\n+{Motion} = require './general-motions'\n+path = require 'path'\n+{Directory} = require 'atom'\n+shell = require 'shell'\n+{exec} = require 'child_process'\n+utils = require '../utils'\n+\n+class OpenFileUnderCursor extends Motion\n+  execute: (count) ->\n+    ###\n+      /usr/bin/test\n+      ../../.travis.yml\n+      ./search-motion\n+      ./index\n+      http://github.com\n+      https://thing.com/item%20test\n+      //github.com\n+    ###\n+    wordRegex = /[a-z0-9\\.\\-_\\/\\\\%:]+/i\n+    @editor.getCursors().forEach (cursor) =>\n+      currentWord = utils.getCurrentWord @editor, cursor, wordRegex\n+      # range = cursor.getCurrentWordBufferRange wordRegex: wordRegex\n+      # selectedPath = @editor.getTextInRange range\n+      range = currentWord.range\n+      selectedPath = currentWord.word",
        "path": "lib/motions/open-file-under-cursor.coffee",
        "position": 25,
        "original_position": 25,
        "commit_id": "b43aff39ed1e4427003f281063ccdf65930d088b",
        "original_commit_id": "b43aff39ed1e4427003f281063ccdf65930d088b",
        "user": {
            "login": "bronson",
            "id": 1776,
            "node_id": "MDQ6VXNlcjE3NzY=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1776?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bronson",
            "html_url": "https://github.com/bronson",
            "followers_url": "https://api.github.com/users/bronson/followers",
            "following_url": "https://api.github.com/users/bronson/following{/other_user}",
            "gists_url": "https://api.github.com/users/bronson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bronson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bronson/subscriptions",
            "organizations_url": "https://api.github.com/users/bronson/orgs",
            "repos_url": "https://api.github.com/users/bronson/repos",
            "events_url": "https://api.github.com/users/bronson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bronson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Would `{range, selectedPath} = utils.getCurrentWord(...)` work?\n",
        "created_at": "2015-07-05T22:50:12Z",
        "updated_at": "2015-07-05T22:50:12Z",
        "html_url": "https://github.com/atom/vim-mode/pull/727#discussion_r33899912",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/727",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/33899912"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/727#discussion_r33899912"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/727"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/33899951",
        "pull_request_review_id": null,
        "id": 33899951,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODk5OTUx",
        "diff_hunk": "@@ -0,0 +1,58 @@\n+{Motion} = require './general-motions'\n+path = require 'path'\n+{Directory} = require 'atom'\n+shell = require 'shell'\n+{exec} = require 'child_process'\n+utils = require '../utils'\n+\n+class OpenFileUnderCursor extends Motion\n+  execute: (count) ->\n+    ###\n+      /usr/bin/test\n+      ../../.travis.yml\n+      ./search-motion\n+      ./index\n+      http://github.com\n+      https://thing.com/item%20test\n+      //github.com\n+    ###\n+    wordRegex = /[a-z0-9\\.\\-_\\/\\\\%:]+/i\n+    @editor.getCursors().forEach (cursor) =>\n+      currentWord = utils.getCurrentWord @editor, cursor, wordRegex\n+      # range = cursor.getCurrentWordBufferRange wordRegex: wordRegex\n+      # selectedPath = @editor.getTextInRange range\n+      range = currentWord.range\n+      selectedPath = currentWord.word\n+\n+      # exit early for url match\n+      if /^https?:/i.test(selectedPath)\n+        return @openUrl selectedPath\n+      if /^\\/\\//i.test(selectedPath)\n+        return @openUrl \"http:#{selectedPath}\"\n+\n+      if selectedPath[0] isnt '/' and selectedPath[0] isnt '\\\\'\n+        selectedPath = path.join path.dirname(@editor.buffer.file.path), selectedPath\n+",
        "path": "lib/motions/open-file-under-cursor.coffee",
        "position": 35,
        "original_position": 35,
        "commit_id": "b43aff39ed1e4427003f281063ccdf65930d088b",
        "original_commit_id": "b43aff39ed1e4427003f281063ccdf65930d088b",
        "user": {
            "login": "bronson",
            "id": 1776,
            "node_id": "MDQ6VXNlcjE3NzY=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1776?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bronson",
            "html_url": "https://github.com/bronson",
            "followers_url": "https://api.github.com/users/bronson/followers",
            "following_url": "https://api.github.com/users/bronson/following{/other_user}",
            "gists_url": "https://api.github.com/users/bronson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bronson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bronson/subscriptions",
            "organizations_url": "https://api.github.com/users/bronson/orgs",
            "repos_url": "https://api.github.com/users/bronson/repos",
            "events_url": "https://api.github.com/users/bronson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bronson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "maybe put everything below here into a new function?  overall this patch looks great to me.\n",
        "created_at": "2015-07-05T22:52:35Z",
        "updated_at": "2015-07-05T22:52:35Z",
        "html_url": "https://github.com/atom/vim-mode/pull/727#discussion_r33899951",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/727",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/33899951"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/727#discussion_r33899951"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/727"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/33966486",
        "pull_request_review_id": null,
        "id": 33966486,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzOTY2NDg2",
        "diff_hunk": "@@ -0,0 +1,58 @@\n+{Motion} = require './general-motions'\n+path = require 'path'\n+{Directory} = require 'atom'\n+shell = require 'shell'\n+{exec} = require 'child_process'\n+utils = require '../utils'\n+\n+class OpenFileUnderCursor extends Motion\n+  execute: (count) ->\n+    ###\n+      /usr/bin/test\n+      ../../.travis.yml\n+      ./search-motion\n+      ./index\n+      http://github.com\n+      https://thing.com/item%20test\n+      //github.com\n+    ###\n+    wordRegex = /[a-z0-9\\.\\-_\\/\\\\%:]+/i\n+    @editor.getCursors().forEach (cursor) =>\n+      currentWord = utils.getCurrentWord @editor, cursor, wordRegex\n+      # range = cursor.getCurrentWordBufferRange wordRegex: wordRegex\n+      # selectedPath = @editor.getTextInRange range\n+      range = currentWord.range\n+      selectedPath = currentWord.word",
        "path": "lib/motions/open-file-under-cursor.coffee",
        "position": 25,
        "original_position": 25,
        "commit_id": "b43aff39ed1e4427003f281063ccdf65930d088b",
        "original_commit_id": "b43aff39ed1e4427003f281063ccdf65930d088b",
        "user": {
            "login": "irrationalistic",
            "id": 851856,
            "node_id": "MDQ6VXNlcjg1MTg1Ng==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/851856?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/irrationalistic",
            "html_url": "https://github.com/irrationalistic",
            "followers_url": "https://api.github.com/users/irrationalistic/followers",
            "following_url": "https://api.github.com/users/irrationalistic/following{/other_user}",
            "gists_url": "https://api.github.com/users/irrationalistic/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/irrationalistic/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/irrationalistic/subscriptions",
            "organizations_url": "https://api.github.com/users/irrationalistic/orgs",
            "repos_url": "https://api.github.com/users/irrationalistic/repos",
            "events_url": "https://api.github.com/users/irrationalistic/events{/privacy}",
            "received_events_url": "https://api.github.com/users/irrationalistic/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I wanted to be able to use selectedPath, but keep the `getCurrentWord` method as generic as possible, so i'd end up with an extra declaration anyways or I'd have to use `word` in the remaining code! Does that make sense?\n",
        "created_at": "2015-07-06T18:30:18Z",
        "updated_at": "2015-07-06T18:30:18Z",
        "html_url": "https://github.com/atom/vim-mode/pull/727#discussion_r33966486",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/727",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/33966486"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/727#discussion_r33966486"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/727"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/33967261",
        "pull_request_review_id": null,
        "id": 33967261,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzOTY3MjYx",
        "diff_hunk": "@@ -0,0 +1,58 @@\n+{Motion} = require './general-motions'\n+path = require 'path'\n+{Directory} = require 'atom'\n+shell = require 'shell'\n+{exec} = require 'child_process'\n+utils = require '../utils'\n+\n+class OpenFileUnderCursor extends Motion\n+  execute: (count) ->\n+    ###\n+      /usr/bin/test\n+      ../../.travis.yml\n+      ./search-motion\n+      ./index\n+      http://github.com\n+      https://thing.com/item%20test\n+      //github.com\n+    ###\n+    wordRegex = /[a-z0-9\\.\\-_\\/\\\\%:]+/i\n+    @editor.getCursors().forEach (cursor) =>\n+      currentWord = utils.getCurrentWord @editor, cursor, wordRegex\n+      # range = cursor.getCurrentWordBufferRange wordRegex: wordRegex\n+      # selectedPath = @editor.getTextInRange range\n+      range = currentWord.range\n+      selectedPath = currentWord.word\n+\n+      # exit early for url match\n+      if /^https?:/i.test(selectedPath)\n+        return @openUrl selectedPath\n+      if /^\\/\\//i.test(selectedPath)\n+        return @openUrl \"http:#{selectedPath}\"\n+\n+      if selectedPath[0] isnt '/' and selectedPath[0] isnt '\\\\'\n+        selectedPath = path.join path.dirname(@editor.buffer.file.path), selectedPath\n+",
        "path": "lib/motions/open-file-under-cursor.coffee",
        "position": 35,
        "original_position": 35,
        "commit_id": "b43aff39ed1e4427003f281063ccdf65930d088b",
        "original_commit_id": "b43aff39ed1e4427003f281063ccdf65930d088b",
        "user": {
            "login": "irrationalistic",
            "id": 851856,
            "node_id": "MDQ6VXNlcjg1MTg1Ng==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/851856?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/irrationalistic",
            "html_url": "https://github.com/irrationalistic",
            "followers_url": "https://api.github.com/users/irrationalistic/followers",
            "following_url": "https://api.github.com/users/irrationalistic/following{/other_user}",
            "gists_url": "https://api.github.com/users/irrationalistic/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/irrationalistic/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/irrationalistic/subscriptions",
            "organizations_url": "https://api.github.com/users/irrationalistic/orgs",
            "repos_url": "https://api.github.com/users/irrationalistic/repos",
            "events_url": "https://api.github.com/users/irrationalistic/events{/privacy}",
            "received_events_url": "https://api.github.com/users/irrationalistic/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Thanks! Not sure if that would really be useful yet, but it might be good if there is a need to extend from this class. Are there any other vim commands that work via files?\n",
        "created_at": "2015-07-06T18:37:01Z",
        "updated_at": "2015-07-06T18:37:01Z",
        "html_url": "https://github.com/atom/vim-mode/pull/727#discussion_r33967261",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/727",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/33967261"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/727#discussion_r33967261"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/727"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/33970483",
        "pull_request_review_id": null,
        "id": 33970483,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzOTcwNDgz",
        "diff_hunk": "@@ -0,0 +1,58 @@\n+{Motion} = require './general-motions'\n+path = require 'path'\n+{Directory} = require 'atom'\n+shell = require 'shell'\n+{exec} = require 'child_process'\n+utils = require '../utils'\n+\n+class OpenFileUnderCursor extends Motion\n+  execute: (count) ->\n+    ###\n+      /usr/bin/test\n+      ../../.travis.yml\n+      ./search-motion\n+      ./index\n+      http://github.com\n+      https://thing.com/item%20test\n+      //github.com\n+    ###\n+    wordRegex = /[a-z0-9\\.\\-_\\/\\\\%:]+/i\n+    @editor.getCursors().forEach (cursor) =>\n+      currentWord = utils.getCurrentWord @editor, cursor, wordRegex\n+      # range = cursor.getCurrentWordBufferRange wordRegex: wordRegex\n+      # selectedPath = @editor.getTextInRange range\n+      range = currentWord.range\n+      selectedPath = currentWord.word",
        "path": "lib/motions/open-file-under-cursor.coffee",
        "position": 25,
        "original_position": 25,
        "commit_id": "b43aff39ed1e4427003f281063ccdf65930d088b",
        "original_commit_id": "b43aff39ed1e4427003f281063ccdf65930d088b",
        "user": {
            "login": "bronson",
            "id": 1776,
            "node_id": "MDQ6VXNlcjE3NzY=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1776?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bronson",
            "html_url": "https://github.com/bronson",
            "followers_url": "https://api.github.com/users/bronson/followers",
            "following_url": "https://api.github.com/users/bronson/following{/other_user}",
            "gists_url": "https://api.github.com/users/bronson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bronson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bronson/subscriptions",
            "organizations_url": "https://api.github.com/users/bronson/orgs",
            "repos_url": "https://api.github.com/users/bronson/repos",
            "events_url": "https://api.github.com/users/bronson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bronson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "oop, you're right.  renaming word to selectedPath takes another line anyway so this change wouldn't buy much.  Never mind!\n",
        "created_at": "2015-07-06T19:05:59Z",
        "updated_at": "2015-07-06T19:05:59Z",
        "html_url": "https://github.com/atom/vim-mode/pull/727#discussion_r33970483",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/727",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/33970483"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/727#discussion_r33970483"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/727"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/33970694",
        "pull_request_review_id": null,
        "id": 33970694,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzOTcwNjk0",
        "diff_hunk": "@@ -0,0 +1,58 @@\n+{Motion} = require './general-motions'\n+path = require 'path'\n+{Directory} = require 'atom'\n+shell = require 'shell'\n+{exec} = require 'child_process'\n+utils = require '../utils'\n+\n+class OpenFileUnderCursor extends Motion\n+  execute: (count) ->\n+    ###\n+      /usr/bin/test\n+      ../../.travis.yml\n+      ./search-motion\n+      ./index\n+      http://github.com\n+      https://thing.com/item%20test\n+      //github.com\n+    ###\n+    wordRegex = /[a-z0-9\\.\\-_\\/\\\\%:]+/i\n+    @editor.getCursors().forEach (cursor) =>\n+      currentWord = utils.getCurrentWord @editor, cursor, wordRegex\n+      # range = cursor.getCurrentWordBufferRange wordRegex: wordRegex\n+      # selectedPath = @editor.getTextInRange range\n+      range = currentWord.range\n+      selectedPath = currentWord.word\n+\n+      # exit early for url match\n+      if /^https?:/i.test(selectedPath)\n+        return @openUrl selectedPath\n+      if /^\\/\\//i.test(selectedPath)\n+        return @openUrl \"http:#{selectedPath}\"\n+\n+      if selectedPath[0] isnt '/' and selectedPath[0] isnt '\\\\'\n+        selectedPath = path.join path.dirname(@editor.buffer.file.path), selectedPath\n+",
        "path": "lib/motions/open-file-under-cursor.coffee",
        "position": 35,
        "original_position": 35,
        "commit_id": "b43aff39ed1e4427003f281063ccdf65930d088b",
        "original_commit_id": "b43aff39ed1e4427003f281063ccdf65930d088b",
        "user": {
            "login": "bronson",
            "id": 1776,
            "node_id": "MDQ6VXNlcjE3NzY=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1776?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bronson",
            "html_url": "https://github.com/bronson",
            "followers_url": "https://api.github.com/users/bronson/followers",
            "following_url": "https://api.github.com/users/bronson/following{/other_user}",
            "gists_url": "https://api.github.com/users/bronson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bronson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bronson/subscriptions",
            "organizations_url": "https://api.github.com/users/bronson/orgs",
            "repos_url": "https://api.github.com/users/bronson/repos",
            "events_url": "https://api.github.com/users/bronson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bronson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "There are some ex functions that work on files like this but I can't think of anything else that would be in vim-mode.  So, yea, doesn't make sense from a code reusability standpoint.\n\nI was just thinking from a readability standpoint: seems like the first half of the function is doing a pretty different job from the second half.  The parts might be easier to understand than the whole.\n\nBut, like before, I might not be seeing the whole picture here.  :)\n",
        "created_at": "2015-07-06T19:08:05Z",
        "updated_at": "2015-07-06T19:08:05Z",
        "html_url": "https://github.com/atom/vim-mode/pull/727#discussion_r33970694",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/727",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/33970694"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/727#discussion_r33970694"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/727"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/33973698",
        "pull_request_review_id": null,
        "id": 33973698,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzOTczNjk4",
        "diff_hunk": "@@ -0,0 +1,58 @@\n+{Motion} = require './general-motions'\n+path = require 'path'\n+{Directory} = require 'atom'\n+shell = require 'shell'\n+{exec} = require 'child_process'\n+utils = require '../utils'\n+\n+class OpenFileUnderCursor extends Motion\n+  execute: (count) ->\n+    ###\n+      /usr/bin/test\n+      ../../.travis.yml\n+      ./search-motion\n+      ./index\n+      http://github.com\n+      https://thing.com/item%20test\n+      //github.com\n+    ###\n+    wordRegex = /[a-z0-9\\.\\-_\\/\\\\%:]+/i\n+    @editor.getCursors().forEach (cursor) =>\n+      currentWord = utils.getCurrentWord @editor, cursor, wordRegex\n+      # range = cursor.getCurrentWordBufferRange wordRegex: wordRegex\n+      # selectedPath = @editor.getTextInRange range\n+      range = currentWord.range\n+      selectedPath = currentWord.word\n+\n+      # exit early for url match\n+      if /^https?:/i.test(selectedPath)\n+        return @openUrl selectedPath\n+      if /^\\/\\//i.test(selectedPath)\n+        return @openUrl \"http:#{selectedPath}\"\n+\n+      if selectedPath[0] isnt '/' and selectedPath[0] isnt '\\\\'\n+        selectedPath = path.join path.dirname(@editor.buffer.file.path), selectedPath\n+",
        "path": "lib/motions/open-file-under-cursor.coffee",
        "position": 35,
        "original_position": 35,
        "commit_id": "b43aff39ed1e4427003f281063ccdf65930d088b",
        "original_commit_id": "b43aff39ed1e4427003f281063ccdf65930d088b",
        "user": {
            "login": "irrationalistic",
            "id": 851856,
            "node_id": "MDQ6VXNlcjg1MTg1Ng==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/851856?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/irrationalistic",
            "html_url": "https://github.com/irrationalistic",
            "followers_url": "https://api.github.com/users/irrationalistic/followers",
            "following_url": "https://api.github.com/users/irrationalistic/following{/other_user}",
            "gists_url": "https://api.github.com/users/irrationalistic/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/irrationalistic/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/irrationalistic/subscriptions",
            "organizations_url": "https://api.github.com/users/irrationalistic/orgs",
            "repos_url": "https://api.github.com/users/irrationalistic/repos",
            "events_url": "https://api.github.com/users/irrationalistic/events{/privacy}",
            "received_events_url": "https://api.github.com/users/irrationalistic/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You are totally right about improving readability! I can take a look at what the refactor would be like.\n",
        "created_at": "2015-07-06T19:40:56Z",
        "updated_at": "2015-07-06T19:40:56Z",
        "html_url": "https://github.com/atom/vim-mode/pull/727#discussion_r33973698",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/727",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/33973698"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/727#discussion_r33973698"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/727"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/33979816",
        "pull_request_review_id": null,
        "id": 33979816,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzOTc5ODE2",
        "diff_hunk": "@@ -0,0 +1,58 @@\n+{Motion} = require './general-motions'\n+path = require 'path'\n+{Directory} = require 'atom'\n+shell = require 'shell'\n+{exec} = require 'child_process'\n+utils = require '../utils'\n+\n+class OpenFileUnderCursor extends Motion\n+  execute: (count) ->\n+    ###\n+      /usr/bin/test\n+      ../../.travis.yml\n+      ./search-motion\n+      ./index\n+      http://github.com\n+      https://thing.com/item%20test\n+      //github.com\n+    ###\n+    wordRegex = /[a-z0-9\\.\\-_\\/\\\\%:]+/i\n+    @editor.getCursors().forEach (cursor) =>\n+      currentWord = utils.getCurrentWord @editor, cursor, wordRegex\n+      # range = cursor.getCurrentWordBufferRange wordRegex: wordRegex\n+      # selectedPath = @editor.getTextInRange range\n+      range = currentWord.range\n+      selectedPath = currentWord.word\n+\n+      # exit early for url match\n+      if /^https?:/i.test(selectedPath)\n+        return @openUrl selectedPath\n+      if /^\\/\\//i.test(selectedPath)\n+        return @openUrl \"http:#{selectedPath}\"\n+\n+      if selectedPath[0] isnt '/' and selectedPath[0] isnt '\\\\'\n+        selectedPath = path.join path.dirname(@editor.buffer.file.path), selectedPath\n+",
        "path": "lib/motions/open-file-under-cursor.coffee",
        "position": 35,
        "original_position": 35,
        "commit_id": "b43aff39ed1e4427003f281063ccdf65930d088b",
        "original_commit_id": "b43aff39ed1e4427003f281063ccdf65930d088b",
        "user": {
            "login": "irrationalistic",
            "id": 851856,
            "node_id": "MDQ6VXNlcjg1MTg1Ng==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/851856?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/irrationalistic",
            "html_url": "https://github.com/irrationalistic",
            "followers_url": "https://api.github.com/users/irrationalistic/followers",
            "following_url": "https://api.github.com/users/irrationalistic/following{/other_user}",
            "gists_url": "https://api.github.com/users/irrationalistic/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/irrationalistic/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/irrationalistic/subscriptions",
            "organizations_url": "https://api.github.com/users/irrationalistic/orgs",
            "repos_url": "https://api.github.com/users/irrationalistic/repos",
            "events_url": "https://api.github.com/users/irrationalistic/events{/privacy}",
            "received_events_url": "https://api.github.com/users/irrationalistic/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "So I realized that there are references to `openUrl` on 29 and 30, which are about, technically, opening files as well. A refactor probably wouldn't make a lot of sense at this point.\n",
        "created_at": "2015-07-06T20:42:52Z",
        "updated_at": "2015-07-06T20:42:52Z",
        "html_url": "https://github.com/atom/vim-mode/pull/727#discussion_r33979816",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/727",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/33979816"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/727#discussion_r33979816"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/727"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/34063940",
        "pull_request_review_id": null,
        "id": 34063940,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MDYzOTQw",
        "diff_hunk": "@@ -201,7 +201,18 @@ class MoveToNextWord extends Motion\n   wordRegex: null\n   operatesInclusively: false\n \n+  wordRegExp: (cursor, {includeNonWordCharacters}={}) ->",
        "path": "lib/motions/general-motions.coffee",
        "position": 4,
        "original_position": 4,
        "commit_id": "34654ee4760391eb9b9531c4a3dab357d16bb15c",
        "original_commit_id": "34654ee4760391eb9b9531c4a3dab357d16bb15c",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Is this method ever called with a second argument? I only see the one call on line 215.\n",
        "created_at": "2015-07-07T17:07:31Z",
        "updated_at": "2015-07-07T17:07:31Z",
        "html_url": "https://github.com/atom/vim-mode/pull/581#discussion_r34063940",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/581",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/34063940"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/581#discussion_r34063940"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/581"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/34069912",
        "pull_request_review_id": null,
        "id": 34069912,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MDY5OTEy",
        "diff_hunk": "@@ -201,7 +201,18 @@ class MoveToNextWord extends Motion\n   wordRegex: null\n   operatesInclusively: false\n \n+  wordRegExp: (cursor, {includeNonWordCharacters}={}) ->",
        "path": "lib/motions/general-motions.coffee",
        "position": 4,
        "original_position": 4,
        "commit_id": "34654ee4760391eb9b9531c4a3dab357d16bb15c",
        "original_commit_id": "34654ee4760391eb9b9531c4a3dab357d16bb15c",
        "user": {
            "login": "dsandstrom",
            "id": 1400414,
            "node_id": "MDQ6VXNlcjE0MDA0MTQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1400414?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dsandstrom",
            "html_url": "https://github.com/dsandstrom",
            "followers_url": "https://api.github.com/users/dsandstrom/followers",
            "following_url": "https://api.github.com/users/dsandstrom/following{/other_user}",
            "gists_url": "https://api.github.com/users/dsandstrom/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dsandstrom/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dsandstrom/subscriptions",
            "organizations_url": "https://api.github.com/users/dsandstrom/orgs",
            "repos_url": "https://api.github.com/users/dsandstrom/repos",
            "events_url": "https://api.github.com/users/dsandstrom/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dsandstrom/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "No, I just copied cursor's regex function: https://github.com/atom/atom/blob/37cb6b6d9e2be35af51b4e7e812b833efc24ce11/src/cursor.coffee#L642.  My original intent was to merge the changes back to Atom.\n",
        "created_at": "2015-07-07T18:00:26Z",
        "updated_at": "2015-07-07T18:00:26Z",
        "html_url": "https://github.com/atom/vim-mode/pull/581#discussion_r34069912",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/581",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/34069912"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/581#discussion_r34069912"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/581"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/35093081",
        "pull_request_review_id": null,
        "id": 35093081,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MDkzMDgx",
        "diff_hunk": "@@ -22,9 +22,9 @@ describe \"Motions\", ->\n     editor.normalModeInputView.editorElement.getModel().setText(key)\n \n   submitNormalModeInputText = (text) ->\n-    commandEditor = editor.normalModeInputView.editorElement\n-    commandEditor.getModel().setText(text)\n-    atom.commands.dispatch(commandEditor, \"core:confirm\")\n+    normalEditor = editor.normalModeInputView.editorElement\n+    normalEditor.getModel().setText(text)\n+    atom.commands.dispatch(normalEditor, \"core:confirm\")",
        "path": "spec/motions-spec.coffee",
        "position": null,
        "original_position": 9,
        "commit_id": "aed24346aa03edad30805cfae208f6e3891d5584",
        "original_commit_id": "a274ea6645f131a1c344b2b5bc396a6bc6278a06",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "`normalEditor` sounds so generic; maybe `normalModeInputEditor`? Or `inputEditor`?\n",
        "created_at": "2015-07-21T11:41:53Z",
        "updated_at": "2015-07-21T15:16:27Z",
        "html_url": "https://github.com/atom/vim-mode/pull/787#discussion_r35093081",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/787",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/35093081"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/787#discussion_r35093081"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/787"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/35093109",
        "pull_request_review_id": null,
        "id": 35093109,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MDkzMTA5",
        "diff_hunk": "@@ -22,9 +22,9 @@ describe \"Motions\", ->\n     editor.normalModeInputView.editorElement.getModel().setText(key)\n \n   submitNormalModeInputText = (text) ->\n-    commandEditor = editor.normalModeInputView.editorElement\n-    commandEditor.getModel().setText(text)\n-    atom.commands.dispatch(commandEditor, \"core:confirm\")\n+    normalEditor = editor.normalModeInputView.editorElement\n+    normalEditor.getModel().setText(text)\n+    atom.commands.dispatch(normalEditor, \"core:confirm\")",
        "path": "spec/motions-spec.coffee",
        "position": null,
        "original_position": 9,
        "commit_id": "aed24346aa03edad30805cfae208f6e3891d5584",
        "original_commit_id": "a274ea6645f131a1c344b2b5bc396a6bc6278a06",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Same below in \"using search history\".\n",
        "created_at": "2015-07-21T11:42:26Z",
        "updated_at": "2015-07-21T15:16:27Z",
        "html_url": "https://github.com/atom/vim-mode/pull/787#discussion_r35093109",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/787",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/35093109"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/787#discussion_r35093109"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/787"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/35344323",
        "pull_request_review_id": null,
        "id": 35344323,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MzQ0MzIz",
        "diff_hunk": "@@ -0,0 +1,73 @@\n+helpers = require './spec-helper'\n+\n+describe \"Insert mode commands\", ->\n+  [editor, editorElement, vimState] = []\n+\n+  beforeEach ->\n+    vimMode = atom.packages.loadPackage('vim-mode')\n+    vimMode.activateResources()\n+\n+    helpers.getEditorElement (element) ->\n+      editorElement = element\n+      editor = editorElement.getModel()\n+      vimState = editorElement.vimState\n+      vimState.activateNormalMode()\n+      vimState.resetNormalMode()\n+\n+  keydown = (key, options={}) ->\n+    options.element ?= editorElement\n+    helpers.keydown(key, options)\n+\n+  describe \"Copy from line above/below\", ->\n+    beforeEach ->\n+      editor.setText(\"12345\\n\\nabcd\\nefghi\")\n+      editor.setCursorBufferPosition([1, 0])\n+      editor.addCursorAtBufferPosition([3, 0])\n+      keydown 'i'\n+\n+    describe \"the ctrl-y command\", ->\n+      it \"copies from the line above\", ->\n+        keydown 'y', ctrl: true\n+        expect(editor.getText()).toBe '12345\\n1\\nabcd\\naefghi'\n+\n+        editor.insertText ' '\n+        keydown 'y', ctrl: true\n+        expect(editor.getText()).toBe '12345\\n1 3\\nabcd\\na cefghi'\n+\n+      it \"does nothing if there's nothing above the cursor\", ->\n+        editor.insertText 'fill'\n+        keydown 'y', ctrl: true\n+        expect(editor.getText()).toBe '12345\\nfill5\\nabcd\\nfillefghi'\n+\n+        keydown 'y', ctrl: true\n+        expect(editor.getText()).toBe '12345\\nfill5\\nabcd\\nfillefghi'\n+\n+      it \"does nothing on the first line\", ->\n+        editor.setCursorBufferPosition([0, 2])\n+        editor.addCursorAtBufferPosition([3, 2])\n+        editor.insertText 'a'\n+        expect(editor.getText()).toBe '12a345\\n\\nabcd\\nefaghi'\n+        keydown 'y', ctrl: true\n+        expect(editor.getText()).toBe '12a345\\n\\nabcd\\nefadghi'\n+\n+    describe \"the ctrl-e command\", ->\n+      beforeEach ->\n+        atom.keymaps.add \"test\",\n+          'atom-text-editor.vim-mode.insert-mode':\n+            'ctrl-e': 'vim-mode:copy-from-line-below'",
        "path": "spec/insert-mode-spec.coffee",
        "position": 57,
        "original_position": 57,
        "commit_id": "3e556fb648263a9b7dab62dcc2e951d85a1df791",
        "original_commit_id": "3e556fb648263a9b7dab62dcc2e951d85a1df791",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": ":smile:\n",
        "created_at": "2015-07-23T16:57:07Z",
        "updated_at": "2015-07-23T16:57:07Z",
        "html_url": "https://github.com/atom/vim-mode/pull/721#discussion_r35344323",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/721",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/35344323"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/721#discussion_r35344323"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/721"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/35362114",
        "pull_request_review_id": null,
        "id": 35362114,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MzYyMTE0",
        "diff_hunk": "@@ -0,0 +1,73 @@\n+helpers = require './spec-helper'\n+\n+describe \"Insert mode commands\", ->\n+  [editor, editorElement, vimState] = []\n+\n+  beforeEach ->\n+    vimMode = atom.packages.loadPackage('vim-mode')\n+    vimMode.activateResources()\n+\n+    helpers.getEditorElement (element) ->\n+      editorElement = element\n+      editor = editorElement.getModel()\n+      vimState = editorElement.vimState\n+      vimState.activateNormalMode()\n+      vimState.resetNormalMode()\n+\n+  keydown = (key, options={}) ->\n+    options.element ?= editorElement\n+    helpers.keydown(key, options)\n+\n+  describe \"Copy from line above/below\", ->\n+    beforeEach ->\n+      editor.setText(\"12345\\n\\nabcd\\nefghi\")\n+      editor.setCursorBufferPosition([1, 0])\n+      editor.addCursorAtBufferPosition([3, 0])\n+      keydown 'i'\n+\n+    describe \"the ctrl-y command\", ->\n+      it \"copies from the line above\", ->\n+        keydown 'y', ctrl: true\n+        expect(editor.getText()).toBe '12345\\n1\\nabcd\\naefghi'\n+\n+        editor.insertText ' '\n+        keydown 'y', ctrl: true\n+        expect(editor.getText()).toBe '12345\\n1 3\\nabcd\\na cefghi'\n+\n+      it \"does nothing if there's nothing above the cursor\", ->\n+        editor.insertText 'fill'\n+        keydown 'y', ctrl: true\n+        expect(editor.getText()).toBe '12345\\nfill5\\nabcd\\nfillefghi'\n+\n+        keydown 'y', ctrl: true\n+        expect(editor.getText()).toBe '12345\\nfill5\\nabcd\\nfillefghi'\n+\n+      it \"does nothing on the first line\", ->\n+        editor.setCursorBufferPosition([0, 2])\n+        editor.addCursorAtBufferPosition([3, 2])\n+        editor.insertText 'a'\n+        expect(editor.getText()).toBe '12a345\\n\\nabcd\\nefaghi'\n+        keydown 'y', ctrl: true\n+        expect(editor.getText()).toBe '12a345\\n\\nabcd\\nefadghi'\n+\n+    describe \"the ctrl-e command\", ->\n+      beforeEach ->\n+        atom.keymaps.add \"test\",\n+          'atom-text-editor.vim-mode.insert-mode':\n+            'ctrl-e': 'vim-mode:copy-from-line-below'",
        "path": "spec/insert-mode-spec.coffee",
        "position": 57,
        "original_position": 57,
        "commit_id": "3e556fb648263a9b7dab62dcc2e951d85a1df791",
        "original_commit_id": "3e556fb648263a9b7dab62dcc2e951d85a1df791",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "well we're not throwing away perfectly good specs, are we? 8-)\n",
        "created_at": "2015-07-23T19:36:27Z",
        "updated_at": "2015-07-23T19:36:27Z",
        "html_url": "https://github.com/atom/vim-mode/pull/721#discussion_r35362114",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/721",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/35362114"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/721#discussion_r35362114"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/721"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/35278826",
        "pull_request_review_id": null,
        "id": 35278826,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1Mjc4ODI2",
        "diff_hunk": "@@ -1735,6 +1735,25 @@ describe \"Motions\", ->\n       keydown(',')\n       expect(editor.getCursorScreenPosition()).toEqual [0, 2]\n \n+    it \"gets state from GlobalVimState\", ->\n+      keydown('f')\n+      normalModeInputKeydown('c')\n+      expect(editor.getCursorScreenPosition()).toEqual [0, 2]\n+\n+      # store the current find for 'c'\n+      findFC = vimState.globalVimState.currentFind",
        "path": "spec/motions-spec.coffee",
        "position": null,
        "original_position": 10,
        "commit_id": "b930e05322565c7a7060613684dcfca371ad9178",
        "original_commit_id": "769222af64ddd4f8976e21322a4375d61de909ab",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Instead of accessing `vimState.globalVimState.currentFind` in this test, could we create a second text editor instance and run a find command in it?\n\nI think that something like this should work:\n\n``` coffee\nhelpers.getEditorElement (otherEditorElement) ->\n  otherEditorElement.getModel().setText(\"abc\")\n  keydown('f', element: otherEditorElement)\n  keydown('c', element: otherEditorElement)\n\n  keydown(';')\n  expect(editor.getCursorScreenPosition()).toEqual [0, 8]\n```\n",
        "created_at": "2015-07-22T23:59:58Z",
        "updated_at": "2015-07-23T20:17:40Z",
        "html_url": "https://github.com/atom/vim-mode/pull/718#discussion_r35278826",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/718",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/35278826"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/718#discussion_r35278826"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/718"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/35278851",
        "pull_request_review_id": null,
        "id": 35278851,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1Mjc4ODUx",
        "diff_hunk": "@@ -1735,6 +1735,25 @@ describe \"Motions\", ->\n       keydown(',')\n       expect(editor.getCursorScreenPosition()).toEqual [0, 2]\n \n+    it \"gets state from GlobalVimState\", ->\n+      keydown('f')\n+      normalModeInputKeydown('c')\n+      expect(editor.getCursorScreenPosition()).toEqual [0, 2]\n+\n+      # store the current find for 'c'\n+      findFC = vimState.globalVimState.currentFind",
        "path": "spec/motions-spec.coffee",
        "position": null,
        "original_position": 10,
        "commit_id": "b930e05322565c7a7060613684dcfca371ad9178",
        "original_commit_id": "769222af64ddd4f8976e21322a4375d61de909ab",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Our test helpers are a bit awkward right now for creating other editors. I'd like to simplify them.\n",
        "created_at": "2015-07-23T00:00:29Z",
        "updated_at": "2015-07-23T20:17:40Z",
        "html_url": "https://github.com/atom/vim-mode/pull/718#discussion_r35278851",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/718",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/35278851"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/718#discussion_r35278851"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/718"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/35340863",
        "pull_request_review_id": null,
        "id": 35340863,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MzQwODYz",
        "diff_hunk": "@@ -17,13 +18,18 @@ getEditorElement = (callback) ->\n     element = document.createElement(\"atom-text-editor\")\n     element.setModel(textEditor)\n     element.classList.add('vim-mode')\n-    element.vimState = new VimState(element, new StatusBarManager, new GlobalVimState)\n+    statusBarManager = existingVimState?.statusBarManager or new StatusBarManager\n+    globalVimState = existingVimState?.globalVimState or new GlobalVimState\n+    element.vimState = new VimState(element, statusBarManager, globalVimState)\n \n     element.addEventListener \"keydown\", (e) ->\n       atom.keymaps.handleKeyboardEvent(e)\n \n     callback(element)\n \n+# this function puts the existingElement parameter first\n+getOtherEditorElement = (existingElement, callback) -> getEditorElement(callback, existingElement)\n+",
        "path": "spec/spec-helper.coffee",
        "position": null,
        "original_position": 26,
        "commit_id": "b930e05322565c7a7060613684dcfca371ad9178",
        "original_commit_id": "7bd5dee4dc9c8bce0e36b29c9f02e4b81d01ff8e",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "I think the best way of sharing the `GlobalVimState` between the two editors would be to store it as a local variable in this file (`globalVimState = null` at the top of the file) and initialize it in this file's `beforeEach` block. That way, we'd get a fresh `GlobalVimState` for each spec, and we could create other editors without needing a reference to the first editor.\n",
        "created_at": "2015-07-23T16:23:51Z",
        "updated_at": "2015-07-23T20:17:40Z",
        "html_url": "https://github.com/atom/vim-mode/pull/718#discussion_r35340863",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/718",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/35340863"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/718#discussion_r35340863"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/718"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/35362007",
        "pull_request_review_id": null,
        "id": 35362007,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MzYyMDA3",
        "diff_hunk": "@@ -17,13 +18,18 @@ getEditorElement = (callback) ->\n     element = document.createElement(\"atom-text-editor\")\n     element.setModel(textEditor)\n     element.classList.add('vim-mode')\n-    element.vimState = new VimState(element, new StatusBarManager, new GlobalVimState)\n+    statusBarManager = existingVimState?.statusBarManager or new StatusBarManager\n+    globalVimState = existingVimState?.globalVimState or new GlobalVimState\n+    element.vimState = new VimState(element, statusBarManager, globalVimState)\n \n     element.addEventListener \"keydown\", (e) ->\n       atom.keymaps.handleKeyboardEvent(e)\n \n     callback(element)\n \n+# this function puts the existingElement parameter first\n+getOtherEditorElement = (existingElement, callback) -> getEditorElement(callback, existingElement)\n+",
        "path": "spec/spec-helper.coffee",
        "position": null,
        "original_position": 26,
        "commit_id": "b930e05322565c7a7060613684dcfca371ad9178",
        "original_commit_id": "7bd5dee4dc9c8bce0e36b29c9f02e4b81d01ff8e",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "very good point, how about now? 8-)\n",
        "created_at": "2015-07-23T19:35:15Z",
        "updated_at": "2015-07-23T20:17:40Z",
        "html_url": "https://github.com/atom/vim-mode/pull/718#discussion_r35362007",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/718",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/35362007"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/718#discussion_r35362007"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/718"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/35362677",
        "pull_request_review_id": null,
        "id": 35362677,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MzYyNjc3",
        "diff_hunk": "@@ -3,10 +3,15 @@ GlobalVimState = require '../lib/global-vim-state'\n VimMode  = require '../lib/vim-mode'\n StatusBarManager = require '../lib/status-bar-manager'\n \n+[globalVimState, statusBarManager] = []\n+\n beforeEach ->\n   atom.workspace ||= {}\n+  statusBarManager = null\n+  globalVimState = null\n \n-getEditorElement = (callback) ->\n+getEditorElement = (callback, existingElement = {}) ->\n+  existingVimState = existingElement?.vimState",
        "path": "spec/spec-helper.coffee",
        "position": null,
        "original_position": 13,
        "commit_id": "b930e05322565c7a7060613684dcfca371ad9178",
        "original_commit_id": "43f0b73de4e18f46fb3d44535b349410180675ae",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": ":fire: existingVimState and existingElement?\n",
        "created_at": "2015-07-23T19:42:25Z",
        "updated_at": "2015-07-23T20:17:40Z",
        "html_url": "https://github.com/atom/vim-mode/pull/718#discussion_r35362677",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/718",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/35362677"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/718#discussion_r35362677"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/718"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/35362809",
        "pull_request_review_id": null,
        "id": 35362809,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MzYyODA5",
        "diff_hunk": "@@ -1744,6 +1745,38 @@ describe \"Motions\", ->\n       keydown(',')\n       expect(editor.getCursorScreenPosition()).toEqual [0, 2]\n \n+    it \"gets state from GlobalVimState\", ->",
        "path": "spec/motions-spec.coffee",
        "position": null,
        "original_position": 14,
        "commit_id": "b930e05322565c7a7060613684dcfca371ad9178",
        "original_commit_id": "43f0b73de4e18f46fb3d44535b349410180675ae",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "I think you can avoid making reference to the implementation here: something like `it \"shares the most recent find command with other editors\", ->`\n",
        "created_at": "2015-07-23T19:43:35Z",
        "updated_at": "2015-07-23T20:17:40Z",
        "html_url": "https://github.com/atom/vim-mode/pull/718#discussion_r35362809",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/718",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/35362809"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/718#discussion_r35362809"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/718"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/35364434",
        "pull_request_review_id": null,
        "id": 35364434,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MzY0NDM0",
        "diff_hunk": "@@ -1744,6 +1745,38 @@ describe \"Motions\", ->\n       keydown(',')\n       expect(editor.getCursorScreenPosition()).toEqual [0, 2]\n \n+    it \"gets state from GlobalVimState\", ->",
        "path": "spec/motions-spec.coffee",
        "position": null,
        "original_position": 14,
        "commit_id": "b930e05322565c7a7060613684dcfca371ad9178",
        "original_commit_id": "43f0b73de4e18f46fb3d44535b349410180675ae",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "yup, done too. All good catches, thank you. I also changed a find to a till to test both.\n",
        "created_at": "2015-07-23T19:59:26Z",
        "updated_at": "2015-07-23T20:17:40Z",
        "html_url": "https://github.com/atom/vim-mode/pull/718#discussion_r35364434",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/718",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/35364434"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/718#discussion_r35364434"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/718"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/35365939",
        "pull_request_review_id": null,
        "id": 35365939,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MzY1OTM5",
        "diff_hunk": "@@ -3,10 +3,15 @@ GlobalVimState = require '../lib/global-vim-state'\n VimMode  = require '../lib/vim-mode'\n StatusBarManager = require '../lib/status-bar-manager'\n \n+[globalVimState, statusBarManager] = []\n+\n beforeEach ->\n   atom.workspace ||= {}\n+  statusBarManager = null\n+  globalVimState = null\n \n-getEditorElement = (callback) ->\n+getEditorElement = (callback, existingElement = {}) ->\n+  existingVimState = existingElement?.vimState",
        "path": "spec/spec-helper.coffee",
        "position": null,
        "original_position": 13,
        "commit_id": "b930e05322565c7a7060613684dcfca371ad9178",
        "original_commit_id": "43f0b73de4e18f46fb3d44535b349410180675ae",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "oh boy, almost missed this one, fixed too\n",
        "created_at": "2015-07-23T20:14:32Z",
        "updated_at": "2015-07-23T20:17:40Z",
        "html_url": "https://github.com/atom/vim-mode/pull/718#discussion_r35365939",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/718",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/35365939"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/718#discussion_r35365939"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/718"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/35366308",
        "pull_request_review_id": null,
        "id": 35366308,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MzY2MzA4",
        "diff_hunk": "@@ -3,10 +3,15 @@ GlobalVimState = require '../lib/global-vim-state'\n VimMode  = require '../lib/vim-mode'\n StatusBarManager = require '../lib/status-bar-manager'\n \n+[globalVimState, statusBarManager] = []\n+\n beforeEach ->\n   atom.workspace ||= {}\n+  statusBarManager = null\n+  globalVimState = null\n \n-getEditorElement = (callback) ->\n+getEditorElement = (callback, existingElement = {}) ->\n+  existingVimState = existingElement?.vimState",
        "path": "spec/spec-helper.coffee",
        "position": null,
        "original_position": 13,
        "commit_id": "b930e05322565c7a7060613684dcfca371ad9178",
        "original_commit_id": "43f0b73de4e18f46fb3d44535b349410180675ae",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "fixed, take two, sorry\n",
        "created_at": "2015-07-23T20:18:08Z",
        "updated_at": "2015-07-23T20:18:08Z",
        "html_url": "https://github.com/atom/vim-mode/pull/718#discussion_r35366308",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/718",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/35366308"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/718#discussion_r35366308"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/718"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/35368243",
        "pull_request_review_id": null,
        "id": 35368243,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MzY4MjQz",
        "diff_hunk": "@@ -654,6 +662,16 @@ class VimState\n     text = @getRegister(name)?.text\n     @editor.insertText(text) if text?\n \n+  ensureCursorIsWithinLine: (cursor) =>\n+    return if @processing or @mode is 'visual' or @mode is 'insert'",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 68,
        "commit_id": "13a1233ff2ed021d7a73002c7fe274e2aebe8483",
        "original_commit_id": "faf009d6c950176826c35ae447d9fc7fecec0d2d",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Can you explain a bit about why this `@processing` variable is needed? Without looking into this too deeply, I would think that we could just `return unless @mode is 'normal'`.\n",
        "created_at": "2015-07-23T20:36:50Z",
        "updated_at": "2015-07-23T21:46:39Z",
        "html_url": "https://github.com/atom/vim-mode/pull/770#discussion_r35368243",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/770",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/35368243"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/770#discussion_r35368243"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/770"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/35368525",
        "pull_request_review_id": null,
        "id": 35368525,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MzY4NTI1",
        "diff_hunk": "@@ -654,6 +662,16 @@ class VimState\n     text = @getRegister(name)?.text\n     @editor.insertText(text) if text?\n \n+  ensureCursorIsWithinLine: (cursor) =>\n+    return if @processing or @mode is 'visual' or @mode is 'insert'\n+\n+    if cursor.cursor? then cursor = cursor.cursor # when called by @editor.onDidChangeCursorPosition",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 70,
        "commit_id": "13a1233ff2ed021d7a73002c7fe274e2aebe8483",
        "original_commit_id": "faf009d6c950176826c35ae447d9fc7fecec0d2d",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "I think this would be a little more straightforward if you removed this line, and when observing the cursor position did this:\n\n``` coffee\n@editor.onDidChangeCursorPosition ({cursor}) => @ensureCursorIsWithinLine(cursor)\n```\n",
        "created_at": "2015-07-23T20:39:43Z",
        "updated_at": "2015-07-23T21:46:39Z",
        "html_url": "https://github.com/atom/vim-mode/pull/770#discussion_r35368525",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/770",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/35368525"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/770#discussion_r35368525"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/770"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/35368894",
        "pull_request_review_id": null,
        "id": 35368894,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MzY4ODk0",
        "diff_hunk": "@@ -654,6 +662,16 @@ class VimState\n     text = @getRegister(name)?.text\n     @editor.insertText(text) if text?\n \n+  ensureCursorIsWithinLine: (cursor) =>\n+    return if @processing or @mode is 'visual' or @mode is 'insert'\n+\n+    if cursor.cursor? then cursor = cursor.cursor # when called by @editor.onDidChangeCursorPosition",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 70,
        "commit_id": "13a1233ff2ed021d7a73002c7fe274e2aebe8483",
        "original_commit_id": "faf009d6c950176826c35ae447d9fc7fecec0d2d",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "this is nice!\n",
        "created_at": "2015-07-23T20:43:07Z",
        "updated_at": "2015-07-23T21:46:39Z",
        "html_url": "https://github.com/atom/vim-mode/pull/770#discussion_r35368894",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/770",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/35368894"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/770#discussion_r35368894"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/770"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/35375290",
        "pull_request_review_id": null,
        "id": 35375290,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1Mzc1Mjkw",
        "diff_hunk": "@@ -654,6 +662,16 @@ class VimState\n     text = @getRegister(name)?.text\n     @editor.insertText(text) if text?\n \n+  ensureCursorIsWithinLine: (cursor) =>\n+    return if @processing or @mode is 'visual' or @mode is 'insert'",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 68,
        "commit_id": "13a1233ff2ed021d7a73002c7fe274e2aebe8483",
        "original_commit_id": "faf009d6c950176826c35ae447d9fc7fecec0d2d",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Some motions, esp. with counts, invoke several Atom motions, each notifies us about cursor movement, and they all can happen in normal mode. We don't want to interfere until that's done. \n\nBut since it needs explanation, it could be written clearer or better; suggestions welcome.\n",
        "created_at": "2015-07-23T21:44:44Z",
        "updated_at": "2015-07-23T21:46:39Z",
        "html_url": "https://github.com/atom/vim-mode/pull/770#discussion_r35375290",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/770",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/35375290"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/770#discussion_r35375290"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/770"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/35375591",
        "pull_request_review_id": null,
        "id": 35375591,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1Mzc1NTkx",
        "diff_hunk": "@@ -654,6 +662,16 @@ class VimState\n     text = @getRegister(name)?.text\n     @editor.insertText(text) if text?\n \n+  ensureCursorIsWithinLine: (cursor) =>\n+    return if @processing or @mode is 'visual' or @mode is 'insert'",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 68,
        "commit_id": "13a1233ff2ed021d7a73002c7fe274e2aebe8483",
        "original_commit_id": "faf009d6c950176826c35ae447d9fc7fecec0d2d",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "But 'not \"normal\"' should be OK instead of two comparisons\n",
        "created_at": "2015-07-23T21:47:58Z",
        "updated_at": "2015-07-23T21:47:58Z",
        "html_url": "https://github.com/atom/vim-mode/pull/770#discussion_r35375591",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/770",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/35375591"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/770#discussion_r35375591"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/770"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/35375661",
        "pull_request_review_id": null,
        "id": 35375661,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1Mzc1NjYx",
        "diff_hunk": "@@ -654,6 +662,16 @@ class VimState\n     text = @getRegister(name)?.text\n     @editor.insertText(text) if text?\n \n+  ensureCursorIsWithinLine: (cursor) =>\n+    return if @processing or @mode is 'visual' or @mode is 'insert'",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 68,
        "commit_id": "13a1233ff2ed021d7a73002c7fe274e2aebe8483",
        "original_commit_id": "faf009d6c950176826c35ae447d9fc7fecec0d2d",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "that's in the new commit, which also adds _more_ `@processing` 8-)\n",
        "created_at": "2015-07-23T21:48:38Z",
        "updated_at": "2015-07-23T21:48:38Z",
        "html_url": "https://github.com/atom/vim-mode/pull/770#discussion_r35375661",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/770",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/35375661"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/770#discussion_r35375661"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/770"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/34947846",
        "pull_request_review_id": null,
        "id": 34947846,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTQ3ODQ2",
        "diff_hunk": "@@ -20,6 +20,15 @@\n   opacity: 0.5;\n }\n \n+.low-block-cursor(@visibility: visible) {\n+  border: none;\n+  border-bottom: 10px solid @syntax-cursor-color;",
        "path": "styles/vim-mode.less",
        "position": null,
        "original_position": 6,
        "commit_id": "9502abb8bc7c722d59d67a1dad985af20aa7fa4b",
        "original_commit_id": "1d85e3f9aa7632c63a574cc049388eefe0bb9d06",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "may I suggest .6em rather than 10px here? When I pasted my custom styles, I didn't remember to change to relative units.\n",
        "created_at": "2015-07-18T13:46:31Z",
        "updated_at": "2015-07-23T21:51:30Z",
        "html_url": "https://github.com/atom/vim-mode/pull/779#discussion_r34947846",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/779",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/34947846"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/779#discussion_r34947846"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/779"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/35452140",
        "pull_request_review_id": null,
        "id": 35452140,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NDUyMTQw",
        "diff_hunk": "@@ -654,6 +662,16 @@ class VimState\n     text = @getRegister(name)?.text\n     @editor.insertText(text) if text?\n \n+  ensureCursorIsWithinLine: (cursor) =>\n+    return if @processing or @mode is 'visual' or @mode is 'insert'",
        "path": "lib/vim-state.coffee",
        "position": null,
        "original_position": 68,
        "commit_id": "13a1233ff2ed021d7a73002c7fe274e2aebe8483",
        "original_commit_id": "faf009d6c950176826c35ae447d9fc7fecec0d2d",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "> We don't want to interfere until that's done.\n\nI see. I think this is a fine solution actually.\n",
        "created_at": "2015-07-24T18:30:34Z",
        "updated_at": "2015-07-24T18:30:34Z",
        "html_url": "https://github.com/atom/vim-mode/pull/770#discussion_r35452140",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/770",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/35452140"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/770#discussion_r35452140"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/770"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36037563",
        "pull_request_review_id": null,
        "id": 36037563,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MDM3NTYz",
        "diff_hunk": "@@ -26,7 +26,11 @@\n * Indent/Outdent/Auto-indent\n   * `vw>` - works in visual mode\n   * `>>` - indent current line one level\n+  * `>2>` - repeated linewise\n+  * `2>>` - repeat indent operation\n   * `<<` - outdent current line one level\n+  * `<2<` - repeated linewise\n+  * `2<<` - repeat outdent operation",
        "path": "docs/operators.md",
        "position": null,
        "original_position": 8,
        "commit_id": "36075c3edec0349451c7b62ae3cee912b30167be",
        "original_commit_id": "062be87ae920a8ab6395a224747bf65046dd4109",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I tried it and in normal mode `>2>` behaves the same as `2>>` - indenting two lines once; that's consistent with VIM. The docs above seem to imply this PR was introducing a difference there - is it?\n",
        "created_at": "2015-08-01T22:11:39Z",
        "updated_at": "2015-08-02T00:24:17Z",
        "html_url": "https://github.com/atom/vim-mode/pull/798#discussion_r36037563",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/798",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36037563"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/798#discussion_r36037563"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/798"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36037566",
        "pull_request_review_id": null,
        "id": 36037566,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MDM3NTY2",
        "diff_hunk": "@@ -6,7 +7,10 @@ class AdjustIndentation extends Operator\n     @motion.select(count)\n     {start} = @editor.getSelectedBufferRange()\n \n-    @indent()\n+    if mode is 'visual'\n+      _.times(count, => @indent())",
        "path": "lib/operators/indent-operators.coffee",
        "position": null,
        "original_position": 11,
        "commit_id": "36075c3edec0349451c7b62ae3cee912b30167be",
        "original_commit_id": "062be87ae920a8ab6395a224747bf65046dd4109",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "needs `@editor.transact` before `_.times` - you may see that in `general-operators.coffee` - otherwise you need to press `u` twice to undo `v2>` .\n",
        "created_at": "2015-08-01T22:13:22Z",
        "updated_at": "2015-08-02T00:24:17Z",
        "html_url": "https://github.com/atom/vim-mode/pull/798#discussion_r36037566",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/798",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36037566"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/798#discussion_r36037566"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/798"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36186724",
        "pull_request_review_id": null,
        "id": 36186724,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MTg2NzI0",
        "diff_hunk": "@@ -88,9 +88,13 @@ class Delete extends Operator\n       @setTextRegister(@register, @editor.getSelectedText())\n       @editor.transact =>\n         for selection in @editor.getSelections()\n-          selection.deleteSelectedText()\n+          if @motion.isLinewise?() and selection.getText() is @editor.lineTextForBufferRow(@editor.getLastBufferRow())",
        "path": "lib/operators/general-operators.coffee",
        "position": 5,
        "original_position": 5,
        "commit_id": "0c4d1ace56aa658b59573ea7eaf84ad3cb6e903a",
        "original_commit_id": "0c4d1ace56aa658b59573ea7eaf84ad3cb6e903a",
        "user": {
            "login": "mwleeds",
            "id": 7833263,
            "node_id": "MDQ6VXNlcjc4MzMyNjM=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/7833263?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mwleeds",
            "html_url": "https://github.com/mwleeds",
            "followers_url": "https://api.github.com/users/mwleeds/followers",
            "following_url": "https://api.github.com/users/mwleeds/following{/other_user}",
            "gists_url": "https://api.github.com/users/mwleeds/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mwleeds/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mwleeds/subscriptions",
            "organizations_url": "https://api.github.com/users/mwleeds/orgs",
            "repos_url": "https://api.github.com/users/mwleeds/repos",
            "events_url": "https://api.github.com/users/mwleeds/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mwleeds/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This doesn't work for a multi-line selection that contains the last line, but I have an idea of how to fix it: `selection.getBufferRange().end.row is @editor.getLastBufferRow()`\n",
        "created_at": "2015-08-04T13:27:23Z",
        "updated_at": "2015-08-04T13:49:01Z",
        "html_url": "https://github.com/atom/vim-mode/pull/813#discussion_r36186724",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/813",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36186724"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/813#discussion_r36186724"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/813"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36290920",
        "pull_request_review_id": null,
        "id": 36290920,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkwOTIw",
        "diff_hunk": "@@ -107,6 +107,15 @@ class Motion\n   isInclusive: ->\n     @vimState.mode is 'visual' or @operatesInclusively\n \n+  isBeginningOfFile: (cursor) ->\n+    cur = cursor.getBufferPosition()\n+    not cur.row and not cur.column",
        "path": "lib/motions/general-motions.coffee",
        "position": 15,
        "original_position": 15,
        "commit_id": "0c4d1ace56aa658b59573ea7eaf84ad3cb6e903a",
        "original_commit_id": "0c4d1ace56aa658b59573ea7eaf84ad3cb6e903a",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "how about `cur.equals([0,0])`?\n",
        "created_at": "2015-08-05T11:15:15Z",
        "updated_at": "2015-08-05T11:15:15Z",
        "html_url": "https://github.com/atom/vim-mode/pull/813#discussion_r36290920",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/813",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36290920"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/813#discussion_r36290920"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/813"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36290972",
        "pull_request_review_id": null,
        "id": 36290972,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkwOTcy",
        "diff_hunk": "@@ -107,6 +107,15 @@ class Motion\n   isInclusive: ->\n     @vimState.mode is 'visual' or @operatesInclusively\n \n+  isBeginningOfFile: (cursor) ->\n+    cur = cursor.getBufferPosition()\n+    not cur.row and not cur.column\n+\n+  isEndOfFile: (cursor) ->\n+    cur = cursor.getBufferPosition()\n+    eof = @editor.getEofBufferPosition()\n+    cur.row is eof.row and cur.column is eof.column",
        "path": "lib/motions/general-motions.coffee",
        "position": 20,
        "original_position": 20,
        "commit_id": "0c4d1ace56aa658b59573ea7eaf84ad3cb6e903a",
        "original_commit_id": "0c4d1ace56aa658b59573ea7eaf84ad3cb6e903a",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "how about `cur.equals(eof)` ?\n",
        "created_at": "2015-08-05T11:16:25Z",
        "updated_at": "2015-08-05T11:16:25Z",
        "html_url": "https://github.com/atom/vim-mode/pull/813#discussion_r36290972",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/813",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36290972"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/813#discussion_r36290972"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/813"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36343497",
        "pull_request_review_id": null,
        "id": 36343497,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQzNDk3",
        "diff_hunk": "@@ -107,6 +107,15 @@ class Motion\n   isInclusive: ->\n     @vimState.mode is 'visual' or @operatesInclusively\n \n+  isBeginningOfFile: (cursor) ->\n+    cur = cursor.getBufferPosition()\n+    not cur.row and not cur.column",
        "path": "lib/motions/general-motions.coffee",
        "position": 15,
        "original_position": 15,
        "commit_id": "0c4d1ace56aa658b59573ea7eaf84ad3cb6e903a",
        "original_commit_id": "0c4d1ace56aa658b59573ea7eaf84ad3cb6e903a",
        "user": {
            "login": "mwleeds",
            "id": 7833263,
            "node_id": "MDQ6VXNlcjc4MzMyNjM=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/7833263?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mwleeds",
            "html_url": "https://github.com/mwleeds",
            "followers_url": "https://api.github.com/users/mwleeds/followers",
            "following_url": "https://api.github.com/users/mwleeds/following{/other_user}",
            "gists_url": "https://api.github.com/users/mwleeds/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mwleeds/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mwleeds/subscriptions",
            "organizations_url": "https://api.github.com/users/mwleeds/orgs",
            "repos_url": "https://api.github.com/users/mwleeds/repos",
            "events_url": "https://api.github.com/users/mwleeds/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mwleeds/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I don't think `Point.equals` is defined and `is` doesn't work because the values are stored in `.row` and `.column`.\n",
        "created_at": "2015-08-05T19:26:07Z",
        "updated_at": "2015-08-05T19:26:07Z",
        "html_url": "https://github.com/atom/vim-mode/pull/813#discussion_r36343497",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/813",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36343497"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/813#discussion_r36343497"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/813"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36343555",
        "pull_request_review_id": null,
        "id": 36343555,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQzNTU1",
        "diff_hunk": "@@ -107,6 +107,15 @@ class Motion\n   isInclusive: ->\n     @vimState.mode is 'visual' or @operatesInclusively\n \n+  isBeginningOfFile: (cursor) ->\n+    cur = cursor.getBufferPosition()\n+    not cur.row and not cur.column\n+\n+  isEndOfFile: (cursor) ->\n+    cur = cursor.getBufferPosition()\n+    eof = @editor.getEofBufferPosition()\n+    cur.row is eof.row and cur.column is eof.column",
        "path": "lib/motions/general-motions.coffee",
        "position": 20,
        "original_position": 20,
        "commit_id": "0c4d1ace56aa658b59573ea7eaf84ad3cb6e903a",
        "original_commit_id": "0c4d1ace56aa658b59573ea7eaf84ad3cb6e903a",
        "user": {
            "login": "mwleeds",
            "id": 7833263,
            "node_id": "MDQ6VXNlcjc4MzMyNjM=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/7833263?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mwleeds",
            "html_url": "https://github.com/mwleeds",
            "followers_url": "https://api.github.com/users/mwleeds/followers",
            "following_url": "https://api.github.com/users/mwleeds/following{/other_user}",
            "gists_url": "https://api.github.com/users/mwleeds/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mwleeds/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mwleeds/subscriptions",
            "organizations_url": "https://api.github.com/users/mwleeds/orgs",
            "repos_url": "https://api.github.com/users/mwleeds/repos",
            "events_url": "https://api.github.com/users/mwleeds/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mwleeds/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "`cur.equals(eof)` and `cur is eof` didn't seem to work for me.\n",
        "created_at": "2015-08-05T19:26:41Z",
        "updated_at": "2015-08-05T19:26:41Z",
        "html_url": "https://github.com/atom/vim-mode/pull/813#discussion_r36343555",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/813",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36343555"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/813#discussion_r36343555"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/813"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36349621",
        "pull_request_review_id": null,
        "id": 36349621,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ5NjIx",
        "diff_hunk": "@@ -107,6 +107,15 @@ class Motion\n   isInclusive: ->\n     @vimState.mode is 'visual' or @operatesInclusively\n \n+  isBeginningOfFile: (cursor) ->\n+    cur = cursor.getBufferPosition()\n+    not cur.row and not cur.column\n+\n+  isEndOfFile: (cursor) ->\n+    cur = cursor.getBufferPosition()\n+    eof = @editor.getEofBufferPosition()\n+    cur.row is eof.row and cur.column is eof.column",
        "path": "lib/motions/general-motions.coffee",
        "position": 20,
        "original_position": 20,
        "commit_id": "0c4d1ace56aa658b59573ea7eaf84ad3cb6e903a",
        "original_commit_id": "0c4d1ace56aa658b59573ea7eaf84ad3cb6e903a",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Sorry, my bad, it's called isEqual in Point:\nhttps://github.com/atom/text-buffer/blob/master/src/point.coffee#L201\nOn 5 Aug 2015 20:26, \"Matthew Leeds\" notifications@github.com wrote:\n\n> In lib/motions/general-motions.coffee\n> https://github.com/atom/vim-mode/pull/813#discussion_r36343555:\n> \n> > @@ -107,6 +107,15 @@ class Motion\n> >    isInclusive: ->\n> >      @vimState.mode is 'visual' or @operatesInclusively\n> > -  isBeginningOfFile: (cursor) ->\n> > -    cur = cursor.getBufferPosition()\n> > -    not cur.row and not cur.column\n> >   +\n> > -  isEndOfFile: (cursor) ->\n> > -    cur = cursor.getBufferPosition()\n> > -    eof = @editor.getEofBufferPosition()\n> > -    cur.row is eof.row and cur.column is eof.column\n> \n> cur.equals(eof) and cur is eof didn't seem to work for me.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/pull/813/files#r36343555.\n",
        "created_at": "2015-08-05T20:25:34Z",
        "updated_at": "2015-08-05T20:25:34Z",
        "html_url": "https://github.com/atom/vim-mode/pull/813#discussion_r36349621",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/813",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36349621"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/813#discussion_r36349621"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/813"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36530686",
        "pull_request_review_id": null,
        "id": 36530686,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTMwNjg2",
        "diff_hunk": "@@ -205,15 +205,36 @@ describe \"TextObjects\", ->\n       expect(editorElement.classList.contains('normal-mode')).toBe(true)\n \n     it \"selects inside the current paragraph in visual mode\", ->\n+",
        "path": "spec/text-objects-spec.coffee",
        "position": null,
        "original_position": 13,
        "commit_id": "ad3da9e8a7a716e9292408784e659f3f55b42fed",
        "original_commit_id": "93d54a6094e09075ac3ea6cf9e2187e933843914",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "this seems to be an unnecessary empty line; with or without it I'm still recommending an immediate merge for this PR 8-)\n",
        "created_at": "2015-08-07T15:34:22Z",
        "updated_at": "2015-08-07T16:41:45Z",
        "html_url": "https://github.com/atom/vim-mode/pull/696#discussion_r36530686",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/696",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36530686"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/696#discussion_r36530686"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/696"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36566295",
        "pull_request_review_id": null,
        "id": 36566295,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY2Mjk1",
        "diff_hunk": "@@ -1293,7 +1293,7 @@ describe \"Operators\", ->\n       commandModeInputKeydown('a')\n       expect(vimState.getMark('a')).toEqual [0,1]\n \n-  describe 'the ~ keybinding', ->\n+  describe 'the g~ keybinding', ->",
        "path": "spec/operators-spec.coffee",
        "position": 5,
        "original_position": 5,
        "commit_id": "58d7088efa44818a9ab6c58b5fc865b200d4f78c",
        "original_commit_id": "58d7088efa44818a9ab6c58b5fc865b200d4f78c",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "maybe `the ~/g~ keybindings` ?\n",
        "created_at": "2015-08-07T22:16:56Z",
        "updated_at": "2015-08-07T22:16:56Z",
        "html_url": "https://github.com/atom/vim-mode/pull/611#discussion_r36566295",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/611",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36566295"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/611#discussion_r36566295"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/611"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36566342",
        "pull_request_review_id": null,
        "id": 36566342,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY2MzQy",
        "diff_hunk": "@@ -1293,7 +1293,7 @@ describe \"Operators\", ->\n       commandModeInputKeydown('a')\n       expect(vimState.getMark('a')).toEqual [0,1]\n \n-  describe 'the ~ keybinding', ->\n+  describe 'the g~ keybinding', ->",
        "path": "spec/operators-spec.coffee",
        "position": 5,
        "original_position": 5,
        "commit_id": "58d7088efa44818a9ab6c58b5fc865b200d4f78c",
        "original_commit_id": "58d7088efa44818a9ab6c58b5fc865b200d4f78c",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "and same below for `gU` and `gu` please\n",
        "created_at": "2015-08-07T22:17:47Z",
        "updated_at": "2015-08-07T22:17:47Z",
        "html_url": "https://github.com/atom/vim-mode/pull/611#discussion_r36566342",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/611",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36566342"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/611#discussion_r36566342"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/611"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/35460050",
        "pull_request_review_id": null,
        "id": 35460050,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NDYwMDUw",
        "diff_hunk": "@@ -0,0 +1,43 @@\n+_ = require 'underscore-plus'\n+{Motion, MoveToFirstCharacterOfLine} = require './general-motions'\n+{ViewModel} = require '../view-models/view-model'\n+{Input} = require '../view-models/view-model'\n+{Point, Range} = require 'atom'\n+{SearchCurrentWord} = require './search-motion'",
        "path": "lib/motions/move-to-definition-motion.coffee",
        "position": null,
        "original_position": 6,
        "commit_id": "e3de0e51e337614a63f8d6cef990ad189cbd7a00",
        "original_commit_id": "bef611827ebbf4012f55c52040a81103180085e9",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "maybe remove lines 2, 3, 5? They seem unused.\n",
        "created_at": "2015-07-24T19:58:24Z",
        "updated_at": "2015-08-09T00:07:36Z",
        "html_url": "https://github.com/atom/vim-mode/pull/724#discussion_r35460050",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/724",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/35460050"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/724#discussion_r35460050"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/724"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36037324",
        "pull_request_review_id": null,
        "id": 36037324,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MDM3MzI0",
        "diff_hunk": "@@ -0,0 +1,43 @@\n+_ = require 'underscore-plus'\n+{Motion, MoveToFirstCharacterOfLine} = require './general-motions'\n+{ViewModel} = require '../view-models/view-model'\n+{Input} = require '../view-models/view-model'\n+{Point, Range} = require 'atom'\n+{SearchCurrentWord} = require './search-motion'",
        "path": "lib/motions/move-to-definition-motion.coffee",
        "position": null,
        "original_position": 6,
        "commit_id": "e3de0e51e337614a63f8d6cef990ad189cbd7a00",
        "original_commit_id": "bef611827ebbf4012f55c52040a81103180085e9",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@irrationalistic :point_up: ? :sunglasses: \n",
        "created_at": "2015-08-01T21:29:43Z",
        "updated_at": "2015-08-09T00:07:36Z",
        "html_url": "https://github.com/atom/vim-mode/pull/724#discussion_r36037324",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/724",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36037324"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/724#discussion_r36037324"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/724"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36043708",
        "pull_request_review_id": null,
        "id": 36043708,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MDQzNzA4",
        "diff_hunk": "@@ -0,0 +1,43 @@\n+_ = require 'underscore-plus'\n+{Motion, MoveToFirstCharacterOfLine} = require './general-motions'\n+{ViewModel} = require '../view-models/view-model'\n+{Input} = require '../view-models/view-model'\n+{Point, Range} = require 'atom'\n+{SearchCurrentWord} = require './search-motion'",
        "path": "lib/motions/move-to-definition-motion.coffee",
        "position": null,
        "original_position": 6,
        "commit_id": "e3de0e51e337614a63f8d6cef990ad189cbd7a00",
        "original_commit_id": "bef611827ebbf4012f55c52040a81103180085e9",
        "user": {
            "login": "irrationalistic",
            "id": 851856,
            "node_id": "MDQ6VXNlcjg1MTg1Ng==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/851856?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/irrationalistic",
            "html_url": "https://github.com/irrationalistic",
            "followers_url": "https://api.github.com/users/irrationalistic/followers",
            "following_url": "https://api.github.com/users/irrationalistic/following{/other_user}",
            "gists_url": "https://api.github.com/users/irrationalistic/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/irrationalistic/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/irrationalistic/subscriptions",
            "organizations_url": "https://api.github.com/users/irrationalistic/orgs",
            "repos_url": "https://api.github.com/users/irrationalistic/repos",
            "events_url": "https://api.github.com/users/irrationalistic/events{/privacy}",
            "received_events_url": "https://api.github.com/users/irrationalistic/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Sorry! Currently traveling, will do this asap!\n",
        "created_at": "2015-08-02T14:30:34Z",
        "updated_at": "2015-08-09T00:07:36Z",
        "html_url": "https://github.com/atom/vim-mode/pull/724#discussion_r36043708",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/724",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36043708"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/724#discussion_r36043708"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/724"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36579843",
        "pull_request_review_id": null,
        "id": 36579843,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc5ODQz",
        "diff_hunk": "@@ -0,0 +1,43 @@\n+_ = require 'underscore-plus'\n+{Motion, MoveToFirstCharacterOfLine} = require './general-motions'\n+{ViewModel} = require '../view-models/view-model'\n+{Input} = require '../view-models/view-model'\n+{Point, Range} = require 'atom'\n+{SearchCurrentWord} = require './search-motion'",
        "path": "lib/motions/move-to-definition-motion.coffee",
        "position": null,
        "original_position": 6,
        "commit_id": "e3de0e51e337614a63f8d6cef990ad189cbd7a00",
        "original_commit_id": "bef611827ebbf4012f55c52040a81103180085e9",
        "user": {
            "login": "irrationalistic",
            "id": 851856,
            "node_id": "MDQ6VXNlcjg1MTg1Ng==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/851856?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/irrationalistic",
            "html_url": "https://github.com/irrationalistic",
            "followers_url": "https://api.github.com/users/irrationalistic/followers",
            "following_url": "https://api.github.com/users/irrationalistic/following{/other_user}",
            "gists_url": "https://api.github.com/users/irrationalistic/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/irrationalistic/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/irrationalistic/subscriptions",
            "organizations_url": "https://api.github.com/users/irrationalistic/orgs",
            "repos_url": "https://api.github.com/users/irrationalistic/repos",
            "events_url": "https://api.github.com/users/irrationalistic/events{/privacy}",
            "received_events_url": "https://api.github.com/users/irrationalistic/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Done! Awaiting CI...\n",
        "created_at": "2015-08-08T16:58:30Z",
        "updated_at": "2015-08-09T00:07:36Z",
        "html_url": "https://github.com/atom/vim-mode/pull/724#discussion_r36579843",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/724",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36579843"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/724#discussion_r36579843"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/724"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36580009",
        "pull_request_review_id": null,
        "id": 36580009,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgwMDA5",
        "diff_hunk": "@@ -0,0 +1,40 @@\n+_ = require 'underscore-plus'\n+{Input} = require '../view-models/view-model'\n+{SearchCurrentWord} = require './search-motion'\n+\n+module.exports =\n+class MoveToDefinition extends SearchCurrentWord\n+  constructor: (@editor, @vimState) ->\n+    super(@editor, @vimState)\n+\n+    # FIXME: This must depend on the current language\n+    # NOTE: The only modification here is the addition of the $\n+    defaultIsKeyword = \"[@$a-zA-Z0-9_\\-]+\"\n+    userIsKeyword = atom.config.get('vim-mode.iskeyword')\n+    @keywordRegex = new RegExp(userIsKeyword or defaultIsKeyword)\n+\n+    searchString = @getCurrentWordMatch()\n+    @input = new Input(searchString)",
        "path": "lib/motions/move-to-definition-motion.coffee",
        "position": null,
        "original_position": 17,
        "commit_id": "e3de0e51e337614a63f8d6cef990ad189cbd7a00",
        "original_commit_id": "61ad75ad9db257dbc70cc009929da35b4c7a645e",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "`$` is added in the default keyword regex, but if the user has `iskeyword` set, theirs will be the same as for `SearchCurrentWord` then. I'd suggest that, until this regex depends on the language, we just rely on `iskeyword` for the right behaviour. \n\nIf you agree, this constructor could go.\n",
        "created_at": "2015-08-08T17:16:01Z",
        "updated_at": "2015-08-09T00:07:36Z",
        "html_url": "https://github.com/atom/vim-mode/pull/724#discussion_r36580009",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/724",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36580009"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/724#discussion_r36580009"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/724"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36580188",
        "pull_request_review_id": null,
        "id": 36580188,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgwMTg4",
        "diff_hunk": "@@ -0,0 +1,40 @@\n+_ = require 'underscore-plus'\n+{Input} = require '../view-models/view-model'\n+{SearchCurrentWord} = require './search-motion'\n+\n+module.exports =\n+class MoveToDefinition extends SearchCurrentWord\n+  constructor: (@editor, @vimState) ->\n+    super(@editor, @vimState)\n+\n+    # FIXME: This must depend on the current language\n+    # NOTE: The only modification here is the addition of the $\n+    defaultIsKeyword = \"[@$a-zA-Z0-9_\\-]+\"\n+    userIsKeyword = atom.config.get('vim-mode.iskeyword')\n+    @keywordRegex = new RegExp(userIsKeyword or defaultIsKeyword)\n+\n+    searchString = @getCurrentWordMatch()\n+    @input = new Input(searchString)",
        "path": "lib/motions/move-to-definition-motion.coffee",
        "position": null,
        "original_position": 17,
        "commit_id": "e3de0e51e337614a63f8d6cef990ad189cbd7a00",
        "original_commit_id": "61ad75ad9db257dbc70cc009929da35b4c7a645e",
        "user": {
            "login": "irrationalistic",
            "id": 851856,
            "node_id": "MDQ6VXNlcjg1MTg1Ng==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/851856?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/irrationalistic",
            "html_url": "https://github.com/irrationalistic",
            "followers_url": "https://api.github.com/users/irrationalistic/followers",
            "following_url": "https://api.github.com/users/irrationalistic/following{/other_user}",
            "gists_url": "https://api.github.com/users/irrationalistic/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/irrationalistic/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/irrationalistic/subscriptions",
            "organizations_url": "https://api.github.com/users/irrationalistic/orgs",
            "repos_url": "https://api.github.com/users/irrationalistic/repos",
            "events_url": "https://api.github.com/users/irrationalistic/events{/privacy}",
            "received_events_url": "https://api.github.com/users/irrationalistic/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'm not sure I follow. Maybe I don't fully understand the `iskeyword` setting? The intent here was to focus on variable definitions and, for at least php and javascript, the `$` is part of a valid variable name. Without that included in the regex, it would be ignored and the word search would seek the first occurrence of the word without the extra character, right?\n",
        "created_at": "2015-08-08T17:36:56Z",
        "updated_at": "2015-08-09T00:07:36Z",
        "html_url": "https://github.com/atom/vim-mode/pull/724#discussion_r36580188",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/724",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36580188"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/724#discussion_r36580188"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/724"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36580286",
        "pull_request_review_id": null,
        "id": 36580286,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgwMjg2",
        "diff_hunk": "@@ -0,0 +1,40 @@\n+_ = require 'underscore-plus'\n+{Input} = require '../view-models/view-model'\n+{SearchCurrentWord} = require './search-motion'\n+\n+module.exports =\n+class MoveToDefinition extends SearchCurrentWord\n+  constructor: (@editor, @vimState) ->\n+    super(@editor, @vimState)\n+\n+    # FIXME: This must depend on the current language\n+    # NOTE: The only modification here is the addition of the $\n+    defaultIsKeyword = \"[@$a-zA-Z0-9_\\-]+\"\n+    userIsKeyword = atom.config.get('vim-mode.iskeyword')\n+    @keywordRegex = new RegExp(userIsKeyword or defaultIsKeyword)\n+\n+    searchString = @getCurrentWordMatch()\n+    @input = new Input(searchString)\n+\n+  getSearchTerm: (term) ->\n+    search = \"(\\\\w )?#{term}\\\\s?=?\"\n+    search = search.replace /([$])/g, '\\\\$1'\n+    new RegExp search, 'gmi'\n+\n+  scan: (cursor) ->\n+    actualRange = null\n+    @editor.scan @getSearchTerm(@input.characters), (iteration) ->\n+      actualRange = iteration.range\n+\n+      # if there are two filled matches, that means\n+      # this followed the first and second part, so\n+      # we need to skip the match forward a bit\n+      if _.compact(iteration.match).length is 2\n+        actualRange.start.column += 2\n+\n+      # scan starts from the top, so we just want\n+      # the first result\n+      iteration.stop()\n+\n+    return [actualRange] if actualRange\n+    []",
        "path": "lib/motions/move-to-definition-motion.coffee",
        "position": null,
        "original_position": 40,
        "commit_id": "e3de0e51e337614a63f8d6cef990ad189cbd7a00",
        "original_commit_id": "61ad75ad9db257dbc70cc009929da35b4c7a645e",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "could this `scan()` just call `super` with a fake cursor that would report its position as the top of the file, and return the first result only; again to reuse existing code?\n",
        "created_at": "2015-08-08T17:50:31Z",
        "updated_at": "2015-08-09T00:07:36Z",
        "html_url": "https://github.com/atom/vim-mode/pull/724#discussion_r36580286",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/724",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36580286"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/724#discussion_r36580286"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/724"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36580624",
        "pull_request_review_id": null,
        "id": 36580624,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgwNjI0",
        "diff_hunk": "@@ -0,0 +1,40 @@\n+_ = require 'underscore-plus'\n+{Input} = require '../view-models/view-model'\n+{SearchCurrentWord} = require './search-motion'\n+\n+module.exports =\n+class MoveToDefinition extends SearchCurrentWord\n+  constructor: (@editor, @vimState) ->\n+    super(@editor, @vimState)\n+\n+    # FIXME: This must depend on the current language\n+    # NOTE: The only modification here is the addition of the $\n+    defaultIsKeyword = \"[@$a-zA-Z0-9_\\-]+\"\n+    userIsKeyword = atom.config.get('vim-mode.iskeyword')\n+    @keywordRegex = new RegExp(userIsKeyword or defaultIsKeyword)\n+\n+    searchString = @getCurrentWordMatch()\n+    @input = new Input(searchString)\n+\n+  getSearchTerm: (term) ->\n+    search = \"(\\\\w )?#{term}\\\\s?=?\"\n+    search = search.replace /([$])/g, '\\\\$1'\n+    new RegExp search, 'gmi'\n+\n+  scan: (cursor) ->\n+    actualRange = null\n+    @editor.scan @getSearchTerm(@input.characters), (iteration) ->\n+      actualRange = iteration.range\n+\n+      # if there are two filled matches, that means\n+      # this followed the first and second part, so\n+      # we need to skip the match forward a bit\n+      if _.compact(iteration.match).length is 2\n+        actualRange.start.column += 2\n+\n+      # scan starts from the top, so we just want\n+      # the first result\n+      iteration.stop()\n+\n+    return [actualRange] if actualRange\n+    []",
        "path": "lib/motions/move-to-definition-motion.coffee",
        "position": null,
        "original_position": 40,
        "commit_id": "e3de0e51e337614a63f8d6cef990ad189cbd7a00",
        "original_commit_id": "61ad75ad9db257dbc70cc009929da35b4c7a645e",
        "user": {
            "login": "irrationalistic",
            "id": 851856,
            "node_id": "MDQ6VXNlcjg1MTg1Ng==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/851856?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/irrationalistic",
            "html_url": "https://github.com/irrationalistic",
            "followers_url": "https://api.github.com/users/irrationalistic/followers",
            "following_url": "https://api.github.com/users/irrationalistic/following{/other_user}",
            "gists_url": "https://api.github.com/users/irrationalistic/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/irrationalistic/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/irrationalistic/subscriptions",
            "organizations_url": "https://api.github.com/users/irrationalistic/orgs",
            "repos_url": "https://api.github.com/users/irrationalistic/repos",
            "events_url": "https://api.github.com/users/irrationalistic/events{/privacy}",
            "received_events_url": "https://api.github.com/users/irrationalistic/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Possibly! I'll have to test that out. I think there was a reason I separated its functionality, but it isn't coming to me right now...\n",
        "created_at": "2015-08-08T18:30:14Z",
        "updated_at": "2015-08-09T00:07:36Z",
        "html_url": "https://github.com/atom/vim-mode/pull/724#discussion_r36580624",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/724",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36580624"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/724#discussion_r36580624"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/724"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36580738",
        "pull_request_review_id": null,
        "id": 36580738,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgwNzM4",
        "diff_hunk": "@@ -0,0 +1,40 @@\n+_ = require 'underscore-plus'\n+{Input} = require '../view-models/view-model'\n+{SearchCurrentWord} = require './search-motion'\n+\n+module.exports =\n+class MoveToDefinition extends SearchCurrentWord\n+  constructor: (@editor, @vimState) ->\n+    super(@editor, @vimState)\n+\n+    # FIXME: This must depend on the current language\n+    # NOTE: The only modification here is the addition of the $\n+    defaultIsKeyword = \"[@$a-zA-Z0-9_\\-]+\"\n+    userIsKeyword = atom.config.get('vim-mode.iskeyword')\n+    @keywordRegex = new RegExp(userIsKeyword or defaultIsKeyword)\n+\n+    searchString = @getCurrentWordMatch()\n+    @input = new Input(searchString)\n+\n+  getSearchTerm: (term) ->\n+    search = \"(\\\\w )?#{term}\\\\s?=?\"\n+    search = search.replace /([$])/g, '\\\\$1'\n+    new RegExp search, 'gmi'\n+\n+  scan: (cursor) ->\n+    actualRange = null\n+    @editor.scan @getSearchTerm(@input.characters), (iteration) ->\n+      actualRange = iteration.range\n+\n+      # if there are two filled matches, that means\n+      # this followed the first and second part, so\n+      # we need to skip the match forward a bit\n+      if _.compact(iteration.match).length is 2\n+        actualRange.start.column += 2\n+\n+      # scan starts from the top, so we just want\n+      # the first result\n+      iteration.stop()\n+\n+    return [actualRange] if actualRange\n+    []",
        "path": "lib/motions/move-to-definition-motion.coffee",
        "position": null,
        "original_position": 40,
        "commit_id": "e3de0e51e337614a63f8d6cef990ad189cbd7a00",
        "original_commit_id": "61ad75ad9db257dbc70cc009929da35b4c7a645e",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "That reason would be the column + 2 part - can't say I understand it...\n",
        "created_at": "2015-08-08T18:45:51Z",
        "updated_at": "2015-08-09T00:07:36Z",
        "html_url": "https://github.com/atom/vim-mode/pull/724#discussion_r36580738",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/724",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36580738"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/724#discussion_r36580738"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/724"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36581627",
        "pull_request_review_id": null,
        "id": 36581627,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgxNjI3",
        "diff_hunk": "@@ -0,0 +1,40 @@\n+_ = require 'underscore-plus'\n+{Input} = require '../view-models/view-model'\n+{SearchCurrentWord} = require './search-motion'\n+\n+module.exports =\n+class MoveToDefinition extends SearchCurrentWord\n+  constructor: (@editor, @vimState) ->\n+    super(@editor, @vimState)\n+\n+    # FIXME: This must depend on the current language\n+    # NOTE: The only modification here is the addition of the $\n+    defaultIsKeyword = \"[@$a-zA-Z0-9_\\-]+\"\n+    userIsKeyword = atom.config.get('vim-mode.iskeyword')\n+    @keywordRegex = new RegExp(userIsKeyword or defaultIsKeyword)\n+\n+    searchString = @getCurrentWordMatch()\n+    @input = new Input(searchString)\n+\n+  getSearchTerm: (term) ->\n+    search = \"(\\\\w )?#{term}\\\\s?=?\"\n+    search = search.replace /([$])/g, '\\\\$1'\n+    new RegExp search, 'gmi'\n+\n+  scan: (cursor) ->\n+    actualRange = null\n+    @editor.scan @getSearchTerm(@input.characters), (iteration) ->\n+      actualRange = iteration.range\n+\n+      # if there are two filled matches, that means\n+      # this followed the first and second part, so\n+      # we need to skip the match forward a bit\n+      if _.compact(iteration.match).length is 2\n+        actualRange.start.column += 2\n+\n+      # scan starts from the top, so we just want\n+      # the first result\n+      iteration.stop()\n+\n+    return [actualRange] if actualRange\n+    []",
        "path": "lib/motions/move-to-definition-motion.coffee",
        "position": null,
        "original_position": 40,
        "commit_id": "e3de0e51e337614a63f8d6cef990ad189cbd7a00",
        "original_commit_id": "61ad75ad9db257dbc70cc009929da35b4c7a645e",
        "user": {
            "login": "irrationalistic",
            "id": 851856,
            "node_id": "MDQ6VXNlcjg1MTg1Ng==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/851856?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/irrationalistic",
            "html_url": "https://github.com/irrationalistic",
            "followers_url": "https://api.github.com/users/irrationalistic/followers",
            "following_url": "https://api.github.com/users/irrationalistic/following{/other_user}",
            "gists_url": "https://api.github.com/users/irrationalistic/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/irrationalistic/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/irrationalistic/subscriptions",
            "organizations_url": "https://api.github.com/users/irrationalistic/orgs",
            "repos_url": "https://api.github.com/users/irrationalistic/repos",
            "events_url": "https://api.github.com/users/irrationalistic/events{/privacy}",
            "received_events_url": "https://api.github.com/users/irrationalistic/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yeah, I can't remember why I had that bit in. It was compensating for the regex defined above, but I didn't leave any notes as to why I needed that! I'm also looking into simplifying the code to re-use more of the parent class. The only thing I'm noticing is that the super scan reads through the entire document without stopping whereas mine stops the first item it finds. I could modify the super function to take an optional parameter of something like `returnFirstResult`. See anything odd about trying that?\n\nedit: I remembered why I had that! I was looking for the variable definition that began with a keyword like `var` but since the code doesn't care if it does or not, the addition became moot.\n",
        "created_at": "2015-08-08T20:36:22Z",
        "updated_at": "2015-08-09T00:07:36Z",
        "html_url": "https://github.com/atom/vim-mode/pull/724#discussion_r36581627",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/724",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36581627"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/724#discussion_r36581627"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/724"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36581849",
        "pull_request_review_id": null,
        "id": 36581849,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgxODQ5",
        "diff_hunk": "@@ -0,0 +1,40 @@\n+_ = require 'underscore-plus'\n+{Input} = require '../view-models/view-model'\n+{SearchCurrentWord} = require './search-motion'\n+\n+module.exports =\n+class MoveToDefinition extends SearchCurrentWord\n+  constructor: (@editor, @vimState) ->\n+    super(@editor, @vimState)\n+\n+    # FIXME: This must depend on the current language\n+    # NOTE: The only modification here is the addition of the $\n+    defaultIsKeyword = \"[@$a-zA-Z0-9_\\-]+\"\n+    userIsKeyword = atom.config.get('vim-mode.iskeyword')\n+    @keywordRegex = new RegExp(userIsKeyword or defaultIsKeyword)\n+\n+    searchString = @getCurrentWordMatch()\n+    @input = new Input(searchString)",
        "path": "lib/motions/move-to-definition-motion.coffee",
        "position": null,
        "original_position": 17,
        "commit_id": "e3de0e51e337614a63f8d6cef990ad189cbd7a00",
        "original_commit_id": "61ad75ad9db257dbc70cc009929da35b4c7a645e",
        "user": {
            "login": "irrationalistic",
            "id": 851856,
            "node_id": "MDQ6VXNlcjg1MTg1Ng==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/851856?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/irrationalistic",
            "html_url": "https://github.com/irrationalistic",
            "followers_url": "https://api.github.com/users/irrationalistic/followers",
            "following_url": "https://api.github.com/users/irrationalistic/following{/other_user}",
            "gists_url": "https://api.github.com/users/irrationalistic/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/irrationalistic/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/irrationalistic/subscriptions",
            "organizations_url": "https://api.github.com/users/irrationalistic/orgs",
            "repos_url": "https://api.github.com/users/irrationalistic/repos",
            "events_url": "https://api.github.com/users/irrationalistic/events{/privacy}",
            "received_events_url": "https://api.github.com/users/irrationalistic/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Related to this and your note about replacing the scan with super:\n\nI've taken out the majority of the code, bringing it down to just the call to `super` and added in an additional parameter to allow the search to halt on the first result. This works great for almost all items, so thanks for the great suggestions! (this will probably get much more complicated for scope-level `gd`, so I think it makes sense to keep it in a separate file until that's built)\n\nHowever, I still am not sure about the right approach for supporting variables that start with `$`. All but those type of variable pass the test! I can get it to work if I keep the constructor and the custom `getSearchTerm` to include the $ and escape it properly, but I'm not sure if there is a good way to make this work without those two functions! Thoughts?\n",
        "created_at": "2015-08-08T21:05:43Z",
        "updated_at": "2015-08-09T00:07:36Z",
        "html_url": "https://github.com/atom/vim-mode/pull/724#discussion_r36581849",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/724",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36581849"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/724#discussion_r36581849"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/724"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36582310",
        "pull_request_review_id": null,
        "id": 36582310,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgyMzEw",
        "diff_hunk": "@@ -0,0 +1,40 @@\n+_ = require 'underscore-plus'\n+{Input} = require '../view-models/view-model'\n+{SearchCurrentWord} = require './search-motion'\n+\n+module.exports =\n+class MoveToDefinition extends SearchCurrentWord\n+  constructor: (@editor, @vimState) ->\n+    super(@editor, @vimState)\n+\n+    # FIXME: This must depend on the current language\n+    # NOTE: The only modification here is the addition of the $\n+    defaultIsKeyword = \"[@$a-zA-Z0-9_\\-]+\"\n+    userIsKeyword = atom.config.get('vim-mode.iskeyword')\n+    @keywordRegex = new RegExp(userIsKeyword or defaultIsKeyword)\n+\n+    searchString = @getCurrentWordMatch()\n+    @input = new Input(searchString)",
        "path": "lib/motions/move-to-definition-motion.coffee",
        "position": null,
        "original_position": 17,
        "commit_id": "e3de0e51e337614a63f8d6cef990ad189cbd7a00",
        "original_commit_id": "61ad75ad9db257dbc70cc009929da35b4c7a645e",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Very good, I can answer both questions together: I would suggest that we treat, for now, languages with variables starting with `$` as a user setting: in the tests with `$`, do a \n\n```\nbeforeEach -> \n  # a user may choose to include `$` as part of names:\n  atom.config.set('vim-mode.iskeyword', \"---the regex with $ in it---\")\n```\n\nFor example, I don't like having `@` as part of `*` searches, so I have, in my `init.coffee`, the command `atom.config.set('vim-mode.iskeyword', \"[a-zA-Z0-9_]+\")`\n\nYeah, it's very likely I think that `[[` and `gd` may mean `gD` will change, but for now, having a basic `gD` would be good.\n",
        "created_at": "2015-08-08T22:01:13Z",
        "updated_at": "2015-08-09T00:07:36Z",
        "html_url": "https://github.com/atom/vim-mode/pull/724#discussion_r36582310",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/724",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36582310"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/724#discussion_r36582310"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/724"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36582344",
        "pull_request_review_id": null,
        "id": 36582344,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgyMzQ0",
        "diff_hunk": "@@ -0,0 +1,40 @@\n+_ = require 'underscore-plus'\n+{Input} = require '../view-models/view-model'\n+{SearchCurrentWord} = require './search-motion'\n+\n+module.exports =\n+class MoveToDefinition extends SearchCurrentWord\n+  constructor: (@editor, @vimState) ->\n+    super(@editor, @vimState)\n+\n+    # FIXME: This must depend on the current language\n+    # NOTE: The only modification here is the addition of the $\n+    defaultIsKeyword = \"[@$a-zA-Z0-9_\\-]+\"\n+    userIsKeyword = atom.config.get('vim-mode.iskeyword')\n+    @keywordRegex = new RegExp(userIsKeyword or defaultIsKeyword)\n+\n+    searchString = @getCurrentWordMatch()\n+    @input = new Input(searchString)\n+\n+  getSearchTerm: (term) ->\n+    search = \"(\\\\w )?#{term}\\\\s?=?\"\n+    search = search.replace /([$])/g, '\\\\$1'\n+    new RegExp search, 'gmi'\n+\n+  scan: (cursor) ->\n+    actualRange = null\n+    @editor.scan @getSearchTerm(@input.characters), (iteration) ->\n+      actualRange = iteration.range\n+\n+      # if there are two filled matches, that means\n+      # this followed the first and second part, so\n+      # we need to skip the match forward a bit\n+      if _.compact(iteration.match).length is 2\n+        actualRange.start.column += 2\n+\n+      # scan starts from the top, so we just want\n+      # the first result\n+      iteration.stop()\n+\n+    return [actualRange] if actualRange\n+    []",
        "path": "lib/motions/move-to-definition-motion.coffee",
        "position": null,
        "original_position": 40,
        "commit_id": "e3de0e51e337614a63f8d6cef990ad189cbd7a00",
        "original_commit_id": "61ad75ad9db257dbc70cc009929da35b4c7a645e",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "edited: I see _little_ wrong with `returnFirstResult`, only that if you use the fake cursor approach, `gd` might be easier to implement by giving `scan` a fake cursor that's located at where `[[` would go (or somesuch). `returnFirstResult` won't be useful for `gd`.\n",
        "created_at": "2015-08-08T22:05:19Z",
        "updated_at": "2015-08-09T00:07:36Z",
        "html_url": "https://github.com/atom/vim-mode/pull/724#discussion_r36582344",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/724",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36582344"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/724#discussion_r36582344"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/724"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36582472",
        "pull_request_review_id": null,
        "id": 36582472,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgyNDcy",
        "diff_hunk": "@@ -0,0 +1,40 @@\n+_ = require 'underscore-plus'\n+{Input} = require '../view-models/view-model'\n+{SearchCurrentWord} = require './search-motion'\n+\n+module.exports =\n+class MoveToDefinition extends SearchCurrentWord\n+  constructor: (@editor, @vimState) ->\n+    super(@editor, @vimState)\n+\n+    # FIXME: This must depend on the current language\n+    # NOTE: The only modification here is the addition of the $\n+    defaultIsKeyword = \"[@$a-zA-Z0-9_\\-]+\"\n+    userIsKeyword = atom.config.get('vim-mode.iskeyword')\n+    @keywordRegex = new RegExp(userIsKeyword or defaultIsKeyword)\n+\n+    searchString = @getCurrentWordMatch()\n+    @input = new Input(searchString)",
        "path": "lib/motions/move-to-definition-motion.coffee",
        "position": null,
        "original_position": 17,
        "commit_id": "e3de0e51e337614a63f8d6cef990ad189cbd7a00",
        "original_commit_id": "61ad75ad9db257dbc70cc009929da35b4c7a645e",
        "user": {
            "login": "irrationalistic",
            "id": 851856,
            "node_id": "MDQ6VXNlcjg1MTg1Ng==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/851856?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/irrationalistic",
            "html_url": "https://github.com/irrationalistic",
            "followers_url": "https://api.github.com/users/irrationalistic/followers",
            "following_url": "https://api.github.com/users/irrationalistic/following{/other_user}",
            "gists_url": "https://api.github.com/users/irrationalistic/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/irrationalistic/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/irrationalistic/subscriptions",
            "organizations_url": "https://api.github.com/users/irrationalistic/orgs",
            "repos_url": "https://api.github.com/users/irrationalistic/repos",
            "events_url": "https://api.github.com/users/irrationalistic/events{/privacy}",
            "received_events_url": "https://api.github.com/users/irrationalistic/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Great! Makes sense. I'll set that up and commit the changes ASAP.\n",
        "created_at": "2015-08-08T22:24:06Z",
        "updated_at": "2015-08-09T00:07:36Z",
        "html_url": "https://github.com/atom/vim-mode/pull/724#discussion_r36582472",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/724",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36582472"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/724#discussion_r36582472"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/724"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36622586",
        "pull_request_review_id": null,
        "id": 36622586,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjIyNTg2",
        "diff_hunk": "@@ -60,6 +62,9 @@ class SearchBase extends MotionWithInput\n \n     modFlags = Object.keys(modifiers).join('')\n \n+    # Escape the term for use in regex\n+    term = term.replace /([$])/g, '\\\\$1'\n+",
        "path": "lib/motions/search-motion.coffee",
        "position": 32,
        "original_position": 32,
        "commit_id": "e3de0e51e337614a63f8d6cef990ad189cbd7a00",
        "original_commit_id": "e3de0e51e337614a63f8d6cef990ad189cbd7a00",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This would prevent the use of `$` to mean the end of the line in normal searches.\nI would actually suggest to override `getSearchTerm` in `SearchCurrentWord` so that it simply returns `new RegExp(_.escapeRegExp(term), 'g')` - or with `'gi'` instead of `'g'` if case insensitivity is desired for `SearchCurrentWord` and its kin.\n",
        "created_at": "2015-08-10T11:39:36Z",
        "updated_at": "2015-08-10T11:39:36Z",
        "html_url": "https://github.com/atom/vim-mode/pull/724#discussion_r36622586",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/724",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36622586"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/724#discussion_r36622586"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/724"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/35816122",
        "pull_request_review_id": null,
        "id": 35816122,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1ODE2MTIy",
        "diff_hunk": "@@ -104,15 +104,51 @@ class Motion\n class CurrentSelection extends Motion\n   constructor: (@editor, @vimState) ->\n     super(@editor, @vimState)\n-    @selection = @editor.getSelectedBufferRanges()\n+    @lastSelection = @editor.getSelectedBufferRange()\n+    @wasLinewise = @isLinewise()\n \n   execute: (count=1) ->\n     _.times(count, -> true)\n \n   select: (count=1) ->\n-    @editor.setSelectedBufferRanges(@selection)\n+    # in visual mode, the current selections are already there\n+    # if we're not in visual mode, we are repeating some operation and need to re-do the selections\n+    unless @vimState.mode is 'visual'\n+      if @wasLinewise\n+        @selectLines()\n+      else\n+        @selectCharacters()\n+\n     _.times(count, -> true)\n \n+  selectLines: ->\n+    {start, end} = @lastSelection\n+    lineCount = end.row - start.row\n+    for selection in @editor.getSelections()\n+      cursor = selection.cursor.getBufferPosition()\n+      selection.setBufferRange\n+        start:\n+          row: cursor.row\n+          column: 0\n+        end:\n+          row: cursor.row + end.row - start.row\n+          column: 0\n+\n+  selectCharacters: ->\n+    {start, end} = @lastSelection\n+    if @lastSelection.isSingleLine()\n+      count = end.column - start.column\n+      wrap = settings.wrapLeftRightMotion()\n+      for selection in @editor.getSelections()\n+        _.times count, ->\n+          selection.selectRight() if wrap or not selection.cursor.isAtEndOfLine()\n+    else\n+      for selection in @editor.getSelections()\n+        cursor = selection.cursor.getBufferPosition()\n+        selection.selectToBufferPosition\n+          row: cursor.row + end.row - start.row\n+          column: end.column",
        "path": "lib/motions/general-motions.coffee",
        "position": null,
        "original_position": 49,
        "commit_id": "886444f30708a03c315df3e9ecc5fbcef7b0cea9",
        "original_commit_id": "f3d2d6fa29af598b51c13f73c02d8fe58b9520a2",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "You might be able to use some more abstract methods on [`Point`](https://github.com/atom/text-buffer/blob/master/src/point.coffee#L144) and [`Range`](https://github.com/atom/text-buffer/blob/master/src/range.coffee#L300) to do this. Could you try something along these lines?\n\n``` coffee\nselectCharacters: ->\n  lastSelectionExtent = @lastSelection.getExtent()\n  for selection in @editor.getSelections()\n    {start} = selection.getBufferRange()\n    selection.setBufferRange([start, start.traverse(lastSelectionExtent)])\n  return\n```\n",
        "created_at": "2015-07-29T21:46:50Z",
        "updated_at": "2015-08-12T21:21:10Z",
        "html_url": "https://github.com/atom/vim-mode/pull/740#discussion_r35816122",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/740",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/35816122"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/740#discussion_r35816122"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/740"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/35816329",
        "pull_request_review_id": null,
        "id": 35816329,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1ODE2MzI5",
        "diff_hunk": "@@ -104,15 +104,51 @@ class Motion\n class CurrentSelection extends Motion\n   constructor: (@editor, @vimState) ->\n     super(@editor, @vimState)\n-    @selection = @editor.getSelectedBufferRanges()\n+    @lastSelection = @editor.getSelectedBufferRange()\n+    @wasLinewise = @isLinewise()\n \n   execute: (count=1) ->\n     _.times(count, -> true)\n \n   select: (count=1) ->\n-    @editor.setSelectedBufferRanges(@selection)\n+    # in visual mode, the current selections are already there\n+    # if we're not in visual mode, we are repeating some operation and need to re-do the selections\n+    unless @vimState.mode is 'visual'\n+      if @wasLinewise\n+        @selectLines()\n+      else\n+        @selectCharacters()\n+\n     _.times(count, -> true)\n \n+  selectLines: ->\n+    {start, end} = @lastSelection\n+    lineCount = end.row - start.row\n+    for selection in @editor.getSelections()\n+      cursor = selection.cursor.getBufferPosition()\n+      selection.setBufferRange\n+        start:\n+          row: cursor.row\n+          column: 0\n+        end:\n+          row: cursor.row + end.row - start.row\n+          column: 0\n+\n+  selectCharacters: ->\n+    {start, end} = @lastSelection\n+    if @lastSelection.isSingleLine()\n+      count = end.column - start.column\n+      wrap = settings.wrapLeftRightMotion()\n+      for selection in @editor.getSelections()\n+        _.times count, ->\n+          selection.selectRight() if wrap or not selection.cursor.isAtEndOfLine()\n+    else\n+      for selection in @editor.getSelections()\n+        cursor = selection.cursor.getBufferPosition()\n+        selection.selectToBufferPosition\n+          row: cursor.row + end.row - start.row\n+          column: end.column",
        "path": "lib/motions/general-motions.coffee",
        "position": null,
        "original_position": 49,
        "commit_id": "886444f30708a03c315df3e9ecc5fbcef7b0cea9",
        "original_commit_id": "f3d2d6fa29af598b51c13f73c02d8fe58b9520a2",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Just a thought: maybe if the motion `@wasLinewise`, we could use the same code path as for characters, but then call `@editor.selectLinesContainingCursors()`, or `selection.selectLine()` on each selection? Not sure if those methods have the right behavior in all cases.\n",
        "created_at": "2015-07-29T21:49:06Z",
        "updated_at": "2015-08-12T21:21:10Z",
        "html_url": "https://github.com/atom/vim-mode/pull/740#discussion_r35816329",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/740",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/35816329"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/740#discussion_r35816329"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/740"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36037235",
        "pull_request_review_id": null,
        "id": 36037235,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MDM3MjM1",
        "diff_hunk": "@@ -104,15 +104,51 @@ class Motion\n class CurrentSelection extends Motion\n   constructor: (@editor, @vimState) ->\n     super(@editor, @vimState)\n-    @selection = @editor.getSelectedBufferRanges()\n+    @lastSelection = @editor.getSelectedBufferRange()\n+    @wasLinewise = @isLinewise()\n \n   execute: (count=1) ->\n     _.times(count, -> true)\n \n   select: (count=1) ->\n-    @editor.setSelectedBufferRanges(@selection)\n+    # in visual mode, the current selections are already there\n+    # if we're not in visual mode, we are repeating some operation and need to re-do the selections\n+    unless @vimState.mode is 'visual'\n+      if @wasLinewise\n+        @selectLines()\n+      else\n+        @selectCharacters()\n+\n     _.times(count, -> true)\n \n+  selectLines: ->\n+    {start, end} = @lastSelection\n+    lineCount = end.row - start.row\n+    for selection in @editor.getSelections()\n+      cursor = selection.cursor.getBufferPosition()\n+      selection.setBufferRange\n+        start:\n+          row: cursor.row\n+          column: 0\n+        end:\n+          row: cursor.row + end.row - start.row\n+          column: 0\n+\n+  selectCharacters: ->\n+    {start, end} = @lastSelection\n+    if @lastSelection.isSingleLine()\n+      count = end.column - start.column\n+      wrap = settings.wrapLeftRightMotion()\n+      for selection in @editor.getSelections()\n+        _.times count, ->\n+          selection.selectRight() if wrap or not selection.cursor.isAtEndOfLine()\n+    else\n+      for selection in @editor.getSelections()\n+        cursor = selection.cursor.getBufferPosition()\n+        selection.selectToBufferPosition\n+          row: cursor.row + end.row - start.row\n+          column: end.column",
        "path": "lib/motions/general-motions.coffee",
        "position": null,
        "original_position": 49,
        "commit_id": "886444f30708a03c315df3e9ecc5fbcef7b0cea9",
        "original_commit_id": "f3d2d6fa29af598b51c13f73c02d8fe58b9520a2",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "An attempt just committed, @maxbrunsfeld .\nUsing `Point.traverse` doesn't do wrapping so that's extra, but still the code is nicer. \nDoing `selectLines` with `selectCharacters`, with some linewise stuff around, would work but actually the special-cased code is faster and simpler, IMO.\n",
        "created_at": "2015-08-01T21:15:58Z",
        "updated_at": "2015-08-12T21:21:10Z",
        "html_url": "https://github.com/atom/vim-mode/pull/740#discussion_r36037235",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/740",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36037235"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/740#discussion_r36037235"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/740"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36907988",
        "pull_request_review_id": null,
        "id": 36907988,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA3OTg4",
        "diff_hunk": "@@ -104,15 +104,51 @@ class Motion\n class CurrentSelection extends Motion\n   constructor: (@editor, @vimState) ->\n     super(@editor, @vimState)\n-    @selection = @editor.getSelectedBufferRanges()\n+    @lastSelection = @editor.getSelectedBufferRange()\n+    @wasLinewise = @isLinewise()\n \n   execute: (count=1) ->\n     _.times(count, -> true)\n \n   select: (count=1) ->\n-    @editor.setSelectedBufferRanges(@selection)\n+    # in visual mode, the current selections are already there\n+    # if we're not in visual mode, we are repeating some operation and need to re-do the selections\n+    unless @vimState.mode is 'visual'\n+      if @wasLinewise\n+        @selectLines()\n+      else\n+        @selectCharacters()\n+\n     _.times(count, -> true)\n \n+  selectLines: ->\n+    {start, end} = @lastSelection\n+    lineCount = end.row - start.row\n+    for selection in @editor.getSelections()\n+      cursor = selection.cursor.getBufferPosition()\n+      selection.setBufferRange\n+        start:\n+          row: cursor.row\n+          column: 0\n+        end:\n+          row: cursor.row + end.row - start.row\n+          column: 0\n+\n+  selectCharacters: ->\n+    {start, end} = @lastSelection\n+    if @lastSelection.isSingleLine()\n+      count = end.column - start.column\n+      wrap = settings.wrapLeftRightMotion()\n+      for selection in @editor.getSelections()\n+        _.times count, ->\n+          selection.selectRight() if wrap or not selection.cursor.isAtEndOfLine()\n+    else\n+      for selection in @editor.getSelections()\n+        cursor = selection.cursor.getBufferPosition()\n+        selection.selectToBufferPosition\n+          row: cursor.row + end.row - start.row\n+          column: end.column",
        "path": "lib/motions/general-motions.coffee",
        "position": null,
        "original_position": 49,
        "commit_id": "886444f30708a03c315df3e9ecc5fbcef7b0cea9",
        "original_commit_id": "f3d2d6fa29af598b51c13f73c02d8fe58b9520a2",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Got it. I agree.\n",
        "created_at": "2015-08-12T20:15:12Z",
        "updated_at": "2015-08-12T21:21:10Z",
        "html_url": "https://github.com/atom/vim-mode/pull/740#discussion_r36907988",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/740",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36907988"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/740#discussion_r36907988"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/740"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36908553",
        "pull_request_review_id": null,
        "id": 36908553,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA4NTUz",
        "diff_hunk": "@@ -110,15 +110,45 @@ class Motion\n class CurrentSelection extends Motion\n   constructor: (@editor, @vimState) ->\n     super(@editor, @vimState)\n-    @selection = @editor.getSelectedBufferRanges()\n+    @lastSelectionRange = @editor.getSelectedBufferRange()\n+    @wasLinewise = @isLinewise()\n \n   execute: (count=1) ->\n     _.times(count, -> true)\n \n   select: (count=1) ->\n-    @editor.setSelectedBufferRanges(@selection)\n+    # in visual mode, the current selections are already there\n+    # if we're not in visual mode, we are repeating some operation and need to re-do the selections\n+    unless @vimState.mode is 'visual'\n+      if @wasLinewise\n+        @selectLines()\n+      else\n+        @selectCharacters()\n+\n     _.times(count, -> true)\n \n+  selectLines: ->\n+    lastSelectionExtent = @lastSelectionRange.getExtent()\n+    for selection in @editor.getSelections()\n+      cursor = selection.cursor.getBufferPosition()\n+      selection.setBufferRange [[cursor.row, 0], [cursor.row + lastSelectionExtent.row, 0]]\n+    return\n+\n+  selectCharacters: ->\n+    lastSelectionExtent = @lastSelectionRange.getExtent()\n+    wrap = settings.wrapLeftRightMotion()\n+    for selection in @editor.getSelections()\n+      {start} = selection.getBufferRange()\n+      newEnd = start.traverse(lastSelectionExtent)\n+      selection.setBufferRange([start, newEnd])\n+\n+      if wrap\n+        columnDifference = newEnd.column - selection.getBufferRange().end.column\n+        if columnDifference > 0\n+          _.times columnDifference, -> selection.selectRight()",
        "path": "lib/motions/general-motions.coffee",
        "position": null,
        "original_position": 41,
        "commit_id": "886444f30708a03c315df3e9ecc5fbcef7b0cea9",
        "original_commit_id": "321556157f64a41eb32ea97810d62edd629ea58a",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Could you explain what this `if wrap` section is for again? I would think that when redoing visual mode operations, we'd always want to select the same number of lines as the original operation.\n",
        "created_at": "2015-08-12T20:20:15Z",
        "updated_at": "2015-08-12T21:21:10Z",
        "html_url": "https://github.com/atom/vim-mode/pull/740#discussion_r36908553",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/740",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36908553"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/740#discussion_r36908553"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/740"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36914726",
        "pull_request_review_id": null,
        "id": 36914726,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE0NzI2",
        "diff_hunk": "@@ -110,15 +110,45 @@ class Motion\n class CurrentSelection extends Motion\n   constructor: (@editor, @vimState) ->\n     super(@editor, @vimState)\n-    @selection = @editor.getSelectedBufferRanges()\n+    @lastSelectionRange = @editor.getSelectedBufferRange()\n+    @wasLinewise = @isLinewise()\n \n   execute: (count=1) ->\n     _.times(count, -> true)\n \n   select: (count=1) ->\n-    @editor.setSelectedBufferRanges(@selection)\n+    # in visual mode, the current selections are already there\n+    # if we're not in visual mode, we are repeating some operation and need to re-do the selections\n+    unless @vimState.mode is 'visual'\n+      if @wasLinewise\n+        @selectLines()\n+      else\n+        @selectCharacters()\n+\n     _.times(count, -> true)\n \n+  selectLines: ->\n+    lastSelectionExtent = @lastSelectionRange.getExtent()\n+    for selection in @editor.getSelections()\n+      cursor = selection.cursor.getBufferPosition()\n+      selection.setBufferRange [[cursor.row, 0], [cursor.row + lastSelectionExtent.row, 0]]\n+    return\n+\n+  selectCharacters: ->\n+    lastSelectionExtent = @lastSelectionRange.getExtent()\n+    wrap = settings.wrapLeftRightMotion()\n+    for selection in @editor.getSelections()\n+      {start} = selection.getBufferRange()\n+      newEnd = start.traverse(lastSelectionExtent)\n+      selection.setBufferRange([start, newEnd])\n+\n+      if wrap\n+        columnDifference = newEnd.column - selection.getBufferRange().end.column\n+        if columnDifference > 0\n+          _.times columnDifference, -> selection.selectRight()",
        "path": "lib/motions/general-motions.coffee",
        "position": null,
        "original_position": 41,
        "commit_id": "886444f30708a03c315df3e9ecc5fbcef7b0cea9",
        "original_commit_id": "321556157f64a41eb32ea97810d62edd629ea58a",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Oh, I misinterpreted what VIM was doing. When the last line of the original charwise selection has more characters than are available, VIM eats the newline and I thought it ate more than that. I'll fix it so that vim-mode **doesn't** eat the newline because I find it illogical behaviour.\n",
        "created_at": "2015-08-12T21:14:10Z",
        "updated_at": "2015-08-12T21:21:10Z",
        "html_url": "https://github.com/atom/vim-mode/pull/740#discussion_r36914726",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/740",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36914726"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/740#discussion_r36914726"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/740"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36915119",
        "pull_request_review_id": null,
        "id": 36915119,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE1MTE5",
        "diff_hunk": "@@ -110,15 +110,45 @@ class Motion\n class CurrentSelection extends Motion\n   constructor: (@editor, @vimState) ->\n     super(@editor, @vimState)\n-    @selection = @editor.getSelectedBufferRanges()\n+    @lastSelectionRange = @editor.getSelectedBufferRange()\n+    @wasLinewise = @isLinewise()\n \n   execute: (count=1) ->\n     _.times(count, -> true)\n \n   select: (count=1) ->\n-    @editor.setSelectedBufferRanges(@selection)\n+    # in visual mode, the current selections are already there\n+    # if we're not in visual mode, we are repeating some operation and need to re-do the selections\n+    unless @vimState.mode is 'visual'\n+      if @wasLinewise\n+        @selectLines()\n+      else\n+        @selectCharacters()\n+\n     _.times(count, -> true)\n \n+  selectLines: ->\n+    lastSelectionExtent = @lastSelectionRange.getExtent()\n+    for selection in @editor.getSelections()\n+      cursor = selection.cursor.getBufferPosition()\n+      selection.setBufferRange [[cursor.row, 0], [cursor.row + lastSelectionExtent.row, 0]]\n+    return\n+\n+  selectCharacters: ->\n+    lastSelectionExtent = @lastSelectionRange.getExtent()\n+    wrap = settings.wrapLeftRightMotion()\n+    for selection in @editor.getSelections()\n+      {start} = selection.getBufferRange()\n+      newEnd = start.traverse(lastSelectionExtent)\n+      selection.setBufferRange([start, newEnd])\n+\n+      if wrap\n+        columnDifference = newEnd.column - selection.getBufferRange().end.column\n+        if columnDifference > 0\n+          _.times columnDifference, -> selection.selectRight()",
        "path": "lib/motions/general-motions.coffee",
        "position": null,
        "original_position": 41,
        "commit_id": "886444f30708a03c315df3e9ecc5fbcef7b0cea9",
        "original_commit_id": "321556157f64a41eb32ea97810d62edd629ea58a",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "> I'll fix it so that vim-mode doesn't eat the newline because I find it illogical behaviour.\n\nI agree.\n",
        "created_at": "2015-08-12T21:17:37Z",
        "updated_at": "2015-08-12T21:21:10Z",
        "html_url": "https://github.com/atom/vim-mode/pull/740#discussion_r36915119",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/740",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36915119"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/740#discussion_r36915119"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/740"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36916013",
        "pull_request_review_id": null,
        "id": 36916013,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE2MDEz",
        "diff_hunk": "@@ -110,15 +110,45 @@ class Motion\n class CurrentSelection extends Motion\n   constructor: (@editor, @vimState) ->\n     super(@editor, @vimState)\n-    @selection = @editor.getSelectedBufferRanges()\n+    @lastSelectionRange = @editor.getSelectedBufferRange()\n+    @wasLinewise = @isLinewise()\n \n   execute: (count=1) ->\n     _.times(count, -> true)\n \n   select: (count=1) ->\n-    @editor.setSelectedBufferRanges(@selection)\n+    # in visual mode, the current selections are already there\n+    # if we're not in visual mode, we are repeating some operation and need to re-do the selections\n+    unless @vimState.mode is 'visual'\n+      if @wasLinewise\n+        @selectLines()\n+      else\n+        @selectCharacters()\n+\n     _.times(count, -> true)\n \n+  selectLines: ->\n+    lastSelectionExtent = @lastSelectionRange.getExtent()\n+    for selection in @editor.getSelections()\n+      cursor = selection.cursor.getBufferPosition()\n+      selection.setBufferRange [[cursor.row, 0], [cursor.row + lastSelectionExtent.row, 0]]\n+    return\n+\n+  selectCharacters: ->\n+    lastSelectionExtent = @lastSelectionRange.getExtent()\n+    wrap = settings.wrapLeftRightMotion()\n+    for selection in @editor.getSelections()\n+      {start} = selection.getBufferRange()\n+      newEnd = start.traverse(lastSelectionExtent)\n+      selection.setBufferRange([start, newEnd])\n+\n+      if wrap\n+        columnDifference = newEnd.column - selection.getBufferRange().end.column\n+        if columnDifference > 0\n+          _.times columnDifference, -> selection.selectRight()",
        "path": "lib/motions/general-motions.coffee",
        "position": null,
        "original_position": 41,
        "commit_id": "886444f30708a03c315df3e9ecc5fbcef7b0cea9",
        "original_commit_id": "321556157f64a41eb32ea97810d62edd629ea58a",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Done. \n_(noticed your reply above, edited to remove \"let me know if you should disagree with this divergence from VIM, @ maxbrunsfeld.\")_\n",
        "created_at": "2015-08-12T21:25:57Z",
        "updated_at": "2015-08-12T21:30:33Z",
        "html_url": "https://github.com/atom/vim-mode/pull/740#discussion_r36916013",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/740",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36916013"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/740#discussion_r36916013"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/740"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/37209286",
        "pull_request_review_id": null,
        "id": 37209286,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA5Mjg2",
        "diff_hunk": "@@ -18,6 +18,39 @@ describe \"Scrolling\", ->\n     options.element ?= editorElement\n     helpers.keydown(key, options)\n \n+  describe \"normal movements (sanity check for scrolling)\", ->\n+    beforeEach ->\n+      editor.setHeight(400)\n+      editor.setLineHeightInPixels(10)\n+      editor.setDefaultCharWidth(10)\n+      text = \"\"\n+      for i in [1..200]\n+        text += \"#{i}\\n\"\n+      editor.setText(text)\n+\n+    describe \"the G keybinding\", ->\n+      it \"scrolls the window\", ->\n+        editor.setCursorBufferPosition [0, 0]\n+        top0 = editor.getScrollTop()\n+\n+        editor.setCursorBufferPosition [100, 0]\n+        top100 = editor.getScrollTop()\n+        expect(top100).toBeGreaterThan(top0)\n+\n+        editor.setCursorBufferPosition [101, 0]\n+        top101 = editor.getScrollTop()\n+        expect(top101-top100).toEqual(10)\n+\n+        editor.setCursorBufferPosition [161, 0]\n+        top161 = editor.getScrollTop()\n+        expect(top161-top100).toEqual(610)\n+\n+        editor.setCursorBufferPosition [0, 0]\n+        expect(editor.getScrollTop()).toNotBe top101\n+        editor.setCursorBufferPosition [101, 0]\n+        expect(editor.getScrollTop()).toBe top101\n+\n+",
        "path": "spec/scroll-spec.coffee",
        "position": null,
        "original_position": 36,
        "commit_id": "c3455b9aae0f483a35da332d8216369825db8636",
        "original_commit_id": "616f45ec0e7f24a9f539af56dddae1bd21070cb9",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "What is this test for exactly? It seems like this behavior is covered in Atom's core test suite.\n",
        "created_at": "2015-08-17T16:55:15Z",
        "updated_at": "2015-08-17T19:55:12Z",
        "html_url": "https://github.com/atom/vim-mode/pull/591#discussion_r37209286",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/591",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/37209286"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/591#discussion_r37209286"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/591"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/37209490",
        "pull_request_review_id": null,
        "id": 37209490,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA5NDkw",
        "diff_hunk": "@@ -913,6 +926,48 @@ describe \"Operators\", ->\n         expect(vimState.getRegister('\"').text).toBe '123'\n         expect(editor.getCursorBufferPositions()).toEqual [[0, 0], [1, 2]]\n \n+    describe \"in a long file\", ->\n+      beforeEach ->\n+        editor.setHeight(400)\n+        editor.setLineHeightInPixels(10)\n+        editor.setDefaultCharWidth(10)\n+        text = \"\"\n+        for i in [1..200]\n+          text += \"#{i}\\n\"\n+        editor.setText(text)\n+\n+      describe \"yanking many lines forward\", ->\n+        it \"does not scroll the window\", ->\n+          editor.setCursorBufferPosition [40, 1]\n+          top40 = editor.getScrollTop()",
        "path": "spec/operators-spec.coffee",
        "position": null,
        "original_position": 47,
        "commit_id": "c3455b9aae0f483a35da332d8216369825db8636",
        "original_commit_id": "616f45ec0e7f24a9f539af56dddae1bd21070cb9",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "A minor aesthetic point: I think it would fit in a bit better w/ our test suite if you renamed `top40` to `previousScrollTop` (and similarly for `top140` below).\n",
        "created_at": "2015-08-17T16:57:02Z",
        "updated_at": "2015-08-17T19:55:12Z",
        "html_url": "https://github.com/atom/vim-mode/pull/591#discussion_r37209490",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/591",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/37209490"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/591#discussion_r37209490"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/591"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/37209509",
        "pull_request_review_id": null,
        "id": 37209509,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA5NTA5",
        "diff_hunk": "@@ -913,6 +926,48 @@ describe \"Operators\", ->\n         expect(vimState.getRegister('\"').text).toBe '123'\n         expect(editor.getCursorBufferPositions()).toEqual [[0, 0], [1, 2]]\n \n+    describe \"in a long file\", ->\n+      beforeEach ->\n+        editor.setHeight(400)\n+        editor.setLineHeightInPixels(10)\n+        editor.setDefaultCharWidth(10)\n+        text = \"\"\n+        for i in [1..200]\n+          text += \"#{i}\\n\"\n+        editor.setText(text)\n+\n+      describe \"yanking many lines forward\", ->\n+        it \"does not scroll the window\", ->\n+          editor.setCursorBufferPosition [40, 1]\n+          top40 = editor.getScrollTop()\n+\n+          # yank many lines\n+          keydown('y')\n+          keydown('1')\n+          keydown('6')\n+          keydown('0')\n+          keydown('G', shift: true)\n+\n+          expect(editor.getScrollTop()).toEqual(top40)\n+          expect(editor.getCursorBufferPosition()).toEqual [40, 1]\n+          expect(vimState.getRegister('\"').text.split('\\n').length).toBe 121\n+\n+      describe \"yanking many lines backwards\", ->\n+        it \"scrolls the window\", ->\n+          editor.setCursorBufferPosition [140, 1]\n+          top140 = editor.getScrollTop()\n+\n+          # yank many lines\n+          keydown('y')\n+          keydown('6')\n+          keydown('0')\n+          keydown('G', shift: true)\n+\n+          expect(editor.getScrollTop()).toNotEqual top140\n+          expect(editor.getCursorBufferPosition()).toEqual [59, 1]\n+          expect(vimState.getRegister('\"').text.split('\\n').length).toBe 83\n+\n+",
        "path": "spec/operators-spec.coffee",
        "position": null,
        "original_position": 75,
        "commit_id": "c3455b9aae0f483a35da332d8216369825db8636",
        "original_commit_id": "616f45ec0e7f24a9f539af56dddae1bd21070cb9",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Could you remove this second blank line?\n",
        "created_at": "2015-08-17T16:57:10Z",
        "updated_at": "2015-08-17T19:55:12Z",
        "html_url": "https://github.com/atom/vim-mode/pull/591#discussion_r37209509",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/591",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/37209509"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/591#discussion_r37209509"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/591"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/37228965",
        "pull_request_review_id": null,
        "id": 37228965,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI4OTY1",
        "diff_hunk": "@@ -18,6 +18,39 @@ describe \"Scrolling\", ->\n     options.element ?= editorElement\n     helpers.keydown(key, options)\n \n+  describe \"normal movements (sanity check for scrolling)\", ->\n+    beforeEach ->\n+      editor.setHeight(400)\n+      editor.setLineHeightInPixels(10)\n+      editor.setDefaultCharWidth(10)\n+      text = \"\"\n+      for i in [1..200]\n+        text += \"#{i}\\n\"\n+      editor.setText(text)\n+\n+    describe \"the G keybinding\", ->\n+      it \"scrolls the window\", ->\n+        editor.setCursorBufferPosition [0, 0]\n+        top0 = editor.getScrollTop()\n+\n+        editor.setCursorBufferPosition [100, 0]\n+        top100 = editor.getScrollTop()\n+        expect(top100).toBeGreaterThan(top0)\n+\n+        editor.setCursorBufferPosition [101, 0]\n+        top101 = editor.getScrollTop()\n+        expect(top101-top100).toEqual(10)\n+\n+        editor.setCursorBufferPosition [161, 0]\n+        top161 = editor.getScrollTop()\n+        expect(top161-top100).toEqual(610)\n+\n+        editor.setCursorBufferPosition [0, 0]\n+        expect(editor.getScrollTop()).toNotBe top101\n+        editor.setCursorBufferPosition [101, 0]\n+        expect(editor.getScrollTop()).toBe top101\n+\n+",
        "path": "spec/scroll-spec.coffee",
        "position": null,
        "original_position": 36,
        "commit_id": "c3455b9aae0f483a35da332d8216369825db8636",
        "original_commit_id": "616f45ec0e7f24a9f539af56dddae1bd21070cb9",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I guess this was a way for me to confirm my expectations; I'll remove it.\n",
        "created_at": "2015-08-17T19:51:18Z",
        "updated_at": "2015-08-17T19:55:12Z",
        "html_url": "https://github.com/atom/vim-mode/pull/591#discussion_r37228965",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/591",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/37228965"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/591#discussion_r37228965"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/591"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/37229452",
        "pull_request_review_id": null,
        "id": 37229452,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI5NDUy",
        "diff_hunk": "@@ -913,6 +926,48 @@ describe \"Operators\", ->\n         expect(vimState.getRegister('\"').text).toBe '123'\n         expect(editor.getCursorBufferPositions()).toEqual [[0, 0], [1, 2]]\n \n+    describe \"in a long file\", ->\n+      beforeEach ->\n+        editor.setHeight(400)\n+        editor.setLineHeightInPixels(10)\n+        editor.setDefaultCharWidth(10)\n+        text = \"\"\n+        for i in [1..200]\n+          text += \"#{i}\\n\"\n+        editor.setText(text)\n+\n+      describe \"yanking many lines forward\", ->\n+        it \"does not scroll the window\", ->\n+          editor.setCursorBufferPosition [40, 1]\n+          top40 = editor.getScrollTop()\n+\n+          # yank many lines\n+          keydown('y')\n+          keydown('1')\n+          keydown('6')\n+          keydown('0')\n+          keydown('G', shift: true)\n+\n+          expect(editor.getScrollTop()).toEqual(top40)\n+          expect(editor.getCursorBufferPosition()).toEqual [40, 1]\n+          expect(vimState.getRegister('\"').text.split('\\n').length).toBe 121\n+\n+      describe \"yanking many lines backwards\", ->\n+        it \"scrolls the window\", ->\n+          editor.setCursorBufferPosition [140, 1]\n+          top140 = editor.getScrollTop()\n+\n+          # yank many lines\n+          keydown('y')\n+          keydown('6')\n+          keydown('0')\n+          keydown('G', shift: true)\n+\n+          expect(editor.getScrollTop()).toNotEqual top140\n+          expect(editor.getCursorBufferPosition()).toEqual [59, 1]\n+          expect(vimState.getRegister('\"').text.split('\\n').length).toBe 83\n+\n+",
        "path": "spec/operators-spec.coffee",
        "position": null,
        "original_position": 75,
        "commit_id": "c3455b9aae0f483a35da332d8216369825db8636",
        "original_commit_id": "616f45ec0e7f24a9f539af56dddae1bd21070cb9",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I removed other double blank lines too, is that desirable?\n",
        "created_at": "2015-08-17T19:56:04Z",
        "updated_at": "2015-08-17T19:56:04Z",
        "html_url": "https://github.com/atom/vim-mode/pull/591#discussion_r37229452",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/591",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/37229452"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/591#discussion_r37229452"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/591"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/37211305",
        "pull_request_review_id": null,
        "id": 37211305,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjExMzA1",
        "diff_hunk": "@@ -55,7 +51,10 @@ class VimNormalModeInputElement extends HTMLDivElement\n \n   removePanel: ->\n     atom.workspace.getActivePane().activate()\n-    @panel.destroy()\n+    if @panel?\n+      @panel.destroy()\n+    else\n+      this.parentNode.removeChild(this) if this.parentNode?",
        "path": "lib/view-models/vim-normal-mode-input-element.coffee",
        "position": null,
        "original_position": 45,
        "commit_id": "8e93e8b425d711ab26619471a9fb0f269d27b0cd",
        "original_commit_id": "1a064a017face1c982d5c2a513670280c3dddc4c",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "I think you can avoid a conditional by using [`this.remove()`](https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/remove).\n",
        "created_at": "2015-08-17T17:14:06Z",
        "updated_at": "2015-08-17T20:33:47Z",
        "html_url": "https://github.com/atom/vim-mode/pull/777#discussion_r37211305",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/777",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/37211305"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/777#discussion_r37211305"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/777"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/37211486",
        "pull_request_review_id": null,
        "id": 37211486,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjExNDg2",
        "diff_hunk": "@@ -23,18 +23,19 @@ describe \"Operators\", ->\n     editor.normalModeInputView.editorElement.getModel().setText(key)\n \n   describe \"cancelling operations\", ->\n-    it \"does not throw an error even if no operation is pending\", ->\n+    it \"would throw an error when no operation is pending\", ->",
        "path": "spec/operators-spec.coffee",
        "position": null,
        "original_position": 5,
        "commit_id": "8e93e8b425d711ab26619471a9fb0f269d27b0cd",
        "original_commit_id": "1a064a017face1c982d5c2a513670280c3dddc4c",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Thanks for catching this wrong description. I think it's better to simply say `it \"throws an error` rather than `it \"would throw an error`.\n",
        "created_at": "2015-08-17T17:16:03Z",
        "updated_at": "2015-08-17T20:33:47Z",
        "html_url": "https://github.com/atom/vim-mode/pull/777#discussion_r37211486",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/777",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/37211486"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/777#discussion_r37211486"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/777"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/37233299",
        "pull_request_review_id": null,
        "id": 37233299,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMzMjk5",
        "diff_hunk": "@@ -55,7 +51,10 @@ class VimNormalModeInputElement extends HTMLDivElement\n \n   removePanel: ->\n     atom.workspace.getActivePane().activate()\n-    @panel.destroy()\n+    if @panel?\n+      @panel.destroy()\n+    else\n+      this.parentNode.removeChild(this) if this.parentNode?",
        "path": "lib/view-models/vim-normal-mode-input-element.coffee",
        "position": null,
        "original_position": 45,
        "commit_id": "8e93e8b425d711ab26619471a9fb0f269d27b0cd",
        "original_commit_id": "1a064a017face1c982d5c2a513670280c3dddc4c",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I keep forgetting about that one...\n",
        "created_at": "2015-08-17T20:33:03Z",
        "updated_at": "2015-08-17T20:33:47Z",
        "html_url": "https://github.com/atom/vim-mode/pull/777#discussion_r37233299",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/777",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/37233299"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/777#discussion_r37233299"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/777"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/35058089",
        "pull_request_review_id": null,
        "id": 35058089,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MDU4MDg5",
        "diff_hunk": "@@ -680,6 +680,88 @@ describe \"Operators\", ->\n           keydown('escape')\n           expect(editor.getText()).toBe(\"12345\\n\\n\")\n \n+    describe \"when followed by a %\", ->\n+      beforeEach ->\n+        editor.setText(\"12345(67)8\\nabc(d)e\\nA()BCDE\")\n+\n+      describe \"before brackets or on the first one\", ->\n+        it \"replaces inclusively until matching bracket\", ->\n+          editor.setCursorScreenPosition([0, 1])\n+          editor.addCursorAtScreenPosition([1, 1])\n+          editor.addCursorAtScreenPosition([2, 1])\n+          keydown('c')\n+          keydown('%')\n+          editor.insertText('x')\n+          expect(editor.getText()).toBe(\"1x8\\naxe\\nAxBCDE\")\n+          expect(vimState.mode).toBe \"insert\"\n+\n+      describe \"inside brackets or on the ending one\", ->\n+        it \"replaces inclusively backwards until matching bracket\", ->\n+          editor.setCursorScreenPosition([0, 6])\n+          editor.addCursorAtScreenPosition([1, 5])\n+          editor.addCursorAtScreenPosition([2, 2])\n+          keydown('c')\n+          keydown('%')\n+          editor.insertText('x')\n+          expect(editor.getText()).toBe(\"12345x7)8\\nabcxe\\nAxBCDE\")\n+          expect(vimState.mode).toBe \"insert\"\n+\n+      describe \"after or without brackets\", ->\n+        it \"deletes nothing\", ->\n+          editor.setText(\"12345(67)8\\nabc(d)e\\nABCDE\")\n+          editor.setCursorScreenPosition([0, 9])\n+          editor.addCursorAtScreenPosition([2, 2])\n+          keydown('c')\n+          keydown('%')\n+          expect(editor.getText()).toBe(\"12345(67)8\\nabc(d)e\\nABCDE\")\n+          # differs from VIM, fixed in #774\n+          expect(vimState.mode).toBe \"insert\"\n+\n+      describe \"repeats correctly with .\", ->",
        "path": "spec/operators-spec.coffee",
        "position": null,
        "original_position": 41,
        "commit_id": "2698424da13067c73c78900263d319dfc3392cc8",
        "original_commit_id": "1771a972e6fd7812f057c597f88deb9843751c49",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Maybe this should say something general, like `describe \"repetition and undo\", ->`.\n",
        "created_at": "2015-07-20T23:58:33Z",
        "updated_at": "2015-08-17T22:44:23Z",
        "html_url": "https://github.com/atom/vim-mode/pull/783#discussion_r35058089",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/783",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/35058089"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/783#discussion_r35058089"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/783"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/35090052",
        "pull_request_review_id": null,
        "id": 35090052,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MDkwMDUy",
        "diff_hunk": "@@ -680,6 +680,88 @@ describe \"Operators\", ->\n           keydown('escape')\n           expect(editor.getText()).toBe(\"12345\\n\\n\")\n \n+    describe \"when followed by a %\", ->\n+      beforeEach ->\n+        editor.setText(\"12345(67)8\\nabc(d)e\\nA()BCDE\")\n+\n+      describe \"before brackets or on the first one\", ->\n+        it \"replaces inclusively until matching bracket\", ->\n+          editor.setCursorScreenPosition([0, 1])\n+          editor.addCursorAtScreenPosition([1, 1])\n+          editor.addCursorAtScreenPosition([2, 1])\n+          keydown('c')\n+          keydown('%')\n+          editor.insertText('x')\n+          expect(editor.getText()).toBe(\"1x8\\naxe\\nAxBCDE\")\n+          expect(vimState.mode).toBe \"insert\"\n+\n+      describe \"inside brackets or on the ending one\", ->\n+        it \"replaces inclusively backwards until matching bracket\", ->\n+          editor.setCursorScreenPosition([0, 6])\n+          editor.addCursorAtScreenPosition([1, 5])\n+          editor.addCursorAtScreenPosition([2, 2])\n+          keydown('c')\n+          keydown('%')\n+          editor.insertText('x')\n+          expect(editor.getText()).toBe(\"12345x7)8\\nabcxe\\nAxBCDE\")\n+          expect(vimState.mode).toBe \"insert\"\n+\n+      describe \"after or without brackets\", ->\n+        it \"deletes nothing\", ->\n+          editor.setText(\"12345(67)8\\nabc(d)e\\nABCDE\")\n+          editor.setCursorScreenPosition([0, 9])\n+          editor.addCursorAtScreenPosition([2, 2])\n+          keydown('c')\n+          keydown('%')\n+          expect(editor.getText()).toBe(\"12345(67)8\\nabc(d)e\\nABCDE\")\n+          # differs from VIM, fixed in #774\n+          expect(vimState.mode).toBe \"insert\"\n+\n+      describe \"repeats correctly with .\", ->",
        "path": "spec/operators-spec.coffee",
        "position": null,
        "original_position": 41,
        "commit_id": "2698424da13067c73c78900263d319dfc3392cc8",
        "original_commit_id": "1771a972e6fd7812f057c597f88deb9843751c49",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "quite right, sorry, don't know what happened there; restructured now.\n",
        "created_at": "2015-07-21T10:44:51Z",
        "updated_at": "2015-08-17T22:44:23Z",
        "html_url": "https://github.com/atom/vim-mode/pull/783#discussion_r35090052",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/783",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/35090052"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/783#discussion_r35090052"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/783"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/37797547",
        "pull_request_review_id": null,
        "id": 37797547,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3NTQ3",
        "diff_hunk": "@@ -119,7 +119,7 @@ class ToggleCase extends Operator\n         for cursor in @editor.getCursors()\n           point = cursor.getBufferPosition()\n           lineLength = @editor.lineTextForBufferRow(point.row).length\n-          cursorCount = Math.min(count, lineLength - point.column)\n+          cursorCount = Math.min(count ? 1, lineLength - point.column)",
        "path": "lib/operators/general-operators.coffee",
        "position": 14,
        "original_position": 14,
        "commit_id": "3bde78b160b7846023321f9e614aa97d15c85a9b",
        "original_commit_id": "3bde78b160b7846023321f9e614aa97d15c85a9b",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Why do this, rather than use a default argument value like before?\n",
        "created_at": "2015-08-24T20:04:33Z",
        "updated_at": "2015-08-24T20:04:33Z",
        "html_url": "https://github.com/atom/vim-mode/pull/839#discussion_r37797547",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/839",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/37797547"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/839#discussion_r37797547"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/839"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/37797639",
        "pull_request_review_id": null,
        "id": 37797639,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3NjM5",
        "diff_hunk": "@@ -119,7 +119,7 @@ class ToggleCase extends Operator\n         for cursor in @editor.getCursors()\n           point = cursor.getBufferPosition()\n           lineLength = @editor.lineTextForBufferRow(point.row).length\n-          cursorCount = Math.min(count, lineLength - point.column)\n+          cursorCount = Math.min(count ? 1, lineLength - point.column)",
        "path": "lib/operators/general-operators.coffee",
        "position": 14,
        "original_position": 14,
        "commit_id": "3bde78b160b7846023321f9e614aa97d15c85a9b",
        "original_commit_id": "3bde78b160b7846023321f9e614aa97d15c85a9b",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "because here, `count` is also used in `@motion.select(count)` where a default was the problem.\n",
        "created_at": "2015-08-24T20:05:36Z",
        "updated_at": "2015-08-24T20:05:36Z",
        "html_url": "https://github.com/atom/vim-mode/pull/839#discussion_r37797639",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/839",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/37797639"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/839#discussion_r37797639"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/839"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/37900838",
        "pull_request_review_id": null,
        "id": 37900838,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAwODM4",
        "diff_hunk": "@@ -661,15 +650,26 @@ class VimState\n     text = @getRegister(name)?.text\n     @editor.insertText(text) if text?\n \n-  ensureCursorIsWithinLine: (cursor) =>\n-    return if @processing or @mode isnt 'normal'\n+  # Private: ensure the mode follows the state of selections\n+  checkSelections: =>\n+    return unless @editor?\n+    if @editor.getSelections().every((selection) -> selection.isEmpty())\n+      @ensureCursorsWithinLine() if @mode is 'normal'",
        "path": "lib/vim-state.coffee",
        "position": 114,
        "original_position": 114,
        "commit_id": "d4efc7d6ad12d5e4e72bc07b843a1f176d69eb14",
        "original_commit_id": "6a58be2aae1091b88d48f7cdfb2979e946372a4d",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "It looks like you can remove the `if @mode is 'normal'` here, since `::ensureCursorsWithinLine` internally guards that the mode is normal.\n",
        "created_at": "2015-08-25T18:26:05Z",
        "updated_at": "2015-08-25T20:00:54Z",
        "html_url": "https://github.com/atom/vim-mode/pull/827#discussion_r37900838",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/827",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/37900838"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/827#discussion_r37900838"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/827"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/37912019",
        "pull_request_review_id": null,
        "id": 37912019,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyMDE5",
        "diff_hunk": "@@ -661,15 +650,26 @@ class VimState\n     text = @getRegister(name)?.text\n     @editor.insertText(text) if text?\n \n-  ensureCursorIsWithinLine: (cursor) =>\n-    return if @processing or @mode isnt 'normal'\n+  # Private: ensure the mode follows the state of selections\n+  checkSelections: =>\n+    return unless @editor?\n+    if @editor.getSelections().every((selection) -> selection.isEmpty())\n+      @ensureCursorsWithinLine() if @mode is 'normal'",
        "path": "lib/vim-state.coffee",
        "position": 114,
        "original_position": 114,
        "commit_id": "d4efc7d6ad12d5e4e72bc07b843a1f176d69eb14",
        "original_commit_id": "6a58be2aae1091b88d48f7cdfb2979e946372a4d",
        "user": {
            "login": "jacekkopecky",
            "id": 807315,
            "node_id": "MDQ6VXNlcjgwNzMxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/807315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacekkopecky",
            "html_url": "https://github.com/jacekkopecky",
            "followers_url": "https://api.github.com/users/jacekkopecky/followers",
            "following_url": "https://api.github.com/users/jacekkopecky/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacekkopecky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacekkopecky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacekkopecky/subscriptions",
            "organizations_url": "https://api.github.com/users/jacekkopecky/orgs",
            "repos_url": "https://api.github.com/users/jacekkopecky/repos",
            "events_url": "https://api.github.com/users/jacekkopecky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacekkopecky/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "quite right; in fact, now it's the check in `ensureCursorIsWithinLine` that's no longer necessary so I removed that one instead.\n",
        "created_at": "2015-08-25T20:01:30Z",
        "updated_at": "2015-08-25T20:01:30Z",
        "html_url": "https://github.com/atom/vim-mode/pull/827#discussion_r37912019",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/827",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/37912019"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/827#discussion_r37912019"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/827"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36039776",
        "pull_request_review_id": null,
        "id": 36039776,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MDM5Nzc2",
        "diff_hunk": "@@ -164,28 +164,232 @@ describe \"TextObjects\", ->\n       expect(editorElement.classList.contains('normal-mode')).toBe(true)\n \n   describe \"the 'it' text object\", ->\n+\n     beforeEach ->\n-      editor.setText(\"<something>here</something><again>\")\n-      editor.setCursorScreenPosition([0, 5])\n+      editor.setText('clean')\n+      editor.setCursorBufferPosition([0, 0])\n+      keydown('y')\n+      keydown('i')\n+      keydown('w')\n+      expect(vimState.getRegister('\"').text).toBe('clean')",
        "path": "spec/text-objects-spec.coffee",
        "position": null,
        "original_position": 13,
        "commit_id": "13a7bd836b0d2295ad9084dababdca8e4a466eae",
        "original_commit_id": "c2c247420dd1b989a8c3129933e28586092dc9cb",
        "user": {
            "login": "bronson",
            "id": 1776,
            "node_id": "MDQ6VXNlcjE3NzY=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1776?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bronson",
            "html_url": "https://github.com/bronson",
            "followers_url": "https://api.github.com/users/bronson/followers",
            "following_url": "https://api.github.com/users/bronson/following{/other_user}",
            "gists_url": "https://api.github.com/users/bronson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bronson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bronson/subscriptions",
            "organizations_url": "https://api.github.com/users/bronson/orgs",
            "repos_url": "https://api.github.com/users/bronson/repos",
            "events_url": "https://api.github.com/users/bronson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bronson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I don't understand this...?  Looks like you're testing yanking inside a word before each inner tag test?\n",
        "created_at": "2015-08-02T05:47:25Z",
        "updated_at": "2015-09-25T15:50:59Z",
        "html_url": "https://github.com/atom/vim-mode/pull/795#discussion_r36039776",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/795",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36039776"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/795#discussion_r36039776"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/795"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36040897",
        "pull_request_review_id": null,
        "id": 36040897,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MDQwODk3",
        "diff_hunk": "@@ -164,28 +164,232 @@ describe \"TextObjects\", ->\n       expect(editorElement.classList.contains('normal-mode')).toBe(true)\n \n   describe \"the 'it' text object\", ->\n+\n     beforeEach ->\n-      editor.setText(\"<something>here</something><again>\")\n-      editor.setCursorScreenPosition([0, 5])\n+      editor.setText('clean')\n+      editor.setCursorBufferPosition([0, 0])\n+      keydown('y')\n+      keydown('i')\n+      keydown('w')\n+      expect(vimState.getRegister('\"').text).toBe('clean')",
        "path": "spec/text-objects-spec.coffee",
        "position": null,
        "original_position": 13,
        "commit_id": "13a7bd836b0d2295ad9084dababdca8e4a466eae",
        "original_commit_id": "c2c247420dd1b989a8c3129933e28586092dc9cb",
        "user": {
            "login": "MarkusSN",
            "id": 1663348,
            "node_id": "MDQ6VXNlcjE2NjMzNDg=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1663348?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MarkusSN",
            "html_url": "https://github.com/MarkusSN",
            "followers_url": "https://api.github.com/users/MarkusSN/followers",
            "following_url": "https://api.github.com/users/MarkusSN/following{/other_user}",
            "gists_url": "https://api.github.com/users/MarkusSN/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/MarkusSN/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/MarkusSN/subscriptions",
            "organizations_url": "https://api.github.com/users/MarkusSN/orgs",
            "repos_url": "https://api.github.com/users/MarkusSN/repos",
            "events_url": "https://api.github.com/users/MarkusSN/events{/privacy}",
            "received_events_url": "https://api.github.com/users/MarkusSN/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Lol, I understand the confusion. I just wanted to make sure that I reset the register before each test, and that was the first thing I came up with. The plan was to find a better way to set the value in the register, but I obviously forgot :)\n",
        "created_at": "2015-08-02T08:30:47Z",
        "updated_at": "2015-09-25T15:50:59Z",
        "html_url": "https://github.com/atom/vim-mode/pull/795#discussion_r36040897",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/795",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/36040897"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/795#discussion_r36040897"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/795"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/40614447",
        "pull_request_review_id": null,
        "id": 40614447,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0NDQ3",
        "diff_hunk": "@@ -1,46 +1,35 @@\n ## Vim Mode package [![Build Status](https://travis-ci.org/atom/vim-mode.svg?branch=master)](https://travis-ci.org/atom/vim-mode)\n \n-Provides vim modal control for Atom, ideally blending the best of vim\n-and Atom.\n+Provides Vim modal control for Atom, blending the best of Vim and Atom.\n \n-### Installing\n+### Current Status\n \n-Use the Atom package manager, which can be found in the Settings view or\n-run `apm install vim-mode` from the command line.\n+Sizable portions of Vim work as you'd expect, including many complex combinations.\n+Even so, this package is far from finished (Vim wasn't built in a day).\n \n-### Current Status\n+If there's a feature of Vim you're missing, it might just be that you use it more often than other developers. Adding a feature can be quick and easy. Check out the [closed pull requests][prs] to see examples of community contributions, and look at the [issues][issues] to see if anyone has already solved your problem.\n \n-Sizable portions of Vim's normal mode work as you'd expect, including\n-many complex combinations. Even so, this package is far from finished (Vim\n-wasn't built in a day).\n+[prs]: https://github.com/atom/vim-mode/pulls?direction=desc&page=1&sort=created&state=closed",
        "path": "README.md",
        "position": 21,
        "original_position": 21,
        "commit_id": "235c861a98887b11a0bf2095f899c1115c2903f6",
        "original_commit_id": "235c861a98887b11a0bf2095f899c1115c2903f6",
        "user": {
            "login": "50Wliu",
            "id": 2766036,
            "node_id": "MDQ6VXNlcjI3NjYwMzY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/2766036?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/50Wliu",
            "html_url": "https://github.com/50Wliu",
            "followers_url": "https://api.github.com/users/50Wliu/followers",
            "following_url": "https://api.github.com/users/50Wliu/following{/other_user}",
            "gists_url": "https://api.github.com/users/50Wliu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/50Wliu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/50Wliu/subscriptions",
            "organizations_url": "https://api.github.com/users/50Wliu/orgs",
            "repos_url": "https://api.github.com/users/50Wliu/repos",
            "events_url": "https://api.github.com/users/50Wliu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/50Wliu/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Nit: This could probably be `&state=merged` instead to weed out the non-merged PRs.\n",
        "created_at": "2015-09-28T22:32:01Z",
        "updated_at": "2015-09-28T22:32:01Z",
        "html_url": "https://github.com/atom/vim-mode/pull/874#discussion_r40614447",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/874",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/40614447"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/874#discussion_r40614447"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/874"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/40767507",
        "pull_request_review_id": null,
        "id": 40767507,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3NTA3",
        "diff_hunk": "@@ -58,7 +58,7 @@ keydown = (key, {element, ctrl, shift, alt, meta, raw}={}) ->\n   key = \"U+#{key.charCodeAt(0).toString(16)}\" unless key is 'escape' or raw?\n   element ||= document.activeElement\n   eventArgs = [\n-    true, # bubbles\n+    false, # bubbles",
        "path": "spec/spec-helper.coffee",
        "position": 25,
        "original_position": 25,
        "commit_id": "6165b664098b5ba30860451bee64fb8464022480",
        "original_commit_id": "9feecab42a32ed1c47b26da045e7ed37e433c086",
        "user": {
            "login": "as-cii",
            "id": 482957,
            "node_id": "MDQ6VXNlcjQ4Mjk1Nw==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/482957?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/as-cii",
            "html_url": "https://github.com/as-cii",
            "followers_url": "https://api.github.com/users/as-cii/followers",
            "following_url": "https://api.github.com/users/as-cii/following{/other_user}",
            "gists_url": "https://api.github.com/users/as-cii/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/as-cii/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/as-cii/subscriptions",
            "organizations_url": "https://api.github.com/users/as-cii/orgs",
            "repos_url": "https://api.github.com/users/as-cii/repos",
            "events_url": "https://api.github.com/users/as-cii/events{/privacy}",
            "received_events_url": "https://api.github.com/users/as-cii/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Please, note that I had to disable bubbling here because, for some reason, events were being fired twice. I guess this has something to do with attaching the element to the DOM but I haven't quite understood exactly what was causing it.\n\n@maxbrunsfeld: I guess I can have a second look if you think it's needed, but this change didn't seem that bad either. \n",
        "created_at": "2015-09-30T08:02:51Z",
        "updated_at": "2015-09-30T16:25:03Z",
        "html_url": "https://github.com/atom/vim-mode/pull/877#discussion_r40767507",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/877",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/40767507"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/877#discussion_r40767507"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/877"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/41673367",
        "pull_request_review_id": null,
        "id": 41673367,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjczMzY3",
        "diff_hunk": "@@ -316,6 +316,55 @@ describe \"Motions\", ->\n         it \"selects to the end of the current word\", ->\n           expect(vimState.getRegister('\"').text).toBe 'ab  cde1+-'\n \n+  describe \"the ) keybinding\", ->\n+    beforeEach ->\n+      editor.setText \"This is a sentence. This is a second sentence.\\nThis is a third sentence.\\n\\nThis sentence is past the paragraph boundary.\"\n+      editor.setCursorBufferPosition [0, 0]\n+\n+    describe \"as a motion\", ->\n+      it \"moves the cursor to the beginning of the next sentence\", ->\n+        keydown ')'\n+        expect(editor.getCursorBufferPosition()).toEqual [0, 20]\n+\n+        keydown ')'\n+        expect(editor.getCursorBufferPosition()).toEqual [1, 0]\n+\n+        keydown ')'\n+        expect(editor.getCursorBufferPosition()).toEqual [2, 0]\n+\n+    describe \"as a selection\", ->\n+      beforeEach ->\n+        keydown('y')\n+        keydown(')')\n+\n+      it 'selects to the start of the next sentence', ->\n+        expect(vimState.getRegister('\"').text).toBe \"This is a sentence. \"\n+\n+  describe \"the ( keybinding\", ->\n+    beforeEach ->\n+      editor.setText \"This first sentence is in its own paragraph.\\n\\nThis is a sentence. This is a second sentence.\\nThis is a third sentence\"\n+      editor.setCursorBufferPosition [3, 0]\n+\n+    describe \"as a motion\", ->\n+      it \"moves the cursor to the beginning of the previous sentence\", ->\n+        keydown '('\n+        expect(editor.getCursorBufferPosition()).toEqual [2, 20]\n+\n+        keydown '('\n+        expect(editor.getCursorBufferPosition()).toEqual [2, 0]\n+\n+        keydown '('\n+        expect(editor.getCursorBufferPosition()).toEqual [1, 0]\n+\n+",
        "path": "spec/motions-spec.coffee",
        "position": 44,
        "original_position": 44,
        "commit_id": "74550bfb7294761ece467b4e74502ed8b8408a91",
        "original_commit_id": "74550bfb7294761ece467b4e74502ed8b8408a91",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Could you remove this second blank line?\n",
        "created_at": "2015-10-09T20:16:31Z",
        "updated_at": "2015-10-09T20:16:31Z",
        "html_url": "https://github.com/atom/vim-mode/pull/886#discussion_r41673367",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/886",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/41673367"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/886#discussion_r41673367"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/886"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/41673569",
        "pull_request_review_id": null,
        "id": 41673569,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjczNTY5",
        "diff_hunk": "@@ -289,6 +289,36 @@ class MoveToEndOfWord extends Motion\n class MoveToEndOfWholeWord extends MoveToEndOfWord\n   wordRegex: WholeWordRegex\n \n+class MoveToNextSentence extends Motion\n+  moveCursor: (cursor, count=1) ->\n+    _.times count, ->\n+      start = cursor.getBufferPosition().translate new Point(0, 1)\n+      eof = cursor.editor.getBuffer().getEndPosition()\n+      scanRange = [start, eof]\n+\n+      cursor.editor.scanInBufferRange /(^$)|(([\\.!?] )|^[A-Za-z0-9])/, scanRange, ({matchText, range, stop}) ->",
        "path": "lib/motions/general-motions.coffee",
        "position": 11,
        "original_position": 11,
        "commit_id": "74550bfb7294761ece467b4e74502ed8b8408a91",
        "original_commit_id": "74550bfb7294761ece467b4e74502ed8b8408a91",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Could you explain why `^[A-Za-z0-9]` is included here? I would think that we would just want to scan for sentence punctuation (`.`, `?`, `!`) and empty lines.\n",
        "created_at": "2015-10-09T20:18:25Z",
        "updated_at": "2015-10-09T20:18:40Z",
        "html_url": "https://github.com/atom/vim-mode/pull/886#discussion_r41673569",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/886",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/41673569"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/886#discussion_r41673569"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/886"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/41673798",
        "pull_request_review_id": null,
        "id": 41673798,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjczNzk4",
        "diff_hunk": "@@ -289,6 +289,36 @@ class MoveToEndOfWord extends Motion\n class MoveToEndOfWholeWord extends MoveToEndOfWord\n   wordRegex: WholeWordRegex\n \n+class MoveToNextSentence extends Motion\n+  moveCursor: (cursor, count=1) ->\n+    _.times count, ->\n+      start = cursor.getBufferPosition().translate new Point(0, 1)\n+      eof = cursor.editor.getBuffer().getEndPosition()\n+      scanRange = [start, eof]\n+\n+      cursor.editor.scanInBufferRange /(^$)|(([\\.!?] )|^[A-Za-z0-9])/, scanRange, ({matchText, range, stop}) ->",
        "path": "lib/motions/general-motions.coffee",
        "position": 11,
        "original_position": 11,
        "commit_id": "74550bfb7294761ece467b4e74502ed8b8408a91",
        "original_commit_id": "74550bfb7294761ece467b4e74502ed8b8408a91",
        "user": {
            "login": "jonasws",
            "id": 2318955,
            "node_id": "MDQ6VXNlcjIzMTg5NTU=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2318955?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jonasws",
            "html_url": "https://github.com/jonasws",
            "followers_url": "https://api.github.com/users/jonasws/followers",
            "following_url": "https://api.github.com/users/jonasws/following{/other_user}",
            "gists_url": "https://api.github.com/users/jonasws/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jonasws/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jonasws/subscriptions",
            "organizations_url": "https://api.github.com/users/jonasws/orgs",
            "repos_url": "https://api.github.com/users/jonasws/repos",
            "events_url": "https://api.github.com/users/jonasws/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jonasws/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I figured I wanted to follow the definition of a sentence, but you may well be  right that it's a bit overkill.\n",
        "created_at": "2015-10-09T20:20:54Z",
        "updated_at": "2015-10-09T20:20:54Z",
        "html_url": "https://github.com/atom/vim-mode/pull/886#discussion_r41673798",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/886",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/41673798"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/886#discussion_r41673798"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/886"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/41675075",
        "pull_request_review_id": null,
        "id": 41675075,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc1MDc1",
        "diff_hunk": "@@ -289,6 +289,36 @@ class MoveToEndOfWord extends Motion\n class MoveToEndOfWholeWord extends MoveToEndOfWord\n   wordRegex: WholeWordRegex\n \n+class MoveToNextSentence extends Motion\n+  moveCursor: (cursor, count=1) ->\n+    _.times count, ->\n+      start = cursor.getBufferPosition().translate new Point(0, 1)\n+      eof = cursor.editor.getBuffer().getEndPosition()\n+      scanRange = [start, eof]\n+\n+      cursor.editor.scanInBufferRange /(^$)|(([\\.!?] )|^[A-Za-z0-9])/, scanRange, ({matchText, range, stop}) ->",
        "path": "lib/motions/general-motions.coffee",
        "position": 11,
        "original_position": 11,
        "commit_id": "74550bfb7294761ece467b4e74502ed8b8408a91",
        "original_commit_id": "74550bfb7294761ece467b4e74502ed8b8408a91",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Oh I see; that make sense. :+1:\n",
        "created_at": "2015-10-09T20:34:23Z",
        "updated_at": "2015-10-09T20:34:23Z",
        "html_url": "https://github.com/atom/vim-mode/pull/886#discussion_r41675075",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/886",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/41675075"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/886#discussion_r41675075"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/886"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/41675136",
        "pull_request_review_id": null,
        "id": 41675136,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc1MTM2",
        "diff_hunk": "@@ -289,6 +289,36 @@ class MoveToEndOfWord extends Motion\n class MoveToEndOfWholeWord extends MoveToEndOfWord\n   wordRegex: WholeWordRegex\n \n+class MoveToNextSentence extends Motion\n+  moveCursor: (cursor, count=1) ->\n+    _.times count, ->\n+      start = cursor.getBufferPosition().translate new Point(0, 1)\n+      eof = cursor.editor.getBuffer().getEndPosition()\n+      scanRange = [start, eof]\n+\n+      cursor.editor.scanInBufferRange /(^$)|(([\\.!?] )|^[A-Za-z0-9])/, scanRange, ({matchText, range, stop}) ->",
        "path": "lib/motions/general-motions.coffee",
        "position": 11,
        "original_position": 11,
        "commit_id": "74550bfb7294761ece467b4e74502ed8b8408a91",
        "original_commit_id": "74550bfb7294761ece467b4e74502ed8b8408a91",
        "user": {
            "login": "jonasws",
            "id": 2318955,
            "node_id": "MDQ6VXNlcjIzMTg5NTU=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2318955?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jonasws",
            "html_url": "https://github.com/jonasws",
            "followers_url": "https://api.github.com/users/jonasws/followers",
            "following_url": "https://api.github.com/users/jonasws/following{/other_user}",
            "gists_url": "https://api.github.com/users/jonasws/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jonasws/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jonasws/subscriptions",
            "organizations_url": "https://api.github.com/users/jonasws/orgs",
            "repos_url": "https://api.github.com/users/jonasws/repos",
            "events_url": "https://api.github.com/users/jonasws/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jonasws/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Also, after some testing, I've discovered that it is necessary to search for some character (maybe just a printable non-whitespace character) in order to accomplish the \"next sentence on next line\" edge case. I'm still looking to see if we don't need the A-Za-z or similar character sequence, but no luck so far.\n",
        "created_at": "2015-10-09T20:34:59Z",
        "updated_at": "2015-10-09T20:34:59Z",
        "html_url": "https://github.com/atom/vim-mode/pull/886#discussion_r41675136",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/886",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/41675136"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/886#discussion_r41675136"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/886"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/41676111",
        "pull_request_review_id": null,
        "id": 41676111,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc2MTEx",
        "diff_hunk": "@@ -289,6 +289,36 @@ class MoveToEndOfWord extends Motion\n class MoveToEndOfWholeWord extends MoveToEndOfWord\n   wordRegex: WholeWordRegex\n \n+class MoveToNextSentence extends Motion\n+  moveCursor: (cursor, count=1) ->\n+    _.times count, ->\n+      start = cursor.getBufferPosition().translate new Point(0, 1)\n+      eof = cursor.editor.getBuffer().getEndPosition()\n+      scanRange = [start, eof]\n+\n+      cursor.editor.scanInBufferRange /(^$)|(([\\.!?] )|^[A-Za-z0-9])/, scanRange, ({matchText, range, stop}) ->",
        "path": "lib/motions/general-motions.coffee",
        "position": 11,
        "original_position": 11,
        "commit_id": "74550bfb7294761ece467b4e74502ed8b8408a91",
        "original_commit_id": "74550bfb7294761ece467b4e74502ed8b8408a91",
        "user": {
            "login": "jonasws",
            "id": 2318955,
            "node_id": "MDQ6VXNlcjIzMTg5NTU=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2318955?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jonasws",
            "html_url": "https://github.com/jonasws",
            "followers_url": "https://api.github.com/users/jonasws/followers",
            "following_url": "https://api.github.com/users/jonasws/following{/other_user}",
            "gists_url": "https://api.github.com/users/jonasws/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jonasws/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jonasws/subscriptions",
            "organizations_url": "https://api.github.com/users/jonasws/orgs",
            "repos_url": "https://api.github.com/users/jonasws/repos",
            "events_url": "https://api.github.com/users/jonasws/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jonasws/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Update on testing. Could not correctly implement the behavior when removing the letters from the regex. I'd suggest it could go as an improvement for a later PR.\n",
        "created_at": "2015-10-09T20:45:57Z",
        "updated_at": "2015-10-09T20:45:57Z",
        "html_url": "https://github.com/atom/vim-mode/pull/886#discussion_r41676111",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/886",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/41676111"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/886#discussion_r41676111"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/886"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/43696337",
        "pull_request_review_id": null,
        "id": 43696337,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk2MzM3",
        "diff_hunk": "@@ -451,54 +451,50 @@ class MoveToMiddleOfScreen extends MoveToScreenLine\n     height = lastScreenRow - firstScreenRow\n     Math.floor(firstScreenRow + (height / 2))\n \n-class ScrollKeepingCursor extends MoveToLine\n-  previousFirstScreenRow: 0\n-  currentFirstScreenRow: 0\n+class ScrollKeepingCursor extends Motion\n+  operatesLinewise: true\n+  cursorRow: null\n \n   constructor: (@editorElement, @vimState) ->\n     super(@editorElement.getModel(), @vimState)\n \n   select: (count, options) ->\n-    finalDestination = @scrollScreen(count)\n+    scrollTop = @scrollScreen(count)\n     super(count, options)\n-    @editorElement.setScrollTop(finalDestination)\n+    @editorElement.setScrollTop(scrollTop)\n \n   execute: (count) ->\n-    finalDestination = @scrollScreen(count)\n+    scrollTop = @scrollScreen(count)\n     super(count)\n-    @editorElement.setScrollTop(finalDestination)\n+    @editorElement.setScrollTop(scrollTop)\n \n-  moveCursor: (cursor, count=1) ->\n-    cursor.setScreenPosition([@getDestinationRow(count), 0])\n-\n-  getDestinationRow: (count) ->\n-    {row, column} = @editor.getCursorScreenPosition()\n-    @currentFirstScreenRow - @previousFirstScreenRow + row\n+  moveCursor: (cursor) ->\n+    cursor.setScreenPosition(Point(@cursorRow, 0), autoscroll: false)\n \n   scrollScreen: (count=1) ->\n-    @previousFirstScreenRow = @editorElement.getFirstVisibleScreenRow()\n-    destination = @scrollDestination(count)\n-    @editorElement.setScrollTop(destination)\n-    @currentFirstScreenRow = @editorElement.getFirstVisibleScreenRow()\n-    destination\n+    # TODO: We need to create an API for reading an editor's logical scroll\n+    # position which may not yet have been flushed to the DOM. Currently, the\n+    # only way to access this information is through this piece of private state.\n+    currentScrollTop = @editorElement.component.presenter.pendingScrollTop ? @editorElement.getScrollTop()",
        "path": "lib/motions/general-motions.coffee",
        "position": 46,
        "original_position": 46,
        "commit_id": "3e43a41ad61d5dbf84c4d501bae0b0726ea93026",
        "original_commit_id": "3e43a41ad61d5dbf84c4d501bae0b0726ea93026",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "/cc @nathansobo @as-cii \n\nIn this command, we're trying to read the editor's current scroll position, and update it accordingly. The problem is that if we run this command rapidly (e.g. holding down `ctrl-f`), calls to `TextEditorElement::getScrollTop()` will not reflect the value that was previously set via `::setScrollTop()`, because a DOM update hasn't happened yet.\n\nCan you think of an easier way to do this? If not, maybe we need to add an API on `TextEditorElement` for accessing its current _desired_ scroll position (i.e. the last value passed to `::setScrollTop`).\n",
        "created_at": "2015-11-02T22:59:25Z",
        "updated_at": "2015-11-02T22:59:25Z",
        "html_url": "https://github.com/atom/vim-mode/pull/906#discussion_r43696337",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/906",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/43696337"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/906#discussion_r43696337"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/906"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/43727452",
        "pull_request_review_id": null,
        "id": 43727452,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI3NDUy",
        "diff_hunk": "@@ -451,54 +451,50 @@ class MoveToMiddleOfScreen extends MoveToScreenLine\n     height = lastScreenRow - firstScreenRow\n     Math.floor(firstScreenRow + (height / 2))\n \n-class ScrollKeepingCursor extends MoveToLine\n-  previousFirstScreenRow: 0\n-  currentFirstScreenRow: 0\n+class ScrollKeepingCursor extends Motion\n+  operatesLinewise: true\n+  cursorRow: null\n \n   constructor: (@editorElement, @vimState) ->\n     super(@editorElement.getModel(), @vimState)\n \n   select: (count, options) ->\n-    finalDestination = @scrollScreen(count)\n+    scrollTop = @scrollScreen(count)\n     super(count, options)\n-    @editorElement.setScrollTop(finalDestination)\n+    @editorElement.setScrollTop(scrollTop)\n \n   execute: (count) ->\n-    finalDestination = @scrollScreen(count)\n+    scrollTop = @scrollScreen(count)\n     super(count)\n-    @editorElement.setScrollTop(finalDestination)\n+    @editorElement.setScrollTop(scrollTop)\n \n-  moveCursor: (cursor, count=1) ->\n-    cursor.setScreenPosition([@getDestinationRow(count), 0])\n-\n-  getDestinationRow: (count) ->\n-    {row, column} = @editor.getCursorScreenPosition()\n-    @currentFirstScreenRow - @previousFirstScreenRow + row\n+  moveCursor: (cursor) ->\n+    cursor.setScreenPosition(Point(@cursorRow, 0), autoscroll: false)\n \n   scrollScreen: (count=1) ->\n-    @previousFirstScreenRow = @editorElement.getFirstVisibleScreenRow()\n-    destination = @scrollDestination(count)\n-    @editorElement.setScrollTop(destination)\n-    @currentFirstScreenRow = @editorElement.getFirstVisibleScreenRow()\n-    destination\n+    # TODO: We need to create an API for reading an editor's logical scroll\n+    # position which may not yet have been flushed to the DOM. Currently, the\n+    # only way to access this information is through this piece of private state.\n+    currentScrollTop = @editorElement.component.presenter.pendingScrollTop ? @editorElement.getScrollTop()",
        "path": "lib/motions/general-motions.coffee",
        "position": 46,
        "original_position": 46,
        "commit_id": "3e43a41ad61d5dbf84c4d501bae0b0726ea93026",
        "original_commit_id": "3e43a41ad61d5dbf84c4d501bae0b0726ea93026",
        "user": {
            "login": "as-cii",
            "id": 482957,
            "node_id": "MDQ6VXNlcjQ4Mjk1Nw==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/482957?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/as-cii",
            "html_url": "https://github.com/as-cii",
            "followers_url": "https://api.github.com/users/as-cii/followers",
            "following_url": "https://api.github.com/users/as-cii/following{/other_user}",
            "gists_url": "https://api.github.com/users/as-cii/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/as-cii/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/as-cii/subscriptions",
            "organizations_url": "https://api.github.com/users/as-cii/orgs",
            "repos_url": "https://api.github.com/users/as-cii/repos",
            "events_url": "https://api.github.com/users/as-cii/events{/privacy}",
            "received_events_url": "https://api.github.com/users/as-cii/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "Thanks @maxbrunsfeld for bringing this up. So, there are a couple of ways in which we could solve this. We may either:\n1. Add something like a `TextEditorElement::getPendingScrollTop` API;\n2. Flush pending state (such as scroll positions) synchronously whenever methods like `::getScrollTop` get called;\n\nPersonally, I would prefer 2) over 1) because it both feels more consistent with how the DOM works like and it doesn't expose an internal information which heavily depends on the update scheduling implementation. For example: what does pending mean here? In the current implementation we know that the scroll position's state is either pending or committed, but what if we started handling this differently by introducing a third state?\n\nOn the other hand, I understand the implications of having such a synchronous API: forcing reflows is not ideal, especially when the interaction with the user needs to happen repeatedly such as in this case (e.g. holding down a key). It's also true that people are already used to how the DOM behaves when reading/writing from/to it, so I feel like this wouldn't be a deal breaker. Indeed, this piece of code could be changed to make use of `requestAnimationFrame` (or our `ViewRegistry::readDocument` + `ViewRegistry::updateDocument` methods) to orchestrate DOM updates in a way that doesn't affect performance because of synchronous reflows.\n\nWhat do you think?\n",
        "created_at": "2015-11-03T09:17:42Z",
        "updated_at": "2015-11-03T09:17:42Z",
        "html_url": "https://github.com/atom/vim-mode/pull/906#discussion_r43727452",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/906",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/43727452"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/906#discussion_r43727452"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/906"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/54011539",
        "pull_request_review_id": null,
        "id": 54011539,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDExNTM5",
        "diff_hunk": "@@ -471,14 +471,20 @@ class ScrollKeepingCursor extends Motion\n \n   execute: (count) ->\n     # TODO: remove this conditional once after Atom v1.1.0 is released.\n-    if @editor.setFirstVisibleScreenRow?\n-      newTopRow = @getNewFirstVisibleScreenRow(count)\n-      super(count)\n-      @editor.setFirstVisibleScreenRow(newTopRow)\n-    else\n-      scrollTop = @getNewScrollTop(count)\n-      super(count)\n-      @editorElement.setScrollTop(scrollTop)\n+    # TODO: Atom v1.1.0 was released.\n+    # But setFirstVisibleScreenRow() use getLineCount() not\n+    # getScreenLineCount(). Once after it use getScreenLineCount(),\n+    # [1. by setFirstVisibleScreenRow] can be changed to [2. by scrollTop]",
        "path": "lib/motions/general-motions.coffee",
        "position": 15,
        "original_position": 15,
        "commit_id": "8a2a053f169cdb3651cb4ae552ee5f78fdb21511",
        "original_commit_id": "8a2a053f169cdb3651cb4ae552ee5f78fdb21511",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "> But setFirstVisibleScreenRow() use getLineCount() not getScreenLineCount()\n\nThanks so much for catching this! I think that we should just fix that method. There are some issues with using the `TextEditorElement::getScrollTop`, because it doesn't always update until the next animation frame.\n",
        "created_at": "2016-02-24T21:43:12Z",
        "updated_at": "2016-02-24T21:43:12Z",
        "html_url": "https://github.com/atom/vim-mode/pull/970#discussion_r54011539",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/970",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/54011539"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/970#discussion_r54011539"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/970"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/54011664",
        "pull_request_review_id": null,
        "id": 54011664,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDExNjY0",
        "diff_hunk": "@@ -471,14 +471,20 @@ class ScrollKeepingCursor extends Motion\n \n   execute: (count) ->\n     # TODO: remove this conditional once after Atom v1.1.0 is released.\n-    if @editor.setFirstVisibleScreenRow?\n-      newTopRow = @getNewFirstVisibleScreenRow(count)\n-      super(count)\n-      @editor.setFirstVisibleScreenRow(newTopRow)\n-    else\n-      scrollTop = @getNewScrollTop(count)\n-      super(count)\n-      @editorElement.setScrollTop(scrollTop)\n+    # TODO: Atom v1.1.0 was released.\n+    # But setFirstVisibleScreenRow() use getLineCount() not\n+    # getScreenLineCount(). Once after it use getScreenLineCount(),\n+    # [1. by setFirstVisibleScreenRow] can be changed to [2. by scrollTop]",
        "path": "lib/motions/general-motions.coffee",
        "position": 15,
        "original_position": 15,
        "commit_id": "8a2a053f169cdb3651cb4ae552ee5f78fdb21511",
        "original_commit_id": "8a2a053f169cdb3651cb4ae552ee5f78fdb21511",
        "user": {
            "login": "maxbrunsfeld",
            "id": 326587,
            "node_id": "MDQ6VXNlcjMyNjU4Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/326587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbrunsfeld",
            "html_url": "https://github.com/maxbrunsfeld",
            "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
            "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
            "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
            "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
            "type": "User",
            "site_admin": true
        },
        "body": "@b6pzeusbc54tvhw5jgpyw8pwz2x6gs Are you interested in submitting a PR to atom/atom fixing this? I can publish a hotfix release of Atom so that we don't need to wait for 1.7.0 to come out.\n",
        "created_at": "2016-02-24T21:44:00Z",
        "updated_at": "2016-02-24T21:44:00Z",
        "html_url": "https://github.com/atom/vim-mode/pull/970#discussion_r54011664",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/970",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/54011664"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/970#discussion_r54011664"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/970"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/atom/vim-mode/pulls/comments/54070480",
        "pull_request_review_id": null,
        "id": 54070480,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDcwNDgw",
        "diff_hunk": "@@ -471,14 +471,20 @@ class ScrollKeepingCursor extends Motion\n \n   execute: (count) ->\n     # TODO: remove this conditional once after Atom v1.1.0 is released.\n-    if @editor.setFirstVisibleScreenRow?\n-      newTopRow = @getNewFirstVisibleScreenRow(count)\n-      super(count)\n-      @editor.setFirstVisibleScreenRow(newTopRow)\n-    else\n-      scrollTop = @getNewScrollTop(count)\n-      super(count)\n-      @editorElement.setScrollTop(scrollTop)\n+    # TODO: Atom v1.1.0 was released.\n+    # But setFirstVisibleScreenRow() use getLineCount() not\n+    # getScreenLineCount(). Once after it use getScreenLineCount(),\n+    # [1. by setFirstVisibleScreenRow] can be changed to [2. by scrollTop]",
        "path": "lib/motions/general-motions.coffee",
        "position": 15,
        "original_position": 15,
        "commit_id": "8a2a053f169cdb3651cb4ae552ee5f78fdb21511",
        "original_commit_id": "8a2a053f169cdb3651cb4ae552ee5f78fdb21511",
        "user": {
            "login": "b6pzeusbc54tvhw5jgpyw8pwz2x6gs",
            "id": 15520015,
            "node_id": "MDQ6VXNlcjE1NTIwMDE1",
            "avatar_url": "https://avatars2.githubusercontent.com/u/15520015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/b6pzeusbc54tvhw5jgpyw8pwz2x6gs",
            "html_url": "https://github.com/b6pzeusbc54tvhw5jgpyw8pwz2x6gs",
            "followers_url": "https://api.github.com/users/b6pzeusbc54tvhw5jgpyw8pwz2x6gs/followers",
            "following_url": "https://api.github.com/users/b6pzeusbc54tvhw5jgpyw8pwz2x6gs/following{/other_user}",
            "gists_url": "https://api.github.com/users/b6pzeusbc54tvhw5jgpyw8pwz2x6gs/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/b6pzeusbc54tvhw5jgpyw8pwz2x6gs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/b6pzeusbc54tvhw5jgpyw8pwz2x6gs/subscriptions",
            "organizations_url": "https://api.github.com/users/b6pzeusbc54tvhw5jgpyw8pwz2x6gs/orgs",
            "repos_url": "https://api.github.com/users/b6pzeusbc54tvhw5jgpyw8pwz2x6gs/repos",
            "events_url": "https://api.github.com/users/b6pzeusbc54tvhw5jgpyw8pwz2x6gs/events{/privacy}",
            "received_events_url": "https://api.github.com/users/b6pzeusbc54tvhw5jgpyw8pwz2x6gs/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@maxbrunsfeld , ok I will PR to atom/atom.\n",
        "created_at": "2016-02-25T09:49:47Z",
        "updated_at": "2016-02-25T09:49:47Z",
        "html_url": "https://github.com/atom/vim-mode/pull/970#discussion_r54070480",
        "pull_request_url": "https://api.github.com/repos/atom/vim-mode/pulls/970",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/comments/54070480"
            },
            "html": {
                "href": "https://github.com/atom/vim-mode/pull/970#discussion_r54070480"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/atom/vim-mode/pulls/970"
            }
        }
    }
]