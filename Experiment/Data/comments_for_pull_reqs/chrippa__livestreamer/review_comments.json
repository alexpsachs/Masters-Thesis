[
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/2143954",
        "pull_request_review_id": null,
        "id": 2143954,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDM5NTQ=",
        "diff_hunk": "@@ -0,0 +1,168 @@\n+from livestreamer.compat import str, bytes\n+from livestreamer.options import Options",
        "path": "src/livestreamer/plugins/dailymotion.py",
        "position": null,
        "original_position": 2,
        "commit_id": "4b48dd87e19befa593f31135f2293f3ae11d7846",
        "original_commit_id": "03c7ee781cea1e31f25f76d34b15156ce9470a9f",
        "user": {
            "login": "chrippa",
            "id": 22396,
            "node_id": "MDQ6VXNlcjIyMzk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/22396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrippa",
            "html_url": "https://github.com/chrippa",
            "followers_url": "https://api.github.com/users/chrippa/followers",
            "following_url": "https://api.github.com/users/chrippa/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrippa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrippa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrippa/subscriptions",
            "organizations_url": "https://api.github.com/users/chrippa/orgs",
            "repos_url": "https://api.github.com/users/chrippa/repos",
            "events_url": "https://api.github.com/users/chrippa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrippa/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This is not used.\n",
        "created_at": "2012-11-15T20:16:29Z",
        "updated_at": "2012-11-15T21:42:17Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/35#discussion_r2143954",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/35",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/2143954"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/35#discussion_r2143954"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/35"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/2143957",
        "pull_request_review_id": null,
        "id": 2143957,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDM5NTc=",
        "diff_hunk": "@@ -0,0 +1,168 @@\n+from livestreamer.compat import str, bytes\n+from livestreamer.options import Options\n+from livestreamer.plugins import Plugin, PluginError, NoStreamsError\n+from livestreamer.stream import RTMPStream\n+from livestreamer.utils import urlget, verifyjson\n+\n+import re\n+import json\n+import requests\n+\n+class DailyMotion(Plugin):\n+    options = Options({",
        "path": "src/livestreamer/plugins/dailymotion.py",
        "position": null,
        "original_position": 12,
        "commit_id": "4b48dd87e19befa593f31135f2293f3ae11d7846",
        "original_commit_id": "03c7ee781cea1e31f25f76d34b15156ce9470a9f",
        "user": {
            "login": "chrippa",
            "id": 22396,
            "node_id": "MDQ6VXNlcjIyMzk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/22396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrippa",
            "html_url": "https://github.com/chrippa",
            "followers_url": "https://api.github.com/users/chrippa/followers",
            "following_url": "https://api.github.com/users/chrippa/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrippa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrippa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrippa/subscriptions",
            "organizations_url": "https://api.github.com/users/chrippa/orgs",
            "repos_url": "https://api.github.com/users/chrippa/repos",
            "events_url": "https://api.github.com/users/chrippa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrippa/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This is not used.\n",
        "created_at": "2012-11-15T20:16:34Z",
        "updated_at": "2012-11-15T21:42:17Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/35#discussion_r2143957",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/35",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/2143957"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/35#discussion_r2143957"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/35"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/2143958",
        "pull_request_review_id": null,
        "id": 2143958,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDM5NTg=",
        "diff_hunk": "@@ -0,0 +1,168 @@\n+from livestreamer.compat import str, bytes\n+from livestreamer.options import Options\n+from livestreamer.plugins import Plugin, PluginError, NoStreamsError\n+from livestreamer.stream import RTMPStream\n+from livestreamer.utils import urlget, verifyjson\n+\n+import re\n+import json\n+import requests\n+\n+class DailyMotion(Plugin):\n+    options = Options({\n+        \"cookie\": None\n+    })\n+\n+    qualityDict = {",
        "path": "src/livestreamer/plugins/dailymotion.py",
        "position": null,
        "original_position": 16,
        "commit_id": "4b48dd87e19befa593f31135f2293f3ae11d7846",
        "original_commit_id": "03c7ee781cea1e31f25f76d34b15156ce9470a9f",
        "user": {
            "login": "chrippa",
            "id": 22396,
            "node_id": "MDQ6VXNlcjIyMzk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/22396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrippa",
            "html_url": "https://github.com/chrippa",
            "followers_url": "https://api.github.com/users/chrippa/followers",
            "following_url": "https://api.github.com/users/chrippa/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrippa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrippa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrippa/subscriptions",
            "organizations_url": "https://api.github.com/users/chrippa/orgs",
            "repos_url": "https://api.github.com/users/chrippa/repos",
            "events_url": "https://api.github.com/users/chrippa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrippa/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Don't use camel case, call it QualityDict or QualityMap instead.\n",
        "created_at": "2012-11-15T20:16:37Z",
        "updated_at": "2012-11-15T21:42:17Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/35#discussion_r2143958",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/35",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/2143958"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/35#discussion_r2143958"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/35"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/2143959",
        "pull_request_review_id": null,
        "id": 2143959,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDM5NTk=",
        "diff_hunk": "@@ -0,0 +1,168 @@\n+from livestreamer.compat import str, bytes\n+from livestreamer.options import Options\n+from livestreamer.plugins import Plugin, PluginError, NoStreamsError\n+from livestreamer.stream import RTMPStream\n+from livestreamer.utils import urlget, verifyjson\n+\n+import re\n+import json\n+import requests\n+\n+class DailyMotion(Plugin):\n+    options = Options({\n+        \"cookie\": None\n+    })\n+\n+    qualityDict = {\n+\t    'ld'    : '240p',\n+\t    'sd'    : '360p',\n+\t    'hq'    : '480p',\n+\t    'hd720' : '720p',\n+\t    'hd1080': '1080p'\n+    }\n+\n+    StreamInfoURL = \"http://www.dailymotion.com/sequence/full/{0}\"\n+    MetadataURL = \"https://api.dailymotion.com/video/{0}\"\n+\n+    @classmethod\n+    def can_handle_url(self, url):\n+\t# valid urls are of the form dailymotion.com/video/[a-z]{5}.*\n+\t# but we make 'video/' optionnal and allow for dai.ly as shortcut\n+        return (\"dailymotion.com\" in url) or (\"dai.ly\" in url)\n+\n+    def check_channel_live(self, id):",
        "path": "src/livestreamer/plugins/dailymotion.py",
        "position": null,
        "original_position": 33,
        "commit_id": "4b48dd87e19befa593f31135f2293f3ae11d7846",
        "original_commit_id": "03c7ee781cea1e31f25f76d34b15156ce9470a9f",
        "user": {
            "login": "chrippa",
            "id": 22396,
            "node_id": "MDQ6VXNlcjIyMzk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/22396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrippa",
            "html_url": "https://github.com/chrippa",
            "followers_url": "https://api.github.com/users/chrippa/followers",
            "following_url": "https://api.github.com/users/chrippa/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrippa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrippa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrippa/subscriptions",
            "organizations_url": "https://api.github.com/users/chrippa/orgs",
            "repos_url": "https://api.github.com/users/chrippa/repos",
            "events_url": "https://api.github.com/users/chrippa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrippa/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Prefix private methods and variables with underscore.\n",
        "created_at": "2012-11-15T20:16:45Z",
        "updated_at": "2012-11-15T21:42:17Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/35#discussion_r2143959",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/35",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/2143959"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/35#discussion_r2143959"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/35"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/2143965",
        "pull_request_review_id": null,
        "id": 2143965,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDM5NjU=",
        "diff_hunk": "@@ -0,0 +1,168 @@\n+from livestreamer.compat import str, bytes\n+from livestreamer.options import Options\n+from livestreamer.plugins import Plugin, PluginError, NoStreamsError\n+from livestreamer.stream import RTMPStream\n+from livestreamer.utils import urlget, verifyjson\n+\n+import re\n+import json\n+import requests\n+\n+class DailyMotion(Plugin):\n+    options = Options({\n+        \"cookie\": None\n+    })\n+\n+    qualityDict = {\n+\t    'ld'    : '240p',\n+\t    'sd'    : '360p',\n+\t    'hq'    : '480p',\n+\t    'hd720' : '720p',\n+\t    'hd1080': '1080p'\n+    }\n+\n+    StreamInfoURL = \"http://www.dailymotion.com/sequence/full/{0}\"\n+    MetadataURL = \"https://api.dailymotion.com/video/{0}\"\n+\n+    @classmethod\n+    def can_handle_url(self, url):\n+\t# valid urls are of the form dailymotion.com/video/[a-z]{5}.*\n+\t# but we make 'video/' optionnal and allow for dai.ly as shortcut\n+        return (\"dailymotion.com\" in url) or (\"dai.ly\" in url)\n+\n+    def check_channel_live(self, id):\n+        url = self.MetadataURL.format(self.channelname) + '?fields=mode'\n+\tres = urlget(url)\n+        if len(res.json) == 0:\n+            raise PluginError(\"No stream token in JSON\")\n+\treturn res.json['mode'] == 'live'\n+\n+    def _get_channel_name(self, url):\n+        rpart = url.rstrip(\"/\").rpartition(\"/\")[2].lower()\n+\tname = re.sub('_.*', '', rpart)\n+\treturn name\n+\n+    def _get_node_by_name(self, parent, name):\n+\tres = None",
        "path": "src/livestreamer/plugins/dailymotion.py",
        "position": null,
        "original_position": 46,
        "commit_id": "4b48dd87e19befa593f31135f2293f3ae11d7846",
        "original_commit_id": "03c7ee781cea1e31f25f76d34b15156ce9470a9f",
        "user": {
            "login": "chrippa",
            "id": 22396,
            "node_id": "MDQ6VXNlcjIyMzk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/22396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrippa",
            "html_url": "https://github.com/chrippa",
            "followers_url": "https://api.github.com/users/chrippa/followers",
            "following_url": "https://api.github.com/users/chrippa/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrippa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrippa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrippa/subscriptions",
            "organizations_url": "https://api.github.com/users/chrippa/orgs",
            "repos_url": "https://api.github.com/users/chrippa/repos",
            "events_url": "https://api.github.com/users/chrippa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrippa/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Unused variable.\n",
        "created_at": "2012-11-15T20:17:04Z",
        "updated_at": "2012-11-15T21:42:17Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/35#discussion_r2143965",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/35",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/2143965"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/35#discussion_r2143965"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/35"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/2143966",
        "pull_request_review_id": null,
        "id": 2143966,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDM5NjY=",
        "diff_hunk": "@@ -0,0 +1,168 @@\n+from livestreamer.compat import str, bytes\n+from livestreamer.options import Options\n+from livestreamer.plugins import Plugin, PluginError, NoStreamsError\n+from livestreamer.stream import RTMPStream\n+from livestreamer.utils import urlget, verifyjson\n+\n+import re\n+import json\n+import requests\n+\n+class DailyMotion(Plugin):\n+    options = Options({\n+        \"cookie\": None\n+    })\n+\n+    qualityDict = {\n+\t    'ld'    : '240p',\n+\t    'sd'    : '360p',\n+\t    'hq'    : '480p',\n+\t    'hd720' : '720p',\n+\t    'hd1080': '1080p'\n+    }\n+\n+    StreamInfoURL = \"http://www.dailymotion.com/sequence/full/{0}\"\n+    MetadataURL = \"https://api.dailymotion.com/video/{0}\"\n+\n+    @classmethod\n+    def can_handle_url(self, url):\n+\t# valid urls are of the form dailymotion.com/video/[a-z]{5}.*\n+\t# but we make 'video/' optionnal and allow for dai.ly as shortcut\n+        return (\"dailymotion.com\" in url) or (\"dai.ly\" in url)\n+\n+    def check_channel_live(self, id):\n+        url = self.MetadataURL.format(self.channelname) + '?fields=mode'\n+\tres = urlget(url)\n+        if len(res.json) == 0:\n+            raise PluginError(\"No stream token in JSON\")\n+\treturn res.json['mode'] == 'live'\n+\n+    def _get_channel_name(self, url):\n+        rpart = url.rstrip(\"/\").rpartition(\"/\")[2].lower()\n+\tname = re.sub('_.*', '', rpart)\n+\treturn name\n+\n+    def _get_node_by_name(self, parent, name):\n+\tres = None\n+\tfor i in range(len(parent)):\n+\t    if parent[i]['name'] == name:\n+\t\treturn parent[i]\n+",
        "path": "src/livestreamer/plugins/dailymotion.py",
        "position": null,
        "original_position": 50,
        "commit_id": "4b48dd87e19befa593f31135f2293f3ae11d7846",
        "original_commit_id": "03c7ee781cea1e31f25f76d34b15156ce9470a9f",
        "user": {
            "login": "chrippa",
            "id": 22396,
            "node_id": "MDQ6VXNlcjIyMzk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/22396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrippa",
            "html_url": "https://github.com/chrippa",
            "followers_url": "https://api.github.com/users/chrippa/followers",
            "following_url": "https://api.github.com/users/chrippa/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrippa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrippa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrippa/subscriptions",
            "organizations_url": "https://api.github.com/users/chrippa/orgs",
            "repos_url": "https://api.github.com/users/chrippa/repos",
            "events_url": "https://api.github.com/users/chrippa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrippa/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This is not how to iterate over a list. Use this instead:\n\n```\nfor node in parent:\n  if node[\"name\"] == name:\n    return node\n```\n",
        "created_at": "2012-11-15T20:17:10Z",
        "updated_at": "2012-11-15T21:42:17Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/35#discussion_r2143966",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/35",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/2143966"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/35#discussion_r2143966"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/35"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/2143970",
        "pull_request_review_id": null,
        "id": 2143970,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDM5NzA=",
        "diff_hunk": "@@ -0,0 +1,168 @@\n+from livestreamer.compat import str, bytes\n+from livestreamer.options import Options\n+from livestreamer.plugins import Plugin, PluginError, NoStreamsError\n+from livestreamer.stream import RTMPStream\n+from livestreamer.utils import urlget, verifyjson\n+\n+import re\n+import json\n+import requests\n+\n+class DailyMotion(Plugin):\n+    options = Options({\n+        \"cookie\": None\n+    })\n+\n+    qualityDict = {\n+\t    'ld'    : '240p',\n+\t    'sd'    : '360p',\n+\t    'hq'    : '480p',\n+\t    'hd720' : '720p',\n+\t    'hd1080': '1080p'\n+    }\n+\n+    StreamInfoURL = \"http://www.dailymotion.com/sequence/full/{0}\"\n+    MetadataURL = \"https://api.dailymotion.com/video/{0}\"\n+\n+    @classmethod\n+    def can_handle_url(self, url):\n+\t# valid urls are of the form dailymotion.com/video/[a-z]{5}.*\n+\t# but we make 'video/' optionnal and allow for dai.ly as shortcut\n+        return (\"dailymotion.com\" in url) or (\"dai.ly\" in url)\n+\n+    def check_channel_live(self, id):\n+        url = self.MetadataURL.format(self.channelname) + '?fields=mode'\n+\tres = urlget(url)\n+        if len(res.json) == 0:\n+            raise PluginError(\"No stream token in JSON\")\n+\treturn res.json['mode'] == 'live'\n+\n+    def _get_channel_name(self, url):\n+        rpart = url.rstrip(\"/\").rpartition(\"/\")[2].lower()\n+\tname = re.sub('_.*', '', rpart)\n+\treturn name\n+\n+    def _get_node_by_name(self, parent, name):\n+\tres = None\n+\tfor i in range(len(parent)):\n+\t    if parent[i]['name'] == name:\n+\t\treturn parent[i]\n+\n+\n+    def _get_rtmp_streams(self):\n+        def clean_tag(tag):\n+            if tag[0] == \"_\":\n+                return tag[1:]\n+            else:\n+                return tag\n+",
        "path": "src/livestreamer/plugins/dailymotion.py",
        "position": null,
        "original_position": 58,
        "commit_id": "4b48dd87e19befa593f31135f2293f3ae11d7846",
        "original_commit_id": "03c7ee781cea1e31f25f76d34b15156ce9470a9f",
        "user": {
            "login": "chrippa",
            "id": 22396,
            "node_id": "MDQ6VXNlcjIyMzk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/22396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrippa",
            "html_url": "https://github.com/chrippa",
            "followers_url": "https://api.github.com/users/chrippa/followers",
            "following_url": "https://api.github.com/users/chrippa/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrippa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrippa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrippa/subscriptions",
            "organizations_url": "https://api.github.com/users/chrippa/orgs",
            "repos_url": "https://api.github.com/users/chrippa/repos",
            "events_url": "https://api.github.com/users/chrippa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrippa/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "clean_tag is not used.\n",
        "created_at": "2012-11-15T20:17:16Z",
        "updated_at": "2012-11-15T21:42:17Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/35#discussion_r2143970",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/35",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/2143970"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/35#discussion_r2143970"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/35"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/2143990",
        "pull_request_review_id": null,
        "id": 2143990,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDM5OTA=",
        "diff_hunk": "@@ -0,0 +1,168 @@\n+from livestreamer.compat import str, bytes\n+from livestreamer.options import Options\n+from livestreamer.plugins import Plugin, PluginError, NoStreamsError\n+from livestreamer.stream import RTMPStream\n+from livestreamer.utils import urlget, verifyjson\n+\n+import re\n+import json\n+import requests\n+\n+class DailyMotion(Plugin):\n+    options = Options({\n+        \"cookie\": None\n+    })\n+\n+    qualityDict = {\n+\t    'ld'    : '240p',\n+\t    'sd'    : '360p',\n+\t    'hq'    : '480p',\n+\t    'hd720' : '720p',\n+\t    'hd1080': '1080p'\n+    }\n+\n+    StreamInfoURL = \"http://www.dailymotion.com/sequence/full/{0}\"\n+    MetadataURL = \"https://api.dailymotion.com/video/{0}\"\n+\n+    @classmethod\n+    def can_handle_url(self, url):\n+\t# valid urls are of the form dailymotion.com/video/[a-z]{5}.*\n+\t# but we make 'video/' optionnal and allow for dai.ly as shortcut\n+        return (\"dailymotion.com\" in url) or (\"dai.ly\" in url)\n+\n+    def check_channel_live(self, id):\n+        url = self.MetadataURL.format(self.channelname) + '?fields=mode'\n+\tres = urlget(url)\n+        if len(res.json) == 0:\n+            raise PluginError(\"No stream token in JSON\")\n+\treturn res.json['mode'] == 'live'\n+\n+    def _get_channel_name(self, url):\n+        rpart = url.rstrip(\"/\").rpartition(\"/\")[2].lower()\n+\tname = re.sub('_.*', '', rpart)\n+\treturn name\n+\n+    def _get_node_by_name(self, parent, name):\n+\tres = None\n+\tfor i in range(len(parent)):\n+\t    if parent[i]['name'] == name:\n+\t\treturn parent[i]\n+\n+\n+    def _get_rtmp_streams(self):\n+        def clean_tag(tag):\n+            if tag[0] == \"_\":\n+                return tag[1:]\n+            else:\n+                return tag\n+\n+        url = self.MetadataURL.format(self.channelname)\n+\n+        self.logger.debug(\"Fetching stream info\")\n+        res = urlget(url)\n+\n+        if not isinstance(res.json, dict):\n+            raise PluginError(\"Stream info response is not JSON\")\n+\n+        if len(res.json) == 0:\n+            raise PluginError(\"No stream token in JSON\")\n+\n+\tchan_id = verifyjson(res.json, 'id')\n+\n+        streams = {}\n+\n+\tif not self.check_channel_live(chan_id):\n+\t    return streams\n+\n+        url = self.StreamInfoURL.format(self.channelname)\n+\n+\tself.logger.debug('JSON data url: '+url)",
        "path": "src/livestreamer/plugins/dailymotion.py",
        "position": null,
        "original_position": 79,
        "commit_id": "4b48dd87e19befa593f31135f2293f3ae11d7846",
        "original_commit_id": "03c7ee781cea1e31f25f76d34b15156ce9470a9f",
        "user": {
            "login": "chrippa",
            "id": 22396,
            "node_id": "MDQ6VXNlcjIyMzk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/22396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrippa",
            "html_url": "https://github.com/chrippa",
            "followers_url": "https://api.github.com/users/chrippa/followers",
            "following_url": "https://api.github.com/users/chrippa/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrippa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrippa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrippa/subscriptions",
            "organizations_url": "https://api.github.com/users/chrippa/orgs",
            "repos_url": "https://api.github.com/users/chrippa/repos",
            "events_url": "https://api.github.com/users/chrippa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrippa/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Use formatting instead of concatation:\n\n```\nself.logger.debug(\"JSON data url: {0}\", url)\n```\n",
        "created_at": "2012-11-15T20:18:21Z",
        "updated_at": "2012-11-15T21:42:17Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/35#discussion_r2143990",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/35",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/2143990"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/35#discussion_r2143990"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/35"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/2144024",
        "pull_request_review_id": null,
        "id": 2144024,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDQwMjQ=",
        "diff_hunk": "@@ -0,0 +1,168 @@\n+from livestreamer.compat import str, bytes\n+from livestreamer.options import Options\n+from livestreamer.plugins import Plugin, PluginError, NoStreamsError\n+from livestreamer.stream import RTMPStream\n+from livestreamer.utils import urlget, verifyjson\n+\n+import re\n+import json\n+import requests\n+\n+class DailyMotion(Plugin):\n+    options = Options({\n+        \"cookie\": None\n+    })\n+\n+    qualityDict = {\n+\t    'ld'    : '240p',\n+\t    'sd'    : '360p',\n+\t    'hq'    : '480p',\n+\t    'hd720' : '720p',\n+\t    'hd1080': '1080p'\n+    }\n+\n+    StreamInfoURL = \"http://www.dailymotion.com/sequence/full/{0}\"\n+    MetadataURL = \"https://api.dailymotion.com/video/{0}\"\n+\n+    @classmethod\n+    def can_handle_url(self, url):\n+\t# valid urls are of the form dailymotion.com/video/[a-z]{5}.*\n+\t# but we make 'video/' optionnal and allow for dai.ly as shortcut\n+        return (\"dailymotion.com\" in url) or (\"dai.ly\" in url)\n+\n+    def check_channel_live(self, id):\n+        url = self.MetadataURL.format(self.channelname) + '?fields=mode'\n+\tres = urlget(url)",
        "path": "src/livestreamer/plugins/dailymotion.py",
        "position": null,
        "original_position": 35,
        "commit_id": "4b48dd87e19befa593f31135f2293f3ae11d7846",
        "original_commit_id": "03c7ee781cea1e31f25f76d34b15156ce9470a9f",
        "user": {
            "login": "chrippa",
            "id": 22396,
            "node_id": "MDQ6VXNlcjIyMzk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/22396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrippa",
            "html_url": "https://github.com/chrippa",
            "followers_url": "https://api.github.com/users/chrippa/followers",
            "following_url": "https://api.github.com/users/chrippa/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrippa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrippa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrippa/subscriptions",
            "organizations_url": "https://api.github.com/users/chrippa/orgs",
            "repos_url": "https://api.github.com/users/chrippa/repos",
            "events_url": "https://api.github.com/users/chrippa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrippa/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Use the params keyword here:\n\n```\nres = urlget(url, params=dict(fields=\"mode\"))\n```\n",
        "created_at": "2012-11-15T20:20:33Z",
        "updated_at": "2012-11-15T21:42:17Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/35#discussion_r2144024",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/35",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/2144024"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/35#discussion_r2144024"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/35"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/2144039",
        "pull_request_review_id": null,
        "id": 2144039,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDQwMzk=",
        "diff_hunk": "@@ -0,0 +1,168 @@\n+from livestreamer.compat import str, bytes\n+from livestreamer.options import Options\n+from livestreamer.plugins import Plugin, PluginError, NoStreamsError\n+from livestreamer.stream import RTMPStream\n+from livestreamer.utils import urlget, verifyjson\n+\n+import re\n+import json\n+import requests\n+\n+class DailyMotion(Plugin):\n+    options = Options({\n+        \"cookie\": None\n+    })\n+\n+    qualityDict = {\n+\t    'ld'    : '240p',\n+\t    'sd'    : '360p',\n+\t    'hq'    : '480p',\n+\t    'hd720' : '720p',\n+\t    'hd1080': '1080p'\n+    }\n+\n+    StreamInfoURL = \"http://www.dailymotion.com/sequence/full/{0}\"\n+    MetadataURL = \"https://api.dailymotion.com/video/{0}\"\n+\n+    @classmethod\n+    def can_handle_url(self, url):\n+\t# valid urls are of the form dailymotion.com/video/[a-z]{5}.*\n+\t# but we make 'video/' optionnal and allow for dai.ly as shortcut\n+        return (\"dailymotion.com\" in url) or (\"dai.ly\" in url)\n+\n+    def check_channel_live(self, id):\n+        url = self.MetadataURL.format(self.channelname) + '?fields=mode'\n+\tres = urlget(url)\n+        if len(res.json) == 0:\n+            raise PluginError(\"No stream token in JSON\")",
        "path": "src/livestreamer/plugins/dailymotion.py",
        "position": null,
        "original_position": 37,
        "commit_id": "4b48dd87e19befa593f31135f2293f3ae11d7846",
        "original_commit_id": "03c7ee781cea1e31f25f76d34b15156ce9470a9f",
        "user": {
            "login": "chrippa",
            "id": 22396,
            "node_id": "MDQ6VXNlcjIyMzk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/22396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrippa",
            "html_url": "https://github.com/chrippa",
            "followers_url": "https://api.github.com/users/chrippa/followers",
            "following_url": "https://api.github.com/users/chrippa/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrippa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrippa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrippa/subscriptions",
            "organizations_url": "https://api.github.com/users/chrippa/orgs",
            "repos_url": "https://api.github.com/users/chrippa/repos",
            "events_url": "https://api.github.com/users/chrippa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrippa/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This error message makes no sense.\n",
        "created_at": "2012-11-15T20:21:35Z",
        "updated_at": "2012-11-15T21:42:17Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/35#discussion_r2144039",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/35",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/2144039"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/35#discussion_r2144039"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/35"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/2144081",
        "pull_request_review_id": null,
        "id": 2144081,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDQwODE=",
        "diff_hunk": "@@ -0,0 +1,168 @@\n+from livestreamer.compat import str, bytes\n+from livestreamer.options import Options\n+from livestreamer.plugins import Plugin, PluginError, NoStreamsError\n+from livestreamer.stream import RTMPStream\n+from livestreamer.utils import urlget, verifyjson\n+\n+import re\n+import json\n+import requests\n+\n+class DailyMotion(Plugin):\n+    options = Options({\n+        \"cookie\": None\n+    })\n+\n+    qualityDict = {\n+\t    'ld'    : '240p',\n+\t    'sd'    : '360p',\n+\t    'hq'    : '480p',\n+\t    'hd720' : '720p',\n+\t    'hd1080': '1080p'\n+    }\n+\n+    StreamInfoURL = \"http://www.dailymotion.com/sequence/full/{0}\"\n+    MetadataURL = \"https://api.dailymotion.com/video/{0}\"\n+\n+    @classmethod\n+    def can_handle_url(self, url):\n+\t# valid urls are of the form dailymotion.com/video/[a-z]{5}.*\n+\t# but we make 'video/' optionnal and allow for dai.ly as shortcut\n+        return (\"dailymotion.com\" in url) or (\"dai.ly\" in url)\n+\n+    def check_channel_live(self, id):\n+        url = self.MetadataURL.format(self.channelname) + '?fields=mode'\n+\tres = urlget(url)\n+        if len(res.json) == 0:\n+            raise PluginError(\"No stream token in JSON\")\n+\treturn res.json['mode'] == 'live'\n+\n+    def _get_channel_name(self, url):\n+        rpart = url.rstrip(\"/\").rpartition(\"/\")[2].lower()\n+\tname = re.sub('_.*', '', rpart)\n+\treturn name\n+\n+    def _get_node_by_name(self, parent, name):\n+\tres = None\n+\tfor i in range(len(parent)):\n+\t    if parent[i]['name'] == name:\n+\t\treturn parent[i]\n+\n+\n+    def _get_rtmp_streams(self):\n+        def clean_tag(tag):\n+            if tag[0] == \"_\":\n+                return tag[1:]\n+            else:\n+                return tag\n+\n+        url = self.MetadataURL.format(self.channelname)\n+\n+        self.logger.debug(\"Fetching stream info\")\n+        res = urlget(url)\n+\n+        if not isinstance(res.json, dict):\n+            raise PluginError(\"Stream info response is not JSON\")\n+\n+        if len(res.json) == 0:\n+            raise PluginError(\"No stream token in JSON\")",
        "path": "src/livestreamer/plugins/dailymotion.py",
        "position": null,
        "original_position": 68,
        "commit_id": "4b48dd87e19befa593f31135f2293f3ae11d7846",
        "original_commit_id": "03c7ee781cea1e31f25f76d34b15156ce9470a9f",
        "user": {
            "login": "chrippa",
            "id": 22396,
            "node_id": "MDQ6VXNlcjIyMzk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/22396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrippa",
            "html_url": "https://github.com/chrippa",
            "followers_url": "https://api.github.com/users/chrippa/followers",
            "following_url": "https://api.github.com/users/chrippa/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrippa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrippa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrippa/subscriptions",
            "organizations_url": "https://api.github.com/users/chrippa/orgs",
            "repos_url": "https://api.github.com/users/chrippa/repos",
            "events_url": "https://api.github.com/users/chrippa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrippa/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "No need to check length of the dict, you already verify the keys with verifyjson.\n",
        "created_at": "2012-11-15T20:24:05Z",
        "updated_at": "2012-11-15T21:42:17Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/35#discussion_r2144081",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/35",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/2144081"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/35#discussion_r2144081"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/35"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/2144123",
        "pull_request_review_id": null,
        "id": 2144123,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDQxMjM=",
        "diff_hunk": "@@ -0,0 +1,168 @@\n+from livestreamer.compat import str, bytes\n+from livestreamer.options import Options\n+from livestreamer.plugins import Plugin, PluginError, NoStreamsError\n+from livestreamer.stream import RTMPStream\n+from livestreamer.utils import urlget, verifyjson\n+\n+import re\n+import json\n+import requests\n+\n+class DailyMotion(Plugin):\n+    options = Options({\n+        \"cookie\": None\n+    })\n+\n+    qualityDict = {\n+\t    'ld'    : '240p',\n+\t    'sd'    : '360p',\n+\t    'hq'    : '480p',\n+\t    'hd720' : '720p',\n+\t    'hd1080': '1080p'\n+    }\n+\n+    StreamInfoURL = \"http://www.dailymotion.com/sequence/full/{0}\"\n+    MetadataURL = \"https://api.dailymotion.com/video/{0}\"\n+\n+    @classmethod\n+    def can_handle_url(self, url):\n+\t# valid urls are of the form dailymotion.com/video/[a-z]{5}.*\n+\t# but we make 'video/' optionnal and allow for dai.ly as shortcut\n+        return (\"dailymotion.com\" in url) or (\"dai.ly\" in url)\n+\n+    def check_channel_live(self, id):\n+        url = self.MetadataURL.format(self.channelname) + '?fields=mode'\n+\tres = urlget(url)\n+        if len(res.json) == 0:\n+            raise PluginError(\"No stream token in JSON\")\n+\treturn res.json['mode'] == 'live'\n+\n+    def _get_channel_name(self, url):\n+        rpart = url.rstrip(\"/\").rpartition(\"/\")[2].lower()\n+\tname = re.sub('_.*', '', rpart)\n+\treturn name\n+\n+    def _get_node_by_name(self, parent, name):\n+\tres = None\n+\tfor i in range(len(parent)):\n+\t    if parent[i]['name'] == name:\n+\t\treturn parent[i]\n+\n+\n+    def _get_rtmp_streams(self):\n+        def clean_tag(tag):\n+            if tag[0] == \"_\":\n+                return tag[1:]\n+            else:\n+                return tag\n+\n+        url = self.MetadataURL.format(self.channelname)\n+\n+        self.logger.debug(\"Fetching stream info\")\n+        res = urlget(url)\n+\n+        if not isinstance(res.json, dict):\n+            raise PluginError(\"Stream info response is not JSON\")\n+\n+        if len(res.json) == 0:\n+            raise PluginError(\"No stream token in JSON\")\n+\n+\tchan_id = verifyjson(res.json, 'id')\n+\n+        streams = {}\n+\n+\tif not self.check_channel_live(chan_id):\n+\t    return streams\n+\n+        url = self.StreamInfoURL.format(self.channelname)\n+\n+\tself.logger.debug('JSON data url: '+url)\n+\n+        res = urlget(url)\n+\n+        if not isinstance(res.json, dict):\n+            raise PluginError(\"Stream info response is not JSON\")\n+\n+        if len(res.json) == 0:\n+            raise PluginError(\"No stream token in JSON\")\n+\n+\tchan_info_json = res.json\n+\n+\t# This is ugly, not sure how to fix it.\n+\tback_json_node = chan_info_json['sequence'][0]['layerList'][0]\n+\tassert(back_json_node['name'] == 'background')",
        "path": "src/livestreamer/plugins/dailymotion.py",
        "position": null,
        "original_position": 93,
        "commit_id": "4b48dd87e19befa593f31135f2293f3ae11d7846",
        "original_commit_id": "03c7ee781cea1e31f25f76d34b15156ce9470a9f",
        "user": {
            "login": "chrippa",
            "id": 22396,
            "node_id": "MDQ6VXNlcjIyMzk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/22396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrippa",
            "html_url": "https://github.com/chrippa",
            "followers_url": "https://api.github.com/users/chrippa/followers",
            "following_url": "https://api.github.com/users/chrippa/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrippa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrippa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrippa/subscriptions",
            "organizations_url": "https://api.github.com/users/chrippa/orgs",
            "repos_url": "https://api.github.com/users/chrippa/repos",
            "events_url": "https://api.github.com/users/chrippa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrippa/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Use a if and raise PluginError instead of using assert.\n",
        "created_at": "2012-11-15T20:26:11Z",
        "updated_at": "2012-11-15T21:42:17Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/35#discussion_r2144123",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/35",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/2144123"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/35#discussion_r2144123"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/35"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/2144182",
        "pull_request_review_id": null,
        "id": 2144182,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDQxODI=",
        "diff_hunk": "@@ -0,0 +1,168 @@\n+from livestreamer.compat import str, bytes\n+from livestreamer.options import Options\n+from livestreamer.plugins import Plugin, PluginError, NoStreamsError\n+from livestreamer.stream import RTMPStream\n+from livestreamer.utils import urlget, verifyjson\n+\n+import re\n+import json\n+import requests\n+\n+class DailyMotion(Plugin):\n+    options = Options({\n+        \"cookie\": None\n+    })\n+\n+    qualityDict = {\n+\t    'ld'    : '240p',\n+\t    'sd'    : '360p',\n+\t    'hq'    : '480p',\n+\t    'hd720' : '720p',\n+\t    'hd1080': '1080p'\n+    }\n+\n+    StreamInfoURL = \"http://www.dailymotion.com/sequence/full/{0}\"\n+    MetadataURL = \"https://api.dailymotion.com/video/{0}\"\n+\n+    @classmethod\n+    def can_handle_url(self, url):\n+\t# valid urls are of the form dailymotion.com/video/[a-z]{5}.*\n+\t# but we make 'video/' optionnal and allow for dai.ly as shortcut\n+        return (\"dailymotion.com\" in url) or (\"dai.ly\" in url)\n+\n+    def check_channel_live(self, id):\n+        url = self.MetadataURL.format(self.channelname) + '?fields=mode'\n+\tres = urlget(url)\n+        if len(res.json) == 0:\n+            raise PluginError(\"No stream token in JSON\")\n+\treturn res.json['mode'] == 'live'\n+\n+    def _get_channel_name(self, url):\n+        rpart = url.rstrip(\"/\").rpartition(\"/\")[2].lower()\n+\tname = re.sub('_.*', '', rpart)\n+\treturn name\n+\n+    def _get_node_by_name(self, parent, name):\n+\tres = None\n+\tfor i in range(len(parent)):\n+\t    if parent[i]['name'] == name:\n+\t\treturn parent[i]\n+\n+\n+    def _get_rtmp_streams(self):\n+        def clean_tag(tag):\n+            if tag[0] == \"_\":\n+                return tag[1:]\n+            else:\n+                return tag\n+\n+        url = self.MetadataURL.format(self.channelname)\n+\n+        self.logger.debug(\"Fetching stream info\")\n+        res = urlget(url)\n+\n+        if not isinstance(res.json, dict):\n+            raise PluginError(\"Stream info response is not JSON\")\n+\n+        if len(res.json) == 0:\n+            raise PluginError(\"No stream token in JSON\")\n+\n+\tchan_id = verifyjson(res.json, 'id')\n+\n+        streams = {}\n+\n+\tif not self.check_channel_live(chan_id):\n+\t    return streams\n+\n+        url = self.StreamInfoURL.format(self.channelname)\n+\n+\tself.logger.debug('JSON data url: '+url)\n+\n+        res = urlget(url)\n+\n+        if not isinstance(res.json, dict):\n+            raise PluginError(\"Stream info response is not JSON\")\n+\n+        if len(res.json) == 0:\n+            raise PluginError(\"No stream token in JSON\")\n+\n+\tchan_info_json = res.json\n+\n+\t# This is ugly, not sure how to fix it.\n+\tback_json_node = chan_info_json['sequence'][0]['layerList'][0]\n+\tassert(back_json_node['name'] == 'background')\n+\n+\trep_node = self._get_node_by_name(back_json_node['sequenceList'], 'reporting')['layerList']\n+\tmain_node = self._get_node_by_name(back_json_node['sequenceList'], 'main')['layerList']\n+\n+\tswfurl = self._get_node_by_name(rep_node, 'reporting')['param']['extraParams']['videoSwfURL']\n+\tfeeds_params = self._get_node_by_name(main_node, 'video')['param']\n+\n+\n+\t# Different feed qualities are available are a dict under 'live'\n+\t# In some cases where there's only 1 quality available,\n+\t# it seems the 'live' is absent. We use the single stream available\n+\t# under the 'customURL' key.\n+\n+\tif feeds_params.has_key('live') and len(feeds_params['live']) > 0:\n+\t    quals = feeds_params['live']\n+\telse:\n+\t    res = urlget(feeds_params['customURL'])\n+\t    if not res.status_code == requests.codes.ok:\n+\t\treturn streams\n+\t    rtmpurl = res.text\n+\n+            stream = RTMPStream(self.session, {\n+                \"rtmp\": rtmpurl,\n+                \"swfVfy\": swfurl,\n+                \"live\": True\n+            })\n+\t    self.logger.debug('Adding URL: '+feeds_params['customURL'])\n+\t    streams['best'] = stream",
        "path": "src/livestreamer/plugins/dailymotion.py",
        "position": null,
        "original_position": 121,
        "commit_id": "4b48dd87e19befa593f31135f2293f3ae11d7846",
        "original_commit_id": "03c7ee781cea1e31f25f76d34b15156ce9470a9f",
        "user": {
            "login": "chrippa",
            "id": 22396,
            "node_id": "MDQ6VXNlcjIyMzk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/22396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrippa",
            "html_url": "https://github.com/chrippa",
            "followers_url": "https://api.github.com/users/chrippa/followers",
            "following_url": "https://api.github.com/users/chrippa/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrippa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrippa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrippa/subscriptions",
            "organizations_url": "https://api.github.com/users/chrippa/orgs",
            "repos_url": "https://api.github.com/users/chrippa/repos",
            "events_url": "https://api.github.com/users/chrippa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrippa/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\"best\" is a reserved meta quality, please don't overwrite it. Call it \"live\" instead.\n",
        "created_at": "2012-11-15T20:29:50Z",
        "updated_at": "2012-11-15T21:42:17Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/35#discussion_r2144182",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/35",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/2144182"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/35#discussion_r2144182"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/35"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/2144216",
        "pull_request_review_id": null,
        "id": 2144216,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDQyMTY=",
        "diff_hunk": "@@ -0,0 +1,168 @@\n+from livestreamer.compat import str, bytes\n+from livestreamer.options import Options\n+from livestreamer.plugins import Plugin, PluginError, NoStreamsError\n+from livestreamer.stream import RTMPStream\n+from livestreamer.utils import urlget, verifyjson\n+\n+import re\n+import json\n+import requests\n+\n+class DailyMotion(Plugin):\n+    options = Options({\n+        \"cookie\": None\n+    })\n+\n+    qualityDict = {\n+\t    'ld'    : '240p',\n+\t    'sd'    : '360p',\n+\t    'hq'    : '480p',\n+\t    'hd720' : '720p',\n+\t    'hd1080': '1080p'\n+    }\n+\n+    StreamInfoURL = \"http://www.dailymotion.com/sequence/full/{0}\"\n+    MetadataURL = \"https://api.dailymotion.com/video/{0}\"\n+\n+    @classmethod\n+    def can_handle_url(self, url):\n+\t# valid urls are of the form dailymotion.com/video/[a-z]{5}.*\n+\t# but we make 'video/' optionnal and allow for dai.ly as shortcut\n+        return (\"dailymotion.com\" in url) or (\"dai.ly\" in url)\n+\n+    def check_channel_live(self, id):\n+        url = self.MetadataURL.format(self.channelname) + '?fields=mode'\n+\tres = urlget(url)\n+        if len(res.json) == 0:\n+            raise PluginError(\"No stream token in JSON\")\n+\treturn res.json['mode'] == 'live'\n+\n+    def _get_channel_name(self, url):\n+        rpart = url.rstrip(\"/\").rpartition(\"/\")[2].lower()\n+\tname = re.sub('_.*', '', rpart)\n+\treturn name\n+\n+    def _get_node_by_name(self, parent, name):\n+\tres = None\n+\tfor i in range(len(parent)):\n+\t    if parent[i]['name'] == name:\n+\t\treturn parent[i]\n+\n+\n+    def _get_rtmp_streams(self):\n+        def clean_tag(tag):\n+            if tag[0] == \"_\":\n+                return tag[1:]\n+            else:\n+                return tag\n+\n+        url = self.MetadataURL.format(self.channelname)\n+\n+        self.logger.debug(\"Fetching stream info\")\n+        res = urlget(url)\n+\n+        if not isinstance(res.json, dict):\n+            raise PluginError(\"Stream info response is not JSON\")\n+\n+        if len(res.json) == 0:\n+            raise PluginError(\"No stream token in JSON\")\n+\n+\tchan_id = verifyjson(res.json, 'id')\n+\n+        streams = {}\n+\n+\tif not self.check_channel_live(chan_id):\n+\t    return streams\n+\n+        url = self.StreamInfoURL.format(self.channelname)\n+\n+\tself.logger.debug('JSON data url: '+url)\n+\n+        res = urlget(url)\n+\n+        if not isinstance(res.json, dict):\n+            raise PluginError(\"Stream info response is not JSON\")\n+\n+        if len(res.json) == 0:\n+            raise PluginError(\"No stream token in JSON\")\n+\n+\tchan_info_json = res.json\n+\n+\t# This is ugly, not sure how to fix it.\n+\tback_json_node = chan_info_json['sequence'][0]['layerList'][0]\n+\tassert(back_json_node['name'] == 'background')\n+\n+\trep_node = self._get_node_by_name(back_json_node['sequenceList'], 'reporting')['layerList']\n+\tmain_node = self._get_node_by_name(back_json_node['sequenceList'], 'main')['layerList']\n+\n+\tswfurl = self._get_node_by_name(rep_node, 'reporting')['param']['extraParams']['videoSwfURL']\n+\tfeeds_params = self._get_node_by_name(main_node, 'video')['param']\n+\n+\n+\t# Different feed qualities are available are a dict under 'live'\n+\t# In some cases where there's only 1 quality available,\n+\t# it seems the 'live' is absent. We use the single stream available\n+\t# under the 'customURL' key.\n+\n+\tif feeds_params.has_key('live') and len(feeds_params['live']) > 0:\n+\t    quals = feeds_params['live']\n+\telse:\n+\t    res = urlget(feeds_params['customURL'])\n+\t    if not res.status_code == requests.codes.ok:\n+\t\treturn streams",
        "path": "src/livestreamer/plugins/dailymotion.py",
        "position": null,
        "original_position": 112,
        "commit_id": "4b48dd87e19befa593f31135f2293f3ae11d7846",
        "original_commit_id": "03c7ee781cea1e31f25f76d34b15156ce9470a9f",
        "user": {
            "login": "chrippa",
            "id": 22396,
            "node_id": "MDQ6VXNlcjIyMzk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/22396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrippa",
            "html_url": "https://github.com/chrippa",
            "followers_url": "https://api.github.com/users/chrippa/followers",
            "following_url": "https://api.github.com/users/chrippa/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrippa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrippa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrippa/subscriptions",
            "organizations_url": "https://api.github.com/users/chrippa/orgs",
            "repos_url": "https://api.github.com/users/chrippa/repos",
            "events_url": "https://api.github.com/users/chrippa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrippa/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "No need to check status_code, a PluginError will be raised on error anyway.\n",
        "created_at": "2012-11-15T20:31:57Z",
        "updated_at": "2012-11-15T21:42:17Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/35#discussion_r2144216",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/35",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/2144216"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/35#discussion_r2144216"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/35"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/2144259",
        "pull_request_review_id": null,
        "id": 2144259,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDQyNTk=",
        "diff_hunk": "@@ -0,0 +1,168 @@\n+from livestreamer.compat import str, bytes\n+from livestreamer.options import Options\n+from livestreamer.plugins import Plugin, PluginError, NoStreamsError\n+from livestreamer.stream import RTMPStream\n+from livestreamer.utils import urlget, verifyjson\n+\n+import re\n+import json\n+import requests\n+\n+class DailyMotion(Plugin):\n+    options = Options({\n+        \"cookie\": None\n+    })\n+\n+    qualityDict = {\n+\t    'ld'    : '240p',\n+\t    'sd'    : '360p',\n+\t    'hq'    : '480p',\n+\t    'hd720' : '720p',\n+\t    'hd1080': '1080p'\n+    }\n+\n+    StreamInfoURL = \"http://www.dailymotion.com/sequence/full/{0}\"\n+    MetadataURL = \"https://api.dailymotion.com/video/{0}\"\n+\n+    @classmethod\n+    def can_handle_url(self, url):\n+\t# valid urls are of the form dailymotion.com/video/[a-z]{5}.*\n+\t# but we make 'video/' optionnal and allow for dai.ly as shortcut\n+        return (\"dailymotion.com\" in url) or (\"dai.ly\" in url)\n+\n+    def check_channel_live(self, id):\n+        url = self.MetadataURL.format(self.channelname) + '?fields=mode'\n+\tres = urlget(url)\n+        if len(res.json) == 0:\n+            raise PluginError(\"No stream token in JSON\")\n+\treturn res.json['mode'] == 'live'\n+\n+    def _get_channel_name(self, url):\n+        rpart = url.rstrip(\"/\").rpartition(\"/\")[2].lower()\n+\tname = re.sub('_.*', '', rpart)\n+\treturn name\n+\n+    def _get_node_by_name(self, parent, name):\n+\tres = None\n+\tfor i in range(len(parent)):\n+\t    if parent[i]['name'] == name:\n+\t\treturn parent[i]\n+\n+\n+    def _get_rtmp_streams(self):\n+        def clean_tag(tag):\n+            if tag[0] == \"_\":\n+                return tag[1:]\n+            else:\n+                return tag\n+\n+        url = self.MetadataURL.format(self.channelname)\n+\n+        self.logger.debug(\"Fetching stream info\")\n+        res = urlget(url)\n+\n+        if not isinstance(res.json, dict):\n+            raise PluginError(\"Stream info response is not JSON\")\n+\n+        if len(res.json) == 0:\n+            raise PluginError(\"No stream token in JSON\")\n+\n+\tchan_id = verifyjson(res.json, 'id')\n+\n+        streams = {}\n+\n+\tif not self.check_channel_live(chan_id):\n+\t    return streams\n+\n+        url = self.StreamInfoURL.format(self.channelname)\n+\n+\tself.logger.debug('JSON data url: '+url)\n+\n+        res = urlget(url)\n+\n+        if not isinstance(res.json, dict):\n+            raise PluginError(\"Stream info response is not JSON\")\n+\n+        if len(res.json) == 0:\n+            raise PluginError(\"No stream token in JSON\")\n+\n+\tchan_info_json = res.json\n+\n+\t# This is ugly, not sure how to fix it.\n+\tback_json_node = chan_info_json['sequence'][0]['layerList'][0]\n+\tassert(back_json_node['name'] == 'background')\n+\n+\trep_node = self._get_node_by_name(back_json_node['sequenceList'], 'reporting')['layerList']\n+\tmain_node = self._get_node_by_name(back_json_node['sequenceList'], 'main')['layerList']\n+\n+\tswfurl = self._get_node_by_name(rep_node, 'reporting')['param']['extraParams']['videoSwfURL']\n+\tfeeds_params = self._get_node_by_name(main_node, 'video')['param']\n+\n+\n+\t# Different feed qualities are available are a dict under 'live'\n+\t# In some cases where there's only 1 quality available,\n+\t# it seems the 'live' is absent. We use the single stream available\n+\t# under the 'customURL' key.\n+\n+\tif feeds_params.has_key('live') and len(feeds_params['live']) > 0:\n+\t    quals = feeds_params['live']\n+\telse:\n+\t    res = urlget(feeds_params['customURL'])\n+\t    if not res.status_code == requests.codes.ok:\n+\t\treturn streams\n+\t    rtmpurl = res.text\n+\n+            stream = RTMPStream(self.session, {\n+                \"rtmp\": rtmpurl,\n+                \"swfVfy\": swfurl,\n+                \"live\": True\n+            })\n+\t    self.logger.debug('Adding URL: '+feeds_params['customURL'])\n+\t    streams['best'] = stream\n+\t    return streams\n+\n+\tfor (k,q) in quals.iteritems():\n+            info = {}\n+\n+\t    res = urlget(q)\n+\t    if not res.status_code == requests.codes.ok:\n+\t\tnext",
        "path": "src/livestreamer/plugins/dailymotion.py",
        "position": null,
        "original_position": 129,
        "commit_id": "4b48dd87e19befa593f31135f2293f3ae11d7846",
        "original_commit_id": "03c7ee781cea1e31f25f76d34b15156ce9470a9f",
        "user": {
            "login": "chrippa",
            "id": 22396,
            "node_id": "MDQ6VXNlcjIyMzk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/22396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrippa",
            "html_url": "https://github.com/chrippa",
            "followers_url": "https://api.github.com/users/chrippa/followers",
            "following_url": "https://api.github.com/users/chrippa/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrippa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrippa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrippa/subscriptions",
            "organizations_url": "https://api.github.com/users/chrippa/orgs",
            "repos_url": "https://api.github.com/users/chrippa/repos",
            "events_url": "https://api.github.com/users/chrippa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrippa/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "urlget will raise a PluginError on error, use this instead:\n\n```\ntry:\n  res = urlget(q, exception=IOError)\nexcept IOError:\n  continue\n```\n",
        "created_at": "2012-11-15T20:34:55Z",
        "updated_at": "2012-11-15T21:42:17Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/35#discussion_r2144259",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/35",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/2144259"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/35#discussion_r2144259"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/35"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/2144277",
        "pull_request_review_id": null,
        "id": 2144277,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDQyNzc=",
        "diff_hunk": "@@ -0,0 +1,168 @@\n+from livestreamer.compat import str, bytes\n+from livestreamer.options import Options\n+from livestreamer.plugins import Plugin, PluginError, NoStreamsError\n+from livestreamer.stream import RTMPStream\n+from livestreamer.utils import urlget, verifyjson\n+\n+import re\n+import json\n+import requests\n+\n+class DailyMotion(Plugin):\n+    options = Options({\n+        \"cookie\": None\n+    })\n+\n+    qualityDict = {\n+\t    'ld'    : '240p',\n+\t    'sd'    : '360p',\n+\t    'hq'    : '480p',\n+\t    'hd720' : '720p',\n+\t    'hd1080': '1080p'\n+    }\n+\n+    StreamInfoURL = \"http://www.dailymotion.com/sequence/full/{0}\"\n+    MetadataURL = \"https://api.dailymotion.com/video/{0}\"\n+\n+    @classmethod\n+    def can_handle_url(self, url):\n+\t# valid urls are of the form dailymotion.com/video/[a-z]{5}.*\n+\t# but we make 'video/' optionnal and allow for dai.ly as shortcut\n+        return (\"dailymotion.com\" in url) or (\"dai.ly\" in url)\n+\n+    def check_channel_live(self, id):\n+        url = self.MetadataURL.format(self.channelname) + '?fields=mode'\n+\tres = urlget(url)\n+        if len(res.json) == 0:\n+            raise PluginError(\"No stream token in JSON\")\n+\treturn res.json['mode'] == 'live'\n+\n+    def _get_channel_name(self, url):\n+        rpart = url.rstrip(\"/\").rpartition(\"/\")[2].lower()\n+\tname = re.sub('_.*', '', rpart)\n+\treturn name\n+\n+    def _get_node_by_name(self, parent, name):\n+\tres = None\n+\tfor i in range(len(parent)):\n+\t    if parent[i]['name'] == name:\n+\t\treturn parent[i]\n+\n+\n+    def _get_rtmp_streams(self):\n+        def clean_tag(tag):\n+            if tag[0] == \"_\":\n+                return tag[1:]\n+            else:\n+                return tag\n+\n+        url = self.MetadataURL.format(self.channelname)\n+\n+        self.logger.debug(\"Fetching stream info\")\n+        res = urlget(url)\n+\n+        if not isinstance(res.json, dict):\n+            raise PluginError(\"Stream info response is not JSON\")\n+\n+        if len(res.json) == 0:\n+            raise PluginError(\"No stream token in JSON\")\n+\n+\tchan_id = verifyjson(res.json, 'id')\n+\n+        streams = {}\n+\n+\tif not self.check_channel_live(chan_id):\n+\t    return streams\n+\n+        url = self.StreamInfoURL.format(self.channelname)\n+\n+\tself.logger.debug('JSON data url: '+url)\n+\n+        res = urlget(url)\n+\n+        if not isinstance(res.json, dict):\n+            raise PluginError(\"Stream info response is not JSON\")\n+\n+        if len(res.json) == 0:\n+            raise PluginError(\"No stream token in JSON\")\n+\n+\tchan_info_json = res.json\n+\n+\t# This is ugly, not sure how to fix it.\n+\tback_json_node = chan_info_json['sequence'][0]['layerList'][0]\n+\tassert(back_json_node['name'] == 'background')\n+\n+\trep_node = self._get_node_by_name(back_json_node['sequenceList'], 'reporting')['layerList']\n+\tmain_node = self._get_node_by_name(back_json_node['sequenceList'], 'main')['layerList']\n+\n+\tswfurl = self._get_node_by_name(rep_node, 'reporting')['param']['extraParams']['videoSwfURL']\n+\tfeeds_params = self._get_node_by_name(main_node, 'video')['param']\n+\n+\n+\t# Different feed qualities are available are a dict under 'live'\n+\t# In some cases where there's only 1 quality available,\n+\t# it seems the 'live' is absent. We use the single stream available\n+\t# under the 'customURL' key.\n+\n+\tif feeds_params.has_key('live') and len(feeds_params['live']) > 0:\n+\t    quals = feeds_params['live']\n+\telse:\n+\t    res = urlget(feeds_params['customURL'])\n+\t    if not res.status_code == requests.codes.ok:\n+\t\treturn streams\n+\t    rtmpurl = res.text\n+\n+            stream = RTMPStream(self.session, {\n+                \"rtmp\": rtmpurl,\n+                \"swfVfy\": swfurl,\n+                \"live\": True\n+            })\n+\t    self.logger.debug('Adding URL: '+feeds_params['customURL'])\n+\t    streams['best'] = stream\n+\t    return streams\n+\n+\tfor (k,q) in quals.iteritems():\n+            info = {}\n+\n+\t    res = urlget(q)\n+\t    if not res.status_code == requests.codes.ok:\n+\t\tnext\n+\t    rtmpurl = res.text\n+\n+            stream = RTMPStream(self.session, {\n+                \"rtmp\": rtmpurl,\n+                \"swfVfy\": swfurl,\n+                \"live\": True\n+            })\n+\t    self.logger.debug('Adding URL: '+rtmpurl)\n+\n+\t    if self.qualityDict.has_key(k):",
        "path": "src/livestreamer/plugins/dailymotion.py",
        "position": null,
        "original_position": 139,
        "commit_id": "4b48dd87e19befa593f31135f2293f3ae11d7846",
        "original_commit_id": "03c7ee781cea1e31f25f76d34b15156ce9470a9f",
        "user": {
            "login": "chrippa",
            "id": 22396,
            "node_id": "MDQ6VXNlcjIyMzk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/22396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrippa",
            "html_url": "https://github.com/chrippa",
            "followers_url": "https://api.github.com/users/chrippa/followers",
            "following_url": "https://api.github.com/users/chrippa/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrippa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrippa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrippa/subscriptions",
            "organizations_url": "https://api.github.com/users/chrippa/orgs",
            "repos_url": "https://api.github.com/users/chrippa/repos",
            "events_url": "https://api.github.com/users/chrippa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrippa/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Use the \"if key in dict\" syntax instead, looks prettier.\n",
        "created_at": "2012-11-15T20:36:27Z",
        "updated_at": "2012-11-15T21:42:17Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/35#discussion_r2144277",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/35",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/2144277"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/35#discussion_r2144277"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/35"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/2144300",
        "pull_request_review_id": null,
        "id": 2144300,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDQzMDA=",
        "diff_hunk": "@@ -0,0 +1,168 @@\n+from livestreamer.compat import str, bytes\n+from livestreamer.options import Options\n+from livestreamer.plugins import Plugin, PluginError, NoStreamsError\n+from livestreamer.stream import RTMPStream\n+from livestreamer.utils import urlget, verifyjson\n+\n+import re\n+import json\n+import requests\n+\n+class DailyMotion(Plugin):\n+    options = Options({\n+        \"cookie\": None\n+    })\n+\n+    qualityDict = {\n+\t    'ld'    : '240p',\n+\t    'sd'    : '360p',\n+\t    'hq'    : '480p',\n+\t    'hd720' : '720p',\n+\t    'hd1080': '1080p'\n+    }\n+\n+    StreamInfoURL = \"http://www.dailymotion.com/sequence/full/{0}\"\n+    MetadataURL = \"https://api.dailymotion.com/video/{0}\"\n+\n+    @classmethod\n+    def can_handle_url(self, url):\n+\t# valid urls are of the form dailymotion.com/video/[a-z]{5}.*\n+\t# but we make 'video/' optionnal and allow for dai.ly as shortcut\n+        return (\"dailymotion.com\" in url) or (\"dai.ly\" in url)\n+\n+    def check_channel_live(self, id):\n+        url = self.MetadataURL.format(self.channelname) + '?fields=mode'\n+\tres = urlget(url)\n+        if len(res.json) == 0:\n+            raise PluginError(\"No stream token in JSON\")\n+\treturn res.json['mode'] == 'live'\n+\n+    def _get_channel_name(self, url):\n+        rpart = url.rstrip(\"/\").rpartition(\"/\")[2].lower()\n+\tname = re.sub('_.*', '', rpart)\n+\treturn name\n+\n+    def _get_node_by_name(self, parent, name):\n+\tres = None\n+\tfor i in range(len(parent)):\n+\t    if parent[i]['name'] == name:\n+\t\treturn parent[i]\n+\n+\n+    def _get_rtmp_streams(self):\n+        def clean_tag(tag):\n+            if tag[0] == \"_\":\n+                return tag[1:]\n+            else:\n+                return tag\n+\n+        url = self.MetadataURL.format(self.channelname)\n+\n+        self.logger.debug(\"Fetching stream info\")\n+        res = urlget(url)\n+\n+        if not isinstance(res.json, dict):\n+            raise PluginError(\"Stream info response is not JSON\")\n+\n+        if len(res.json) == 0:\n+            raise PluginError(\"No stream token in JSON\")\n+\n+\tchan_id = verifyjson(res.json, 'id')\n+\n+        streams = {}\n+\n+\tif not self.check_channel_live(chan_id):\n+\t    return streams\n+\n+        url = self.StreamInfoURL.format(self.channelname)\n+\n+\tself.logger.debug('JSON data url: '+url)\n+\n+        res = urlget(url)\n+\n+        if not isinstance(res.json, dict):\n+            raise PluginError(\"Stream info response is not JSON\")\n+\n+        if len(res.json) == 0:\n+            raise PluginError(\"No stream token in JSON\")\n+\n+\tchan_info_json = res.json\n+\n+\t# This is ugly, not sure how to fix it.\n+\tback_json_node = chan_info_json['sequence'][0]['layerList'][0]\n+\tassert(back_json_node['name'] == 'background')\n+\n+\trep_node = self._get_node_by_name(back_json_node['sequenceList'], 'reporting')['layerList']\n+\tmain_node = self._get_node_by_name(back_json_node['sequenceList'], 'main')['layerList']\n+\n+\tswfurl = self._get_node_by_name(rep_node, 'reporting')['param']['extraParams']['videoSwfURL']\n+\tfeeds_params = self._get_node_by_name(main_node, 'video')['param']\n+\n+\n+\t# Different feed qualities are available are a dict under 'live'\n+\t# In some cases where there's only 1 quality available,\n+\t# it seems the 'live' is absent. We use the single stream available\n+\t# under the 'customURL' key.\n+\n+\tif feeds_params.has_key('live') and len(feeds_params['live']) > 0:\n+\t    quals = feeds_params['live']\n+\telse:\n+\t    res = urlget(feeds_params['customURL'])\n+\t    if not res.status_code == requests.codes.ok:\n+\t\treturn streams\n+\t    rtmpurl = res.text\n+\n+            stream = RTMPStream(self.session, {\n+                \"rtmp\": rtmpurl,\n+                \"swfVfy\": swfurl,\n+                \"live\": True\n+            })\n+\t    self.logger.debug('Adding URL: '+feeds_params['customURL'])\n+\t    streams['best'] = stream\n+\t    return streams\n+\n+\tfor (k,q) in quals.iteritems():\n+            info = {}\n+\n+\t    res = urlget(q)\n+\t    if not res.status_code == requests.codes.ok:\n+\t\tnext\n+\t    rtmpurl = res.text\n+\n+            stream = RTMPStream(self.session, {\n+                \"rtmp\": rtmpurl,\n+                \"swfVfy\": swfurl,\n+                \"live\": True\n+            })\n+\t    self.logger.debug('Adding URL: '+rtmpurl)\n+\n+\t    if self.qualityDict.has_key(k):\n+\t\tsname = self.qualityDict[k]\n+\t    else:\n+\t\tsname = k\n+\n+            streams[sname] = stream\n+\n+        return streams\n+\n+    def _get_streams(self):\n+        self.channelname = self._get_channel_name(self.url)\n+\n+        if not self.channelname:\n+            raise NoStreamsError(self.url)\n+\n+        streams = {}\n+\n+        if RTMPStream.is_usable(self.session):\n+            try:\n+                rtmpstreams = self._get_rtmp_streams()\n+                streams.update(rtmpstreams)\n+            except PluginError as err:\n+                self.logger.error(\"Error when fetching RTMP stream info: {0}\", str(err))\n+        else:\n+            self.logger.warning(\"rtmpdump is not usable, only HLS streams will be available\")\n+",
        "path": "src/livestreamer/plugins/dailymotion.py",
        "position": null,
        "original_position": 164,
        "commit_id": "4b48dd87e19befa593f31135f2293f3ae11d7846",
        "original_commit_id": "03c7ee781cea1e31f25f76d34b15156ce9470a9f",
        "user": {
            "login": "chrippa",
            "id": 22396,
            "node_id": "MDQ6VXNlcjIyMzk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/22396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrippa",
            "html_url": "https://github.com/chrippa",
            "followers_url": "https://api.github.com/users/chrippa/followers",
            "following_url": "https://api.github.com/users/chrippa/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrippa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrippa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrippa/subscriptions",
            "organizations_url": "https://api.github.com/users/chrippa/orgs",
            "repos_url": "https://api.github.com/users/chrippa/repos",
            "events_url": "https://api.github.com/users/chrippa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrippa/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "There is no need to check if RTMPStream is usable here since there are only RTMP streams available. This check is only needed when there are multiple streaming technologies mixed and the plugin can provide one without the other.\n",
        "created_at": "2012-11-15T20:38:15Z",
        "updated_at": "2012-11-15T21:42:17Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/35#discussion_r2144300",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/35",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/2144300"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/35#discussion_r2144300"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/35"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/2216054",
        "pull_request_review_id": null,
        "id": 2216054,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMTYwNTQ=",
        "diff_hunk": "@@ -55,7 +64,7 @@ def _check_cmd(self):\n     def cmdline(self):\n         cmd = self._check_cmd()\n \n-        return str(cmd.bake(**self.params))\n+        return 'rtmp\\n' + '\\n'.join(str(x) for x in sorted(cmd._extract_call_args(self.params)[1].values()))",
        "path": "src/livestreamer/stream/__init__.py",
        "position": null,
        "original_position": 28,
        "commit_id": "5b268a9cf1a157bbd2fecd3e61c110f046680ab1",
        "original_commit_id": "607c5d71eee1e179a3859d4537b528f75f9b7333",
        "user": {
            "login": "john-peterson",
            "id": 207571,
            "node_id": "MDQ6VXNlcjIwNzU3MQ==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/207571?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/john-peterson",
            "html_url": "https://github.com/john-peterson",
            "followers_url": "https://api.github.com/users/john-peterson/followers",
            "following_url": "https://api.github.com/users/john-peterson/following{/other_user}",
            "gists_url": "https://api.github.com/users/john-peterson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/john-peterson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/john-peterson/subscriptions",
            "organizations_url": "https://api.github.com/users/john-peterson/orgs",
            "repos_url": "https://api.github.com/users/john-peterson/repos",
            "events_url": "https://api.github.com/users/john-peterson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/john-peterson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The purpose of `sorted` (sort by argument name) is to return the arguments in a predictable order.\n",
        "created_at": "2012-11-25T03:04:24Z",
        "updated_at": "2012-12-30T23:37:03Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/45#discussion_r2216054",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/45",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/2216054"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/45#discussion_r2216054"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/45"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/8072912",
        "pull_request_review_id": null,
        "id": 8072912,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgwNzI5MTI=",
        "diff_hunk": "@@ -0,0 +1,67 @@\n+import re\n+import requests\n+\n+from livestreamer.compat import str, bytes, urlparse\n+from livestreamer.exceptions import PluginError, NoStreamsError\n+from livestreamer.plugin import Plugin\n+from livestreamer.stream import RTMPStream\n+from livestreamer.utils import urlget\n+\n+\n+\n+\n+class N24de(Plugin):\n+    server = \"rtmp://pssimn24livefs.fplive.net/pssimn24/\"",
        "path": "src/livestreamer/plugins/n24de.py",
        "position": 14,
        "original_position": 14,
        "commit_id": "dd95b2599f79171d70ff442d041df55cc3484351",
        "original_commit_id": "dd95b2599f79171d70ff442d041df55cc3484351",
        "user": {
            "login": "chrippa",
            "id": 22396,
            "node_id": "MDQ6VXNlcjIyMzk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/22396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrippa",
            "html_url": "https://github.com/chrippa",
            "followers_url": "https://api.github.com/users/chrippa/followers",
            "following_url": "https://api.github.com/users/chrippa/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrippa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrippa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrippa/subscriptions",
            "organizations_url": "https://api.github.com/users/chrippa/orgs",
            "repos_url": "https://api.github.com/users/chrippa/repos",
            "events_url": "https://api.github.com/users/chrippa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrippa/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You already extract the server URL from the page, so this variable seems unnecessary.\n",
        "created_at": "2013-12-03T19:51:07Z",
        "updated_at": "2013-12-03T19:51:07Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/233#discussion_r8072912",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/233",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/8072912"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/233#discussion_r8072912"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/233"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/8072914",
        "pull_request_review_id": null,
        "id": 8072914,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgwNzI5MTQ=",
        "diff_hunk": "@@ -0,0 +1,67 @@\n+import re\n+import requests\n+\n+from livestreamer.compat import str, bytes, urlparse\n+from livestreamer.exceptions import PluginError, NoStreamsError\n+from livestreamer.plugin import Plugin\n+from livestreamer.stream import RTMPStream\n+from livestreamer.utils import urlget\n+\n+\n+\n+\n+class N24de(Plugin):\n+    server = \"rtmp://pssimn24livefs.fplive.net/pssimn24/\"\n+    SWFURL = \"http://www.n24.de/_swf/HomePlayer.swf\"\n+    PageURL = \"http://www.n24.de\"\n+    \n+\n+    @classmethod\n+    def can_handle_url(self, url):\n+        return \"n24.de\" in url\n+\n+        \n+    def is_live_stream(self,url):\n+        return \"pssimn24live\" in url\n+      \n+    def get_video_source(self,text):\n+        match = re.search(\"ideoFlashSource = \\\"(.+?)\\\";\", text)\n+        if not match:\n+            return NoStreamsError(self.url)  \n+        return match.group(1)\t\n+\n+      \n+    def _get_streams(self):\n+        if not RTMPStream.is_usable(self.session):\n+            raise PluginError(\"rtmpdump is not usable and required by Filmon plugin\")",
        "path": "src/livestreamer/plugins/n24de.py",
        "position": 36,
        "original_position": 36,
        "commit_id": "dd95b2599f79171d70ff442d041df55cc3484351",
        "original_commit_id": "dd95b2599f79171d70ff442d041df55cc3484351",
        "user": {
            "login": "chrippa",
            "id": 22396,
            "node_id": "MDQ6VXNlcjIyMzk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/22396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrippa",
            "html_url": "https://github.com/chrippa",
            "followers_url": "https://api.github.com/users/chrippa/followers",
            "following_url": "https://api.github.com/users/chrippa/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrippa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrippa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrippa/subscriptions",
            "organizations_url": "https://api.github.com/users/chrippa/orgs",
            "repos_url": "https://api.github.com/users/chrippa/repos",
            "events_url": "https://api.github.com/users/chrippa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrippa/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You forgot to change this line when copy-pasting.\n",
        "created_at": "2013-12-03T19:51:09Z",
        "updated_at": "2013-12-03T19:51:09Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/233#discussion_r8072914",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/233",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/8072914"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/233#discussion_r8072914"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/233"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/8072915",
        "pull_request_review_id": null,
        "id": 8072915,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgwNzI5MTU=",
        "diff_hunk": "@@ -0,0 +1,67 @@\n+import re\n+import requests\n+\n+from livestreamer.compat import str, bytes, urlparse\n+from livestreamer.exceptions import PluginError, NoStreamsError\n+from livestreamer.plugin import Plugin\n+from livestreamer.stream import RTMPStream\n+from livestreamer.utils import urlget\n+\n+\n+\n+\n+class N24de(Plugin):\n+    server = \"rtmp://pssimn24livefs.fplive.net/pssimn24/\"\n+    SWFURL = \"http://www.n24.de/_swf/HomePlayer.swf\"\n+    PageURL = \"http://www.n24.de\"\n+    \n+\n+    @classmethod\n+    def can_handle_url(self, url):\n+        return \"n24.de\" in url\n+\n+        \n+    def is_live_stream(self,url):\n+        return \"pssimn24live\" in url\n+      \n+    def get_video_source(self,text):\n+        match = re.search(\"ideoFlashSource = \\\"(.+?)\\\";\", text)\n+        if not match:\n+            return NoStreamsError(self.url)  \n+        return match.group(1)\t\n+\n+      \n+    def _get_streams(self):\n+        if not RTMPStream.is_usable(self.session):\n+            raise PluginError(\"rtmpdump is not usable and required by Filmon plugin\")\n+ \n+        self.rsession = requests.session()\n+        res = urlget(self.url, session=self.rsession)",
        "path": "src/livestreamer/plugins/n24de.py",
        "position": 39,
        "original_position": 39,
        "commit_id": "dd95b2599f79171d70ff442d041df55cc3484351",
        "original_commit_id": "dd95b2599f79171d70ff442d041df55cc3484351",
        "user": {
            "login": "chrippa",
            "id": 22396,
            "node_id": "MDQ6VXNlcjIyMzk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/22396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrippa",
            "html_url": "https://github.com/chrippa",
            "followers_url": "https://api.github.com/users/chrippa/followers",
            "following_url": "https://api.github.com/users/chrippa/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrippa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrippa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrippa/subscriptions",
            "organizations_url": "https://api.github.com/users/chrippa/orgs",
            "repos_url": "https://api.github.com/users/chrippa/repos",
            "events_url": "https://api.github.com/users/chrippa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrippa/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "A requests session does not seem to be needed here.\n",
        "created_at": "2013-12-03T19:51:10Z",
        "updated_at": "2013-12-03T19:51:10Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/233#discussion_r8072915",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/233",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/8072915"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/233#discussion_r8072915"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/233"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/8072917",
        "pull_request_review_id": null,
        "id": 8072917,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgwNzI5MTc=",
        "diff_hunk": "@@ -0,0 +1,67 @@\n+import re\n+import requests\n+\n+from livestreamer.compat import str, bytes, urlparse\n+from livestreamer.exceptions import PluginError, NoStreamsError\n+from livestreamer.plugin import Plugin\n+from livestreamer.stream import RTMPStream\n+from livestreamer.utils import urlget\n+\n+\n+\n+\n+class N24de(Plugin):\n+    server = \"rtmp://pssimn24livefs.fplive.net/pssimn24/\"\n+    SWFURL = \"http://www.n24.de/_swf/HomePlayer.swf\"\n+    PageURL = \"http://www.n24.de\"\n+    \n+\n+    @classmethod\n+    def can_handle_url(self, url):\n+        return \"n24.de\" in url\n+\n+        \n+    def is_live_stream(self,url):\n+        return \"pssimn24live\" in url\n+      \n+    def get_video_source(self,text):\n+        match = re.search(\"ideoFlashSource = \\\"(.+?)\\\";\", text)\n+        if not match:\n+            return NoStreamsError(self.url)  \n+        return match.group(1)\t\n+\n+      \n+    def _get_streams(self):\n+        if not RTMPStream.is_usable(self.session):\n+            raise PluginError(\"rtmpdump is not usable and required by Filmon plugin\")\n+ \n+        self.rsession = requests.session()\n+        res = urlget(self.url, session=self.rsession)\n+\n+        if not N24de.get_video_source(self,res.text):\n+            raise NoStreamsError(self.url)\n+\n+        match = re.search(\"videoFlashconnectionUrl = \\\"(.+?)\\\";\", res.text)\n+        if not match:\n+            raise NoStreamsError(self.url)  \n+  \n+        videoFlashconnectionUrl = match.group(1)\n+        self.server = videoFlashconnectionUrl\n+\n+        if not N24de.is_live_stream(self,videoFlashconnectionUrl):\n+            self.playpath = N24de.get_video_source(self,res.text)\n+        else:\n+            self.playpath = \"stream1\"\n+",
        "path": "src/livestreamer/plugins/n24de.py",
        "position": 55,
        "original_position": 55,
        "commit_id": "dd95b2599f79171d70ff442d041df55cc3484351",
        "original_commit_id": "dd95b2599f79171d70ff442d041df55cc3484351",
        "user": {
            "login": "chrippa",
            "id": 22396,
            "node_id": "MDQ6VXNlcjIyMzk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/22396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrippa",
            "html_url": "https://github.com/chrippa",
            "followers_url": "https://api.github.com/users/chrippa/followers",
            "following_url": "https://api.github.com/users/chrippa/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrippa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrippa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrippa/subscriptions",
            "organizations_url": "https://api.github.com/users/chrippa/orgs",
            "repos_url": "https://api.github.com/users/chrippa/repos",
            "events_url": "https://api.github.com/users/chrippa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrippa/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The way you are calling `get_video_source` is not how you are supposed to call a method on a object in Python. Line 41-54 could be improved like this:\n\n``` python\n\nmatch = re.search(\"videoFlashconnectionUrl = \\\"(.+?)\\\";\", res.text)\nif not match:\n    raise NoStreamsError(self.url)\nserver = match.group(1)\n\nmatch = re.search(\"videoFlashSource = \\\"(.+?)\\\";\", res.text)\nif not match:\n    raise NoStreamsError(self.url)\n\nif \"pssimn24live\" in server:\n    playpath = \"stream1\"\nelse:\n    playpath = match.group(1)\n```\n\nThis also makes the `get_video_source` and `is_live_stream` methods obsolete.\n\nI can't check live page since it returns 404 for me, but is hardcoding the live playpath to \"stream1\" really necessary? Is it not contained in \"videoFlashSource\" on the page?\n",
        "created_at": "2013-12-03T19:51:12Z",
        "updated_at": "2013-12-03T19:51:12Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/233#discussion_r8072917",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/233",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/8072917"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/233#discussion_r8072917"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/233"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/8194554",
        "pull_request_review_id": null,
        "id": 8194554,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxOTQ1NTQ=",
        "diff_hunk": "@@ -110,6 +110,10 @@ def _create_arguments(self):\n         args = self.args.format(filename=filename)\n         args = args.replace(\"\\\\\", \"\\\\\\\\\")\n \n+        # quote command because it can contain space\n+        if cmd.find('\"') < 0:\n+            cmd = '\"' + cmd + '\"'\n+\n         return shlex.split(cmd) + shlex.split(args)",
        "path": "src/livestreamer_cli/output.py",
        "position": null,
        "original_position": 8,
        "commit_id": "5f157bf2071d512b3daf9edef480d131cbc2f2f8",
        "original_commit_id": "625571cf7826911dabe3ab64ba8abb2a8b2de3d7",
        "user": {
            "login": "vadmium",
            "id": 1024659,
            "node_id": "MDQ6VXNlcjEwMjQ2NTk=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1024659?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vadmium",
            "html_url": "https://github.com/vadmium",
            "followers_url": "https://api.github.com/users/vadmium/followers",
            "following_url": "https://api.github.com/users/vadmium/following{/other_user}",
            "gists_url": "https://api.github.com/users/vadmium/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vadmium/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vadmium/subscriptions",
            "organizations_url": "https://api.github.com/users/vadmium/orgs",
            "repos_url": "https://api.github.com/users/vadmium/repos",
            "events_url": "https://api.github.com/users/vadmium/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vadmium/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I was going to say maybe use shlex.quote(), but then I realised you could probably cut out the middle man and do\n\n``` python\nreturn [cmd] + shlex.split(args)\n```\n\nif you got rid of the backslash escaping stuff for _cmd_ further up.\n\nPS: just noticed shlex.quote() is Python 3.3 only, but the real question is: Is there any point putting _cmd_ through shlex.split() if you are quoting all the spaces in the first place?\n",
        "created_at": "2013-12-09T11:46:40Z",
        "updated_at": "2013-12-09T12:18:55Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/237#discussion_r8194554",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/237",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/8194554"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/237#discussion_r8194554"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/237"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/9218162",
        "pull_request_review_id": null,
        "id": 9218162,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkyMTgxNjI=",
        "diff_hunk": "@@ -210,7 +210,16 @@ def _create_api(self):\n             self.cache.get('session_id'), self.cache.get('auth'))\n \n         self.logger.debug('Creating session...')\n-        expires = api.start_session(self._get_device_id())\n+        try:\n+            expires = api.start_session(self._get_device_id())\n+        except APIError as e:\n+            if e.message == 'Unauthenticated request':",
        "path": "src/livestreamer/plugins/crunchyroll.py",
        "position": null,
        "original_position": 8,
        "commit_id": "9d048b98c110fc4cb12b34e6ed959e3b7cf6c801",
        "original_commit_id": "3900bafa3a81638f58488033f9515f9cc5683e79",
        "user": {
            "login": "vadmium",
            "id": 1024659,
            "node_id": "MDQ6VXNlcjEwMjQ2NTk=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1024659?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vadmium",
            "html_url": "https://github.com/vadmium",
            "followers_url": "https://api.github.com/users/vadmium/followers",
            "following_url": "https://api.github.com/users/vadmium/following{/other_user}",
            "gists_url": "https://api.github.com/users/vadmium/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vadmium/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vadmium/subscriptions",
            "organizations_url": "https://api.github.com/users/vadmium/orgs",
            "repos_url": "https://api.github.com/users/vadmium/repos",
            "events_url": "https://api.github.com/users/vadmium/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vadmium/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "DeprecationWarning: BaseException.message has been deprecated as of Python 2.6\n\nIt doesn\u2019t even exist in Python 3. You should probably use \u201ce.args[0]\u201d or something instead. I see there are a couple other instances of \u201cmessage\u201d already in this file.\n",
        "created_at": "2014-01-28T05:44:12Z",
        "updated_at": "2014-01-28T06:04:36Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/272#discussion_r9218162",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/272",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/9218162"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/272#discussion_r9218162"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/272"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/13123004",
        "pull_request_review_id": null,
        "id": 13123004,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTIzMDA0",
        "diff_hunk": "@@ -1,10 +1,15 @@\n import re\n+from functools import reduce\n \n-from livestreamer.compat import urlparse\n-from livestreamer.exceptions import PluginError\n+from livestreamer.compat import urlparse, unquote, urlparse",
        "path": "src/livestreamer/plugins/dailymotion.py",
        "position": null,
        "original_position": 6,
        "commit_id": "4a93001967f9361f958514af61e14a90e5228783",
        "original_commit_id": "56d9a89f8c5db909e200cb426ff4c3b2a99dcd9f",
        "user": {
            "login": "chrippa",
            "id": 22396,
            "node_id": "MDQ6VXNlcjIyMzk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/22396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrippa",
            "html_url": "https://github.com/chrippa",
            "followers_url": "https://api.github.com/users/chrippa/followers",
            "following_url": "https://api.github.com/users/chrippa/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrippa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrippa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrippa/subscriptions",
            "organizations_url": "https://api.github.com/users/chrippa/orgs",
            "repos_url": "https://api.github.com/users/chrippa/repos",
            "events_url": "https://api.github.com/users/chrippa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrippa/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "urlparse imported twice.\n",
        "created_at": "2014-05-28T09:44:28Z",
        "updated_at": "2014-05-28T11:40:48Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/402#discussion_r13123004",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/402",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/13123004"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/402#discussion_r13123004"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/402"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/13123077",
        "pull_request_review_id": null,
        "id": 13123077,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTIzMDc3",
        "diff_hunk": "@@ -20,7 +25,114 @@\n }\n RTMP_SPLIT_REGEX = r\"(?P<host>rtmp://[^/]+)/(?P<app>[^/]+)/(?P<playpath>.+)\"\n STREAM_INFO_URL = \"http://www.dailymotion.com/sequence/full/{0}\"\n+FLV_HEADER = b'\\x46\\x4C\\x56\\x01\\x05\\x00\\x00\\x00\\x09\\x00\\x00\\x00\\x00'\n \n+class DailyMotionWorker(SegmentedStreamWorker):\n+\n+    def __init__(self, reader):\n+        self.segment_min = reader.segment_min\n+        self.segment_max = reader.segment_max\n+        SegmentedStreamWorker.__init__(self, reader)\n+\n+    def iter_segments(self):\n+        segment = 1\n+        while not (segment > self.segment_max or self.closed):\n+            yield segment\n+            segment += 1\n+",
        "path": "src/livestreamer/plugins/dailymotion.py",
        "position": null,
        "original_position": 37,
        "commit_id": "4a93001967f9361f958514af61e14a90e5228783",
        "original_commit_id": "56d9a89f8c5db909e200cb426ff4c3b2a99dcd9f",
        "user": {
            "login": "chrippa",
            "id": 22396,
            "node_id": "MDQ6VXNlcjIyMzk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/22396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrippa",
            "html_url": "https://github.com/chrippa",
            "followers_url": "https://api.github.com/users/chrippa/followers",
            "following_url": "https://api.github.com/users/chrippa/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrippa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrippa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrippa/subscriptions",
            "organizations_url": "https://api.github.com/users/chrippa/orgs",
            "repos_url": "https://api.github.com/users/chrippa/repos",
            "events_url": "https://api.github.com/users/chrippa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrippa/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You can replace the loop with `return range(1, self.segment_max + 1)`. But also import `range` from `livestreamer.compat` to get the iterator version of range on Python 2.\n",
        "created_at": "2014-05-28T09:46:29Z",
        "updated_at": "2014-05-28T11:40:48Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/402#discussion_r13123077",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/402",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/13123077"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/402#discussion_r13123077"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/402"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/13123111",
        "pull_request_review_id": null,
        "id": 13123111,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTIzMTEx",
        "diff_hunk": "@@ -20,7 +25,114 @@\n }\n RTMP_SPLIT_REGEX = r\"(?P<host>rtmp://[^/]+)/(?P<app>[^/]+)/(?P<playpath>.+)\"\n STREAM_INFO_URL = \"http://www.dailymotion.com/sequence/full/{0}\"\n+FLV_HEADER = b'\\x46\\x4C\\x56\\x01\\x05\\x00\\x00\\x00\\x09\\x00\\x00\\x00\\x00'\n \n+class DailyMotionWorker(SegmentedStreamWorker):\n+\n+    def __init__(self, reader):\n+        self.segment_min = reader.segment_min\n+        self.segment_max = reader.segment_max\n+        SegmentedStreamWorker.__init__(self, reader)\n+\n+    def iter_segments(self):\n+        segment = 1\n+        while not (segment > self.segment_max or self.closed):\n+            yield segment\n+            segment += 1\n+\n+class DailyMotionWriter(SegmentedStreamWriter):\n+    def __init__(self, reader):\n+        SegmentedStreamWriter.__init__(self, reader)\n+\n+        self.concater = FLVTagConcat(flatten_timestamps=True,\n+                                     sync_headers=True)\n+        self.uri_template = reader.uri_template\n+\n+    def open_segment(self, segment, retries=3):\n+        if not retries:\n+            return\n+\n+        try:\n+            return http.get(self.uri_template.format(segment), timeout=10,\n+                            exception=StreamError)\n+        except StreamError as err:\n+            self.logger.error(\"Failed to open segment {0}: {1}\", segment, err)\n+            return self.open_segment(segment, retries - 1)\n+\n+    def write(self, segment, segment_size=8192):\n+        res = self.open_segment(segment)\n+        if not res:\n+            return\n+\n+        try:\n+            # The VOD data stream is missing the right FLV header so we add it here\n+            for data in self.concater.iter_chunks(buf=FLV_HEADER+res.content):",
        "path": "src/livestreamer/plugins/dailymotion.py",
        "position": null,
        "original_position": 64,
        "commit_id": "4a93001967f9361f958514af61e14a90e5228783",
        "original_commit_id": "56d9a89f8c5db909e200cb426ff4c3b2a99dcd9f",
        "user": {
            "login": "chrippa",
            "id": 22396,
            "node_id": "MDQ6VXNlcjIyMzk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/22396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrippa",
            "html_url": "https://github.com/chrippa",
            "followers_url": "https://api.github.com/users/chrippa/followers",
            "following_url": "https://api.github.com/users/chrippa/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrippa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrippa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrippa/subscriptions",
            "organizations_url": "https://api.github.com/users/chrippa/orgs",
            "repos_url": "https://api.github.com/users/chrippa/repos",
            "events_url": "https://api.github.com/users/chrippa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrippa/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Instead of adding the FLV header you can pass `skip_header=True`.\n",
        "created_at": "2014-05-28T09:47:24Z",
        "updated_at": "2014-05-28T11:40:48Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/402#discussion_r13123111",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/402",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/13123111"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/402#discussion_r13123111"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/402"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/13123190",
        "pull_request_review_id": null,
        "id": 13123190,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTIzMTkw",
        "diff_hunk": "@@ -20,7 +25,114 @@\n }\n RTMP_SPLIT_REGEX = r\"(?P<host>rtmp://[^/]+)/(?P<app>[^/]+)/(?P<playpath>.+)\"\n STREAM_INFO_URL = \"http://www.dailymotion.com/sequence/full/{0}\"\n+FLV_HEADER = b'\\x46\\x4C\\x56\\x01\\x05\\x00\\x00\\x00\\x09\\x00\\x00\\x00\\x00'\n \n+class DailyMotionWorker(SegmentedStreamWorker):\n+\n+    def __init__(self, reader):\n+        self.segment_min = reader.segment_min\n+        self.segment_max = reader.segment_max\n+        SegmentedStreamWorker.__init__(self, reader)\n+\n+    def iter_segments(self):\n+        segment = 1\n+        while not (segment > self.segment_max or self.closed):\n+            yield segment\n+            segment += 1\n+\n+class DailyMotionWriter(SegmentedStreamWriter):\n+    def __init__(self, reader):\n+        SegmentedStreamWriter.__init__(self, reader)\n+\n+        self.concater = FLVTagConcat(flatten_timestamps=True,\n+                                     sync_headers=True)\n+        self.uri_template = reader.uri_template\n+\n+    def open_segment(self, segment, retries=3):\n+        if not retries:\n+            return\n+\n+        try:\n+            return http.get(self.uri_template.format(segment), timeout=10,\n+                            exception=StreamError)\n+        except StreamError as err:\n+            self.logger.error(\"Failed to open segment {0}: {1}\", segment, err)\n+            return self.open_segment(segment, retries - 1)\n+\n+    def write(self, segment, segment_size=8192):\n+        res = self.open_segment(segment)\n+        if not res:\n+            return\n+\n+        try:\n+            # The VOD data stream is missing the right FLV header so we add it here\n+            for data in self.concater.iter_chunks(buf=FLV_HEADER+res.content):\n+                self.reader.buffer.write(data)\n+\n+                if self.closed:\n+                    break\n+            else:\n+                self.logger.debug(\"Download of segment {0} complete\", segment)\n+        except IOError as err:\n+            self.logger.error(\"Failed to read segment {0}: {1}\", segment, err)\n+\n+class DailyMotionReader(SegmentedStreamReader):\n+    __worker__ = DailyMotionWorker\n+    __writer__ = DailyMotionWriter\n+\n+    def __init__(self, stream, params, **kwargs):\n+        self.logger = stream.session.logger.new_module(\"stream.dms.reader\")\n+        self.uri_template = params['uri_template']\n+        self.segment_min = params['segment_min']\n+        self.segment_max = params['segment_max']\n+\n+        SegmentedStreamReader.__init__(self, stream, **kwargs)\n+\n+class DailyMotionStream(Stream):\n+    __shortname__ = \"dms\"\n+\n+    def __init__(self, session, channel_id, resolution, url):\n+        Stream.__init__(self, session)\n+        self.logger = session.logger.new_module(\"stream.dms\")\n+\n+        self.channel_id = channel_id\n+        self.resolution = resolution\n+        parsed_url = urlparse(url)\n+        self.scheme = parsed_url.scheme\n+        self.host = parsed_url.netloc\n+        self.info_uri = parsed_url.path\n+\n+    def __repr__(self):\n+        return \"<DailyMotionStream({0!r}, resolution={1})>\".format(\n+                self.channel_id, self.resolution)\n+\n+    def __json__(self):\n+        return dict(channel_id=self.channel_id,\n+                    resolution=self.resolution,\n+                    host=self.host,\n+                    info_uri=self.info_uri,\n+                    **Stream.__json__(self))\n+\n+    def open(self):\n+        res = http.get('{0}://{1}{2}'.format(self.scheme, self.host, self.info_uri))\n+        json = http.json(res)\n+\n+        if not isinstance(json, dict):\n+            raise PluginError(\"Invalid JSON response\")\n+\n+        try:\n+            params = {\n+                    'uri_template' : '{0}://{1}{2}'.format(self.scheme, self.host, json['template'].replace('$fragment$','{0}')),\n+                    'segment_min'  : 1,\n+                    'segment_max'  : reduce(lambda i,j:i+j[0], json['fragments'], 0),\n+            }\n+        except:",
        "path": "src/livestreamer/plugins/dailymotion.py",
        "position": null,
        "original_position": 124,
        "commit_id": "4a93001967f9361f958514af61e14a90e5228783",
        "original_commit_id": "56d9a89f8c5db909e200cb426ff4c3b2a99dcd9f",
        "user": {
            "login": "chrippa",
            "id": 22396,
            "node_id": "MDQ6VXNlcjIyMzk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/22396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrippa",
            "html_url": "https://github.com/chrippa",
            "followers_url": "https://api.github.com/users/chrippa/followers",
            "following_url": "https://api.github.com/users/chrippa/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrippa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrippa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrippa/subscriptions",
            "organizations_url": "https://api.github.com/users/chrippa/orgs",
            "repos_url": "https://api.github.com/users/chrippa/repos",
            "events_url": "https://api.github.com/users/chrippa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrippa/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Catching all exceptions is a bad idea. Use `except KeyError:` instead.\n",
        "created_at": "2014-05-28T09:49:25Z",
        "updated_at": "2014-05-28T11:40:48Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/402#discussion_r13123190",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/402",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/13123190"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/402#discussion_r13123190"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/402"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/13123252",
        "pull_request_review_id": null,
        "id": 13123252,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTIzMjUy",
        "diff_hunk": "@@ -135,13 +247,39 @@ def _get_rtmp_streams(self, channelname):\n \n         return streams\n \n+    def _get_vod_streams(self, channelname):\n+        res = http.get(self.url)\n+        match = re.search('autoURL%22%3A%22(.*?)%22', res.text)\n+        if not match.groups():",
        "path": "src/livestreamer/plugins/dailymotion.py",
        "position": null,
        "original_position": 141,
        "commit_id": "4a93001967f9361f958514af61e14a90e5228783",
        "original_commit_id": "56d9a89f8c5db909e200cb426ff4c3b2a99dcd9f",
        "user": {
            "login": "chrippa",
            "id": 22396,
            "node_id": "MDQ6VXNlcjIyMzk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/22396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrippa",
            "html_url": "https://github.com/chrippa",
            "followers_url": "https://api.github.com/users/chrippa/followers",
            "following_url": "https://api.github.com/users/chrippa/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrippa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrippa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrippa/subscriptions",
            "organizations_url": "https://api.github.com/users/chrippa/orgs",
            "repos_url": "https://api.github.com/users/chrippa/repos",
            "events_url": "https://api.github.com/users/chrippa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrippa/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This should be `if not match:`. `match` is `None` if pattern does not match.\n",
        "created_at": "2014-05-28T09:51:14Z",
        "updated_at": "2014-05-28T11:40:48Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/402#discussion_r13123252",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/402",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/13123252"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/402#discussion_r13123252"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/402"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/13123318",
        "pull_request_review_id": null,
        "id": 13123318,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTIzMzE4",
        "diff_hunk": "@@ -135,13 +247,39 @@ def _get_rtmp_streams(self, channelname):\n \n         return streams\n \n+    def _get_vod_streams(self, channelname):\n+        res = http.get(self.url)\n+        match = re.search('autoURL%22%3A%22(.*?)%22', res.text)\n+        if not match.groups():\n+            raise PluginError('Error retrieving manifest url')\n+        manifest_url = unquote(match.groups()[0]).replace('\\\\', '')",
        "path": "src/livestreamer/plugins/dailymotion.py",
        "position": null,
        "original_position": 143,
        "commit_id": "4a93001967f9361f958514af61e14a90e5228783",
        "original_commit_id": "56d9a89f8c5db909e200cb426ff4c3b2a99dcd9f",
        "user": {
            "login": "chrippa",
            "id": 22396,
            "node_id": "MDQ6VXNlcjIyMzk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/22396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrippa",
            "html_url": "https://github.com/chrippa",
            "followers_url": "https://api.github.com/users/chrippa/followers",
            "following_url": "https://api.github.com/users/chrippa/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrippa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrippa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrippa/subscriptions",
            "organizations_url": "https://api.github.com/users/chrippa/orgs",
            "repos_url": "https://api.github.com/users/chrippa/repos",
            "events_url": "https://api.github.com/users/chrippa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrippa/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You can use `match.group(1)` here instead.\n",
        "created_at": "2014-05-28T09:52:58Z",
        "updated_at": "2014-05-28T11:40:48Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/402#discussion_r13123318",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/402",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/13123318"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/402#discussion_r13123318"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/402"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/13123383",
        "pull_request_review_id": null,
        "id": 13123383,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTIzMzgz",
        "diff_hunk": "@@ -1,10 +1,15 @@\n import re\n+from functools import reduce\n \n-from livestreamer.compat import urlparse\n-from livestreamer.exceptions import PluginError\n+from livestreamer.compat import urlparse, unquote, urlparse\n+from livestreamer.exceptions import StreamError, PluginError, NoStreamsError",
        "path": "src/livestreamer/plugins/dailymotion.py",
        "position": null,
        "original_position": 7,
        "commit_id": "4a93001967f9361f958514af61e14a90e5228783",
        "original_commit_id": "56d9a89f8c5db909e200cb426ff4c3b2a99dcd9f",
        "user": {
            "login": "chrippa",
            "id": 22396,
            "node_id": "MDQ6VXNlcjIyMzk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/22396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrippa",
            "html_url": "https://github.com/chrippa",
            "followers_url": "https://api.github.com/users/chrippa/followers",
            "following_url": "https://api.github.com/users/chrippa/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrippa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrippa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrippa/subscriptions",
            "organizations_url": "https://api.github.com/users/chrippa/orgs",
            "repos_url": "https://api.github.com/users/chrippa/repos",
            "events_url": "https://api.github.com/users/chrippa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrippa/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "`NoStreamsError` is not used.\n",
        "created_at": "2014-05-28T09:54:49Z",
        "updated_at": "2014-05-28T11:40:48Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/402#discussion_r13123383",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/402",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/13123383"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/402#discussion_r13123383"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/402"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/21794379",
        "pull_request_review_id": null,
        "id": 21794379,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzk0Mzc5",
        "diff_hunk": "@@ -1,4 +1,5 @@\n import re\n+import urllib",
        "path": "src/livestreamer/plugins/youtube.py",
        "position": null,
        "original_position": 2,
        "commit_id": "7466053b0cda065fd5f4e0e53ece632eb9a5f5be",
        "original_commit_id": "2821a2c81967c46f602209be233adbf088d8f7b0",
        "user": {
            "login": "vadmium",
            "id": 1024659,
            "node_id": "MDQ6VXNlcjEwMjQ2NTk=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1024659?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vadmium",
            "html_url": "https://github.com/vadmium",
            "followers_url": "https://api.github.com/users/vadmium/followers",
            "following_url": "https://api.github.com/users/vadmium/following{/other_user}",
            "gists_url": "https://api.github.com/users/vadmium/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vadmium/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vadmium/subscriptions",
            "organizations_url": "https://api.github.com/users/vadmium/orgs",
            "repos_url": "https://api.github.com/users/vadmium/repos",
            "events_url": "https://api.github.com/users/vadmium/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vadmium/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "In Python 3, unquote() moved to \u201curllib.parse\u201d, so you should probably used the \u201ccompat\u201d module:\n\n``` python\nfrom livestreamer.compat import unquote\n```\n",
        "created_at": "2014-12-14T07:26:45Z",
        "updated_at": "2014-12-14T07:39:07Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/646#discussion_r21794379",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/646",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/21794379"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/646#discussion_r21794379"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/646"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/21794423",
        "pull_request_review_id": null,
        "id": 21794423,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzk0NDIz",
        "diff_hunk": "@@ -1,4 +1,5 @@\n import re\n+import urllib",
        "path": "src/livestreamer/plugins/youtube.py",
        "position": null,
        "original_position": 2,
        "commit_id": "7466053b0cda065fd5f4e0e53ece632eb9a5f5be",
        "original_commit_id": "2821a2c81967c46f602209be233adbf088d8f7b0",
        "user": {
            "login": "cybersphinx",
            "id": 181656,
            "node_id": "MDQ6VXNlcjE4MTY1Ng==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/181656?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cybersphinx",
            "html_url": "https://github.com/cybersphinx",
            "followers_url": "https://api.github.com/users/cybersphinx/followers",
            "following_url": "https://api.github.com/users/cybersphinx/following{/other_user}",
            "gists_url": "https://api.github.com/users/cybersphinx/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cybersphinx/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cybersphinx/subscriptions",
            "organizations_url": "https://api.github.com/users/cybersphinx/orgs",
            "repos_url": "https://api.github.com/users/cybersphinx/repos",
            "events_url": "https://api.github.com/users/cybersphinx/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cybersphinx/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Thanks, I'll add it.\n",
        "created_at": "2014-12-14T07:37:51Z",
        "updated_at": "2014-12-14T07:39:07Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/646#discussion_r21794423",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/646",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/21794423"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/646#discussion_r21794423"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/646"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/25767016",
        "pull_request_review_id": null,
        "id": 25767016,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NzY3MDE2",
        "diff_hunk": "@@ -0,0 +1,36 @@\n+import re\n+\n+from livestreamer import PluginError\n+from livestreamer.plugin import Plugin\n+from livestreamer.plugin.api import http\n+from livestreamer.stream import HLSStream\n+\n+SUCCESS_HTTP_CODES = (200,)\n+\n+STREAM_URL_FORMAT = \"http://tvcatchup.com/stream.php?chan={0}\"\n+_url_re = re.compile(\"http://(?:www\\.)?tvcatchup.com/watch/(?P<channel_id>[0-9]+)\")\n+\n+\n+class TVCatchup(Plugin):\n+    def __init__(self, url):\n+        Plugin.__init__(self, url)\n+        match = _url_re.match(url).groupdict()\n+        self.channel_id = match[\"channel_id\"]\n+\n+    @classmethod\n+    def can_handle_url(self, url):\n+        print \"hi!\", url",
        "path": "src/livestreamer/plugins/tvcatchup.py",
        "position": null,
        "original_position": 22,
        "commit_id": "36ead780b7abec459550493f8405830e80197b61",
        "original_commit_id": "492e004ec6004ecd6d5918223f10ae476cc837f8",
        "user": {
            "login": "vadmium",
            "id": 1024659,
            "node_id": "MDQ6VXNlcjEwMjQ2NTk=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1024659?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vadmium",
            "html_url": "https://github.com/vadmium",
            "followers_url": "https://api.github.com/users/vadmium/followers",
            "following_url": "https://api.github.com/users/vadmium/following{/other_user}",
            "gists_url": "https://api.github.com/users/vadmium/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vadmium/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vadmium/subscriptions",
            "organizations_url": "https://api.github.com/users/vadmium/orgs",
            "repos_url": "https://api.github.com/users/vadmium/repos",
            "events_url": "https://api.github.com/users/vadmium/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vadmium/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Is this meant to be here? It\u2019s not Python 3 syntax anyway.\n",
        "created_at": "2015-03-04T11:09:05Z",
        "updated_at": "2015-03-06T10:08:54Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/775#discussion_r25767016",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/775",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/25767016"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/775#discussion_r25767016"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/775"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/25767566",
        "pull_request_review_id": null,
        "id": 25767566,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NzY3NTY2",
        "diff_hunk": "@@ -0,0 +1,36 @@\n+import re\n+\n+from livestreamer import PluginError\n+from livestreamer.plugin import Plugin\n+from livestreamer.plugin.api import http\n+from livestreamer.stream import HLSStream\n+\n+SUCCESS_HTTP_CODES = (200,)\n+\n+STREAM_URL_FORMAT = \"http://tvcatchup.com/stream.php?chan={0}\"\n+_url_re = re.compile(\"http://(?:www\\.)?tvcatchup.com/watch/(?P<channel_id>[0-9]+)\")\n+\n+\n+class TVCatchup(Plugin):\n+    def __init__(self, url):\n+        Plugin.__init__(self, url)\n+        match = _url_re.match(url).groupdict()\n+        self.channel_id = match[\"channel_id\"]\n+\n+    @classmethod\n+    def can_handle_url(self, url):\n+        print \"hi!\", url",
        "path": "src/livestreamer/plugins/tvcatchup.py",
        "position": null,
        "original_position": 22,
        "commit_id": "36ead780b7abec459550493f8405830e80197b61",
        "original_commit_id": "492e004ec6004ecd6d5918223f10ae476cc837f8",
        "user": {
            "login": "blxd",
            "id": 11062583,
            "node_id": "MDQ6VXNlcjExMDYyNTgz",
            "avatar_url": "https://avatars2.githubusercontent.com/u/11062583?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/blxd",
            "html_url": "https://github.com/blxd",
            "followers_url": "https://api.github.com/users/blxd/followers",
            "following_url": "https://api.github.com/users/blxd/following{/other_user}",
            "gists_url": "https://api.github.com/users/blxd/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/blxd/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/blxd/subscriptions",
            "organizations_url": "https://api.github.com/users/blxd/orgs",
            "repos_url": "https://api.github.com/users/blxd/repos",
            "events_url": "https://api.github.com/users/blxd/events{/privacy}",
            "received_events_url": "https://api.github.com/users/blxd/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "No, it's not meant to be there at all... My bad, was testing it before - crappy debug method. \n",
        "created_at": "2015-03-04T11:19:52Z",
        "updated_at": "2015-03-06T10:08:54Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/775#discussion_r25767566",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/775",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/25767566"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/775#discussion_r25767566"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/775"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/25892236",
        "pull_request_review_id": null,
        "id": 25892236,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1ODkyMjM2",
        "diff_hunk": "@@ -66,6 +66,7 @@ tga                 - star.plu.cn        Yes   No\n                     - star.tga.plu.cn\n tv4play             - tv4play.se         Yes   Yes   Streams may be geo-restricted to Sweden.\n                                                      Only non-premium streams currently supported.\n+tvcatchup           - tvcatchup.com      Yes   No    Streams may be geo-restricted to Great Britain.\n                     - fotbollskanalen.se",
        "path": "docs/plugin_matrix.rst",
        "position": null,
        "original_position": 5,
        "commit_id": "36ead780b7abec459550493f8405830e80197b61",
        "original_commit_id": "b9c95ba0d4cd799d00c7a59151055281fa8c039b",
        "user": {
            "login": "chrippa",
            "id": 22396,
            "node_id": "MDQ6VXNlcjIyMzk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/22396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrippa",
            "html_url": "https://github.com/chrippa",
            "followers_url": "https://api.github.com/users/chrippa/followers",
            "following_url": "https://api.github.com/users/chrippa/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrippa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrippa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrippa/subscriptions",
            "organizations_url": "https://api.github.com/users/chrippa/orgs",
            "repos_url": "https://api.github.com/users/chrippa/repos",
            "events_url": "https://api.github.com/users/chrippa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrippa/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You are breaking up the tv4play entry here, the fotbollskanalen.se line should be directly under the tv4play lines.\n",
        "created_at": "2015-03-05T19:15:17Z",
        "updated_at": "2015-03-06T10:08:54Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/775#discussion_r25892236",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/775",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/25892236"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/775#discussion_r25892236"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/775"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/25892253",
        "pull_request_review_id": null,
        "id": 25892253,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1ODkyMjUz",
        "diff_hunk": "@@ -0,0 +1,35 @@\n+import re\n+\n+from livestreamer import PluginError\n+from livestreamer.plugin import Plugin\n+from livestreamer.plugin.api import http\n+from livestreamer.stream import HLSStream\n+\n+SUCCESS_HTTP_CODES = (200,)\n+\n+STREAM_URL_FORMAT = \"http://tvcatchup.com/stream.php?chan={0}\"\n+_url_re = re.compile(\"http://(?:www\\.)?tvcatchup.com/watch/(?P<channel_id>[0-9]+)\")\n+\n+\n+class TVCatchup(Plugin):\n+    def __init__(self, url):\n+        Plugin.__init__(self, url)\n+        match = _url_re.match(url).groupdict()\n+        self.channel_id = match[\"channel_id\"]\n+\n+    @classmethod\n+    def can_handle_url(self, url):\n+        return _url_re.match(url)\n+\n+    def _get_streams(self):\n+        res = http.get(STREAM_URL_FORMAT.format(self.channel_id))\n+\n+        stream_url = res.status_code in SUCCESS_HTTP_CODES and res.json().get('url')",
        "path": "src/livestreamer/plugins/tvcatchup.py",
        "position": null,
        "original_position": 27,
        "commit_id": "36ead780b7abec459550493f8405830e80197b61",
        "original_commit_id": "b9c95ba0d4cd799d00c7a59151055281fa8c039b",
        "user": {
            "login": "chrippa",
            "id": 22396,
            "node_id": "MDQ6VXNlcjIyMzk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/22396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrippa",
            "html_url": "https://github.com/chrippa",
            "followers_url": "https://api.github.com/users/chrippa/followers",
            "following_url": "https://api.github.com/users/chrippa/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrippa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrippa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrippa/subscriptions",
            "organizations_url": "https://api.github.com/users/chrippa/orgs",
            "repos_url": "https://api.github.com/users/chrippa/repos",
            "events_url": "https://api.github.com/users/chrippa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrippa/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "There is no need to check status codes, a `PluginError` will be raised if it's not 200. Also, please use the `http.json` function, it wraps the errors in a `PluginError`.\n",
        "created_at": "2015-03-05T19:15:28Z",
        "updated_at": "2015-03-06T10:08:54Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/775#discussion_r25892253",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/775",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/25892253"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/775#discussion_r25892253"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/775"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/25892256",
        "pull_request_review_id": null,
        "id": 25892256,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1ODkyMjU2",
        "diff_hunk": "@@ -0,0 +1,35 @@\n+import re\n+\n+from livestreamer import PluginError\n+from livestreamer.plugin import Plugin\n+from livestreamer.plugin.api import http\n+from livestreamer.stream import HLSStream\n+\n+SUCCESS_HTTP_CODES = (200,)\n+\n+STREAM_URL_FORMAT = \"http://tvcatchup.com/stream.php?chan={0}\"\n+_url_re = re.compile(\"http://(?:www\\.)?tvcatchup.com/watch/(?P<channel_id>[0-9]+)\")\n+\n+\n+class TVCatchup(Plugin):\n+    def __init__(self, url):\n+        Plugin.__init__(self, url)\n+        match = _url_re.match(url).groupdict()\n+        self.channel_id = match[\"channel_id\"]\n+\n+    @classmethod\n+    def can_handle_url(self, url):\n+        return _url_re.match(url)\n+\n+    def _get_streams(self):\n+        res = http.get(STREAM_URL_FORMAT.format(self.channel_id))\n+\n+        stream_url = res.status_code in SUCCESS_HTTP_CODES and res.json().get('url')\n+\n+        if not stream_url:\n+            raise PluginError(\"The program is not available, please try again later\")",
        "path": "src/livestreamer/plugins/tvcatchup.py",
        "position": null,
        "original_position": 30,
        "commit_id": "36ead780b7abec459550493f8405830e80197b61",
        "original_commit_id": "b9c95ba0d4cd799d00c7a59151055281fa8c039b",
        "user": {
            "login": "chrippa",
            "id": 22396,
            "node_id": "MDQ6VXNlcjIyMzk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/22396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrippa",
            "html_url": "https://github.com/chrippa",
            "followers_url": "https://api.github.com/users/chrippa/followers",
            "following_url": "https://api.github.com/users/chrippa/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrippa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrippa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrippa/subscriptions",
            "organizations_url": "https://api.github.com/users/chrippa/orgs",
            "repos_url": "https://api.github.com/users/chrippa/repos",
            "events_url": "https://api.github.com/users/chrippa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrippa/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You should just `return` here instead of raising an error, `PluginError` should be used for actual errors not \"no streams were found currently\".\n",
        "created_at": "2015-03-05T19:15:30Z",
        "updated_at": "2015-03-06T10:08:54Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/775#discussion_r25892256",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/775",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/25892256"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/775#discussion_r25892256"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/775"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/25893467",
        "pull_request_review_id": null,
        "id": 25893467,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1ODkzNDY3",
        "diff_hunk": "@@ -0,0 +1,183 @@\n+import re\n+from urlparse import urlparse, urlunparse, urlsplit",
        "path": "src/livestreamer/plugins/itvplayer.py",
        "position": null,
        "original_position": 2,
        "commit_id": "e75980ed0c92064224e3eafa81385f09e1c6e725",
        "original_commit_id": "1afc18f389e4c45ef6fcf014f793dbf9f7b3ba3e",
        "user": {
            "login": "chrippa",
            "id": 22396,
            "node_id": "MDQ6VXNlcjIyMzk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/22396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrippa",
            "html_url": "https://github.com/chrippa",
            "followers_url": "https://api.github.com/users/chrippa/followers",
            "following_url": "https://api.github.com/users/chrippa/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrippa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrippa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrippa/subscriptions",
            "organizations_url": "https://api.github.com/users/chrippa/orgs",
            "repos_url": "https://api.github.com/users/chrippa/repos",
            "events_url": "https://api.github.com/users/chrippa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrippa/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This is an incorrect import on Python 3. Use `livestreamer.compat` instead, though you must also add `urlunparse` and `urlsplit` to that module as they are currently missing.\n",
        "created_at": "2015-03-05T19:28:44Z",
        "updated_at": "2015-03-06T10:19:36Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/776#discussion_r25893467",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/776",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/25893467"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/776#discussion_r25893467"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/776"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/25898450",
        "pull_request_review_id": null,
        "id": 25898450,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1ODk4NDUw",
        "diff_hunk": "@@ -0,0 +1,183 @@\n+import re\n+from urlparse import urlparse, urlunparse, urlsplit",
        "path": "src/livestreamer/plugins/itvplayer.py",
        "position": null,
        "original_position": 2,
        "commit_id": "e75980ed0c92064224e3eafa81385f09e1c6e725",
        "original_commit_id": "1afc18f389e4c45ef6fcf014f793dbf9f7b3ba3e",
        "user": {
            "login": "blxd",
            "id": 11062583,
            "node_id": "MDQ6VXNlcjExMDYyNTgz",
            "avatar_url": "https://avatars2.githubusercontent.com/u/11062583?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/blxd",
            "html_url": "https://github.com/blxd",
            "followers_url": "https://api.github.com/users/blxd/followers",
            "following_url": "https://api.github.com/users/blxd/following{/other_user}",
            "gists_url": "https://api.github.com/users/blxd/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/blxd/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/blxd/subscriptions",
            "organizations_url": "https://api.github.com/users/blxd/orgs",
            "repos_url": "https://api.github.com/users/blxd/repos",
            "events_url": "https://api.github.com/users/blxd/events{/privacy}",
            "received_events_url": "https://api.github.com/users/blxd/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Sure, too used to python 2... Do you want a separate pull for the compat change? \n",
        "created_at": "2015-03-05T20:26:48Z",
        "updated_at": "2015-03-06T10:19:36Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/776#discussion_r25898450",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/776",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/25898450"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/776#discussion_r25898450"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/776"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/26007663",
        "pull_request_review_id": null,
        "id": 26007663,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2MDA3NjYz",
        "diff_hunk": "@@ -18,7 +18,7 @@ def can_handle_url(self, url):\n \n     def _get_streams(self):\n         res = http.get(self.url)\n-        match = _manifest_re.search(res.content)\n+        match = _manifest_re.search(res.content.decode())",
        "path": "src/livestreamer/plugins/connectcast.py",
        "position": null,
        "original_position": 5,
        "commit_id": "b26254adde08782c812e4167e257c5396026c160",
        "original_commit_id": "5175309f6611bbdea1dd443e8c0e225914a86b9d",
        "user": {
            "login": "chrippa",
            "id": 22396,
            "node_id": "MDQ6VXNlcjIyMzk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/22396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrippa",
            "html_url": "https://github.com/chrippa",
            "followers_url": "https://api.github.com/users/chrippa/followers",
            "following_url": "https://api.github.com/users/chrippa/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrippa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrippa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrippa/subscriptions",
            "organizations_url": "https://api.github.com/users/chrippa/orgs",
            "repos_url": "https://api.github.com/users/chrippa/repos",
            "events_url": "https://api.github.com/users/chrippa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrippa/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "We can use `res.text` here instead, it's a decoded version of `res.content`.\n",
        "created_at": "2015-03-08T18:45:01Z",
        "updated_at": "2015-03-12T12:15:13Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/779#discussion_r26007663",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/779",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/26007663"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/779#discussion_r26007663"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/779"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/26415014",
        "pull_request_review_id": null,
        "id": 26415014,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2NDE1MDE0",
        "diff_hunk": "@@ -0,0 +1,59 @@\n+#!/usr/bin/env python\n+import re\n+import logging\n+\n+from livestreamer.plugin import Plugin\n+from livestreamer.plugin.api import http\n+from livestreamer.stream import HLSStream\n+from livestreamer.plugin.api import validate\n+\n+\n+log = logging.getLogger(__name__)",
        "path": "src/livestreamer/plugins/tv3cat.py",
        "position": null,
        "original_position": 11,
        "commit_id": "4a526fdf14987d5a5cf2f4910b00c0bc17637c54",
        "original_commit_id": "ae9d8dfad33e9299332534f12b074c1482f6aeb5",
        "user": {
            "login": "chrippa",
            "id": 22396,
            "node_id": "MDQ6VXNlcjIyMzk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/22396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrippa",
            "html_url": "https://github.com/chrippa",
            "followers_url": "https://api.github.com/users/chrippa/followers",
            "following_url": "https://api.github.com/users/chrippa/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrippa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrippa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrippa/subscriptions",
            "organizations_url": "https://api.github.com/users/chrippa/orgs",
            "repos_url": "https://api.github.com/users/chrippa/repos",
            "events_url": "https://api.github.com/users/chrippa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrippa/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I guess you left this by accident? For future reference, you can use `self.logger.[error|warning|info|debug]` in the plugin.\n",
        "created_at": "2015-03-13T19:16:00Z",
        "updated_at": "2015-03-16T11:24:00Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/784#discussion_r26415014",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/784",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/26415014"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/784#discussion_r26415014"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/784"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/26415019",
        "pull_request_review_id": null,
        "id": 26415019,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2NDE1MDE5",
        "diff_hunk": "@@ -0,0 +1,59 @@\n+#!/usr/bin/env python\n+import re\n+import logging\n+\n+from livestreamer.plugin import Plugin\n+from livestreamer.plugin.api import http\n+from livestreamer.stream import HLSStream\n+from livestreamer.plugin.api import validate\n+\n+\n+log = logging.getLogger(__name__)\n+\n+STREAM_INFO_URL = \"http://dinamics.ccma.cat/pvideo/media.jsp?media=video&version=0s&idint={ident}&profile=pc&desplacament=0\"\n+_url_re = re.compile(r\"http://(?:www.)?ccma.cat/tv3/directe/(.+?)/\")\n+_channel_schema = validate.Schema({\n+    \"media\": validate.any([{\n+        \"geo\": validate.text,\n+        \"url\": validate.url(scheme=validate.any(\"http\"))\n+    }],\n+        {\n+        \"geo\": validate.text,\n+        \"url\": validate.url(scheme=validate.any(\"http\"))\n+    })\n+})\n+",
        "path": "src/livestreamer/plugins/tv3cat.py",
        "position": null,
        "original_position": 25,
        "commit_id": "4a526fdf14987d5a5cf2f4910b00c0bc17637c54",
        "original_commit_id": "ae9d8dfad33e9299332534f12b074c1482f6aeb5",
        "user": {
            "login": "chrippa",
            "id": 22396,
            "node_id": "MDQ6VXNlcjIyMzk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/22396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrippa",
            "html_url": "https://github.com/chrippa",
            "followers_url": "https://api.github.com/users/chrippa/followers",
            "following_url": "https://api.github.com/users/chrippa/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrippa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrippa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrippa/subscriptions",
            "organizations_url": "https://api.github.com/users/chrippa/orgs",
            "repos_url": "https://api.github.com/users/chrippa/repos",
            "events_url": "https://api.github.com/users/chrippa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrippa/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "To avoid repeating yourself you can reference schemas in schemas, e.g.\n\n``` python\n\n_media_schema = validate.Schema({\n    \"geo\": validate.text,\n    \"url\": validate.url(scheme=\"http\")\n})\n_channel_schema = validate.Schema({\n    \"media\": validate.any([_media_schema], _media_schema)\n})\n\n```\n",
        "created_at": "2015-03-13T19:16:02Z",
        "updated_at": "2015-03-16T11:24:00Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/784#discussion_r26415019",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/784",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/26415019"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/784#discussion_r26415019"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/784"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/26415281",
        "pull_request_review_id": null,
        "id": 26415281,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2NDE1Mjgx",
        "diff_hunk": "@@ -0,0 +1,59 @@\n+#!/usr/bin/env python\n+import re\n+import logging\n+\n+from livestreamer.plugin import Plugin\n+from livestreamer.plugin.api import http\n+from livestreamer.stream import HLSStream\n+from livestreamer.plugin.api import validate\n+\n+\n+log = logging.getLogger(__name__)",
        "path": "src/livestreamer/plugins/tv3cat.py",
        "position": null,
        "original_position": 11,
        "commit_id": "4a526fdf14987d5a5cf2f4910b00c0bc17637c54",
        "original_commit_id": "ae9d8dfad33e9299332534f12b074c1482f6aeb5",
        "user": {
            "login": "blxd",
            "id": 11062583,
            "node_id": "MDQ6VXNlcjExMDYyNTgz",
            "avatar_url": "https://avatars2.githubusercontent.com/u/11062583?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/blxd",
            "html_url": "https://github.com/blxd",
            "followers_url": "https://api.github.com/users/blxd/followers",
            "following_url": "https://api.github.com/users/blxd/following{/other_user}",
            "gists_url": "https://api.github.com/users/blxd/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/blxd/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/blxd/subscriptions",
            "organizations_url": "https://api.github.com/users/blxd/orgs",
            "repos_url": "https://api.github.com/users/blxd/repos",
            "events_url": "https://api.github.com/users/blxd/events{/privacy}",
            "received_events_url": "https://api.github.com/users/blxd/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yep, part of my standard boilerplate. \n",
        "created_at": "2015-03-13T19:19:27Z",
        "updated_at": "2015-03-16T11:24:00Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/784#discussion_r26415281",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/784",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/26415281"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/784#discussion_r26415281"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/784"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/28202424",
        "pull_request_review_id": null,
        "id": 28202424,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4MjAyNDI0",
        "diff_hunk": "@@ -0,0 +1,220 @@\n+\"\"\"Plugin for media.ccc.de\n+\n+Media.ccc.de is a distribution platform for multimedia files provided by the\n+Chaos Computer Club. It provides a wide variety of video and audio material\n+in native formats.\n+\n+Some CCC related events like the Chaos Communication Congress are live\n+streamed on streaming.media.ccc.de.\n+\n+Supports:\n+    - http://media.ccc.de (vod)\n+    - http://streaming.media.ccc.de (livestreaming)\n+\n+Limitations:\n+    * streaming.media.ccc.de:\n+        - only HLS and audio only (opus and mp3) live streams are supported\n+\n+    * media.ccc.de\n+        - only mp4 and audio only (opus and mp3) recordings are supported\n+\"\"\"\n+\n+import re\n+import requests\n+import json",
        "path": "src/livestreamer/plugins/media_ccc_de.py",
        "position": null,
        "original_position": 24,
        "commit_id": "933eb327850d08ba84f4107bbbd0829cd90f2ebb",
        "original_commit_id": "52a018efeeca30808cf0d29d0eedfaf4bd3d6790",
        "user": {
            "login": "chrippa",
            "id": 22396,
            "node_id": "MDQ6VXNlcjIyMzk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/22396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrippa",
            "html_url": "https://github.com/chrippa",
            "followers_url": "https://api.github.com/users/chrippa/followers",
            "following_url": "https://api.github.com/users/chrippa/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrippa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrippa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrippa/subscriptions",
            "organizations_url": "https://api.github.com/users/chrippa/orgs",
            "repos_url": "https://api.github.com/users/chrippa/repos",
            "events_url": "https://api.github.com/users/chrippa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrippa/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Please don't use the request and json modules directly. We have these wrappers:\n\n``` python\nfrom livestreamer.plugin.api import http\n\nres = http.get(...)\njson_data = http.json(res)\n```\n",
        "created_at": "2015-04-12T10:39:38Z",
        "updated_at": "2015-04-16T10:43:43Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/844#discussion_r28202424",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/844",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/28202424"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/844#discussion_r28202424"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/844"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/28202425",
        "pull_request_review_id": null,
        "id": 28202425,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4MjAyNDI1",
        "diff_hunk": "@@ -0,0 +1,220 @@\n+\"\"\"Plugin for media.ccc.de\n+\n+Media.ccc.de is a distribution platform for multimedia files provided by the\n+Chaos Computer Club. It provides a wide variety of video and audio material\n+in native formats.\n+\n+Some CCC related events like the Chaos Communication Congress are live\n+streamed on streaming.media.ccc.de.\n+\n+Supports:\n+    - http://media.ccc.de (vod)\n+    - http://streaming.media.ccc.de (livestreaming)\n+\n+Limitations:\n+    * streaming.media.ccc.de:\n+        - only HLS and audio only (opus and mp3) live streams are supported\n+\n+    * media.ccc.de\n+        - only mp4 and audio only (opus and mp3) recordings are supported\n+\"\"\"\n+\n+import re\n+import requests\n+import json\n+\n+from livestreamer.plugin import Plugin, PluginError\n+from livestreamer.stream import HTTPStream, HLSStream\n+\n+API_URL_MEDIA           = \"https://api.media.ccc.de\"\n+API_URL_STREAMING_MEDIA = \"http://streaming.media.ccc.de/streams/v1.json\"\n+\n+# http(s)://media.ccc.de/path/to/talk.html\n+_url_media_re           = re.compile(\"(?P<scheme>http|https)\"\n+                                     \":\\/\\/\"\n+                                     \"(?P<server>media\\.ccc\\.de)\"\n+                                     \"\\/\")\n+# http://streaming.media.ccc.de/room/\n+_url_streaming_media_re = re.compile(\"(?P<scheme>http)\"\n+                                     \":\\/\\/\"\n+                                     \"(?P<server>streaming\\.media\\.ccc\\.de)\"\n+                                     \"\\/\"\n+                                     \"(?P<room>.*)\"\n+                                     \"\\/.*\")\n+\n+def get_event_id(url):\n+    \"\"\"Extract event id from talk html page.\n+\n+    Raises :exc:`PluginError` on failure.\n+\n+    :param url: talk URL\n+\n+    \"\"\"\n+    match = re.search(r\"{event_id:\\s(?P<event_id>\\d+),.*}\", get_page(url))\n+\n+    try:\n+        event_id = int(match.group('event_id'))\n+    except:\n+        raise PluginError(\"Failed to get event id from URL.\")\n+\n+    return event_id\n+\n+def get_page(url):\n+    \"\"\"Fetch page for given URL.\n+\n+    :param url: URL to fetch\n+\n+    \"\"\"\n+    page = requests.get(url)\n+\n+    return page.text\n+\n+def create_json_object(json_string):\n+    \"\"\"Loads json string and returned Python object.\n+\n+    Raises :exc:`PluginError` on failure.\n+\n+    :param json_string: json as string\n+\n+    \"\"\"\n+    try:\n+        json_object = json.loads(json_string)\n+    except:\n+        raise PluginError(\"Could not parse json from API.\")\n+\n+    return json_object\n+\n+def parse_media_json(json_string):\n+    \"\"\"Expose available\n+\n+    :param json_string: json as string\n+\n+    \"\"\"\n+    json_object = create_json_object(json_string)\n+\n+    recordings = {}\n+    for recording in json_object['recordings']:\n+        match       = re.search(r\".*\\/(?P<format>.*)\", recording['mime_type'])\n+        file_format = match.group('format')\n+\n+        if recording['mime_type'] == 'vnd.voc/mp4-web' or\\\n+            recording['display_mime_type'] == 'video/webm':\n+            continue\n+        elif recording['mime_type'] == 'vnd.voc/h264-hd':\n+            name = \"1080p\"\n+        elif recording['mime_type'] == 'vnd.voc/h264-lq':\n+            name = \"420p\"\n+        elif re.match(r\"audio\", recording['display_mime_type']):\n+            name = \"audio_%s\" % file_format\n+        else:\n+            if recording['hd'] == 'True':\n+                name = \"1080p\"\n+            else:\n+                name = \"420p\"\n+\n+        recordings[name] = recording['recording_url']\n+\n+    return recordings\n+\n+def parse_streaming_media_json(json_string, room_from_url):\n+    \"\"\"Filter all availabe live streams for given json and room name.\n+\n+    API-Doku: https://github.com/voc/streaming-website#json-api\n+\n+    :param json_string: json as string\n+    :param room_from_url:\n+\n+    \"\"\"\n+    json_object = create_json_object(json_string)\n+\n+    streams = {}\n+    for group in json_object:\n+        for room in group['rooms']:\n+            # only consider to requested room\n+            match = _url_streaming_media_re.match(room['link'])\n+            if not match.group('room') == room_from_url:\n+                continue\n+\n+            for stream in room['streams']:\n+                # get stream language\n+                if stream['isTranslated'] == False:\n+                    language = 'native'\n+                else:\n+                    language = 'translated'\n+\n+                # get available hls stream urls\n+                if 'hls' in stream['urls'].keys():",
        "path": "src/livestreamer/plugins/media_ccc_de.py",
        "position": null,
        "original_position": 146,
        "commit_id": "933eb327850d08ba84f4107bbbd0829cd90f2ebb",
        "original_commit_id": "52a018efeeca30808cf0d29d0eedfaf4bd3d6790",
        "user": {
            "login": "chrippa",
            "id": 22396,
            "node_id": "MDQ6VXNlcjIyMzk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/22396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrippa",
            "html_url": "https://github.com/chrippa",
            "followers_url": "https://api.github.com/users/chrippa/followers",
            "following_url": "https://api.github.com/users/chrippa/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrippa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrippa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrippa/subscriptions",
            "organizations_url": "https://api.github.com/users/chrippa/orgs",
            "repos_url": "https://api.github.com/users/chrippa/repos",
            "events_url": "https://api.github.com/users/chrippa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrippa/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "No need for `.keys()`, you can do `if 'hls' in stream['urls']` instead, or to avoid repeating the nested structure:\n\n``` python\nhls_stream = stream['urls'].get('hls')\nif hls_stream:\n    stream_url = hls_stream['url']\n    ...\n```\n",
        "created_at": "2015-04-12T10:39:41Z",
        "updated_at": "2015-04-16T10:43:43Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/844#discussion_r28202425",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/844",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/28202425"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/844#discussion_r28202425"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/844"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/28202426",
        "pull_request_review_id": null,
        "id": 28202426,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4MjAyNDI2",
        "diff_hunk": "@@ -0,0 +1,220 @@\n+\"\"\"Plugin for media.ccc.de\n+\n+Media.ccc.de is a distribution platform for multimedia files provided by the\n+Chaos Computer Club. It provides a wide variety of video and audio material\n+in native formats.\n+\n+Some CCC related events like the Chaos Communication Congress are live\n+streamed on streaming.media.ccc.de.\n+\n+Supports:\n+    - http://media.ccc.de (vod)\n+    - http://streaming.media.ccc.de (livestreaming)\n+\n+Limitations:\n+    * streaming.media.ccc.de:\n+        - only HLS and audio only (opus and mp3) live streams are supported\n+\n+    * media.ccc.de\n+        - only mp4 and audio only (opus and mp3) recordings are supported\n+\"\"\"\n+\n+import re\n+import requests\n+import json\n+\n+from livestreamer.plugin import Plugin, PluginError\n+from livestreamer.stream import HTTPStream, HLSStream\n+\n+API_URL_MEDIA           = \"https://api.media.ccc.de\"\n+API_URL_STREAMING_MEDIA = \"http://streaming.media.ccc.de/streams/v1.json\"\n+\n+# http(s)://media.ccc.de/path/to/talk.html\n+_url_media_re           = re.compile(\"(?P<scheme>http|https)\"\n+                                     \":\\/\\/\"\n+                                     \"(?P<server>media\\.ccc\\.de)\"\n+                                     \"\\/\")\n+# http://streaming.media.ccc.de/room/\n+_url_streaming_media_re = re.compile(\"(?P<scheme>http)\"\n+                                     \":\\/\\/\"\n+                                     \"(?P<server>streaming\\.media\\.ccc\\.de)\"\n+                                     \"\\/\"\n+                                     \"(?P<room>.*)\"\n+                                     \"\\/.*\")\n+\n+def get_event_id(url):\n+    \"\"\"Extract event id from talk html page.\n+\n+    Raises :exc:`PluginError` on failure.\n+\n+    :param url: talk URL\n+\n+    \"\"\"\n+    match = re.search(r\"{event_id:\\s(?P<event_id>\\d+),.*}\", get_page(url))\n+\n+    try:\n+        event_id = int(match.group('event_id'))\n+    except:\n+        raise PluginError(\"Failed to get event id from URL.\")\n+\n+    return event_id\n+\n+def get_page(url):\n+    \"\"\"Fetch page for given URL.\n+\n+    :param url: URL to fetch\n+\n+    \"\"\"\n+    page = requests.get(url)\n+\n+    return page.text\n+\n+def create_json_object(json_string):\n+    \"\"\"Loads json string and returned Python object.\n+\n+    Raises :exc:`PluginError` on failure.\n+\n+    :param json_string: json as string\n+\n+    \"\"\"\n+    try:\n+        json_object = json.loads(json_string)\n+    except:\n+        raise PluginError(\"Could not parse json from API.\")\n+\n+    return json_object\n+\n+def parse_media_json(json_string):\n+    \"\"\"Expose available\n+\n+    :param json_string: json as string\n+\n+    \"\"\"\n+    json_object = create_json_object(json_string)\n+\n+    recordings = {}\n+    for recording in json_object['recordings']:\n+        match       = re.search(r\".*\\/(?P<format>.*)\", recording['mime_type'])\n+        file_format = match.group('format')\n+\n+        if recording['mime_type'] == 'vnd.voc/mp4-web' or\\\n+            recording['display_mime_type'] == 'video/webm':\n+            continue\n+        elif recording['mime_type'] == 'vnd.voc/h264-hd':\n+            name = \"1080p\"\n+        elif recording['mime_type'] == 'vnd.voc/h264-lq':\n+            name = \"420p\"\n+        elif re.match(r\"audio\", recording['display_mime_type']):\n+            name = \"audio_%s\" % file_format\n+        else:\n+            if recording['hd'] == 'True':\n+                name = \"1080p\"\n+            else:\n+                name = \"420p\"\n+\n+        recordings[name] = recording['recording_url']\n+\n+    return recordings\n+\n+def parse_streaming_media_json(json_string, room_from_url):\n+    \"\"\"Filter all availabe live streams for given json and room name.\n+\n+    API-Doku: https://github.com/voc/streaming-website#json-api\n+\n+    :param json_string: json as string\n+    :param room_from_url:\n+\n+    \"\"\"\n+    json_object = create_json_object(json_string)\n+\n+    streams = {}\n+    for group in json_object:\n+        for room in group['rooms']:\n+            # only consider to requested room\n+            match = _url_streaming_media_re.match(room['link'])\n+            if not match.group('room') == room_from_url:\n+                continue\n+\n+            for stream in room['streams']:\n+                # get stream language\n+                if stream['isTranslated'] == False:\n+                    language = 'native'\n+                else:\n+                    language = 'translated'\n+\n+                # get available hls stream urls\n+                if 'hls' in stream['urls'].keys():\n+                    stream_url = stream['urls']['hls']['url']\n+                    name = None\n+                    # native HLS streams are announced as\n+                    # ${height}p and (hd|sd)_native_${height}p\n+                    if language == 'native':\n+                        name          = \"%sp\" % stream['videoSize'][-1]\n+                        long_name     = \"hls_%s_%sp\" % (\"native\",\\\n+                                                        stream['videoSize'][-1])\n+                        streams[name]      = stream_url\n+                        streams[long_name] = stream_url\n+                    elif language == 'translated':\n+                        long_name     = \"hls_%s_%sp\" % (\"translated\",\\\n+                                                        stream['videoSize'][-1])\n+                        streams[long_name] = stream_url\n+\n+                # get available audio only mpeg urls\n+                if 'mp3' in stream['urls'].keys():\n+                    stream_url    = stream['urls']['mp3']['url']\n+                    name          = \"audio_%s_mpeg\" % language\n+                    streams[name] = stream_url\n+\n+                # get available audio only opus urls\n+                if 'opus' in stream['urls'].keys():\n+                    stream_url    = stream['urls']['opus']['url']\n+                    name          = \"audio_%s_opus\" % language\n+                    streams[name] = stream_url\n+\n+    return streams\n+\n+\n+class media_ccc_de(Plugin):\n+    @classmethod\n+    def can_handle_url(self, url):\n+        return _url_media_re.search(url) or _url_streaming_media_re.search(url)\n+\n+    def _get_streams(self):\n+        streams = {}\n+\n+        # streaming.media.ccc.de\n+        match = _url_streaming_media_re.match(self.url)\n+        if match:\n+            query_url    = API_URL_STREAMING_MEDIA\n+            live_streams = parse_streaming_media_json(get_page(query_url),\\\n+                                                      match.group('room'))\n+\n+            for stream_name in live_streams.keys():",
        "path": "src/livestreamer/plugins/media_ccc_de.py",
        "position": null,
        "original_position": 192,
        "commit_id": "933eb327850d08ba84f4107bbbd0829cd90f2ebb",
        "original_commit_id": "52a018efeeca30808cf0d29d0eedfaf4bd3d6790",
        "user": {
            "login": "chrippa",
            "id": 22396,
            "node_id": "MDQ6VXNlcjIyMzk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/22396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrippa",
            "html_url": "https://github.com/chrippa",
            "followers_url": "https://api.github.com/users/chrippa/followers",
            "following_url": "https://api.github.com/users/chrippa/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrippa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrippa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrippa/subscriptions",
            "organizations_url": "https://api.github.com/users/chrippa/orgs",
            "repos_url": "https://api.github.com/users/chrippa/repos",
            "events_url": "https://api.github.com/users/chrippa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrippa/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You can do `for stream_name, stream_url in live_streams.items()` to get both the key and the value.\n",
        "created_at": "2015-04-12T10:39:44Z",
        "updated_at": "2015-04-16T10:43:43Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/844#discussion_r28202426",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/844",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/28202426"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/844#discussion_r28202426"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/844"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/28202427",
        "pull_request_review_id": null,
        "id": 28202427,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4MjAyNDI3",
        "diff_hunk": "@@ -0,0 +1,220 @@\n+\"\"\"Plugin for media.ccc.de\n+\n+Media.ccc.de is a distribution platform for multimedia files provided by the\n+Chaos Computer Club. It provides a wide variety of video and audio material\n+in native formats.\n+\n+Some CCC related events like the Chaos Communication Congress are live\n+streamed on streaming.media.ccc.de.\n+\n+Supports:\n+    - http://media.ccc.de (vod)\n+    - http://streaming.media.ccc.de (livestreaming)\n+\n+Limitations:\n+    * streaming.media.ccc.de:\n+        - only HLS and audio only (opus and mp3) live streams are supported\n+\n+    * media.ccc.de\n+        - only mp4 and audio only (opus and mp3) recordings are supported\n+\"\"\"\n+\n+import re\n+import requests\n+import json\n+\n+from livestreamer.plugin import Plugin, PluginError\n+from livestreamer.stream import HTTPStream, HLSStream\n+\n+API_URL_MEDIA           = \"https://api.media.ccc.de\"\n+API_URL_STREAMING_MEDIA = \"http://streaming.media.ccc.de/streams/v1.json\"\n+\n+# http(s)://media.ccc.de/path/to/talk.html\n+_url_media_re           = re.compile(\"(?P<scheme>http|https)\"\n+                                     \":\\/\\/\"\n+                                     \"(?P<server>media\\.ccc\\.de)\"\n+                                     \"\\/\")\n+# http://streaming.media.ccc.de/room/\n+_url_streaming_media_re = re.compile(\"(?P<scheme>http)\"\n+                                     \":\\/\\/\"\n+                                     \"(?P<server>streaming\\.media\\.ccc\\.de)\"\n+                                     \"\\/\"\n+                                     \"(?P<room>.*)\"\n+                                     \"\\/.*\")\n+\n+def get_event_id(url):\n+    \"\"\"Extract event id from talk html page.\n+\n+    Raises :exc:`PluginError` on failure.\n+\n+    :param url: talk URL\n+\n+    \"\"\"\n+    match = re.search(r\"{event_id:\\s(?P<event_id>\\d+),.*}\", get_page(url))\n+\n+    try:\n+        event_id = int(match.group('event_id'))\n+    except:\n+        raise PluginError(\"Failed to get event id from URL.\")\n+\n+    return event_id\n+\n+def get_page(url):\n+    \"\"\"Fetch page for given URL.\n+\n+    :param url: URL to fetch\n+\n+    \"\"\"\n+    page = requests.get(url)\n+\n+    return page.text\n+\n+def create_json_object(json_string):\n+    \"\"\"Loads json string and returned Python object.\n+\n+    Raises :exc:`PluginError` on failure.\n+\n+    :param json_string: json as string\n+\n+    \"\"\"\n+    try:\n+        json_object = json.loads(json_string)\n+    except:\n+        raise PluginError(\"Could not parse json from API.\")\n+\n+    return json_object\n+\n+def parse_media_json(json_string):\n+    \"\"\"Expose available\n+\n+    :param json_string: json as string\n+\n+    \"\"\"\n+    json_object = create_json_object(json_string)\n+\n+    recordings = {}\n+    for recording in json_object['recordings']:\n+        match       = re.search(r\".*\\/(?P<format>.*)\", recording['mime_type'])\n+        file_format = match.group('format')\n+\n+        if recording['mime_type'] == 'vnd.voc/mp4-web' or\\\n+            recording['display_mime_type'] == 'video/webm':\n+            continue\n+        elif recording['mime_type'] == 'vnd.voc/h264-hd':\n+            name = \"1080p\"\n+        elif recording['mime_type'] == 'vnd.voc/h264-lq':\n+            name = \"420p\"\n+        elif re.match(r\"audio\", recording['display_mime_type']):\n+            name = \"audio_%s\" % file_format\n+        else:\n+            if recording['hd'] == 'True':\n+                name = \"1080p\"\n+            else:\n+                name = \"420p\"\n+\n+        recordings[name] = recording['recording_url']\n+\n+    return recordings\n+\n+def parse_streaming_media_json(json_string, room_from_url):\n+    \"\"\"Filter all availabe live streams for given json and room name.\n+\n+    API-Doku: https://github.com/voc/streaming-website#json-api\n+\n+    :param json_string: json as string\n+    :param room_from_url:\n+\n+    \"\"\"\n+    json_object = create_json_object(json_string)\n+\n+    streams = {}\n+    for group in json_object:\n+        for room in group['rooms']:\n+            # only consider to requested room\n+            match = _url_streaming_media_re.match(room['link'])\n+            if not match.group('room') == room_from_url:\n+                continue\n+\n+            for stream in room['streams']:\n+                # get stream language\n+                if stream['isTranslated'] == False:\n+                    language = 'native'\n+                else:\n+                    language = 'translated'\n+\n+                # get available hls stream urls\n+                if 'hls' in stream['urls'].keys():\n+                    stream_url = stream['urls']['hls']['url']\n+                    name = None\n+                    # native HLS streams are announced as\n+                    # ${height}p and (hd|sd)_native_${height}p\n+                    if language == 'native':\n+                        name          = \"%sp\" % stream['videoSize'][-1]\n+                        long_name     = \"hls_%s_%sp\" % (\"native\",\\\n+                                                        stream['videoSize'][-1])\n+                        streams[name]      = stream_url\n+                        streams[long_name] = stream_url\n+                    elif language == 'translated':\n+                        long_name     = \"hls_%s_%sp\" % (\"translated\",\\\n+                                                        stream['videoSize'][-1])\n+                        streams[long_name] = stream_url\n+\n+                # get available audio only mpeg urls\n+                if 'mp3' in stream['urls'].keys():\n+                    stream_url    = stream['urls']['mp3']['url']\n+                    name          = \"audio_%s_mpeg\" % language\n+                    streams[name] = stream_url\n+\n+                # get available audio only opus urls\n+                if 'opus' in stream['urls'].keys():\n+                    stream_url    = stream['urls']['opus']['url']\n+                    name          = \"audio_%s_opus\" % language\n+                    streams[name] = stream_url\n+\n+    return streams\n+\n+\n+class media_ccc_de(Plugin):\n+    @classmethod\n+    def can_handle_url(self, url):\n+        return _url_media_re.search(url) or _url_streaming_media_re.search(url)\n+\n+    def _get_streams(self):\n+        streams = {}\n+\n+        # streaming.media.ccc.de\n+        match = _url_streaming_media_re.match(self.url)\n+        if match:\n+            query_url    = API_URL_STREAMING_MEDIA\n+            live_streams = parse_streaming_media_json(get_page(query_url),\\\n+                                                      match.group('room'))\n+\n+            for stream_name in live_streams.keys():\n+                if re.search(r\"m3u8\", live_streams[stream_name]):\n+                    try:\n+                        streams[stream_name] = HLSStream(self.session,\\\n+                                                live_streams[stream_name])\n+                    except IOError as err:\n+                        self.logger.warning(\"Failed to extract HLS streams: \"\n+                                            \"{0}\", err)",
        "path": "src/livestreamer/plugins/media_ccc_de.py",
        "position": null,
        "original_position": 199,
        "commit_id": "933eb327850d08ba84f4107bbbd0829cd90f2ebb",
        "original_commit_id": "52a018efeeca30808cf0d29d0eedfaf4bd3d6790",
        "user": {
            "login": "chrippa",
            "id": 22396,
            "node_id": "MDQ6VXNlcjIyMzk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/22396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrippa",
            "html_url": "https://github.com/chrippa",
            "followers_url": "https://api.github.com/users/chrippa/followers",
            "following_url": "https://api.github.com/users/chrippa/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrippa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrippa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrippa/subscriptions",
            "organizations_url": "https://api.github.com/users/chrippa/orgs",
            "repos_url": "https://api.github.com/users/chrippa/repos",
            "events_url": "https://api.github.com/users/chrippa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrippa/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Creating a HLSStream object cannot raise any exception, only HLSStream.parse_variant_playlist does that.\n",
        "created_at": "2015-04-12T10:39:45Z",
        "updated_at": "2015-04-16T10:43:43Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/844#discussion_r28202427",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/844",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/28202427"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/844#discussion_r28202427"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/844"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/28202435",
        "pull_request_review_id": null,
        "id": 28202435,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4MjAyNDM1",
        "diff_hunk": "@@ -0,0 +1,220 @@\n+\"\"\"Plugin for media.ccc.de\n+\n+Media.ccc.de is a distribution platform for multimedia files provided by the\n+Chaos Computer Club. It provides a wide variety of video and audio material\n+in native formats.\n+\n+Some CCC related events like the Chaos Communication Congress are live\n+streamed on streaming.media.ccc.de.\n+\n+Supports:\n+    - http://media.ccc.de (vod)\n+    - http://streaming.media.ccc.de (livestreaming)\n+\n+Limitations:\n+    * streaming.media.ccc.de:\n+        - only HLS and audio only (opus and mp3) live streams are supported\n+\n+    * media.ccc.de\n+        - only mp4 and audio only (opus and mp3) recordings are supported\n+\"\"\"\n+\n+import re\n+import requests\n+import json\n+\n+from livestreamer.plugin import Plugin, PluginError\n+from livestreamer.stream import HTTPStream, HLSStream\n+\n+API_URL_MEDIA           = \"https://api.media.ccc.de\"\n+API_URL_STREAMING_MEDIA = \"http://streaming.media.ccc.de/streams/v1.json\"\n+\n+# http(s)://media.ccc.de/path/to/talk.html\n+_url_media_re           = re.compile(\"(?P<scheme>http|https)\"\n+                                     \":\\/\\/\"\n+                                     \"(?P<server>media\\.ccc\\.de)\"\n+                                     \"\\/\")\n+# http://streaming.media.ccc.de/room/\n+_url_streaming_media_re = re.compile(\"(?P<scheme>http)\"\n+                                     \":\\/\\/\"\n+                                     \"(?P<server>streaming\\.media\\.ccc\\.de)\"\n+                                     \"\\/\"\n+                                     \"(?P<room>.*)\"\n+                                     \"\\/.*\")\n+\n+def get_event_id(url):\n+    \"\"\"Extract event id from talk html page.\n+\n+    Raises :exc:`PluginError` on failure.\n+\n+    :param url: talk URL\n+\n+    \"\"\"\n+    match = re.search(r\"{event_id:\\s(?P<event_id>\\d+),.*}\", get_page(url))\n+\n+    try:\n+        event_id = int(match.group('event_id'))\n+    except:\n+        raise PluginError(\"Failed to get event id from URL.\")\n+\n+    return event_id\n+\n+def get_page(url):\n+    \"\"\"Fetch page for given URL.\n+\n+    :param url: URL to fetch\n+\n+    \"\"\"\n+    page = requests.get(url)\n+\n+    return page.text\n+\n+def create_json_object(json_string):\n+    \"\"\"Loads json string and returned Python object.\n+\n+    Raises :exc:`PluginError` on failure.\n+\n+    :param json_string: json as string\n+\n+    \"\"\"\n+    try:\n+        json_object = json.loads(json_string)\n+    except:\n+        raise PluginError(\"Could not parse json from API.\")\n+\n+    return json_object\n+\n+def parse_media_json(json_string):\n+    \"\"\"Expose available\n+\n+    :param json_string: json as string\n+\n+    \"\"\"\n+    json_object = create_json_object(json_string)\n+\n+    recordings = {}\n+    for recording in json_object['recordings']:\n+        match       = re.search(r\".*\\/(?P<format>.*)\", recording['mime_type'])\n+        file_format = match.group('format')\n+\n+        if recording['mime_type'] == 'vnd.voc/mp4-web' or\\\n+            recording['display_mime_type'] == 'video/webm':\n+            continue\n+        elif recording['mime_type'] == 'vnd.voc/h264-hd':\n+            name = \"1080p\"\n+        elif recording['mime_type'] == 'vnd.voc/h264-lq':\n+            name = \"420p\"\n+        elif re.match(r\"audio\", recording['display_mime_type']):\n+            name = \"audio_%s\" % file_format\n+        else:\n+            if recording['hd'] == 'True':\n+                name = \"1080p\"\n+            else:\n+                name = \"420p\"\n+\n+        recordings[name] = recording['recording_url']\n+\n+    return recordings\n+\n+def parse_streaming_media_json(json_string, room_from_url):\n+    \"\"\"Filter all availabe live streams for given json and room name.\n+\n+    API-Doku: https://github.com/voc/streaming-website#json-api\n+\n+    :param json_string: json as string\n+    :param room_from_url:\n+\n+    \"\"\"\n+    json_object = create_json_object(json_string)\n+\n+    streams = {}\n+    for group in json_object:\n+        for room in group['rooms']:\n+            # only consider to requested room\n+            match = _url_streaming_media_re.match(room['link'])\n+            if not match.group('room') == room_from_url:\n+                continue\n+\n+            for stream in room['streams']:\n+                # get stream language\n+                if stream['isTranslated'] == False:\n+                    language = 'native'\n+                else:\n+                    language = 'translated'\n+\n+                # get available hls stream urls\n+                if 'hls' in stream['urls'].keys():\n+                    stream_url = stream['urls']['hls']['url']\n+                    name = None\n+                    # native HLS streams are announced as\n+                    # ${height}p and (hd|sd)_native_${height}p\n+                    if language == 'native':\n+                        name          = \"%sp\" % stream['videoSize'][-1]\n+                        long_name     = \"hls_%s_%sp\" % (\"native\",\\\n+                                                        stream['videoSize'][-1])\n+                        streams[name]      = stream_url\n+                        streams[long_name] = stream_url\n+                    elif language == 'translated':\n+                        long_name     = \"hls_%s_%sp\" % (\"translated\",\\\n+                                                        stream['videoSize'][-1])\n+                        streams[long_name] = stream_url\n+\n+                # get available audio only mpeg urls\n+                if 'mp3' in stream['urls'].keys():\n+                    stream_url    = stream['urls']['mp3']['url']\n+                    name          = \"audio_%s_mpeg\" % language\n+                    streams[name] = stream_url\n+\n+                # get available audio only opus urls\n+                if 'opus' in stream['urls'].keys():\n+                    stream_url    = stream['urls']['opus']['url']\n+                    name          = \"audio_%s_opus\" % language\n+                    streams[name] = stream_url\n+\n+    return streams\n+\n+\n+class media_ccc_de(Plugin):\n+    @classmethod\n+    def can_handle_url(self, url):\n+        return _url_media_re.search(url) or _url_streaming_media_re.search(url)",
        "path": "src/livestreamer/plugins/media_ccc_de.py",
        "position": null,
        "original_position": 180,
        "commit_id": "933eb327850d08ba84f4107bbbd0829cd90f2ebb",
        "original_commit_id": "52a018efeeca30808cf0d29d0eedfaf4bd3d6790",
        "user": {
            "login": "chrippa",
            "id": 22396,
            "node_id": "MDQ6VXNlcjIyMzk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/22396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrippa",
            "html_url": "https://github.com/chrippa",
            "followers_url": "https://api.github.com/users/chrippa/followers",
            "following_url": "https://api.github.com/users/chrippa/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrippa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrippa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrippa/subscriptions",
            "organizations_url": "https://api.github.com/users/chrippa/orgs",
            "repos_url": "https://api.github.com/users/chrippa/repos",
            "events_url": "https://api.github.com/users/chrippa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrippa/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Use `.match` instead of `.search` here, `.search` will match anywhere inside the string where `.match` only matches from the start.\n",
        "created_at": "2015-04-12T10:41:57Z",
        "updated_at": "2015-04-16T10:43:43Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/844#discussion_r28202435",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/844",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/28202435"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/844#discussion_r28202435"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/844"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/31379595",
        "pull_request_review_id": null,
        "id": 31379595,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMzc5NTk1",
        "diff_hunk": "@@ -0,0 +1,60 @@\n+import re\n+\n+from livestreamer.plugin import Plugin, PluginError\n+from livestreamer.plugin.api import http\n+from livestreamer.stream import HTTPStream\n+\n+_url_re = re.compile(\"(http(s)?://)?blip.tv/.*-(?P<videoid>\\d+)\")\n+VIDEO_GET_URL = 'http://player.blip.tv/file/get/{0}'\n+SINGLE_VIDEO_URL = '.*\\.((mp4)|(mov)|(m4v)|(flv))'",
        "path": "src/livestreamer/plugins/bliptv.py",
        "position": null,
        "original_position": 9,
        "commit_id": "d8a664f78ffc8b157db143ae596ef6210ee6b091",
        "original_commit_id": "9b4184489b7012618185f519c21ac6c7766d384f",
        "user": {
            "login": "chrippa",
            "id": 22396,
            "node_id": "MDQ6VXNlcjIyMzk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/22396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrippa",
            "html_url": "https://github.com/chrippa",
            "followers_url": "https://api.github.com/users/chrippa/followers",
            "following_url": "https://api.github.com/users/chrippa/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrippa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrippa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrippa/subscriptions",
            "organizations_url": "https://api.github.com/users/chrippa/orgs",
            "repos_url": "https://api.github.com/users/chrippa/repos",
            "events_url": "https://api.github.com/users/chrippa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrippa/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Make this a compiled regex like `_url_re` instead.\n",
        "created_at": "2015-05-30T10:38:42Z",
        "updated_at": "2015-05-30T15:23:04Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/936#discussion_r31379595",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/936",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/31379595"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/936#discussion_r31379595"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/936"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/31379596",
        "pull_request_review_id": null,
        "id": 31379596,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMzc5NTk2",
        "diff_hunk": "@@ -0,0 +1,60 @@\n+import re\n+\n+from livestreamer.plugin import Plugin, PluginError\n+from livestreamer.plugin.api import http\n+from livestreamer.stream import HTTPStream\n+\n+_url_re = re.compile(\"(http(s)?://)?blip.tv/.*-(?P<videoid>\\d+)\")\n+VIDEO_GET_URL = 'http://player.blip.tv/file/get/{0}'\n+SINGLE_VIDEO_URL = '.*\\.((mp4)|(mov)|(m4v)|(flv))'\n+\n+\n+def get_quality_dict(quality_list):\n+    quality_list.sort()\n+    quality_dict = {}\n+    i = 0\n+    for bitrate in quality_list:",
        "path": "src/livestreamer/plugins/bliptv.py",
        "position": null,
        "original_position": 16,
        "commit_id": "d8a664f78ffc8b157db143ae596ef6210ee6b091",
        "original_commit_id": "9b4184489b7012618185f519c21ac6c7766d384f",
        "user": {
            "login": "chrippa",
            "id": 22396,
            "node_id": "MDQ6VXNlcjIyMzk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/22396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrippa",
            "html_url": "https://github.com/chrippa",
            "followers_url": "https://api.github.com/users/chrippa/followers",
            "following_url": "https://api.github.com/users/chrippa/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrippa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrippa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrippa/subscriptions",
            "organizations_url": "https://api.github.com/users/chrippa/orgs",
            "repos_url": "https://api.github.com/users/chrippa/repos",
            "events_url": "https://api.github.com/users/chrippa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrippa/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You can use `for i, bitrate in enumerate(quality_list)` here instead to avoid incrementing manually.\n",
        "created_at": "2015-05-30T10:38:44Z",
        "updated_at": "2015-05-30T15:23:04Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/936#discussion_r31379596",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/936",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/31379596"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/936#discussion_r31379596"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/936"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/31379598",
        "pull_request_review_id": null,
        "id": 31379598,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMzc5NTk4",
        "diff_hunk": "@@ -0,0 +1,60 @@\n+import re\n+\n+from livestreamer.plugin import Plugin, PluginError\n+from livestreamer.plugin.api import http\n+from livestreamer.stream import HTTPStream\n+\n+_url_re = re.compile(\"(http(s)?://)?blip.tv/.*-(?P<videoid>\\d+)\")\n+VIDEO_GET_URL = 'http://player.blip.tv/file/get/{0}'\n+SINGLE_VIDEO_URL = '.*\\.((mp4)|(mov)|(m4v)|(flv))'\n+\n+\n+def get_quality_dict(quality_list):\n+    quality_list.sort()\n+    quality_dict = {}\n+    i = 0\n+    for bitrate in quality_list:\n+        if i == 0:\n+            quality_dict['%i' % bitrate] = 'low'\n+        elif i == 1:\n+            quality_dict['%i' % bitrate] = 'medium'\n+        elif i == 2:\n+            quality_dict['%i' % bitrate] = 'high'\n+        elif i == 3:\n+            quality_dict['%i' % bitrate] = 'ultra'\n+        else:\n+            quality_dict['%i' % bitrate] = 'ultra+_%i' % (i-3)\n+        i += 1\n+    return quality_dict\n+\n+\n+class bliptv(Plugin):\n+    @classmethod\n+    def can_handle_url(cls, url):\n+        return _url_re.match(url)\n+\n+    def _get_streams(self):\n+        match = _url_re.match(self.url)\n+        videoid = match.group(\"videoid\")\n+        try:\n+            get_return = http.get(VIDEO_GET_URL.format(videoid))\n+        except:\n+            raise PluginError('Can not get video information from blip.tv for id %s' % videoid)",
        "path": "src/livestreamer/plugins/bliptv.py",
        "position": null,
        "original_position": 42,
        "commit_id": "d8a664f78ffc8b157db143ae596ef6210ee6b091",
        "original_commit_id": "9b4184489b7012618185f519c21ac6c7766d384f",
        "user": {
            "login": "chrippa",
            "id": 22396,
            "node_id": "MDQ6VXNlcjIyMzk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/22396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrippa",
            "html_url": "https://github.com/chrippa",
            "followers_url": "https://api.github.com/users/chrippa/followers",
            "following_url": "https://api.github.com/users/chrippa/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrippa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrippa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrippa/subscriptions",
            "organizations_url": "https://api.github.com/users/chrippa/orgs",
            "repos_url": "https://api.github.com/users/chrippa/repos",
            "events_url": "https://api.github.com/users/chrippa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrippa/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You shouldn't catch the error here, it will hide useful information about why it failed from the user.\n",
        "created_at": "2015-05-30T10:38:46Z",
        "updated_at": "2015-05-30T15:23:04Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/936#discussion_r31379598",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/936",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/31379598"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/936#discussion_r31379598"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/936"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/31379599",
        "pull_request_review_id": null,
        "id": 31379599,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMzc5NTk5",
        "diff_hunk": "@@ -0,0 +1,60 @@\n+import re\n+\n+from livestreamer.plugin import Plugin, PluginError\n+from livestreamer.plugin.api import http\n+from livestreamer.stream import HTTPStream\n+\n+_url_re = re.compile(\"(http(s)?://)?blip.tv/.*-(?P<videoid>\\d+)\")\n+VIDEO_GET_URL = 'http://player.blip.tv/file/get/{0}'\n+SINGLE_VIDEO_URL = '.*\\.((mp4)|(mov)|(m4v)|(flv))'\n+\n+\n+def get_quality_dict(quality_list):\n+    quality_list.sort()\n+    quality_dict = {}\n+    i = 0\n+    for bitrate in quality_list:\n+        if i == 0:\n+            quality_dict['%i' % bitrate] = 'low'\n+        elif i == 1:\n+            quality_dict['%i' % bitrate] = 'medium'\n+        elif i == 2:\n+            quality_dict['%i' % bitrate] = 'high'\n+        elif i == 3:\n+            quality_dict['%i' % bitrate] = 'ultra'\n+        else:\n+            quality_dict['%i' % bitrate] = 'ultra+_%i' % (i-3)\n+        i += 1\n+    return quality_dict\n+\n+\n+class bliptv(Plugin):\n+    @classmethod\n+    def can_handle_url(cls, url):\n+        return _url_re.match(url)\n+\n+    def _get_streams(self):\n+        match = _url_re.match(self.url)\n+        videoid = match.group(\"videoid\")\n+        try:\n+            get_return = http.get(VIDEO_GET_URL.format(videoid))\n+        except:\n+            raise PluginError('Can not get video information from blip.tv for id %s' % videoid)\n+        json_decode = http.json(get_return)\n+        streams = {}\n+        quality_list = []\n+        for stream in json_decode:\n+            if re.compile(SINGLE_VIDEO_URL).match(stream['direct_url']):\n+                quality_list.append(int(stream['video_bitrate']))\n+        if len(quality_list) == 0:\n+            raise PluginError('No videos on blip.tv found for id %s' % videoid)",
        "path": "src/livestreamer/plugins/bliptv.py",
        "position": null,
        "original_position": 50,
        "commit_id": "d8a664f78ffc8b157db143ae596ef6210ee6b091",
        "original_commit_id": "9b4184489b7012618185f519c21ac6c7766d384f",
        "user": {
            "login": "chrippa",
            "id": 22396,
            "node_id": "MDQ6VXNlcjIyMzk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/22396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrippa",
            "html_url": "https://github.com/chrippa",
            "followers_url": "https://api.github.com/users/chrippa/followers",
            "following_url": "https://api.github.com/users/chrippa/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrippa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrippa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrippa/subscriptions",
            "organizations_url": "https://api.github.com/users/chrippa/orgs",
            "repos_url": "https://api.github.com/users/chrippa/repos",
            "events_url": "https://api.github.com/users/chrippa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrippa/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You should just `return` here instead, it will make Livestreamer print the `No streams found` message.\n",
        "created_at": "2015-05-30T10:38:48Z",
        "updated_at": "2015-05-30T15:23:04Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/936#discussion_r31379599",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/936",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/31379599"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/936#discussion_r31379599"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/936"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/31379600",
        "pull_request_review_id": null,
        "id": 31379600,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMzc5NjAw",
        "diff_hunk": "@@ -0,0 +1,60 @@\n+import re\n+\n+from livestreamer.plugin import Plugin, PluginError\n+from livestreamer.plugin.api import http\n+from livestreamer.stream import HTTPStream\n+\n+_url_re = re.compile(\"(http(s)?://)?blip.tv/.*-(?P<videoid>\\d+)\")\n+VIDEO_GET_URL = 'http://player.blip.tv/file/get/{0}'\n+SINGLE_VIDEO_URL = '.*\\.((mp4)|(mov)|(m4v)|(flv))'\n+\n+\n+def get_quality_dict(quality_list):\n+    quality_list.sort()\n+    quality_dict = {}\n+    i = 0\n+    for bitrate in quality_list:\n+        if i == 0:\n+            quality_dict['%i' % bitrate] = 'low'\n+        elif i == 1:\n+            quality_dict['%i' % bitrate] = 'medium'\n+        elif i == 2:\n+            quality_dict['%i' % bitrate] = 'high'\n+        elif i == 3:\n+            quality_dict['%i' % bitrate] = 'ultra'\n+        else:\n+            quality_dict['%i' % bitrate] = 'ultra+_%i' % (i-3)\n+        i += 1\n+    return quality_dict\n+\n+\n+class bliptv(Plugin):\n+    @classmethod\n+    def can_handle_url(cls, url):\n+        return _url_re.match(url)\n+\n+    def _get_streams(self):\n+        match = _url_re.match(self.url)\n+        videoid = match.group(\"videoid\")\n+        try:\n+            get_return = http.get(VIDEO_GET_URL.format(videoid))\n+        except:\n+            raise PluginError('Can not get video information from blip.tv for id %s' % videoid)\n+        json_decode = http.json(get_return)\n+        streams = {}\n+        quality_list = []\n+        for stream in json_decode:\n+            if re.compile(SINGLE_VIDEO_URL).match(stream['direct_url']):\n+                quality_list.append(int(stream['video_bitrate']))\n+        if len(quality_list) == 0:\n+            raise PluginError('No videos on blip.tv found for id %s' % videoid)\n+        quality_dict = get_quality_dict(quality_list)\n+        for stream in json_decode:\n+            if re.compile(SINGLE_VIDEO_URL).match(stream['direct_url']):\n+                streams[quality_dict[stream['video_bitrate']]] = HTTPStream(self.session, stream['direct_url'])\n+        quality_list.sort()\n+        streams['worst'] = streams[quality_dict['%i' % quality_list[0]]]\n+        streams['best'] = streams[quality_dict['%i' % quality_list[-1]]]",
        "path": "src/livestreamer/plugins/bliptv.py",
        "position": null,
        "original_position": 57,
        "commit_id": "d8a664f78ffc8b157db143ae596ef6210ee6b091",
        "original_commit_id": "9b4184489b7012618185f519c21ac6c7766d384f",
        "user": {
            "login": "chrippa",
            "id": 22396,
            "node_id": "MDQ6VXNlcjIyMzk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/22396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrippa",
            "html_url": "https://github.com/chrippa",
            "followers_url": "https://api.github.com/users/chrippa/followers",
            "following_url": "https://api.github.com/users/chrippa/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrippa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrippa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrippa/subscriptions",
            "organizations_url": "https://api.github.com/users/chrippa/orgs",
            "repos_url": "https://api.github.com/users/chrippa/repos",
            "events_url": "https://api.github.com/users/chrippa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrippa/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You should not create the 'worst'/'best' streams yourself but instead create custom stream weights, this will make Livestreamer figure out the sorting automatically. See [twitch.py#211](https://github.com/chrippa/livestreamer/blob/develop/src/livestreamer/plugins/twitch.py#L211) for an example how this is done.\n",
        "created_at": "2015-05-30T10:38:50Z",
        "updated_at": "2015-05-30T15:23:04Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/936#discussion_r31379600",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/936",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/31379600"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/936#discussion_r31379600"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/936"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/32475596",
        "pull_request_review_id": null,
        "id": 32475596,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNDc1NTk2",
        "diff_hunk": "@@ -0,0 +1,161 @@\n+import re\n+\n+from livestreamer.plugin import Plugin\n+from livestreamer.stream import RTMPStream\n+\n+from livestreamer.plugin.api import http\n+\n+RTMP_LIVE_URL = \"rtmp://ruv{0}livefs.fplive.net/ruv{0}live-live/stream{1}\"\n+RTMP_SARPURINN_URL = \"rtmp://sipvodfs.fplive.net/sipvod/{0}/{1}{2}.{3}\"\n+\n+_live_url_re = re.compile(r\"\"\"^(?:https?://)?(?:www\\.)?ruv\\.is/\n+                                (?P<channel_path>\n+                                    ruv|\n+                                    ras1|\n+                                    ras-1|\n+                                    ras2|\n+                                    ras-2|\n+                                    rondo\n+                                )\n+                                /?\n+                                \"\"\", re.VERBOSE)\n+\n+_sarpurinn_url_re = re.compile(r\"\"\"^(?:https?://)?(?:www\\.)?ruv\\.is/sarpurinn/\n+                                    (?:\n+                                        ruv|\n+                                        ruv2|\n+                                        ruv-2|\n+                                        ruv-aukaras|\n+                                        ras1|\n+                                        ras-1|\n+                                        ras2|\n+                                        ras-2\n+                                    )\n+                                    /\n+                                    [a-zA-Z0-9_-]+\n+                                    /\n+                                    [0-9]+\n+                                    /?\n+                                    \"\"\", re.VERBOSE)\n+_rtmp_url_re = re.compile(r\"\"\"rtmp://sipvodfs\\.fplive.net/sipvod/\n+                                (?P<status>\n+                                    lokad|\n+                                    opid\n+                                )\n+                                /\n+                                (?P<date>[0-9]+/[0-9][0-9]/[0-9][0-9]/)?\n+                                (?P<id>[A-Z0-9\\$_]+)\n+                                \\.\n+                                (?P<ext>\n+                                    mp4|\n+                                    mp3\n+                                )\"\"\", re.VERBOSE)\n+\n+_id_map =\\\n+{\n+    \"ruv\": \"ruv\",\n+    \"ras1\": \"ras1\",\n+    \"ras-1\": \"ras1\",\n+    \"ras2\": \"ras2\",\n+    \"ras-2\": \"ras2\",\n+    \"rondo\": \"ras3\"\n+}\n+\n+class Ruv(Plugin):\n+    @classmethod\n+    def can_handle_url(cls, url):\n+        if _live_url_re.match(url):\n+            return _live_url_re.match(url)\n+        else:\n+            return _sarpurinn_url_re.match(url)\n+\n+    def __init__(self, url):\n+        Plugin.__init__(self, url)\n+        live_match = _live_url_re.match(url)\n+\n+        if live_match:\n+            self.live = True\n+            self.channel_path = live_match.group(\"channel_path\")\n+        else:\n+            self.live = False\n+\n+    def _get_live_streams(self):\n+        stream_id = _id_map[self.channel_path]\n+\n+        streams = {}\n+\n+        if stream_id == \"ruv\":\n+            streams[\"720p\"] = RTMPStream(self.session, {\n+                \"rtmp\": RTMP_LIVE_URL.format(stream_id, 1),\n+                \"pageUrl\": self.url,\n+                \"live\": True\n+            })\n+\n+            streams[\"best\"] = streams[\"720p\"]\n+\n+            streams[\"480p\"] = RTMPStream(self.session, {\n+                \"rtmp\": RTMP_LIVE_URL.format(stream_id, 2),\n+                \"pageUrl\": self.url,\n+                \"live\": True\n+            })\n+            streams[\"360p\"] = RTMPStream(self.session, {\n+                \"rtmp\": RTMP_LIVE_URL.format(stream_id, 3),\n+                \"pageUrl\": self.url,\n+                \"live\": True\n+            })\n+            streams[\"240p\"] = RTMPStream(self.session, {\n+                \"rtmp\": RTMP_LIVE_URL.format(stream_id, 4),\n+                \"pageUrl\": self.url,\n+                \"live\": True\n+            })\n+\n+            streams[\"worst\"] = streams[\"240p\"]\n+\n+        else:\n+            streams[\"audio\"] = RTMPStream(self.session, {\n+                \"rtmp\": RTMP_LIVE_URL.format(stream_id, 1),\n+                \"pageUrl\": self.url,\n+                \"live\": True\n+            })\n+\n+            streams[\"best\"] = streams[\"audio\"]\n+            streams[\"worst\"] = streams[\"audio\"]\n+",
        "path": "src/livestreamer/plugins/ruv.py",
        "position": null,
        "original_position": 123,
        "commit_id": "afc4f7fb868581b37bfdb8b0ca4dcddb57a31b61",
        "original_commit_id": "f24b3f72a49b457bffc65f44a2398569673aba33",
        "user": {
            "login": "chrippa",
            "id": 22396,
            "node_id": "MDQ6VXNlcjIyMzk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/22396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrippa",
            "html_url": "https://github.com/chrippa",
            "followers_url": "https://api.github.com/users/chrippa/followers",
            "following_url": "https://api.github.com/users/chrippa/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrippa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrippa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrippa/subscriptions",
            "organizations_url": "https://api.github.com/users/chrippa/orgs",
            "repos_url": "https://api.github.com/users/chrippa/repos",
            "events_url": "https://api.github.com/users/chrippa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrippa/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Don't assign best/worst yourself, it is done automatically by Livestreamer.\n",
        "created_at": "2015-06-15T22:43:10Z",
        "updated_at": "2015-06-17T23:43:53Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/956#discussion_r32475596",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/956",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/32475596"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/956#discussion_r32475596"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/956"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/32679172",
        "pull_request_review_id": null,
        "id": 32679172,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNjc5MTcy",
        "diff_hunk": "@@ -0,0 +1,170 @@\n+\"\"\"Plugin for R\u00daV, the Icelandic national television.\"\"\"\n+\n+import re\n+\n+from livestreamer.plugin import Plugin\n+from livestreamer.stream import RTMPStream, HLSStream\n+\n+from livestreamer.plugin.api import http\n+\n+RTMP_LIVE_URL = \"rtmp://ruv{0}livefs.fplive.net/ruv{0}live-live/stream{1}\"\n+RTMP_SARPURINN_URL = \"rtmp://sipvodfs.fplive.net/sipvod/{0}/{1}{2}.{3}\"\n+\n+HLS_RUV_LIVE_URL = \"http://ruvruv-live.hls.adaptive.level3.net/ruv/ruv/index/stream{0}.m3u8\"\n+HLS_RADIO_LIVE_URL = \"http://sip-live.hds.adaptive.level3.net/hls-live/ruv-{0}/_definst_/live/stream1.m3u8\"\n+HLS_SARPURINN_URL = \"http://sip-ruv-vod.dcp.adaptive.level3.net/{0}/{1}{2}.{3}.m3u8\"\n+\n+\n+_live_url_re = re.compile(r\"\"\"^(?:https?://)?(?:www\\.)?ruv\\.is/\n+                                (?P<channel_path>\n+                                    ruv|\n+                                    ras1|\n+                                    ras-1|\n+                                    ras2|\n+                                    ras-2|\n+                                    rondo\n+                                )\n+                                /?\n+                                \"\"\", re.VERBOSE)\n+\n+_sarpurinn_url_re = re.compile(r\"\"\"^(?:https?://)?(?:www\\.)?ruv\\.is/sarpurinn/\n+                                    (?:\n+                                        ruv|\n+                                        ruv2|\n+                                        ruv-2|\n+                                        ruv-aukaras|\n+                                        ras1|\n+                                        ras-1|\n+                                        ras2|\n+                                        ras-2\n+                                    )\n+                                    /\n+                                    [a-zA-Z0-9_-]+\n+                                    /\n+                                    [0-9]+\n+                                    /?\n+                                    \"\"\", re.VERBOSE)\n+\n+_rtmp_url_re = re.compile(r\"\"\"rtmp://sipvodfs\\.fplive.net/sipvod/\n+                                (?P<status>\n+                                    lokad|\n+                                    opid\n+                                )\n+                                /\n+                                (?P<date>[0-9]+/[0-9][0-9]/[0-9][0-9]/)?\n+                                (?P<id>[A-Z0-9\\$_]+)\n+                                \\.\n+                                (?P<ext>\n+                                    mp4|\n+                                    mp3\n+                                )\"\"\", re.VERBOSE)\n+\n+_id_map = {\n+    \"ruv\": \"ruv\",\n+    \"ras1\": \"ras1\",\n+    \"ras-1\": \"ras1\",\n+    \"ras2\": \"ras2\",\n+    \"ras-2\": \"ras2\",\n+    \"rondo\": \"ras3\"\n+}\n+\n+\n+class Ruv(Plugin):\n+    @classmethod\n+    def can_handle_url(cls, url):\n+        if _live_url_re.match(url):\n+            return _live_url_re.match(url)\n+        else:\n+            return _sarpurinn_url_re.match(url)\n+\n+    def __init__(self, url):\n+        Plugin.__init__(self, url)\n+        live_match = _live_url_re.match(url)\n+\n+        if live_match:\n+            self.live = True\n+            self.channel_path = live_match.group(\"channel_path\")\n+        else:\n+            self.live = False\n+\n+    def _get_live_streams(self):\n+        stream_id = _id_map[self.channel_path]\n+\n+        streams = {}\n+\n+        if stream_id == \"ruv\":\n+            qualities_rtmp = [\"720p\", \"480p\", \"360p\", \"240p\"]\n+\n+            for i, quality in enumerate(qualities_rtmp):\n+                streams[quality] = RTMPStream(\n+                    self.session,\n+                    {\n+                        \"rtmp\": RTMP_LIVE_URL.format(stream_id, i+1),\n+                        \"pageUrl\": self.url,\n+                        \"live\": True\n+                    }\n+                )\n+\n+            qualities_hls = [\"240p_hls\", \"360p_hls\", \"480p_hls\", \"720p_hls\"]\n+            for i, quality_hls in enumerate(qualities_hls):\n+                streams[quality_hls] = HLSStream(\n+                    self.session,\n+                    HLS_RUV_LIVE_URL.format(i+1)\n+                )\n+\n+        else:\n+            streams[\"audio\"] = RTMPStream(self.session, {\n+                \"rtmp\": RTMP_LIVE_URL.format(stream_id, 1),\n+                \"pageUrl\": self.url,\n+                \"live\": True\n+            })\n+\n+            streams[\"audio_hls\"] = HLSStream(\n+                self.session,\n+                HLS_RADIO_LIVE_URL.format(stream_id)\n+            )\n+",
        "path": "src/livestreamer/plugins/ruv.py",
        "position": null,
        "original_position": 126,
        "commit_id": "afc4f7fb868581b37bfdb8b0ca4dcddb57a31b61",
        "original_commit_id": "d381fb4b9d84419ebba24fb8250a85126286ec3d",
        "user": {
            "login": "chrippa",
            "id": 22396,
            "node_id": "MDQ6VXNlcjIyMzk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/22396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrippa",
            "html_url": "https://github.com/chrippa",
            "followers_url": "https://api.github.com/users/chrippa/followers",
            "following_url": "https://api.github.com/users/chrippa/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrippa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrippa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrippa/subscriptions",
            "organizations_url": "https://api.github.com/users/chrippa/orgs",
            "repos_url": "https://api.github.com/users/chrippa/repos",
            "events_url": "https://api.github.com/users/chrippa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrippa/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "To add multiple stream types for the same quality you should either add them as a list in the dict, e.g. `streams[\"audio\"] = [rtmp_stream, hls_stream]` or the more slick way is to return a generator instead of a dict, so you can do `yield \"audio\", stream` and Livestreamer will automatically add suffixes as needed.\n",
        "created_at": "2015-06-17T21:50:55Z",
        "updated_at": "2015-06-17T23:43:53Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/956#discussion_r32679172",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/956",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/32679172"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/956#discussion_r32679172"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/956"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/36041841",
        "pull_request_review_id": null,
        "id": 36041841,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MDQxODQx",
        "diff_hunk": "@@ -444,9 +449,12 @@ def format_valid_streams(streams):\n             joined = delimiter.join(synonyms)\n             name = \"{0} ({1})\".format(name, joined)\n \n-        validstreams.append(name)\n+        validstreams.append((name, weight))\n+\n+    validstreams.sort(key=lambda stream: stream[1])",
        "path": "src/livestreamer_cli/main.py",
        "position": null,
        "original_position": 33,
        "commit_id": "dc28c79c64d6d7ef3a6d809fe01856190218bce8",
        "original_commit_id": "b53e41488af812d034851c7eb23c492446b1a754",
        "user": {
            "login": "chrippa",
            "id": 22396,
            "node_id": "MDQ6VXNlcjIyMzk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/22396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrippa",
            "html_url": "https://github.com/chrippa",
            "followers_url": "https://api.github.com/users/chrippa/followers",
            "following_url": "https://api.github.com/users/chrippa/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrippa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrippa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrippa/subscriptions",
            "organizations_url": "https://api.github.com/users/chrippa/orgs",
            "repos_url": "https://api.github.com/users/chrippa/repos",
            "events_url": "https://api.github.com/users/chrippa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrippa/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "We alredy sort the streams [here](https://github.com/chrippa/livestreamer/blob/develop/src/livestreamer_cli/main.py#L436), so instead of sorting twice you could provide a key function there instead.\n",
        "created_at": "2015-08-02T10:59:41Z",
        "updated_at": "2015-08-03T00:44:30Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/1019#discussion_r36041841",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/1019",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/36041841"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/1019#discussion_r36041841"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/1019"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/36050780",
        "pull_request_review_id": null,
        "id": 36050780,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MDUwNzgw",
        "diff_hunk": "@@ -444,9 +449,12 @@ def format_valid_streams(streams):\n             joined = delimiter.join(synonyms)\n             name = \"{0} ({1})\".format(name, joined)\n \n-        validstreams.append(name)\n+        validstreams.append((name, weight))\n+\n+    validstreams.sort(key=lambda stream: stream[1])",
        "path": "src/livestreamer_cli/main.py",
        "position": null,
        "original_position": 33,
        "commit_id": "dc28c79c64d6d7ef3a6d809fe01856190218bce8",
        "original_commit_id": "b53e41488af812d034851c7eb23c492446b1a754",
        "user": {
            "login": "jtsymon",
            "id": 4264682,
            "node_id": "MDQ6VXNlcjQyNjQ2ODI=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/4264682?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jtsymon",
            "html_url": "https://github.com/jtsymon",
            "followers_url": "https://api.github.com/users/jtsymon/followers",
            "following_url": "https://api.github.com/users/jtsymon/following{/other_user}",
            "gists_url": "https://api.github.com/users/jtsymon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jtsymon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jtsymon/subscriptions",
            "organizations_url": "https://api.github.com/users/jtsymon/orgs",
            "repos_url": "https://api.github.com/users/jtsymon/repos",
            "events_url": "https://api.github.com/users/jtsymon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jtsymon/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Well that's just embarrassing. Literally in the middle of the function I was editing.\nThanks.\n",
        "created_at": "2015-08-03T00:59:18Z",
        "updated_at": "2015-08-03T00:59:18Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/1019#discussion_r36050780",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/1019",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/36050780"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/1019#discussion_r36050780"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/1019"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/61692040",
        "pull_request_review_id": null,
        "id": 61692040,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjkyMDQw",
        "diff_hunk": "@@ -0,0 +1,72 @@\n+\"\"\"Plugin for panda.tv by Fat Deer\"\"\"\n+\n+import re\n+import types\n+from livestreamer.plugin import Plugin\n+from livestreamer.plugin.api import http, validate\n+from livestreamer.stream import HTTPStream\n+\n+ROOM_API = \"http://www.panda.tv/api_room?roomid=\"\n+SD_URL_PATTERN = \"http://pl{0}.live.panda.tv/live_panda/{1}.flv\"\n+HD_URL_PATTERN = \"http://pl{0}.live.panda.tv/live_panda/{1}_mid.flv\"\n+# I don't know ordinary-definition url pattern, sorry for ignore it.\n+OD_URL_PATTERN = \"http://pl{0}.live.panda.tv/live_panda/{1}_mid.flv\"\n+\n+_url_re = re.compile(\"http(s)?://(\\w+.)?panda.tv/(?P<channel>[^/&?]+)\")\n+\n+_room_schema = validate.Schema(\n+        {\n+            \"data\": validate.any(\n+                validate.text,\n+                dict,\n+                {\n+                    \"videoinfo\": validate.any(\n+                        validate.text,\n+                        {\n+                            \"room_key\": validate.text,\n+                            \"plflag\": validate.text,\n+                            \"status\": validate.text,\n+                            \"stream_addr\": {\n+                                \"HD\": validate.text,\n+                                \"OD\": validate.text,\n+                                \"SD\": validate.text\n+                            }\n+                        }\n+                    )\n+                }\n+            )\n+        },\n+        validate.get(\"data\"))\n+\n+\n+class pandatv(Plugin):\n+    @classmethod\n+    def can_handle_url(self, url):\n+        return _url_re.match(url)\n+\n+    def _get_streams(self):\n+        match = _url_re.match(self.url)\n+        channel = match.group(\"channel\")\n+\n+        url = ROOM_API + channel\n+        res = http.get(url)\n+        data = http.json(res, schema=_room_schema)\n+        if type(data) is not types.DictionaryType or data['videoinfo']['status'] != \"2\":",
        "path": "src/livestreamer/plugins/pandatv.py",
        "position": null,
        "original_position": 54,
        "commit_id": "5f18a0f6694a3994b47bf6c7e10fc889e9f047f7",
        "original_commit_id": "0e8c731ae08e5ad3c402a46a3d9758fbd21402fb",
        "user": {
            "login": "krobelus",
            "id": 6853872,
            "node_id": "MDQ6VXNlcjY4NTM4NzI=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/6853872?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krobelus",
            "html_url": "https://github.com/krobelus",
            "followers_url": "https://api.github.com/users/krobelus/followers",
            "following_url": "https://api.github.com/users/krobelus/following{/other_user}",
            "gists_url": "https://api.github.com/users/krobelus/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krobelus/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krobelus/subscriptions",
            "organizations_url": "https://api.github.com/users/krobelus/orgs",
            "repos_url": "https://api.github.com/users/krobelus/repos",
            "events_url": "https://api.github.com/users/krobelus/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krobelus/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "this should be changed to `if not isinstance(data, dict) or ...`  to support python 3\n",
        "created_at": "2016-05-01T20:01:09Z",
        "updated_at": "2016-05-05T17:45:31Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/1241#discussion_r61692040",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/1241",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/61692040"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/1241#discussion_r61692040"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/1241"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/62044417",
        "pull_request_review_id": null,
        "id": 62044417,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDQ0NDE3",
        "diff_hunk": "@@ -0,0 +1,72 @@\n+\"\"\"Plugin for panda.tv by Fat Deer\"\"\"\n+\n+import re\n+import types\n+from livestreamer.plugin import Plugin\n+from livestreamer.plugin.api import http, validate\n+from livestreamer.stream import HTTPStream\n+\n+ROOM_API = \"http://www.panda.tv/api_room?roomid=\"\n+SD_URL_PATTERN = \"http://pl{0}.live.panda.tv/live_panda/{1}.flv\"\n+HD_URL_PATTERN = \"http://pl{0}.live.panda.tv/live_panda/{1}_mid.flv\"\n+# I don't know ordinary-definition url pattern, sorry for ignore it.\n+OD_URL_PATTERN = \"http://pl{0}.live.panda.tv/live_panda/{1}_mid.flv\"\n+\n+_url_re = re.compile(\"http(s)?://(\\w+.)?panda.tv/(?P<channel>[^/&?]+)\")\n+\n+_room_schema = validate.Schema(\n+        {\n+            \"data\": validate.any(\n+                validate.text,\n+                dict,\n+                {\n+                    \"videoinfo\": validate.any(\n+                        validate.text,\n+                        {\n+                            \"room_key\": validate.text,\n+                            \"plflag\": validate.text,\n+                            \"status\": validate.text,\n+                            \"stream_addr\": {\n+                                \"HD\": validate.text,\n+                                \"OD\": validate.text,\n+                                \"SD\": validate.text\n+                            }\n+                        }\n+                    )\n+                }\n+            )\n+        },\n+        validate.get(\"data\"))\n+\n+\n+class pandatv(Plugin):\n+    @classmethod\n+    def can_handle_url(self, url):\n+        return _url_re.match(url)\n+\n+    def _get_streams(self):\n+        match = _url_re.match(self.url)\n+        channel = match.group(\"channel\")\n+\n+        url = ROOM_API + channel\n+        res = http.get(url)\n+        data = http.json(res, schema=_room_schema)\n+        if type(data) is not types.DictionaryType or data['videoinfo']['status'] != \"2\":",
        "path": "src/livestreamer/plugins/pandatv.py",
        "position": null,
        "original_position": 54,
        "commit_id": "5f18a0f6694a3994b47bf6c7e10fc889e9f047f7",
        "original_commit_id": "0e8c731ae08e5ad3c402a46a3d9758fbd21402fb",
        "user": {
            "login": "kerio92",
            "id": 886075,
            "node_id": "MDQ6VXNlcjg4NjA3NQ==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/886075?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kerio92",
            "html_url": "https://github.com/kerio92",
            "followers_url": "https://api.github.com/users/kerio92/followers",
            "following_url": "https://api.github.com/users/kerio92/following{/other_user}",
            "gists_url": "https://api.github.com/users/kerio92/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kerio92/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kerio92/subscriptions",
            "organizations_url": "https://api.github.com/users/kerio92/orgs",
            "repos_url": "https://api.github.com/users/kerio92/repos",
            "events_url": "https://api.github.com/users/kerio92/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kerio92/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "data[\"videoinfo\"] and data[\"videoinfo\"][\"status\"] could both be KeyErrors fwiw\n",
        "created_at": "2016-05-04T14:06:26Z",
        "updated_at": "2016-05-05T17:45:31Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/1241#discussion_r62044417",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/1241",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/62044417"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/1241#discussion_r62044417"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/1241"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/72523864",
        "pull_request_review_id": null,
        "id": 72523864,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcyNTIzODY0",
        "diff_hunk": "@@ -10,26 +11,31 @@\n     \"preferred-player-live=hlslink\"\n )\n \n+_id_re = re.compile(\"/(?:program|direkte)/([^/]+)\")",
        "path": "src/livestreamer/plugins/nrk.py",
        "position": null,
        "original_position": 11,
        "commit_id": "c782c829f686bb4173903105c057834b23a68d49",
        "original_commit_id": "77c789f534a78a1440953af1fa2477eed80121e6",
        "user": {
            "login": "stiell",
            "id": 214909,
            "node_id": "MDQ6VXNlcjIxNDkwOQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/214909?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/stiell",
            "html_url": "https://github.com/stiell",
            "followers_url": "https://api.github.com/users/stiell/followers",
            "following_url": "https://api.github.com/users/stiell/following{/other_user}",
            "gists_url": "https://api.github.com/users/stiell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/stiell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/stiell/subscriptions",
            "organizations_url": "https://api.github.com/users/stiell/orgs",
            "repos_url": "https://api.github.com/users/stiell/repos",
            "events_url": "https://api.github.com/users/stiell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/stiell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "`_id_re` doesn't match TV series URLs, e.g.:\nhttps://tv.nrk.no/serie/side-om-side/MUHH48000115/sesong-3/episode-1\nChanging the regex string to `\"/(?:program|direkte|serie/(?:[^/]+))/([^/]+)\"` works.\n",
        "created_at": "2016-07-27T21:07:10Z",
        "updated_at": "2016-08-26T18:48:01Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/1352#discussion_r72523864",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/1352",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/72523864"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/1352#discussion_r72523864"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/1352"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/72524154",
        "pull_request_review_id": null,
        "id": 72524154,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcyNTI0MTU0",
        "diff_hunk": "@@ -10,26 +11,31 @@\n     \"preferred-player-live=hlslink\"\n )\n \n+_id_re = re.compile(\"/(?:program|direkte)/([^/]+)\")\n _url_re = re.compile(\"https?://(tv|radio).nrk.no/\")\n-_media_url_re = re.compile(\"\"\"\n-    <div[^>]*?id=\"playerelement\"[^>]+\n-    data-media=\"(?P<url>[^\"]+)\"\n-\"\"\", re.VERBOSE)\n+_api_baseurl_re = re.compile('apiBaseUrl:\\s*\"(?P<baseurl>[^\"]+)\"')\n+_program_id = re.compile('programId:\\s*\"(?P<programid>[^\"]+)\"')",
        "path": "src/livestreamer/plugins/nrk.py",
        "position": null,
        "original_position": 18,
        "commit_id": "c782c829f686bb4173903105c057834b23a68d49",
        "original_commit_id": "77c789f534a78a1440953af1fa2477eed80121e6",
        "user": {
            "login": "stiell",
            "id": 214909,
            "node_id": "MDQ6VXNlcjIxNDkwOQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/214909?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/stiell",
            "html_url": "https://github.com/stiell",
            "followers_url": "https://api.github.com/users/stiell/followers",
            "following_url": "https://api.github.com/users/stiell/following{/other_user}",
            "gists_url": "https://api.github.com/users/stiell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/stiell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/stiell/subscriptions",
            "organizations_url": "https://api.github.com/users/stiell/orgs",
            "repos_url": "https://api.github.com/users/stiell/repos",
            "events_url": "https://api.github.com/users/stiell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/stiell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "`_program_id` doesn't seem to be used anywhere.\n",
        "created_at": "2016-07-27T21:08:52Z",
        "updated_at": "2016-08-26T18:48:01Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/1352#discussion_r72524154",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/1352",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/72524154"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/1352#discussion_r72524154"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/1352"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/80372142",
        "pull_request_review_id": 1444554,
        "id": 80372142,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgwMzcyMTQy",
        "diff_hunk": "@@ -5,14 +5,15 @@\n from livestreamer.stream import RTMPStream\n \n API_CHANNEL_INFO = \"https://picarto.tv/process/channel\"\n-RTMP_URL = \"{}/?{}/{}\"\n+RTMP_URL = \"rtmp://{}:1935/play/\"\n+RTMP_PLAYPATH = \"golive+{}?token={}\"\n \n _url_re = re.compile(r\"\"\"\n     https?://(\\w+\\.)?picarto\\.tv/[^&?/]\n \"\"\", re.VERBOSE)\n \n _channel_casing_re = re.compile(r\"\"\"\n-    <script>placeStreamChannel\\('(?P<channel>[^']+)',[^,]+,[^,]+,'(?P<visibility>[^']+)'\\);</script>\n+    <script>placeStreamChannelFlash\\('(?P<channel>[^']+)',[^,]+,[^,]+,'(?P<visibility>[^']+)',[^,]+\\);</script>",
        "path": "src/livestreamer/plugins/picarto.py",
        "position": null,
        "original_position": 14,
        "commit_id": "cf4ba6ab0fc20f93310282a71fcbe71fa23d5cfb",
        "original_commit_id": "ad957470be1ad2c7ce5e0b98fb958b566acd4109",
        "user": {
            "login": "Latent-Logic",
            "id": 12841961,
            "node_id": "MDQ6VXNlcjEyODQxOTYx",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12841961?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Latent-Logic",
            "html_url": "https://github.com/Latent-Logic",
            "followers_url": "https://api.github.com/users/Latent-Logic/followers",
            "following_url": "https://api.github.com/users/Latent-Logic/following{/other_user}",
            "gists_url": "https://api.github.com/users/Latent-Logic/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Latent-Logic/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Latent-Logic/subscriptions",
            "organizations_url": "https://api.github.com/users/Latent-Logic/orgs",
            "repos_url": "https://api.github.com/users/Latent-Logic/repos",
            "events_url": "https://api.github.com/users/Latent-Logic/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Latent-Logic/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Please take a look at my comments in PR #1332. The matching of `placeStreamChannelFlash` works if a single person is streaming, or `placeStreamChannel` if they are involved with a multistream. The following works for both as long as it isn't a multistream where the primary streamer is offline\n`<script>placeStreamChannel(Flash)?\\('(?P<channel>[^']+)',[^,]+,[^,]+,'(?P<visibility>[^']+)'(,[^,]+)?\\);</script>`\nIf the page you go to is involved in a multistream and the primary streamer (the one who's page you went to) is offline, but the secondary or tertiary stream is live, it will incorrectly match the second or third stream instead of (correctly) reporting the stream offline.\n",
        "created_at": "2016-09-25T01:16:26Z",
        "updated_at": "2016-09-28T11:17:59Z",
        "html_url": "https://github.com/chrippa/livestreamer/pull/1469#discussion_r80372142",
        "pull_request_url": "https://api.github.com/repos/chrippa/livestreamer/pulls/1469",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/comments/80372142"
            },
            "html": {
                "href": "https://github.com/chrippa/livestreamer/pull/1469#discussion_r80372142"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/chrippa/livestreamer/pulls/1469"
            }
        }
    }
]