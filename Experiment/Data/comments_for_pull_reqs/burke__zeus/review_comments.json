[
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/2180247",
        "pull_request_review_id": null,
        "id": 2180247,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxODAyNDc=",
        "diff_hunk": "@@ -24,3 +24,4 @@ rubygem/build/*\n go/zeusversion/zeusversion.go\n .DS_Store\n ext/fsevents/build/*\n+.idea/",
        "path": ".gitignore",
        "position": 4,
        "original_position": 4,
        "commit_id": "37d1e88dc4f981ee647933dd4c73142de13c48e0",
        "original_commit_id": "37d1e88dc4f981ee647933dd4c73142de13c48e0",
        "user": {
            "login": "simi",
            "id": 193936,
            "node_id": "MDQ6VXNlcjE5MzkzNg==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/193936?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/simi",
            "html_url": "https://github.com/simi",
            "followers_url": "https://api.github.com/users/simi/followers",
            "following_url": "https://api.github.com/users/simi/following{/other_user}",
            "gists_url": "https://api.github.com/users/simi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/simi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/simi/subscriptions",
            "organizations_url": "https://api.github.com/users/simi/orgs",
            "repos_url": "https://api.github.com/users/simi/repos",
            "events_url": "https://api.github.com/users/simi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/simi/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Learn https://help.github.com/articles/ignoring-files (global gitignore).\n",
        "created_at": "2012-11-20T13:16:23Z",
        "updated_at": "2012-11-20T13:16:23Z",
        "html_url": "https://github.com/burke/zeus/pull/105#discussion_r2180247",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/105",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/2180247"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/105#discussion_r2180247"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/105"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/3111328",
        "pull_request_review_id": null,
        "id": 3111328,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTEzMjg=",
        "diff_hunk": "@@ -8,7 +8,7 @@ Zeus is composed of three components:\n \n 3. [Slaves/Commands](../rubygem). These are the target application. A small shim, written in the target language, manages the communication between the application and the Master process, and boots the application in phases. Though the Master and Client are completely language-agnostic, currently ruby is the only language for which a Slave shim exists.\n \n-If you've read Tony Hoare's (or C.A.R. Hoare's) \"Communicating Sequential Processes\", [`csp.pdf`](csp.pdf) might be a bit helpful in addition to this document. I haven't studied the math enough for it to be fully correct, but it gets some of the point across.\n+If you've read Tony Hoare's (or C.A.R. Hoare's) \"Communicating Sequential Processes\", [`csp.pdf`](http://www.usingcsp.com/cspbook.pdf) might be a bit helpful in addition to this document. I haven't studied the math enough for it to be fully correct, but it gets some of the point across.",
        "path": "docs/overview.md",
        "position": 5,
        "original_position": 5,
        "commit_id": "9f67290324140343f340b8715c42630cd48cf295",
        "original_commit_id": "9f67290324140343f340b8715c42630cd48cf295",
        "user": {
            "login": "albertyw",
            "id": 3151040,
            "node_id": "MDQ6VXNlcjMxNTEwNDA=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/3151040?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/albertyw",
            "html_url": "https://github.com/albertyw",
            "followers_url": "https://api.github.com/users/albertyw/followers",
            "following_url": "https://api.github.com/users/albertyw/following{/other_user}",
            "gists_url": "https://api.github.com/users/albertyw/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/albertyw/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/albertyw/subscriptions",
            "organizations_url": "https://api.github.com/users/albertyw/orgs",
            "repos_url": "https://api.github.com/users/albertyw/repos",
            "events_url": "https://api.github.com/users/albertyw/events{/privacy}",
            "received_events_url": "https://api.github.com/users/albertyw/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I couldn't find a copy of csp in the repo so I added a link to it directly.  \n",
        "created_at": "2013-02-22T03:33:15Z",
        "updated_at": "2013-02-22T03:33:15Z",
        "html_url": "https://github.com/burke/zeus/pull/264#discussion_r3111328",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/264",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/3111328"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/264#discussion_r3111328"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/264"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/6562957",
        "pull_request_review_id": null,
        "id": 6562957,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NjI5NTc=",
        "diff_hunk": "@@ -182,6 +182,14 @@ def test_environment\n     end\n \n     def test_helper\n+      # don't let minitest setup another exit hook\n+      begin\n+        require 'minitest/unit'\n+        MiniTest::Unit.class_variable_set(\"@@installed_at_exit\", true)",
        "path": "rubygem/lib/zeus/rails.rb",
        "position": 7,
        "original_position": 7,
        "commit_id": "584477def3300ff1c27cc31cfca8ee8564c9a2a2",
        "original_commit_id": "584477def3300ff1c27cc31cfca8ee8564c9a2a2",
        "user": {
            "login": "zenspider",
            "id": 9832,
            "node_id": "MDQ6VXNlcjk4MzI=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/9832?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zenspider",
            "html_url": "https://github.com/zenspider",
            "followers_url": "https://api.github.com/users/zenspider/followers",
            "following_url": "https://api.github.com/users/zenspider/following{/other_user}",
            "gists_url": "https://api.github.com/users/zenspider/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zenspider/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zenspider/subscriptions",
            "organizations_url": "https://api.github.com/users/zenspider/orgs",
            "repos_url": "https://api.github.com/users/zenspider/repos",
            "events_url": "https://api.github.com/users/zenspider/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zenspider/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This is guaranteed to break. minitest 5 is already different in this regard... You really shouldn't fiddle with others' internals.\n\nAddressing this by figuring out the root cause and fixing that might be a lot more stable in the long run. Like:\n- why is running via autorun a bad thing?\n- who is invoking autorun if zeus is running the tests directly?\n- why not let the child process (I'm assuming there) exit, so it runs the tests normally?\n",
        "created_at": "2013-09-25T02:48:58Z",
        "updated_at": "2013-09-25T02:48:58Z",
        "html_url": "https://github.com/burke/zeus/pull/348#discussion_r6562957",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/348",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/6562957"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/348#discussion_r6562957"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/348"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/7361156",
        "pull_request_review_id": null,
        "id": 7361156,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDczNjExNTY=",
        "diff_hunk": "@@ -1,5 +1,11 @@\n # encoding: utf-8\n require 'socket'\n+\n+# load exect json version from Gemfile.lock to avoid conflicts\n+gemfile = \"#{ENV[\"BUNDLE_GEMFILE\"] || \"Gemfile\"}.lock\"\n+if File.exist?(gemfile) && version = File.read(gemfile)[/^  json \\(= (.*)\\)/, 1]",
        "path": "rubygem/lib/zeus.rb",
        "position": 6,
        "original_position": 6,
        "commit_id": "548fdc670db73cea05bdf526d06bbc3f0100471c",
        "original_commit_id": "548fdc670db73cea05bdf526d06bbc3f0100471c",
        "user": {
            "login": "swrobel",
            "id": 157270,
            "node_id": "MDQ6VXNlcjE1NzI3MA==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/157270?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/swrobel",
            "html_url": "https://github.com/swrobel",
            "followers_url": "https://api.github.com/users/swrobel/followers",
            "following_url": "https://api.github.com/users/swrobel/following{/other_user}",
            "gists_url": "https://api.github.com/users/swrobel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/swrobel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/swrobel/subscriptions",
            "organizations_url": "https://api.github.com/users/swrobel/orgs",
            "repos_url": "https://api.github.com/users/swrobel/repos",
            "events_url": "https://api.github.com/users/swrobel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/swrobel/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Hm, this only works if you have a constraint in your `Gemfile` like so:\n`gem 'json', '= 1.8.0'`\n\nHowever I think it should use whatever version of json is locked regardless of whether it's explicitly included in your `Gemfile`\n\n``` ruby\nif File.exist?(gemfile) && version = File.read('Gemfile.lock')[/^    json \\((.*)\\)/, 1]\n```\n\nThe change is that the regex looks for the entry from the following part of `Gemfile.lock` rather than the `DEPENDENCIES` part:\n\n```\nGEM:\n  specs:\n```\n",
        "created_at": "2013-11-01T00:33:46Z",
        "updated_at": "2013-11-01T00:33:46Z",
        "html_url": "https://github.com/burke/zeus/pull/416#discussion_r7361156",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/416",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/7361156"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/416#discussion_r7361156"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/416"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/7363129",
        "pull_request_review_id": null,
        "id": 7363129,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDczNjMxMjk=",
        "diff_hunk": "@@ -1,5 +1,11 @@\n # encoding: utf-8\n require 'socket'\n+\n+# load exect json version from Gemfile.lock to avoid conflicts\n+gemfile = \"#{ENV[\"BUNDLE_GEMFILE\"] || \"Gemfile\"}.lock\"\n+if File.exist?(gemfile) && version = File.read(gemfile)[/^  json \\(= (.*)\\)/, 1]",
        "path": "rubygem/lib/zeus.rb",
        "position": 6,
        "original_position": 6,
        "commit_id": "548fdc670db73cea05bdf526d06bbc3f0100471c",
        "original_commit_id": "548fdc670db73cea05bdf526d06bbc3f0100471c",
        "user": {
            "login": "grosser",
            "id": 11367,
            "node_id": "MDQ6VXNlcjExMzY3",
            "avatar_url": "https://avatars3.githubusercontent.com/u/11367?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/grosser",
            "html_url": "https://github.com/grosser",
            "followers_url": "https://api.github.com/users/grosser/followers",
            "following_url": "https://api.github.com/users/grosser/following{/other_user}",
            "gists_url": "https://api.github.com/users/grosser/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/grosser/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/grosser/subscriptions",
            "organizations_url": "https://api.github.com/users/grosser/orgs",
            "repos_url": "https://api.github.com/users/grosser/repos",
            "events_url": "https://api.github.com/users/grosser/events{/privacy}",
            "received_events_url": "https://api.github.com/users/grosser/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "sounds good, make a PR :)\n",
        "created_at": "2013-11-01T04:01:20Z",
        "updated_at": "2013-11-01T04:01:20Z",
        "html_url": "https://github.com/burke/zeus/pull/416#discussion_r7363129",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/416",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/7363129"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/416#discussion_r7363129"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/416"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/16159333",
        "pull_request_review_id": null,
        "id": 16159333,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MTU5MzMz",
        "diff_hunk": "@@ -6,17 +6,5 @@ require 'pathname'\n ROOT_PATH = Pathname.new(File.expand_path(\"../../\", __FILE__))\n RUBYGEM_PATH = Pathname.new(File.expand_path(\"../\", __FILE__))\n \n-task build: [:manifest]\n task default: :build",
        "path": "rubygem/Rakefile",
        "position": 5,
        "original_position": 5,
        "commit_id": "9e60c043ea0a77c3d4c2420473803f145655a9cf",
        "original_commit_id": "9e60c043ea0a77c3d4c2420473803f145655a9cf",
        "user": {
            "login": "grosser",
            "id": 11367,
            "node_id": "MDQ6VXNlcjExMzY3",
            "avatar_url": "https://avatars3.githubusercontent.com/u/11367?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/grosser",
            "html_url": "https://github.com/grosser",
            "followers_url": "https://api.github.com/users/grosser/followers",
            "following_url": "https://api.github.com/users/grosser/following{/other_user}",
            "gists_url": "https://api.github.com/users/grosser/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/grosser/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/grosser/subscriptions",
            "organizations_url": "https://api.github.com/users/grosser/orgs",
            "repos_url": "https://api.github.com/users/grosser/repos",
            "events_url": "https://api.github.com/users/grosser/events{/privacy}",
            "received_events_url": "https://api.github.com/users/grosser/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "by convention default should be tests ...\n",
        "created_at": "2014-08-13T06:23:23Z",
        "updated_at": "2014-08-13T06:23:23Z",
        "html_url": "https://github.com/burke/zeus/pull/480#discussion_r16159333",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/480",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/16159333"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/480#discussion_r16159333"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/480"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/16185702",
        "pull_request_review_id": null,
        "id": 16185702,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MTg1NzAy",
        "diff_hunk": "@@ -1,30 +1,17 @@\n-# -*- encoding: utf-8 -*-\n-\n-# This preamble is basically used to deal with bundler/gem_tasks, which loads the gemspec\n-# on rake init, even though some prerequisites are not generated until `rake build` is invoked.\n-version = begin\n-            require File.expand_path('../lib/zeus/version', __FILE__)\n-            Zeus::VERSION\n-          rescue LoadError\n-            \"0.0.0\"\n-          end\n-\n-files = File.exist?('MANIFEST') ? File.read(\"MANIFEST\").lines.map(&:chomp) : []\n+require './lib/zeus/version'\n \n Gem::Specification.new do |gem|\n   gem.authors       = [\"Burke Libbey\"]\n   gem.email         = [\"burke@libbey.me\"]\n-  gem.description   = %q{Boot any rails app in under a second}\n-  gem.summary       = %q{Zeus is an intelligent preloader for ruby applications. It allows normal development tasks to be run in a fraction of a second.}\n+  gem.description   = \"Boot any rails app in under a second\"\n+  gem.summary       = \"Zeus is an intelligent preloader for ruby applications. It allows normal development tasks to be run in a fraction of a second.\"\n   gem.homepage      = \"http://zeus.is\"\n \n-  gem.files         = files\n+  gem.files         = Dir[\"{lib,ext,bin}/**/*\"]",
        "path": "rubygem/zeus.gemspec",
        "position": 25,
        "original_position": 25,
        "commit_id": "9e60c043ea0a77c3d4c2420473803f145655a9cf",
        "original_commit_id": "9e60c043ea0a77c3d4c2420473803f145655a9cf",
        "user": {
            "login": "burke",
            "id": 1284,
            "node_id": "MDQ6VXNlcjEyODQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1284?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/burke",
            "html_url": "https://github.com/burke",
            "followers_url": "https://api.github.com/users/burke/followers",
            "following_url": "https://api.github.com/users/burke/following{/other_user}",
            "gists_url": "https://api.github.com/users/burke/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/burke/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/burke/subscriptions",
            "organizations_url": "https://api.github.com/users/burke/orgs",
            "repos_url": "https://api.github.com/users/burke/repos",
            "events_url": "https://api.github.com/users/burke/events{/privacy}",
            "received_events_url": "https://api.github.com/users/burke/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "There are important files written to `man` and `build` also. If you just [want to remove version.rb from cleanup](https://github.com/burke/zeus/commit/119bb3ad565d0e8e6efac79e4d5efa7cd4444be8), and commit it, I can merge that, but I'm not taking untested build process refactors.\n",
        "created_at": "2014-08-13T16:07:05Z",
        "updated_at": "2014-08-13T16:07:05Z",
        "html_url": "https://github.com/burke/zeus/pull/480#discussion_r16185702",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/480",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/16185702"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/480#discussion_r16185702"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/480"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/16186354",
        "pull_request_review_id": null,
        "id": 16186354,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MTg2MzU0",
        "diff_hunk": "@@ -1,30 +1,17 @@\n-# -*- encoding: utf-8 -*-\n-\n-# This preamble is basically used to deal with bundler/gem_tasks, which loads the gemspec\n-# on rake init, even though some prerequisites are not generated until `rake build` is invoked.\n-version = begin\n-            require File.expand_path('../lib/zeus/version', __FILE__)\n-            Zeus::VERSION\n-          rescue LoadError\n-            \"0.0.0\"\n-          end\n-\n-files = File.exist?('MANIFEST') ? File.read(\"MANIFEST\").lines.map(&:chomp) : []\n+require './lib/zeus/version'\n \n Gem::Specification.new do |gem|\n   gem.authors       = [\"Burke Libbey\"]\n   gem.email         = [\"burke@libbey.me\"]\n-  gem.description   = %q{Boot any rails app in under a second}\n-  gem.summary       = %q{Zeus is an intelligent preloader for ruby applications. It allows normal development tasks to be run in a fraction of a second.}\n+  gem.description   = \"Boot any rails app in under a second\"\n+  gem.summary       = \"Zeus is an intelligent preloader for ruby applications. It allows normal development tasks to be run in a fraction of a second.\"\n   gem.homepage      = \"http://zeus.is\"\n \n-  gem.files         = files\n+  gem.files         = Dir[\"{lib,ext,bin}/**/*\"]",
        "path": "rubygem/zeus.gemspec",
        "position": 25,
        "original_position": 25,
        "commit_id": "9e60c043ea0a77c3d4c2420473803f145655a9cf",
        "original_commit_id": "9e60c043ea0a77c3d4c2420473803f145655a9cf",
        "user": {
            "login": "burke",
            "id": 1284,
            "node_id": "MDQ6VXNlcjEyODQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1284?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/burke",
            "html_url": "https://github.com/burke",
            "followers_url": "https://api.github.com/users/burke/followers",
            "following_url": "https://api.github.com/users/burke/following{/other_user}",
            "gists_url": "https://api.github.com/users/burke/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/burke/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/burke/subscriptions",
            "organizations_url": "https://api.github.com/users/burke/orgs",
            "repos_url": "https://api.github.com/users/burke/repos",
            "events_url": "https://api.github.com/users/burke/events{/privacy}",
            "received_events_url": "https://api.github.com/users/burke/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Actually, that won't even help you with what you're trying to accomplish. The gem really can't work straight from git. The build process compiles a binary that's too large to reasonably commit to git. The gem won't work without it, and I doubt the tests will either.\n",
        "created_at": "2014-08-13T16:17:07Z",
        "updated_at": "2014-08-13T16:17:07Z",
        "html_url": "https://github.com/burke/zeus/pull/480#discussion_r16186354",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/480",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/16186354"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/480#discussion_r16186354"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/480"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/16187002",
        "pull_request_review_id": null,
        "id": 16187002,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MTg3MDAy",
        "diff_hunk": "@@ -1,30 +1,17 @@\n-# -*- encoding: utf-8 -*-\n-\n-# This preamble is basically used to deal with bundler/gem_tasks, which loads the gemspec\n-# on rake init, even though some prerequisites are not generated until `rake build` is invoked.\n-version = begin\n-            require File.expand_path('../lib/zeus/version', __FILE__)\n-            Zeus::VERSION\n-          rescue LoadError\n-            \"0.0.0\"\n-          end\n-\n-files = File.exist?('MANIFEST') ? File.read(\"MANIFEST\").lines.map(&:chomp) : []\n+require './lib/zeus/version'\n \n Gem::Specification.new do |gem|\n   gem.authors       = [\"Burke Libbey\"]\n   gem.email         = [\"burke@libbey.me\"]\n-  gem.description   = %q{Boot any rails app in under a second}\n-  gem.summary       = %q{Zeus is an intelligent preloader for ruby applications. It allows normal development tasks to be run in a fraction of a second.}\n+  gem.description   = \"Boot any rails app in under a second\"\n+  gem.summary       = \"Zeus is an intelligent preloader for ruby applications. It allows normal development tasks to be run in a fraction of a second.\"\n   gem.homepage      = \"http://zeus.is\"\n \n-  gem.files         = files\n+  gem.files         = Dir[\"{lib,ext,bin}/**/*\"]",
        "path": "rubygem/zeus.gemspec",
        "position": 25,
        "original_position": 25,
        "commit_id": "9e60c043ea0a77c3d4c2420473803f145655a9cf",
        "original_commit_id": "9e60c043ea0a77c3d4c2420473803f145655a9cf",
        "user": {
            "login": "grosser",
            "id": 11367,
            "node_id": "MDQ6VXNlcjExMzY3",
            "avatar_url": "https://avatars3.githubusercontent.com/u/11367?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/grosser",
            "html_url": "https://github.com/grosser",
            "followers_url": "https://api.github.com/users/grosser/followers",
            "following_url": "https://api.github.com/users/grosser/following{/other_user}",
            "gists_url": "https://api.github.com/users/grosser/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/grosser/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/grosser/subscriptions",
            "organizations_url": "https://api.github.com/users/grosser/orgs",
            "repos_url": "https://api.github.com/users/grosser/repos",
            "events_url": "https://api.github.com/users/grosser/events{/privacy}",
            "received_events_url": "https://api.github.com/users/grosser/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Damn, thanks for the heads up :)\nSome unit tests would work + no more Manifest file generation, is this still ok ?\n(I added man + build folders, I think it's not showing up because it's closed -> can you reopen to see the change ?)\n",
        "created_at": "2014-08-13T16:27:49Z",
        "updated_at": "2014-08-13T16:27:49Z",
        "html_url": "https://github.com/burke/zeus/pull/480#discussion_r16187002",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/480",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/16187002"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/480#discussion_r16187002"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/480"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/28092928",
        "pull_request_review_id": null,
        "id": 28092928,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4MDkyOTI4",
        "diff_hunk": "@@ -182,6 +182,14 @@ def test_environment\n     end\n \n     def test_helper\n+      # don't let minitest setup another exit hook\n+      begin\n+        require 'minitest/unit'\n+        MiniTest::Unit.class_variable_set(\"@@installed_at_exit\", true)",
        "path": "rubygem/lib/zeus/rails.rb",
        "position": 7,
        "original_position": 7,
        "commit_id": "584477def3300ff1c27cc31cfca8ee8564c9a2a2",
        "original_commit_id": "584477def3300ff1c27cc31cfca8ee8564c9a2a2",
        "user": {
            "login": "latortuga",
            "id": 9379,
            "node_id": "MDQ6VXNlcjkzNzk=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/9379?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/latortuga",
            "html_url": "https://github.com/latortuga",
            "followers_url": "https://api.github.com/users/latortuga/followers",
            "following_url": "https://api.github.com/users/latortuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/latortuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/latortuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/latortuga/subscriptions",
            "organizations_url": "https://api.github.com/users/latortuga/orgs",
            "repos_url": "https://api.github.com/users/latortuga/repos",
            "events_url": "https://api.github.com/users/latortuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/latortuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Hi @zenspider I know this is a bit of a necro comment thread but I wanted to engage you a bit on this. You're 100% right this is a hack and it doesn't work right in Minitest 5. We introduced a patch for that as well, though in my experience there are still issues.\n\nWe are running Minitest tests through a modified version of [qrush's m gem](https://github.com/qrush/m) by passing ARGV through to it so that we can run tests by line number. As far as I know, Minitest does not support this.\n",
        "created_at": "2015-04-09T19:12:16Z",
        "updated_at": "2015-04-09T19:12:16Z",
        "html_url": "https://github.com/burke/zeus/pull/348#discussion_r28092928",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/348",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/28092928"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/348#discussion_r28092928"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/348"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/28111513",
        "pull_request_review_id": null,
        "id": 28111513,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4MTExNTEz",
        "diff_hunk": "@@ -182,6 +182,14 @@ def test_environment\n     end\n \n     def test_helper\n+      # don't let minitest setup another exit hook\n+      begin\n+        require 'minitest/unit'\n+        MiniTest::Unit.class_variable_set(\"@@installed_at_exit\", true)",
        "path": "rubygem/lib/zeus/rails.rb",
        "position": 7,
        "original_position": 7,
        "commit_id": "584477def3300ff1c27cc31cfca8ee8564c9a2a2",
        "original_commit_id": "584477def3300ff1c27cc31cfca8ee8564c9a2a2",
        "user": {
            "login": "zenspider",
            "id": 9832,
            "node_id": "MDQ6VXNlcjk4MzI=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/9832?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zenspider",
            "html_url": "https://github.com/zenspider",
            "followers_url": "https://api.github.com/users/zenspider/followers",
            "following_url": "https://api.github.com/users/zenspider/following{/other_user}",
            "gists_url": "https://api.github.com/users/zenspider/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zenspider/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zenspider/subscriptions",
            "organizations_url": "https://api.github.com/users/zenspider/orgs",
            "repos_url": "https://api.github.com/users/zenspider/repos",
            "events_url": "https://api.github.com/users/zenspider/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zenspider/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Is this just commentary or is there supposed to be a question in here? You say \"engage you a bit\" but I don't know what, if anything, you want me to respond to.\n",
        "created_at": "2015-04-09T23:14:49Z",
        "updated_at": "2015-04-09T23:14:49Z",
        "html_url": "https://github.com/burke/zeus/pull/348#discussion_r28111513",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/348",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/28111513"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/348#discussion_r28111513"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/348"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/28111707",
        "pull_request_review_id": null,
        "id": 28111707,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4MTExNzA3",
        "diff_hunk": "@@ -182,6 +182,14 @@ def test_environment\n     end\n \n     def test_helper\n+      # don't let minitest setup another exit hook\n+      begin\n+        require 'minitest/unit'\n+        MiniTest::Unit.class_variable_set(\"@@installed_at_exit\", true)",
        "path": "rubygem/lib/zeus/rails.rb",
        "position": 7,
        "original_position": 7,
        "commit_id": "584477def3300ff1c27cc31cfca8ee8564c9a2a2",
        "original_commit_id": "584477def3300ff1c27cc31cfca8ee8564c9a2a2",
        "user": {
            "login": "blowmage",
            "id": 730,
            "node_id": "MDQ6VXNlcjczMA==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/730?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/blowmage",
            "html_url": "https://github.com/blowmage",
            "followers_url": "https://api.github.com/users/blowmage/followers",
            "following_url": "https://api.github.com/users/blowmage/following{/other_user}",
            "gists_url": "https://api.github.com/users/blowmage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/blowmage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/blowmage/subscriptions",
            "organizations_url": "https://api.github.com/users/blowmage/orgs",
            "repos_url": "https://api.github.com/users/blowmage/repos",
            "events_url": "https://api.github.com/users/blowmage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/blowmage/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "FWIW, [minitest-line](https://github.com/judofyr/minitest-line) can be used to run a test by line number in Minitest 5.0+.\n",
        "created_at": "2015-04-09T23:18:47Z",
        "updated_at": "2015-04-09T23:18:47Z",
        "html_url": "https://github.com/burke/zeus/pull/348#discussion_r28111707",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/348",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/28111707"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/348#discussion_r28111707"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/348"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/28121308",
        "pull_request_review_id": null,
        "id": 28121308,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4MTIxMzA4",
        "diff_hunk": "@@ -182,6 +182,14 @@ def test_environment\n     end\n \n     def test_helper\n+      # don't let minitest setup another exit hook\n+      begin\n+        require 'minitest/unit'\n+        MiniTest::Unit.class_variable_set(\"@@installed_at_exit\", true)",
        "path": "rubygem/lib/zeus/rails.rb",
        "position": 7,
        "original_position": 7,
        "commit_id": "584477def3300ff1c27cc31cfca8ee8564c9a2a2",
        "original_commit_id": "584477def3300ff1c27cc31cfca8ee8564c9a2a2",
        "user": {
            "login": "latortuga",
            "id": 9379,
            "node_id": "MDQ6VXNlcjkzNzk=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/9379?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/latortuga",
            "html_url": "https://github.com/latortuga",
            "followers_url": "https://api.github.com/users/latortuga/followers",
            "following_url": "https://api.github.com/users/latortuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/latortuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/latortuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/latortuga/subscriptions",
            "organizations_url": "https://api.github.com/users/latortuga/orgs",
            "repos_url": "https://api.github.com/users/latortuga/repos",
            "events_url": "https://api.github.com/users/latortuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/latortuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You're right, I didn't ask a question.\n\nI'd like to make zeus and minitest work out of the box without having to introduce hacks like this. Is there any way to invoke Minitest to run with specified options and then bypassing the autorun functionality? e.g.\n\n``` ruby\nrequire 'test_helper'\nclass LameTest < ActiveSupport::TestCase\n  def test_truth\n    assert true\n  end\nend\n\nMinitest.run(['-n', '/truth/'])\n```\n\nWhen run through rails, `Minitest.autorun` gets called when you require `rails/test_help` which causes the tests to get invoked twice. There don't appear to be any hooks to skip this and test_help requires and adds lots of useful code for Rails tests.\n\nYou wrote:\n- why is running via autorun a bad thing?\n- who is invoking autorun if zeus is running the tests directly?\n- why not let the child process (I'm assuming there) exit, so it runs the tests normally?\n\nAutorun doesn't work for this situation because we preload the test_helper which sets up autorun and then we can't specify our options to the actual `run` call in the `at_exit` hook. Would you be open to adding a method to customize the [run args](https://github.com/seattlerb/minitest/blob/master/lib/minitest.rb#L56) that are used in the `at_exit` hook?\n\nAs for your last point, that's what we're doing - the child process exits after we call `Minitest.run(args)` but then autorun runs them again with no arguments.\n",
        "created_at": "2015-04-10T03:56:48Z",
        "updated_at": "2015-04-10T03:58:10Z",
        "html_url": "https://github.com/burke/zeus/pull/348#discussion_r28121308",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/348",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/28121308"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/348#discussion_r28121308"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/348"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/28156763",
        "pull_request_review_id": null,
        "id": 28156763,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4MTU2NzYz",
        "diff_hunk": "@@ -182,6 +182,14 @@ def test_environment\n     end\n \n     def test_helper\n+      # don't let minitest setup another exit hook\n+      begin\n+        require 'minitest/unit'\n+        MiniTest::Unit.class_variable_set(\"@@installed_at_exit\", true)",
        "path": "rubygem/lib/zeus/rails.rb",
        "position": 7,
        "original_position": 7,
        "commit_id": "584477def3300ff1c27cc31cfca8ee8564c9a2a2",
        "original_commit_id": "584477def3300ff1c27cc31cfca8ee8564c9a2a2",
        "user": {
            "login": "blowmage",
            "id": 730,
            "node_id": "MDQ6VXNlcjczMA==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/730?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/blowmage",
            "html_url": "https://github.com/blowmage",
            "followers_url": "https://api.github.com/users/blowmage/followers",
            "following_url": "https://api.github.com/users/blowmage/following{/other_user}",
            "gists_url": "https://api.github.com/users/blowmage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/blowmage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/blowmage/subscriptions",
            "organizations_url": "https://api.github.com/users/blowmage/orgs",
            "repos_url": "https://api.github.com/users/blowmage/repos",
            "events_url": "https://api.github.com/users/blowmage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/blowmage/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Could this conversation be moved to its own issue instead?\n",
        "created_at": "2015-04-10T15:58:08Z",
        "updated_at": "2015-04-10T15:58:08Z",
        "html_url": "https://github.com/burke/zeus/pull/348#discussion_r28156763",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/348",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/28156763"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/348#discussion_r28156763"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/348"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/63371601",
        "pull_request_review_id": null,
        "id": 63371601,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMzcxNjAx",
        "diff_hunk": "@@ -0,0 +1,265 @@\n+package zeusmaster_test\n+\n+import (\n+\t\"bytes\"\n+\t\"fmt\"\n+\t\"io/ioutil\"\n+\t\"net\"\n+\t\"os\"\n+\t\"path\"\n+\t\"path/filepath\"\n+\t\"testing\"\n+\t\"time\"\n+\n+\t\"github.com/burke/zeus/go/config\"\n+\tslog \"github.com/burke/zeus/go/shinylog\"\n+\t\"github.com/burke/zeus/go/unixsocket\"\n+\t\"github.com/burke/zeus/go/zeusmaster\"\n+)\n+\n+var testFiles = map[string]string{\n+\t\"zeus.json\": `\n+{\n+  \"command\": \"ruby -r./custom_plan -eZeus.go\",\n+  \"plan\": {\n+    \"boot\": {\n+      \"data\": {\n+        \"data_srv\": {}\n+      },\n+      \"code\": {\n+        \"code_srv\": {}\n+      },\n+      \"cmd_srv\": []\n+    }\n+  }\n+}\n+`,\n+\t\"custom_plan.rb\": `\n+$LOAD_PATH.unshift(File.readlink('./lib'))\n+require 'zeus'\n+\n+class CustomPlan < Zeus::Plan\n+  def self.command(name, &block)\n+    define_method(name) do\n+      redirect_log(name)\n+      begin\n+        self.instance_eval(&block)\n+      rescue => e\n+        STDERR.puts \"#{name} terminated with exception: #{e.message}\"\n+        STDERR.puts e.backtrace.map {|line| \" #{line}\"}\n+        raise\n+      end\n+    end\n+  end\n+\n+  command :boot do\n+    redirect_log('boot')\n+    require_relative 'srv'\n+  end\n+\n+  command :data do\n+    redirect_log('data')\n+    require_relative 'data'\n+  end\n+\n+  command :code do\n+    redirect_log('code')\n+    require_relative 'code'\n+  end\n+\n+  command :cmd_srv do\n+    redirect_log('cmd_srv')\n+    serve('cmd.sock')\n+  end\n+\n+  command :data_srv do\n+    redirect_log('data_srv')\n+    serve('data.sock')\n+  end\n+\n+  command :code_srv do\n+    redirect_log('code_srv')\n+    serve('code.sock')\n+  end\n+\n+  def redirect_log(cmd)\n+    log_file = File.open(\"zeus_test_#{cmd}.log\", 'a')\n+    log_file.sync = true\n+    STDOUT.reopen(log_file)\n+    STDERR.reopen(log_file)\n+    STDOUT.sync = STDERR.sync = true\n+  end\n+end\n+\n+Zeus.plan = CustomPlan.new\n+`,\n+\t\"data.rb\": `\n+require 'yaml'\n+$response = YAML::load_file('data.yaml')['response']\n+`,\n+\t\"data.yaml\": `\n+response: YAML the Camel is a Mammal with Enamel\n+`,\n+\t\"other-data.yaml\": `\n+response: Hi\n+`,\n+\t\"code.rb\": `\n+$response = \"Hello, world!\"\n+`,\n+\t\"other-code.rb\": `\n+$response = \"there!\"\n+`,\n+\t\"srv.rb\": `\n+$response = \"pong\"\n+\n+def serve(sock_path)\n+  sock = Socket.new(Socket::AF_UNIX, Socket::SOCK_DGRAM, 0)\n+  sock.connect(Socket.pack_sockaddr_un(sock_path))\n+\n+  b = sock.send($response, 0)\n+  puts \"Wrote #{b} bytes to #{sock_path}\"\n+end\n+`,\n+}\n+\n+func writeTestFiles(dir string) error {\n+\tfor name, contents := range testFiles {\n+\t\tif err := ioutil.WriteFile(path.Join(dir, name), []byte(contents), 0644); err != nil {\n+\t\t\treturn fmt.Errorf(\"error writing %s: %v\", name, err)\n+\t\t}\n+\t}\n+\n+\tgempath := os.Getenv(\"ZEUS_TEST_GEMPATH\")\n+\tif gempath == \"\" {\n+\t\tvar err error\n+\t\tgempath, err = filepath.Abs(\"rubygem\")\n+\t\tif err != nil {\n+\t\t\treturn fmt.Errorf(\"error finding gempath: %v\", err)\n+\t\t}\n+\t}\n+\n+\tif err := os.Symlink(filepath.Join(gempath, \"lib\"), filepath.Join(dir, \"lib\")); err != nil {\n+\t\treturn fmt.Errorf(\"error linking zeus gem: %v\", err)\n+\t}\n+\n+\treturn nil\n+}\n+\n+func enableTracing() {\n+\tslog.SetTraceLogger(slog.NewTraceLogger(os.Stderr))\n+}\n+\n+func TestZeusBoots(t *testing.T) {\n+\tif os.Getenv(\"ZEUS_LISTENER_BINARY\") == \"\" {\n+\t\tt.Fatal(\"Missing ZEUS_LISTENER_BINARY env var\")\n+\t}\n+\n+\tdir, err := ioutil.TempDir(\"\", \"zeus_test\")\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\tdefer os.RemoveAll(dir)\n+\n+\tif err := writeTestFiles(dir); err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\n+\tconfig.ConfigFile = filepath.Join(dir, \"zeus.json\")\n+\tunixsocket.SetZeusSockName(filepath.Join(dir, \".zeus.sock\"))\n+\n+\tconnections := map[string]*net.UnixConn{\n+\t\t\"cmd\":  nil,\n+\t\t\"data\": nil,\n+\t\t\"code\": nil,\n+\t}\n+\n+\tfor name := range connections {\n+\t\tsockName := filepath.Join(dir, fmt.Sprintf(\"%s.sock\", name))\n+\n+\t\tc, err := net.ListenUnixgram(\"unixgram\", &net.UnixAddr{\n+\t\t\tName: sockName, Net: \"unixgram\",\n+\t\t})\n+\t\tif err != nil {\n+\t\t\tt.Fatalf(\"Error opening %q socket: %v\", sockName, err)\n+\t\t}\n+\t\tdefer c.Close()\n+\n+\t\tconnections[name] = c\n+\t}\n+\n+\tme, err := os.FindProcess(os.Getpid())\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\n+\tif err := os.Chdir(dir); err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\n+\t// TODO: Find a way to redirect stdout so we can look for crashed\n+\t// processes.\n+\tenableTracing()\n+\tzexit := make(chan int)\n+\tgo func() {\n+\t\tzexit <- zeusmaster.Run()\n+\t}()\n+\n+\texpects := map[string]string{\n+\t\t// TODO: Use the zeusclient to spawn a command to test\n+\t\t// that path.\n+\t\t// \"cmd\":  \"pong\",\n+\t\t\"data\": \"YAML the Camel is a Mammal with Enamel\",\n+\t\t\"code\": \"Hello, world!\",\n+\t}\n+\n+\tfor name, want := range expects {\n+\t\tif err := readAndCompare(connections[name], want); err != nil {\n+\t\t\tt.Fatalf(\"%s: %v\", name, err)\n+\t\t}\n+\t}\n+\n+\t// TODO: It appears the filewatcher takes some time to initialize\n+\t// so we need to wait for it to propagate before changing things.\n+\ttime.Sleep(500 * time.Millisecond)\n+\n+\tfor _, f := range []string{\"data.yaml\", \"code.rb\"} {\n+\t\tfrom := filepath.Join(dir, fmt.Sprintf(\"other-%s\", f))\n+\t\tto := filepath.Join(dir, f)\n+\t\tif err := os.Rename(from, to); err != nil {\n+\t\t\tt.Fatalf(\"Error renaming %s: %v\", f, err)\n+\t\t}\n+\t}\n+\n+\texpects = map[string]string{\n+\t\t\"data\": \"Hi\",\n+\t\t\"code\": \"there!\",\n+\t}\n+\n+\tfor name, want := range expects {\n+\t\tif err := readAndCompare(connections[name], want); err != nil {\n+\t\t\tt.Fatalf(\"%s: %v\", name, err)",
        "path": "go/zeusmaster/zeusmaster_test.go",
        "position": 217,
        "original_position": 240,
        "commit_id": "94aa1cb32560e32ec90ebb91207310853164d5c0",
        "original_commit_id": "25df4a77803091d09265abd0c80bbd985a54826e",
        "user": {
            "login": "antifuchs",
            "id": 11864,
            "node_id": "MDQ6VXNlcjExODY0",
            "avatar_url": "https://avatars1.githubusercontent.com/u/11864?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/antifuchs",
            "html_url": "https://github.com/antifuchs",
            "followers_url": "https://api.github.com/users/antifuchs/followers",
            "following_url": "https://api.github.com/users/antifuchs/following{/other_user}",
            "gists_url": "https://api.github.com/users/antifuchs/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/antifuchs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/antifuchs/subscriptions",
            "organizations_url": "https://api.github.com/users/antifuchs/orgs",
            "repos_url": "https://api.github.com/users/antifuchs/repos",
            "events_url": "https://api.github.com/users/antifuchs/events{/privacy}",
            "received_events_url": "https://api.github.com/users/antifuchs/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Seems there's a test failure happening around here in 2.1.7: https://travis-ci.org/burke/zeus/jobs/130500536 - seems unlikely the test it taking too long at 4s, but I guess some race condition is still happening.\n",
        "created_at": "2016-05-16T15:24:46Z",
        "updated_at": "2016-05-16T21:44:01Z",
        "html_url": "https://github.com/burke/zeus/pull/549#discussion_r63371601",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/549",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/63371601"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/549#discussion_r63371601"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/549"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/63384764",
        "pull_request_review_id": null,
        "id": 63384764,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMzg0NzY0",
        "diff_hunk": "@@ -0,0 +1,265 @@\n+package zeusmaster_test\n+\n+import (\n+\t\"bytes\"\n+\t\"fmt\"\n+\t\"io/ioutil\"\n+\t\"net\"\n+\t\"os\"\n+\t\"path\"\n+\t\"path/filepath\"\n+\t\"testing\"\n+\t\"time\"\n+\n+\t\"github.com/burke/zeus/go/config\"\n+\tslog \"github.com/burke/zeus/go/shinylog\"\n+\t\"github.com/burke/zeus/go/unixsocket\"\n+\t\"github.com/burke/zeus/go/zeusmaster\"\n+)\n+\n+var testFiles = map[string]string{\n+\t\"zeus.json\": `\n+{\n+  \"command\": \"ruby -r./custom_plan -eZeus.go\",\n+  \"plan\": {\n+    \"boot\": {\n+      \"data\": {\n+        \"data_srv\": {}\n+      },\n+      \"code\": {\n+        \"code_srv\": {}\n+      },\n+      \"cmd_srv\": []\n+    }\n+  }\n+}\n+`,\n+\t\"custom_plan.rb\": `\n+$LOAD_PATH.unshift(File.readlink('./lib'))\n+require 'zeus'\n+\n+class CustomPlan < Zeus::Plan\n+  def self.command(name, &block)\n+    define_method(name) do\n+      redirect_log(name)\n+      begin\n+        self.instance_eval(&block)\n+      rescue => e\n+        STDERR.puts \"#{name} terminated with exception: #{e.message}\"\n+        STDERR.puts e.backtrace.map {|line| \" #{line}\"}\n+        raise\n+      end\n+    end\n+  end\n+\n+  command :boot do\n+    redirect_log('boot')\n+    require_relative 'srv'\n+  end\n+\n+  command :data do\n+    redirect_log('data')\n+    require_relative 'data'\n+  end\n+\n+  command :code do\n+    redirect_log('code')\n+    require_relative 'code'\n+  end\n+\n+  command :cmd_srv do\n+    redirect_log('cmd_srv')\n+    serve('cmd.sock')\n+  end\n+\n+  command :data_srv do\n+    redirect_log('data_srv')\n+    serve('data.sock')\n+  end\n+\n+  command :code_srv do\n+    redirect_log('code_srv')\n+    serve('code.sock')\n+  end\n+\n+  def redirect_log(cmd)\n+    log_file = File.open(\"zeus_test_#{cmd}.log\", 'a')\n+    log_file.sync = true\n+    STDOUT.reopen(log_file)\n+    STDERR.reopen(log_file)\n+    STDOUT.sync = STDERR.sync = true\n+  end\n+end\n+\n+Zeus.plan = CustomPlan.new\n+`,\n+\t\"data.rb\": `\n+require 'yaml'\n+$response = YAML::load_file('data.yaml')['response']\n+`,\n+\t\"data.yaml\": `\n+response: YAML the Camel is a Mammal with Enamel\n+`,\n+\t\"other-data.yaml\": `\n+response: Hi\n+`,\n+\t\"code.rb\": `\n+$response = \"Hello, world!\"\n+`,\n+\t\"other-code.rb\": `\n+$response = \"there!\"\n+`,\n+\t\"srv.rb\": `\n+$response = \"pong\"\n+\n+def serve(sock_path)\n+  sock = Socket.new(Socket::AF_UNIX, Socket::SOCK_DGRAM, 0)\n+  sock.connect(Socket.pack_sockaddr_un(sock_path))\n+\n+  b = sock.send($response, 0)\n+  puts \"Wrote #{b} bytes to #{sock_path}\"\n+end\n+`,\n+}\n+\n+func writeTestFiles(dir string) error {\n+\tfor name, contents := range testFiles {\n+\t\tif err := ioutil.WriteFile(path.Join(dir, name), []byte(contents), 0644); err != nil {\n+\t\t\treturn fmt.Errorf(\"error writing %s: %v\", name, err)\n+\t\t}\n+\t}\n+\n+\tgempath := os.Getenv(\"ZEUS_TEST_GEMPATH\")\n+\tif gempath == \"\" {\n+\t\tvar err error\n+\t\tgempath, err = filepath.Abs(\"rubygem\")\n+\t\tif err != nil {\n+\t\t\treturn fmt.Errorf(\"error finding gempath: %v\", err)\n+\t\t}\n+\t}\n+\n+\tif err := os.Symlink(filepath.Join(gempath, \"lib\"), filepath.Join(dir, \"lib\")); err != nil {\n+\t\treturn fmt.Errorf(\"error linking zeus gem: %v\", err)\n+\t}\n+\n+\treturn nil\n+}\n+\n+func enableTracing() {\n+\tslog.SetTraceLogger(slog.NewTraceLogger(os.Stderr))\n+}\n+\n+func TestZeusBoots(t *testing.T) {\n+\tif os.Getenv(\"ZEUS_LISTENER_BINARY\") == \"\" {\n+\t\tt.Fatal(\"Missing ZEUS_LISTENER_BINARY env var\")\n+\t}\n+\n+\tdir, err := ioutil.TempDir(\"\", \"zeus_test\")\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\tdefer os.RemoveAll(dir)\n+\n+\tif err := writeTestFiles(dir); err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\n+\tconfig.ConfigFile = filepath.Join(dir, \"zeus.json\")\n+\tunixsocket.SetZeusSockName(filepath.Join(dir, \".zeus.sock\"))\n+\n+\tconnections := map[string]*net.UnixConn{\n+\t\t\"cmd\":  nil,\n+\t\t\"data\": nil,\n+\t\t\"code\": nil,\n+\t}\n+\n+\tfor name := range connections {\n+\t\tsockName := filepath.Join(dir, fmt.Sprintf(\"%s.sock\", name))\n+\n+\t\tc, err := net.ListenUnixgram(\"unixgram\", &net.UnixAddr{\n+\t\t\tName: sockName, Net: \"unixgram\",\n+\t\t})\n+\t\tif err != nil {\n+\t\t\tt.Fatalf(\"Error opening %q socket: %v\", sockName, err)\n+\t\t}\n+\t\tdefer c.Close()\n+\n+\t\tconnections[name] = c\n+\t}\n+\n+\tme, err := os.FindProcess(os.Getpid())\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\n+\tif err := os.Chdir(dir); err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\n+\t// TODO: Find a way to redirect stdout so we can look for crashed\n+\t// processes.\n+\tenableTracing()\n+\tzexit := make(chan int)\n+\tgo func() {\n+\t\tzexit <- zeusmaster.Run()\n+\t}()\n+\n+\texpects := map[string]string{\n+\t\t// TODO: Use the zeusclient to spawn a command to test\n+\t\t// that path.\n+\t\t// \"cmd\":  \"pong\",\n+\t\t\"data\": \"YAML the Camel is a Mammal with Enamel\",\n+\t\t\"code\": \"Hello, world!\",\n+\t}\n+\n+\tfor name, want := range expects {\n+\t\tif err := readAndCompare(connections[name], want); err != nil {\n+\t\t\tt.Fatalf(\"%s: %v\", name, err)\n+\t\t}\n+\t}\n+\n+\t// TODO: It appears the filewatcher takes some time to initialize\n+\t// so we need to wait for it to propagate before changing things.\n+\ttime.Sleep(500 * time.Millisecond)\n+\n+\tfor _, f := range []string{\"data.yaml\", \"code.rb\"} {\n+\t\tfrom := filepath.Join(dir, fmt.Sprintf(\"other-%s\", f))\n+\t\tto := filepath.Join(dir, f)\n+\t\tif err := os.Rename(from, to); err != nil {\n+\t\t\tt.Fatalf(\"Error renaming %s: %v\", f, err)\n+\t\t}\n+\t}\n+\n+\texpects = map[string]string{\n+\t\t\"data\": \"Hi\",\n+\t\t\"code\": \"there!\",\n+\t}\n+\n+\tfor name, want := range expects {\n+\t\tif err := readAndCompare(connections[name], want); err != nil {\n+\t\t\tt.Fatalf(\"%s: %v\", name, err)",
        "path": "go/zeusmaster/zeusmaster_test.go",
        "position": 217,
        "original_position": 240,
        "commit_id": "94aa1cb32560e32ec90ebb91207310853164d5c0",
        "original_commit_id": "25df4a77803091d09265abd0c80bbd985a54826e",
        "user": {
            "login": "metcalf",
            "id": 16716,
            "node_id": "MDQ6VXNlcjE2NzE2",
            "avatar_url": "https://avatars1.githubusercontent.com/u/16716?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/metcalf",
            "html_url": "https://github.com/metcalf",
            "followers_url": "https://api.github.com/users/metcalf/followers",
            "following_url": "https://api.github.com/users/metcalf/following{/other_user}",
            "gists_url": "https://api.github.com/users/metcalf/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/metcalf/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/metcalf/subscriptions",
            "organizations_url": "https://api.github.com/users/metcalf/orgs",
            "repos_url": "https://api.github.com/users/metcalf/repos",
            "events_url": "https://api.github.com/users/metcalf/events{/privacy}",
            "received_events_url": "https://api.github.com/users/metcalf/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Gah, you know I thought I was safe pushing updated comments and going to bed. I've doubled the relevant timeout to 1 second... I hope that'll get this test reliable. I really hate integration tests but I think it'll be a long road to decoupling the components here enough to unit test effectively.\n",
        "created_at": "2016-05-16T16:49:54Z",
        "updated_at": "2016-05-16T21:44:01Z",
        "html_url": "https://github.com/burke/zeus/pull/549#discussion_r63384764",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/549",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/63384764"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/549#discussion_r63384764"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/549"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/63386910",
        "pull_request_review_id": null,
        "id": 63386910,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMzg2OTEw",
        "diff_hunk": "@@ -0,0 +1,265 @@\n+package zeusmaster_test\n+\n+import (\n+\t\"bytes\"\n+\t\"fmt\"\n+\t\"io/ioutil\"\n+\t\"net\"\n+\t\"os\"\n+\t\"path\"\n+\t\"path/filepath\"\n+\t\"testing\"\n+\t\"time\"\n+\n+\t\"github.com/burke/zeus/go/config\"\n+\tslog \"github.com/burke/zeus/go/shinylog\"\n+\t\"github.com/burke/zeus/go/unixsocket\"\n+\t\"github.com/burke/zeus/go/zeusmaster\"\n+)\n+\n+var testFiles = map[string]string{\n+\t\"zeus.json\": `\n+{\n+  \"command\": \"ruby -r./custom_plan -eZeus.go\",\n+  \"plan\": {\n+    \"boot\": {\n+      \"data\": {\n+        \"data_srv\": {}\n+      },\n+      \"code\": {\n+        \"code_srv\": {}\n+      },\n+      \"cmd_srv\": []\n+    }\n+  }\n+}\n+`,\n+\t\"custom_plan.rb\": `\n+$LOAD_PATH.unshift(File.readlink('./lib'))\n+require 'zeus'\n+\n+class CustomPlan < Zeus::Plan\n+  def self.command(name, &block)\n+    define_method(name) do\n+      redirect_log(name)\n+      begin\n+        self.instance_eval(&block)\n+      rescue => e\n+        STDERR.puts \"#{name} terminated with exception: #{e.message}\"\n+        STDERR.puts e.backtrace.map {|line| \" #{line}\"}\n+        raise\n+      end\n+    end\n+  end\n+\n+  command :boot do\n+    redirect_log('boot')\n+    require_relative 'srv'\n+  end\n+\n+  command :data do\n+    redirect_log('data')\n+    require_relative 'data'\n+  end\n+\n+  command :code do\n+    redirect_log('code')\n+    require_relative 'code'\n+  end\n+\n+  command :cmd_srv do\n+    redirect_log('cmd_srv')\n+    serve('cmd.sock')\n+  end\n+\n+  command :data_srv do\n+    redirect_log('data_srv')\n+    serve('data.sock')\n+  end\n+\n+  command :code_srv do\n+    redirect_log('code_srv')\n+    serve('code.sock')\n+  end\n+\n+  def redirect_log(cmd)\n+    log_file = File.open(\"zeus_test_#{cmd}.log\", 'a')\n+    log_file.sync = true\n+    STDOUT.reopen(log_file)\n+    STDERR.reopen(log_file)\n+    STDOUT.sync = STDERR.sync = true\n+  end\n+end\n+\n+Zeus.plan = CustomPlan.new\n+`,\n+\t\"data.rb\": `\n+require 'yaml'\n+$response = YAML::load_file('data.yaml')['response']\n+`,\n+\t\"data.yaml\": `\n+response: YAML the Camel is a Mammal with Enamel\n+`,\n+\t\"other-data.yaml\": `\n+response: Hi\n+`,\n+\t\"code.rb\": `\n+$response = \"Hello, world!\"\n+`,\n+\t\"other-code.rb\": `\n+$response = \"there!\"\n+`,\n+\t\"srv.rb\": `\n+$response = \"pong\"\n+\n+def serve(sock_path)\n+  sock = Socket.new(Socket::AF_UNIX, Socket::SOCK_DGRAM, 0)\n+  sock.connect(Socket.pack_sockaddr_un(sock_path))\n+\n+  b = sock.send($response, 0)\n+  puts \"Wrote #{b} bytes to #{sock_path}\"\n+end\n+`,\n+}\n+\n+func writeTestFiles(dir string) error {\n+\tfor name, contents := range testFiles {\n+\t\tif err := ioutil.WriteFile(path.Join(dir, name), []byte(contents), 0644); err != nil {\n+\t\t\treturn fmt.Errorf(\"error writing %s: %v\", name, err)\n+\t\t}\n+\t}\n+\n+\tgempath := os.Getenv(\"ZEUS_TEST_GEMPATH\")\n+\tif gempath == \"\" {\n+\t\tvar err error\n+\t\tgempath, err = filepath.Abs(\"rubygem\")\n+\t\tif err != nil {\n+\t\t\treturn fmt.Errorf(\"error finding gempath: %v\", err)\n+\t\t}\n+\t}\n+\n+\tif err := os.Symlink(filepath.Join(gempath, \"lib\"), filepath.Join(dir, \"lib\")); err != nil {\n+\t\treturn fmt.Errorf(\"error linking zeus gem: %v\", err)\n+\t}\n+\n+\treturn nil\n+}\n+\n+func enableTracing() {\n+\tslog.SetTraceLogger(slog.NewTraceLogger(os.Stderr))\n+}\n+\n+func TestZeusBoots(t *testing.T) {\n+\tif os.Getenv(\"ZEUS_LISTENER_BINARY\") == \"\" {\n+\t\tt.Fatal(\"Missing ZEUS_LISTENER_BINARY env var\")\n+\t}\n+\n+\tdir, err := ioutil.TempDir(\"\", \"zeus_test\")\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\tdefer os.RemoveAll(dir)\n+\n+\tif err := writeTestFiles(dir); err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\n+\tconfig.ConfigFile = filepath.Join(dir, \"zeus.json\")\n+\tunixsocket.SetZeusSockName(filepath.Join(dir, \".zeus.sock\"))\n+\n+\tconnections := map[string]*net.UnixConn{\n+\t\t\"cmd\":  nil,\n+\t\t\"data\": nil,\n+\t\t\"code\": nil,\n+\t}\n+\n+\tfor name := range connections {\n+\t\tsockName := filepath.Join(dir, fmt.Sprintf(\"%s.sock\", name))\n+\n+\t\tc, err := net.ListenUnixgram(\"unixgram\", &net.UnixAddr{\n+\t\t\tName: sockName, Net: \"unixgram\",\n+\t\t})\n+\t\tif err != nil {\n+\t\t\tt.Fatalf(\"Error opening %q socket: %v\", sockName, err)\n+\t\t}\n+\t\tdefer c.Close()\n+\n+\t\tconnections[name] = c\n+\t}\n+\n+\tme, err := os.FindProcess(os.Getpid())\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\n+\tif err := os.Chdir(dir); err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\n+\t// TODO: Find a way to redirect stdout so we can look for crashed\n+\t// processes.\n+\tenableTracing()\n+\tzexit := make(chan int)\n+\tgo func() {\n+\t\tzexit <- zeusmaster.Run()\n+\t}()\n+\n+\texpects := map[string]string{\n+\t\t// TODO: Use the zeusclient to spawn a command to test\n+\t\t// that path.\n+\t\t// \"cmd\":  \"pong\",\n+\t\t\"data\": \"YAML the Camel is a Mammal with Enamel\",\n+\t\t\"code\": \"Hello, world!\",\n+\t}\n+\n+\tfor name, want := range expects {\n+\t\tif err := readAndCompare(connections[name], want); err != nil {\n+\t\t\tt.Fatalf(\"%s: %v\", name, err)\n+\t\t}\n+\t}\n+\n+\t// TODO: It appears the filewatcher takes some time to initialize\n+\t// so we need to wait for it to propagate before changing things.\n+\ttime.Sleep(500 * time.Millisecond)\n+\n+\tfor _, f := range []string{\"data.yaml\", \"code.rb\"} {\n+\t\tfrom := filepath.Join(dir, fmt.Sprintf(\"other-%s\", f))\n+\t\tto := filepath.Join(dir, f)\n+\t\tif err := os.Rename(from, to); err != nil {\n+\t\t\tt.Fatalf(\"Error renaming %s: %v\", f, err)\n+\t\t}\n+\t}\n+\n+\texpects = map[string]string{\n+\t\t\"data\": \"Hi\",\n+\t\t\"code\": \"there!\",\n+\t}\n+\n+\tfor name, want := range expects {\n+\t\tif err := readAndCompare(connections[name], want); err != nil {\n+\t\t\tt.Fatalf(\"%s: %v\", name, err)",
        "path": "go/zeusmaster/zeusmaster_test.go",
        "position": 217,
        "original_position": 240,
        "commit_id": "94aa1cb32560e32ec90ebb91207310853164d5c0",
        "original_commit_id": "25df4a77803091d09265abd0c80bbd985a54826e",
        "user": {
            "login": "antifuchs",
            "id": 11864,
            "node_id": "MDQ6VXNlcjExODY0",
            "avatar_url": "https://avatars1.githubusercontent.com/u/11864?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/antifuchs",
            "html_url": "https://github.com/antifuchs",
            "followers_url": "https://api.github.com/users/antifuchs/followers",
            "following_url": "https://api.github.com/users/antifuchs/following{/other_user}",
            "gists_url": "https://api.github.com/users/antifuchs/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/antifuchs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/antifuchs/subscriptions",
            "organizations_url": "https://api.github.com/users/antifuchs/orgs",
            "repos_url": "https://api.github.com/users/antifuchs/repos",
            "events_url": "https://api.github.com/users/antifuchs/events{/privacy}",
            "received_events_url": "https://api.github.com/users/antifuchs/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "And that's why we like tests! (-:\n",
        "created_at": "2016-05-16T17:03:21Z",
        "updated_at": "2016-05-16T21:44:01Z",
        "html_url": "https://github.com/burke/zeus/pull/549#discussion_r63386910",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/549",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/63386910"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/549#discussion_r63386910"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/549"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/63388381",
        "pull_request_review_id": null,
        "id": 63388381,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMzg4Mzgx",
        "diff_hunk": "@@ -0,0 +1,265 @@\n+package zeusmaster_test\n+\n+import (\n+\t\"bytes\"\n+\t\"fmt\"\n+\t\"io/ioutil\"\n+\t\"net\"\n+\t\"os\"\n+\t\"path\"\n+\t\"path/filepath\"\n+\t\"testing\"\n+\t\"time\"\n+\n+\t\"github.com/burke/zeus/go/config\"\n+\tslog \"github.com/burke/zeus/go/shinylog\"\n+\t\"github.com/burke/zeus/go/unixsocket\"\n+\t\"github.com/burke/zeus/go/zeusmaster\"\n+)\n+\n+var testFiles = map[string]string{\n+\t\"zeus.json\": `",
        "path": "go/zeusmaster/zeusmaster_test.go",
        "position": 21,
        "original_position": 21,
        "commit_id": "94aa1cb32560e32ec90ebb91207310853164d5c0",
        "original_commit_id": "78f3e1caef108b7e813dc79f6140d232291e87f9",
        "user": {
            "login": "antifuchs",
            "id": 11864,
            "node_id": "MDQ6VXNlcjExODY0",
            "avatar_url": "https://avatars1.githubusercontent.com/u/11864?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/antifuchs",
            "html_url": "https://github.com/antifuchs",
            "followers_url": "https://api.github.com/users/antifuchs/followers",
            "following_url": "https://api.github.com/users/antifuchs/following{/other_user}",
            "gists_url": "https://api.github.com/users/antifuchs/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/antifuchs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/antifuchs/subscriptions",
            "organizations_url": "https://api.github.com/users/antifuchs/orgs",
            "repos_url": "https://api.github.com/users/antifuchs/repos",
            "events_url": "https://api.github.com/users/antifuchs/events{/privacy}",
            "received_events_url": "https://api.github.com/users/antifuchs/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It is kinda gross how these files are embedded here, but I think outside pulling in some static file embedding library, that might be the best hope we have?\n",
        "created_at": "2016-05-16T17:13:10Z",
        "updated_at": "2016-05-16T21:44:01Z",
        "html_url": "https://github.com/burke/zeus/pull/549#discussion_r63388381",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/549",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/63388381"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/549#discussion_r63388381"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/549"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/63388939",
        "pull_request_review_id": null,
        "id": 63388939,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMzg4OTM5",
        "diff_hunk": "@@ -0,0 +1,265 @@\n+package zeusmaster_test\n+\n+import (\n+\t\"bytes\"\n+\t\"fmt\"\n+\t\"io/ioutil\"\n+\t\"net\"\n+\t\"os\"\n+\t\"path\"\n+\t\"path/filepath\"\n+\t\"testing\"\n+\t\"time\"\n+\n+\t\"github.com/burke/zeus/go/config\"\n+\tslog \"github.com/burke/zeus/go/shinylog\"\n+\t\"github.com/burke/zeus/go/unixsocket\"\n+\t\"github.com/burke/zeus/go/zeusmaster\"\n+)\n+\n+var testFiles = map[string]string{\n+\t\"zeus.json\": `",
        "path": "go/zeusmaster/zeusmaster_test.go",
        "position": 21,
        "original_position": 21,
        "commit_id": "94aa1cb32560e32ec90ebb91207310853164d5c0",
        "original_commit_id": "78f3e1caef108b7e813dc79f6140d232291e87f9",
        "user": {
            "login": "metcalf",
            "id": 16716,
            "node_id": "MDQ6VXNlcjE2NzE2",
            "avatar_url": "https://avatars1.githubusercontent.com/u/16716?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/metcalf",
            "html_url": "https://github.com/metcalf",
            "followers_url": "https://api.github.com/users/metcalf/followers",
            "following_url": "https://api.github.com/users/metcalf/following{/other_user}",
            "gists_url": "https://api.github.com/users/metcalf/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/metcalf/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/metcalf/subscriptions",
            "organizations_url": "https://api.github.com/users/metcalf/orgs",
            "repos_url": "https://api.github.com/users/metcalf/repos",
            "events_url": "https://api.github.com/users/metcalf/events{/privacy}",
            "received_events_url": "https://api.github.com/users/metcalf/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yea, the trouble is that you can't access the directory of the particular test file in Go. So you can have an assets directory and just assume people are executing from the root or you can pull in a file embedding library, build in the strings and write them out just like this.\n",
        "created_at": "2016-05-16T17:16:39Z",
        "updated_at": "2016-05-16T21:44:01Z",
        "html_url": "https://github.com/burke/zeus/pull/549#discussion_r63388939",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/549",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/63388939"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/549#discussion_r63388939"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/549"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/63389422",
        "pull_request_review_id": null,
        "id": 63389422,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMzg5NDIy",
        "diff_hunk": "@@ -0,0 +1,265 @@\n+package zeusmaster_test\n+\n+import (\n+\t\"bytes\"\n+\t\"fmt\"\n+\t\"io/ioutil\"\n+\t\"net\"\n+\t\"os\"\n+\t\"path\"\n+\t\"path/filepath\"\n+\t\"testing\"\n+\t\"time\"\n+\n+\t\"github.com/burke/zeus/go/config\"\n+\tslog \"github.com/burke/zeus/go/shinylog\"\n+\t\"github.com/burke/zeus/go/unixsocket\"\n+\t\"github.com/burke/zeus/go/zeusmaster\"\n+)\n+\n+var testFiles = map[string]string{\n+\t\"zeus.json\": `",
        "path": "go/zeusmaster/zeusmaster_test.go",
        "position": 21,
        "original_position": 21,
        "commit_id": "94aa1cb32560e32ec90ebb91207310853164d5c0",
        "original_commit_id": "78f3e1caef108b7e813dc79f6140d232291e87f9",
        "user": {
            "login": "antifuchs",
            "id": 11864,
            "node_id": "MDQ6VXNlcjExODY0",
            "avatar_url": "https://avatars1.githubusercontent.com/u/11864?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/antifuchs",
            "html_url": "https://github.com/antifuchs",
            "followers_url": "https://api.github.com/users/antifuchs/followers",
            "following_url": "https://api.github.com/users/antifuchs/following{/other_user}",
            "gists_url": "https://api.github.com/users/antifuchs/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/antifuchs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/antifuchs/subscriptions",
            "organizations_url": "https://api.github.com/users/antifuchs/orgs",
            "repos_url": "https://api.github.com/users/antifuchs/repos",
            "events_url": "https://api.github.com/users/antifuchs/events{/privacy}",
            "received_events_url": "https://api.github.com/users/antifuchs/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yep, gross either way. Having this code live next to the code that generates/uses it is not too bad anyway - let's stick to this.\n",
        "created_at": "2016-05-16T17:19:49Z",
        "updated_at": "2016-05-16T21:44:01Z",
        "html_url": "https://github.com/burke/zeus/pull/549#discussion_r63389422",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/549",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/63389422"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/549#discussion_r63389422"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/549"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/63390447",
        "pull_request_review_id": null,
        "id": 63390447,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMzkwNDQ3",
        "diff_hunk": "@@ -0,0 +1,265 @@\n+package zeusmaster_test\n+\n+import (\n+\t\"bytes\"\n+\t\"fmt\"\n+\t\"io/ioutil\"\n+\t\"net\"\n+\t\"os\"\n+\t\"path\"\n+\t\"path/filepath\"\n+\t\"testing\"\n+\t\"time\"\n+\n+\t\"github.com/burke/zeus/go/config\"\n+\tslog \"github.com/burke/zeus/go/shinylog\"\n+\t\"github.com/burke/zeus/go/unixsocket\"\n+\t\"github.com/burke/zeus/go/zeusmaster\"\n+)\n+\n+var testFiles = map[string]string{\n+\t\"zeus.json\": `\n+{\n+  \"command\": \"ruby -r./custom_plan -eZeus.go\",\n+  \"plan\": {\n+    \"boot\": {\n+      \"data\": {\n+        \"data_srv\": {}\n+      },\n+      \"code\": {\n+        \"code_srv\": {}\n+      },\n+      \"cmd_srv\": []\n+    }\n+  }\n+}\n+`,\n+\t\"custom_plan.rb\": `\n+$LOAD_PATH.unshift(File.readlink('./lib'))\n+require 'zeus'\n+\n+class CustomPlan < Zeus::Plan\n+  def self.command(name, &block)\n+    define_method(name) do\n+      redirect_log(name)\n+      begin\n+        self.instance_eval(&block)\n+      rescue => e\n+        STDERR.puts \"#{name} terminated with exception: #{e.message}\"\n+        STDERR.puts e.backtrace.map {|line| \" #{line}\"}\n+        raise\n+      end\n+    end\n+  end\n+\n+  command :boot do\n+    redirect_log('boot')\n+    require_relative 'srv'\n+  end\n+\n+  command :data do\n+    redirect_log('data')\n+    require_relative 'data'\n+  end\n+\n+  command :code do\n+    redirect_log('code')\n+    require_relative 'code'\n+  end\n+\n+  command :cmd_srv do\n+    redirect_log('cmd_srv')\n+    serve('cmd.sock')\n+  end\n+\n+  command :data_srv do\n+    redirect_log('data_srv')\n+    serve('data.sock')\n+  end\n+\n+  command :code_srv do\n+    redirect_log('code_srv')\n+    serve('code.sock')\n+  end\n+\n+  def redirect_log(cmd)\n+    log_file = File.open(\"zeus_test_#{cmd}.log\", 'a')\n+    log_file.sync = true\n+    STDOUT.reopen(log_file)\n+    STDERR.reopen(log_file)\n+    STDOUT.sync = STDERR.sync = true\n+  end\n+end\n+\n+Zeus.plan = CustomPlan.new\n+`,\n+\t\"data.rb\": `\n+require 'yaml'\n+$response = YAML::load_file('data.yaml')['response']\n+`,\n+\t\"data.yaml\": `\n+response: YAML the Camel is a Mammal with Enamel\n+`,\n+\t\"other-data.yaml\": `\n+response: Hi\n+`,\n+\t\"code.rb\": `\n+$response = \"Hello, world!\"\n+`,\n+\t\"other-code.rb\": `\n+$response = \"there!\"\n+`,\n+\t\"srv.rb\": `\n+$response = \"pong\"\n+\n+def serve(sock_path)\n+  sock = Socket.new(Socket::AF_UNIX, Socket::SOCK_DGRAM, 0)",
        "path": "go/zeusmaster/zeusmaster_test.go",
        "position": 116,
        "original_position": 116,
        "commit_id": "94aa1cb32560e32ec90ebb91207310853164d5c0",
        "original_commit_id": "78f3e1caef108b7e813dc79f6140d232291e87f9",
        "user": {
            "login": "antifuchs",
            "id": 11864,
            "node_id": "MDQ6VXNlcjExODY0",
            "avatar_url": "https://avatars1.githubusercontent.com/u/11864?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/antifuchs",
            "html_url": "https://github.com/antifuchs",
            "followers_url": "https://api.github.com/users/antifuchs/followers",
            "following_url": "https://api.github.com/users/antifuchs/following{/other_user}",
            "gists_url": "https://api.github.com/users/antifuchs/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/antifuchs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/antifuchs/subscriptions",
            "organizations_url": "https://api.github.com/users/antifuchs/orgs",
            "repos_url": "https://api.github.com/users/antifuchs/repos",
            "events_url": "https://api.github.com/users/antifuchs/events{/privacy}",
            "received_events_url": "https://api.github.com/users/antifuchs/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This is a great first cut! If you make this a connected STREAM socket, you could detect reconnection & could use three deadlines below (expectation that the connection closes, that another one comes up, and that something gets sent).\n",
        "created_at": "2016-05-16T17:25:48Z",
        "updated_at": "2016-05-16T21:44:01Z",
        "html_url": "https://github.com/burke/zeus/pull/549#discussion_r63390447",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/549",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/63390447"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/549#discussion_r63390447"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/549"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/63393733",
        "pull_request_review_id": null,
        "id": 63393733,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMzkzNzMz",
        "diff_hunk": "@@ -0,0 +1,265 @@\n+package zeusmaster_test\n+\n+import (\n+\t\"bytes\"\n+\t\"fmt\"\n+\t\"io/ioutil\"\n+\t\"net\"\n+\t\"os\"\n+\t\"path\"\n+\t\"path/filepath\"\n+\t\"testing\"\n+\t\"time\"\n+\n+\t\"github.com/burke/zeus/go/config\"\n+\tslog \"github.com/burke/zeus/go/shinylog\"\n+\t\"github.com/burke/zeus/go/unixsocket\"\n+\t\"github.com/burke/zeus/go/zeusmaster\"\n+)\n+\n+var testFiles = map[string]string{\n+\t\"zeus.json\": `\n+{\n+  \"command\": \"ruby -r./custom_plan -eZeus.go\",\n+  \"plan\": {\n+    \"boot\": {\n+      \"data\": {\n+        \"data_srv\": {}\n+      },\n+      \"code\": {\n+        \"code_srv\": {}\n+      },\n+      \"cmd_srv\": []\n+    }\n+  }\n+}\n+`,\n+\t\"custom_plan.rb\": `\n+$LOAD_PATH.unshift(File.readlink('./lib'))\n+require 'zeus'\n+\n+class CustomPlan < Zeus::Plan\n+  def self.command(name, &block)\n+    define_method(name) do\n+      redirect_log(name)\n+      begin\n+        self.instance_eval(&block)\n+      rescue => e\n+        STDERR.puts \"#{name} terminated with exception: #{e.message}\"\n+        STDERR.puts e.backtrace.map {|line| \" #{line}\"}\n+        raise\n+      end\n+    end\n+  end\n+\n+  command :boot do\n+    redirect_log('boot')\n+    require_relative 'srv'\n+  end\n+\n+  command :data do\n+    redirect_log('data')\n+    require_relative 'data'\n+  end\n+\n+  command :code do\n+    redirect_log('code')\n+    require_relative 'code'\n+  end\n+\n+  command :cmd_srv do\n+    redirect_log('cmd_srv')\n+    serve('cmd.sock')\n+  end\n+\n+  command :data_srv do\n+    redirect_log('data_srv')\n+    serve('data.sock')\n+  end\n+\n+  command :code_srv do\n+    redirect_log('code_srv')\n+    serve('code.sock')\n+  end\n+\n+  def redirect_log(cmd)\n+    log_file = File.open(\"zeus_test_#{cmd}.log\", 'a')\n+    log_file.sync = true\n+    STDOUT.reopen(log_file)\n+    STDERR.reopen(log_file)\n+    STDOUT.sync = STDERR.sync = true\n+  end\n+end\n+\n+Zeus.plan = CustomPlan.new\n+`,\n+\t\"data.rb\": `\n+require 'yaml'\n+$response = YAML::load_file('data.yaml')['response']\n+`,\n+\t\"data.yaml\": `\n+response: YAML the Camel is a Mammal with Enamel\n+`,\n+\t\"other-data.yaml\": `\n+response: Hi\n+`,\n+\t\"code.rb\": `\n+$response = \"Hello, world!\"\n+`,\n+\t\"other-code.rb\": `\n+$response = \"there!\"\n+`,\n+\t\"srv.rb\": `\n+$response = \"pong\"\n+\n+def serve(sock_path)\n+  sock = Socket.new(Socket::AF_UNIX, Socket::SOCK_DGRAM, 0)",
        "path": "go/zeusmaster/zeusmaster_test.go",
        "position": 116,
        "original_position": 116,
        "commit_id": "94aa1cb32560e32ec90ebb91207310853164d5c0",
        "original_commit_id": "78f3e1caef108b7e813dc79f6140d232291e87f9",
        "user": {
            "login": "metcalf",
            "id": 16716,
            "node_id": "MDQ6VXNlcjE2NzE2",
            "avatar_url": "https://avatars1.githubusercontent.com/u/16716?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/metcalf",
            "html_url": "https://github.com/metcalf",
            "followers_url": "https://api.github.com/users/metcalf/followers",
            "following_url": "https://api.github.com/users/metcalf/following{/other_user}",
            "gists_url": "https://api.github.com/users/metcalf/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/metcalf/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/metcalf/subscriptions",
            "organizations_url": "https://api.github.com/users/metcalf/orgs",
            "repos_url": "https://api.github.com/users/metcalf/repos",
            "events_url": "https://api.github.com/users/metcalf/events{/privacy}",
            "received_events_url": "https://api.github.com/users/metcalf/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think the problem is less around the timing of the sockets and more that the filemonitor isn't well synchronized with other processes. The filemonitor appears quite slow to start and the master doesn't block execution on it starting. I'm beginning to suspect that we're going to find some of our reliability problems in that code...\n",
        "created_at": "2016-05-16T17:45:52Z",
        "updated_at": "2016-05-16T21:44:01Z",
        "html_url": "https://github.com/burke/zeus/pull/549#discussion_r63393733",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/549",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/63393733"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/549#discussion_r63393733"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/549"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/63743097",
        "pull_request_review_id": null,
        "id": 63743097,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzQzMDk3",
        "diff_hunk": "@@ -34,15 +34,15 @@ def run\n                 begin\n                   modified_files_buf += @file_monitor.readpartial(4096)\n                 rescue EOFError\n-                  puts \"lost connection to the file monitor process, exiting!\"\n+                  puts \"[#{Time.now.strftime('%H:%M:%S')}] lost connection to the file monitor process, exiting!\"",
        "path": "vagrant/lib/vagrant-zeus/commands/zeus-file-monitor.rb",
        "position": 5,
        "original_position": 5,
        "commit_id": "00da83d8944f9561f664ec8adb0d53e702f3e3b4",
        "original_commit_id": "00da83d8944f9561f664ec8adb0d53e702f3e3b4",
        "user": {
            "login": "metcalf",
            "id": 16716,
            "node_id": "MDQ6VXNlcjE2NzE2",
            "avatar_url": "https://avatars1.githubusercontent.com/u/16716?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/metcalf",
            "html_url": "https://github.com/metcalf",
            "followers_url": "https://api.github.com/users/metcalf/followers",
            "following_url": "https://api.github.com/users/metcalf/following{/other_user}",
            "gists_url": "https://api.github.com/users/metcalf/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/metcalf/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/metcalf/subscriptions",
            "organizations_url": "https://api.github.com/users/metcalf/orgs",
            "repos_url": "https://api.github.com/users/metcalf/repos",
            "events_url": "https://api.github.com/users/metcalf/events{/privacy}",
            "received_events_url": "https://api.github.com/users/metcalf/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@shalecraig: can you move this prefixing into a private `log` helper on `FileWatcher`? Then I'll get this merged!\n",
        "created_at": "2016-05-18T17:08:26Z",
        "updated_at": "2016-05-18T17:08:26Z",
        "html_url": "https://github.com/burke/zeus/pull/539#discussion_r63743097",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/539",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/63743097"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/539#discussion_r63743097"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/539"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/63810380",
        "pull_request_review_id": null,
        "id": 63810380,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODEwMzgw",
        "diff_hunk": "@@ -155,7 +155,6 @@ clean:\n \n .PHONY: dev_bootstrap\n dev_bootstrap: go/zeusversion/zeusversion.go\n-\tgo get ./...\n \tbundle -v || gem install bundler --no-rdoc --no-ri\n \tbundle install\n-\tgo get github.com/mitchellh/gox\n+\tgo get github.com/mitchellh/gox github.com/kardianos/govendor",
        "path": "Makefile",
        "position": 34,
        "original_position": 34,
        "commit_id": "d4710cbe9e82636ad571813a75692b4ac5575994",
        "original_commit_id": "d4710cbe9e82636ad571813a75692b4ac5575994",
        "user": {
            "login": "metcalf",
            "id": 16716,
            "node_id": "MDQ6VXNlcjE2NzE2",
            "avatar_url": "https://avatars1.githubusercontent.com/u/16716?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/metcalf",
            "html_url": "https://github.com/metcalf",
            "followers_url": "https://api.github.com/users/metcalf/followers",
            "following_url": "https://api.github.com/users/metcalf/following{/other_user}",
            "gists_url": "https://api.github.com/users/metcalf/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/metcalf/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/metcalf/subscriptions",
            "organizations_url": "https://api.github.com/users/metcalf/orgs",
            "repos_url": "https://api.github.com/users/metcalf/repos",
            "events_url": "https://api.github.com/users/metcalf/events{/privacy}",
            "received_events_url": "https://api.github.com/users/metcalf/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Still there!\n",
        "created_at": "2016-05-19T01:24:10Z",
        "updated_at": "2016-05-19T01:24:10Z",
        "html_url": "https://github.com/burke/zeus/pull/553#discussion_r63810380",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/553",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/63810380"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/553#discussion_r63810380"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/553"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/63810046",
        "pull_request_review_id": null,
        "id": 63810046,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODEwMDQ2",
        "diff_hunk": "@@ -155,7 +155,6 @@ clean:\n \n .PHONY: dev_bootstrap\n dev_bootstrap: go/zeusversion/zeusversion.go\n-\tgo get ./...\n \tbundle -v || gem install bundler --no-rdoc --no-ri\n \tbundle install\n-\tgo get github.com/mitchellh/gox\n+\tgo get github.com/mitchellh/gox github.com/kardianos/govendor",
        "path": "Makefile",
        "position": 34,
        "original_position": 34,
        "commit_id": "d4710cbe9e82636ad571813a75692b4ac5575994",
        "original_commit_id": "d4710cbe9e82636ad571813a75692b4ac5575994",
        "user": {
            "login": "antifuchs",
            "id": 11864,
            "node_id": "MDQ6VXNlcjExODY0",
            "avatar_url": "https://avatars1.githubusercontent.com/u/11864?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/antifuchs",
            "html_url": "https://github.com/antifuchs",
            "followers_url": "https://api.github.com/users/antifuchs/followers",
            "following_url": "https://api.github.com/users/antifuchs/following{/other_user}",
            "gists_url": "https://api.github.com/users/antifuchs/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/antifuchs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/antifuchs/subscriptions",
            "organizations_url": "https://api.github.com/users/antifuchs/orgs",
            "repos_url": "https://api.github.com/users/antifuchs/repos",
            "events_url": "https://api.github.com/users/antifuchs/events{/privacy}",
            "received_events_url": "https://api.github.com/users/antifuchs/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "<strike>I believe this is incorrect - you do need `gox` to cross-compile.</strike>\nOh wait, you are _adding_ govendor. Everything's fine.\n",
        "created_at": "2016-05-19T01:19:33Z",
        "updated_at": "2016-05-19T01:24:12Z",
        "html_url": "https://github.com/burke/zeus/pull/553#discussion_r63810046",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/553",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/63810046"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/553#discussion_r63810046"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/553"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/64266984",
        "pull_request_review_id": null,
        "id": 64266984,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MjY2OTg0",
        "diff_hunk": "@@ -2,10 +2,32 @@ module Zeus\n   class LoadTracking\n     class << self\n       def features_loaded_by(&block)\n-        old_features = all_features()\n-        yield\n-        new_features = all_features() - old_features\n-        return new_features\n+        old_features = all_features\n+\n+        # Catch exceptions so we can determine the features\n+        # that were being loaded at the time of the exception.\n+        err_features = []\n+        begin\n+          yield\n+        rescue SyntaxError => err\n+          # SyntaxErrors are a bit weird in that the file containing\n+          # the error is not in the backtrace, only the error message.\n+          match = /\\A([^:]+):\\d+: syntax error/.match(err.message)\n+          err_features << match[1] if match\n+        rescue Exception => err\n+          # Just capture this to add to the err_features list\n+        end\n+\n+        if err && err.backtrace\n+          err_features += err.backtrace.map { |b| b.split(':').first }\n+                             .select { |f| f.start_with?('/') }\n+                             .take_while { |f| f != __FILE__ }\n+        end\n+\n+        new_features = all_features + err_features - old_features\n+        new_features.uniq!\n+\n+        [new_features, err]",
        "path": "rubygem/lib/zeus/load_tracking.rb",
        "position": 33,
        "original_position": 33,
        "commit_id": "e0e0bd725e10b055b0e3f261c71dbf2a985c2577",
        "original_commit_id": "e0e0bd725e10b055b0e3f261c71dbf2a985c2577",
        "user": {
            "login": "ptarjan",
            "id": 40143,
            "node_id": "MDQ6VXNlcjQwMTQz",
            "avatar_url": "https://avatars0.githubusercontent.com/u/40143?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ptarjan",
            "html_url": "https://github.com/ptarjan",
            "followers_url": "https://api.github.com/users/ptarjan/followers",
            "following_url": "https://api.github.com/users/ptarjan/following{/other_user}",
            "gists_url": "https://api.github.com/users/ptarjan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ptarjan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ptarjan/subscriptions",
            "organizations_url": "https://api.github.com/users/ptarjan/orgs",
            "repos_url": "https://api.github.com/users/ptarjan/repos",
            "events_url": "https://api.github.com/users/ptarjan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ptarjan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'm not too in love with this and usually prefer a dictionary, but your call\n",
        "created_at": "2016-05-23T18:43:43Z",
        "updated_at": "2016-05-23T18:43:43Z",
        "html_url": "https://github.com/burke/zeus/pull/554#discussion_r64266984",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/554",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/64266984"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/554#discussion_r64266984"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/554"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/64267043",
        "pull_request_review_id": null,
        "id": 64267043,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MjY3MDQz",
        "diff_hunk": "@@ -30,12 +32,74 @@\n \n     context '.features_loaded_by' do\n       it 'returns list of new files loaded when block executes' do\n-        new_files = Zeus::LoadTracking.features_loaded_by do\n+        new_files, = Zeus::LoadTracking.features_loaded_by do\n           $untracked_features << \"an_untracked_feature.rb\"\n         end\n \n         expect(new_files).to eq([\"an_untracked_feature.rb\"])\n       end\n     end\n   end\n+\n+  describe '.features_loaded_by' do",
        "path": "rubygem/spec/load_tracking_spec.rb",
        "position": 27,
        "original_position": 27,
        "commit_id": "e0e0bd725e10b055b0e3f261c71dbf2a985c2577",
        "original_commit_id": "e0e0bd725e10b055b0e3f261c71dbf2a985c2577",
        "user": {
            "login": "ptarjan",
            "id": 40143,
            "node_id": "MDQ6VXNlcjQwMTQz",
            "avatar_url": "https://avatars0.githubusercontent.com/u/40143?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ptarjan",
            "html_url": "https://github.com/ptarjan",
            "followers_url": "https://api.github.com/users/ptarjan/followers",
            "following_url": "https://api.github.com/users/ptarjan/following{/other_user}",
            "gists_url": "https://api.github.com/users/ptarjan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ptarjan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ptarjan/subscriptions",
            "organizations_url": "https://api.github.com/users/ptarjan/orgs",
            "repos_url": "https://api.github.com/users/ptarjan/repos",
            "events_url": "https://api.github.com/users/ptarjan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ptarjan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "happydance\n",
        "created_at": "2016-05-23T18:44:00Z",
        "updated_at": "2016-05-23T18:44:00Z",
        "html_url": "https://github.com/burke/zeus/pull/554#discussion_r64267043",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/554",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/64267043"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/554#discussion_r64267043"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/554"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/64267390",
        "pull_request_review_id": null,
        "id": 64267390,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MjY3Mzkw",
        "diff_hunk": "@@ -1,11 +1,36 @@\n-require 'spec_helper'\n+require 'zeus/rails'\n require 'fake_mini_test'\n \n module Zeus::M\n   describe Runner do\n     let(:test_method) { fake_test_method }\n \n+    matcher :exit_with_code do |exp_code|\n+      actual = nil\n+      match do |block|\n+        begin\n+          block.call\n+        rescue SystemExit => e\n+          actual = e.status\n+        end\n+        actual and actual == exp_code\n+      end\n+      failure_message do |_block|\n+        \"expected block to call exit(#{exp_code}) but exit\" +\n+          (actual.nil? ? \" not called\" : \"(#{actual}) was called\")\n+      end\n+      failure_message_when_negated do |_block|\n+        \"expected block not to call exit(#{exp_code})\"\n+      end\n+      description do\n+        \"expect block to call exit(#{exp_code})\"\n+      end\n+    end\n+\n     before(:each) do\n+      allow(Dir).to receive(:glob).and_return([\"path/to/file.rb\"])",
        "path": "rubygem/spec/m_spec.rb",
        "position": 32,
        "original_position": 32,
        "commit_id": "e0e0bd725e10b055b0e3f261c71dbf2a985c2577",
        "original_commit_id": "e0e0bd725e10b055b0e3f261c71dbf2a985c2577",
        "user": {
            "login": "ptarjan",
            "id": 40143,
            "node_id": "MDQ6VXNlcjQwMTQz",
            "avatar_url": "https://avatars0.githubusercontent.com/u/40143?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ptarjan",
            "html_url": "https://github.com/ptarjan",
            "followers_url": "https://api.github.com/users/ptarjan/followers",
            "following_url": "https://api.github.com/users/ptarjan/following{/other_user}",
            "gists_url": "https://api.github.com/users/ptarjan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ptarjan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ptarjan/subscriptions",
            "organizations_url": "https://api.github.com/users/ptarjan/orgs",
            "repos_url": "https://api.github.com/users/ptarjan/repos",
            "events_url": "https://api.github.com/users/ptarjan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ptarjan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Should these only be in the test places they are used?\n",
        "created_at": "2016-05-23T18:45:59Z",
        "updated_at": "2016-05-23T18:45:59Z",
        "html_url": "https://github.com/burke/zeus/pull/554#discussion_r64267390",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/554",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/64267390"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/554#discussion_r64267390"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/554"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/64276569",
        "pull_request_review_id": null,
        "id": 64276569,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0Mjc2NTY5",
        "diff_hunk": "@@ -30,12 +32,74 @@\n \n     context '.features_loaded_by' do\n       it 'returns list of new files loaded when block executes' do\n-        new_files = Zeus::LoadTracking.features_loaded_by do\n+        new_files, = Zeus::LoadTracking.features_loaded_by do\n           $untracked_features << \"an_untracked_feature.rb\"\n         end\n \n         expect(new_files).to eq([\"an_untracked_feature.rb\"])\n       end\n     end\n   end\n+\n+  describe '.features_loaded_by' do\n+    def expect_to_load(expect_features, expect_err=NilClass)\n+      new_files, err = Zeus::LoadTracking.features_loaded_by do\n+        yield\n+      end\n+\n+      expect(new_files.sort).to eq(expect_features.sort)\n+      expect(err).to be_instance_of(expect_err)\n+    end\n+\n+    def expand_asset_path(path)\n+      File.join(__dir__, 'assets', path)\n+    end\n+\n+    context 'loading valid code' do\n+      it 'tracks successful require_relative' do\n+        expect_to_load([expand_asset_path('require_relative.rb')]) do\n+          require_relative 'assets/require_relative'\n+        end\n+      end\n+\n+      it 'tracks successful require' do\n+        expect_to_load([expand_asset_path('require.rb')]) do\n+          require expand_asset_path('require')\n+        end\n+      end\n+\n+      it 'tracks loads' do\n+        expect_to_load([expand_asset_path('load.rb')]) do\n+          load expand_asset_path('load.rb')\n+        end\n+      end\n+    end\n+\n+    context 'loading invalid code' do",
        "path": "rubygem/spec/load_tracking_spec.rb",
        "position": 61,
        "original_position": 61,
        "commit_id": "e0e0bd725e10b055b0e3f261c71dbf2a985c2577",
        "original_commit_id": "e0e0bd725e10b055b0e3f261c71dbf2a985c2577",
        "user": {
            "login": "latortuga",
            "id": 9379,
            "node_id": "MDQ6VXNlcjkzNzk=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/9379?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/latortuga",
            "html_url": "https://github.com/latortuga",
            "followers_url": "https://api.github.com/users/latortuga/followers",
            "following_url": "https://api.github.com/users/latortuga/following{/other_user}",
            "gists_url": "https://api.github.com/users/latortuga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/latortuga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/latortuga/subscriptions",
            "organizations_url": "https://api.github.com/users/latortuga/orgs",
            "repos_url": "https://api.github.com/users/latortuga/repos",
            "events_url": "https://api.github.com/users/latortuga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/latortuga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": ":+1: :+1: :100: :heart: :yellow_heart: :blue_heart: this is going to be an AWESOME addition to zeus\n",
        "created_at": "2016-05-23T19:47:19Z",
        "updated_at": "2016-05-23T19:47:19Z",
        "html_url": "https://github.com/burke/zeus/pull/554#discussion_r64276569",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/554",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/64276569"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/554#discussion_r64276569"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/554"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/64281559",
        "pull_request_review_id": null,
        "id": 64281559,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MjgxNTU5",
        "diff_hunk": "@@ -2,10 +2,32 @@ module Zeus\n   class LoadTracking\n     class << self\n       def features_loaded_by(&block)\n-        old_features = all_features()\n-        yield\n-        new_features = all_features() - old_features\n-        return new_features\n+        old_features = all_features\n+\n+        # Catch exceptions so we can determine the features\n+        # that were being loaded at the time of the exception.\n+        err_features = []\n+        begin\n+          yield\n+        rescue SyntaxError => err\n+          # SyntaxErrors are a bit weird in that the file containing\n+          # the error is not in the backtrace, only the error message.\n+          match = /\\A([^:]+):\\d+: syntax error/.match(err.message)\n+          err_features << match[1] if match\n+        rescue Exception => err\n+          # Just capture this to add to the err_features list\n+        end\n+\n+        if err && err.backtrace\n+          err_features += err.backtrace.map { |b| b.split(':').first }\n+                             .select { |f| f.start_with?('/') }\n+                             .take_while { |f| f != __FILE__ }\n+        end\n+\n+        new_features = all_features + err_features - old_features\n+        new_features.uniq!\n+\n+        [new_features, err]",
        "path": "rubygem/lib/zeus/load_tracking.rb",
        "position": 33,
        "original_position": 33,
        "commit_id": "e0e0bd725e10b055b0e3f261c71dbf2a985c2577",
        "original_commit_id": "e0e0bd725e10b055b0e3f261c71dbf2a985c2577",
        "user": {
            "login": "metcalf",
            "id": 16716,
            "node_id": "MDQ6VXNlcjE2NzE2",
            "avatar_url": "https://avatars1.githubusercontent.com/u/16716?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/metcalf",
            "html_url": "https://github.com/metcalf",
            "followers_url": "https://api.github.com/users/metcalf/followers",
            "following_url": "https://api.github.com/users/metcalf/following{/other_user}",
            "gists_url": "https://api.github.com/users/metcalf/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/metcalf/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/metcalf/subscriptions",
            "organizations_url": "https://api.github.com/users/metcalf/orgs",
            "repos_url": "https://api.github.com/users/metcalf/repos",
            "events_url": "https://api.github.com/users/metcalf/events{/privacy}",
            "received_events_url": "https://api.github.com/users/metcalf/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "`Struct.new(:features, :error)` maybe?\n",
        "created_at": "2016-05-23T20:19:36Z",
        "updated_at": "2016-05-23T20:19:36Z",
        "html_url": "https://github.com/burke/zeus/pull/554#discussion_r64281559",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/554",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/64281559"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/554#discussion_r64281559"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/554"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/64935944",
        "pull_request_review_id": null,
        "id": 64935944,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0OTM1OTQ0",
        "diff_hunk": "@@ -2,10 +2,32 @@ module Zeus\n   class LoadTracking\n     class << self\n       def features_loaded_by(&block)\n-        old_features = all_features()\n-        yield\n-        new_features = all_features() - old_features\n-        return new_features\n+        old_features = all_features\n+\n+        # Catch exceptions so we can determine the features\n+        # that were being loaded at the time of the exception.\n+        err_features = []\n+        begin\n+          yield\n+        rescue SyntaxError => err\n+          # SyntaxErrors are a bit weird in that the file containing\n+          # the error is not in the backtrace, only the error message.\n+          match = /\\A([^:]+):\\d+: syntax error/.match(err.message)\n+          err_features << match[1] if match\n+        rescue Exception => err\n+          # Just capture this to add to the err_features list\n+        end\n+\n+        if err && err.backtrace\n+          err_features += err.backtrace.map { |b| b.split(':').first }\n+                             .select { |f| f.start_with?('/') }\n+                             .take_while { |f| f != __FILE__ }\n+        end\n+\n+        new_features = all_features + err_features - old_features\n+        new_features.uniq!\n+\n+        [new_features, err]",
        "path": "rubygem/lib/zeus/load_tracking.rb",
        "position": 33,
        "original_position": 33,
        "commit_id": "e0e0bd725e10b055b0e3f261c71dbf2a985c2577",
        "original_commit_id": "e0e0bd725e10b055b0e3f261c71dbf2a985c2577",
        "user": {
            "login": "metcalf",
            "id": 16716,
            "node_id": "MDQ6VXNlcjE2NzE2",
            "avatar_url": "https://avatars1.githubusercontent.com/u/16716?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/metcalf",
            "html_url": "https://github.com/metcalf",
            "followers_url": "https://api.github.com/users/metcalf/followers",
            "following_url": "https://api.github.com/users/metcalf/following{/other_user}",
            "gists_url": "https://api.github.com/users/metcalf/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/metcalf/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/metcalf/subscriptions",
            "organizations_url": "https://api.github.com/users/metcalf/orgs",
            "repos_url": "https://api.github.com/users/metcalf/repos",
            "events_url": "https://api.github.com/users/metcalf/events{/privacy}",
            "received_events_url": "https://api.github.com/users/metcalf/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Thought about this a bit more, I'm reasonably indifferent but in this case the particular return pattern is consistent with what all the Go in this codebase is doing (value, err). Given the relatively light preferences either way, I'm going to stick with it.\n",
        "created_at": "2016-05-27T17:00:40Z",
        "updated_at": "2016-05-27T17:00:40Z",
        "html_url": "https://github.com/burke/zeus/pull/554#discussion_r64935944",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/554",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/64935944"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/554#discussion_r64935944"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/554"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/64938058",
        "pull_request_review_id": null,
        "id": 64938058,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0OTM4MDU4",
        "diff_hunk": "@@ -0,0 +1,160 @@\n+package filemonitor\n+\n+import (\n+\t\"bufio\"\n+\t\"io\"\n+\t\"net\"\n+\t\"sync\"\n+\t\"time\"\n+\n+\tslog \"github.com/burke/zeus/go/shinylog\"\n+)\n+\n+type fileListener struct {\n+\tgatheringMonitor\n+\tnetListener net.Listener\n+\tconnections map[net.Conn]chan string\n+\tstop        chan struct{}\n+\tsync.Mutex\n+\twg sync.WaitGroup\n+}\n+\n+func NewFileListener(ln net.Listener) FileMonitor {\n+\tfl := fileListener{\n+\t\tnetListener: ln,\n+\t\tconnections: make(map[net.Conn]chan string),\n+\t\tstop:        make(chan struct{}),\n+\t}\n+\tfl.changes = make(chan string)\n+\n+\tgo fl.serveListeners()\n+\tgo fl.serve()\n+\n+\treturn &fl\n+}\n+\n+func (f *fileListener) Add(file string) error {\n+\tf.Lock()\n+\tdefer f.Unlock()\n+\n+\tfor _, ch := range f.connections {\n+\t\tch <- file\n+\t}\n+\n+\treturn nil\n+}\n+\n+func (f *fileListener) Close() error {\n+\tf.Lock()\n+\n+\tselect {\n+\tcase <-f.stop:\n+\t\tf.Unlock()\n+\t\treturn nil // Already stopped\n+\tdefault:\n+\t\tclose(f.stop)\n+\t}\n+\n+\tvar firstErr error\n+\tif firstErr = f.netListener.Close(); firstErr != nil {\n+\t\tslog.Trace(\"Error closing file listener: %v\", firstErr)",
        "path": "go/filemonitor/filelistener.go",
        "position": 60,
        "original_position": 60,
        "commit_id": "f6c84115375dcf270a00ee09a3235db26291a7e3",
        "original_commit_id": "1850ce30d4badc769885dc5dc784803a6ca0b2d6",
        "user": {
            "login": "ptarjan",
            "id": 40143,
            "node_id": "MDQ6VXNlcjQwMTQz",
            "avatar_url": "https://avatars0.githubusercontent.com/u/40143?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ptarjan",
            "html_url": "https://github.com/ptarjan",
            "followers_url": "https://api.github.com/users/ptarjan/followers",
            "following_url": "https://api.github.com/users/ptarjan/following{/other_user}",
            "gists_url": "https://api.github.com/users/ptarjan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ptarjan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ptarjan/subscriptions",
            "organizations_url": "https://api.github.com/users/ptarjan/orgs",
            "repos_url": "https://api.github.com/users/ptarjan/repos",
            "events_url": "https://api.github.com/users/ptarjan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ptarjan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "where do these slogs do during normal operation?\n",
        "created_at": "2016-05-27T17:15:30Z",
        "updated_at": "2016-05-27T20:35:59Z",
        "html_url": "https://github.com/burke/zeus/pull/550#discussion_r64938058",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/550",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/64938058"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/550#discussion_r64938058"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/550"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/64938487",
        "pull_request_review_id": null,
        "id": 64938487,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0OTM4NDg3",
        "diff_hunk": "@@ -0,0 +1,160 @@\n+package filemonitor\n+\n+import (\n+\t\"bufio\"\n+\t\"io\"\n+\t\"net\"\n+\t\"sync\"\n+\t\"time\"\n+\n+\tslog \"github.com/burke/zeus/go/shinylog\"\n+)\n+\n+type fileListener struct {\n+\tgatheringMonitor\n+\tnetListener net.Listener\n+\tconnections map[net.Conn]chan string\n+\tstop        chan struct{}\n+\tsync.Mutex\n+\twg sync.WaitGroup\n+}\n+\n+func NewFileListener(ln net.Listener) FileMonitor {\n+\tfl := fileListener{\n+\t\tnetListener: ln,\n+\t\tconnections: make(map[net.Conn]chan string),\n+\t\tstop:        make(chan struct{}),\n+\t}\n+\tfl.changes = make(chan string)\n+\n+\tgo fl.serveListeners()\n+\tgo fl.serve()\n+\n+\treturn &fl\n+}\n+\n+func (f *fileListener) Add(file string) error {\n+\tf.Lock()\n+\tdefer f.Unlock()\n+\n+\tfor _, ch := range f.connections {\n+\t\tch <- file\n+\t}\n+\n+\treturn nil\n+}\n+\n+func (f *fileListener) Close() error {\n+\tf.Lock()\n+\n+\tselect {\n+\tcase <-f.stop:\n+\t\tf.Unlock()\n+\t\treturn nil // Already stopped\n+\tdefault:\n+\t\tclose(f.stop)\n+\t}\n+\n+\tvar firstErr error\n+\tif firstErr = f.netListener.Close(); firstErr != nil {\n+\t\tslog.Trace(\"Error closing file listener: %v\", firstErr)",
        "path": "go/filemonitor/filelistener.go",
        "position": 60,
        "original_position": 60,
        "commit_id": "f6c84115375dcf270a00ee09a3235db26291a7e3",
        "original_commit_id": "1850ce30d4badc769885dc5dc784803a6ca0b2d6",
        "user": {
            "login": "metcalf",
            "id": 16716,
            "node_id": "MDQ6VXNlcjE2NzE2",
            "avatar_url": "https://avatars1.githubusercontent.com/u/16716?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/metcalf",
            "html_url": "https://github.com/metcalf",
            "followers_url": "https://api.github.com/users/metcalf/followers",
            "following_url": "https://api.github.com/users/metcalf/following{/other_user}",
            "gists_url": "https://api.github.com/users/metcalf/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/metcalf/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/metcalf/subscriptions",
            "organizations_url": "https://api.github.com/users/metcalf/orgs",
            "repos_url": "https://api.github.com/users/metcalf/repos",
            "events_url": "https://api.github.com/users/metcalf/events{/privacy}",
            "received_events_url": "https://api.github.com/users/metcalf/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "If you pass `--log` to Zeus, it logs them to whatever file you provide. In our setup, you can read these trace logs in `dev/zeus.log`... They're pretty helpful for debugging now that I found them!\n",
        "created_at": "2016-05-27T17:18:25Z",
        "updated_at": "2016-05-27T20:35:59Z",
        "html_url": "https://github.com/burke/zeus/pull/550#discussion_r64938487",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/550",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/64938487"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/550#discussion_r64938487"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/550"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/64939778",
        "pull_request_review_id": null,
        "id": 64939778,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0OTM5Nzc4",
        "diff_hunk": "@@ -0,0 +1,120 @@\n+// +build darwin\n+\n+package filemonitor\n+\n+import \"github.com/fsnotify/fsevents\"\n+\n+const flagsWorthReloadingFor = fsevents.ItemRemoved | fsevents.ItemModified | fsevents.ItemRenamed",
        "path": "go/filemonitor/filemonitor_darwin.go",
        "position": 7,
        "original_position": 7,
        "commit_id": "f6c84115375dcf270a00ee09a3235db26291a7e3",
        "original_commit_id": "1850ce30d4badc769885dc5dc784803a6ca0b2d6",
        "user": {
            "login": "ptarjan",
            "id": 40143,
            "node_id": "MDQ6VXNlcjQwMTQz",
            "avatar_url": "https://avatars0.githubusercontent.com/u/40143?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ptarjan",
            "html_url": "https://github.com/ptarjan",
            "followers_url": "https://api.github.com/users/ptarjan/followers",
            "following_url": "https://api.github.com/users/ptarjan/following{/other_user}",
            "gists_url": "https://api.github.com/users/ptarjan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ptarjan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ptarjan/subscriptions",
            "organizations_url": "https://api.github.com/users/ptarjan/orgs",
            "repos_url": "https://api.github.com/users/ptarjan/repos",
            "events_url": "https://api.github.com/users/ptarjan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ptarjan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "weird how there isn't an added https://github.com/fsnotify/fsevents/blob/master/fsevents.go#L91\n",
        "created_at": "2016-05-27T17:27:14Z",
        "updated_at": "2016-05-27T20:35:59Z",
        "html_url": "https://github.com/burke/zeus/pull/550#discussion_r64939778",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/550",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/64939778"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/550#discussion_r64939778"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/550"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/64941109",
        "pull_request_review_id": null,
        "id": 64941109,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0OTQxMTA5",
        "diff_hunk": "@@ -0,0 +1,120 @@\n+// +build darwin\n+\n+package filemonitor\n+\n+import \"github.com/fsnotify/fsevents\"\n+\n+const flagsWorthReloadingFor = fsevents.ItemRemoved | fsevents.ItemModified | fsevents.ItemRenamed",
        "path": "go/filemonitor/filemonitor_darwin.go",
        "position": 7,
        "original_position": 7,
        "commit_id": "f6c84115375dcf270a00ee09a3235db26291a7e3",
        "original_commit_id": "1850ce30d4badc769885dc5dc784803a6ca0b2d6",
        "user": {
            "login": "metcalf",
            "id": 16716,
            "node_id": "MDQ6VXNlcjE2NzE2",
            "avatar_url": "https://avatars1.githubusercontent.com/u/16716?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/metcalf",
            "html_url": "https://github.com/metcalf",
            "followers_url": "https://api.github.com/users/metcalf/followers",
            "following_url": "https://api.github.com/users/metcalf/following{/other_user}",
            "gists_url": "https://api.github.com/users/metcalf/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/metcalf/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/metcalf/subscriptions",
            "organizations_url": "https://api.github.com/users/metcalf/orgs",
            "repos_url": "https://api.github.com/users/metcalf/repos",
            "events_url": "https://api.github.com/users/metcalf/events{/privacy}",
            "received_events_url": "https://api.github.com/users/metcalf/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "There is an `ItemCreated`. I copied this list from here: https://github.com/burke/zeus/blob/ff7c2559dc2bc617a4ea2603f04aacd277f7a5a3/ext/fsevents/main.m#L11-L13\n\nThere aren't a lot of people talking about the subtleties of FSEvents but a couple places seem to indicate that you'll get an `kFSEventStreamEventFlagItemCreated` followed by an `kFSEventStreamEventFlagItemModified` if you create a file:\nhttp://stackoverflow.com/questions/15194662/file-system-watcher-for-mac-os-x\nhttp://stackoverflow.com/questions/11123007/check-which-files-have-changed-in-macfsevents-in-perl\n",
        "created_at": "2016-05-27T17:36:57Z",
        "updated_at": "2016-05-27T20:35:59Z",
        "html_url": "https://github.com/burke/zeus/pull/550#discussion_r64941109",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/550",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/64941109"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/550#discussion_r64941109"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/550"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/66383142",
        "pull_request_review_id": null,
        "id": 66383142,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzgzMTQy",
        "diff_hunk": "@@ -5,9 +5,9 @@\n require 'pty'\n require 'set'\n \n-require 'zeus/load_tracking'\n-require 'zeus/plan'\n-require 'zeus/version'\n+require_relative 'zeus/load_tracking'",
        "path": "rubygem/lib/zeus.rb",
        "position": 7,
        "original_position": 7,
        "commit_id": "09eaeb1213a28cd1b6c9294fe81082f26fd4351c",
        "original_commit_id": "09eaeb1213a28cd1b6c9294fe81082f26fd4351c",
        "user": {
            "login": "metcalf",
            "id": 16716,
            "node_id": "MDQ6VXNlcjE2NzE2",
            "avatar_url": "https://avatars1.githubusercontent.com/u/16716?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/metcalf",
            "html_url": "https://github.com/metcalf",
            "followers_url": "https://api.github.com/users/metcalf/followers",
            "following_url": "https://api.github.com/users/metcalf/following{/other_user}",
            "gists_url": "https://api.github.com/users/metcalf/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/metcalf/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/metcalf/subscriptions",
            "organizations_url": "https://api.github.com/users/metcalf/orgs",
            "repos_url": "https://api.github.com/users/metcalf/repos",
            "events_url": "https://api.github.com/users/metcalf/events{/privacy}",
            "received_events_url": "https://api.github.com/users/metcalf/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This has bitten me in the past when my LOAD_PATH isn't doing the right thing.\n",
        "created_at": "2016-06-09T05:03:54Z",
        "updated_at": "2016-06-09T05:03:54Z",
        "html_url": "https://github.com/burke/zeus/pull/562#discussion_r66383142",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/562",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/66383142"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/562#discussion_r66383142"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/562"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/68858481",
        "pull_request_review_id": null,
        "id": 68858481,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4ODU4NDgx",
        "diff_hunk": "@@ -5,7 +5,7 @@ import (\n \t\"time\"\n )\n \n-var FileChangeDelay = 300 * time.Millisecond\n+const defaultFileChangeDelay = 300 * time.Millisecond",
        "path": "go/filemonitor/filemonitor.go",
        "position": null,
        "original_position": 5,
        "commit_id": "e3c936e42bc528525719db4f76f865173ba154e2",
        "original_commit_id": "6de2ef2ece12b46dfcacff56964b944ec713386e",
        "user": {
            "login": "ptarjan",
            "id": 40143,
            "node_id": "MDQ6VXNlcjQwMTQz",
            "avatar_url": "https://avatars0.githubusercontent.com/u/40143?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ptarjan",
            "html_url": "https://github.com/ptarjan",
            "followers_url": "https://api.github.com/users/ptarjan/followers",
            "following_url": "https://api.github.com/users/ptarjan/following{/other_user}",
            "gists_url": "https://api.github.com/users/ptarjan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ptarjan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ptarjan/subscriptions",
            "organizations_url": "https://api.github.com/users/ptarjan/orgs",
            "repos_url": "https://api.github.com/users/ptarjan/repos",
            "events_url": "https://api.github.com/users/ptarjan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ptarjan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'm not in love with this being in two places\n",
        "created_at": "2016-06-28T22:51:55Z",
        "updated_at": "2016-06-29T17:01:16Z",
        "html_url": "https://github.com/burke/zeus/pull/564#discussion_r68858481",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/564",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/68858481"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/564#discussion_r68858481"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/564"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/68858822",
        "pull_request_review_id": null,
        "id": 68858822,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4ODU4ODIy",
        "diff_hunk": "@@ -25,7 +25,7 @@ func TestFileListener(t *testing.T) {\n \t}\n \n \tslog.SetTraceLogger(slog.NewTraceLogger(os.Stderr))\n-\tfl := filemonitor.NewFileListener(ln)\n+\tfl := filemonitor.NewFileListener(50*time.Millisecond, ln)",
        "path": "go/filemonitor/filelistener_test.go",
        "position": null,
        "original_position": 5,
        "commit_id": "e3c936e42bc528525719db4f76f865173ba154e2",
        "original_commit_id": "6de2ef2ece12b46dfcacff56964b944ec713386e",
        "user": {
            "login": "ptarjan",
            "id": 40143,
            "node_id": "MDQ6VXNlcjQwMTQz",
            "avatar_url": "https://avatars0.githubusercontent.com/u/40143?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ptarjan",
            "html_url": "https://github.com/ptarjan",
            "followers_url": "https://api.github.com/users/ptarjan/followers",
            "following_url": "https://api.github.com/users/ptarjan/following{/other_user}",
            "gists_url": "https://api.github.com/users/ptarjan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ptarjan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ptarjan/subscriptions",
            "organizations_url": "https://api.github.com/users/ptarjan/orgs",
            "repos_url": "https://api.github.com/users/ptarjan/repos",
            "events_url": "https://api.github.com/users/ptarjan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ptarjan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "a new default? Maybe extract out to a `const`.\n",
        "created_at": "2016-06-28T22:55:24Z",
        "updated_at": "2016-06-29T17:01:16Z",
        "html_url": "https://github.com/burke/zeus/pull/564#discussion_r68858822",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/564",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/68858822"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/564#discussion_r68858822"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/564"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/68858896",
        "pull_request_review_id": null,
        "id": 68858896,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4ODU4ODk2",
        "diff_hunk": "@@ -47,7 +47,7 @@ func TestFileMonitor(t *testing.T) {\n \t\tt.Fatal(err)\n \t}\n \n-\tfm, err := filemonitor.NewFileMonitor()\n+\tfm, err := filemonitor.NewFileMonitor(100 * time.Millisecond)",
        "path": "go/filemonitor/filemonitor_test.go",
        "position": null,
        "original_position": 5,
        "commit_id": "e3c936e42bc528525719db4f76f865173ba154e2",
        "original_commit_id": "6de2ef2ece12b46dfcacff56964b944ec713386e",
        "user": {
            "login": "ptarjan",
            "id": 40143,
            "node_id": "MDQ6VXNlcjQwMTQz",
            "avatar_url": "https://avatars0.githubusercontent.com/u/40143?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ptarjan",
            "html_url": "https://github.com/ptarjan",
            "followers_url": "https://api.github.com/users/ptarjan/followers",
            "following_url": "https://api.github.com/users/ptarjan/following{/other_user}",
            "gists_url": "https://api.github.com/users/ptarjan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ptarjan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ptarjan/subscriptions",
            "organizations_url": "https://api.github.com/users/ptarjan/orgs",
            "repos_url": "https://api.github.com/users/ptarjan/repos",
            "events_url": "https://api.github.com/users/ptarjan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ptarjan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "all these random numbers are making me antsy\n",
        "created_at": "2016-06-28T22:56:06Z",
        "updated_at": "2016-06-29T17:01:16Z",
        "html_url": "https://github.com/burke/zeus/pull/564#discussion_r68858896",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/564",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/68858896"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/564#discussion_r68858896"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/564"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/68859596",
        "pull_request_review_id": null,
        "id": 68859596,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4ODU5NTk2",
        "diff_hunk": "@@ -66,92 +62,85 @@ const (\n func (tree *ProcessTree) NewSlaveNode(identifier string, parent *SlaveNode, monitor filemonitor.FileMonitor) *SlaveNode {\n \ts := SlaveNode{}\n \ts.needsRestart = make(chan bool, 1)\n-\ts.commandBootRequests = make(chan *CommandRequest, 256)\n \ts.slaveBootRequests = make(chan *SlaveNode, 256)\n-\ts.parentReadiness = make(chan bool, 1)\n-\ts.childBootRequests = make(chan *SlaveNode, 256)\n-\ts.Features = make(map[string]bool)\n-\ts.event = make(chan bool, 1)\n+\ts.commandBootRequests = make(chan *CommandRequest, 256)\n+\ts.features = make(map[string]bool)\n+\ts.event = make(chan bool)\n \ts.Name = identifier\n \ts.Parent = parent\n \ts.fileMonitor = monitor\n \ttree.SlavesByName[identifier] = &s\n \treturn &s\n }\n \n-// If the slave is executing, or has executed its action, trigger a restart.\n-// There's no need to trigger a restart if the slave has not yet begun to\n-// execute its action, and there's no need to queue multiple restarts.\n func (s *SlaveNode) RequestRestart() {\n-\ts.requestRestart(false)\n-}\n+\ts.L.Lock()",
        "path": "go/processtree/slavenode.go",
        "position": 74,
        "original_position": 74,
        "commit_id": "e9dfba64156b54dffb8bfffebfb68797d7d68b24",
        "original_commit_id": "b9afd7559e01880bdaba6b497f1bb72da19c1933",
        "user": {
            "login": "ptarjan",
            "id": 40143,
            "node_id": "MDQ6VXNlcjQwMTQz",
            "avatar_url": "https://avatars0.githubusercontent.com/u/40143?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ptarjan",
            "html_url": "https://github.com/ptarjan",
            "followers_url": "https://api.github.com/users/ptarjan/followers",
            "following_url": "https://api.github.com/users/ptarjan/following{/other_user}",
            "gists_url": "https://api.github.com/users/ptarjan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ptarjan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ptarjan/subscriptions",
            "organizations_url": "https://api.github.com/users/ptarjan/orgs",
            "repos_url": "https://api.github.com/users/ptarjan/repos",
            "events_url": "https://api.github.com/users/ptarjan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ptarjan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "why do you need a lock here and not in `RequestSlaveBoot`?\n",
        "created_at": "2016-06-28T23:02:24Z",
        "updated_at": "2016-06-30T23:45:21Z",
        "html_url": "https://github.com/burke/zeus/pull/565#discussion_r68859596",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/565",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/68859596"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/565#discussion_r68859596"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/565"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/68860614",
        "pull_request_review_id": null,
        "id": 68860614,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4ODYwNjE0",
        "diff_hunk": "@@ -235,91 +215,103 @@ func (s *SlaveNode) doBootingState() string { // -> {SCrashed, SReady}\n \t\treturn SReady\n \t}\n \n-\t// Drain the process's feature messages, if we have any, so\n-\t// that reloads happen when any load-time problems get fixed:\n-\ts.L.Unlock()\n-\ts.handleMessages()\n-\ts.L.Lock()\n-\n \t// Clean up:\n-\tif s.Pid > 0 {\n-\t\tsyscall.Kill(s.Pid, syscall.SIGKILL)\n+\tif s.pid > 0 {\n+\t\tsyscall.Kill(s.pid, syscall.SIGKILL)\n \t}\n \ts.wipe()\n \ts.Error = msg\n \treturn SCrashed\n }\n \n-// In the \"SCrashed\" and \"SReady\" states, we have either a functioning\n-// process we can spawn new processes off of, or an error message to\n-// propagate to the user. The high-level operation of these two states\n-// is identical: First, we work off the queue of command and slave\n-// boot requests that have built up while this process was\n-// booting. Then, we begin a 4-way select over those channels, the\n-// \"restart\" channel (which kills the process and transitions us to\n-// \"SWaiting\") and a channel for restarted children to request booting.\n-// In this way, we always serve queued fork requests before killing the process.\n-func (s *SlaveNode) doCrashedOrReadyState() string { // -> SWaiting\n-\ts.L.Lock()\n-\tif s.state == SReady && !s.featureHandlerRunning {\n-\t\ts.hasSuccessfullyBooted = true\n-\t\ts.featureHandlerRunning = true\n-\t\ts.trace(\"entered state SReady\")\n-\t\tgo s.handleMessages()\n-\t}\n-\ts.L.Unlock()\n-\n-\ts.bootQueuedCommandsAndSlaves()\n+// In the \"SReady\" state, we have a functioning process we can spawn\n+// new processes of of. We respond to requests to boot slaves and\n+// run commands until we receive a request to restart. This kills\n+// the process and transitions to SUnbooted.\n+func (s *SlaveNode) doReadyState() string { // -> SUnbooted\n+\ts.hasSuccessfullyBooted = true\n+\ts.trace(\"entered state SReady\")\n \n \tfor {\n \t\tselect {\n \t\tcase <-s.needsRestart:\n-\t\t\ts.L.Lock()\n-\t\t\ts.ForceKill()\n-\t\t\ts.wipe()\n-\t\t\ts.L.Unlock()\n-\t\t\treturn SWaiting\n-\t\tcase child := <-s.childBootRequests:\n-\t\t\tchild.parentReadiness <- true\n+\t\t\ts.doRestart()\n+\t\t\treturn SUnbooted\n \t\tcase slave := <-s.slaveBootRequests:\n-\t\t\ts.L.Lock()\n-\t\t\ts.trace(\"now sending slave boot request to %s\", slave.Name)\n \t\t\ts.bootSlave(slave)\n-\t\t\ts.L.Unlock()\n \t\tcase request := <-s.commandBootRequests:\n-\t\t\ts.L.Lock()\n-\t\t\ts.trace(\"now sending command boot request %v\", request)\n \t\t\ts.bootCommand(request)\n+\t\t}\n+\t}\n+}\n+\n+// In the \"SCrashed\" state, we have an error message from starting\n+// a process to propogate to the user and all slave nodes. We will\n+// continue propogating the error until we receive a request to restart.\n+func (s *SlaveNode) doCrashedState() string { // -> SUnbooted\n+\tfor {\n+\t\tselect {\n+\t\tcase <-s.needsRestart:\n+\t\t\ts.doRestart()\n+\t\t\treturn SUnbooted\n+\t\tcase slave := <-s.slaveBootRequests:\n+\t\t\tslave.L.Lock()\n+\t\t\tslave.Error = s.Error\n+\t\t\tslave.ReportBootEvent()\n+\t\t\tslave.L.Unlock()\n+\t\tcase request := <-s.commandBootRequests:\n+\t\t\ts.L.Lock()\n+\t\t\ts.trace(\"reporting crash to command %v\", request)\n+\t\t\trequest.Retchan <- &CommandReply{SCrashed, nil}\n \t\t\ts.L.Unlock()\n \t\t}\n \t}\n }\n \n-// This should only be called while holding a lock on s.L.\n-func (s *SlaveNode) bootSlave(slave *SlaveNode) {\n-\tif s.Error != \"\" {\n-\t\tslave.L.Lock()\n-\t\tslave.Error = s.Error\n-\t\tslave.event <- true\n-\t\tslave.L.Unlock()\n-\t\treturn\n+func (s *SlaveNode) doRestart() {\n+\ts.L.Lock()\n+\ts.ForceKill()\n+\ts.wipe()\n+\ts.L.Unlock()\n+\n+\t// Drain and ignore any enqueued slave boot requests since\n+\t// we're going to make them all restart again anyway.\n+\tdrained := false\n+\tfor !drained {\n+\t\tselect {\n+\t\tcase <-s.slaveBootRequests:\n+\t\tdefault:\n+\t\t\tdrained = true\n+\t\t}\n+\t}\n+\n+\tfor _, slave := range s.Slaves {\n+\t\tslave.RequestRestart()\n \t}\n+}\n+\n+func (s *SlaveNode) bootSlave(slave *SlaveNode) {\n+\ts.L.Lock()\n+\tdefer s.L.Unlock()\n+\n+\ts.trace(\"now sending slave boot request for %s\", slave.Name)\n+\n \tmsg := messages.CreateSpawnSlaveMessage(slave.Name)\n \t_, err := s.socket.WriteMessage(msg)\n \tif err != nil {\n \t\tslog.Error(err)\n \t}\n }\n \n-// This should only be called while holding a lock on s.L.",
        "path": "go/processtree/slavenode.go",
        "position": 410,
        "original_position": 378,
        "commit_id": "e9dfba64156b54dffb8bfffebfb68797d7d68b24",
        "original_commit_id": "b9afd7559e01880bdaba6b497f1bb72da19c1933",
        "user": {
            "login": "ptarjan",
            "id": 40143,
            "node_id": "MDQ6VXNlcjQwMTQz",
            "avatar_url": "https://avatars0.githubusercontent.com/u/40143?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ptarjan",
            "html_url": "https://github.com/ptarjan",
            "followers_url": "https://api.github.com/users/ptarjan/followers",
            "following_url": "https://api.github.com/users/ptarjan/following{/other_user}",
            "gists_url": "https://api.github.com/users/ptarjan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ptarjan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ptarjan/subscriptions",
            "organizations_url": "https://api.github.com/users/ptarjan/orgs",
            "repos_url": "https://api.github.com/users/ptarjan/repos",
            "events_url": "https://api.github.com/users/ptarjan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ptarjan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\ud83c\udf89 \n",
        "created_at": "2016-06-28T23:12:35Z",
        "updated_at": "2016-06-30T23:45:21Z",
        "html_url": "https://github.com/burke/zeus/pull/565#discussion_r68860614",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/565",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/68860614"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/565#discussion_r68860614"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/565"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/68860743",
        "pull_request_review_id": null,
        "id": 68860743,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4ODYwNzQz",
        "diff_hunk": "@@ -60,7 +60,7 @@ def boot_steps(identifier)\n           master.send_io(remote)\n \n           # Now I need to tell the master about my PID and ID\n-          local.write \"P:#{Process.pid}:#{identifier}\\0\"\n+          local.write \"P:#{Process.pid}:#{@parent_pid || 0}:#{identifier}\\0\"",
        "path": "rubygem/lib/zeus.rb",
        "position": 5,
        "original_position": 5,
        "commit_id": "e9dfba64156b54dffb8bfffebfb68797d7d68b24",
        "original_commit_id": "b9afd7559e01880bdaba6b497f1bb72da19c1933",
        "user": {
            "login": "ptarjan",
            "id": 40143,
            "node_id": "MDQ6VXNlcjQwMTQz",
            "avatar_url": "https://avatars0.githubusercontent.com/u/40143?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ptarjan",
            "html_url": "https://github.com/ptarjan",
            "followers_url": "https://api.github.com/users/ptarjan/followers",
            "following_url": "https://api.github.com/users/ptarjan/following{/other_user}",
            "gists_url": "https://api.github.com/users/ptarjan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ptarjan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ptarjan/subscriptions",
            "organizations_url": "https://api.github.com/users/ptarjan/orgs",
            "repos_url": "https://api.github.com/users/ptarjan/repos",
            "events_url": "https://api.github.com/users/ptarjan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ptarjan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "do people ever upgrade just the ruby gem and not get a new go binary?\n",
        "created_at": "2016-06-28T23:14:09Z",
        "updated_at": "2016-06-30T23:45:21Z",
        "html_url": "https://github.com/burke/zeus/pull/565#discussion_r68860743",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/565",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/68860743"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/565#discussion_r68860743"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/565"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/68986455",
        "pull_request_review_id": null,
        "id": 68986455,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4OTg2NDU1",
        "diff_hunk": "@@ -66,92 +62,85 @@ const (\n func (tree *ProcessTree) NewSlaveNode(identifier string, parent *SlaveNode, monitor filemonitor.FileMonitor) *SlaveNode {\n \ts := SlaveNode{}\n \ts.needsRestart = make(chan bool, 1)\n-\ts.commandBootRequests = make(chan *CommandRequest, 256)\n \ts.slaveBootRequests = make(chan *SlaveNode, 256)\n-\ts.parentReadiness = make(chan bool, 1)\n-\ts.childBootRequests = make(chan *SlaveNode, 256)\n-\ts.Features = make(map[string]bool)\n-\ts.event = make(chan bool, 1)\n+\ts.commandBootRequests = make(chan *CommandRequest, 256)\n+\ts.features = make(map[string]bool)\n+\ts.event = make(chan bool)\n \ts.Name = identifier\n \ts.Parent = parent\n \ts.fileMonitor = monitor\n \ttree.SlavesByName[identifier] = &s\n \treturn &s\n }\n \n-// If the slave is executing, or has executed its action, trigger a restart.\n-// There's no need to trigger a restart if the slave has not yet begun to\n-// execute its action, and there's no need to queue multiple restarts.\n func (s *SlaveNode) RequestRestart() {\n-\ts.requestRestart(false)\n-}\n+\ts.L.Lock()",
        "path": "go/processtree/slavenode.go",
        "position": 74,
        "original_position": 74,
        "commit_id": "e9dfba64156b54dffb8bfffebfb68797d7d68b24",
        "original_commit_id": "b9afd7559e01880bdaba6b497f1bb72da19c1933",
        "user": {
            "login": "metcalf",
            "id": 16716,
            "node_id": "MDQ6VXNlcjE2NzE2",
            "avatar_url": "https://avatars1.githubusercontent.com/u/16716?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/metcalf",
            "html_url": "https://github.com/metcalf",
            "followers_url": "https://api.github.com/users/metcalf/followers",
            "following_url": "https://api.github.com/users/metcalf/following{/other_user}",
            "gists_url": "https://api.github.com/users/metcalf/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/metcalf/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/metcalf/subscriptions",
            "organizations_url": "https://api.github.com/users/metcalf/orgs",
            "repos_url": "https://api.github.com/users/metcalf/repos",
            "events_url": "https://api.github.com/users/metcalf/events{/privacy}",
            "received_events_url": "https://api.github.com/users/metcalf/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I mutate the `Error` field in this one whereas the other just writes to a channel.\n",
        "created_at": "2016-06-29T17:03:46Z",
        "updated_at": "2016-06-30T23:45:21Z",
        "html_url": "https://github.com/burke/zeus/pull/565#discussion_r68986455",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/565",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/68986455"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/565#discussion_r68986455"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/565"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/68986635",
        "pull_request_review_id": null,
        "id": 68986635,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4OTg2NjM1",
        "diff_hunk": "@@ -60,7 +60,7 @@ def boot_steps(identifier)\n           master.send_io(remote)\n \n           # Now I need to tell the master about my PID and ID\n-          local.write \"P:#{Process.pid}:#{identifier}\\0\"\n+          local.write \"P:#{Process.pid}:#{@parent_pid || 0}:#{identifier}\\0\"",
        "path": "rubygem/lib/zeus.rb",
        "position": 5,
        "original_position": 5,
        "commit_id": "e9dfba64156b54dffb8bfffebfb68797d7d68b24",
        "original_commit_id": "b9afd7559e01880bdaba6b497f1bb72da19c1933",
        "user": {
            "login": "metcalf",
            "id": 16716,
            "node_id": "MDQ6VXNlcjE2NzE2",
            "avatar_url": "https://avatars1.githubusercontent.com/u/16716?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/metcalf",
            "html_url": "https://github.com/metcalf",
            "followers_url": "https://api.github.com/users/metcalf/followers",
            "following_url": "https://api.github.com/users/metcalf/following{/other_user}",
            "gists_url": "https://api.github.com/users/metcalf/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/metcalf/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/metcalf/subscriptions",
            "organizations_url": "https://api.github.com/users/metcalf/orgs",
            "repos_url": "https://api.github.com/users/metcalf/repos",
            "events_url": "https://api.github.com/users/metcalf/events{/privacy}",
            "received_events_url": "https://api.github.com/users/metcalf/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The Go binary is packaged with the gem (lurky!) so I'd hope not... though I\nimagine you could do it if you tried.\n\nOn Tue, Jun 28, 2016 at 4:14 PM, Paul Tarjan notifications@github.com\nwrote:\n\n> In rubygem/lib/zeus.rb\n> https://github.com/burke/zeus/pull/565#discussion_r68860743:\n> \n> > @@ -60,7 +60,7 @@ def boot_steps(identifier)\n> >            master.send_io(remote)\n> > \n> > ```\n> >        # Now I need to tell the master about my PID and ID\n> > ```\n> > -          local.write \"P:#{Process.pid}:#{identifier}\\0\"\n> > -          local.write \"P:#{Process.pid}:#{@parent_pid || 0}:#{identifier}\\0\"\n> \n> do people ever upgrade just the ruby gem and not get a new go binary?\n> \n> \u2014\n> You are receiving this because you were assigned.\n> Reply to this email directly, view it on GitHub\n> https://github.com/burke/zeus/pull/565/files/b9afd7559e01880bdaba6b497f1bb72da19c1933#r68860743,\n> or mute the thread\n> https://github.com/notifications/unsubscribe/AABBTOaknlZwkELgc7oL0pM5DVDWVCWkks5qQarCgaJpZM4I_WMp\n> .\n",
        "created_at": "2016-06-29T17:04:59Z",
        "updated_at": "2016-06-30T23:45:21Z",
        "html_url": "https://github.com/burke/zeus/pull/565#discussion_r68986635",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/565",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/68986635"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/565#discussion_r68986635"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/565"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/71971107",
        "pull_request_review_id": null,
        "id": 71971107,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcxOTcxMTA3",
        "diff_hunk": "@@ -1,6 +1,11 @@\n # encoding: utf-8\n require 'socket'\n \n+# load exact json version from Gemfile.lock to avoid conflicts\n+gemfile = \"#{ENV[\"BUNDLE_GEMFILE\"] || \"Gemfile\"}.lock\"\n+if File.exist?(gemfile) && version = File.read(gemfile)[/^    json \\((.*)\\)/, 1]",
        "path": "rubygem/lib/zeus.rb",
        "position": 6,
        "original_position": 6,
        "commit_id": "b21731d2f63c0a392a9d21dc01228c7a31d95494",
        "original_commit_id": "b21731d2f63c0a392a9d21dc01228c7a31d95494",
        "user": {
            "login": "kgrz",
            "id": 400299,
            "node_id": "MDQ6VXNlcjQwMDI5OQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/400299?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kgrz",
            "html_url": "https://github.com/kgrz",
            "followers_url": "https://api.github.com/users/kgrz/followers",
            "following_url": "https://api.github.com/users/kgrz/following{/other_user}",
            "gists_url": "https://api.github.com/users/kgrz/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kgrz/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kgrz/subscriptions",
            "organizations_url": "https://api.github.com/users/kgrz/orgs",
            "repos_url": "https://api.github.com/users/kgrz/repos",
            "events_url": "https://api.github.com/users/kgrz/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kgrz/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Probably not a big deal for this check, but should we be using `[[:space:]]` instead of a blank space?\n",
        "created_at": "2016-07-23T11:07:06Z",
        "updated_at": "2016-07-23T11:07:06Z",
        "html_url": "https://github.com/burke/zeus/pull/573#discussion_r71971107",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/573",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/71971107"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/573#discussion_r71971107"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/573"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/71971117",
        "pull_request_review_id": null,
        "id": 71971117,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcxOTcxMTE3",
        "diff_hunk": "@@ -15,7 +10,16 @@ def find_rails_path(root_path)\n APP_PATH  = File.expand_path('config/application',  RAILS_PATH) unless defined? APP_PATH\n \n require 'zeus'\n-require 'method_source'\n+\n+def gem_is_bundled?(gem)\n+  gemfile_lock_contents = File.read(ROOT_PATH + \"/Gemfile.lock\")\n+  gemfile_lock_contents.scan(/^\\s*#{gem} \\(([^=~><]+?)\\)/).flatten.first",
        "path": "rubygem/lib/zeus/rails.rb",
        "position": 17,
        "original_position": 17,
        "commit_id": "b21731d2f63c0a392a9d21dc01228c7a31d95494",
        "original_commit_id": "b21731d2f63c0a392a9d21dc01228c7a31d95494",
        "user": {
            "login": "kgrz",
            "id": 400299,
            "node_id": "MDQ6VXNlcjQwMDI5OQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/400299?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kgrz",
            "html_url": "https://github.com/kgrz",
            "followers_url": "https://api.github.com/users/kgrz/followers",
            "following_url": "https://api.github.com/users/kgrz/following{/other_user}",
            "gists_url": "https://api.github.com/users/kgrz/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kgrz/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kgrz/subscriptions",
            "organizations_url": "https://api.github.com/users/kgrz/orgs",
            "repos_url": "https://api.github.com/users/kgrz/repos",
            "events_url": "https://api.github.com/users/kgrz/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kgrz/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "same concern here\n",
        "created_at": "2016-07-23T11:08:00Z",
        "updated_at": "2016-07-23T11:08:00Z",
        "html_url": "https://github.com/burke/zeus/pull/573#discussion_r71971117",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/573",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/71971117"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/573#discussion_r71971117"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/573"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/72163921",
        "pull_request_review_id": null,
        "id": 72163921,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcyMTYzOTIx",
        "diff_hunk": "@@ -1,6 +1,11 @@\n # encoding: utf-8\n require 'socket'\n \n+# load exact json version from Gemfile.lock to avoid conflicts\n+gemfile = \"#{ENV[\"BUNDLE_GEMFILE\"] || \"Gemfile\"}.lock\"\n+if File.exist?(gemfile) && version = File.read(gemfile)[/^    json \\((.*)\\)/, 1]",
        "path": "rubygem/lib/zeus.rb",
        "position": 6,
        "original_position": 6,
        "commit_id": "b21731d2f63c0a392a9d21dc01228c7a31d95494",
        "original_commit_id": "b21731d2f63c0a392a9d21dc01228c7a31d95494",
        "user": {
            "login": "metcalf",
            "id": 16716,
            "node_id": "MDQ6VXNlcjE2NzE2",
            "avatar_url": "https://avatars1.githubusercontent.com/u/16716?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/metcalf",
            "html_url": "https://github.com/metcalf",
            "followers_url": "https://api.github.com/users/metcalf/followers",
            "following_url": "https://api.github.com/users/metcalf/following{/other_user}",
            "gists_url": "https://api.github.com/users/metcalf/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/metcalf/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/metcalf/subscriptions",
            "organizations_url": "https://api.github.com/users/metcalf/orgs",
            "repos_url": "https://api.github.com/users/metcalf/repos",
            "events_url": "https://api.github.com/users/metcalf/events{/privacy}",
            "received_events_url": "https://api.github.com/users/metcalf/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "In this case I think we do actually want to match a literal space whereas `[[:space:]]` also matches whitespace like newlines.\n",
        "created_at": "2016-07-25T23:27:09Z",
        "updated_at": "2016-07-25T23:27:09Z",
        "html_url": "https://github.com/burke/zeus/pull/573#discussion_r72163921",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/573",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/72163921"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/573#discussion_r72163921"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/573"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/74514600",
        "pull_request_review_id": null,
        "id": 74514600,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc0NTE0NjAw",
        "diff_hunk": "@@ -35,28 +35,17 @@ def features_loaded_by(&block)\n       # then gets added to $LOADED_FEATURES array.\n       def add_feature(file)\n         full_path = File.expand_path(file)\n+        return unless File.exist?(full_path)",
        "path": "rubygem/lib/zeus/load_tracking.rb",
        "position": 4,
        "original_position": 4,
        "commit_id": "1ec745ea57c4b22e3caec3fff9f4adffe62fb599",
        "original_commit_id": "1ec745ea57c4b22e3caec3fff9f4adffe62fb599",
        "user": {
            "login": "ptarjan",
            "id": 40143,
            "node_id": "MDQ6VXNlcjQwMTQz",
            "avatar_url": "https://avatars0.githubusercontent.com/u/40143?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ptarjan",
            "html_url": "https://github.com/ptarjan",
            "followers_url": "https://api.github.com/users/ptarjan/followers",
            "following_url": "https://api.github.com/users/ptarjan/following{/other_user}",
            "gists_url": "https://api.github.com/users/ptarjan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ptarjan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ptarjan/subscriptions",
            "organizations_url": "https://api.github.com/users/ptarjan/orgs",
            "repos_url": "https://api.github.com/users/ptarjan/repos",
            "events_url": "https://api.github.com/users/ptarjan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ptarjan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "this is such a weird api that silently ignores non-files...\n",
        "created_at": "2016-08-11T22:21:04Z",
        "updated_at": "2016-08-11T22:21:04Z",
        "html_url": "https://github.com/burke/zeus/pull/579#discussion_r74514600",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/579",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/74514600"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/579#discussion_r74514600"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/579"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/74794964",
        "pull_request_review_id": null,
        "id": 74794964,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc0Nzk0OTY0",
        "diff_hunk": "@@ -10,10 +10,5 @@ env:\n   - USE_RUBY=2.2.3\n before_install:\n   - rvm use $USE_RUBY --install --fuzzy\n-install:",
        "path": ".travis.yml",
        "position": 4,
        "original_position": 4,
        "commit_id": "55f92e9ce2f25591d3636a113357c66ee647c422",
        "original_commit_id": "55f92e9ce2f25591d3636a113357c66ee647c422",
        "user": {
            "login": "ptarjan",
            "id": 40143,
            "node_id": "MDQ6VXNlcjQwMTQz",
            "avatar_url": "https://avatars0.githubusercontent.com/u/40143?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ptarjan",
            "html_url": "https://github.com/ptarjan",
            "followers_url": "https://api.github.com/users/ptarjan/followers",
            "following_url": "https://api.github.com/users/ptarjan/following{/other_user}",
            "gists_url": "https://api.github.com/users/ptarjan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ptarjan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ptarjan/subscriptions",
            "organizations_url": "https://api.github.com/users/ptarjan/orgs",
            "repos_url": "https://api.github.com/users/ptarjan/repos",
            "events_url": "https://api.github.com/users/ptarjan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ptarjan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "way better\n",
        "created_at": "2016-08-15T17:05:31Z",
        "updated_at": "2016-08-15T17:05:31Z",
        "html_url": "https://github.com/burke/zeus/pull/578#discussion_r74794964",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/578",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/74794964"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/578#discussion_r74794964"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/578"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/75732127",
        "pull_request_review_id": null,
        "id": 75732127,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc1NzMyMTI3",
        "diff_hunk": "@@ -25,26 +25,22 @@ def features_loaded_by(&block)\n         end\n \n         new_features = all_features + err_features - old_features\n-        new_features.uniq!\n \n         [new_features, err]\n       end\n \n-      # Check the load path first to see if the file getting loaded is already\n-      # loaded. Otherwise, add the file to the $untracked_features array which\n-      # then gets added to $LOADED_FEATURES array.\n       def add_feature(file)\n-        full_path = File.expand_path(file)\n-        return unless File.exist?(full_path)\n+        add_features([file])\n+      end\n \n-        $untracked_features ||= []\n-        $untracked_features << full_path\n+      def add_features(files)\n+        files = files.map { |f| File.expand_path(f) }.select { |f| File.exist?(f) }\n+        Zeus.notify_features(files)\n       end\n \n       # $LOADED_FEATURES global variable is used internally by Rubygems\n       def all_features\n-        untracked = defined?($untracked_features) ? $untracked_features : []\n-        $LOADED_FEATURES + untracked\n+        Set.new($LOADED_FEATURES.dup)",
        "path": "rubygem/lib/zeus/load_tracking.rb",
        "position": 29,
        "original_position": 29,
        "commit_id": "667b92f2fef3de566a7a4e31efedbb03262a9845",
        "original_commit_id": "667b92f2fef3de566a7a4e31efedbb03262a9845",
        "user": {
            "login": "ptarjan",
            "id": 40143,
            "node_id": "MDQ6VXNlcjQwMTQz",
            "avatar_url": "https://avatars0.githubusercontent.com/u/40143?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ptarjan",
            "html_url": "https://github.com/ptarjan",
            "followers_url": "https://api.github.com/users/ptarjan/followers",
            "following_url": "https://api.github.com/users/ptarjan/following{/other_user}",
            "gists_url": "https://api.github.com/users/ptarjan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ptarjan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ptarjan/subscriptions",
            "organizations_url": "https://api.github.com/users/ptarjan/orgs",
            "repos_url": "https://api.github.com/users/ptarjan/repos",
            "events_url": "https://api.github.com/users/ptarjan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ptarjan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "remove `.dup`\n",
        "created_at": "2016-08-22T18:30:04Z",
        "updated_at": "2016-08-22T18:30:04Z",
        "html_url": "https://github.com/burke/zeus/pull/580#discussion_r75732127",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/580",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/75732127"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/580#discussion_r75732127"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/580"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/75732727",
        "pull_request_review_id": null,
        "id": 75732727,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc1NzMyNzI3",
        "diff_hunk": "@@ -25,26 +25,22 @@ def features_loaded_by(&block)\n         end\n \n         new_features = all_features + err_features - old_features\n-        new_features.uniq!\n \n         [new_features, err]\n       end\n \n-      # Check the load path first to see if the file getting loaded is already\n-      # loaded. Otherwise, add the file to the $untracked_features array which\n-      # then gets added to $LOADED_FEATURES array.\n       def add_feature(file)\n-        full_path = File.expand_path(file)\n-        return unless File.exist?(full_path)\n+        add_features([file])\n+      end\n \n-        $untracked_features ||= []\n-        $untracked_features << full_path\n+      def add_features(files)\n+        files = files.map { |f| File.expand_path(f) }.select { |f| File.exist?(f) }\n+        Zeus.notify_features(files)",
        "path": "rubygem/lib/zeus/load_tracking.rb",
        "position": 22,
        "original_position": 22,
        "commit_id": "667b92f2fef3de566a7a4e31efedbb03262a9845",
        "original_commit_id": "667b92f2fef3de566a7a4e31efedbb03262a9845",
        "user": {
            "login": "ptarjan",
            "id": 40143,
            "node_id": "MDQ6VXNlcjQwMTQz",
            "avatar_url": "https://avatars0.githubusercontent.com/u/40143?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ptarjan",
            "html_url": "https://github.com/ptarjan",
            "followers_url": "https://api.github.com/users/ptarjan/followers",
            "following_url": "https://api.github.com/users/ptarjan/following{/other_user}",
            "gists_url": "https://api.github.com/users/ptarjan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ptarjan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ptarjan/subscriptions",
            "organizations_url": "https://api.github.com/users/ptarjan/orgs",
            "repos_url": "https://api.github.com/users/ptarjan/repos",
            "events_url": "https://api.github.com/users/ptarjan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ptarjan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "as discussed, move this to `ZeusNotifier`\n",
        "created_at": "2016-08-22T18:33:19Z",
        "updated_at": "2016-08-22T18:33:19Z",
        "html_url": "https://github.com/burke/zeus/pull/580#discussion_r75732727",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/580",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/75732727"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/580#discussion_r75732727"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/580"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/75788336",
        "pull_request_review_id": null,
        "id": 75788336,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc1Nzg4MzM2",
        "diff_hunk": "@@ -192,28 +194,18 @@ def report_error_to_master(local, error)\n       local.write str\n     end\n \n-    def run_action(socket, identifier, feature_pipe_w)\n+    def run_action(socket, identifier)\n       # Now we run the action and report its success/fail status to the master.\n-      features, err = Zeus::LoadTracking.features_loaded_by do\n-        plan.after_fork unless identifier == :boot\n-        plan.send(identifier)\n-      end\n-\n-      if err\n-        # If we received an error, report features to the master syncronously.\n-        # We need to do this before reporting the error to the master\n-        # otherwise it will kill us before we can report features.\n-        begin\n-          notify_features(feature_pipe_w, features)\n-          feature_pipe_w.close\n-        ensure\n-          report_error_to_master(socket, err)\n+      begin\n+        Zeus::LoadTracking.track_features_loaded_by do\n+          plan.after_fork unless identifier == :boot\n+          plan.send(identifier)\n         end\n-      else\n-        # If we booted successfully, report features in a new thread",
        "path": "rubygem/lib/zeus.rb",
        "position": 68,
        "original_position": 68,
        "commit_id": "120716c518a26400f80b6dc68a2ba18700d3d090",
        "original_commit_id": "deee45e63e60b131c9f48aef46294122ba06f2d3",
        "user": {
            "login": "metcalf",
            "id": 16716,
            "node_id": "MDQ6VXNlcjE2NzE2",
            "avatar_url": "https://avatars1.githubusercontent.com/u/16716?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/metcalf",
            "html_url": "https://github.com/metcalf",
            "followers_url": "https://api.github.com/users/metcalf/followers",
            "following_url": "https://api.github.com/users/metcalf/following{/other_user}",
            "gists_url": "https://api.github.com/users/metcalf/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/metcalf/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/metcalf/subscriptions",
            "organizations_url": "https://api.github.com/users/metcalf/orgs",
            "repos_url": "https://api.github.com/users/metcalf/repos",
            "events_url": "https://api.github.com/users/metcalf/events{/privacy}",
            "received_events_url": "https://api.github.com/users/metcalf/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Getting rid of this is a somewhat significant behavior change. We'll now wait until after notifying features until marking the process as running and allowing it to fork. Given that forking and threading interact really badly, I think this is better for stability. Notifying features for every Ruby file in our codebase only takes ~100ms so this isn't a big delay anyway.\n",
        "created_at": "2016-08-23T01:11:54Z",
        "updated_at": "2016-08-24T17:49:58Z",
        "html_url": "https://github.com/burke/zeus/pull/584#discussion_r75788336",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/584",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/75788336"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/584#discussion_r75788336"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/584"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/75788428",
        "pull_request_review_id": null,
        "id": 75788428,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc1Nzg4NDI4",
        "diff_hunk": "@@ -1,8 +1,15 @@\n module Zeus\n   class LoadTracking\n     class << self\n-      def features_loaded_by(&block)\n-        old_features = all_features\n+      def add_feature(file)\n+        full_path = File.expand_path(file)\n+        return unless File.exist?(full_path) && @feature_pipe\n+        notify_features([full_path])\n+      end\n+\n+      # Internal: This should only be called by Zeus code\n+      def track_features_loaded_by",
        "path": "rubygem/lib/zeus/load_tracking.rb",
        "position": 13,
        "original_position": 13,
        "commit_id": "120716c518a26400f80b6dc68a2ba18700d3d090",
        "original_commit_id": "deee45e63e60b131c9f48aef46294122ba06f2d3",
        "user": {
            "login": "metcalf",
            "id": 16716,
            "node_id": "MDQ6VXNlcjE2NzE2",
            "avatar_url": "https://avatars1.githubusercontent.com/u/16716?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/metcalf",
            "html_url": "https://github.com/metcalf",
            "followers_url": "https://api.github.com/users/metcalf/followers",
            "following_url": "https://api.github.com/users/metcalf/following{/other_user}",
            "gists_url": "https://api.github.com/users/metcalf/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/metcalf/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/metcalf/subscriptions",
            "organizations_url": "https://api.github.com/users/metcalf/orgs",
            "repos_url": "https://api.github.com/users/metcalf/repos",
            "events_url": "https://api.github.com/users/metcalf/events{/privacy}",
            "received_events_url": "https://api.github.com/users/metcalf/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I completely renamed this public method. I'm not too worried since I recently completely changed the return signature and no one complained. I marked it as internal so it shouldn't be a question in the future.\n",
        "created_at": "2016-08-23T01:12:53Z",
        "updated_at": "2016-08-24T17:49:58Z",
        "html_url": "https://github.com/burke/zeus/pull/584#discussion_r75788428",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/584",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/75788428"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/584#discussion_r75788428"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/584"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/75788461",
        "pull_request_review_id": null,
        "id": 75788461,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc1Nzg4NDYx",
        "diff_hunk": "@@ -14,37 +21,44 @@ def features_loaded_by(&block)\n           # the error is not in the backtrace, only the error message.\n           match = /\\A([^:]+):\\d+: syntax error/.match(err.message)\n           err_features << match[1] if match\n-        rescue Exception => err\n-          # Just capture this to add to the err_features list\n-        end\n+          raise\n+        rescue ScriptError => err\n+          raise\n+        rescue => err\n+          raise\n+        ensure\n+          if err && err.backtrace\n+            err_features += err.backtrace.map { |b| b.split(':').first }\n+                           .select { |f| f.start_with?('/') }\n+                           .take_while { |f| f != __FILE__ }\n+          end\n \n-        if err && err.backtrace\n-          err_features += err.backtrace.map { |b| b.split(':').first }\n-                             .select { |f| f.start_with?('/') }\n-                             .take_while { |f| f != __FILE__ }\n+          notify_features(Set.new($LOADED_FEATURES) + err_features - old_features)\n         end\n-\n-        new_features = all_features + err_features - old_features\n-        new_features.uniq!\n-\n-        [new_features, err]\n       end\n \n-      # Check the load path first to see if the file getting loaded is already\n-      # loaded. Otherwise, add the file to the $untracked_features array which\n-      # then gets added to $LOADED_FEATURES array.\n-      def add_feature(file)\n-        full_path = File.expand_path(file)\n-        return unless File.exist?(full_path)\n+      # Internal: This should only be called by Zeus code\n+      def set_feature_pipe(feature_pipe)\n+        @feature_mutex ||= Mutex.new\n+        @feature_pipe = feature_pipe\n+      end\n \n-        $untracked_features ||= []\n-        $untracked_features << full_path\n+      # Internal: This should only be called by Zeus code\n+      def clear_feature_pipe\n+        @feature_pipe.close\n+        @feature_pipe = nil\n       end\n \n-      # $LOADED_FEATURES global variable is used internally by Rubygems",
        "path": "rubygem/lib/zeus/load_tracking.rb",
        "position": null,
        "original_position": 70,
        "commit_id": "120716c518a26400f80b6dc68a2ba18700d3d090",
        "original_commit_id": "deee45e63e60b131c9f48aef46294122ba06f2d3",
        "user": {
            "login": "metcalf",
            "id": 16716,
            "node_id": "MDQ6VXNlcjE2NzE2",
            "avatar_url": "https://avatars1.githubusercontent.com/u/16716?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/metcalf",
            "html_url": "https://github.com/metcalf",
            "followers_url": "https://api.github.com/users/metcalf/followers",
            "following_url": "https://api.github.com/users/metcalf/following{/other_user}",
            "gists_url": "https://api.github.com/users/metcalf/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/metcalf/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/metcalf/subscriptions",
            "organizations_url": "https://api.github.com/users/metcalf/orgs",
            "repos_url": "https://api.github.com/users/metcalf/repos",
            "events_url": "https://api.github.com/users/metcalf/events{/privacy}",
            "received_events_url": "https://api.github.com/users/metcalf/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Removed public method... it seems pretty unlikely anyone was calling this.\n",
        "created_at": "2016-08-23T01:13:23Z",
        "updated_at": "2016-08-24T17:49:58Z",
        "html_url": "https://github.com/burke/zeus/pull/584#discussion_r75788461",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/584",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/75788461"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/584#discussion_r75788461"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/584"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/75788564",
        "pull_request_review_id": null,
        "id": 75788564,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc1Nzg4NTY0",
        "diff_hunk": "@@ -192,28 +194,18 @@ def report_error_to_master(local, error)\n       local.write str\n     end\n \n-    def run_action(socket, identifier, feature_pipe_w)\n+    def run_action(socket, identifier)\n       # Now we run the action and report its success/fail status to the master.\n-      features, err = Zeus::LoadTracking.features_loaded_by do\n-        plan.after_fork unless identifier == :boot\n-        plan.send(identifier)\n-      end\n-\n-      if err\n-        # If we received an error, report features to the master syncronously.\n-        # We need to do this before reporting the error to the master\n-        # otherwise it will kill us before we can report features.\n-        begin\n-          notify_features(feature_pipe_w, features)\n-          feature_pipe_w.close\n-        ensure\n-          report_error_to_master(socket, err)\n+      begin\n+        Zeus::LoadTracking.track_features_loaded_by do\n+          plan.after_fork unless identifier == :boot\n+          plan.send(identifier)\n         end\n-      else\n-        # If we booted successfully, report features in a new thread\n-        # so we can immediately begin listening for commands.\n+\n         socket.write \"R:OK\\0\"\n-        Thread.new { notify_features(feature_pipe_w, features) }\n+      rescue => err\n+        report_error_to_master(socket, err)\n+        raise",
        "path": "rubygem/lib/zeus.rb",
        "position": 75,
        "original_position": 75,
        "commit_id": "120716c518a26400f80b6dc68a2ba18700d3d090",
        "original_commit_id": "deee45e63e60b131c9f48aef46294122ba06f2d3",
        "user": {
            "login": "metcalf",
            "id": 16716,
            "node_id": "MDQ6VXNlcjE2NzE2",
            "avatar_url": "https://avatars1.githubusercontent.com/u/16716?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/metcalf",
            "html_url": "https://github.com/metcalf",
            "followers_url": "https://api.github.com/users/metcalf/followers",
            "following_url": "https://api.github.com/users/metcalf/following{/other_user}",
            "gists_url": "https://api.github.com/users/metcalf/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/metcalf/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/metcalf/subscriptions",
            "organizations_url": "https://api.github.com/users/metcalf/orgs",
            "repos_url": "https://api.github.com/users/metcalf/repos",
            "events_url": "https://api.github.com/users/metcalf/events{/privacy}",
            "received_events_url": "https://api.github.com/users/metcalf/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "We didn't used to `raise` here, instead waiting for the master to send us a SIGTERM. There's no reason to suppress the exception though since we're going to get killed anyway.\n",
        "created_at": "2016-08-23T01:14:23Z",
        "updated_at": "2016-08-24T17:49:58Z",
        "html_url": "https://github.com/burke/zeus/pull/584#discussion_r75788564",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/584",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/75788564"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/584#discussion_r75788564"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/584"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/75788808",
        "pull_request_review_id": null,
        "id": 75788808,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc1Nzg4ODA4",
        "diff_hunk": "@@ -1,8 +1,15 @@\n module Zeus\n   class LoadTracking\n     class << self\n-      def features_loaded_by(&block)\n-        old_features = all_features\n+      def add_feature(file)\n+        full_path = File.expand_path(file)\n+        return unless File.exist?(full_path) && @feature_pipe\n+        notify_features([full_path])",
        "path": "rubygem/lib/zeus/load_tracking.rb",
        "position": 9,
        "original_position": 9,
        "commit_id": "120716c518a26400f80b6dc68a2ba18700d3d090",
        "original_commit_id": "deee45e63e60b131c9f48aef46294122ba06f2d3",
        "user": {
            "login": "metcalf",
            "id": 16716,
            "node_id": "MDQ6VXNlcjE2NzE2",
            "avatar_url": "https://avatars1.githubusercontent.com/u/16716?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/metcalf",
            "html_url": "https://github.com/metcalf",
            "followers_url": "https://api.github.com/users/metcalf/followers",
            "following_url": "https://api.github.com/users/metcalf/following{/other_user}",
            "gists_url": "https://api.github.com/users/metcalf/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/metcalf/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/metcalf/subscriptions",
            "organizations_url": "https://api.github.com/users/metcalf/orgs",
            "repos_url": "https://api.github.com/users/metcalf/repos",
            "events_url": "https://api.github.com/users/metcalf/events{/privacy}",
            "received_events_url": "https://api.github.com/users/metcalf/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "`add_feature` now sends feature to the Zeus master synchronously rather than buffering them until the end of a `features_loaded_by` block. IIRC, this costs 50-100ms over thousands of files. Combined with https://github.com/burke/zeus/pull/579, this release will still be faster at tracking features. We can always add a batched `add_features` later if it becomes a concern.\n",
        "created_at": "2016-08-23T01:16:33Z",
        "updated_at": "2016-08-24T17:49:58Z",
        "html_url": "https://github.com/burke/zeus/pull/584#discussion_r75788808",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/584",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/75788808"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/584#discussion_r75788808"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/584"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/75788953",
        "pull_request_review_id": null,
        "id": 75788953,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc1Nzg4OTUz",
        "diff_hunk": "@@ -1 +0,0 @@\n-exit(1)",
        "path": "rubygem/spec/assets/exit.rb",
        "position": 1,
        "original_position": 1,
        "commit_id": "120716c518a26400f80b6dc68a2ba18700d3d090",
        "original_commit_id": "deee45e63e60b131c9f48aef46294122ba06f2d3",
        "user": {
            "login": "metcalf",
            "id": 16716,
            "node_id": "MDQ6VXNlcjE2NzE2",
            "avatar_url": "https://avatars1.githubusercontent.com/u/16716?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/metcalf",
            "html_url": "https://github.com/metcalf",
            "followers_url": "https://api.github.com/users/metcalf/followers",
            "following_url": "https://api.github.com/users/metcalf/following{/other_user}",
            "gists_url": "https://api.github.com/users/metcalf/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/metcalf/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/metcalf/subscriptions",
            "organizations_url": "https://api.github.com/users/metcalf/orgs",
            "repos_url": "https://api.github.com/users/metcalf/repos",
            "events_url": "https://api.github.com/users/metcalf/events{/privacy}",
            "received_events_url": "https://api.github.com/users/metcalf/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I got rid of this test case since I stopped catching `Exception` in `track_features_loaded_by`. I think someone would expect `exit` to work pretty promptly without waiting to pass a bunch of messages around.\n",
        "created_at": "2016-08-23T01:17:57Z",
        "updated_at": "2016-08-24T17:49:58Z",
        "html_url": "https://github.com/burke/zeus/pull/584#discussion_r75788953",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/584",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/75788953"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/584#discussion_r75788953"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/584"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/75789008",
        "pull_request_review_id": null,
        "id": 75789008,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc1Nzg5MDA4",
        "diff_hunk": "@@ -0,0 +1,85 @@\n+require 'zeus'",
        "path": "rubygem/spec/zeus_spec.rb",
        "position": 1,
        "original_position": 1,
        "commit_id": "120716c518a26400f80b6dc68a2ba18700d3d090",
        "original_commit_id": "deee45e63e60b131c9f48aef46294122ba06f2d3",
        "user": {
            "login": "metcalf",
            "id": 16716,
            "node_id": "MDQ6VXNlcjE2NzE2",
            "avatar_url": "https://avatars1.githubusercontent.com/u/16716?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/metcalf",
            "html_url": "https://github.com/metcalf",
            "followers_url": "https://api.github.com/users/metcalf/followers",
            "following_url": "https://api.github.com/users/metcalf/following{/other_user}",
            "gists_url": "https://api.github.com/users/metcalf/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/metcalf/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/metcalf/subscriptions",
            "organizations_url": "https://api.github.com/users/metcalf/orgs",
            "repos_url": "https://api.github.com/users/metcalf/repos",
            "events_url": "https://api.github.com/users/metcalf/events{/privacy}",
            "received_events_url": "https://api.github.com/users/metcalf/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This test involves some fiddly things with IOs and concurrency... probably worth a careful read.\n",
        "created_at": "2016-08-23T01:18:43Z",
        "updated_at": "2016-08-24T17:49:58Z",
        "html_url": "https://github.com/burke/zeus/pull/584#discussion_r75789008",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/584",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/75789008"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/584#discussion_r75789008"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/584"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/75979052",
        "pull_request_review_id": null,
        "id": 75979052,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc1OTc5MDUy",
        "diff_hunk": "@@ -192,28 +194,18 @@ def report_error_to_master(local, error)\n       local.write str\n     end\n \n-    def run_action(socket, identifier, feature_pipe_w)\n+    def run_action(socket, identifier)\n       # Now we run the action and report its success/fail status to the master.\n-      features, err = Zeus::LoadTracking.features_loaded_by do\n-        plan.after_fork unless identifier == :boot\n-        plan.send(identifier)\n-      end\n-\n-      if err\n-        # If we received an error, report features to the master syncronously.\n-        # We need to do this before reporting the error to the master\n-        # otherwise it will kill us before we can report features.\n-        begin\n-          notify_features(feature_pipe_w, features)\n-          feature_pipe_w.close\n-        ensure\n-          report_error_to_master(socket, err)\n+      begin\n+        Zeus::LoadTracking.track_features_loaded_by do\n+          plan.after_fork unless identifier == :boot\n+          plan.send(identifier)\n         end\n-      else\n-        # If we booted successfully, report features in a new thread",
        "path": "rubygem/lib/zeus.rb",
        "position": 68,
        "original_position": 68,
        "commit_id": "120716c518a26400f80b6dc68a2ba18700d3d090",
        "original_commit_id": "deee45e63e60b131c9f48aef46294122ba06f2d3",
        "user": {
            "login": "ptarjan",
            "id": 40143,
            "node_id": "MDQ6VXNlcjQwMTQz",
            "avatar_url": "https://avatars0.githubusercontent.com/u/40143?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ptarjan",
            "html_url": "https://github.com/ptarjan",
            "followers_url": "https://api.github.com/users/ptarjan/followers",
            "following_url": "https://api.github.com/users/ptarjan/following{/other_user}",
            "gists_url": "https://api.github.com/users/ptarjan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ptarjan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ptarjan/subscriptions",
            "organizations_url": "https://api.github.com/users/ptarjan/orgs",
            "repos_url": "https://api.github.com/users/ptarjan/repos",
            "events_url": "https://api.github.com/users/ptarjan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ptarjan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Thanks for pointing this out. Seems reasonable.\n",
        "created_at": "2016-08-24T00:54:30Z",
        "updated_at": "2016-08-24T17:49:58Z",
        "html_url": "https://github.com/burke/zeus/pull/584#discussion_r75979052",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/584",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/75979052"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/584#discussion_r75979052"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/584"
            }
        },
        "in_reply_to_id": 75788336
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/75979090",
        "pull_request_review_id": null,
        "id": 75979090,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc1OTc5MDkw",
        "diff_hunk": "@@ -192,28 +194,18 @@ def report_error_to_master(local, error)\n       local.write str\n     end\n \n-    def run_action(socket, identifier, feature_pipe_w)\n+    def run_action(socket, identifier)\n       # Now we run the action and report its success/fail status to the master.\n-      features, err = Zeus::LoadTracking.features_loaded_by do\n-        plan.after_fork unless identifier == :boot\n-        plan.send(identifier)\n-      end\n-\n-      if err\n-        # If we received an error, report features to the master syncronously.\n-        # We need to do this before reporting the error to the master\n-        # otherwise it will kill us before we can report features.\n-        begin\n-          notify_features(feature_pipe_w, features)\n-          feature_pipe_w.close\n-        ensure\n-          report_error_to_master(socket, err)\n+      begin\n+        Zeus::LoadTracking.track_features_loaded_by do\n+          plan.after_fork unless identifier == :boot\n+          plan.send(identifier)\n         end\n-      else\n-        # If we booted successfully, report features in a new thread\n-        # so we can immediately begin listening for commands.\n+\n         socket.write \"R:OK\\0\"\n-        Thread.new { notify_features(feature_pipe_w, features) }\n+      rescue => err\n+        report_error_to_master(socket, err)\n+        raise",
        "path": "rubygem/lib/zeus.rb",
        "position": 75,
        "original_position": 75,
        "commit_id": "120716c518a26400f80b6dc68a2ba18700d3d090",
        "original_commit_id": "deee45e63e60b131c9f48aef46294122ba06f2d3",
        "user": {
            "login": "ptarjan",
            "id": 40143,
            "node_id": "MDQ6VXNlcjQwMTQz",
            "avatar_url": "https://avatars0.githubusercontent.com/u/40143?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ptarjan",
            "html_url": "https://github.com/ptarjan",
            "followers_url": "https://api.github.com/users/ptarjan/followers",
            "following_url": "https://api.github.com/users/ptarjan/following{/other_user}",
            "gists_url": "https://api.github.com/users/ptarjan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ptarjan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ptarjan/subscriptions",
            "organizations_url": "https://api.github.com/users/ptarjan/orgs",
            "repos_url": "https://api.github.com/users/ptarjan/repos",
            "events_url": "https://api.github.com/users/ptarjan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ptarjan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Will it cause extra spew in the dieing window?\n",
        "created_at": "2016-08-24T00:54:52Z",
        "updated_at": "2016-08-24T17:49:58Z",
        "html_url": "https://github.com/burke/zeus/pull/584#discussion_r75979090",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/584",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/75979090"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/584#discussion_r75979090"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/584"
            }
        },
        "in_reply_to_id": 75788564
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/75979177",
        "pull_request_review_id": null,
        "id": 75979177,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc1OTc5MTc3",
        "diff_hunk": "@@ -14,37 +21,46 @@ def features_loaded_by(&block)\n           # the error is not in the backtrace, only the error message.\n           match = /\\A([^:]+):\\d+: syntax error/.match(err.message)\n           err_features << match[1] if match\n-        rescue Exception => err\n-          # Just capture this to add to the err_features list\n-        end\n+          raise\n+        rescue ScriptError => err\n+          raise\n+        rescue => err\n+          raise\n+        ensure\n+          if err && err.backtrace\n+            err_features += err.backtrace.map { |b| b.split(':').first }\n+                           .select { |f| f.start_with?('/') }\n+                           .take_while { |f| f != __FILE__ }\n+          end\n \n-        if err && err.backtrace\n-          err_features += err.backtrace.map { |b| b.split(':').first }\n-                             .select { |f| f.start_with?('/') }\n-                             .take_while { |f| f != __FILE__ }\n+          notify_features(Set.new($LOADED_FEATURES) + err_features - old_features)\n         end\n+      end\n \n-        new_features = all_features + err_features - old_features\n-        new_features.uniq!\n+      # Internal: This should only be called by Zeus code\n+      def set_feature_pipe(feature_pipe)\n+        @feature_mutex ||= Mutex.new\n+        @feature_pipe = feature_pipe\n+      end\n \n-        [new_features, err]\n+      # Internal: This should only be called by Zeus code\n+      def clear_feature_pipe\n+        @feature_pipe.close\n+        @feature_pipe = nil",
        "path": "rubygem/lib/zeus/load_tracking.rb",
        "position": 57,
        "original_position": 57,
        "commit_id": "120716c518a26400f80b6dc68a2ba18700d3d090",
        "original_commit_id": "be16ba2f37eda9c757f106ac800dd2a47dda1aa7",
        "user": {
            "login": "ptarjan",
            "id": 40143,
            "node_id": "MDQ6VXNlcjQwMTQz",
            "avatar_url": "https://avatars0.githubusercontent.com/u/40143?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ptarjan",
            "html_url": "https://github.com/ptarjan",
            "followers_url": "https://api.github.com/users/ptarjan/followers",
            "following_url": "https://api.github.com/users/ptarjan/following{/other_user}",
            "gists_url": "https://api.github.com/users/ptarjan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ptarjan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ptarjan/subscriptions",
            "organizations_url": "https://api.github.com/users/ptarjan/orgs",
            "repos_url": "https://api.github.com/users/ptarjan/repos",
            "events_url": "https://api.github.com/users/ptarjan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ptarjan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "kill `@feature_mutex` just for sanity?\n",
        "created_at": "2016-08-24T00:56:00Z",
        "updated_at": "2016-08-24T17:49:58Z",
        "html_url": "https://github.com/burke/zeus/pull/584#discussion_r75979177",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/584",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/75979177"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/584#discussion_r75979177"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/584"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/76104858",
        "pull_request_review_id": null,
        "id": 76104858,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc2MTA0ODU4",
        "diff_hunk": "@@ -192,28 +194,18 @@ def report_error_to_master(local, error)\n       local.write str\n     end\n \n-    def run_action(socket, identifier, feature_pipe_w)\n+    def run_action(socket, identifier)\n       # Now we run the action and report its success/fail status to the master.\n-      features, err = Zeus::LoadTracking.features_loaded_by do\n-        plan.after_fork unless identifier == :boot\n-        plan.send(identifier)\n-      end\n-\n-      if err\n-        # If we received an error, report features to the master syncronously.\n-        # We need to do this before reporting the error to the master\n-        # otherwise it will kill us before we can report features.\n-        begin\n-          notify_features(feature_pipe_w, features)\n-          feature_pipe_w.close\n-        ensure\n-          report_error_to_master(socket, err)\n+      begin\n+        Zeus::LoadTracking.track_features_loaded_by do\n+          plan.after_fork unless identifier == :boot\n+          plan.send(identifier)\n         end\n-      else\n-        # If we booted successfully, report features in a new thread\n-        # so we can immediately begin listening for commands.\n+\n         socket.write \"R:OK\\0\"\n-        Thread.new { notify_features(feature_pipe_w, features) }\n+      rescue => err\n+        report_error_to_master(socket, err)\n+        raise",
        "path": "rubygem/lib/zeus.rb",
        "position": 75,
        "original_position": 75,
        "commit_id": "120716c518a26400f80b6dc68a2ba18700d3d090",
        "original_commit_id": "deee45e63e60b131c9f48aef46294122ba06f2d3",
        "user": {
            "login": "metcalf",
            "id": 16716,
            "node_id": "MDQ6VXNlcjE2NzE2",
            "avatar_url": "https://avatars1.githubusercontent.com/u/16716?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/metcalf",
            "html_url": "https://github.com/metcalf",
            "followers_url": "https://api.github.com/users/metcalf/followers",
            "following_url": "https://api.github.com/users/metcalf/following{/other_user}",
            "gists_url": "https://api.github.com/users/metcalf/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/metcalf/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/metcalf/subscriptions",
            "organizations_url": "https://api.github.com/users/metcalf/orgs",
            "repos_url": "https://api.github.com/users/metcalf/repos",
            "events_url": "https://api.github.com/users/metcalf/events{/privacy}",
            "received_events_url": "https://api.github.com/users/metcalf/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It shouldn't. Zeus doesn't connect any log output for child nodes by default. We do log output from Hera but I think we redirect these errors in a way that'll avoid the double-spew. I'm planning to cut a new release today, I'll install it for myself first and test the error behavior a bit more.\n",
        "created_at": "2016-08-24T17:46:34Z",
        "updated_at": "2016-08-24T17:49:58Z",
        "html_url": "https://github.com/burke/zeus/pull/584#discussion_r76104858",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/584",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/76104858"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/584#discussion_r76104858"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/584"
            }
        },
        "in_reply_to_id": 75788564
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/78438203",
        "pull_request_review_id": null,
        "id": 78438203,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc4NDM4MjAz",
        "diff_hunk": "@@ -69,10 +69,8 @@ to boot a rails app under the control of the master process.\n \n ### Building\n \n-Just run `make`, basically. The `Makefile` should be an easy read. `make\n-darwin` and related tasks will just build the go binaries to `./build`, while\n-`make gem` will build the rubygem from the files currently in `./build`. `make\n-all` does the whole shebang, but takes a few seconds to complete.\n+Just run `make`, which would build the go binaries to `./build`",
        "path": "contributing.md",
        "position": 23,
        "original_position": 23,
        "commit_id": "3e62ba62e774fc4a10645a7a6141a506a37afed7",
        "original_commit_id": "3e62ba62e774fc4a10645a7a6141a506a37afed7",
        "user": {
            "login": "metcalf",
            "id": 16716,
            "node_id": "MDQ6VXNlcjE2NzE2",
            "avatar_url": "https://avatars1.githubusercontent.com/u/16716?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/metcalf",
            "html_url": "https://github.com/metcalf",
            "followers_url": "https://api.github.com/users/metcalf/followers",
            "following_url": "https://api.github.com/users/metcalf/following{/other_user}",
            "gists_url": "https://api.github.com/users/metcalf/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/metcalf/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/metcalf/subscriptions",
            "organizations_url": "https://api.github.com/users/metcalf/orgs",
            "repos_url": "https://api.github.com/users/metcalf/repos",
            "events_url": "https://api.github.com/users/metcalf/events{/privacy}",
            "received_events_url": "https://api.github.com/users/metcalf/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This no longer outputs anything to `build`, it goes straight to `rubygem/build`.\n",
        "created_at": "2016-09-12T19:28:09Z",
        "updated_at": "2016-09-12T19:28:09Z",
        "html_url": "https://github.com/burke/zeus/pull/592#discussion_r78438203",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/592",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/78438203"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/592#discussion_r78438203"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/592"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/94161335",
        "pull_request_review_id": 14692390,
        "id": 94161335,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk0MTYxMzM1",
        "diff_hunk": "@@ -244,7 +244,7 @@ func TestZeusBoots(t *testing.T) {\n \n \tcexit := make(chan int, 1)\n \tgo func() {\n-\t\tcexit <- zeusclient.Run([]string{\"cmd\"}, hangingReader{readCloser}, cmdWriter)\n+\t\tcexit <- zeusclient.Run([]string{\"cmd\"}, hangingReader{readCloser}, cmdWriter, cmdWriter)",
        "path": "go/zeusmaster/zeusmaster_test.go",
        "position": null,
        "original_position": 5,
        "commit_id": "0916d0f4746995913a91c50979ab0bace8e8137f",
        "original_commit_id": "dde75c52b8c54a3f92108596406ed026e23c048a",
        "user": {
            "login": "sideshowcoder",
            "id": 108488,
            "node_id": "MDQ6VXNlcjEwODQ4OA==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/108488?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sideshowcoder",
            "html_url": "https://github.com/sideshowcoder",
            "followers_url": "https://api.github.com/users/sideshowcoder/followers",
            "following_url": "https://api.github.com/users/sideshowcoder/following{/other_user}",
            "gists_url": "https://api.github.com/users/sideshowcoder/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sideshowcoder/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sideshowcoder/subscriptions",
            "organizations_url": "https://api.github.com/users/sideshowcoder/orgs",
            "repos_url": "https://api.github.com/users/sideshowcoder/repos",
            "events_url": "https://api.github.com/users/sideshowcoder/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sideshowcoder/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "maybe create 2 seperate writers here... and actually test that it works?",
        "created_at": "2016-12-29T17:48:15Z",
        "updated_at": "2017-01-13T11:02:20Z",
        "html_url": "https://github.com/burke/zeus/pull/615#discussion_r94161335",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/615",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/94161335"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/615#discussion_r94161335"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/615"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/94161379",
        "pull_request_review_id": 14692390,
        "id": 94161379,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk0MTYxMzc5",
        "diff_hunk": "@@ -144,12 +144,13 @@ def command(identifier, sock)\n \n         plan.after_fork\n         client_terminal = local.recv_io\n+        client_terminal_stderr = local.recv_io",
        "path": "rubygem/lib/zeus.rb",
        "position": null,
        "original_position": 4,
        "commit_id": "0916d0f4746995913a91c50979ab0bace8e8137f",
        "original_commit_id": "dde75c52b8c54a3f92108596406ed026e23c048a",
        "user": {
            "login": "sideshowcoder",
            "id": 108488,
            "node_id": "MDQ6VXNlcjEwODQ4OA==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/108488?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sideshowcoder",
            "html_url": "https://github.com/sideshowcoder",
            "followers_url": "https://api.github.com/users/sideshowcoder/followers",
            "following_url": "https://api.github.com/users/sideshowcoder/following{/other_user}",
            "gists_url": "https://api.github.com/users/sideshowcoder/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sideshowcoder/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sideshowcoder/subscriptions",
            "organizations_url": "https://api.github.com/users/sideshowcoder/orgs",
            "repos_url": "https://api.github.com/users/sideshowcoder/repos",
            "events_url": "https://api.github.com/users/sideshowcoder/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sideshowcoder/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "client_terminal should be client_stdout... and than we have sane naming.",
        "created_at": "2016-12-29T17:48:49Z",
        "updated_at": "2017-01-13T11:02:20Z",
        "html_url": "https://github.com/burke/zeus/pull/615#discussion_r94161379",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/615",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/94161379"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/615#discussion_r94161379"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/615"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/94161471",
        "pull_request_review_id": 14692390,
        "id": 94161471,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk0MTYxNDcx",
        "diff_hunk": "@@ -152,6 +174,21 @@ func Run(args []string, input io.Reader, output *os.File) int {\n \t\t}\n \t}()\n \n+\teofStderr := make(chan bool)\n+\tgo func() {\n+\t\tfor {\n+\t\t\tbuf := make([]byte, 1024)\n+\t\t\tn, err := masterStderr.Read(buf)\n+\n+\t\t\tif err == nil || (err == io.EOF && n > 0) {\n+\t\t\t\tstderr.Write(buf[:n])\n+\t\t\t} else {\n+\t\t\t\teofStderr <- true\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t}\n+\t}()",
        "path": "go/zeusclient/zeusclient.go",
        "position": null,
        "original_position": 100,
        "commit_id": "0916d0f4746995913a91c50979ab0bace8e8137f",
        "original_commit_id": "dde75c52b8c54a3f92108596406ed026e23c048a",
        "user": {
            "login": "sideshowcoder",
            "id": 108488,
            "node_id": "MDQ6VXNlcjEwODQ4OA==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/108488?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sideshowcoder",
            "html_url": "https://github.com/sideshowcoder",
            "followers_url": "https://api.github.com/users/sideshowcoder/followers",
            "following_url": "https://api.github.com/users/sideshowcoder/following{/other_user}",
            "gists_url": "https://api.github.com/users/sideshowcoder/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sideshowcoder/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sideshowcoder/subscriptions",
            "organizations_url": "https://api.github.com/users/sideshowcoder/orgs",
            "repos_url": "https://api.github.com/users/sideshowcoder/repos",
            "events_url": "https://api.github.com/users/sideshowcoder/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sideshowcoder/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "There is a lot of duplication here, should create seperate functions of doing setup and read and then just pass in the different streams...",
        "created_at": "2016-12-29T17:49:54Z",
        "updated_at": "2017-01-13T11:02:20Z",
        "html_url": "https://github.com/burke/zeus/pull/615#discussion_r94161471",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/615",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/94161471"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/615#discussion_r94161471"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/615"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/94161540",
        "pull_request_review_id": 14692390,
        "id": 94161540,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk0MTYxNTQw",
        "diff_hunk": "@@ -26,41 +26,59 @@ const (\n // man signal | grep 'terminate process' | awk '{print $2}' | xargs -I '{}' echo -n \"syscall.{}, \"\n var terminatingSignals = []os.Signal{syscall.SIGHUP, syscall.SIGINT, syscall.SIGKILL, syscall.SIGPIPE, syscall.SIGALRM, syscall.SIGTERM, syscall.SIGXCPU, syscall.SIGXFSZ, syscall.SIGVTALRM, syscall.SIGPROF, syscall.SIGUSR1, syscall.SIGUSR2}\n \n-func Run(args []string, input io.Reader, output *os.File) int {\n+func Run(args []string, input io.Reader, output *os.File, stderr *os.File) int {\n \tif os.Getenv(\"RAILS_ENV\") != \"\" {\n \t\tprintln(\"Warning: Specifying a Rails environment via RAILS_ENV has no effect for commands run with zeus.\")\n \t\tprintln(\"As a safety precaution to protect you from nuking your development database,\")\n \t\tprintln(\"Zeus will now cowardly refuse to proceed. Please unset RAILS_ENV and try again.\")\n \t\treturn 1\n \t}\n \n+\t// if stdout is a terminal, assume that stderr is a terminal as well",
        "path": "go/zeusclient/zeusclient.go",
        "position": null,
        "original_position": 13,
        "commit_id": "0916d0f4746995913a91c50979ab0bace8e8137f",
        "original_commit_id": "dde75c52b8c54a3f92108596406ed026e23c048a",
        "user": {
            "login": "sideshowcoder",
            "id": 108488,
            "node_id": "MDQ6VXNlcjEwODQ4OA==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/108488?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sideshowcoder",
            "html_url": "https://github.com/sideshowcoder",
            "followers_url": "https://api.github.com/users/sideshowcoder/followers",
            "following_url": "https://api.github.com/users/sideshowcoder/following{/other_user}",
            "gists_url": "https://api.github.com/users/sideshowcoder/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sideshowcoder/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sideshowcoder/subscriptions",
            "organizations_url": "https://api.github.com/users/sideshowcoder/orgs",
            "repos_url": "https://api.github.com/users/sideshowcoder/repos",
            "events_url": "https://api.github.com/users/sideshowcoder/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sideshowcoder/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Not sure if this is a save assumption, probably better to check either and do the right thing.",
        "created_at": "2016-12-29T17:50:30Z",
        "updated_at": "2017-01-13T11:02:20Z",
        "html_url": "https://github.com/burke/zeus/pull/615#discussion_r94161540",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/615",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/94161540"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/615#discussion_r94161540"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/615"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/94191170",
        "pull_request_review_id": 14722123,
        "id": 94191170,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk0MTkxMTcw",
        "diff_hunk": "@@ -178,6 +246,7 @@ func Run(args []string, input io.Reader, output *os.File) int {\n \t}()\n \n \t<-eof\n+\t<-eofStderr",
        "path": "go/zeusclient/zeusclient.go",
        "position": null,
        "original_position": 142,
        "commit_id": "0916d0f4746995913a91c50979ab0bace8e8137f",
        "original_commit_id": "8b5f4664d65c072496a0c95e7354cd8297eecd8a",
        "user": {
            "login": "sideshowcoder",
            "id": 108488,
            "node_id": "MDQ6VXNlcjEwODQ4OA==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/108488?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sideshowcoder",
            "html_url": "https://github.com/sideshowcoder",
            "followers_url": "https://api.github.com/users/sideshowcoder/followers",
            "following_url": "https://api.github.com/users/sideshowcoder/following{/other_user}",
            "gists_url": "https://api.github.com/users/sideshowcoder/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sideshowcoder/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sideshowcoder/subscriptions",
            "organizations_url": "https://api.github.com/users/sideshowcoder/orgs",
            "repos_url": "https://api.github.com/users/sideshowcoder/repos",
            "events_url": "https://api.github.com/users/sideshowcoder/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sideshowcoder/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Should use a Waitgroup https://golang.org/pkg/sync/#WaitGroup here\r\n",
        "created_at": "2016-12-29T23:23:15Z",
        "updated_at": "2017-01-13T11:02:20Z",
        "html_url": "https://github.com/burke/zeus/pull/615#discussion_r94191170",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/615",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/94191170"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/615#discussion_r94191170"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/615"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/94197217",
        "pull_request_review_id": 14728271,
        "id": 94197217,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk0MTk3MjE3",
        "diff_hunk": "@@ -244,7 +244,7 @@ func TestZeusBoots(t *testing.T) {\n \n \tcexit := make(chan int, 1)\n \tgo func() {\n-\t\tcexit <- zeusclient.Run([]string{\"cmd\"}, hangingReader{readCloser}, cmdWriter)\n+\t\tcexit <- zeusclient.Run([]string{\"cmd\"}, hangingReader{readCloser}, cmdWriter, cmdWriter)",
        "path": "go/zeusmaster/zeusmaster_test.go",
        "position": null,
        "original_position": 5,
        "commit_id": "0916d0f4746995913a91c50979ab0bace8e8137f",
        "original_commit_id": "dde75c52b8c54a3f92108596406ed026e23c048a",
        "user": {
            "login": "sideshowcoder",
            "id": 108488,
            "node_id": "MDQ6VXNlcjEwODQ4OA==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/108488?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sideshowcoder",
            "html_url": "https://github.com/sideshowcoder",
            "followers_url": "https://api.github.com/users/sideshowcoder/followers",
            "following_url": "https://api.github.com/users/sideshowcoder/following{/other_user}",
            "gists_url": "https://api.github.com/users/sideshowcoder/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sideshowcoder/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sideshowcoder/subscriptions",
            "organizations_url": "https://api.github.com/users/sideshowcoder/orgs",
            "repos_url": "https://api.github.com/users/sideshowcoder/repos",
            "events_url": "https://api.github.com/users/sideshowcoder/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sideshowcoder/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Done",
        "created_at": "2016-12-30T01:48:43Z",
        "updated_at": "2017-01-13T11:02:20Z",
        "html_url": "https://github.com/burke/zeus/pull/615#discussion_r94197217",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/615",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/94197217"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/615#discussion_r94197217"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/615"
            }
        },
        "in_reply_to_id": 94161335
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/94197241",
        "pull_request_review_id": 14728296,
        "id": 94197241,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk0MTk3MjQx",
        "diff_hunk": "@@ -26,41 +26,59 @@ const (\n // man signal | grep 'terminate process' | awk '{print $2}' | xargs -I '{}' echo -n \"syscall.{}, \"\n var terminatingSignals = []os.Signal{syscall.SIGHUP, syscall.SIGINT, syscall.SIGKILL, syscall.SIGPIPE, syscall.SIGALRM, syscall.SIGTERM, syscall.SIGXCPU, syscall.SIGXFSZ, syscall.SIGVTALRM, syscall.SIGPROF, syscall.SIGUSR1, syscall.SIGUSR2}\n \n-func Run(args []string, input io.Reader, output *os.File) int {\n+func Run(args []string, input io.Reader, output *os.File, stderr *os.File) int {\n \tif os.Getenv(\"RAILS_ENV\") != \"\" {\n \t\tprintln(\"Warning: Specifying a Rails environment via RAILS_ENV has no effect for commands run with zeus.\")\n \t\tprintln(\"As a safety precaution to protect you from nuking your development database,\")\n \t\tprintln(\"Zeus will now cowardly refuse to proceed. Please unset RAILS_ENV and try again.\")\n \t\treturn 1\n \t}\n \n+\t// if stdout is a terminal, assume that stderr is a terminal as well",
        "path": "go/zeusclient/zeusclient.go",
        "position": null,
        "original_position": 13,
        "commit_id": "0916d0f4746995913a91c50979ab0bace8e8137f",
        "original_commit_id": "dde75c52b8c54a3f92108596406ed026e23c048a",
        "user": {
            "login": "sideshowcoder",
            "id": 108488,
            "node_id": "MDQ6VXNlcjEwODQ4OA==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/108488?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sideshowcoder",
            "html_url": "https://github.com/sideshowcoder",
            "followers_url": "https://api.github.com/users/sideshowcoder/followers",
            "following_url": "https://api.github.com/users/sideshowcoder/following{/other_user}",
            "gists_url": "https://api.github.com/users/sideshowcoder/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sideshowcoder/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sideshowcoder/subscriptions",
            "organizations_url": "https://api.github.com/users/sideshowcoder/orgs",
            "repos_url": "https://api.github.com/users/sideshowcoder/repos",
            "events_url": "https://api.github.com/users/sideshowcoder/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sideshowcoder/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Done",
        "created_at": "2016-12-30T01:49:00Z",
        "updated_at": "2017-01-13T11:02:20Z",
        "html_url": "https://github.com/burke/zeus/pull/615#discussion_r94197241",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/615",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/94197241"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/615#discussion_r94197241"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/615"
            }
        },
        "in_reply_to_id": 94161540
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/94031495",
        "pull_request_review_id": 14561461,
        "id": 94031495,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk0MDMxNDk1",
        "diff_hunk": "@@ -38,6 +38,28 @@ A: No. You can, but running `bundle exec zeus` instead of `zeus` adds precious s\n It is common to see tests running twice when starting out with Zeus. If you see your tests/specs running twice, you should try disabling `require 'rspec/autotest'` and `require 'rspec/autorun'` (for RSpec), or `require 'minitest/autorun'` (for Minitest). (see [#134](https://github.com/burke/zeus/issues/134) for more information).\n \n \n+## Set up \n+\n+In your Rails app's directory initialize zeus:\n+\n+    zeus init\n+\n+which will create two files that should be added to your `.gitignore` (or globally in `~/.gitignore`)\n+\n+    custom_plan.rb\n+    zeus.json\n+\n+Force the test environment: In `spec/spec_helper.rb`, change:",
        "path": "README.md",
        "position": null,
        "original_position": 15,
        "commit_id": "266282d4686ca611ef73279ef42da8ceb4c95a9e",
        "original_commit_id": "3f79bfd8c00517a9253b8bbbb09df6c5351ea188",
        "user": {
            "login": "sideshowcoder",
            "id": 108488,
            "node_id": "MDQ6VXNlcjEwODQ4OA==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/108488?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sideshowcoder",
            "html_url": "https://github.com/sideshowcoder",
            "followers_url": "https://api.github.com/users/sideshowcoder/followers",
            "following_url": "https://api.github.com/users/sideshowcoder/following{/other_user}",
            "gists_url": "https://api.github.com/users/sideshowcoder/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sideshowcoder/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sideshowcoder/subscriptions",
            "organizations_url": "https://api.github.com/users/sideshowcoder/orgs",
            "repos_url": "https://api.github.com/users/sideshowcoder/repos",
            "events_url": "https://api.github.com/users/sideshowcoder/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sideshowcoder/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "since rspec is not the default in rails maybe mentioning `test/test_helper.rb` would be important here as well? ",
        "created_at": "2016-12-28T13:16:42Z",
        "updated_at": "2017-01-24T20:02:42Z",
        "html_url": "https://github.com/burke/zeus/pull/603#discussion_r94031495",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/603",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/94031495"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/603#discussion_r94031495"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/603"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/94031789",
        "pull_request_review_id": 14561461,
        "id": 94031789,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk0MDMxNzg5",
        "diff_hunk": "@@ -38,6 +38,28 @@ A: No. You can, but running `bundle exec zeus` instead of `zeus` adds precious s\n It is common to see tests running twice when starting out with Zeus. If you see your tests/specs running twice, you should try disabling `require 'rspec/autotest'` and `require 'rspec/autorun'` (for RSpec), or `require 'minitest/autorun'` (for Minitest). (see [#134](https://github.com/burke/zeus/issues/134) for more information).\n \n \n+## Set up \n+\n+In your Rails app's directory initialize zeus:\n+\n+    zeus init\n+\n+which will create two files that should be added to your `.gitignore` (or globally in `~/.gitignore`)\n+\n+    custom_plan.rb\n+    zeus.json\n+",
        "path": "README.md",
        "position": null,
        "original_position": 14,
        "commit_id": "266282d4686ca611ef73279ef42da8ceb4c95a9e",
        "original_commit_id": "3f79bfd8c00517a9253b8bbbb09df6c5351ea188",
        "user": {
            "login": "sideshowcoder",
            "id": 108488,
            "node_id": "MDQ6VXNlcjEwODQ4OA==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/108488?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sideshowcoder",
            "html_url": "https://github.com/sideshowcoder",
            "followers_url": "https://api.github.com/users/sideshowcoder/followers",
            "following_url": "https://api.github.com/users/sideshowcoder/following{/other_user}",
            "gists_url": "https://api.github.com/users/sideshowcoder/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sideshowcoder/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sideshowcoder/subscriptions",
            "organizations_url": "https://api.github.com/users/sideshowcoder/orgs",
            "repos_url": "https://api.github.com/users/sideshowcoder/repos",
            "events_url": "https://api.github.com/users/sideshowcoder/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sideshowcoder/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I don't quite understand the recommendation to `gitignore` those files? If the project uses zeus it probably makes sense to share those, if it is only one developer trying it out probably ignore them. Am I missing something? (I have so far never ignored them thats why I'm asking :) )",
        "created_at": "2016-12-28T13:19:50Z",
        "updated_at": "2017-01-24T20:02:42Z",
        "html_url": "https://github.com/burke/zeus/pull/603#discussion_r94031789",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/603",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/94031789"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/603#discussion_r94031789"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/603"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/94032012",
        "pull_request_review_id": 14561461,
        "id": 94032012,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk0MDMyMDEy",
        "diff_hunk": "@@ -38,6 +38,28 @@ A: No. You can, but running `bundle exec zeus` instead of `zeus` adds precious s\n It is common to see tests running twice when starting out with Zeus. If you see your tests/specs running twice, you should try disabling `require 'rspec/autotest'` and `require 'rspec/autorun'` (for RSpec), or `require 'minitest/autorun'` (for Minitest). (see [#134](https://github.com/burke/zeus/issues/134) for more information).\n \n \n+## Set up ",
        "path": "README.md",
        "position": null,
        "original_position": 4,
        "commit_id": "266282d4686ca611ef73279ef42da8ceb4c95a9e",
        "original_commit_id": "3f79bfd8c00517a9253b8bbbb09df6c5351ea188",
        "user": {
            "login": "sideshowcoder",
            "id": 108488,
            "node_id": "MDQ6VXNlcjEwODQ4OA==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/108488?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sideshowcoder",
            "html_url": "https://github.com/sideshowcoder",
            "followers_url": "https://api.github.com/users/sideshowcoder/followers",
            "following_url": "https://api.github.com/users/sideshowcoder/following{/other_user}",
            "gists_url": "https://api.github.com/users/sideshowcoder/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sideshowcoder/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sideshowcoder/subscriptions",
            "organizations_url": "https://api.github.com/users/sideshowcoder/orgs",
            "repos_url": "https://api.github.com/users/sideshowcoder/repos",
            "events_url": "https://api.github.com/users/sideshowcoder/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sideshowcoder/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Maybe worth pointing out we are setting up a railsapp with zeus here? After all it is possible to use zeus with \"non\" rails stuff (https://github.com/sideshowcoder/zeus-without-rails)",
        "created_at": "2016-12-28T13:22:17Z",
        "updated_at": "2017-01-24T20:02:42Z",
        "html_url": "https://github.com/burke/zeus/pull/603#discussion_r94032012",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/603",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/94032012"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/603#discussion_r94032012"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/603"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/97634028",
        "pull_request_review_id": 18249986,
        "id": 97634028,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk3NjM0MDI4",
        "diff_hunk": "@@ -38,6 +38,28 @@ A: No. You can, but running `bundle exec zeus` instead of `zeus` adds precious s\n It is common to see tests running twice when starting out with Zeus. If you see your tests/specs running twice, you should try disabling `require 'rspec/autotest'` and `require 'rspec/autorun'` (for RSpec), or `require 'minitest/autorun'` (for Minitest). (see [#134](https://github.com/burke/zeus/issues/134) for more information).\n \n \n+## Set up ",
        "path": "README.md",
        "position": null,
        "original_position": 4,
        "commit_id": "266282d4686ca611ef73279ef42da8ceb4c95a9e",
        "original_commit_id": "3f79bfd8c00517a9253b8bbbb09df6c5351ea188",
        "user": {
            "login": "brunzino",
            "id": 671480,
            "node_id": "MDQ6VXNlcjY3MTQ4MA==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/671480?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brunzino",
            "html_url": "https://github.com/brunzino",
            "followers_url": "https://api.github.com/users/brunzino/followers",
            "following_url": "https://api.github.com/users/brunzino/following{/other_user}",
            "gists_url": "https://api.github.com/users/brunzino/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brunzino/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brunzino/subscriptions",
            "organizations_url": "https://api.github.com/users/brunzino/orgs",
            "repos_url": "https://api.github.com/users/brunzino/repos",
            "events_url": "https://api.github.com/users/brunzino/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brunzino/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Good point. I didn't realize this was a Rails specific function within a non-rails specific tool! ",
        "created_at": "2017-01-24T19:43:52Z",
        "updated_at": "2017-01-24T20:02:42Z",
        "html_url": "https://github.com/burke/zeus/pull/603#discussion_r97634028",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/603",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/97634028"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/603#discussion_r97634028"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/603"
            }
        },
        "in_reply_to_id": 94032012
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/97637037",
        "pull_request_review_id": 18253016,
        "id": 97637037,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk3NjM3MDM3",
        "diff_hunk": "@@ -38,6 +38,28 @@ A: No. You can, but running `bundle exec zeus` instead of `zeus` adds precious s\n It is common to see tests running twice when starting out with Zeus. If you see your tests/specs running twice, you should try disabling `require 'rspec/autotest'` and `require 'rspec/autorun'` (for RSpec), or `require 'minitest/autorun'` (for Minitest). (see [#134](https://github.com/burke/zeus/issues/134) for more information).\n \n \n+## Set up \n+\n+In your Rails app's directory initialize zeus:\n+\n+    zeus init\n+\n+which will create two files that should be added to your `.gitignore` (or globally in `~/.gitignore`)\n+\n+    custom_plan.rb\n+    zeus.json\n+",
        "path": "README.md",
        "position": null,
        "original_position": 14,
        "commit_id": "266282d4686ca611ef73279ef42da8ceb4c95a9e",
        "original_commit_id": "3f79bfd8c00517a9253b8bbbb09df6c5351ea188",
        "user": {
            "login": "brunzino",
            "id": 671480,
            "node_id": "MDQ6VXNlcjY3MTQ4MA==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/671480?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brunzino",
            "html_url": "https://github.com/brunzino",
            "followers_url": "https://api.github.com/users/brunzino/followers",
            "following_url": "https://api.github.com/users/brunzino/following{/other_user}",
            "gists_url": "https://api.github.com/users/brunzino/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brunzino/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brunzino/subscriptions",
            "organizations_url": "https://api.github.com/users/brunzino/orgs",
            "repos_url": "https://api.github.com/users/brunzino/repos",
            "events_url": "https://api.github.com/users/brunzino/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brunzino/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This advice came from a hesitancy to \"force\" a configuration of zeus (e.g. local environment)  since it's more of a local tool than app tool. I'm less committed to it after these comments :) That advice will be removed.  ",
        "created_at": "2017-01-24T19:56:47Z",
        "updated_at": "2017-01-24T20:02:42Z",
        "html_url": "https://github.com/burke/zeus/pull/603#discussion_r97637037",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/603",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/97637037"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/603#discussion_r97637037"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/603"
            }
        },
        "in_reply_to_id": 94031789
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/97637890",
        "pull_request_review_id": 18253853,
        "id": 97637890,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk3NjM3ODkw",
        "diff_hunk": "@@ -38,6 +38,28 @@ A: No. You can, but running `bundle exec zeus` instead of `zeus` adds precious s\n It is common to see tests running twice when starting out with Zeus. If you see your tests/specs running twice, you should try disabling `require 'rspec/autotest'` and `require 'rspec/autorun'` (for RSpec), or `require 'minitest/autorun'` (for Minitest). (see [#134](https://github.com/burke/zeus/issues/134) for more information).\n \n \n+## Set up \n+\n+In your Rails app's directory initialize zeus:\n+\n+    zeus init\n+\n+which will create two files that should be added to your `.gitignore` (or globally in `~/.gitignore`)\n+\n+    custom_plan.rb\n+    zeus.json\n+\n+Force the test environment: In `spec/spec_helper.rb`, change:",
        "path": "README.md",
        "position": null,
        "original_position": 15,
        "commit_id": "266282d4686ca611ef73279ef42da8ceb4c95a9e",
        "original_commit_id": "3f79bfd8c00517a9253b8bbbb09df6c5351ea188",
        "user": {
            "login": "brunzino",
            "id": 671480,
            "node_id": "MDQ6VXNlcjY3MTQ4MA==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/671480?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brunzino",
            "html_url": "https://github.com/brunzino",
            "followers_url": "https://api.github.com/users/brunzino/followers",
            "following_url": "https://api.github.com/users/brunzino/following{/other_user}",
            "gists_url": "https://api.github.com/users/brunzino/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brunzino/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brunzino/subscriptions",
            "organizations_url": "https://api.github.com/users/brunzino/orgs",
            "repos_url": "https://api.github.com/users/brunzino/repos",
            "events_url": "https://api.github.com/users/brunzino/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brunzino/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Good point. In fact `test/test_helper.rb` should be the default, with `spec/spec_helper.rb` included as an addendum. So changed. ",
        "created_at": "2017-01-24T20:00:26Z",
        "updated_at": "2017-01-24T20:02:42Z",
        "html_url": "https://github.com/burke/zeus/pull/603#discussion_r97637890",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/603",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/97637890"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/603#discussion_r97637890"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/603"
            }
        },
        "in_reply_to_id": 94031495
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/157368247",
        "pull_request_review_id": 84000567,
        "id": 157368247,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzM2ODI0Nw==",
        "diff_hunk": "@@ -1,7 +1,7 @@\n # Zeus\n \n [![Join the chat at https://gitter.im/zeus-application-preloader/Lobby](https://badges.gitter.im/zeus-application-preloader/Lobby.svg)](https://gitter.im/zeus-application-preloader/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n-[![Build Status](https://travis-ci.org/burke/zeus.svg?branch=master)](https://travis-ci.org/burke/zeus)\n+[![Build Status](https://travis-ci.org/burke/zeus.svg?branch=coordinator)](https://travis-ci.org/burke/zeus)",
        "path": "README.md",
        "position": null,
        "original_position": 5,
        "commit_id": "0b4a8001e6f6f3b135f7e9962400b7a75707da34",
        "original_commit_id": "7aeb077a2a5cb494070fd5a99fca0f6b795a7138",
        "user": {
            "login": "michaelglass",
            "id": 60136,
            "node_id": "MDQ6VXNlcjYwMTM2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/60136?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/michaelglass",
            "html_url": "https://github.com/michaelglass",
            "followers_url": "https://api.github.com/users/michaelglass/followers",
            "following_url": "https://api.github.com/users/michaelglass/following{/other_user}",
            "gists_url": "https://api.github.com/users/michaelglass/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/michaelglass/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/michaelglass/subscriptions",
            "organizations_url": "https://api.github.com/users/michaelglass/orgs",
            "repos_url": "https://api.github.com/users/michaelglass/repos",
            "events_url": "https://api.github.com/users/michaelglass/events{/privacy}",
            "received_events_url": "https://api.github.com/users/michaelglass/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\ud83d\udcad is this really what you want?",
        "created_at": "2017-12-17T13:37:57Z",
        "updated_at": "2017-12-18T21:14:58Z",
        "html_url": "https://github.com/burke/zeus/pull/650#discussion_r157368247",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/650",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/157368247"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/650#discussion_r157368247"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/650"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/157368336",
        "pull_request_review_id": 84000653,
        "id": 157368336,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzM2ODMzNg==",
        "diff_hunk": "@@ -27,19 +27,20 @@ class << self\n     # Yup.\n     def setup_dummy_tty!\n       return if self.dummy_tty\n-      master, self.dummy_tty = PTY.send(:open)\n+      coordinator, self.dummy_tty = PTY.send(:open)\n       Thread.new {\n-        loop { master.read(1024) }\n+        loop { coordinator.read(1024) }\n       }\n       STDIN.reopen(dummy_tty)\n       STDOUT.reopen(dummy_tty)\n     end\n \n-    def setup_master_socket!\n-      return master_socket if master_socket\n+    def setup_coordinator_socket!\n+      return coordinator_socket if coordinator_socket\n \n-      fd = ENV['ZEUS_MASTER_FD'].to_i\n-      self.master_socket = UNIXSocket.for_fd(fd)",
        "path": "rubygem/lib/zeus.rb",
        "position": 29,
        "original_position": 29,
        "commit_id": "0b4a8001e6f6f3b135f7e9962400b7a75707da34",
        "original_commit_id": "7aeb077a2a5cb494070fd5a99fca0f6b795a7138",
        "user": {
            "login": "michaelglass",
            "id": 60136,
            "node_id": "MDQ6VXNlcjYwMTM2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/60136?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/michaelglass",
            "html_url": "https://github.com/michaelglass",
            "followers_url": "https://api.github.com/users/michaelglass/followers",
            "following_url": "https://api.github.com/users/michaelglass/following{/other_user}",
            "gists_url": "https://api.github.com/users/michaelglass/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/michaelglass/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/michaelglass/subscriptions",
            "organizations_url": "https://api.github.com/users/michaelglass/orgs",
            "repos_url": "https://api.github.com/users/michaelglass/repos",
            "events_url": "https://api.github.com/users/michaelglass/events{/privacy}",
            "received_events_url": "https://api.github.com/users/michaelglass/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "typo on this line (closing paren shouldn't be in the right square bracket)",
        "created_at": "2017-12-17T13:41:50Z",
        "updated_at": "2017-12-18T21:14:58Z",
        "html_url": "https://github.com/burke/zeus/pull/650#discussion_r157368336",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/650",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/157368336"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/650#discussion_r157368336"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/650"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/157602599",
        "pull_request_review_id": 84272256,
        "id": 157602599,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzYwMjU5OQ==",
        "diff_hunk": "@@ -27,19 +27,20 @@ class << self\n     # Yup.\n     def setup_dummy_tty!\n       return if self.dummy_tty\n-      master, self.dummy_tty = PTY.send(:open)\n+      coordinator, self.dummy_tty = PTY.send(:open)\n       Thread.new {\n-        loop { master.read(1024) }\n+        loop { coordinator.read(1024) }\n       }\n       STDIN.reopen(dummy_tty)\n       STDOUT.reopen(dummy_tty)\n     end\n \n-    def setup_master_socket!\n-      return master_socket if master_socket\n+    def setup_coordinator_socket!\n+      return coordinator_socket if coordinator_socket\n \n-      fd = ENV['ZEUS_MASTER_FD'].to_i\n-      self.master_socket = UNIXSocket.for_fd(fd)",
        "path": "rubygem/lib/zeus.rb",
        "position": 29,
        "original_position": 29,
        "commit_id": "0b4a8001e6f6f3b135f7e9962400b7a75707da34",
        "original_commit_id": "7aeb077a2a5cb494070fd5a99fca0f6b795a7138",
        "user": {
            "login": "mhat",
            "id": 973,
            "node_id": "MDQ6VXNlcjk3Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/973?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mhat",
            "html_url": "https://github.com/mhat",
            "followers_url": "https://api.github.com/users/mhat/followers",
            "following_url": "https://api.github.com/users/mhat/following{/other_user}",
            "gists_url": "https://api.github.com/users/mhat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mhat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mhat/subscriptions",
            "organizations_url": "https://api.github.com/users/mhat/orgs",
            "repos_url": "https://api.github.com/users/mhat/repos",
            "events_url": "https://api.github.com/users/mhat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mhat/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Meh, I had fixed this locally to get tests passing but failed to commit. My bad! ",
        "created_at": "2017-12-18T21:15:50Z",
        "updated_at": "2017-12-18T21:15:50Z",
        "html_url": "https://github.com/burke/zeus/pull/650#discussion_r157602599",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/650",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/157602599"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/650#discussion_r157602599"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/650"
            }
        },
        "in_reply_to_id": 157368336
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/158951476",
        "pull_request_review_id": 85829134,
        "id": 158951476,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODk1MTQ3Ng==",
        "diff_hunk": "@@ -25,7 +25,7 @@ module Zeus\n   #\n   #[![m ci](https://secure.travis-ci.org/qrush/m.png)](http://travis-ci.org/qrush/m)\n   #\n-  #![Rush is a heavy metal band. Look it up on Wikipedia.](https://raw.github.com/qrush/m/master/rush.jpg)\n+  #![Rush is a heavy metal band. Look it up on Wikipedia.](https://raw.github.com/qrush/m/coordinator/rush.jpg)",
        "path": "rubygem/lib/zeus/m.rb",
        "position": 5,
        "original_position": 5,
        "commit_id": "0b4a8001e6f6f3b135f7e9962400b7a75707da34",
        "original_commit_id": "0b4a8001e6f6f3b135f7e9962400b7a75707da34",
        "user": {
            "login": "sideshowcoder",
            "id": 108488,
            "node_id": "MDQ6VXNlcjEwODQ4OA==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/108488?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sideshowcoder",
            "html_url": "https://github.com/sideshowcoder",
            "followers_url": "https://api.github.com/users/sideshowcoder/followers",
            "following_url": "https://api.github.com/users/sideshowcoder/following{/other_user}",
            "gists_url": "https://api.github.com/users/sideshowcoder/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sideshowcoder/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sideshowcoder/subscriptions",
            "organizations_url": "https://api.github.com/users/sideshowcoder/orgs",
            "repos_url": "https://api.github.com/users/sideshowcoder/repos",
            "events_url": "https://api.github.com/users/sideshowcoder/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sideshowcoder/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think the find and replace went to far here as this is not part of this repo.",
        "created_at": "2017-12-28T14:36:34Z",
        "updated_at": "2017-12-28T14:39:24Z",
        "html_url": "https://github.com/burke/zeus/pull/650#discussion_r158951476",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/650",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/158951476"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/650#discussion_r158951476"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/650"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/burke/zeus/pulls/comments/159344694",
        "pull_request_review_id": 86277918,
        "id": 159344694,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTM0NDY5NA==",
        "diff_hunk": "@@ -25,7 +25,7 @@ module Zeus\n   #\n   #[![m ci](https://secure.travis-ci.org/qrush/m.png)](http://travis-ci.org/qrush/m)\n   #\n-  #![Rush is a heavy metal band. Look it up on Wikipedia.](https://raw.github.com/qrush/m/master/rush.jpg)\n+  #![Rush is a heavy metal band. Look it up on Wikipedia.](https://raw.github.com/qrush/m/coordinator/rush.jpg)",
        "path": "rubygem/lib/zeus/m.rb",
        "position": 5,
        "original_position": 5,
        "commit_id": "0b4a8001e6f6f3b135f7e9962400b7a75707da34",
        "original_commit_id": "0b4a8001e6f6f3b135f7e9962400b7a75707da34",
        "user": {
            "login": "mhat",
            "id": 973,
            "node_id": "MDQ6VXNlcjk3Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/973?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mhat",
            "html_url": "https://github.com/mhat",
            "followers_url": "https://api.github.com/users/mhat/followers",
            "following_url": "https://api.github.com/users/mhat/following{/other_user}",
            "gists_url": "https://api.github.com/users/mhat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mhat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mhat/subscriptions",
            "organizations_url": "https://api.github.com/users/mhat/orgs",
            "repos_url": "https://api.github.com/users/mhat/repos",
            "events_url": "https://api.github.com/users/mhat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mhat/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You are correct, I'll adjust. ",
        "created_at": "2018-01-03T00:23:39Z",
        "updated_at": "2018-01-03T00:23:39Z",
        "html_url": "https://github.com/burke/zeus/pull/650#discussion_r159344694",
        "pull_request_url": "https://api.github.com/repos/burke/zeus/pulls/650",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/comments/159344694"
            },
            "html": {
                "href": "https://github.com/burke/zeus/pull/650#discussion_r159344694"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/burke/zeus/pulls/650"
            }
        },
        "in_reply_to_id": 158951476
    }
]