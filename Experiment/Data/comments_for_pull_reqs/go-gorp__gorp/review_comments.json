[
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/1959968",
        "pull_request_review_id": null,
        "id": 1959968,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTk5Njg=",
        "diff_hunk": "@@ -849,7 +849,13 @@ func rawselect(m *DbMap, exec SqlExecutor, i interface{}, query string,\n \n \tlist := make([]interface{}, 0)\n \n-\tfor rows.Next() {\n+\tfor true {",
        "path": "gorp.go",
        "position": null,
        "original_position": 5,
        "commit_id": "e59c58ef71c8cc675e21e90f3459512cccf401ae",
        "original_commit_id": "0293136f409e846dfbbaee2a24c91f74fa538b11",
        "user": {
            "login": "kisielk",
            "id": 58618,
            "node_id": "MDQ6VXNlcjU4NjE4",
            "avatar_url": "https://avatars2.githubusercontent.com/u/58618?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kisielk",
            "html_url": "https://github.com/kisielk",
            "followers_url": "https://api.github.com/users/kisielk/followers",
            "following_url": "https://api.github.com/users/kisielk/following{/other_user}",
            "gists_url": "https://api.github.com/users/kisielk/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kisielk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kisielk/subscriptions",
            "organizations_url": "https://api.github.com/users/kisielk/orgs",
            "repos_url": "https://api.github.com/users/kisielk/repos",
            "events_url": "https://api.github.com/users/kisielk/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kisielk/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "you don't need true here, just for {\n",
        "created_at": "2012-10-27T16:35:35Z",
        "updated_at": "2012-10-29T19:31:20Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/8#discussion_r1959968",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/8",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/1959968"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/8#discussion_r1959968"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/8"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/1959972",
        "pull_request_review_id": null,
        "id": 1959972,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTk5NzI=",
        "diff_hunk": "@@ -849,7 +849,13 @@ func rawselect(m *DbMap, exec SqlExecutor, i interface{}, query string,\n \n \tlist := make([]interface{}, 0)\n \n-\tfor rows.Next() {\n+\tfor true {\n+\t\tif !rows.Next() {",
        "path": "gorp.go",
        "position": null,
        "original_position": 6,
        "commit_id": "e59c58ef71c8cc675e21e90f3459512cccf401ae",
        "original_commit_id": "0293136f409e846dfbbaee2a24c91f74fa538b11",
        "user": {
            "login": "kisielk",
            "id": 58618,
            "node_id": "MDQ6VXNlcjU4NjE4",
            "avatar_url": "https://avatars2.githubusercontent.com/u/58618?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kisielk",
            "html_url": "https://github.com/kisielk",
            "followers_url": "https://api.github.com/users/kisielk/followers",
            "following_url": "https://api.github.com/users/kisielk/following{/other_user}",
            "gists_url": "https://api.github.com/users/kisielk/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kisielk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kisielk/subscriptions",
            "organizations_url": "https://api.github.com/users/kisielk/orgs",
            "repos_url": "https://api.github.com/users/kisielk/repos",
            "events_url": "https://api.github.com/users/kisielk/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kisielk/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I don't think there's anything clumsy about this block, but not sure if there's any overhead to calling rows.Err() or not, or if it's guaranteed to return the same result if called multiple times, so it may be a good idea to call it just once.\n",
        "created_at": "2012-10-27T16:40:41Z",
        "updated_at": "2012-10-29T19:31:20Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/8#discussion_r1959972",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/8",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/1959972"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/8#discussion_r1959972"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/8"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/1970734",
        "pull_request_review_id": null,
        "id": 1970734,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzA3MzQ=",
        "diff_hunk": "@@ -849,7 +849,13 @@ func rawselect(m *DbMap, exec SqlExecutor, i interface{}, query string,\n \n \tlist := make([]interface{}, 0)\n \n-\tfor rows.Next() {\n+\tfor true {",
        "path": "gorp.go",
        "position": null,
        "original_position": 5,
        "commit_id": "e59c58ef71c8cc675e21e90f3459512cccf401ae",
        "original_commit_id": "0293136f409e846dfbbaee2a24c91f74fa538b11",
        "user": {
            "login": "nexneo",
            "id": 794,
            "node_id": "MDQ6VXNlcjc5NA==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/794?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nexneo",
            "html_url": "https://github.com/nexneo",
            "followers_url": "https://api.github.com/users/nexneo/followers",
            "following_url": "https://api.github.com/users/nexneo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nexneo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nexneo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nexneo/subscriptions",
            "organizations_url": "https://api.github.com/users/nexneo/orgs",
            "repos_url": "https://api.github.com/users/nexneo/repos",
            "events_url": "https://api.github.com/users/nexneo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nexneo/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Done.\n",
        "created_at": "2012-10-29T19:32:12Z",
        "updated_at": "2012-10-29T19:32:12Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/8#discussion_r1970734",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/8",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/1970734"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/8#discussion_r1970734"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/8"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/4377221",
        "pull_request_review_id": null,
        "id": 4377221,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcyMjE=",
        "diff_hunk": "@@ -1099,7 +1117,11 @@ func rawselect(m *DbMap, exec SqlExecutor, i interface{}, query string,\n \n \tconv := m.TypeConverter\n \n-\tlist := make([]interface{}, 0)",
        "path": "gorp.go",
        "position": 82,
        "original_position": 82,
        "commit_id": "4036ce9df7df2a3bd968bab14edb2fe89e032f48",
        "original_commit_id": "4036ce9df7df2a3bd968bab14edb2fe89e032f48",
        "user": {
            "login": "sqs",
            "id": 1976,
            "node_id": "MDQ6VXNlcjE5NzY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1976?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sqs",
            "html_url": "https://github.com/sqs",
            "followers_url": "https://api.github.com/users/sqs/followers",
            "following_url": "https://api.github.com/users/sqs/following{/other_user}",
            "gists_url": "https://api.github.com/users/sqs/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sqs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sqs/subscriptions",
            "organizations_url": "https://api.github.com/users/sqs/orgs",
            "repos_url": "https://api.github.com/users/sqs/repos",
            "events_url": "https://api.github.com/users/sqs/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sqs/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I believe this breaks backcompat. Previously, an empty SQL result set would yield a empty slice return value. Now, it yields `nil`. (I discovered this in my code that marshals the JSON of the gorp query results; it used to be `[]` when empty, and now it's `null`.)\n",
        "created_at": "2013-05-24T08:20:12Z",
        "updated_at": "2013-05-24T08:20:12Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/40#discussion_r4377221",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/40",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/4377221"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/40#discussion_r4377221"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/40"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/4377453",
        "pull_request_review_id": null,
        "id": 4377453,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc0NTM=",
        "diff_hunk": "@@ -1099,7 +1117,11 @@ func rawselect(m *DbMap, exec SqlExecutor, i interface{}, query string,\n \n \tconv := m.TypeConverter\n \n-\tlist := make([]interface{}, 0)",
        "path": "gorp.go",
        "position": 82,
        "original_position": 82,
        "commit_id": "4036ce9df7df2a3bd968bab14edb2fe89e032f48",
        "original_commit_id": "4036ce9df7df2a3bd968bab14edb2fe89e032f48",
        "user": {
            "login": "sqs",
            "id": 1976,
            "node_id": "MDQ6VXNlcjE5NzY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1976?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sqs",
            "html_url": "https://github.com/sqs",
            "followers_url": "https://api.github.com/users/sqs/followers",
            "following_url": "https://api.github.com/users/sqs/following{/other_user}",
            "gists_url": "https://api.github.com/users/sqs/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sqs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sqs/subscriptions",
            "organizations_url": "https://api.github.com/users/sqs/orgs",
            "repos_url": "https://api.github.com/users/sqs/repos",
            "events_url": "https://api.github.com/users/sqs/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sqs/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Here is a patch+testcase that ensures that results are always non-nil: https://github.com/sqs/gorp/commit/6dfc2ee1f39270fc9b5d172701610d7c2335a665\n",
        "created_at": "2013-05-24T08:41:07Z",
        "updated_at": "2013-05-24T08:41:07Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/40#discussion_r4377453",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/40",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/4377453"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/40#discussion_r4377453"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/40"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/10228825",
        "pull_request_review_id": null,
        "id": 10228825,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjI4ODI1",
        "diff_hunk": "@@ -1540,7 +1543,9 @@ func maybeExpandNamedQuery(m *DbMap, query string, args []interface{}) (string,\n \t\t\treturn arg.MapIndex(reflect.ValueOf(key))\n \t\t})\n \t\t// #84 - ignore time.Time structs here - there may be a cleaner way to do this\n-\tcase arg.Kind() == reflect.Struct && !(arg.Type().PkgPath() == \"time\" && arg.Type().Name() == \"Time\"):\n+\tcase arg.Kind() == reflect.Struct &&\n+\t\t!(arg.Type().PkgPath() == \"time\" && arg.Type().Name() == \"Time\") &&",
        "path": "gorp.go",
        "position": null,
        "original_position": 23,
        "commit_id": "d494e0d3058fc4afc96e433d4968ce9ba0967738",
        "original_commit_id": "64fd583c38c3a236818ee00c4bdb665acae4f45c",
        "user": {
            "login": "robfig",
            "id": 536325,
            "node_id": "MDQ6VXNlcjUzNjMyNQ==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/536325?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/robfig",
            "html_url": "https://github.com/robfig",
            "followers_url": "https://api.github.com/users/robfig/followers",
            "following_url": "https://api.github.com/users/robfig/following{/other_user}",
            "gists_url": "https://api.github.com/users/robfig/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/robfig/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/robfig/subscriptions",
            "organizations_url": "https://api.github.com/users/robfig/orgs",
            "repos_url": "https://api.github.com/users/robfig/repos",
            "events_url": "https://api.github.com/users/robfig/events{/privacy}",
            "received_events_url": "https://api.github.com/users/robfig/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think doing something like\n\n``` go\nvar (\n  timeType = reflect.TypeOf(time.Time{})\n  listType = reflect.TypeOf(List{})\n)\n\nfunc ..\n  if arg.Type() != timeType && arg.Type() != listType { \n    ..\n  }\n```\n\ncould be cleaner\n",
        "created_at": "2014-03-03T21:05:27Z",
        "updated_at": "2014-03-10T01:05:12Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/143#discussion_r10228825",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/143",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/10228825"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/143#discussion_r10228825"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/143"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/10228916",
        "pull_request_review_id": null,
        "id": 10228916,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjI4OTE2",
        "diff_hunk": "@@ -1569,6 +1574,139 @@ func expandNamedQuery(m *DbMap, query string, keyGetter func(key string) reflect\n \t}), args\n }\n \n+// List is used to tag slices in a query's argument list\n+// whose placeholder should be expanded to reflect the\n+// size of the slice. A common example would be:\n+// 'select * from t where v in (?)', gorp.List{vals}",
        "path": "gorp.go",
        "position": null,
        "original_position": 35,
        "commit_id": "d494e0d3058fc4afc96e433d4968ce9ba0967738",
        "original_commit_id": "64fd583c38c3a236818ee00c4bdb665acae4f45c",
        "user": {
            "login": "robfig",
            "id": 536325,
            "node_id": "MDQ6VXNlcjUzNjMyNQ==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/536325?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/robfig",
            "html_url": "https://github.com/robfig",
            "followers_url": "https://api.github.com/users/robfig/followers",
            "following_url": "https://api.github.com/users/robfig/following{/other_user}",
            "gists_url": "https://api.github.com/users/robfig/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/robfig/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/robfig/subscriptions",
            "organizations_url": "https://api.github.com/users/robfig/orgs",
            "repos_url": "https://api.github.com/users/robfig/repos",
            "events_url": "https://api.github.com/users/robfig/events{/privacy}",
            "received_events_url": "https://api.github.com/users/robfig/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Is a simple cast enough to do it? \n\ne.g. \n\n``` go\ntype List interface{}\n\ngorp.List(vals) \n```\n\nThe advantage of that, if it works, is that the caller would be able to use a []int instead of having to write the for loop to convert it.\n",
        "created_at": "2014-03-03T21:07:31Z",
        "updated_at": "2014-03-10T01:05:12Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/143#discussion_r10228916",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/143",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/10228916"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/143#discussion_r10228916"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/143"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/10228974",
        "pull_request_review_id": null,
        "id": 10228974,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjI4OTc0",
        "diff_hunk": "@@ -1569,6 +1574,139 @@ func expandNamedQuery(m *DbMap, query string, keyGetter func(key string) reflect\n \t}), args\n }\n \n+// List is used to tag slices in a query's argument list\n+// whose placeholder should be expanded to reflect the\n+// size of the slice. A common example would be:\n+// 'select * from t where v in (?)', gorp.List{vals}\n+type List struct {\n+\tVals []interface{}\n+}\n+\n+// maybeExpandListQuery expands a parameter to the appropriate number of\n+// occurrences to reflect the number of values given in a gorp.List in\n+// the args list to allow for queries of the form \"... where val in (?)\"\n+// to repeat the ? the appropriate number of times\n+func maybeExpandListQuery(m *DbMap, query string, args ...interface{}) (string, []interface{}) {\n+\tlistIndices := getListIndices(args...)\n+\tif len(listIndices) == 0 {\n+\t\treturn query, args\n+\t}\n+\n+\tplaceholderIndices, max := getPlaceholderIndices(m, query)\n+\texpandedPlaceholders := make([]string, len(listIndices))\n+\tfor i, listIndex := range listIndices {\n+\t\texpandedPlaceholders[i], max = m.Dialect.ExpandPlaceholder(max, args[listIndex])\n+\t}\n+\n+\tnewQuery := \"\"\n+\tlastIndex := 0\n+\texpandArgsInOrder := false\n+\tfor i, pIndex := range placeholderIndices {\n+\t\tif pIndex[1] == -2 {",
        "path": "gorp.go",
        "position": null,
        "original_position": 60,
        "commit_id": "d494e0d3058fc4afc96e433d4968ce9ba0967738",
        "original_commit_id": "64fd583c38c3a236818ee00c4bdb665acae4f45c",
        "user": {
            "login": "robfig",
            "id": 536325,
            "node_id": "MDQ6VXNlcjUzNjMyNQ==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/536325?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/robfig",
            "html_url": "https://github.com/robfig",
            "followers_url": "https://api.github.com/users/robfig/followers",
            "following_url": "https://api.github.com/users/robfig/following{/other_user}",
            "gists_url": "https://api.github.com/users/robfig/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/robfig/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/robfig/subscriptions",
            "organizations_url": "https://api.github.com/users/robfig/orgs",
            "repos_url": "https://api.github.com/users/robfig/repos",
            "events_url": "https://api.github.com/users/robfig/events{/privacy}",
            "received_events_url": "https://api.github.com/users/robfig/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "probably helpful to define a constant for -2 \n\nI was curious what it was when looking at the dialects\n",
        "created_at": "2014-03-03T21:08:40Z",
        "updated_at": "2014-03-10T01:05:12Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/143#discussion_r10228974",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/143",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/10228974"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/143#discussion_r10228974"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/143"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/10230731",
        "pull_request_review_id": null,
        "id": 10230731,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjMwNzMx",
        "diff_hunk": "@@ -1569,6 +1574,139 @@ func expandNamedQuery(m *DbMap, query string, keyGetter func(key string) reflect\n \t}), args\n }\n \n+// List is used to tag slices in a query's argument list\n+// whose placeholder should be expanded to reflect the\n+// size of the slice. A common example would be:\n+// 'select * from t where v in (?)', gorp.List{vals}\n+type List struct {\n+\tVals []interface{}\n+}\n+\n+// maybeExpandListQuery expands a parameter to the appropriate number of\n+// occurrences to reflect the number of values given in a gorp.List in\n+// the args list to allow for queries of the form \"... where val in (?)\"\n+// to repeat the ? the appropriate number of times\n+func maybeExpandListQuery(m *DbMap, query string, args ...interface{}) (string, []interface{}) {\n+\tlistIndices := getListIndices(args...)\n+\tif len(listIndices) == 0 {\n+\t\treturn query, args\n+\t}\n+\n+\tplaceholderIndices, max := getPlaceholderIndices(m, query)\n+\texpandedPlaceholders := make([]string, len(listIndices))\n+\tfor i, listIndex := range listIndices {\n+\t\texpandedPlaceholders[i], max = m.Dialect.ExpandPlaceholder(max, args[listIndex])\n+\t}\n+\n+\tnewQuery := \"\"\n+\tlastIndex := 0\n+\texpandArgsInOrder := false\n+\tfor i, pIndex := range placeholderIndices {\n+\t\tif pIndex[1] == -2 {\n+\t\t\tnewQuery += query[lastIndex:pIndex[0]] + expandedPlaceholders[i]\n+\t\t\tlastIndex = pIndex[0] + 1\n+\t\t} else {\n+\t\t\texpandArgsInOrder = true\n+\t\t\tif pIndex[0] == pIndex[2] {\n+\t\t\t\tnewQuery += query[lastIndex:pIndex[2]] + expandedPlaceholders[i][2:]\n+\t\t\t\tlastIndex = pIndex[2] + 1\n+\t\t\t} else {\n+\t\t\t\tnewQuery += query[lastIndex:pIndex[2]] + expandedPlaceholders[pIndex[1]-1]\n+\t\t\t\tlastIndex = pIndex[2]\n+\t\t\t}\n+\n+\t\t}\n+\t}\n+\n+\tvar newArgs []interface{}\n+\tif expandArgsInOrder {\n+\t\tvar atEnd []interface{}\n+\t\tfor _, arg := range args {\n+\t\t\tif l, ok := arg.(List); ok {\n+\t\t\t\tif len(l.Vals) > 1 {\n+\t\t\t\t\tnewArgs = append(newArgs, l.Vals[0])\n+\t\t\t\t\tatEnd = append(atEnd, l.Vals[1:]...)\n+\t\t\t\t} else {\n+\t\t\t\t\tnewArgs = append(newArgs, l.Vals[0])\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tnewArgs = append(newArgs, arg)\n+\t\t\t}\n+\t\t}\n+\t\tnewArgs = append(newArgs, atEnd...)\n+\t} else {\n+\t\tfor _, arg := range args {\n+\t\t\tif l, ok := arg.(List); ok {\n+\t\t\t\tnewArgs = append(newArgs, l.Vals...)\n+\t\t\t} else {\n+\t\t\t\tnewArgs = append(newArgs, arg)\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\treturn newQuery + query[lastIndex:], newArgs\n+}\n+\n+// getPlaceholderIndices returns all occurences of placeholders\n+// in the given query string with associated information where\n+// the second slice is of the form [0]=token start in query string,\n+// [1] = token value (useful in Postgres queries, wil be -2 is\n+// not Postgres query and will be -1 in Postgres query using ?\n+// instead of $#) and [2]=token end\n+func getPlaceholderIndices(m *DbMap, query string) ([][]int, int) {\n+\tvar varInfo [][]int\n+\n+\tmaxVal := 0\n+\tinToken := false\n+\ttokenStart := 0\n+\n+\tfor i := 0; i < len(query); i++ {",
        "path": "gorp.go",
        "position": null,
        "original_position": 118,
        "commit_id": "d494e0d3058fc4afc96e433d4968ce9ba0967738",
        "original_commit_id": "64fd583c38c3a236818ee00c4bdb665acae4f45c",
        "user": {
            "login": "robfig",
            "id": 536325,
            "node_id": "MDQ6VXNlcjUzNjMyNQ==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/536325?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/robfig",
            "html_url": "https://github.com/robfig",
            "followers_url": "https://api.github.com/users/robfig/followers",
            "following_url": "https://api.github.com/users/robfig/following{/other_user}",
            "gists_url": "https://api.github.com/users/robfig/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/robfig/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/robfig/subscriptions",
            "organizations_url": "https://api.github.com/users/robfig/orgs",
            "repos_url": "https://api.github.com/users/robfig/repos",
            "events_url": "https://api.github.com/users/robfig/events{/privacy}",
            "received_events_url": "https://api.github.com/users/robfig/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'd suggest range or utf8.DecodeRune\\* to step through a unicode string.  Stepping one byte at a time will cut code points in half.\n",
        "created_at": "2014-03-03T21:48:58Z",
        "updated_at": "2014-03-10T01:05:12Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/143#discussion_r10230731",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/143",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/10230731"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/143#discussion_r10230731"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/143"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/10230913",
        "pull_request_review_id": null,
        "id": 10230913,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjMwOTEz",
        "diff_hunk": "@@ -1436,6 +1436,29 @@ func TestMysqlPanicIfDialectNotInitialized(t *testing.T) {\n \tdb.CreateTables()\n }\n \n+func TestListExpansion(t *testing.T) {\n+\tdbmap := initDbMap()\n+\tdefer dbmap.DropTables()\n+\n+\tinv1 := &Invoice{0, 100, 200, \"a\", 0, false}\n+\tinv2 := &Invoice{0, 100, 200, \"b\", 0, true}\n+\tinv3 := &Invoice{0, 100, 200, \"c\", 0, false}\n+\t_insert(dbmap, inv1, inv2, inv3)\n+\n+\tvar invoices []*Invoice\n+\t_, err := dbmap.Select(",
        "path": "gorp_test.go",
        "position": 14,
        "original_position": 14,
        "commit_id": "d494e0d3058fc4afc96e433d4968ce9ba0967738",
        "original_commit_id": "64fd583c38c3a236818ee00c4bdb665acae4f45c",
        "user": {
            "login": "robfig",
            "id": 536325,
            "node_id": "MDQ6VXNlcjUzNjMyNQ==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/536325?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/robfig",
            "html_url": "https://github.com/robfig",
            "followers_url": "https://api.github.com/users/robfig/followers",
            "following_url": "https://api.github.com/users/robfig/following{/other_user}",
            "gists_url": "https://api.github.com/users/robfig/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/robfig/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/robfig/subscriptions",
            "organizations_url": "https://api.github.com/users/robfig/orgs",
            "repos_url": "https://api.github.com/users/robfig/repos",
            "events_url": "https://api.github.com/users/robfig/events{/privacy}",
            "received_events_url": "https://api.github.com/users/robfig/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "probably testing 1 or 0 items would also be worth while.  what should even happen with 0 items?  Maybe immediately return sql.ErrNoRows ? \n\nit looks like this is meant to support numbered arguments for Postgres -- tests for that would be good.  in general you have a bunch of functions that are really complicated and unit-testable like getPlaceholderIndices -- I would suggest writing tests for those that don't depend on any particular database, so that e.g. you can run the one relevant for postgres without actually needing to install it.\n",
        "created_at": "2014-03-03T21:52:04Z",
        "updated_at": "2014-03-10T01:05:12Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/143#discussion_r10230913",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/143",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/10230913"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/143#discussion_r10230913"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/143"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/10231121",
        "pull_request_review_id": null,
        "id": 10231121,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjMxMTIx",
        "diff_hunk": "@@ -248,13 +275,50 @@ func (d PostgresDialect) QuoteField(f string) string {\n }\n \n func (d PostgresDialect) QuotedTableForQuery(schema string, table string) string {\n-\tif (strings.TrimSpace(schema) == \"\") {\n+\tif strings.TrimSpace(schema) == \"\" {\n \t\treturn d.QuoteField(table)\n \t}\n \n \treturn schema + \".\" + d.QuoteField(table)\n }\n \n+func (d PostgresDialect) IsVarWithVal(token string) (int, bool) {\n+\tif token == \"?\" {\n+\t\treturn -1, true\n+\t}\n+\n+\tif len(token) < 2 {\n+\t\treturn -1, false\n+\t}\n+\n+\thasDollarSign := token[0:1] == \"$\"",
        "path": "dialect.go",
        "position": null,
        "original_position": 69,
        "commit_id": "d494e0d3058fc4afc96e433d4968ce9ba0967738",
        "original_commit_id": "64fd583c38c3a236818ee00c4bdb665acae4f45c",
        "user": {
            "login": "robfig",
            "id": 536325,
            "node_id": "MDQ6VXNlcjUzNjMyNQ==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/536325?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/robfig",
            "html_url": "https://github.com/robfig",
            "followers_url": "https://api.github.com/users/robfig/followers",
            "following_url": "https://api.github.com/users/robfig/following{/other_user}",
            "gists_url": "https://api.github.com/users/robfig/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/robfig/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/robfig/subscriptions",
            "organizations_url": "https://api.github.com/users/robfig/orgs",
            "repos_url": "https://api.github.com/users/robfig/repos",
            "events_url": "https://api.github.com/users/robfig/events{/privacy}",
            "received_events_url": "https://api.github.com/users/robfig/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "token[0] == '$'\n",
        "created_at": "2014-03-03T21:56:01Z",
        "updated_at": "2014-03-10T01:05:12Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/143#discussion_r10231121",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/143",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/10231121"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/143#discussion_r10231121"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/143"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/10231175",
        "pull_request_review_id": null,
        "id": 10231175,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjMxMTc1",
        "diff_hunk": "@@ -248,13 +275,50 @@ func (d PostgresDialect) QuoteField(f string) string {\n }\n \n func (d PostgresDialect) QuotedTableForQuery(schema string, table string) string {\n-\tif (strings.TrimSpace(schema) == \"\") {\n+\tif strings.TrimSpace(schema) == \"\" {\n \t\treturn d.QuoteField(table)\n \t}\n \n \treturn schema + \".\" + d.QuoteField(table)\n }\n \n+func (d PostgresDialect) IsVarWithVal(token string) (int, bool) {\n+\tif token == \"?\" {\n+\t\treturn -1, true\n+\t}\n+\n+\tif len(token) < 2 {\n+\t\treturn -1, false\n+\t}\n+\n+\thasDollarSign := token[0:1] == \"$\"\n+\tval, isNumberErr := strconv.Atoi(token[1:])\n+\n+\treturn val, hasDollarSign && isNumberErr == nil\n+}\n+\n+func (d PostgresDialect) ExpandPlaceholder(i int, v interface{}) (string, int) {\n+\tval, ok := v.(List)\n+\tif !ok {\n+\t\treturn \"\", i\n+\t}\n+\n+\tnumVals := len(val.Vals)\n+\tif numVals == 1 {\n+\t\treturn fmt.Sprintf(\"$%d\", i+1), i + 1\n+\t}\n+\n+\ttoReturn := \"\"\n+\tif i == 0 {\n+\t\tnumVals++\n+\t}\n+\tfor j := 1; j < numVals; j++ {",
        "path": "dialect.go",
        "position": null,
        "original_position": 90,
        "commit_id": "d494e0d3058fc4afc96e433d4968ce9ba0967738",
        "original_commit_id": "64fd583c38c3a236818ee00c4bdb665acae4f45c",
        "user": {
            "login": "robfig",
            "id": 536325,
            "node_id": "MDQ6VXNlcjUzNjMyNQ==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/536325?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/robfig",
            "html_url": "https://github.com/robfig",
            "followers_url": "https://api.github.com/users/robfig/followers",
            "following_url": "https://api.github.com/users/robfig/following{/other_user}",
            "gists_url": "https://api.github.com/users/robfig/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/robfig/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/robfig/subscriptions",
            "organizations_url": "https://api.github.com/users/robfig/orgs",
            "repos_url": "https://api.github.com/users/robfig/repos",
            "events_url": "https://api.github.com/users/robfig/events{/privacy}",
            "received_events_url": "https://api.github.com/users/robfig/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "string concatenation in an O(N) loop makes baby jesus cry\n",
        "created_at": "2014-03-03T21:57:00Z",
        "updated_at": "2014-03-10T01:05:12Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/143#discussion_r10231175",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/143",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/10231175"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/143#discussion_r10231175"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/143"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/10231325",
        "pull_request_review_id": null,
        "id": 10231325,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjMxMzI1",
        "diff_hunk": "@@ -1436,6 +1436,29 @@ func TestMysqlPanicIfDialectNotInitialized(t *testing.T) {\n \tdb.CreateTables()\n }\n \n+func TestListExpansion(t *testing.T) {\n+\tdbmap := initDbMap()\n+\tdefer dbmap.DropTables()\n+\n+\tinv1 := &Invoice{0, 100, 200, \"a\", 0, false}\n+\tinv2 := &Invoice{0, 100, 200, \"b\", 0, true}\n+\tinv3 := &Invoice{0, 100, 200, \"c\", 0, false}\n+\t_insert(dbmap, inv1, inv2, inv3)\n+\n+\tvar invoices []*Invoice\n+\t_, err := dbmap.Select(",
        "path": "gorp_test.go",
        "position": 14,
        "original_position": 14,
        "commit_id": "d494e0d3058fc4afc96e433d4968ce9ba0967738",
        "original_commit_id": "64fd583c38c3a236818ee00c4bdb665acae4f45c",
        "user": {
            "login": "robfig",
            "id": 536325,
            "node_id": "MDQ6VXNlcjUzNjMyNQ==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/536325?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/robfig",
            "html_url": "https://github.com/robfig",
            "followers_url": "https://api.github.com/users/robfig/followers",
            "following_url": "https://api.github.com/users/robfig/following{/other_user}",
            "gists_url": "https://api.github.com/users/robfig/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/robfig/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/robfig/subscriptions",
            "organizations_url": "https://api.github.com/users/robfig/orgs",
            "repos_url": "https://api.github.com/users/robfig/repos",
            "events_url": "https://api.github.com/users/robfig/events{/privacy}",
            "received_events_url": "https://api.github.com/users/robfig/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "also, tests with literal strings containing placeholders would be good too.  (is it even meant to support that case?)\n\nfor example, is this allowed?\n\n``` sql\nselect * from foos where name = 'Hello world ?' and value = ?\n```\n",
        "created_at": "2014-03-03T21:59:28Z",
        "updated_at": "2014-03-10T01:05:12Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/143#discussion_r10231325",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/143",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/10231325"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/143#discussion_r10231325"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/143"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/10248247",
        "pull_request_review_id": null,
        "id": 10248247,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjQ4MjQ3",
        "diff_hunk": "@@ -1436,6 +1436,29 @@ func TestMysqlPanicIfDialectNotInitialized(t *testing.T) {\n \tdb.CreateTables()\n }\n \n+func TestListExpansion(t *testing.T) {\n+\tdbmap := initDbMap()\n+\tdefer dbmap.DropTables()\n+\n+\tinv1 := &Invoice{0, 100, 200, \"a\", 0, false}\n+\tinv2 := &Invoice{0, 100, 200, \"b\", 0, true}\n+\tinv3 := &Invoice{0, 100, 200, \"c\", 0, false}\n+\t_insert(dbmap, inv1, inv2, inv3)\n+\n+\tvar invoices []*Invoice\n+\t_, err := dbmap.Select(",
        "path": "gorp_test.go",
        "position": 14,
        "original_position": 14,
        "commit_id": "d494e0d3058fc4afc96e433d4968ce9ba0967738",
        "original_commit_id": "64fd583c38c3a236818ee00c4bdb665acae4f45c",
        "user": {
            "login": "johto",
            "id": 951744,
            "node_id": "MDQ6VXNlcjk1MTc0NA==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/951744?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/johto",
            "html_url": "https://github.com/johto",
            "followers_url": "https://api.github.com/users/johto/followers",
            "following_url": "https://api.github.com/users/johto/following{/other_user}",
            "gists_url": "https://api.github.com/users/johto/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/johto/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/johto/subscriptions",
            "organizations_url": "https://api.github.com/users/johto/orgs",
            "repos_url": "https://api.github.com/users/johto/repos",
            "events_url": "https://api.github.com/users/johto/events{/privacy}",
            "received_events_url": "https://api.github.com/users/johto/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I didn't read the code, but I hope it isn't as this is very difficult to do correctly in all situations, for reasons I've tried to cover in lib/pq#233.\n",
        "created_at": "2014-03-04T09:44:29Z",
        "updated_at": "2014-03-10T01:05:12Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/143#discussion_r10248247",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/143",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/10248247"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/143#discussion_r10248247"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/143"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/10409760",
        "pull_request_review_id": null,
        "id": 10409760,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDA5NzYw",
        "diff_hunk": "@@ -1540,7 +1543,9 @@ func maybeExpandNamedQuery(m *DbMap, query string, args []interface{}) (string,\n \t\t\treturn arg.MapIndex(reflect.ValueOf(key))\n \t\t})\n \t\t// #84 - ignore time.Time structs here - there may be a cleaner way to do this\n-\tcase arg.Kind() == reflect.Struct && !(arg.Type().PkgPath() == \"time\" && arg.Type().Name() == \"Time\"):\n+\tcase arg.Kind() == reflect.Struct &&\n+\t\t!(arg.Type().PkgPath() == \"time\" && arg.Type().Name() == \"Time\") &&",
        "path": "gorp.go",
        "position": null,
        "original_position": 23,
        "commit_id": "d494e0d3058fc4afc96e433d4968ce9ba0967738",
        "original_commit_id": "64fd583c38c3a236818ee00c4bdb665acae4f45c",
        "user": {
            "login": "ttacon",
            "id": 2548998,
            "node_id": "MDQ6VXNlcjI1NDg5OTg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/2548998?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ttacon",
            "html_url": "https://github.com/ttacon",
            "followers_url": "https://api.github.com/users/ttacon/followers",
            "following_url": "https://api.github.com/users/ttacon/following{/other_user}",
            "gists_url": "https://api.github.com/users/ttacon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ttacon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ttacon/subscriptions",
            "organizations_url": "https://api.github.com/users/ttacon/orgs",
            "repos_url": "https://api.github.com/users/ttacon/repos",
            "events_url": "https://api.github.com/users/ttacon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ttacon/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I totally agree, good point.\n",
        "created_at": "2014-03-08T16:33:44Z",
        "updated_at": "2014-03-10T01:05:12Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/143#discussion_r10409760",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/143",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/10409760"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/143#discussion_r10409760"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/143"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/10409765",
        "pull_request_review_id": null,
        "id": 10409765,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDA5NzY1",
        "diff_hunk": "@@ -1569,6 +1574,139 @@ func expandNamedQuery(m *DbMap, query string, keyGetter func(key string) reflect\n \t}), args\n }\n \n+// List is used to tag slices in a query's argument list\n+// whose placeholder should be expanded to reflect the\n+// size of the slice. A common example would be:\n+// 'select * from t where v in (?)', gorp.List{vals}",
        "path": "gorp.go",
        "position": null,
        "original_position": 35,
        "commit_id": "d494e0d3058fc4afc96e433d4968ce9ba0967738",
        "original_commit_id": "64fd583c38c3a236818ee00c4bdb665acae4f45c",
        "user": {
            "login": "ttacon",
            "id": 2548998,
            "node_id": "MDQ6VXNlcjI1NDg5OTg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/2548998?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ttacon",
            "html_url": "https://github.com/ttacon",
            "followers_url": "https://api.github.com/users/ttacon/followers",
            "following_url": "https://api.github.com/users/ttacon/following{/other_user}",
            "gists_url": "https://api.github.com/users/ttacon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ttacon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ttacon/subscriptions",
            "organizations_url": "https://api.github.com/users/ttacon/orgs",
            "repos_url": "https://api.github.com/users/ttacon/repos",
            "events_url": "https://api.github.com/users/ttacon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ttacon/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I couldn't get a simple interface cast to work, since well, it's just interface{}. However, I agree about the []int comment, so I changed List() to a variadic function which returns an internal struct.\n",
        "created_at": "2014-03-08T16:35:12Z",
        "updated_at": "2014-03-10T01:05:12Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/143#discussion_r10409765",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/143",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/10409765"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/143#discussion_r10409765"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/143"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/10409767",
        "pull_request_review_id": null,
        "id": 10409767,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDA5NzY3",
        "diff_hunk": "@@ -1569,6 +1574,139 @@ func expandNamedQuery(m *DbMap, query string, keyGetter func(key string) reflect\n \t}), args\n }\n \n+// List is used to tag slices in a query's argument list\n+// whose placeholder should be expanded to reflect the\n+// size of the slice. A common example would be:\n+// 'select * from t where v in (?)', gorp.List{vals}\n+type List struct {\n+\tVals []interface{}\n+}\n+\n+// maybeExpandListQuery expands a parameter to the appropriate number of\n+// occurrences to reflect the number of values given in a gorp.List in\n+// the args list to allow for queries of the form \"... where val in (?)\"\n+// to repeat the ? the appropriate number of times\n+func maybeExpandListQuery(m *DbMap, query string, args ...interface{}) (string, []interface{}) {\n+\tlistIndices := getListIndices(args...)\n+\tif len(listIndices) == 0 {\n+\t\treturn query, args\n+\t}\n+\n+\tplaceholderIndices, max := getPlaceholderIndices(m, query)\n+\texpandedPlaceholders := make([]string, len(listIndices))\n+\tfor i, listIndex := range listIndices {\n+\t\texpandedPlaceholders[i], max = m.Dialect.ExpandPlaceholder(max, args[listIndex])\n+\t}\n+\n+\tnewQuery := \"\"\n+\tlastIndex := 0\n+\texpandArgsInOrder := false\n+\tfor i, pIndex := range placeholderIndices {\n+\t\tif pIndex[1] == -2 {",
        "path": "gorp.go",
        "position": null,
        "original_position": 60,
        "commit_id": "d494e0d3058fc4afc96e433d4968ce9ba0967738",
        "original_commit_id": "64fd583c38c3a236818ee00c4bdb665acae4f45c",
        "user": {
            "login": "ttacon",
            "id": 2548998,
            "node_id": "MDQ6VXNlcjI1NDg5OTg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/2548998?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ttacon",
            "html_url": "https://github.com/ttacon",
            "followers_url": "https://api.github.com/users/ttacon/followers",
            "following_url": "https://api.github.com/users/ttacon/following{/other_user}",
            "gists_url": "https://api.github.com/users/ttacon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ttacon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ttacon/subscriptions",
            "organizations_url": "https://api.github.com/users/ttacon/orgs",
            "repos_url": "https://api.github.com/users/ttacon/repos",
            "events_url": "https://api.github.com/users/ttacon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ttacon/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "True, I added a constant for this.\n",
        "created_at": "2014-03-08T16:35:25Z",
        "updated_at": "2014-03-10T01:05:12Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/143#discussion_r10409767",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/143",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/10409767"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/143#discussion_r10409767"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/143"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/10409768",
        "pull_request_review_id": null,
        "id": 10409768,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDA5NzY4",
        "diff_hunk": "@@ -1569,6 +1574,139 @@ func expandNamedQuery(m *DbMap, query string, keyGetter func(key string) reflect\n \t}), args\n }\n \n+// List is used to tag slices in a query's argument list\n+// whose placeholder should be expanded to reflect the\n+// size of the slice. A common example would be:\n+// 'select * from t where v in (?)', gorp.List{vals}\n+type List struct {\n+\tVals []interface{}\n+}\n+\n+// maybeExpandListQuery expands a parameter to the appropriate number of\n+// occurrences to reflect the number of values given in a gorp.List in\n+// the args list to allow for queries of the form \"... where val in (?)\"\n+// to repeat the ? the appropriate number of times\n+func maybeExpandListQuery(m *DbMap, query string, args ...interface{}) (string, []interface{}) {\n+\tlistIndices := getListIndices(args...)\n+\tif len(listIndices) == 0 {\n+\t\treturn query, args\n+\t}\n+\n+\tplaceholderIndices, max := getPlaceholderIndices(m, query)\n+\texpandedPlaceholders := make([]string, len(listIndices))\n+\tfor i, listIndex := range listIndices {\n+\t\texpandedPlaceholders[i], max = m.Dialect.ExpandPlaceholder(max, args[listIndex])\n+\t}\n+\n+\tnewQuery := \"\"\n+\tlastIndex := 0\n+\texpandArgsInOrder := false\n+\tfor i, pIndex := range placeholderIndices {\n+\t\tif pIndex[1] == -2 {\n+\t\t\tnewQuery += query[lastIndex:pIndex[0]] + expandedPlaceholders[i]\n+\t\t\tlastIndex = pIndex[0] + 1\n+\t\t} else {\n+\t\t\texpandArgsInOrder = true\n+\t\t\tif pIndex[0] == pIndex[2] {\n+\t\t\t\tnewQuery += query[lastIndex:pIndex[2]] + expandedPlaceholders[i][2:]\n+\t\t\t\tlastIndex = pIndex[2] + 1\n+\t\t\t} else {\n+\t\t\t\tnewQuery += query[lastIndex:pIndex[2]] + expandedPlaceholders[pIndex[1]-1]\n+\t\t\t\tlastIndex = pIndex[2]\n+\t\t\t}\n+\n+\t\t}\n+\t}\n+\n+\tvar newArgs []interface{}\n+\tif expandArgsInOrder {\n+\t\tvar atEnd []interface{}\n+\t\tfor _, arg := range args {\n+\t\t\tif l, ok := arg.(List); ok {\n+\t\t\t\tif len(l.Vals) > 1 {\n+\t\t\t\t\tnewArgs = append(newArgs, l.Vals[0])\n+\t\t\t\t\tatEnd = append(atEnd, l.Vals[1:]...)\n+\t\t\t\t} else {\n+\t\t\t\t\tnewArgs = append(newArgs, l.Vals[0])\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tnewArgs = append(newArgs, arg)\n+\t\t\t}\n+\t\t}\n+\t\tnewArgs = append(newArgs, atEnd...)\n+\t} else {\n+\t\tfor _, arg := range args {\n+\t\t\tif l, ok := arg.(List); ok {\n+\t\t\t\tnewArgs = append(newArgs, l.Vals...)\n+\t\t\t} else {\n+\t\t\t\tnewArgs = append(newArgs, arg)\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\treturn newQuery + query[lastIndex:], newArgs\n+}\n+\n+// getPlaceholderIndices returns all occurences of placeholders\n+// in the given query string with associated information where\n+// the second slice is of the form [0]=token start in query string,\n+// [1] = token value (useful in Postgres queries, wil be -2 is\n+// not Postgres query and will be -1 in Postgres query using ?\n+// instead of $#) and [2]=token end\n+func getPlaceholderIndices(m *DbMap, query string) ([][]int, int) {\n+\tvar varInfo [][]int\n+\n+\tmaxVal := 0\n+\tinToken := false\n+\ttokenStart := 0\n+\n+\tfor i := 0; i < len(query); i++ {",
        "path": "gorp.go",
        "position": null,
        "original_position": 118,
        "commit_id": "d494e0d3058fc4afc96e433d4968ce9ba0967738",
        "original_commit_id": "64fd583c38c3a236818ee00c4bdb665acae4f45c",
        "user": {
            "login": "ttacon",
            "id": 2548998,
            "node_id": "MDQ6VXNlcjI1NDg5OTg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/2548998?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ttacon",
            "html_url": "https://github.com/ttacon",
            "followers_url": "https://api.github.com/users/ttacon/followers",
            "following_url": "https://api.github.com/users/ttacon/following{/other_user}",
            "gists_url": "https://api.github.com/users/ttacon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ttacon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ttacon/subscriptions",
            "organizations_url": "https://api.github.com/users/ttacon/orgs",
            "repos_url": "https://api.github.com/users/ttacon/repos",
            "events_url": "https://api.github.com/users/ttacon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ttacon/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "That slipped my mind entirely, thanks!\n",
        "created_at": "2014-03-08T16:35:42Z",
        "updated_at": "2014-03-10T01:05:12Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/143#discussion_r10409768",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/143",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/10409768"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/143#discussion_r10409768"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/143"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/10409769",
        "pull_request_review_id": null,
        "id": 10409769,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDA5NzY5",
        "diff_hunk": "@@ -1436,6 +1436,29 @@ func TestMysqlPanicIfDialectNotInitialized(t *testing.T) {\n \tdb.CreateTables()\n }\n \n+func TestListExpansion(t *testing.T) {\n+\tdbmap := initDbMap()\n+\tdefer dbmap.DropTables()\n+\n+\tinv1 := &Invoice{0, 100, 200, \"a\", 0, false}\n+\tinv2 := &Invoice{0, 100, 200, \"b\", 0, true}\n+\tinv3 := &Invoice{0, 100, 200, \"c\", 0, false}\n+\t_insert(dbmap, inv1, inv2, inv3)\n+\n+\tvar invoices []*Invoice\n+\t_, err := dbmap.Select(",
        "path": "gorp_test.go",
        "position": 14,
        "original_position": 14,
        "commit_id": "d494e0d3058fc4afc96e433d4968ce9ba0967738",
        "original_commit_id": "64fd583c38c3a236818ee00c4bdb665acae4f45c",
        "user": {
            "login": "ttacon",
            "id": 2548998,
            "node_id": "MDQ6VXNlcjI1NDg5OTg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/2548998?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ttacon",
            "html_url": "https://github.com/ttacon",
            "followers_url": "https://api.github.com/users/ttacon/followers",
            "following_url": "https://api.github.com/users/ttacon/following{/other_user}",
            "gists_url": "https://api.github.com/users/ttacon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ttacon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ttacon/subscriptions",
            "organizations_url": "https://api.github.com/users/ttacon/orgs",
            "repos_url": "https://api.github.com/users/ttacon/repos",
            "events_url": "https://api.github.com/users/ttacon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ttacon/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I added some more tests to help describe the functionality more.\n",
        "created_at": "2014-03-08T16:36:08Z",
        "updated_at": "2014-03-10T01:05:12Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/143#discussion_r10409769",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/143",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/10409769"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/143#discussion_r10409769"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/143"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/10409772",
        "pull_request_review_id": null,
        "id": 10409772,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDA5Nzcy",
        "diff_hunk": "@@ -248,13 +275,50 @@ func (d PostgresDialect) QuoteField(f string) string {\n }\n \n func (d PostgresDialect) QuotedTableForQuery(schema string, table string) string {\n-\tif (strings.TrimSpace(schema) == \"\") {\n+\tif strings.TrimSpace(schema) == \"\" {\n \t\treturn d.QuoteField(table)\n \t}\n \n \treturn schema + \".\" + d.QuoteField(table)\n }\n \n+func (d PostgresDialect) IsVarWithVal(token string) (int, bool) {\n+\tif token == \"?\" {\n+\t\treturn -1, true\n+\t}\n+\n+\tif len(token) < 2 {\n+\t\treturn -1, false\n+\t}\n+\n+\thasDollarSign := token[0:1] == \"$\"",
        "path": "dialect.go",
        "position": null,
        "original_position": 69,
        "commit_id": "d494e0d3058fc4afc96e433d4968ce9ba0967738",
        "original_commit_id": "64fd583c38c3a236818ee00c4bdb665acae4f45c",
        "user": {
            "login": "ttacon",
            "id": 2548998,
            "node_id": "MDQ6VXNlcjI1NDg5OTg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/2548998?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ttacon",
            "html_url": "https://github.com/ttacon",
            "followers_url": "https://api.github.com/users/ttacon/followers",
            "following_url": "https://api.github.com/users/ttacon/following{/other_user}",
            "gists_url": "https://api.github.com/users/ttacon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ttacon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ttacon/subscriptions",
            "organizations_url": "https://api.github.com/users/ttacon/orgs",
            "repos_url": "https://api.github.com/users/ttacon/repos",
            "events_url": "https://api.github.com/users/ttacon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ttacon/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ya... my bad.\n",
        "created_at": "2014-03-08T16:36:24Z",
        "updated_at": "2014-03-10T01:05:12Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/143#discussion_r10409772",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/143",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/10409772"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/143#discussion_r10409772"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/143"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/10409774",
        "pull_request_review_id": null,
        "id": 10409774,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDA5Nzc0",
        "diff_hunk": "@@ -248,13 +275,50 @@ func (d PostgresDialect) QuoteField(f string) string {\n }\n \n func (d PostgresDialect) QuotedTableForQuery(schema string, table string) string {\n-\tif (strings.TrimSpace(schema) == \"\") {\n+\tif strings.TrimSpace(schema) == \"\" {\n \t\treturn d.QuoteField(table)\n \t}\n \n \treturn schema + \".\" + d.QuoteField(table)\n }\n \n+func (d PostgresDialect) IsVarWithVal(token string) (int, bool) {\n+\tif token == \"?\" {\n+\t\treturn -1, true\n+\t}\n+\n+\tif len(token) < 2 {\n+\t\treturn -1, false\n+\t}\n+\n+\thasDollarSign := token[0:1] == \"$\"\n+\tval, isNumberErr := strconv.Atoi(token[1:])\n+\n+\treturn val, hasDollarSign && isNumberErr == nil\n+}\n+\n+func (d PostgresDialect) ExpandPlaceholder(i int, v interface{}) (string, int) {\n+\tval, ok := v.(List)\n+\tif !ok {\n+\t\treturn \"\", i\n+\t}\n+\n+\tnumVals := len(val.Vals)\n+\tif numVals == 1 {\n+\t\treturn fmt.Sprintf(\"$%d\", i+1), i + 1\n+\t}\n+\n+\ttoReturn := \"\"\n+\tif i == 0 {\n+\t\tnumVals++\n+\t}\n+\tfor j := 1; j < numVals; j++ {",
        "path": "dialect.go",
        "position": null,
        "original_position": 90,
        "commit_id": "d494e0d3058fc4afc96e433d4968ce9ba0967738",
        "original_commit_id": "64fd583c38c3a236818ee00c4bdb665acae4f45c",
        "user": {
            "login": "ttacon",
            "id": 2548998,
            "node_id": "MDQ6VXNlcjI1NDg5OTg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/2548998?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ttacon",
            "html_url": "https://github.com/ttacon",
            "followers_url": "https://api.github.com/users/ttacon/followers",
            "following_url": "https://api.github.com/users/ttacon/following{/other_user}",
            "gists_url": "https://api.github.com/users/ttacon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ttacon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ttacon/subscriptions",
            "organizations_url": "https://api.github.com/users/ttacon/orgs",
            "repos_url": "https://api.github.com/users/ttacon/repos",
            "events_url": "https://api.github.com/users/ttacon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ttacon/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It makes me cry as well :(\n",
        "created_at": "2014-03-08T16:36:46Z",
        "updated_at": "2014-03-10T01:05:12Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/143#discussion_r10409774",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/143",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/10409774"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/143#discussion_r10409774"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/143"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/11327901",
        "pull_request_review_id": null,
        "id": 11327901,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzI3OTAx",
        "diff_hunk": "@@ -4,9 +4,14 @@ import (\n \t\"errors\"\n \t\"fmt\"\n \t\"reflect\"\n+\t\"strconv\"\n \t\"strings\"\n )\n \n+const (\n+\tNOT_POSTGRES = -2",
        "path": "dialect.go",
        "position": 9,
        "original_position": 9,
        "commit_id": "d494e0d3058fc4afc96e433d4968ce9ba0967738",
        "original_commit_id": "d494e0d3058fc4afc96e433d4968ce9ba0967738",
        "user": {
            "login": "robfig",
            "id": 536325,
            "node_id": "MDQ6VXNlcjUzNjMyNQ==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/536325?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/robfig",
            "html_url": "https://github.com/robfig",
            "followers_url": "https://api.github.com/users/robfig/followers",
            "following_url": "https://api.github.com/users/robfig/following{/other_user}",
            "gists_url": "https://api.github.com/users/robfig/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/robfig/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/robfig/subscriptions",
            "organizations_url": "https://api.github.com/users/robfig/orgs",
            "repos_url": "https://api.github.com/users/robfig/repos",
            "events_url": "https://api.github.com/users/robfig/events{/privacy}",
            "received_events_url": "https://api.github.com/users/robfig/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Despite being constant, this should be lowerCamel, to avoid exporting it \n",
        "created_at": "2014-04-06T20:28:00Z",
        "updated_at": "2014-04-06T20:28:00Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/143#discussion_r11327901",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/143",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/11327901"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/143#discussion_r11327901"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/143"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/11328002",
        "pull_request_review_id": null,
        "id": 11328002,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzI4MDAy",
        "diff_hunk": "@@ -51,6 +56,14 @@ type Dialect interface {\n \t// schema - The schema that <table> lives in\n \t// table - The table name\n \tQuotedTableForQuery(schema string, table string) string\n+\n+\t// Checks whether the given string is a variable string in\n+\t// the current dialect and returns its value if it has one\n+\t// (such as 1 if the placeholder was $1)\n+\tIsVarWithVal(token string) (int, bool)\n+\n+\t// Expands a placeholder string if v is of type gorp.list\n+\tExpandPlaceholder(i int, v interface{}) (string, int)",
        "path": "dialect.go",
        "position": 26,
        "original_position": 26,
        "commit_id": "d494e0d3058fc4afc96e433d4968ce9ba0967738",
        "original_commit_id": "d494e0d3058fc4afc96e433d4968ce9ba0967738",
        "user": {
            "login": "robfig",
            "id": 536325,
            "node_id": "MDQ6VXNlcjUzNjMyNQ==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/536325?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/robfig",
            "html_url": "https://github.com/robfig",
            "followers_url": "https://api.github.com/users/robfig/followers",
            "following_url": "https://api.github.com/users/robfig/following{/other_user}",
            "gists_url": "https://api.github.com/users/robfig/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/robfig/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/robfig/subscriptions",
            "organizations_url": "https://api.github.com/users/robfig/orgs",
            "repos_url": "https://api.github.com/users/robfig/repos",
            "events_url": "https://api.github.com/users/robfig/events{/privacy}",
            "received_events_url": "https://api.github.com/users/robfig/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "if v is of type gorp.List, can you accept gorp.List as the argument type?\n\nAlso, what is \"i\"?  I assume it's the placeholder index, but the name is not descriptive and it's not mentioned in the comments.  On that note, what are the return values? \n",
        "created_at": "2014-04-06T20:53:34Z",
        "updated_at": "2014-04-06T20:53:34Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/143#discussion_r11328002",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/143",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/11328002"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/143#discussion_r11328002"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/143"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/11328013",
        "pull_request_review_id": null,
        "id": 11328013,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzI4MDEz",
        "diff_hunk": "@@ -147,6 +160,24 @@ func (d SqliteDialect) QuotedTableForQuery(schema string, table string) string {\n \treturn d.QuoteField(table)\n }\n \n+func (d SqliteDialect) IsVarWithVal(token string) (int, bool) {\n+\treturn NOT_POSTGRES, token == \"?\"",
        "path": "dialect.go",
        "position": 35,
        "original_position": 35,
        "commit_id": "d494e0d3058fc4afc96e433d4968ce9ba0967738",
        "original_commit_id": "d494e0d3058fc4afc96e433d4968ce9ba0967738",
        "user": {
            "login": "robfig",
            "id": 536325,
            "node_id": "MDQ6VXNlcjUzNjMyNQ==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/536325?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/robfig",
            "html_url": "https://github.com/robfig",
            "followers_url": "https://api.github.com/users/robfig/followers",
            "following_url": "https://api.github.com/users/robfig/following{/other_user}",
            "gists_url": "https://api.github.com/users/robfig/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/robfig/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/robfig/subscriptions",
            "organizations_url": "https://api.github.com/users/robfig/orgs",
            "repos_url": "https://api.github.com/users/robfig/repos",
            "events_url": "https://api.github.com/users/robfig/events{/privacy}",
            "received_events_url": "https://api.github.com/users/robfig/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I see.. since Postgres is not necessarily the only database that has numbered placeholders, I think a better name would be \"noIndex\" or something\n",
        "created_at": "2014-04-06T20:56:04Z",
        "updated_at": "2014-04-06T20:56:04Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/143#discussion_r11328013",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/143",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/11328013"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/143#discussion_r11328013"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/143"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/11327994",
        "pull_request_review_id": null,
        "id": 11327994,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzI3OTk0",
        "diff_hunk": "@@ -51,6 +56,14 @@ type Dialect interface {\n \t// schema - The schema that <table> lives in\n \t// table - The table name\n \tQuotedTableForQuery(schema string, table string) string\n+\n+\t// Checks whether the given string is a variable string in\n+\t// the current dialect and returns its value if it has one\n+\t// (such as 1 if the placeholder was $1)\n+\tIsVarWithVal(token string) (int, bool)",
        "path": "dialect.go",
        "position": 23,
        "original_position": 23,
        "commit_id": "d494e0d3058fc4afc96e433d4968ce9ba0967738",
        "original_commit_id": "d494e0d3058fc4afc96e433d4968ce9ba0967738",
        "user": {
            "login": "robfig",
            "id": 536325,
            "node_id": "MDQ6VXNlcjUzNjMyNQ==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/536325?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/robfig",
            "html_url": "https://github.com/robfig",
            "followers_url": "https://api.github.com/users/robfig/followers",
            "following_url": "https://api.github.com/users/robfig/following{/other_user}",
            "gists_url": "https://api.github.com/users/robfig/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/robfig/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/robfig/subscriptions",
            "organizations_url": "https://api.github.com/users/robfig/orgs",
            "repos_url": "https://api.github.com/users/robfig/repos",
            "events_url": "https://api.github.com/users/robfig/events{/privacy}",
            "received_events_url": "https://api.github.com/users/robfig/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think \"IsPlaceholder\" would be a better name.  Or, since it returns the placeholder index, maybe \"PlaceholderIndex\".  \n",
        "created_at": "2014-04-06T20:51:55Z",
        "updated_at": "2014-04-06T20:56:44Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/143#discussion_r11327994",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/143",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/11327994"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/143#discussion_r11327994"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/143"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/11328020",
        "pull_request_review_id": null,
        "id": 11328020,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzI4MDIw",
        "diff_hunk": "@@ -4,9 +4,14 @@ import (\n \t\"errors\"\n \t\"fmt\"\n \t\"reflect\"\n+\t\"strconv\"\n \t\"strings\"\n )\n \n+const (\n+\tNOT_POSTGRES = -2",
        "path": "dialect.go",
        "position": 9,
        "original_position": 9,
        "commit_id": "d494e0d3058fc4afc96e433d4968ce9ba0967738",
        "original_commit_id": "d494e0d3058fc4afc96e433d4968ce9ba0967738",
        "user": {
            "login": "robfig",
            "id": 536325,
            "node_id": "MDQ6VXNlcjUzNjMyNQ==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/536325?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/robfig",
            "html_url": "https://github.com/robfig",
            "followers_url": "https://api.github.com/users/robfig/followers",
            "following_url": "https://api.github.com/users/robfig/following{/other_user}",
            "gists_url": "https://api.github.com/users/robfig/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/robfig/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/robfig/subscriptions",
            "organizations_url": "https://api.github.com/users/robfig/orgs",
            "repos_url": "https://api.github.com/users/robfig/repos",
            "events_url": "https://api.github.com/users/robfig/events{/privacy}",
            "received_events_url": "https://api.github.com/users/robfig/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "this is meant to indicate absence of an index.  The builtin string index functions use -1 -- any reason you chose -2 ?\n",
        "created_at": "2014-04-06T20:57:33Z",
        "updated_at": "2014-04-06T20:57:33Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/143#discussion_r11328020",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/143",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/11328020"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/143#discussion_r11328020"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/143"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/11328101",
        "pull_request_review_id": null,
        "id": 11328101,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzI4MTAx",
        "diff_hunk": "@@ -248,13 +279,51 @@ func (d PostgresDialect) QuoteField(f string) string {\n }\n \n func (d PostgresDialect) QuotedTableForQuery(schema string, table string) string {\n-\tif (strings.TrimSpace(schema) == \"\") {\n+\tif strings.TrimSpace(schema) == \"\" {\n \t\treturn d.QuoteField(table)\n \t}\n \n \treturn schema + \".\" + d.QuoteField(table)\n }\n \n+func (d PostgresDialect) IsVarWithVal(token string) (int, bool) {\n+\tif token == \"?\" {\n+\t\treturn -1, true\n+\t}\n+\n+\tif len(token) < 2 {\n+\t\treturn -1, false\n+\t}\n+\n+\thasDollarSign := token[0] == '$'\n+\tval, isNumberErr := strconv.Atoi(token[1:])\n+\n+\treturn val, hasDollarSign && isNumberErr == nil\n+}\n+\n+func (d PostgresDialect) ExpandPlaceholder(i int, v interface{}) (string, int) {\n+\tval, ok := v.(list)\n+\tif !ok {\n+\t\treturn \"\", i\n+\t}\n+\n+\tnumVals := len(val.vals)\n+\tif numVals == 1 {\n+\t\treturn fmt.Sprintf(\"$%d\", i+1), i + 1\n+\t}\n+\n+\tif i == 0 {\n+\t\tnumVals++\n+\t}\n+\n+\tvals := make([]string, numVals-1)\n+\tfor j := 1; j < numVals; j++ {\n+\t\tvals[j-1] = fmt.Sprintf(\"%d\", i+j)",
        "path": "dialect.go",
        "position": 99,
        "original_position": 99,
        "commit_id": "d494e0d3058fc4afc96e433d4968ce9ba0967738",
        "original_commit_id": "d494e0d3058fc4afc96e433d4968ce9ba0967738",
        "user": {
            "login": "robfig",
            "id": 536325,
            "node_id": "MDQ6VXNlcjUzNjMyNQ==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/536325?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/robfig",
            "html_url": "https://github.com/robfig",
            "followers_url": "https://api.github.com/users/robfig/followers",
            "following_url": "https://api.github.com/users/robfig/following{/other_user}",
            "gists_url": "https://api.github.com/users/robfig/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/robfig/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/robfig/subscriptions",
            "organizations_url": "https://api.github.com/users/robfig/orgs",
            "repos_url": "https://api.github.com/users/robfig/repos",
            "events_url": "https://api.github.com/users/robfig/events{/privacy}",
            "received_events_url": "https://api.github.com/users/robfig/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Prefer strconv.FormatInt/FormatUint/Itoa to sprintf when you just want to print a number.  \n\nTo double check myself, I benchmarked this routine using both, expanding a 1000-length list and found it to be 4x faster \n\nBenchmarkStrconv       20000         85257 ns/op       46904 B/op       1003 allocs/op\nBenchmarkSprintf       10000        264648 ns/op       46904 B/op       1003 allocs/op\n",
        "created_at": "2014-04-06T21:15:05Z",
        "updated_at": "2014-04-06T21:15:05Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/143#discussion_r11328101",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/143",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/11328101"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/143#discussion_r11328101"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/143"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/11328126",
        "pull_request_review_id": null,
        "id": 11328126,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzI4MTI2",
        "diff_hunk": "@@ -1569,6 +1581,152 @@ func expandNamedQuery(m *DbMap, query string, keyGetter func(key string) reflect\n \t}), args\n }\n \n+// list is the struct that a group of arguments is actually tagged by\n+// so that then can be identified when expanding a query's arguments.\n+type list struct {\n+\tvals []interface{}\n+}\n+\n+// List is used to tag slices in a query's argument list\n+// whose placeholder should be expanded to reflect the\n+// size of the slice. A common example would be:\n+// 'select * from t where v in (?)', gorp.List(vals)\n+func List(i ...interface{}) interface{} {",
        "path": "gorp.go",
        "position": 55,
        "original_position": 55,
        "commit_id": "d494e0d3058fc4afc96e433d4968ce9ba0967738",
        "original_commit_id": "d494e0d3058fc4afc96e433d4968ce9ba0967738",
        "user": {
            "login": "robfig",
            "id": 536325,
            "node_id": "MDQ6VXNlcjUzNjMyNQ==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/536325?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/robfig",
            "html_url": "https://github.com/robfig",
            "followers_url": "https://api.github.com/users/robfig/followers",
            "following_url": "https://api.github.com/users/robfig/following{/other_user}",
            "gists_url": "https://api.github.com/users/robfig/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/robfig/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/robfig/subscriptions",
            "organizations_url": "https://api.github.com/users/robfig/orgs",
            "repos_url": "https://api.github.com/users/robfig/repos",
            "events_url": "https://api.github.com/users/robfig/events{/privacy}",
            "received_events_url": "https://api.github.com/users/robfig/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "What happens if the user passes multiple arguments to gorp.List ? \n\nThe use case of joining slices into a single id list is not really the common case, and it can be handled easily with append -- I think it's better to make \"list\" a regular type that callers can use themselves.\n\ne.g.\ngorp.List{slice} \n\nwhich would then help to improve the Dialect interface\n\nEDIT: Maybe I'm confused, perhaps this is for inline slices instead?  e.g. gorp.List(1, 2, 3).. but then that has a different representation as gorp.List([]int{1, 2, 3})\n",
        "created_at": "2014-04-06T21:19:13Z",
        "updated_at": "2014-04-06T21:21:09Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/143#discussion_r11328126",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/143",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/11328126"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/143#discussion_r11328126"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/143"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/11328183",
        "pull_request_review_id": null,
        "id": 11328183,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzI4MTgz",
        "diff_hunk": "@@ -1569,6 +1581,152 @@ func expandNamedQuery(m *DbMap, query string, keyGetter func(key string) reflect\n \t}), args\n }\n \n+// list is the struct that a group of arguments is actually tagged by\n+// so that then can be identified when expanding a query's arguments.\n+type list struct {\n+\tvals []interface{}\n+}\n+\n+// List is used to tag slices in a query's argument list\n+// whose placeholder should be expanded to reflect the\n+// size of the slice. A common example would be:\n+// 'select * from t where v in (?)', gorp.List(vals)\n+func List(i ...interface{}) interface{} {\n+\treturn list{i}\n+}\n+\n+// maybeExpandListQuery expands a parameter to the appropriate number of\n+// occurrences to reflect the number of values given in a gorp.List in\n+// the args list to allow for queries of the form \"... where val in (?)\"\n+// to repeat the ? the appropriate number of times\n+func maybeExpandListQuery(m *DbMap, query string, args ...interface{}) (string, []interface{}, error) {\n+\tlistIndices, err := getListIndices(args...)\n+\tif err != nil {\n+\t\treturn \"\", nil, err\n+\t}\n+\n+\tif len(listIndices) == 0 {\n+\t\treturn query, args, nil\n+\t}\n+\n+\tplaceholderIndices, max := getPlaceholderIndices(m, query)\n+\texpandedPlaceholders := make([]string, len(listIndices))\n+\tfor i, listIndex := range listIndices {\n+\t\texpandedPlaceholders[i], max = m.Dialect.ExpandPlaceholder(max, args[listIndex])\n+\t}\n+\n+\tnewQuery := \"\"\n+\tlastIndex := 0\n+\texpandArgsInOrder := false\n+\tfor i, pIndex := range placeholderIndices {\n+\t\tif pIndex[1] == NOT_POSTGRES {\n+\t\t\tnewQuery += query[lastIndex:pIndex[0]] + expandedPlaceholders[i]\n+\t\t\tlastIndex = pIndex[0] + 1\n+\t\t} else {\n+\t\t\texpandArgsInOrder = true\n+\t\t\tif pIndex[0] == pIndex[2] {\n+\t\t\t\tnewQuery += query[lastIndex:pIndex[2]] + expandedPlaceholders[i][2:]\n+\t\t\t\tlastIndex = pIndex[2] + 1\n+\t\t\t} else {\n+\t\t\t\tnewQuery += query[lastIndex:pIndex[2]] + expandedPlaceholders[pIndex[1]-1]\n+\t\t\t\tlastIndex = pIndex[2]\n+\t\t\t}\n+\n+\t\t}\n+\t}\n+\n+\tvar newArgs []interface{}\n+\tif expandArgsInOrder {\n+\t\tvar atEnd []interface{}\n+\t\tfor _, arg := range args {\n+\t\t\tif l, ok := arg.(list); ok {\n+\t\t\t\tif len(l.vals) > 1 {\n+\t\t\t\t\tnewArgs = append(newArgs, l.vals[0])\n+\t\t\t\t\tatEnd = append(atEnd, l.vals[1:]...)\n+\t\t\t\t} else {\n+\t\t\t\t\tnewArgs = append(newArgs, l.vals[0])\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tnewArgs = append(newArgs, arg)\n+\t\t\t}\n+\t\t}\n+\t\tnewArgs = append(newArgs, atEnd...)\n+\t} else {\n+\t\tfor _, arg := range args {\n+\t\t\tif l, ok := arg.(list); ok {\n+\t\t\t\tnewArgs = append(newArgs, l.vals...)\n+\t\t\t} else {\n+\t\t\t\tnewArgs = append(newArgs, arg)\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\treturn newQuery + query[lastIndex:], newArgs, nil\n+}\n+\n+// getPlaceholderIndices returns all occurences of placeholders\n+// in the given query string with associated information where\n+// the second slice is of the form [0]=token start in query string,\n+// [1] = token value (useful in Postgres queries, will be -2 if\n+// not Postgres query and will be -1 in Postgres query using ?\n+// instead of $#) and [2]=token end\n+func getPlaceholderIndices(m *DbMap, query string) ([][]int, int) {",
        "path": "gorp.go",
        "position": 134,
        "original_position": 134,
        "commit_id": "d494e0d3058fc4afc96e433d4968ce9ba0967738",
        "original_commit_id": "d494e0d3058fc4afc96e433d4968ce9ba0967738",
        "user": {
            "login": "robfig",
            "id": 536325,
            "node_id": "MDQ6VXNlcjUzNjMyNQ==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/536325?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/robfig",
            "html_url": "https://github.com/robfig",
            "followers_url": "https://api.github.com/users/robfig/followers",
            "following_url": "https://api.github.com/users/robfig/following{/other_user}",
            "gists_url": "https://api.github.com/users/robfig/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/robfig/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/robfig/subscriptions",
            "organizations_url": "https://api.github.com/users/robfig/orgs",
            "repos_url": "https://api.github.com/users/robfig/repos",
            "events_url": "https://api.github.com/users/robfig/events{/privacy}",
            "received_events_url": "https://api.github.com/users/robfig/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "instead of returning [][]int , perhaps you can return a slice of some unexported type, to make things more readable?\n",
        "created_at": "2014-04-06T21:31:57Z",
        "updated_at": "2014-04-06T21:31:57Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/143#discussion_r11328183",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/143",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/11328183"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/143#discussion_r11328183"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/143"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/11328220",
        "pull_request_review_id": null,
        "id": 11328220,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzI4MjIw",
        "diff_hunk": "@@ -1569,6 +1581,152 @@ func expandNamedQuery(m *DbMap, query string, keyGetter func(key string) reflect\n \t}), args\n }\n \n+// list is the struct that a group of arguments is actually tagged by\n+// so that then can be identified when expanding a query's arguments.\n+type list struct {\n+\tvals []interface{}\n+}\n+\n+// List is used to tag slices in a query's argument list\n+// whose placeholder should be expanded to reflect the\n+// size of the slice. A common example would be:\n+// 'select * from t where v in (?)', gorp.List(vals)\n+func List(i ...interface{}) interface{} {\n+\treturn list{i}\n+}\n+\n+// maybeExpandListQuery expands a parameter to the appropriate number of\n+// occurrences to reflect the number of values given in a gorp.List in\n+// the args list to allow for queries of the form \"... where val in (?)\"\n+// to repeat the ? the appropriate number of times\n+func maybeExpandListQuery(m *DbMap, query string, args ...interface{}) (string, []interface{}, error) {\n+\tlistIndices, err := getListIndices(args...)\n+\tif err != nil {\n+\t\treturn \"\", nil, err\n+\t}\n+\n+\tif len(listIndices) == 0 {\n+\t\treturn query, args, nil\n+\t}\n+\n+\tplaceholderIndices, max := getPlaceholderIndices(m, query)\n+\texpandedPlaceholders := make([]string, len(listIndices))\n+\tfor i, listIndex := range listIndices {\n+\t\texpandedPlaceholders[i], max = m.Dialect.ExpandPlaceholder(max, args[listIndex])\n+\t}\n+\n+\tnewQuery := \"\"\n+\tlastIndex := 0\n+\texpandArgsInOrder := false\n+\tfor i, pIndex := range placeholderIndices {\n+\t\tif pIndex[1] == NOT_POSTGRES {\n+\t\t\tnewQuery += query[lastIndex:pIndex[0]] + expandedPlaceholders[i]\n+\t\t\tlastIndex = pIndex[0] + 1\n+\t\t} else {\n+\t\t\texpandArgsInOrder = true\n+\t\t\tif pIndex[0] == pIndex[2] {\n+\t\t\t\tnewQuery += query[lastIndex:pIndex[2]] + expandedPlaceholders[i][2:]\n+\t\t\t\tlastIndex = pIndex[2] + 1\n+\t\t\t} else {\n+\t\t\t\tnewQuery += query[lastIndex:pIndex[2]] + expandedPlaceholders[pIndex[1]-1]\n+\t\t\t\tlastIndex = pIndex[2]\n+\t\t\t}\n+\n+\t\t}\n+\t}\n+\n+\tvar newArgs []interface{}\n+\tif expandArgsInOrder {\n+\t\tvar atEnd []interface{}\n+\t\tfor _, arg := range args {\n+\t\t\tif l, ok := arg.(list); ok {\n+\t\t\t\tif len(l.vals) > 1 {\n+\t\t\t\t\tnewArgs = append(newArgs, l.vals[0])\n+\t\t\t\t\tatEnd = append(atEnd, l.vals[1:]...)\n+\t\t\t\t} else {\n+\t\t\t\t\tnewArgs = append(newArgs, l.vals[0])\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tnewArgs = append(newArgs, arg)\n+\t\t\t}\n+\t\t}\n+\t\tnewArgs = append(newArgs, atEnd...)\n+\t} else {\n+\t\tfor _, arg := range args {\n+\t\t\tif l, ok := arg.(list); ok {\n+\t\t\t\tnewArgs = append(newArgs, l.vals...)\n+\t\t\t} else {\n+\t\t\t\tnewArgs = append(newArgs, arg)\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\treturn newQuery + query[lastIndex:], newArgs, nil\n+}\n+\n+// getPlaceholderIndices returns all occurences of placeholders\n+// in the given query string with associated information where\n+// the second slice is of the form [0]=token start in query string,\n+// [1] = token value (useful in Postgres queries, will be -2 if\n+// not Postgres query and will be -1 in Postgres query using ?\n+// instead of $#) and [2]=token end\n+func getPlaceholderIndices(m *DbMap, query string) ([][]int, int) {\n+\tvar varInfo [][]int\n+\n+\tmaxVal := 0\n+\tinToken := false\n+\ttokenStart := 0\n+\n+\tfor i, runeVal := range query {\n+\t\tif unicode.IsSpace(runeVal) || runeVal == '(' || runeVal == ')' || runeVal == ',' || runeVal == ';' {",
        "path": "gorp.go",
        "position": 142,
        "original_position": 142,
        "commit_id": "d494e0d3058fc4afc96e433d4968ce9ba0967738",
        "original_commit_id": "d494e0d3058fc4afc96e433d4968ce9ba0967738",
        "user": {
            "login": "robfig",
            "id": 536325,
            "node_id": "MDQ6VXNlcjUzNjMyNQ==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/536325?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/robfig",
            "html_url": "https://github.com/robfig",
            "followers_url": "https://api.github.com/users/robfig/followers",
            "following_url": "https://api.github.com/users/robfig/following{/other_user}",
            "gists_url": "https://api.github.com/users/robfig/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/robfig/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/robfig/subscriptions",
            "organizations_url": "https://api.github.com/users/robfig/orgs",
            "repos_url": "https://api.github.com/users/robfig/repos",
            "events_url": "https://api.github.com/users/robfig/events{/privacy}",
            "received_events_url": "https://api.github.com/users/robfig/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "maybe newline should also count\n\nI tried to find a full list, but the MySQL grammar didn't help much\nhttps://github.com/twitter/mysql/blob/master/sql/sql_yacc.yy\n",
        "created_at": "2014-04-06T21:38:34Z",
        "updated_at": "2014-04-06T21:38:47Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/143#discussion_r11328220",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/143",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/11328220"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/143#discussion_r11328220"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/143"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/11328241",
        "pull_request_review_id": null,
        "id": 11328241,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzI4MjQx",
        "diff_hunk": "@@ -1569,6 +1581,152 @@ func expandNamedQuery(m *DbMap, query string, keyGetter func(key string) reflect\n \t}), args\n }\n \n+// list is the struct that a group of arguments is actually tagged by\n+// so that then can be identified when expanding a query's arguments.\n+type list struct {\n+\tvals []interface{}\n+}\n+\n+// List is used to tag slices in a query's argument list\n+// whose placeholder should be expanded to reflect the\n+// size of the slice. A common example would be:\n+// 'select * from t where v in (?)', gorp.List(vals)\n+func List(i ...interface{}) interface{} {\n+\treturn list{i}\n+}\n+\n+// maybeExpandListQuery expands a parameter to the appropriate number of\n+// occurrences to reflect the number of values given in a gorp.List in\n+// the args list to allow for queries of the form \"... where val in (?)\"\n+// to repeat the ? the appropriate number of times\n+func maybeExpandListQuery(m *DbMap, query string, args ...interface{}) (string, []interface{}, error) {\n+\tlistIndices, err := getListIndices(args...)\n+\tif err != nil {\n+\t\treturn \"\", nil, err\n+\t}\n+\n+\tif len(listIndices) == 0 {\n+\t\treturn query, args, nil\n+\t}\n+\n+\tplaceholderIndices, max := getPlaceholderIndices(m, query)\n+\texpandedPlaceholders := make([]string, len(listIndices))\n+\tfor i, listIndex := range listIndices {\n+\t\texpandedPlaceholders[i], max = m.Dialect.ExpandPlaceholder(max, args[listIndex])\n+\t}\n+\n+\tnewQuery := \"\"\n+\tlastIndex := 0\n+\texpandArgsInOrder := false\n+\tfor i, pIndex := range placeholderIndices {\n+\t\tif pIndex[1] == NOT_POSTGRES {\n+\t\t\tnewQuery += query[lastIndex:pIndex[0]] + expandedPlaceholders[i]\n+\t\t\tlastIndex = pIndex[0] + 1\n+\t\t} else {\n+\t\t\texpandArgsInOrder = true\n+\t\t\tif pIndex[0] == pIndex[2] {\n+\t\t\t\tnewQuery += query[lastIndex:pIndex[2]] + expandedPlaceholders[i][2:]\n+\t\t\t\tlastIndex = pIndex[2] + 1\n+\t\t\t} else {\n+\t\t\t\tnewQuery += query[lastIndex:pIndex[2]] + expandedPlaceholders[pIndex[1]-1]\n+\t\t\t\tlastIndex = pIndex[2]\n+\t\t\t}\n+\n+\t\t}\n+\t}\n+\n+\tvar newArgs []interface{}\n+\tif expandArgsInOrder {\n+\t\tvar atEnd []interface{}\n+\t\tfor _, arg := range args {\n+\t\t\tif l, ok := arg.(list); ok {\n+\t\t\t\tif len(l.vals) > 1 {\n+\t\t\t\t\tnewArgs = append(newArgs, l.vals[0])\n+\t\t\t\t\tatEnd = append(atEnd, l.vals[1:]...)\n+\t\t\t\t} else {\n+\t\t\t\t\tnewArgs = append(newArgs, l.vals[0])\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tnewArgs = append(newArgs, arg)\n+\t\t\t}\n+\t\t}\n+\t\tnewArgs = append(newArgs, atEnd...)\n+\t} else {\n+\t\tfor _, arg := range args {\n+\t\t\tif l, ok := arg.(list); ok {\n+\t\t\t\tnewArgs = append(newArgs, l.vals...)\n+\t\t\t} else {\n+\t\t\t\tnewArgs = append(newArgs, arg)\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\treturn newQuery + query[lastIndex:], newArgs, nil\n+}\n+\n+// getPlaceholderIndices returns all occurences of placeholders\n+// in the given query string with associated information where\n+// the second slice is of the form [0]=token start in query string,\n+// [1] = token value (useful in Postgres queries, will be -2 if\n+// not Postgres query and will be -1 in Postgres query using ?\n+// instead of $#) and [2]=token end\n+func getPlaceholderIndices(m *DbMap, query string) ([][]int, int) {\n+\tvar varInfo [][]int\n+\n+\tmaxVal := 0\n+\tinToken := false\n+\ttokenStart := 0\n+\n+\tfor i, runeVal := range query {\n+\t\tif unicode.IsSpace(runeVal) || runeVal == '(' || runeVal == ')' || runeVal == ',' || runeVal == ';' {\n+\t\t\tif inToken {\n+\t\t\t\ttoken := query[tokenStart:i]\n+\t\t\t\tif val, isVar := m.Dialect.IsVarWithVal(token); isVar {\n+\t\t\t\t\tendOfToken := i\n+\t\t\t\t\tif token == \"?\" {\n+\t\t\t\t\t\tendOfToken = tokenStart",
        "path": "gorp.go",
        "position": 148,
        "original_position": 148,
        "commit_id": "d494e0d3058fc4afc96e433d4968ce9ba0967738",
        "original_commit_id": "d494e0d3058fc4afc96e433d4968ce9ba0967738",
        "user": {
            "login": "robfig",
            "id": 536325,
            "node_id": "MDQ6VXNlcjUzNjMyNQ==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/536325?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/robfig",
            "html_url": "https://github.com/robfig",
            "followers_url": "https://api.github.com/users/robfig/followers",
            "following_url": "https://api.github.com/users/robfig/following{/other_user}",
            "gists_url": "https://api.github.com/users/robfig/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/robfig/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/robfig/subscriptions",
            "organizations_url": "https://api.github.com/users/robfig/orgs",
            "repos_url": "https://api.github.com/users/robfig/repos",
            "events_url": "https://api.github.com/users/robfig/events{/privacy}",
            "received_events_url": "https://api.github.com/users/robfig/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I don't get it. \n\nwhy would endOfToken not be i ? \n\nAlso, this uses knowledge of the placeholder scheme (== \"?\") outside of the dialect, which seems suspicious.\n",
        "created_at": "2014-04-06T21:43:04Z",
        "updated_at": "2014-04-06T21:43:04Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/143#discussion_r11328241",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/143",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/11328241"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/143#discussion_r11328241"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/143"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/11328259",
        "pull_request_review_id": null,
        "id": 11328259,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzI4MjU5",
        "diff_hunk": "@@ -1569,6 +1581,152 @@ func expandNamedQuery(m *DbMap, query string, keyGetter func(key string) reflect\n \t}), args\n }\n \n+// list is the struct that a group of arguments is actually tagged by\n+// so that then can be identified when expanding a query's arguments.\n+type list struct {\n+\tvals []interface{}\n+}\n+\n+// List is used to tag slices in a query's argument list\n+// whose placeholder should be expanded to reflect the\n+// size of the slice. A common example would be:\n+// 'select * from t where v in (?)', gorp.List(vals)\n+func List(i ...interface{}) interface{} {\n+\treturn list{i}\n+}\n+\n+// maybeExpandListQuery expands a parameter to the appropriate number of\n+// occurrences to reflect the number of values given in a gorp.List in\n+// the args list to allow for queries of the form \"... where val in (?)\"\n+// to repeat the ? the appropriate number of times\n+func maybeExpandListQuery(m *DbMap, query string, args ...interface{}) (string, []interface{}, error) {\n+\tlistIndices, err := getListIndices(args...)\n+\tif err != nil {\n+\t\treturn \"\", nil, err\n+\t}\n+\n+\tif len(listIndices) == 0 {\n+\t\treturn query, args, nil\n+\t}\n+\n+\tplaceholderIndices, max := getPlaceholderIndices(m, query)\n+\texpandedPlaceholders := make([]string, len(listIndices))\n+\tfor i, listIndex := range listIndices {\n+\t\texpandedPlaceholders[i], max = m.Dialect.ExpandPlaceholder(max, args[listIndex])\n+\t}\n+\n+\tnewQuery := \"\"\n+\tlastIndex := 0\n+\texpandArgsInOrder := false\n+\tfor i, pIndex := range placeholderIndices {\n+\t\tif pIndex[1] == NOT_POSTGRES {\n+\t\t\tnewQuery += query[lastIndex:pIndex[0]] + expandedPlaceholders[i]\n+\t\t\tlastIndex = pIndex[0] + 1\n+\t\t} else {\n+\t\t\texpandArgsInOrder = true\n+\t\t\tif pIndex[0] == pIndex[2] {\n+\t\t\t\tnewQuery += query[lastIndex:pIndex[2]] + expandedPlaceholders[i][2:]\n+\t\t\t\tlastIndex = pIndex[2] + 1\n+\t\t\t} else {\n+\t\t\t\tnewQuery += query[lastIndex:pIndex[2]] + expandedPlaceholders[pIndex[1]-1]\n+\t\t\t\tlastIndex = pIndex[2]\n+\t\t\t}\n+\n+\t\t}\n+\t}\n+\n+\tvar newArgs []interface{}\n+\tif expandArgsInOrder {\n+\t\tvar atEnd []interface{}\n+\t\tfor _, arg := range args {\n+\t\t\tif l, ok := arg.(list); ok {\n+\t\t\t\tif len(l.vals) > 1 {\n+\t\t\t\t\tnewArgs = append(newArgs, l.vals[0])\n+\t\t\t\t\tatEnd = append(atEnd, l.vals[1:]...)\n+\t\t\t\t} else {\n+\t\t\t\t\tnewArgs = append(newArgs, l.vals[0])\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tnewArgs = append(newArgs, arg)\n+\t\t\t}\n+\t\t}\n+\t\tnewArgs = append(newArgs, atEnd...)\n+\t} else {\n+\t\tfor _, arg := range args {\n+\t\t\tif l, ok := arg.(list); ok {\n+\t\t\t\tnewArgs = append(newArgs, l.vals...)\n+\t\t\t} else {\n+\t\t\t\tnewArgs = append(newArgs, arg)\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\treturn newQuery + query[lastIndex:], newArgs, nil\n+}\n+\n+// getPlaceholderIndices returns all occurences of placeholders\n+// in the given query string with associated information where\n+// the second slice is of the form [0]=token start in query string,\n+// [1] = token value (useful in Postgres queries, will be -2 if\n+// not Postgres query and will be -1 in Postgres query using ?\n+// instead of $#) and [2]=token end\n+func getPlaceholderIndices(m *DbMap, query string) ([][]int, int) {\n+\tvar varInfo [][]int\n+\n+\tmaxVal := 0\n+\tinToken := false\n+\ttokenStart := 0\n+\n+\tfor i, runeVal := range query {\n+\t\tif unicode.IsSpace(runeVal) || runeVal == '(' || runeVal == ')' || runeVal == ',' || runeVal == ';' {\n+\t\t\tif inToken {\n+\t\t\t\ttoken := query[tokenStart:i]\n+\t\t\t\tif val, isVar := m.Dialect.IsVarWithVal(token); isVar {\n+\t\t\t\t\tendOfToken := i\n+\t\t\t\t\tif token == \"?\" {\n+\t\t\t\t\t\tendOfToken = tokenStart\n+\t\t\t\t\t}\n+\t\t\t\t\tvarInfo = append(varInfo, []int{tokenStart, val, endOfToken})\n+\t\t\t\t\tif val > maxVal {\n+\t\t\t\t\t\tmaxVal = val\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tinToken = false\n+\t\t\t}\n+\t\t} else {\n+\t\t\tif !inToken {\n+\t\t\t\ttokenStart = i\n+\t\t\t\tinToken = true\n+\t\t\t}\n+\t\t}\n+\t}\n+\tif inToken {\n+\t\ttoken := query[tokenStart:]\n+\t\tif val, isVar := m.Dialect.IsVarWithVal(token); isVar {\n+\t\t\tvarInfo = append(varInfo, []int{tokenStart, val, len(query)})\n+\t\t\tif val > maxVal {\n+\t\t\t\tmaxVal = val\n+\t\t\t}\n+\t\t}\n+\t}\n+\treturn varInfo, maxVal\n+}\n+\n+// getListIndices simply returns all indices in the args\n+// list which are of the type gorp.List\n+func getListIndices(args ...interface{}) ([]int, error) {\n+\tvar is []int\n+\tfor i, arg := range args {\n+\t\tif l, ok := arg.(list); ok {\n+\t\t\tif len(l.vals) == 0 {\n+\t\t\t\treturn nil, sql.ErrNoRows",
        "path": "gorp.go",
        "position": 183,
        "original_position": 183,
        "commit_id": "d494e0d3058fc4afc96e433d4968ce9ba0967738",
        "original_commit_id": "d494e0d3058fc4afc96e433d4968ce9ba0967738",
        "user": {
            "login": "robfig",
            "id": 536325,
            "node_id": "MDQ6VXNlcjUzNjMyNQ==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/536325?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/robfig",
            "html_url": "https://github.com/robfig",
            "followers_url": "https://api.github.com/users/robfig/followers",
            "following_url": "https://api.github.com/users/robfig/following{/other_user}",
            "gists_url": "https://api.github.com/users/robfig/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/robfig/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/robfig/subscriptions",
            "organizations_url": "https://api.github.com/users/robfig/orgs",
            "repos_url": "https://api.github.com/users/robfig/repos",
            "events_url": "https://api.github.com/users/robfig/events{/privacy}",
            "received_events_url": "https://api.github.com/users/robfig/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "What about the query \n\n``` sql\nselect * from foos where id in (?) or id in (?)\n```\n",
        "created_at": "2014-04-06T21:48:28Z",
        "updated_at": "2014-04-06T21:48:28Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/143#discussion_r11328259",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/143",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/11328259"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/143#discussion_r11328259"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/143"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/11328278",
        "pull_request_review_id": null,
        "id": 11328278,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzI4Mjc4",
        "diff_hunk": "@@ -1569,6 +1581,152 @@ func expandNamedQuery(m *DbMap, query string, keyGetter func(key string) reflect\n \t}), args\n }\n \n+// list is the struct that a group of arguments is actually tagged by\n+// so that then can be identified when expanding a query's arguments.\n+type list struct {\n+\tvals []interface{}\n+}\n+\n+// List is used to tag slices in a query's argument list\n+// whose placeholder should be expanded to reflect the\n+// size of the slice. A common example would be:\n+// 'select * from t where v in (?)', gorp.List(vals)\n+func List(i ...interface{}) interface{} {\n+\treturn list{i}\n+}\n+\n+// maybeExpandListQuery expands a parameter to the appropriate number of\n+// occurrences to reflect the number of values given in a gorp.List in\n+// the args list to allow for queries of the form \"... where val in (?)\"\n+// to repeat the ? the appropriate number of times\n+func maybeExpandListQuery(m *DbMap, query string, args ...interface{}) (string, []interface{}, error) {\n+\tlistIndices, err := getListIndices(args...)\n+\tif err != nil {\n+\t\treturn \"\", nil, err\n+\t}\n+\n+\tif len(listIndices) == 0 {\n+\t\treturn query, args, nil\n+\t}\n+\n+\tplaceholderIndices, max := getPlaceholderIndices(m, query)\n+\texpandedPlaceholders := make([]string, len(listIndices))\n+\tfor i, listIndex := range listIndices {\n+\t\texpandedPlaceholders[i], max = m.Dialect.ExpandPlaceholder(max, args[listIndex])\n+\t}\n+\n+\tnewQuery := \"\"\n+\tlastIndex := 0\n+\texpandArgsInOrder := false\n+\tfor i, pIndex := range placeholderIndices {\n+\t\tif pIndex[1] == NOT_POSTGRES {\n+\t\t\tnewQuery += query[lastIndex:pIndex[0]] + expandedPlaceholders[i]\n+\t\t\tlastIndex = pIndex[0] + 1\n+\t\t} else {\n+\t\t\texpandArgsInOrder = true\n+\t\t\tif pIndex[0] == pIndex[2] {\n+\t\t\t\tnewQuery += query[lastIndex:pIndex[2]] + expandedPlaceholders[i][2:]",
        "path": "gorp.go",
        "position": 89,
        "original_position": 89,
        "commit_id": "d494e0d3058fc4afc96e433d4968ce9ba0967738",
        "original_commit_id": "d494e0d3058fc4afc96e433d4968ce9ba0967738",
        "user": {
            "login": "robfig",
            "id": 536325,
            "node_id": "MDQ6VXNlcjUzNjMyNQ==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/536325?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/robfig",
            "html_url": "https://github.com/robfig",
            "followers_url": "https://api.github.com/users/robfig/followers",
            "following_url": "https://api.github.com/users/robfig/following{/other_user}",
            "gists_url": "https://api.github.com/users/robfig/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/robfig/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/robfig/subscriptions",
            "organizations_url": "https://api.github.com/users/robfig/orgs",
            "repos_url": "https://api.github.com/users/robfig/repos",
            "events_url": "https://api.github.com/users/robfig/events{/privacy}",
            "received_events_url": "https://api.github.com/users/robfig/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "this is really impenetrable.  \n\nwhat is in expandedPlaceholders[i] and why would you slice it starting at 2 if pIndex[0] == pIndex[2]? \n",
        "created_at": "2014-04-06T21:53:32Z",
        "updated_at": "2014-04-06T21:53:32Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/143#discussion_r11328278",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/143",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/11328278"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/143#discussion_r11328278"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/143"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/11328312",
        "pull_request_review_id": null,
        "id": 11328312,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzI4MzEy",
        "diff_hunk": "@@ -1569,6 +1581,152 @@ func expandNamedQuery(m *DbMap, query string, keyGetter func(key string) reflect\n \t}), args\n }\n \n+// list is the struct that a group of arguments is actually tagged by\n+// so that then can be identified when expanding a query's arguments.\n+type list struct {\n+\tvals []interface{}\n+}\n+\n+// List is used to tag slices in a query's argument list\n+// whose placeholder should be expanded to reflect the\n+// size of the slice. A common example would be:\n+// 'select * from t where v in (?)', gorp.List(vals)\n+func List(i ...interface{}) interface{} {\n+\treturn list{i}\n+}\n+\n+// maybeExpandListQuery expands a parameter to the appropriate number of\n+// occurrences to reflect the number of values given in a gorp.List in\n+// the args list to allow for queries of the form \"... where val in (?)\"\n+// to repeat the ? the appropriate number of times\n+func maybeExpandListQuery(m *DbMap, query string, args ...interface{}) (string, []interface{}, error) {\n+\tlistIndices, err := getListIndices(args...)\n+\tif err != nil {\n+\t\treturn \"\", nil, err\n+\t}\n+\n+\tif len(listIndices) == 0 {\n+\t\treturn query, args, nil\n+\t}\n+\n+\tplaceholderIndices, max := getPlaceholderIndices(m, query)\n+\texpandedPlaceholders := make([]string, len(listIndices))\n+\tfor i, listIndex := range listIndices {\n+\t\texpandedPlaceholders[i], max = m.Dialect.ExpandPlaceholder(max, args[listIndex])\n+\t}\n+\n+\tnewQuery := \"\"\n+\tlastIndex := 0\n+\texpandArgsInOrder := false\n+\tfor i, pIndex := range placeholderIndices {\n+\t\tif pIndex[1] == NOT_POSTGRES {\n+\t\t\tnewQuery += query[lastIndex:pIndex[0]] + expandedPlaceholders[i]\n+\t\t\tlastIndex = pIndex[0] + 1\n+\t\t} else {\n+\t\t\texpandArgsInOrder = true\n+\t\t\tif pIndex[0] == pIndex[2] {\n+\t\t\t\tnewQuery += query[lastIndex:pIndex[2]] + expandedPlaceholders[i][2:]\n+\t\t\t\tlastIndex = pIndex[2] + 1\n+\t\t\t} else {\n+\t\t\t\tnewQuery += query[lastIndex:pIndex[2]] + expandedPlaceholders[pIndex[1]-1]\n+\t\t\t\tlastIndex = pIndex[2]\n+\t\t\t}\n+\n+\t\t}\n+\t}\n+\n+\tvar newArgs []interface{}\n+\tif expandArgsInOrder {",
        "path": "gorp.go",
        "position": 100,
        "original_position": 100,
        "commit_id": "d494e0d3058fc4afc96e433d4968ce9ba0967738",
        "original_commit_id": "d494e0d3058fc4afc96e433d4968ce9ba0967738",
        "user": {
            "login": "robfig",
            "id": 536325,
            "node_id": "MDQ6VXNlcjUzNjMyNQ==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/536325?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/robfig",
            "html_url": "https://github.com/robfig",
            "followers_url": "https://api.github.com/users/robfig/followers",
            "following_url": "https://api.github.com/users/robfig/following{/other_user}",
            "gists_url": "https://api.github.com/users/robfig/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/robfig/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/robfig/subscriptions",
            "organizations_url": "https://api.github.com/users/robfig/orgs",
            "repos_url": "https://api.github.com/users/robfig/repos",
            "events_url": "https://api.github.com/users/robfig/events{/privacy}",
            "received_events_url": "https://api.github.com/users/robfig/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Perhaps a comment above this paragraph would be helpful\n\n``` go\n// Flatten the list-valued arguments into the existing arg list. \n```\n",
        "created_at": "2014-04-06T22:05:23Z",
        "updated_at": "2014-04-06T22:05:23Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/143#discussion_r11328312",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/143",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/11328312"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/143#discussion_r11328312"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/143"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/11328314",
        "pull_request_review_id": null,
        "id": 11328314,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzI4MzE0",
        "diff_hunk": "@@ -1569,6 +1581,152 @@ func expandNamedQuery(m *DbMap, query string, keyGetter func(key string) reflect\n \t}), args\n }\n \n+// list is the struct that a group of arguments is actually tagged by\n+// so that then can be identified when expanding a query's arguments.\n+type list struct {\n+\tvals []interface{}\n+}\n+\n+// List is used to tag slices in a query's argument list\n+// whose placeholder should be expanded to reflect the\n+// size of the slice. A common example would be:\n+// 'select * from t where v in (?)', gorp.List(vals)\n+func List(i ...interface{}) interface{} {\n+\treturn list{i}\n+}\n+\n+// maybeExpandListQuery expands a parameter to the appropriate number of\n+// occurrences to reflect the number of values given in a gorp.List in\n+// the args list to allow for queries of the form \"... where val in (?)\"\n+// to repeat the ? the appropriate number of times\n+func maybeExpandListQuery(m *DbMap, query string, args ...interface{}) (string, []interface{}, error) {\n+\tlistIndices, err := getListIndices(args...)\n+\tif err != nil {\n+\t\treturn \"\", nil, err\n+\t}\n+\n+\tif len(listIndices) == 0 {\n+\t\treturn query, args, nil\n+\t}\n+\n+\tplaceholderIndices, max := getPlaceholderIndices(m, query)\n+\texpandedPlaceholders := make([]string, len(listIndices))\n+\tfor i, listIndex := range listIndices {\n+\t\texpandedPlaceholders[i], max = m.Dialect.ExpandPlaceholder(max, args[listIndex])\n+\t}\n+\n+\tnewQuery := \"\"\n+\tlastIndex := 0\n+\texpandArgsInOrder := false\n+\tfor i, pIndex := range placeholderIndices {\n+\t\tif pIndex[1] == NOT_POSTGRES {\n+\t\t\tnewQuery += query[lastIndex:pIndex[0]] + expandedPlaceholders[i]\n+\t\t\tlastIndex = pIndex[0] + 1\n+\t\t} else {\n+\t\t\texpandArgsInOrder = true\n+\t\t\tif pIndex[0] == pIndex[2] {\n+\t\t\t\tnewQuery += query[lastIndex:pIndex[2]] + expandedPlaceholders[i][2:]\n+\t\t\t\tlastIndex = pIndex[2] + 1\n+\t\t\t} else {\n+\t\t\t\tnewQuery += query[lastIndex:pIndex[2]] + expandedPlaceholders[pIndex[1]-1]\n+\t\t\t\tlastIndex = pIndex[2]\n+\t\t\t}\n+\n+\t\t}\n+\t}\n+\n+\tvar newArgs []interface{}\n+\tif expandArgsInOrder {\n+\t\tvar atEnd []interface{}\n+\t\tfor _, arg := range args {\n+\t\t\tif l, ok := arg.(list); ok {\n+\t\t\t\tif len(l.vals) > 1 {",
        "path": "gorp.go",
        "position": 104,
        "original_position": 104,
        "commit_id": "d494e0d3058fc4afc96e433d4968ce9ba0967738",
        "original_commit_id": "d494e0d3058fc4afc96e433d4968ce9ba0967738",
        "user": {
            "login": "robfig",
            "id": 536325,
            "node_id": "MDQ6VXNlcjUzNjMyNQ==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/536325?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/robfig",
            "html_url": "https://github.com/robfig",
            "followers_url": "https://api.github.com/users/robfig/followers",
            "following_url": "https://api.github.com/users/robfig/following{/other_user}",
            "gists_url": "https://api.github.com/users/robfig/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/robfig/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/robfig/subscriptions",
            "organizations_url": "https://api.github.com/users/robfig/orgs",
            "repos_url": "https://api.github.com/users/robfig/repos",
            "events_url": "https://api.github.com/users/robfig/events{/privacy}",
            "received_events_url": "https://api.github.com/users/robfig/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "the if statement can go just around the atEnd = ... line, and no need for an else.\n\n(in fact, technically you can execute both lines without any if around it at all) \n",
        "created_at": "2014-04-06T22:05:50Z",
        "updated_at": "2014-04-06T22:11:07Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/143#discussion_r11328314",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/143",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/11328314"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/143#discussion_r11328314"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/143"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/11328340",
        "pull_request_review_id": null,
        "id": 11328340,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzI4MzQw",
        "diff_hunk": "@@ -1436,6 +1436,240 @@ func TestMysqlPanicIfDialectNotInitialized(t *testing.T) {\n \tdb.CreateTables()\n }\n \n+func TestListExpansion(t *testing.T) {\n+\tdbmap := initDbMap()\n+\tdefer dbmap.DropTables()\n+\n+\tinv1 := &Invoice{0, 100, 200, \"a\", 0, false}\n+\tinv2 := &Invoice{0, 100, 200, \"b\", 0, true}\n+\tinv3 := &Invoice{0, 100, 200, \"c\", 0, false}\n+\t_insert(dbmap, inv1, inv2, inv3)\n+\n+\tvar invoices []*Invoice\n+\t_, err := dbmap.Select(\n+\t\t&invoices,\n+\t\t\"select memo from invoice_test where id in (?)\",\n+\t\tList(1, 2, 3))",
        "path": "gorp_test.go",
        "position": 17,
        "original_position": 17,
        "commit_id": "d494e0d3058fc4afc96e433d4968ce9ba0967738",
        "original_commit_id": "d494e0d3058fc4afc96e433d4968ce9ba0967738",
        "user": {
            "login": "robfig",
            "id": 536325,
            "node_id": "MDQ6VXNlcjUzNjMyNQ==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/536325?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/robfig",
            "html_url": "https://github.com/robfig",
            "followers_url": "https://api.github.com/users/robfig/followers",
            "following_url": "https://api.github.com/users/robfig/following{/other_user}",
            "gists_url": "https://api.github.com/users/robfig/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/robfig/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/robfig/subscriptions",
            "organizations_url": "https://api.github.com/users/robfig/orgs",
            "repos_url": "https://api.github.com/users/robfig/repos",
            "events_url": "https://api.github.com/users/robfig/events{/privacy}",
            "received_events_url": "https://api.github.com/users/robfig/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "relating to my earlier question about the interface\n\nso\n\n``` go\nList(1, 2, 3)\n```\n\nworks but \n\n``` go\nvar ids = []int{1, 2, 3}\nList(ids) \n```\n\nwould not work.\n\nI would argue that most real-world applications would have a list of ids in a slice, rather than using variadic hard-coding.\n",
        "created_at": "2014-04-06T22:15:10Z",
        "updated_at": "2014-04-06T22:15:10Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/143#discussion_r11328340",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/143",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/11328340"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/143#discussion_r11328340"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/143"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/11328358",
        "pull_request_review_id": null,
        "id": 11328358,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzI4MzU4",
        "diff_hunk": "@@ -1436,6 +1436,240 @@ func TestMysqlPanicIfDialectNotInitialized(t *testing.T) {\n \tdb.CreateTables()\n }\n \n+func TestListExpansion(t *testing.T) {\n+\tdbmap := initDbMap()\n+\tdefer dbmap.DropTables()\n+\n+\tinv1 := &Invoice{0, 100, 200, \"a\", 0, false}\n+\tinv2 := &Invoice{0, 100, 200, \"b\", 0, true}\n+\tinv3 := &Invoice{0, 100, 200, \"c\", 0, false}\n+\t_insert(dbmap, inv1, inv2, inv3)\n+\n+\tvar invoices []*Invoice\n+\t_, err := dbmap.Select(\n+\t\t&invoices,\n+\t\t\"select memo from invoice_test where id in (?)\",\n+\t\tList(1, 2, 3))\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\n+\tif len(invoices) != 3 {\n+\t\tt.Errorf(\"incorrect number of structs retrieved from database, got %d, expected 3\", len(invoices))\n+\t}\n+}\n+\n+func TestListExpansion_OnlyOne(t *testing.T) {\n+\tdbmap := initDbMap()\n+\tdefer dbmap.DropTables()\n+\n+\tinv1 := &Invoice{0, 100, 200, \"a\", 0, false}\n+\tinv2 := &Invoice{0, 100, 200, \"b\", 0, true}\n+\tinv3 := &Invoice{0, 100, 200, \"c\", 0, false}\n+\t_insert(dbmap, inv1, inv2, inv3)\n+\n+\tvar invoices []*Invoice\n+\t_, err := dbmap.Select(\n+\t\t&invoices,\n+\t\t\"select memo from invoice_test where id in (?)\",\n+\t\tList(3, 4, 5))\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\n+\tif len(invoices) != 1 {\n+\t\tt.Errorf(\"incorrect number of structs retrieved from database, got %d, expected 3\", len(invoices))\n+\t}\n+}\n+\n+func TestListExpansion_NothingToExpand(t *testing.T) {\n+\tdbmap := initDbMap()\n+\tdefer dbmap.DropTables()\n+\n+\tinv1 := &Invoice{0, 100, 200, \"a\", 0, false}\n+\tinv2 := &Invoice{0, 100, 200, \"b\", 0, true}\n+\tinv3 := &Invoice{0, 100, 200, \"c\", 0, false}\n+\t_insert(dbmap, inv1, inv2, inv3)\n+\n+\tvar invoices []*Invoice\n+\t_, err := dbmap.Select(\n+\t\t&invoices,\n+\t\t\"select memo from invoice_test where id in (?)\",\n+\t\tList())\n+\tif err != sql.ErrNoRows {\n+\t\tt.Error(\"expansion of nothing should have resulted in sql.ErrNoRows\")\n+\t}\n+}\n+\n+func TestListExpansion_PlaceHolderInStringLiteral(t *testing.T) {",
        "path": "gorp_test.go",
        "position": 69,
        "original_position": 69,
        "commit_id": "d494e0d3058fc4afc96e433d4968ce9ba0967738",
        "original_commit_id": "d494e0d3058fc4afc96e433d4968ce9ba0967738",
        "user": {
            "login": "robfig",
            "id": 536325,
            "node_id": "MDQ6VXNlcjUzNjMyNQ==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/536325?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/robfig",
            "html_url": "https://github.com/robfig",
            "followers_url": "https://api.github.com/users/robfig/followers",
            "following_url": "https://api.github.com/users/robfig/following{/other_user}",
            "gists_url": "https://api.github.com/users/robfig/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/robfig/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/robfig/subscriptions",
            "organizations_url": "https://api.github.com/users/robfig/orgs",
            "repos_url": "https://api.github.com/users/robfig/repos",
            "events_url": "https://api.github.com/users/robfig/events{/privacy}",
            "received_events_url": "https://api.github.com/users/robfig/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Is this meant to be handled?  I suspect it would be incorrectly classified as a placeholder since tokenization doesn't take account of strings, as far as I saw.\n\n``` sql\nselect * from foo where memo <> ' ? '\n```\n",
        "created_at": "2014-04-06T22:21:12Z",
        "updated_at": "2014-04-06T22:21:12Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/143#discussion_r11328358",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/143",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/11328358"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/143#discussion_r11328358"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/143"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/11328362",
        "pull_request_review_id": null,
        "id": 11328362,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzI4MzYy",
        "diff_hunk": "@@ -1436,6 +1436,240 @@ func TestMysqlPanicIfDialectNotInitialized(t *testing.T) {\n \tdb.CreateTables()\n }\n \n+func TestListExpansion(t *testing.T) {\n+\tdbmap := initDbMap()\n+\tdefer dbmap.DropTables()\n+\n+\tinv1 := &Invoice{0, 100, 200, \"a\", 0, false}\n+\tinv2 := &Invoice{0, 100, 200, \"b\", 0, true}\n+\tinv3 := &Invoice{0, 100, 200, \"c\", 0, false}\n+\t_insert(dbmap, inv1, inv2, inv3)\n+\n+\tvar invoices []*Invoice\n+\t_, err := dbmap.Select(\n+\t\t&invoices,\n+\t\t\"select memo from invoice_test where id in (?)\",\n+\t\tList(1, 2, 3))\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\n+\tif len(invoices) != 3 {\n+\t\tt.Errorf(\"incorrect number of structs retrieved from database, got %d, expected 3\", len(invoices))\n+\t}\n+}\n+\n+func TestListExpansion_OnlyOne(t *testing.T) {\n+\tdbmap := initDbMap()\n+\tdefer dbmap.DropTables()\n+\n+\tinv1 := &Invoice{0, 100, 200, \"a\", 0, false}\n+\tinv2 := &Invoice{0, 100, 200, \"b\", 0, true}\n+\tinv3 := &Invoice{0, 100, 200, \"c\", 0, false}\n+\t_insert(dbmap, inv1, inv2, inv3)\n+\n+\tvar invoices []*Invoice\n+\t_, err := dbmap.Select(\n+\t\t&invoices,\n+\t\t\"select memo from invoice_test where id in (?)\",\n+\t\tList(3, 4, 5))\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\n+\tif len(invoices) != 1 {\n+\t\tt.Errorf(\"incorrect number of structs retrieved from database, got %d, expected 3\", len(invoices))\n+\t}\n+}\n+\n+func TestListExpansion_NothingToExpand(t *testing.T) {\n+\tdbmap := initDbMap()\n+\tdefer dbmap.DropTables()\n+\n+\tinv1 := &Invoice{0, 100, 200, \"a\", 0, false}\n+\tinv2 := &Invoice{0, 100, 200, \"b\", 0, true}\n+\tinv3 := &Invoice{0, 100, 200, \"c\", 0, false}\n+\t_insert(dbmap, inv1, inv2, inv3)\n+\n+\tvar invoices []*Invoice\n+\t_, err := dbmap.Select(\n+\t\t&invoices,\n+\t\t\"select memo from invoice_test where id in (?)\",\n+\t\tList())\n+\tif err != sql.ErrNoRows {\n+\t\tt.Error(\"expansion of nothing should have resulted in sql.ErrNoRows\")\n+\t}\n+}\n+\n+func TestListExpansion_PlaceHolderInStringLiteral(t *testing.T) {\n+\tdbmap := initDbMap()\n+\tdefer dbmap.DropTables()\n+\n+\tinv1 := &Invoice{0, 100, 200, \"a\", 0, false}\n+\tinv2 := &Invoice{0, 100, 200, \"b\", 0, true}\n+\tinv3 := &Invoice{0, 100, 200, \"c\", 0, false}\n+\t_insert(dbmap, inv1, inv2, inv3)\n+\n+\tvar invoices []*Invoice\n+\t_, err := dbmap.Select(\n+\t\t&invoices,\n+\t\t`\n+        select \n+          memo \n+        from \n+          invoice_test \n+        where \n+          memo <> 'What was my memo?'\n+          and id in (?)`,\n+\t\tList(1, 2, 3))\n+\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\n+\tif len(invoices) != 3 {\n+\t\tt.Errorf(\"incorrect number of structs retrieved from database, got %d, expected 3\", len(invoices))\n+\t}\n+}\n+\n+func TestmaybeExpandListQuery(t *testing.T) {",
        "path": "gorp_test.go",
        "position": 100,
        "original_position": 100,
        "commit_id": "d494e0d3058fc4afc96e433d4968ce9ba0967738",
        "original_commit_id": "d494e0d3058fc4afc96e433d4968ce9ba0967738",
        "user": {
            "login": "robfig",
            "id": 536325,
            "node_id": "MDQ6VXNlcjUzNjMyNQ==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/536325?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/robfig",
            "html_url": "https://github.com/robfig",
            "followers_url": "https://api.github.com/users/robfig/followers",
            "following_url": "https://api.github.com/users/robfig/following{/other_user}",
            "gists_url": "https://api.github.com/users/robfig/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/robfig/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/robfig/subscriptions",
            "organizations_url": "https://api.github.com/users/robfig/orgs",
            "repos_url": "https://api.github.com/users/robfig/repos",
            "events_url": "https://api.github.com/users/robfig/events{/privacy}",
            "received_events_url": "https://api.github.com/users/robfig/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "should also test expanding two lists in the same query. \n",
        "created_at": "2014-04-06T22:22:05Z",
        "updated_at": "2014-04-06T22:22:05Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/143#discussion_r11328362",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/143",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/11328362"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/143#discussion_r11328362"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/143"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/18431628",
        "pull_request_review_id": null,
        "id": 18431628,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDMxNjI4",
        "diff_hunk": "@@ -579,6 +612,10 @@ type OracleDialect struct{}\n \n func (d OracleDialect) QuerySuffix() string { return \"\" }\n \n+func (d OracleDialect) CreateIndexSuffix() string { return \"using\" }\n+\n+func (d OracleDialect) DropIndexSuffix() string { return \"on\" }\n+",
        "path": "dialect.go",
        "position": null,
        "original_position": 77,
        "commit_id": "eea8450fb26303e8e1a158f1e2de8d71981e2ad9",
        "original_commit_id": "91450078cfbff34cf2648557a108f10649310d00",
        "user": {
            "login": "glycerine",
            "id": 445247,
            "node_id": "MDQ6VXNlcjQ0NTI0Nw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/445247?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/glycerine",
            "html_url": "https://github.com/glycerine",
            "followers_url": "https://api.github.com/users/glycerine/followers",
            "following_url": "https://api.github.com/users/glycerine/following{/other_user}",
            "gists_url": "https://api.github.com/users/glycerine/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/glycerine/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/glycerine/subscriptions",
            "organizations_url": "https://api.github.com/users/glycerine/orgs",
            "repos_url": "https://api.github.com/users/glycerine/repos",
            "events_url": "https://api.github.com/users/glycerine/events{/privacy}",
            "received_events_url": "https://api.github.com/users/glycerine/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@klaidliadon, could you see what Oracle really wants here, I just made a guess my copying the MySQL setting. I don't have anyway to test against Oracle, and you are credited with the Oracle contribution.\n\nThank you very much!\nJason\n",
        "created_at": "2014-10-04T20:53:36Z",
        "updated_at": "2014-10-04T21:05:35Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/201#discussion_r18431628",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/201",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/18431628"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/201#discussion_r18431628"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/201"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/18431635",
        "pull_request_review_id": null,
        "id": 18431635,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDMxNjM1",
        "diff_hunk": "@@ -570,6 +600,9 @@ func (d SqlServerDialect) IfTableNotExists(command, schema, table string) string\n \treturn s\n }\n \n+func (d SqlServerDialect) CreateIndexSuffix() string { return \"\" }\n+func (d SqlServerDialect) DropIndexSuffix() string   { return \"\" }",
        "path": "dialect.go",
        "position": 65,
        "original_position": 65,
        "commit_id": "eea8450fb26303e8e1a158f1e2de8d71981e2ad9",
        "original_commit_id": "91450078cfbff34cf2648557a108f10649310d00",
        "user": {
            "login": "glycerine",
            "id": 445247,
            "node_id": "MDQ6VXNlcjQ0NTI0Nw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/445247?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/glycerine",
            "html_url": "https://github.com/glycerine",
            "followers_url": "https://api.github.com/users/glycerine/followers",
            "following_url": "https://api.github.com/users/glycerine/following{/other_user}",
            "gists_url": "https://api.github.com/users/glycerine/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/glycerine/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/glycerine/subscriptions",
            "organizations_url": "https://api.github.com/users/glycerine/orgs",
            "repos_url": "https://api.github.com/users/glycerine/repos",
            "events_url": "https://api.github.com/users/glycerine/events{/privacy}",
            "received_events_url": "https://api.github.com/users/glycerine/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@qrawl, Could you suggest what SqlServer actually wants here?  I don't have any way to verify what works.\n\nThank you very much!\n\nJason\n",
        "created_at": "2014-10-04T20:54:40Z",
        "updated_at": "2014-10-04T21:05:35Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/201#discussion_r18431635",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/201",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/18431635"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/201#discussion_r18431635"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/201"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/20391717",
        "pull_request_review_id": null,
        "id": 20391717,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzkxNzE3",
        "diff_hunk": "@@ -17,6 +13,11 @@ import (\n \t\"strings\"\n \t\"testing\"\n \t\"time\"\n+\n+\t_ \"github.com/go-sql-driver/mysql\"\n+\t_ \"github.com/lib/pq\"\n+\t_ \"github.com/mattn/go-sqlite3\"\n+\t_ \"github.com/ziutek/mymysql/godrv\"",
        "path": "gorp_test.go",
        "position": 19,
        "original_position": 19,
        "commit_id": "c97fbece855b40aae35135ca9dc2d9ad15a7584f",
        "original_commit_id": "c97fbece855b40aae35135ca9dc2d9ad15a7584f",
        "user": {
            "login": "jimtla",
            "id": 873742,
            "node_id": "MDQ6VXNlcjg3Mzc0Mg==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/873742?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jimtla",
            "html_url": "https://github.com/jimtla",
            "followers_url": "https://api.github.com/users/jimtla/followers",
            "following_url": "https://api.github.com/users/jimtla/following{/other_user}",
            "gists_url": "https://api.github.com/users/jimtla/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jimtla/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jimtla/subscriptions",
            "organizations_url": "https://api.github.com/users/jimtla/orgs",
            "repos_url": "https://api.github.com/users/jimtla/repos",
            "events_url": "https://api.github.com/users/jimtla/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jimtla/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This was done automatically by `goimports` - It may be nice to leave it this way for any contributors who use that tool, but I can revert it if you'd prefer.\n",
        "created_at": "2014-11-14T22:35:22Z",
        "updated_at": "2014-11-14T22:35:22Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/59#discussion_r20391717",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/59",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/20391717"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/59#discussion_r20391717"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/59"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/24072331",
        "pull_request_review_id": null,
        "id": 24072331,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MDcyMzMx",
        "diff_hunk": "@@ -604,6 +642,115 @@ func (c *ColumnMap) SetMaxSize(size int) *ColumnMap {\n \treturn c\n }\n \n+// IndexMap represents a mapping between a Go struct field and a single\n+// index in a table.\n+// Unique and MaxSize only inform the\n+// CreateTables() function and are not used by Insert/Update/Delete/Get.\n+type IndexMap struct {\n+\t// Index name in db table\n+\tIndexName string\n+\n+\t// If true, \" unique\" is added to create index statements.\n+\t// Not used elsewhere\n+\tUnique bool\n+\n+\t// Index type supported by Dialect\n+\t// Postgres:  B-tree, Hash, GiST and GIN.\n+\t// Mysql: Btree, Hash.\n+\t// Sqlite: nil.\n+\tIndexType string",
        "path": "gorp.go",
        "position": 72,
        "original_position": 72,
        "commit_id": "eea8450fb26303e8e1a158f1e2de8d71981e2ad9",
        "original_commit_id": "eea8450fb26303e8e1a158f1e2de8d71981e2ad9",
        "user": {
            "login": "GeertJohan",
            "id": 564501,
            "node_id": "MDQ6VXNlcjU2NDUwMQ==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/564501?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/GeertJohan",
            "html_url": "https://github.com/GeertJohan",
            "followers_url": "https://api.github.com/users/GeertJohan/followers",
            "following_url": "https://api.github.com/users/GeertJohan/following{/other_user}",
            "gists_url": "https://api.github.com/users/GeertJohan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/GeertJohan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/GeertJohan/subscriptions",
            "organizations_url": "https://api.github.com/users/GeertJohan/orgs",
            "repos_url": "https://api.github.com/users/GeertJohan/repos",
            "events_url": "https://api.github.com/users/GeertJohan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/GeertJohan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The difference between `Btree` and `B-tree` is just the naming right?\nSo could we find a way to have one identifier that works for both Postgres and MySQL, to make migration between the two seamless when using Btree?\n",
        "created_at": "2015-02-04T09:50:04Z",
        "updated_at": "2015-02-04T09:50:04Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/201#discussion_r24072331",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/201",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/24072331"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/201#discussion_r24072331"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/201"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/24072643",
        "pull_request_review_id": null,
        "id": 24072643,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MDcyNjQz",
        "diff_hunk": "@@ -604,6 +642,115 @@ func (c *ColumnMap) SetMaxSize(size int) *ColumnMap {\n \treturn c\n }\n \n+// IndexMap represents a mapping between a Go struct field and a single\n+// index in a table.\n+// Unique and MaxSize only inform the\n+// CreateTables() function and are not used by Insert/Update/Delete/Get.\n+type IndexMap struct {\n+\t// Index name in db table\n+\tIndexName string\n+\n+\t// If true, \" unique\" is added to create index statements.\n+\t// Not used elsewhere\n+\tUnique bool\n+\n+\t// Index type supported by Dialect\n+\t// Postgres:  B-tree, Hash, GiST and GIN.\n+\t// Mysql: Btree, Hash.\n+\t// Sqlite: nil.\n+\tIndexType string\n+\n+\t// Columns name for single and multiple indexes\n+\tcolumns []string\n+}\n+\n+// Rename allows you to specify the index name in the table\n+//\n+// Example:  table.IndMap(\"customer_test_idx\").Rename(\"customer_idx\")\n+//\n+func (idx *IndexMap) Rename(indname string) *IndexMap {\n+\tidx.IndexName = indname\n+\treturn idx\n+}\n+\n+// SetUnique adds \"unique\" to the create index statements for this\n+// index, if b is true.\n+func (idx *IndexMap) SetUnique(b bool) *IndexMap {\n+\tidx.Unique = b\n+\treturn idx\n+}\n+\n+// SetIndexType specifies the index type supported by chousen SQL Dialect\n+func (idx *IndexMap) SetIndexType(indtype string) *IndexMap {\n+\tidx.IndexType = indtype\n+\treturn idx\n+}\n+\n+func (m *DbMap) CreateIndex() error {\n+\n+\tvar err error\n+\tdialect := reflect.TypeOf(m.Dialect)\n+\tfor _, table := range m.tables {\n+\t\tfor _, index := range table.indexes {\n+\n+\t\t\ts := bytes.Buffer{}\n+\t\t\ts.WriteString(\"create\")\n+\t\t\tif index.Unique {\n+\t\t\t\ts.WriteString(\" unique\")\n+\t\t\t}\n+\t\t\ts.WriteString(\" index\")\n+\t\t\ts.WriteString(fmt.Sprintf(\" %s on %s\", index.IndexName,\n+\t\t\t\ttable.TableName))\n+\t\t\tif dname := dialect.Name(); dname == \"PostgresDialect\" && index.IndexType != \"\" {\n+\t\t\t\ts.WriteString(fmt.Sprintf(\" %s %s\", m.Dialect.CreateIndexSuffix(), index.IndexType))\n+\t\t\t}",
        "path": "gorp.go",
        "position": 117,
        "original_position": 117,
        "commit_id": "eea8450fb26303e8e1a158f1e2de8d71981e2ad9",
        "original_commit_id": "eea8450fb26303e8e1a158f1e2de8d71981e2ad9",
        "user": {
            "login": "GeertJohan",
            "id": 564501,
            "node_id": "MDQ6VXNlcjU2NDUwMQ==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/564501?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/GeertJohan",
            "html_url": "https://github.com/GeertJohan",
            "followers_url": "https://api.github.com/users/GeertJohan/followers",
            "following_url": "https://api.github.com/users/GeertJohan/following{/other_user}",
            "gists_url": "https://api.github.com/users/GeertJohan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/GeertJohan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/GeertJohan/subscriptions",
            "organizations_url": "https://api.github.com/users/GeertJohan/orgs",
            "repos_url": "https://api.github.com/users/GeertJohan/repos",
            "events_url": "https://api.github.com/users/GeertJohan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/GeertJohan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "As @coopernurse mentioned in https://github.com/go-gorp/gorp/pull/97#issuecomment-30667564\nThe Dialect's name is inspected here, the query generation should be moved to the Dialect implementations. The whole purpose of the Dialect is to handle the different in SQL Syntaxes.\n",
        "created_at": "2015-02-04T09:56:42Z",
        "updated_at": "2015-02-04T09:57:24Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/201#discussion_r24072643",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/201",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/24072643"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/201#discussion_r24072643"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/201"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/24072671",
        "pull_request_review_id": null,
        "id": 24072671,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MDcyNjcx",
        "diff_hunk": "@@ -604,6 +642,115 @@ func (c *ColumnMap) SetMaxSize(size int) *ColumnMap {\n \treturn c\n }\n \n+// IndexMap represents a mapping between a Go struct field and a single\n+// index in a table.\n+// Unique and MaxSize only inform the\n+// CreateTables() function and are not used by Insert/Update/Delete/Get.\n+type IndexMap struct {\n+\t// Index name in db table\n+\tIndexName string\n+\n+\t// If true, \" unique\" is added to create index statements.\n+\t// Not used elsewhere\n+\tUnique bool\n+\n+\t// Index type supported by Dialect\n+\t// Postgres:  B-tree, Hash, GiST and GIN.\n+\t// Mysql: Btree, Hash.\n+\t// Sqlite: nil.\n+\tIndexType string\n+\n+\t// Columns name for single and multiple indexes\n+\tcolumns []string\n+}\n+\n+// Rename allows you to specify the index name in the table\n+//\n+// Example:  table.IndMap(\"customer_test_idx\").Rename(\"customer_idx\")\n+//\n+func (idx *IndexMap) Rename(indname string) *IndexMap {\n+\tidx.IndexName = indname\n+\treturn idx\n+}\n+\n+// SetUnique adds \"unique\" to the create index statements for this\n+// index, if b is true.\n+func (idx *IndexMap) SetUnique(b bool) *IndexMap {\n+\tidx.Unique = b\n+\treturn idx\n+}\n+\n+// SetIndexType specifies the index type supported by chousen SQL Dialect\n+func (idx *IndexMap) SetIndexType(indtype string) *IndexMap {\n+\tidx.IndexType = indtype\n+\treturn idx\n+}\n+\n+func (m *DbMap) CreateIndex() error {\n+\n+\tvar err error\n+\tdialect := reflect.TypeOf(m.Dialect)\n+\tfor _, table := range m.tables {\n+\t\tfor _, index := range table.indexes {\n+\n+\t\t\ts := bytes.Buffer{}\n+\t\t\ts.WriteString(\"create\")\n+\t\t\tif index.Unique {\n+\t\t\t\ts.WriteString(\" unique\")\n+\t\t\t}\n+\t\t\ts.WriteString(\" index\")\n+\t\t\ts.WriteString(fmt.Sprintf(\" %s on %s\", index.IndexName,\n+\t\t\t\ttable.TableName))\n+\t\t\tif dname := dialect.Name(); dname == \"PostgresDialect\" && index.IndexType != \"\" {\n+\t\t\t\ts.WriteString(fmt.Sprintf(\" %s %s\", m.Dialect.CreateIndexSuffix(), index.IndexType))\n+\t\t\t}\n+\t\t\ts.WriteString(\" (\")\n+\t\t\tx := 0\n+\t\t\tfor _, col := range index.columns {\n+\t\t\t\tif x > 0 {\n+\t\t\t\t\ts.WriteString(\", \")\n+\t\t\t\t}\n+\t\t\t\ts.WriteString(m.Dialect.QuoteField(col))\n+\t\t\t}\n+\t\t\ts.WriteString(\")\")\n+\n+\t\t\tif dname := dialect.Name(); dname == \"MySQLDialect\" && index.IndexType != \"\" {\n+\t\t\t\ts.WriteString(fmt.Sprintf(\" %s %s\", m.Dialect.CreateIndexSuffix(), index.IndexType))\n+\t\t\t}\n+\t\t\ts.WriteString(\";\")\n+\t\t\t_, err = m.Exec(s.String())\n+\t\t\tif err != nil {\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t}\n+\t}\n+\treturn err\n+}\n+\n+func (t *TableMap) DropIndex(name string) error {\n+\n+\tvar err error\n+\tdialect := reflect.TypeOf(t.dbmap.Dialect)\n+\tfor _, idx := range t.indexes {\n+\t\tif idx.IndexName == name {\n+\t\t\ts := bytes.Buffer{}\n+\t\t\ts.WriteString(fmt.Sprintf(\"DROP INDEX %s\", idx.IndexName))\n+\n+\t\t\tif dname := dialect.Name(); dname == \"MySQLDialect\" {\n+\t\t\t\ts.WriteString(fmt.Sprintf(\" %s %s\", t.dbmap.Dialect.DropIndexSuffix(), t.TableName))\n+\t\t\t}",
        "path": "gorp.go",
        "position": 152,
        "original_position": 152,
        "commit_id": "eea8450fb26303e8e1a158f1e2de8d71981e2ad9",
        "original_commit_id": "eea8450fb26303e8e1a158f1e2de8d71981e2ad9",
        "user": {
            "login": "GeertJohan",
            "id": 564501,
            "node_id": "MDQ6VXNlcjU2NDUwMQ==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/564501?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/GeertJohan",
            "html_url": "https://github.com/GeertJohan",
            "followers_url": "https://api.github.com/users/GeertJohan/followers",
            "following_url": "https://api.github.com/users/GeertJohan/following{/other_user}",
            "gists_url": "https://api.github.com/users/GeertJohan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/GeertJohan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/GeertJohan/subscriptions",
            "organizations_url": "https://api.github.com/users/GeertJohan/orgs",
            "repos_url": "https://api.github.com/users/GeertJohan/repos",
            "events_url": "https://api.github.com/users/GeertJohan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/GeertJohan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Same as line 706. Move query generation to Dialect implementation.\n",
        "created_at": "2015-02-04T09:57:29Z",
        "updated_at": "2015-02-04T09:57:36Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/201#discussion_r24072671",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/201",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/24072671"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/201#discussion_r24072671"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/201"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/24072663",
        "pull_request_review_id": null,
        "id": 24072663,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MDcyNjYz",
        "diff_hunk": "@@ -604,6 +642,115 @@ func (c *ColumnMap) SetMaxSize(size int) *ColumnMap {\n \treturn c\n }\n \n+// IndexMap represents a mapping between a Go struct field and a single\n+// index in a table.\n+// Unique and MaxSize only inform the\n+// CreateTables() function and are not used by Insert/Update/Delete/Get.\n+type IndexMap struct {\n+\t// Index name in db table\n+\tIndexName string\n+\n+\t// If true, \" unique\" is added to create index statements.\n+\t// Not used elsewhere\n+\tUnique bool\n+\n+\t// Index type supported by Dialect\n+\t// Postgres:  B-tree, Hash, GiST and GIN.\n+\t// Mysql: Btree, Hash.\n+\t// Sqlite: nil.\n+\tIndexType string\n+\n+\t// Columns name for single and multiple indexes\n+\tcolumns []string\n+}\n+\n+// Rename allows you to specify the index name in the table\n+//\n+// Example:  table.IndMap(\"customer_test_idx\").Rename(\"customer_idx\")\n+//\n+func (idx *IndexMap) Rename(indname string) *IndexMap {\n+\tidx.IndexName = indname\n+\treturn idx\n+}\n+\n+// SetUnique adds \"unique\" to the create index statements for this\n+// index, if b is true.\n+func (idx *IndexMap) SetUnique(b bool) *IndexMap {\n+\tidx.Unique = b\n+\treturn idx\n+}\n+\n+// SetIndexType specifies the index type supported by chousen SQL Dialect\n+func (idx *IndexMap) SetIndexType(indtype string) *IndexMap {\n+\tidx.IndexType = indtype\n+\treturn idx\n+}\n+\n+func (m *DbMap) CreateIndex() error {\n+\n+\tvar err error\n+\tdialect := reflect.TypeOf(m.Dialect)\n+\tfor _, table := range m.tables {\n+\t\tfor _, index := range table.indexes {\n+\n+\t\t\ts := bytes.Buffer{}\n+\t\t\ts.WriteString(\"create\")\n+\t\t\tif index.Unique {\n+\t\t\t\ts.WriteString(\" unique\")\n+\t\t\t}\n+\t\t\ts.WriteString(\" index\")\n+\t\t\ts.WriteString(fmt.Sprintf(\" %s on %s\", index.IndexName,\n+\t\t\t\ttable.TableName))\n+\t\t\tif dname := dialect.Name(); dname == \"PostgresDialect\" && index.IndexType != \"\" {\n+\t\t\t\ts.WriteString(fmt.Sprintf(\" %s %s\", m.Dialect.CreateIndexSuffix(), index.IndexType))\n+\t\t\t}\n+\t\t\ts.WriteString(\" (\")\n+\t\t\tx := 0\n+\t\t\tfor _, col := range index.columns {\n+\t\t\t\tif x > 0 {\n+\t\t\t\t\ts.WriteString(\", \")\n+\t\t\t\t}\n+\t\t\t\ts.WriteString(m.Dialect.QuoteField(col))\n+\t\t\t}\n+\t\t\ts.WriteString(\")\")\n+\n+\t\t\tif dname := dialect.Name(); dname == \"MySQLDialect\" && index.IndexType != \"\" {\n+\t\t\t\ts.WriteString(fmt.Sprintf(\" %s %s\", m.Dialect.CreateIndexSuffix(), index.IndexType))\n+\t\t\t}",
        "path": "gorp.go",
        "position": 130,
        "original_position": 130,
        "commit_id": "eea8450fb26303e8e1a158f1e2de8d71981e2ad9",
        "original_commit_id": "eea8450fb26303e8e1a158f1e2de8d71981e2ad9",
        "user": {
            "login": "GeertJohan",
            "id": 564501,
            "node_id": "MDQ6VXNlcjU2NDUwMQ==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/564501?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/GeertJohan",
            "html_url": "https://github.com/GeertJohan",
            "followers_url": "https://api.github.com/users/GeertJohan/followers",
            "following_url": "https://api.github.com/users/GeertJohan/following{/other_user}",
            "gists_url": "https://api.github.com/users/GeertJohan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/GeertJohan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/GeertJohan/subscriptions",
            "organizations_url": "https://api.github.com/users/GeertJohan/orgs",
            "repos_url": "https://api.github.com/users/GeertJohan/repos",
            "events_url": "https://api.github.com/users/GeertJohan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/GeertJohan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Same as line 706. Move query generation to Dialect implementation.\n",
        "created_at": "2015-02-04T09:57:13Z",
        "updated_at": "2015-02-04T09:57:39Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/201#discussion_r24072663",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/201",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/24072663"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/201#discussion_r24072663"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/201"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/28611618",
        "pull_request_review_id": null,
        "id": 28611618,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4NjExNjE4",
        "diff_hunk": "@@ -143,10 +143,10 @@ func main() {\n \n type Post struct {\n     // db tag lets you specify the column name if it differs from the struct field\n-    Id      int64 `db:\"post_id\"`\n+    Id      int64  `db:\"post_id\"`\n     Created int64\n-    Title   string\n-    Body    string\n+    Title   string `db:\",50\"`       // Column size set to 50\n+    Body    string `db:\"text,1024\"` // Set both column name and size",
        "path": "README.md",
        "position": null,
        "original_position": 10,
        "commit_id": "545e4893d6ba7d9559345863173381537040cd4a",
        "original_commit_id": "731ca303c4490a20b435ecb78ab7515f246885c1",
        "user": {
            "login": "nelsam",
            "id": 1019908,
            "node_id": "MDQ6VXNlcjEwMTk5MDg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1019908?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nelsam",
            "html_url": "https://github.com/nelsam",
            "followers_url": "https://api.github.com/users/nelsam/followers",
            "following_url": "https://api.github.com/users/nelsam/following{/other_user}",
            "gists_url": "https://api.github.com/users/nelsam/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nelsam/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nelsam/subscriptions",
            "organizations_url": "https://api.github.com/users/nelsam/orgs",
            "repos_url": "https://api.github.com/users/nelsam/repos",
            "events_url": "https://api.github.com/users/nelsam/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nelsam/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Looking at the parsing code, shouldn't these tags be `db:\",size:50` and `db:\"text,size:1024\"`, respectively?\n",
        "created_at": "2015-04-17T17:05:30Z",
        "updated_at": "2015-04-18T06:38:09Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/246#discussion_r28611618",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/246",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/28611618"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/246#discussion_r28611618"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/246"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/28611687",
        "pull_request_review_id": null,
        "id": 28611687,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4NjExNjg3",
        "diff_hunk": "@@ -764,7 +764,20 @@ func (m *DbMap) readStructColumns(t reflect.Type) (cols []*ColumnMap) {\n \t\t\t\t}\n \t\t\t}\n \t\t} else {\n-\t\t\tcolumnName := f.Tag.Get(\"db\")\n+\t\t\t// Tag = Name { ','  Option }\n+\t\t\t// Option = OptionKey [ ':' OptionValue ]\n+\t\t\tcArguments := strings.Split(f.Tag.Get(\"db\"), \",\")\n+\t\t\tcolumnName := cArguments[0]\n+\t\t\tvar maxSize int\n+\t\t\tfor _, argString := range cArguments[1:] {\n+\t\t\t\targ := strings.SplitN(argString, \":\", 2)\n+\t\t\t\tswitch arg[0] {\n+\t\t\t\tcase \"size\":\n+\t\t\t\t\tmaxSize, _ = strconv.Atoi(arg[1])\n+\t\t\t\tdefault:\n+\t\t\t\t\t//log.Printf(\"Unrecognized argument: %v\\n\", arg)",
        "path": "gorp.go",
        "position": null,
        "original_position": 32,
        "commit_id": "545e4893d6ba7d9559345863173381537040cd4a",
        "original_commit_id": "731ca303c4490a20b435ecb78ab7515f246885c1",
        "user": {
            "login": "nelsam",
            "id": 1019908,
            "node_id": "MDQ6VXNlcjEwMTk5MDg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1019908?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nelsam",
            "html_url": "https://github.com/nelsam",
            "followers_url": "https://api.github.com/users/nelsam/followers",
            "following_url": "https://api.github.com/users/nelsam/following{/other_user}",
            "gists_url": "https://api.github.com/users/nelsam/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nelsam/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nelsam/subscriptions",
            "organizations_url": "https://api.github.com/users/nelsam/orgs",
            "repos_url": "https://api.github.com/users/nelsam/repos",
            "events_url": "https://api.github.com/users/nelsam/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nelsam/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I do think we should error out, here.  If calling code expects an option to exist, we shouldn't just ignore it.\n",
        "created_at": "2015-04-17T17:06:25Z",
        "updated_at": "2015-04-18T06:38:09Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/246#discussion_r28611687",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/246",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/28611687"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/246#discussion_r28611687"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/246"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/34141049",
        "pull_request_review_id": null,
        "id": 34141049,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MTQxMDQ5",
        "diff_hunk": "@@ -17,6 +13,11 @@ import (\n \t\"strings\"\n \t\"testing\"\n \t\"time\"\n+\n+\t_ \"github.com/go-sql-driver/mysql\"\n+\t_ \"github.com/lib/pq\"\n+\t_ \"github.com/mattn/go-sqlite3\"\n+\t_ \"github.com/ziutek/mymysql/godrv\"",
        "path": "gorp_test.go",
        "position": 19,
        "original_position": 19,
        "commit_id": "c97fbece855b40aae35135ca9dc2d9ad15a7584f",
        "original_commit_id": "c97fbece855b40aae35135ca9dc2d9ad15a7584f",
        "user": {
            "login": "GeertJohan",
            "id": 564501,
            "node_id": "MDQ6VXNlcjU2NDUwMQ==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/564501?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/GeertJohan",
            "html_url": "https://github.com/GeertJohan",
            "followers_url": "https://api.github.com/users/GeertJohan/followers",
            "following_url": "https://api.github.com/users/GeertJohan/following{/other_user}",
            "gists_url": "https://api.github.com/users/GeertJohan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/GeertJohan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/GeertJohan/subscriptions",
            "organizations_url": "https://api.github.com/users/GeertJohan/orgs",
            "repos_url": "https://api.github.com/users/GeertJohan/repos",
            "events_url": "https://api.github.com/users/GeertJohan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/GeertJohan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Totaly fine, I have goimports too.\n",
        "created_at": "2015-07-08T12:20:45Z",
        "updated_at": "2015-07-08T12:20:45Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/59#discussion_r34141049",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/59",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/34141049"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/59#discussion_r34141049"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/59"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/69379403",
        "pull_request_review_id": null,
        "id": 69379403,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5Mzc5NDAz",
        "diff_hunk": "@@ -114,6 +114,14 @@ type SqlExecutor interface {\n \tqueryRow(query string, args ...interface{}) *sql.Row\n }\n \n+// DynamicTable allows the users of gorp to dynamically\n+// use different database table names during runtime\n+// while sharing the same golang struct for in-memory data\n+type DynamicTable interface {\n+\tGetTableName() string",
        "path": "gorp.go",
        "position": null,
        "original_position": 8,
        "commit_id": "6c13097f2322a8c4ad78cd959208f76cd34b1231",
        "original_commit_id": "bd2d2ba9227cddd48ebd052bb0a9b9365d596d11",
        "user": {
            "login": "nelsam",
            "id": 1019908,
            "node_id": "MDQ6VXNlcjEwMTk5MDg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1019908?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nelsam",
            "html_url": "https://github.com/nelsam",
            "followers_url": "https://api.github.com/users/nelsam/followers",
            "following_url": "https://api.github.com/users/nelsam/following{/other_user}",
            "gists_url": "https://api.github.com/users/nelsam/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nelsam/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nelsam/subscriptions",
            "organizations_url": "https://api.github.com/users/nelsam/orgs",
            "repos_url": "https://api.github.com/users/nelsam/repos",
            "events_url": "https://api.github.com/users/nelsam/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nelsam/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "In keeping with [the getters section of Effective Go](https://golang.org/doc/effective_go.html#Getters), can we rename this to `TableName()`?\n",
        "created_at": "2016-07-02T15:40:02Z",
        "updated_at": "2016-07-03T14:23:40Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/319#discussion_r69379403",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/319",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/69379403"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/319#discussion_r69379403"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/319"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/69380157",
        "pull_request_review_id": null,
        "id": 69380157,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MzgwMTU3",
        "diff_hunk": "@@ -114,6 +114,14 @@ type SqlExecutor interface {\n \tqueryRow(query string, args ...interface{}) *sql.Row\n }\n \n+// DynamicTable allows the users of gorp to dynamically\n+// use different database table names during runtime\n+// while sharing the same golang struct for in-memory data\n+type DynamicTable interface {\n+\tGetTableName() string",
        "path": "gorp.go",
        "position": null,
        "original_position": 8,
        "commit_id": "6c13097f2322a8c4ad78cd959208f76cd34b1231",
        "original_commit_id": "bd2d2ba9227cddd48ebd052bb0a9b9365d596d11",
        "user": {
            "login": "bkali",
            "id": 1931953,
            "node_id": "MDQ6VXNlcjE5MzE5NTM=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1931953?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bkali",
            "html_url": "https://github.com/bkali",
            "followers_url": "https://api.github.com/users/bkali/followers",
            "following_url": "https://api.github.com/users/bkali/following{/other_user}",
            "gists_url": "https://api.github.com/users/bkali/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bkali/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bkali/subscriptions",
            "organizations_url": "https://api.github.com/users/bkali/orgs",
            "repos_url": "https://api.github.com/users/bkali/repos",
            "events_url": "https://api.github.com/users/bkali/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bkali/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Sure, I can change it to TableName(), will update the code within the next couple of days. Thanks!\nBiju\n",
        "created_at": "2016-07-02T16:47:50Z",
        "updated_at": "2016-07-03T14:23:40Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/319#discussion_r69380157",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/319",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/69380157"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/319#discussion_r69380157"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/319"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/71087052",
        "pull_request_review_id": null,
        "id": 71087052,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcxMDg3MDUy",
        "diff_hunk": "@@ -404,6 +404,282 @@ type PersistentUser struct {\n \tPassedTraining bool\n }\n \n+type TenantDynamic struct {\n+\tId       int64 `db:\"id\"`\n+\tName     string\n+\tAddress  string\n+\tcurTable string `db:\"-\"`\n+}\n+\n+func (curObj *TenantDynamic) TableName() string {\n+\treturn curObj.curTable\n+}\n+func (curObj *TenantDynamic) SetTableName(tblName string) {\n+\tcurObj.curTable = tblName\n+}\n+\n+var dynTableInst1 = TenantDynamic{curTable: \"t_1_tenant_dynamic\"}\n+var dynTableInst2 = TenantDynamic{curTable: \"t_2_tenant_dynamic\"}\n+\n+func dynamicTablesTest(t *testing.T, dbmap *gorp.DbMap) {\n+\n+\tdynamicTablesTestTableMap(t, dbmap, &dynTableInst1)\n+\tdynamicTablesTestTableMap(t, dbmap, &dynTableInst2)\n+\n+\t// TEST - dbmap.Insert using dynTableInst1\n+\tdynTableInst1.Name = \"Test Name 1\"\n+\tdynTableInst1.Address = \"Test Address 1\"\n+\terr := dbmap.Insert(&dynTableInst1)\n+\tif err != nil {\n+\t\tt.Errorf(\"Errow while saving dynTableInst1. Details: %v\", err)\n+\t}\n+\n+\t// TEST - dbmap.Insert using dynTableInst2\n+\tdynTableInst2.Name = \"Test Name 2\"\n+\tdynTableInst2.Address = \"Test Address 2\"\n+\terr = dbmap.Insert(&dynTableInst2)\n+\tif err != nil {\n+\t\tt.Errorf(\"Errow while saving dynTableInst2. Details: %v\", err)\n+\t}\n+\n+\tdynamicTablesTestSelect(t, dbmap, &dynTableInst1)\n+\tdynamicTablesTestSelect(t, dbmap, &dynTableInst2)\n+\tdynamicTablesTestSelectOne(t, dbmap, &dynTableInst1)\n+\tdynamicTablesTestSelectOne(t, dbmap, &dynTableInst2)\n+\tdynamicTablesTestGetUpdateGet(t, dbmap, &dynTableInst1)\n+\tdynamicTablesTestGetUpdateGet(t, dbmap, &dynTableInst2)\n+\tdynamicTablesTestDelete(t, dbmap, &dynTableInst1)\n+\tdynamicTablesTestDelete(t, dbmap, &dynTableInst2)\n+\n+}\n+\n+func dynamicTablesTestTableMap(t *testing.T,\n+\tdbmap *gorp.DbMap,\n+\tinpInst *TenantDynamic) {\n+\n+\ttableName := inpInst.TableName()\n+\n+\ttblMap, err := dbmap.TableForDynamic(tableName, true)\n+\tif nil != err {\n+\t\tt.Errorf(\"Error while searching for tablemap for tableName: %v, Error:%v\", tableName, err)\n+\t}\n+\tif nil == tblMap {\n+\t\tt.Errorf(\"Unable to find tablemap for tableName:%v\", tableName)\n+\t}\n+}\n+\n+func dynamicTablesTestSelect(t *testing.T,\n+\tdbmap *gorp.DbMap,\n+\tinpInst *TenantDynamic) {\n+\n+\t// TEST - dbmap.Select using inpInst\n+\n+\t// read the data back from dynInst to see if the\n+\t// table mapping is correct\n+\tvar dbTenantInst1 = TenantDynamic{curTable: inpInst.curTable}\n+\tselectSQL1 := \"select * from \" + inpInst.curTable\n+\tdbObjs, err := dbmap.Select(&dbTenantInst1, selectSQL1)\n+\tif err != nil {\n+\t\tt.Errorf(\"Errow in dbmap.Select. SQL: %v, Details: %v\", selectSQL1, err)\n+\t}\n+\tif nil == dbObjs {\n+\t\tt.Errorf(\"Nil return from dbmap.Select\")\n+\t} else {",
        "path": "gorp_test.go",
        "position": 84,
        "original_position": 84,
        "commit_id": "6c13097f2322a8c4ad78cd959208f76cd34b1231",
        "original_commit_id": "6c13097f2322a8c4ad78cd959208f76cd34b1231",
        "user": {
            "login": "nelsam",
            "id": 1019908,
            "node_id": "MDQ6VXNlcjEwMTk5MDg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1019908?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nelsam",
            "html_url": "https://github.com/nelsam",
            "followers_url": "https://api.github.com/users/nelsam/followers",
            "following_url": "https://api.github.com/users/nelsam/following{/other_user}",
            "gists_url": "https://api.github.com/users/nelsam/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nelsam/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nelsam/subscriptions",
            "organizations_url": "https://api.github.com/users/nelsam/orgs",
            "repos_url": "https://api.github.com/users/nelsam/repos",
            "events_url": "https://api.github.com/users/nelsam/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nelsam/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'm also updating this - `t.Fatalf` will perform the same comparison but halt the test immediately, making this `else` statement unnecessary.\n",
        "created_at": "2016-07-17T18:35:17Z",
        "updated_at": "2016-07-17T18:35:17Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/319#discussion_r71087052",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/319",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/71087052"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/319#discussion_r71087052"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/319"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/111663803",
        "pull_request_review_id": 32925762,
        "id": 111663803,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMTY2MzgwMw==",
        "diff_hunk": "@@ -239,43 +239,63 @@ func columnToFieldIndex(m *DbMap, t reflect.Type, name string, cols []string) ([\n \t\ttableMapped = true\n \t}\n \n+\tlowerCaseCols := make([]string, len(cols))\n+\tfor i, v := range cols {\n+\t\tlowerCaseCols[i] = strings.ToLower(v)\n+\t}\n+\n \t// Loop over column names and find field in i to bind to\n \t// based on column name. all returned columns must match\n \t// a field in the i struct\n-\tmissingColNames := []string{}\n-\tfor x := range cols {\n-\t\tcolName := strings.ToLower(cols[x])\n-\t\tfield, found := t.FieldByNameFunc(func(fieldName string) bool {\n-\t\t\tfield, _ := t.FieldByName(fieldName)\n-\t\t\tcArguments := strings.Split(field.Tag.Get(\"db\"), \",\")\n-\t\t\tfieldName = cArguments[0]\n-\n-\t\t\tif fieldName == \"-\" {\n-\t\t\t\treturn false\n-\t\t\t} else if fieldName == \"\" {\n-\t\t\t\tfieldName = field.Name\n-\t\t\t}\n-\t\t\tif tableMapped {\n-\t\t\t\tcolMap := colMapOrNil(table, fieldName)\n-\t\t\t\tif colMap != nil {\n-\t\t\t\t\tfieldName = colMap.ColumnName\n-\t\t\t\t}\n+\tvar foundColCount int\n+\t// better to use recursive function to loop\n+\tt.FieldByNameFunc(func(name string) bool {\n+\t\tfield, _ := t.FieldByName(name)\n+\t\tcArguments := strings.Split(field.Tag.Get(\"db\"), \",\")\n+\t\tfieldName := cArguments[0]\n+\n+\t\tif fieldName == \"-\" {\n+\t\t\treturn false\n+\t\t} else if fieldName == \"\" {\n+\t\t\tfieldName = field.Name\n+\t\t}\n+\n+\t\tif tableMapped {\n+\t\t\tcolMap := colMapOrNil(table, fieldName)\n+\t\t\tif colMap != nil {\n+\t\t\t\tfieldName = colMap.ColumnName\n \t\t\t}\n-\t\t\treturn colName == strings.ToLower(fieldName)\n-\t\t})\n-\t\tif found {\n-\t\t\tcolToFieldIndex[x] = field.Index\n \t\t}\n-\t\tif colToFieldIndex[x] == nil {\n-\t\t\tmissingColNames = append(missingColNames, colName)\n+\n+\t\tfieldName = strings.ToLower(fieldName)\n+\n+\t\tfor i, v := range lowerCaseCols {\n+\t\t\tif v != fieldName {\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t\tfoundColCount++\n+\t\t\tcolToFieldIndex[i] = field.Index\n+\t\t}",
        "path": "gorp.go",
        "position": 64,
        "original_position": 64,
        "commit_id": "303d4f51d6011973b55c26f4676cfe1f4bd0f18e",
        "original_commit_id": "303d4f51d6011973b55c26f4676cfe1f4bd0f18e",
        "user": {
            "login": "suzujun",
            "id": 676925,
            "node_id": "MDQ6VXNlcjY3NjkyNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/676925?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/suzujun",
            "html_url": "https://github.com/suzujun",
            "followers_url": "https://api.github.com/users/suzujun/followers",
            "following_url": "https://api.github.com/users/suzujun/following{/other_user}",
            "gists_url": "https://api.github.com/users/suzujun/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/suzujun/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/suzujun/subscriptions",
            "organizations_url": "https://api.github.com/users/suzujun/orgs",
            "repos_url": "https://api.github.com/users/suzujun/repos",
            "events_url": "https://api.github.com/users/suzujun/events{/privacy}",
            "received_events_url": "https://api.github.com/users/suzujun/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think that the cost is lower by using map.\r\n```\r\n// generate before loop function\r\nlowerCaseColMap := map[string]int{}\r\nfor i, v := range cols {\r\n  lowerCaseColMap[strings.ToLower(v)] = i\r\n}\r\n\r\n// check the map\r\nif i, ok := lowerCaseColMap[fieldName]; ok {\r\n  colToFieldIndex[i] = field.Index\r\n} else {\r\n  missingColNames = append(missingColNames, fieldName)\r\n}",
        "created_at": "2017-04-15T11:50:15Z",
        "updated_at": "2017-04-15T11:50:15Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/347#discussion_r111663803",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/347",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/111663803"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/347#discussion_r111663803"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/347"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/113236547",
        "pull_request_review_id": 34607925,
        "id": 113236547,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzIzNjU0Nw==",
        "diff_hunk": "@@ -239,43 +239,63 @@ func columnToFieldIndex(m *DbMap, t reflect.Type, name string, cols []string) ([\n \t\ttableMapped = true\n \t}\n \n+\tlowerCaseCols := make([]string, len(cols))\n+\tfor i, v := range cols {\n+\t\tlowerCaseCols[i] = strings.ToLower(v)\n+\t}\n+\n \t// Loop over column names and find field in i to bind to\n \t// based on column name. all returned columns must match\n \t// a field in the i struct\n-\tmissingColNames := []string{}\n-\tfor x := range cols {\n-\t\tcolName := strings.ToLower(cols[x])\n-\t\tfield, found := t.FieldByNameFunc(func(fieldName string) bool {\n-\t\t\tfield, _ := t.FieldByName(fieldName)\n-\t\t\tcArguments := strings.Split(field.Tag.Get(\"db\"), \",\")\n-\t\t\tfieldName = cArguments[0]\n-\n-\t\t\tif fieldName == \"-\" {\n-\t\t\t\treturn false\n-\t\t\t} else if fieldName == \"\" {\n-\t\t\t\tfieldName = field.Name\n-\t\t\t}\n-\t\t\tif tableMapped {\n-\t\t\t\tcolMap := colMapOrNil(table, fieldName)\n-\t\t\t\tif colMap != nil {\n-\t\t\t\t\tfieldName = colMap.ColumnName\n-\t\t\t\t}\n+\tvar foundColCount int\n+\t// better to use recursive function to loop\n+\tt.FieldByNameFunc(func(name string) bool {\n+\t\tfield, _ := t.FieldByName(name)\n+\t\tcArguments := strings.Split(field.Tag.Get(\"db\"), \",\")\n+\t\tfieldName := cArguments[0]\n+\n+\t\tif fieldName == \"-\" {\n+\t\t\treturn false\n+\t\t} else if fieldName == \"\" {\n+\t\t\tfieldName = field.Name\n+\t\t}\n+\n+\t\tif tableMapped {\n+\t\t\tcolMap := colMapOrNil(table, fieldName)\n+\t\t\tif colMap != nil {\n+\t\t\t\tfieldName = colMap.ColumnName\n \t\t\t}\n-\t\t\treturn colName == strings.ToLower(fieldName)\n-\t\t})\n-\t\tif found {\n-\t\t\tcolToFieldIndex[x] = field.Index\n \t\t}\n-\t\tif colToFieldIndex[x] == nil {\n-\t\t\tmissingColNames = append(missingColNames, colName)\n+\n+\t\tfieldName = strings.ToLower(fieldName)\n+\n+\t\tfor i, v := range lowerCaseCols {\n+\t\t\tif v != fieldName {\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t\tfoundColCount++\n+\t\t\tcolToFieldIndex[i] = field.Index\n+\t\t}",
        "path": "gorp.go",
        "position": 64,
        "original_position": 64,
        "commit_id": "303d4f51d6011973b55c26f4676cfe1f4bd0f18e",
        "original_commit_id": "303d4f51d6011973b55c26f4676cfe1f4bd0f18e",
        "user": {
            "login": "nvcnvn",
            "id": 1708320,
            "node_id": "MDQ6VXNlcjE3MDgzMjA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1708320?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nvcnvn",
            "html_url": "https://github.com/nvcnvn",
            "followers_url": "https://api.github.com/users/nvcnvn/followers",
            "following_url": "https://api.github.com/users/nvcnvn/following{/other_user}",
            "gists_url": "https://api.github.com/users/nvcnvn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nvcnvn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nvcnvn/subscriptions",
            "organizations_url": "https://api.github.com/users/nvcnvn/orgs",
            "repos_url": "https://api.github.com/users/nvcnvn/repos",
            "events_url": "https://api.github.com/users/nvcnvn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nvcnvn/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Since the size of lowerCaseCols expected to be small (one must be really tricky to have a struct with > 100 fields) so I think this not the case.",
        "created_at": "2017-04-25T15:55:56Z",
        "updated_at": "2017-04-25T15:55:56Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/347#discussion_r113236547",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/347",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/113236547"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/347#discussion_r113236547"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/347"
            }
        },
        "in_reply_to_id": 111663803
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/136255399",
        "pull_request_review_id": 59766343,
        "id": 136255399,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjI1NTM5OQ==",
        "diff_hunk": "@@ -2360,6 +2361,31 @@ func TestPrepare(t *testing.T) {\n \t}\n }\n \n+func TestWithCanceledContext(t *testing.T) {\n+\tif _, driver := dialectAndDriver(); driver != \"mysql\" {\n+\t\tt.Skip(\"Cancellation is not yet supported by all drivers. Known to be supported by mysql\")\n+\t}\n+\n+\tdbmap := initDbMap()\n+\tdefer dropAndClose(dbmap)\n+\n+\tctx, cancel := context.WithCancel(context.Background())\n+\n+\tdefer time.AfterFunc(100 * time.Millisecond, cancel).Stop()",
        "path": "gorp_test.go",
        "position": null,
        "original_position": 22,
        "commit_id": "fe96e856d4ed65f604a6c1564df37c005bbd048f",
        "original_commit_id": "fd13a124a1bab11b8f953939353b859af91fe1b0",
        "user": {
            "login": "srenatus",
            "id": 870638,
            "node_id": "MDQ6VXNlcjg3MDYzOA==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/870638?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/srenatus",
            "html_url": "https://github.com/srenatus",
            "followers_url": "https://api.github.com/users/srenatus/followers",
            "following_url": "https://api.github.com/users/srenatus/following{/other_user}",
            "gists_url": "https://api.github.com/users/srenatus/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/srenatus/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/srenatus/subscriptions",
            "organizations_url": "https://api.github.com/users/srenatus/orgs",
            "repos_url": "https://api.github.com/users/srenatus/repos",
            "events_url": "https://api.github.com/users/srenatus/events{/privacy}",
            "received_events_url": "https://api.github.com/users/srenatus/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I suppose you did that on purpose, just wanted to point out that this is equivalent to:\r\n```go\r\nctx, cancel := context.WithTimeout(context.Background(), 100*time.Millisecond)\r\ndefer cancel()\r\n```",
        "created_at": "2017-08-31T06:35:38Z",
        "updated_at": "2017-09-17T02:08:47Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/352#discussion_r136255399",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/352",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/136255399"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/352#discussion_r136255399"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/352"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/136256039",
        "pull_request_review_id": 59766343,
        "id": 136256039,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjI1NjAzOQ==",
        "diff_hunk": "@@ -2360,6 +2361,31 @@ func TestPrepare(t *testing.T) {\n \t}\n }\n \n+func TestWithCanceledContext(t *testing.T) {",
        "path": "gorp_test.go",
        "position": null,
        "original_position": 12,
        "commit_id": "fe96e856d4ed65f604a6c1564df37c005bbd048f",
        "original_commit_id": "fd13a124a1bab11b8f953939353b859af91fe1b0",
        "user": {
            "login": "srenatus",
            "id": 870638,
            "node_id": "MDQ6VXNlcjg3MDYzOA==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/870638?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/srenatus",
            "html_url": "https://github.com/srenatus",
            "followers_url": "https://api.github.com/users/srenatus/followers",
            "following_url": "https://api.github.com/users/srenatus/following{/other_user}",
            "gists_url": "https://api.github.com/users/srenatus/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/srenatus/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/srenatus/subscriptions",
            "organizations_url": "https://api.github.com/users/srenatus/orgs",
            "repos_url": "https://api.github.com/users/srenatus/repos",
            "events_url": "https://api.github.com/users/srenatus/events{/privacy}",
            "received_events_url": "https://api.github.com/users/srenatus/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "> (2) The Context API being added to db.Sql wasn't added until I think Go 1.8. [...]  but that will make the test I added fail unless I can exclude that test for earlier versions.\r\n\r\nIf you'd put that into its own file, you would be able to add `// +build !go1.7`, I believe? To make these tests not run on 1.7? (not entirely sure if it works like that, though)",
        "created_at": "2017-08-31T06:40:18Z",
        "updated_at": "2017-09-17T02:08:47Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/352#discussion_r136256039",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/352",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/136256039"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/352#discussion_r136256039"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/352"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/136734117",
        "pull_request_review_id": 60312995,
        "id": 136734117,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjczNDExNw==",
        "diff_hunk": "@@ -0,0 +1,45 @@\n+// Copyright 2012 James Cooper. All rights reserved.\n+// Use of this source code is governed by a MIT-style\n+// license that can be found in the LICENSE file.\n+\n+// Package gorp provides a simple way to marshal Go structs to and from\n+// SQL databases.  It uses the database/sql package, and should work with any\n+// compliant database/sql driver.\n+//\n+// Source code and project home:\n+// https://github.com/go-gorp/gorp\n+//\n+\n+// +build go1.8\n+\n+package gorp_test\n+\n+import (\n+\t\"testing\"\n+\t\"time\"\n+\t\"context\"\n+)\n+\n+func TestWithCanceledContext(t *testing.T) {\n+\tif _, driver := dialectAndDriver(); driver != \"mysql\" {",
        "path": "gorp_go18_test.go",
        "position": null,
        "original_position": 24,
        "commit_id": "fe96e856d4ed65f604a6c1564df37c005bbd048f",
        "original_commit_id": "3cef7944ca8ee898120c9655197056aebd8f66f2",
        "user": {
            "login": "nelsam",
            "id": 1019908,
            "node_id": "MDQ6VXNlcjEwMTk5MDg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1019908?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nelsam",
            "html_url": "https://github.com/nelsam",
            "followers_url": "https://api.github.com/users/nelsam/followers",
            "following_url": "https://api.github.com/users/nelsam/following{/other_user}",
            "gists_url": "https://api.github.com/users/nelsam/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nelsam/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nelsam/subscriptions",
            "organizations_url": "https://api.github.com/users/nelsam/orgs",
            "repos_url": "https://api.github.com/users/nelsam/repos",
            "events_url": "https://api.github.com/users/nelsam/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nelsam/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I would really like to have a blacklist of drivers that *don't* support it, rather than a whitelist of drivers that *do*.  If you're unsure, assume there is support - if it's not failing in travis, we'll deal with it when it becomes a problem.",
        "created_at": "2017-09-04T02:00:05Z",
        "updated_at": "2017-09-17T02:08:47Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/352#discussion_r136734117",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/352",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/136734117"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/352#discussion_r136734117"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/352"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/136870318",
        "pull_request_review_id": 60468062,
        "id": 136870318,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjg3MDMxOA==",
        "diff_hunk": "@@ -0,0 +1,45 @@\n+// Copyright 2012 James Cooper. All rights reserved.\n+// Use of this source code is governed by a MIT-style\n+// license that can be found in the LICENSE file.\n+\n+// Package gorp provides a simple way to marshal Go structs to and from\n+// SQL databases.  It uses the database/sql package, and should work with any\n+// compliant database/sql driver.\n+//\n+// Source code and project home:\n+// https://github.com/go-gorp/gorp\n+//\n+\n+// +build go1.8\n+\n+package gorp_test\n+\n+import (\n+\t\"testing\"\n+\t\"time\"\n+\t\"context\"\n+)\n+\n+func TestWithCanceledContext(t *testing.T) {\n+\tif _, driver := dialectAndDriver(); driver != \"mysql\" {",
        "path": "gorp_go18_test.go",
        "position": null,
        "original_position": 24,
        "commit_id": "fe96e856d4ed65f604a6c1564df37c005bbd048f",
        "original_commit_id": "3cef7944ca8ee898120c9655197056aebd8f66f2",
        "user": {
            "login": "MatthewDolan",
            "id": 1056326,
            "node_id": "MDQ6VXNlcjEwNTYzMjY=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1056326?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MatthewDolan",
            "html_url": "https://github.com/MatthewDolan",
            "followers_url": "https://api.github.com/users/MatthewDolan/followers",
            "following_url": "https://api.github.com/users/MatthewDolan/following{/other_user}",
            "gists_url": "https://api.github.com/users/MatthewDolan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/MatthewDolan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/MatthewDolan/subscriptions",
            "organizations_url": "https://api.github.com/users/MatthewDolan/orgs",
            "repos_url": "https://api.github.com/users/MatthewDolan/repos",
            "events_url": "https://api.github.com/users/MatthewDolan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/MatthewDolan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Good call. It seems like mymysql is the only driver that has not added support (I filed it as an issue https://github.com/ziutek/mymysql/issues/138).\r\n\r\nRan into one other problem though. Some sql dialects (namely sqlite) don't support native sleep calls. I checked the test for the sqlite driver and it looks like they have an attempt at testing a canceled context (https://github.com/mattn/go-sqlite3/blob/master/sqlite3_go18_test.go#L113), but I don't think it's as clean as sleep. I just excluded the languages that don't support sleep for now.",
        "created_at": "2017-09-04T21:06:29Z",
        "updated_at": "2017-09-17T02:08:47Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/352#discussion_r136870318",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/352",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/136870318"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/352#discussion_r136870318"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/352"
            }
        },
        "in_reply_to_id": 136734117
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/137929467",
        "pull_request_review_id": 61665619,
        "id": 137929467,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzkyOTQ2Nw==",
        "diff_hunk": "@@ -0,0 +1,80 @@\n+// Copyright 2012 James Cooper. All rights reserved.\n+// Use of this source code is governed by a MIT-style\n+// license that can be found in the LICENSE file.\n+\n+// Package gorp provides a simple way to marshal Go structs to and from\n+// SQL databases.  It uses the database/sql package, and should work with any\n+// compliant database/sql driver.\n+//\n+// Source code and project home:\n+// https://github.com/go-gorp/gorp\n+//\n+\n+// +build go1.8\n+\n+package gorp_test\n+\n+import (\n+\t\"testing\"\n+\t\"time\"\n+\t\"context\"\n+\t\"github.com/stretchr/testify/assert\"\n+)\n+\n+// Drivers that don't support cancellation.\n+var unsupportedDrivers map[string]bool = map[string]bool{\n+\t\"mymysql\":true,\n+}\n+\n+\n+func TestWithNotCanceledContext(t *testing.T) {\n+\tdbmap := initDbMap()\n+\tdefer dropAndClose(dbmap)\n+\n+\tctx, cancel := context.WithTimeout(context.Background(), 100*time.Millisecond)\n+\tdefer cancel()\n+\n+\twithCtx := dbmap.WithContext(ctx)\n+\n+\t_, err := withCtx.Exec(\"SELECT 1\")\n+\tassert.Nil(t, err)\n+}\n+\n+func TestWithCanceledContext(t *testing.T) {\n+\tdialect, driver := dialectAndDriver()\n+\tif unsupportedDrivers[driver] {\n+\t\tt.Skip(\"Cancellation is not yet supported by all drivers. Not known to be unsupported in %s.\", driver)",
        "path": "gorp_go18_test.go",
        "position": null,
        "original_position": 46,
        "commit_id": "fe96e856d4ed65f604a6c1564df37c005bbd048f",
        "original_commit_id": "c98483f1fca40fe705b1a334c00c1fe26a0b3e00",
        "user": {
            "login": "nelsam",
            "id": 1019908,
            "node_id": "MDQ6VXNlcjEwMTk5MDg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1019908?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nelsam",
            "html_url": "https://github.com/nelsam",
            "followers_url": "https://api.github.com/users/nelsam/followers",
            "following_url": "https://api.github.com/users/nelsam/following{/other_user}",
            "gists_url": "https://api.github.com/users/nelsam/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nelsam/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nelsam/subscriptions",
            "organizations_url": "https://api.github.com/users/nelsam/orgs",
            "repos_url": "https://api.github.com/users/nelsam/repos",
            "events_url": "https://api.github.com/users/nelsam/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nelsam/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think this should read `Known to be unsupported` or `Not known to be supported`, rather than `Not known to be unsupported`.",
        "created_at": "2017-09-09T16:07:32Z",
        "updated_at": "2017-09-17T02:08:47Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/352#discussion_r137929467",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/352",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/137929467"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/352#discussion_r137929467"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/352"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/137929634",
        "pull_request_review_id": 61665619,
        "id": 137929634,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzkyOTYzNA==",
        "diff_hunk": "@@ -49,6 +51,9 @@ type Dialect interface {\n \t// string to truncate tables\n \tTruncateClause() string\n \n+\t// string to sleep for d duration\n+\tSleepClause(d time.Duration) string",
        "path": "dialect.go",
        "position": null,
        "original_position": 23,
        "commit_id": "fe96e856d4ed65f604a6c1564df37c005bbd048f",
        "original_commit_id": "c98483f1fca40fe705b1a334c00c1fe26a0b3e00",
        "user": {
            "login": "nelsam",
            "id": 1019908,
            "node_id": "MDQ6VXNlcjEwMTk5MDg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1019908?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nelsam",
            "html_url": "https://github.com/nelsam",
            "followers_url": "https://api.github.com/users/nelsam/followers",
            "following_url": "https://api.github.com/users/nelsam/following{/other_user}",
            "gists_url": "https://api.github.com/users/nelsam/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nelsam/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nelsam/subscriptions",
            "organizations_url": "https://api.github.com/users/nelsam/orgs",
            "repos_url": "https://api.github.com/users/nelsam/repos",
            "events_url": "https://api.github.com/users/nelsam/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nelsam/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This is a breaking change and will force a `v3` of `gorp`, since some `gorp` users may have implemented custom `Dialect` types.  Can we instead add a new interface type, say `SleepDialect`, such that:\r\n\r\n```go\r\ntype SleepDialect interface {\r\n    SleepClause(time.Duration) string\r\n}\r\n```\r\n\r\nAnd then remove the `SleepClause` methods on dialects that don't have a sleep clause?",
        "created_at": "2017-09-09T16:14:03Z",
        "updated_at": "2017-09-17T02:08:47Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/352#discussion_r137929634",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/352",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/137929634"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/352#discussion_r137929634"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/352"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/137929651",
        "pull_request_review_id": 61665619,
        "id": 137929651,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzkyOTY1MQ==",
        "diff_hunk": "@@ -93,6 +94,10 @@ func (d OracleDialect) TruncateClause() string {\n \treturn \"truncate\"\n }\n \n+func (d OracleDialect) SleepClause(s time.Duration) string {\n+\treturn \"\"\n+}",
        "path": "dialect_oracle.go",
        "position": null,
        "original_position": 14,
        "commit_id": "fe96e856d4ed65f604a6c1564df37c005bbd048f",
        "original_commit_id": "c98483f1fca40fe705b1a334c00c1fe26a0b3e00",
        "user": {
            "login": "nelsam",
            "id": 1019908,
            "node_id": "MDQ6VXNlcjEwMTk5MDg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1019908?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nelsam",
            "html_url": "https://github.com/nelsam",
            "followers_url": "https://api.github.com/users/nelsam/followers",
            "following_url": "https://api.github.com/users/nelsam/following{/other_user}",
            "gists_url": "https://api.github.com/users/nelsam/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nelsam/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nelsam/subscriptions",
            "organizations_url": "https://api.github.com/users/nelsam/orgs",
            "repos_url": "https://api.github.com/users/nelsam/repos",
            "events_url": "https://api.github.com/users/nelsam/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nelsam/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "If we were to use a separate `SleepDialect`, you could just skip implementing this method.",
        "created_at": "2017-09-09T16:14:45Z",
        "updated_at": "2017-09-17T02:08:47Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/352#discussion_r137929651",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/352",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/137929651"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/352#discussion_r137929651"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/352"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/137929655",
        "pull_request_review_id": 61665619,
        "id": 137929655,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzkyOTY1NQ==",
        "diff_hunk": "@@ -88,6 +89,10 @@ func (d SqliteDialect) TruncateClause() string {\n \treturn \"delete from\"\n }\n \n+func (d SqliteDialect) SleepClause(s time.Duration) string {\n+\treturn \"\"\n+}",
        "path": "dialect_sqlite.go",
        "position": null,
        "original_position": 14,
        "commit_id": "fe96e856d4ed65f604a6c1564df37c005bbd048f",
        "original_commit_id": "c98483f1fca40fe705b1a334c00c1fe26a0b3e00",
        "user": {
            "login": "nelsam",
            "id": 1019908,
            "node_id": "MDQ6VXNlcjEwMTk5MDg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1019908?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nelsam",
            "html_url": "https://github.com/nelsam",
            "followers_url": "https://api.github.com/users/nelsam/followers",
            "following_url": "https://api.github.com/users/nelsam/following{/other_user}",
            "gists_url": "https://api.github.com/users/nelsam/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nelsam/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nelsam/subscriptions",
            "organizations_url": "https://api.github.com/users/nelsam/orgs",
            "repos_url": "https://api.github.com/users/nelsam/repos",
            "events_url": "https://api.github.com/users/nelsam/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nelsam/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Same here as with the OracleDialect - you wouldn't have to implement this method here.",
        "created_at": "2017-09-09T16:15:08Z",
        "updated_at": "2017-09-17T02:08:47Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/352#discussion_r137929655",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/352",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/137929655"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/352#discussion_r137929655"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/352"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/137929660",
        "pull_request_review_id": 61665619,
        "id": 137929660,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzkyOTY2MA==",
        "diff_hunk": "@@ -103,6 +104,10 @@ func (d SqlServerDialect) TruncateClause() string {\n \treturn \"truncate table\"\n }\n \n+func (d SqlServerDialect) SleepClause(s time.Duration) string {\n+\treturn \"\"\n+}",
        "path": "dialect_sqlserver.go",
        "position": null,
        "original_position": 14,
        "commit_id": "fe96e856d4ed65f604a6c1564df37c005bbd048f",
        "original_commit_id": "c98483f1fca40fe705b1a334c00c1fe26a0b3e00",
        "user": {
            "login": "nelsam",
            "id": 1019908,
            "node_id": "MDQ6VXNlcjEwMTk5MDg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1019908?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nelsam",
            "html_url": "https://github.com/nelsam",
            "followers_url": "https://api.github.com/users/nelsam/followers",
            "following_url": "https://api.github.com/users/nelsam/following{/other_user}",
            "gists_url": "https://api.github.com/users/nelsam/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nelsam/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nelsam/subscriptions",
            "organizations_url": "https://api.github.com/users/nelsam/orgs",
            "repos_url": "https://api.github.com/users/nelsam/repos",
            "events_url": "https://api.github.com/users/nelsam/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nelsam/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Same as with Oracle and Sqlite",
        "created_at": "2017-09-09T16:15:24Z",
        "updated_at": "2017-09-17T02:08:47Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/352#discussion_r137929660",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/352",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/137929660"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/352#discussion_r137929660"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/352"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/137929683",
        "pull_request_review_id": 61665619,
        "id": 137929683,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzkyOTY4Mw==",
        "diff_hunk": "@@ -0,0 +1,80 @@\n+// Copyright 2012 James Cooper. All rights reserved.\n+// Use of this source code is governed by a MIT-style\n+// license that can be found in the LICENSE file.\n+\n+// Package gorp provides a simple way to marshal Go structs to and from\n+// SQL databases.  It uses the database/sql package, and should work with any\n+// compliant database/sql driver.\n+//\n+// Source code and project home:\n+// https://github.com/go-gorp/gorp\n+//\n+\n+// +build go1.8\n+\n+package gorp_test\n+\n+import (\n+\t\"testing\"\n+\t\"time\"\n+\t\"context\"\n+\t\"github.com/stretchr/testify/assert\"\n+)\n+\n+// Drivers that don't support cancellation.\n+var unsupportedDrivers map[string]bool = map[string]bool{\n+\t\"mymysql\":true,\n+}\n+\n+\n+func TestWithNotCanceledContext(t *testing.T) {\n+\tdbmap := initDbMap()\n+\tdefer dropAndClose(dbmap)\n+\n+\tctx, cancel := context.WithTimeout(context.Background(), 100*time.Millisecond)\n+\tdefer cancel()\n+\n+\twithCtx := dbmap.WithContext(ctx)\n+\n+\t_, err := withCtx.Exec(\"SELECT 1\")\n+\tassert.Nil(t, err)\n+}\n+\n+func TestWithCanceledContext(t *testing.T) {\n+\tdialect, driver := dialectAndDriver()\n+\tif unsupportedDrivers[driver] {\n+\t\tt.Skip(\"Cancellation is not yet supported by all drivers. Not known to be unsupported in %s.\", driver)\n+\t}\n+\n+\tif dialect.SleepClause(time.Second) == \"\" {",
        "path": "gorp_go18_test.go",
        "position": null,
        "original_position": 49,
        "commit_id": "fe96e856d4ed65f604a6c1564df37c005bbd048f",
        "original_commit_id": "c98483f1fca40fe705b1a334c00c1fe26a0b3e00",
        "user": {
            "login": "nelsam",
            "id": 1019908,
            "node_id": "MDQ6VXNlcjEwMTk5MDg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1019908?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nelsam",
            "html_url": "https://github.com/nelsam",
            "followers_url": "https://api.github.com/users/nelsam/followers",
            "following_url": "https://api.github.com/users/nelsam/following{/other_user}",
            "gists_url": "https://api.github.com/users/nelsam/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nelsam/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nelsam/subscriptions",
            "organizations_url": "https://api.github.com/users/nelsam/orgs",
            "repos_url": "https://api.github.com/users/nelsam/repos",
            "events_url": "https://api.github.com/users/nelsam/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nelsam/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "If we used a `SleepDialect`, this would change to:\r\n\r\n```go\r\nsleeper, ok := dialect.(SleepDialect)\r\nif !ok {\r\n```",
        "created_at": "2017-09-09T16:16:20Z",
        "updated_at": "2017-09-17T02:08:47Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/352#discussion_r137929683",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/352",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/137929683"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/352#discussion_r137929683"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/352"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/137929805",
        "pull_request_review_id": 61665619,
        "id": 137929805,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzkyOTgwNQ==",
        "diff_hunk": "@@ -49,6 +51,9 @@ type Dialect interface {\n \t// string to truncate tables\n \tTruncateClause() string\n \n+\t// string to sleep for d duration\n+\tSleepClause(d time.Duration) string",
        "path": "dialect.go",
        "position": null,
        "original_position": 23,
        "commit_id": "fe96e856d4ed65f604a6c1564df37c005bbd048f",
        "original_commit_id": "c98483f1fca40fe705b1a334c00c1fe26a0b3e00",
        "user": {
            "login": "nelsam",
            "id": 1019908,
            "node_id": "MDQ6VXNlcjEwMTk5MDg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1019908?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nelsam",
            "html_url": "https://github.com/nelsam",
            "followers_url": "https://api.github.com/users/nelsam/followers",
            "following_url": "https://api.github.com/users/nelsam/following{/other_user}",
            "gists_url": "https://api.github.com/users/nelsam/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nelsam/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nelsam/subscriptions",
            "organizations_url": "https://api.github.com/users/nelsam/orgs",
            "repos_url": "https://api.github.com/users/nelsam/repos",
            "events_url": "https://api.github.com/users/nelsam/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nelsam/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "In addition, since this method is *only* used by tests, can we move the `SleepDialect` interface to the test package?  If it's in `gorp`'s main package, then users expect that implementing `SleepDialect` gives them something from `gorp`, rather than `gorp`'s tests.",
        "created_at": "2017-09-09T16:21:07Z",
        "updated_at": "2017-09-17T02:08:47Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/352#discussion_r137929805",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/352",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/137929805"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/352#discussion_r137929805"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/352"
            }
        },
        "in_reply_to_id": 137929634
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/146115274",
        "pull_request_review_id": 71016980,
        "id": 146115274,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NjExNTI3NA==",
        "diff_hunk": "@@ -0,0 +1,124 @@\n+package gorp\n+\n+import (\n+\t\"fmt\"\n+\t_ \"net\"\n+\t\"reflect\"\n+\t\"strings\"\n+\t_ \"time\"\n+)\n+\n+type CrateDialect struct {\n+\tsuffix string\n+}\n+\n+func (d CrateDialect) QuerySuffix() string { return \";\" }\n+\n+func (d CrateDialect) ToSqlType(val reflect.Type, maxsize int, isAutoIncr bool) string {\n+\t//Maxsize and isAutoIncrement are never used in this dialect\n+\t//\tswitch val.Elem() {\n+\t//\t//https://crate.io/docs/reference/sql/data_types.html#ip\n+\t//\tcase reflect.TypeOf(net.IP{}):\n+\t//\t\treturn \"ip\"\n+\t//\t//https://crate.io/docs/reference/sql/data_types.html#timestamp\n+\t//\tcase reflect.TypeOf(time.Time{}):\n+\t//\t\treturn \"timestamp\"\n+\t//\t}\n+\n+\tswitch val.Kind() {\n+\tcase reflect.Ptr:\n+\t\treturn d.ToSqlType(val.Elem(), maxsize, isAutoIncr)\n+\tcase reflect.Bool:\n+\t\treturn \"boolean\"\n+\t//https://crate.io/docs/reference/sql/data_types.html#numeric-types\n+\tcase reflect.Int, reflect.Int32, reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:\n+\t\treturn \"integer\"\n+\tcase reflect.Int8:\n+\t\treturn \"byte\"\n+\tcase reflect.Int16:\n+\t\treturn \"short\"\n+\tcase reflect.Int64:\n+\t\treturn \"long\"\n+\tcase reflect.Float32:\n+\t\treturn \"float\"\n+\tcase reflect.Float64:\n+\t\treturn \"double\"\n+\t//https://crate.io/docs/reference/sql/data_types.html#string\n+\tcase reflect.String:\n+\t\treturn \"string\"\n+\t//https://crate.io/docs/reference/sql/data_types.html#array\n+\tcase reflect.Slice:\n+\t\treturn \"array(\" + d.ToSqlType(val.Elem(), -1, false) + \")\"\n+\tdefault:\n+\t\treturn \"object\"\n+\t}\n+}\n+\n+func (d CrateDialect) AutoIncrStr() string {\n+\treturn \"PRIMARY KEY\"\n+}\n+\n+func (d CrateDialect) AutoIncrBindValue() string {\n+\treturn \"\"\n+}\n+\n+func (d CrateDialect) AutoIncrInsertSuffix(col *ColumnMap) string {\n+\treturn \"\"\n+}\n+\n+func (d CrateDialect) CreateTableSuffix() string {\n+\treturn \"\"\n+}\n+\n+func (m CrateDialect) CreateIndexSuffix() string {\n+\treturn \"\"\n+}\n+\n+func (m CrateDialect) DropIndexSuffix() string {\n+\treturn \"\"\n+}\n+\n+func (m CrateDialect) TruncateClause() string {\n+\treturn \"DELETE FROM\"\n+}\n+\n+// Returns \"?\"\n+func (d CrateDialect) BindVar(i int) string {\n+\treturn \"?\"\n+}\n+\n+func (d CrateDialect) QuoteField(f string) string {\n+\treturn \"'\" + f + \"'\"",
        "path": "dialect_crate.go",
        "position": null,
        "original_position": 91,
        "commit_id": "fd1eff2b34524f23955c820b403296c8502d60f4",
        "original_commit_id": "1b1640ef3634088d3f24a6038587332deb5918fa",
        "user": {
            "login": "nelsam",
            "id": 1019908,
            "node_id": "MDQ6VXNlcjEwMTk5MDg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1019908?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nelsam",
            "html_url": "https://github.com/nelsam",
            "followers_url": "https://api.github.com/users/nelsam/followers",
            "following_url": "https://api.github.com/users/nelsam/following{/other_user}",
            "gists_url": "https://api.github.com/users/nelsam/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nelsam/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nelsam/subscriptions",
            "organizations_url": "https://api.github.com/users/nelsam/orgs",
            "repos_url": "https://api.github.com/users/nelsam/repos",
            "events_url": "https://api.github.com/users/nelsam/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nelsam/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This is incorrect.  Crate uses double-quotes for fields and whatnot.  It should  be ``return `\"` + f + `\"` ``.",
        "created_at": "2017-10-21T20:52:14Z",
        "updated_at": "2017-10-21T20:56:29Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/342#discussion_r146115274",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/342",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/146115274"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/342#discussion_r146115274"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/342"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/157131828",
        "pull_request_review_id": 83725578,
        "id": 157131828,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzEzMTgyOA==",
        "diff_hunk": "@@ -72,6 +72,9 @@ type Dialect interface {\n \tIfSchemaNotExists(command, schema string) string\n \tIfTableExists(command, schema, table string) string\n \tIfTableNotExists(command, schema, table string) string\n+\n+\t// The command to create a new database/schema\n+\tCreateSchemaCommand() string",
        "path": "dialect.go",
        "position": 6,
        "original_position": 6,
        "commit_id": "af38f4280fbd7033024c8ab40608b88045b2c593",
        "original_commit_id": "af38f4280fbd7033024c8ab40608b88045b2c593",
        "user": {
            "login": "nelsam",
            "id": 1019908,
            "node_id": "MDQ6VXNlcjEwMTk5MDg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1019908?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nelsam",
            "html_url": "https://github.com/nelsam",
            "followers_url": "https://api.github.com/users/nelsam/followers",
            "following_url": "https://api.github.com/users/nelsam/following{/other_user}",
            "gists_url": "https://api.github.com/users/nelsam/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nelsam/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nelsam/subscriptions",
            "organizations_url": "https://api.github.com/users/nelsam/orgs",
            "repos_url": "https://api.github.com/users/nelsam/repos",
            "events_url": "https://api.github.com/users/nelsam/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nelsam/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Unfortunately, this would force a major version bump, because custom dialects would no longer implement the updated `Dialect` type.  Can we do this as an optional type that dialects are not required to implement (and then use the old logic as a fallback)?  Maybe something like `type NonstandardSchemaDialect interface { CreateSchemaCommand() string }`?",
        "created_at": "2017-12-15T06:33:23Z",
        "updated_at": "2017-12-15T06:33:43Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/359#discussion_r157131828",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/359",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/157131828"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/359#discussion_r157131828"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/359"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/157905508",
        "pull_request_review_id": 84626883,
        "id": 157905508,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzkwNTUwOA==",
        "diff_hunk": "@@ -72,6 +72,9 @@ type Dialect interface {\n \tIfSchemaNotExists(command, schema string) string\n \tIfTableExists(command, schema, table string) string\n \tIfTableNotExists(command, schema, table string) string\n+\n+\t// The command to create a new database/schema\n+\tCreateSchemaCommand() string",
        "path": "dialect.go",
        "position": 6,
        "original_position": 6,
        "commit_id": "af38f4280fbd7033024c8ab40608b88045b2c593",
        "original_commit_id": "af38f4280fbd7033024c8ab40608b88045b2c593",
        "user": {
            "login": "zikes",
            "id": 410905,
            "node_id": "MDQ6VXNlcjQxMDkwNQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/410905?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zikes",
            "html_url": "https://github.com/zikes",
            "followers_url": "https://api.github.com/users/zikes/followers",
            "following_url": "https://api.github.com/users/zikes/following{/other_user}",
            "gists_url": "https://api.github.com/users/zikes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zikes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zikes/subscriptions",
            "organizations_url": "https://api.github.com/users/zikes/orgs",
            "repos_url": "https://api.github.com/users/zikes/repos",
            "events_url": "https://api.github.com/users/zikes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zikes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Excellent idea. I'd like to change it slightly, though, since even a `NonstandardSchemaDialect` could vary amongst custom implementations. Maybe a `type SchemaCreator() interface { CreateSchemaCommand() string }` instead?",
        "created_at": "2017-12-19T23:44:12Z",
        "updated_at": "2017-12-19T23:44:12Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/359#discussion_r157905508",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/359",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/157905508"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/359#discussion_r157905508"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/359"
            }
        },
        "in_reply_to_id": 157131828
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/158086994",
        "pull_request_review_id": 84839285,
        "id": 158086994,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODA4Njk5NA==",
        "diff_hunk": "@@ -72,6 +72,9 @@ type Dialect interface {\n \tIfSchemaNotExists(command, schema string) string\n \tIfTableExists(command, schema, table string) string\n \tIfTableNotExists(command, schema, table string) string\n+\n+\t// The command to create a new database/schema\n+\tCreateSchemaCommand() string",
        "path": "dialect.go",
        "position": 6,
        "original_position": 6,
        "commit_id": "af38f4280fbd7033024c8ab40608b88045b2c593",
        "original_commit_id": "af38f4280fbd7033024c8ab40608b88045b2c593",
        "user": {
            "login": "nelsam",
            "id": 1019908,
            "node_id": "MDQ6VXNlcjEwMTk5MDg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1019908?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nelsam",
            "html_url": "https://github.com/nelsam",
            "followers_url": "https://api.github.com/users/nelsam/followers",
            "following_url": "https://api.github.com/users/nelsam/following{/other_user}",
            "gists_url": "https://api.github.com/users/nelsam/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nelsam/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nelsam/subscriptions",
            "organizations_url": "https://api.github.com/users/nelsam/orgs",
            "repos_url": "https://api.github.com/users/nelsam/repos",
            "events_url": "https://api.github.com/users/nelsam/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nelsam/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think `SchemaCreator` is a little misleading, since all other dialects will still be able to create schemas.  What we're providing is a way for dialects to inform `gorp` that they are unable to execute `create schema` operations per the SQL standard.\r\n\r\nFor those reasons, I still think something along the lines of \"nonstandard\" should be part of the name.  It is accurate - these are dialects that cannot handle the SQL standard for `create schema`, so they should be labeled as such.  `NonstandardSchemaCreator` sounds fine to me, too.\r\n\r\nAlso, we might want to pass the schema name in to `CreateSchemaCommand` so that dialects have more power over the resulting SQL command.",
        "created_at": "2017-12-20T17:29:50Z",
        "updated_at": "2017-12-20T17:29:50Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/359#discussion_r158086994",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/359",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/158086994"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/359#discussion_r158086994"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/359"
            }
        },
        "in_reply_to_id": 157131828
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/158117780",
        "pull_request_review_id": 84875965,
        "id": 158117780,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODExNzc4MA==",
        "diff_hunk": "@@ -72,6 +72,9 @@ type Dialect interface {\n \tIfSchemaNotExists(command, schema string) string\n \tIfTableExists(command, schema, table string) string\n \tIfTableNotExists(command, schema, table string) string\n+\n+\t// The command to create a new database/schema\n+\tCreateSchemaCommand() string",
        "path": "dialect.go",
        "position": 6,
        "original_position": 6,
        "commit_id": "af38f4280fbd7033024c8ab40608b88045b2c593",
        "original_commit_id": "af38f4280fbd7033024c8ab40608b88045b2c593",
        "user": {
            "login": "zikes",
            "id": 410905,
            "node_id": "MDQ6VXNlcjQxMDkwNQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/410905?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zikes",
            "html_url": "https://github.com/zikes",
            "followers_url": "https://api.github.com/users/zikes/followers",
            "following_url": "https://api.github.com/users/zikes/following{/other_user}",
            "gists_url": "https://api.github.com/users/zikes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zikes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zikes/subscriptions",
            "organizations_url": "https://api.github.com/users/zikes/orgs",
            "repos_url": "https://api.github.com/users/zikes/repos",
            "events_url": "https://api.github.com/users/zikes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zikes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I like the sound of that. I'll get that implemented and try to sort out testing after the holidays :+1:",
        "created_at": "2017-12-20T19:42:52Z",
        "updated_at": "2017-12-20T19:42:52Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/359#discussion_r158117780",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/359",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/158117780"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/359#discussion_r158117780"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/359"
            }
        },
        "in_reply_to_id": 157131828
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/195326460",
        "pull_request_review_id": 128670407,
        "id": 195326460,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTMyNjQ2MA==",
        "diff_hunk": "@@ -2360,6 +2360,34 @@ func TestPrepare(t *testing.T) {\n \t}\n }\n \n+type UUID4 string\n+\n+func (u UUID4) Value() (driver.Value, error) {\n+\tif u == \"\" {\n+\t\treturn nil, nil\n+\t}\n+\n+\treturn string(u), nil\n+}\n+\n+type NilPointer struct {\n+\tId     string",
        "path": "gorp_test.go",
        "position": null,
        "original_position": 15,
        "commit_id": "b3911ed8ed2eeefcd15567d3d668fb410aafb408",
        "original_commit_id": "1122b0321511fdd982f5a974b1c7dd7cf8446d3f",
        "user": {
            "login": "golangci",
            "id": 35628013,
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjM1NjI4MDEz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/35628013?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/golangci",
            "html_url": "https://github.com/golangci",
            "followers_url": "https://api.github.com/users/golangci/followers",
            "following_url": "https://api.github.com/users/golangci/following{/other_user}",
            "gists_url": "https://api.github.com/users/golangci/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/golangci/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/golangci/subscriptions",
            "organizations_url": "https://api.github.com/users/golangci/orgs",
            "repos_url": "https://api.github.com/users/golangci/repos",
            "events_url": "https://api.github.com/users/golangci/events{/privacy}",
            "received_events_url": "https://api.github.com/users/golangci/received_events",
            "type": "Organization",
            "site_admin": false
        },
        "body": "struct field Id should be ID",
        "created_at": "2018-06-14T07:36:27Z",
        "updated_at": "2018-06-14T13:05:53Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/374#discussion_r195326460",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/374",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/195326460"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/374#discussion_r195326460"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/374"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/195326462",
        "pull_request_review_id": 128670407,
        "id": 195326462,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTMyNjQ2Mg==",
        "diff_hunk": "@@ -2360,6 +2360,34 @@ func TestPrepare(t *testing.T) {\n \t}\n }\n \n+type UUID4 string\n+\n+func (u UUID4) Value() (driver.Value, error) {\n+\tif u == \"\" {\n+\t\treturn nil, nil\n+\t}\n+\n+\treturn string(u), nil\n+}\n+\n+type NilPointer struct {\n+\tId     string\n+\tUserId *UUID4",
        "path": "gorp_test.go",
        "position": null,
        "original_position": 16,
        "commit_id": "b3911ed8ed2eeefcd15567d3d668fb410aafb408",
        "original_commit_id": "1122b0321511fdd982f5a974b1c7dd7cf8446d3f",
        "user": {
            "login": "golangci",
            "id": 35628013,
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjM1NjI4MDEz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/35628013?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/golangci",
            "html_url": "https://github.com/golangci",
            "followers_url": "https://api.github.com/users/golangci/followers",
            "following_url": "https://api.github.com/users/golangci/following{/other_user}",
            "gists_url": "https://api.github.com/users/golangci/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/golangci/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/golangci/subscriptions",
            "organizations_url": "https://api.github.com/users/golangci/orgs",
            "repos_url": "https://api.github.com/users/golangci/repos",
            "events_url": "https://api.github.com/users/golangci/events{/privacy}",
            "received_events_url": "https://api.github.com/users/golangci/received_events",
            "type": "Organization",
            "site_admin": false
        },
        "body": "struct field UserId should be UserID",
        "created_at": "2018-06-14T07:36:28Z",
        "updated_at": "2018-06-14T13:05:53Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/374#discussion_r195326462",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/374",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/195326462"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/374#discussion_r195326462"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/374"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/196164664",
        "pull_request_review_id": 129665955,
        "id": 196164664,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NjE2NDY2NA==",
        "diff_hunk": "@@ -0,0 +1,256 @@\n+// Copyright 2012 James Cooper. All rights reserved.\n+// Use of this source code is governed by a MIT-style\n+// license that can be found in the LICENSE file.\n+\n+// Package gorp provides a simple way to marshal Go structs to and from\n+// SQL databases.  It uses the database/sql package, and should work with any\n+// compliant database/sql driver.\n+//\n+// Source code and project home:\n+// https://github.com/go-gorp/gorp\n+\n+package gorp",
        "path": "db_test.go",
        "position": null,
        "original_position": 12,
        "commit_id": "49db9c301f3236b7ec9b134f99c99e73d8d3b99c",
        "original_commit_id": "d8d671c5943defbe2e172f90670e9b4b90442551",
        "user": {
            "login": "nelsam",
            "id": 1019908,
            "node_id": "MDQ6VXNlcjEwMTk5MDg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1019908?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nelsam",
            "html_url": "https://github.com/nelsam",
            "followers_url": "https://api.github.com/users/nelsam/followers",
            "following_url": "https://api.github.com/users/nelsam/following{/other_user}",
            "gists_url": "https://api.github.com/users/nelsam/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nelsam/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nelsam/subscriptions",
            "organizations_url": "https://api.github.com/users/nelsam/orgs",
            "repos_url": "https://api.github.com/users/nelsam/repos",
            "events_url": "https://api.github.com/users/nelsam/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nelsam/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Should be `package gorp_test`\r\n\r\nThere are a lot of reasons for this, but the biggest, most important one is: when you test unexported functionality, you're not testing a use case of the code.  In this case, the tests that are in this package don't actually prove that `gorp` works as expected from a user's perspective.  They prove that `expandSliceArgs` works as expected, but they don't prove that `gorp` ever calls `expandSliceArgs`.\r\n\r\nI know testing exported functionality only is more difficult and frustrating (especially in a project like gorp where all of our tests are integration tests), but it's much safer _and_ gives the end user a better example of how they might use it.",
        "created_at": "2018-06-18T17:40:51Z",
        "updated_at": "2018-06-19T16:53:35Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/376#discussion_r196164664",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/376",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/196164664"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/376#discussion_r196164664"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/376"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/196165167",
        "pull_request_review_id": 129666527,
        "id": 196165167,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NjE2NTE2Nw==",
        "diff_hunk": "@@ -0,0 +1,256 @@\n+// Copyright 2012 James Cooper. All rights reserved.\n+// Use of this source code is governed by a MIT-style\n+// license that can be found in the LICENSE file.\n+\n+// Package gorp provides a simple way to marshal Go structs to and from\n+// SQL databases.  It uses the database/sql package, and should work with any\n+// compliant database/sql driver.\n+//\n+// Source code and project home:\n+// https://github.com/go-gorp/gorp\n+\n+package gorp",
        "path": "db_test.go",
        "position": null,
        "original_position": 12,
        "commit_id": "49db9c301f3236b7ec9b134f99c99e73d8d3b99c",
        "original_commit_id": "d8d671c5943defbe2e172f90670e9b4b90442551",
        "user": {
            "login": "rafaeljusto",
            "id": 611469,
            "node_id": "MDQ6VXNlcjYxMTQ2OQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/611469?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rafaeljusto",
            "html_url": "https://github.com/rafaeljusto",
            "followers_url": "https://api.github.com/users/rafaeljusto/followers",
            "following_url": "https://api.github.com/users/rafaeljusto/following{/other_user}",
            "gists_url": "https://api.github.com/users/rafaeljusto/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rafaeljusto/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rafaeljusto/subscriptions",
            "organizations_url": "https://api.github.com/users/rafaeljusto/orgs",
            "repos_url": "https://api.github.com/users/rafaeljusto/repos",
            "events_url": "https://api.github.com/users/rafaeljusto/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rafaeljusto/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Sure! I will work on that.",
        "created_at": "2018-06-18T17:42:20Z",
        "updated_at": "2018-06-19T16:53:35Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/376#discussion_r196165167",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/376",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/196165167"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/376#discussion_r196165167"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/376"
            }
        },
        "in_reply_to_id": 196164664
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/196165540",
        "pull_request_review_id": 129666964,
        "id": 196165540,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NjE2NTU0MA==",
        "diff_hunk": "@@ -0,0 +1,256 @@\n+// Copyright 2012 James Cooper. All rights reserved.\n+// Use of this source code is governed by a MIT-style\n+// license that can be found in the LICENSE file.\n+\n+// Package gorp provides a simple way to marshal Go structs to and from\n+// SQL databases.  It uses the database/sql package, and should work with any\n+// compliant database/sql driver.\n+//\n+// Source code and project home:\n+// https://github.com/go-gorp/gorp\n+\n+package gorp",
        "path": "db_test.go",
        "position": null,
        "original_position": 12,
        "commit_id": "49db9c301f3236b7ec9b134f99c99e73d8d3b99c",
        "original_commit_id": "d8d671c5943defbe2e172f90670e9b4b90442551",
        "user": {
            "login": "nelsam",
            "id": 1019908,
            "node_id": "MDQ6VXNlcjEwMTk5MDg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1019908?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nelsam",
            "html_url": "https://github.com/nelsam",
            "followers_url": "https://api.github.com/users/nelsam/followers",
            "following_url": "https://api.github.com/users/nelsam/following{/other_user}",
            "gists_url": "https://api.github.com/users/nelsam/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nelsam/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nelsam/subscriptions",
            "organizations_url": "https://api.github.com/users/nelsam/orgs",
            "repos_url": "https://api.github.com/users/nelsam/repos",
            "events_url": "https://api.github.com/users/nelsam/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nelsam/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "thanks! :)",
        "created_at": "2018-06-18T17:43:29Z",
        "updated_at": "2018-06-19T16:53:35Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/376#discussion_r196165540",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/376",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/196165540"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/376#discussion_r196165540"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/376"
            }
        },
        "in_reply_to_id": 196164664
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/196360290",
        "pull_request_review_id": 129895271,
        "id": 196360290,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NjM2MDI5MA==",
        "diff_hunk": "@@ -0,0 +1,256 @@\n+// Copyright 2012 James Cooper. All rights reserved.\n+// Use of this source code is governed by a MIT-style\n+// license that can be found in the LICENSE file.\n+\n+// Package gorp provides a simple way to marshal Go structs to and from\n+// SQL databases.  It uses the database/sql package, and should work with any\n+// compliant database/sql driver.\n+//\n+// Source code and project home:\n+// https://github.com/go-gorp/gorp\n+\n+package gorp",
        "path": "db_test.go",
        "position": null,
        "original_position": 12,
        "commit_id": "49db9c301f3236b7ec9b134f99c99e73d8d3b99c",
        "original_commit_id": "d8d671c5943defbe2e172f90670e9b4b90442551",
        "user": {
            "login": "rafaeljusto",
            "id": 611469,
            "node_id": "MDQ6VXNlcjYxMTQ2OQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/611469?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rafaeljusto",
            "html_url": "https://github.com/rafaeljusto",
            "followers_url": "https://api.github.com/users/rafaeljusto/followers",
            "following_url": "https://api.github.com/users/rafaeljusto/following{/other_user}",
            "gists_url": "https://api.github.com/users/rafaeljusto/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rafaeljusto/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rafaeljusto/subscriptions",
            "organizations_url": "https://api.github.com/users/rafaeljusto/orgs",
            "repos_url": "https://api.github.com/users/rafaeljusto/repos",
            "events_url": "https://api.github.com/users/rafaeljusto/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rafaeljusto/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\u2705 Done! Changed the test to only access an exported method.\r\n\r\nShould I test all exported methods that I added the `expandSliceArgs` call? Because they would all call the same piece of code.",
        "created_at": "2018-06-19T09:49:47Z",
        "updated_at": "2018-06-19T16:53:35Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/376#discussion_r196360290",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/376",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/196360290"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/376#discussion_r196360290"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/376"
            }
        },
        "in_reply_to_id": 196164664
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/196496992",
        "pull_request_review_id": 130060816,
        "id": 196496992,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NjQ5Njk5Mg==",
        "diff_hunk": "@@ -0,0 +1,256 @@\n+// Copyright 2012 James Cooper. All rights reserved.\n+// Use of this source code is governed by a MIT-style\n+// license that can be found in the LICENSE file.\n+\n+// Package gorp provides a simple way to marshal Go structs to and from\n+// SQL databases.  It uses the database/sql package, and should work with any\n+// compliant database/sql driver.\n+//\n+// Source code and project home:\n+// https://github.com/go-gorp/gorp\n+\n+package gorp",
        "path": "db_test.go",
        "position": null,
        "original_position": 12,
        "commit_id": "49db9c301f3236b7ec9b134f99c99e73d8d3b99c",
        "original_commit_id": "d8d671c5943defbe2e172f90670e9b4b90442551",
        "user": {
            "login": "rafaeljusto",
            "id": 611469,
            "node_id": "MDQ6VXNlcjYxMTQ2OQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/611469?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rafaeljusto",
            "html_url": "https://github.com/rafaeljusto",
            "followers_url": "https://api.github.com/users/rafaeljusto/followers",
            "following_url": "https://api.github.com/users/rafaeljusto/following{/other_user}",
            "gists_url": "https://api.github.com/users/rafaeljusto/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rafaeljusto/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rafaeljusto/subscriptions",
            "organizations_url": "https://api.github.com/users/rafaeljusto/orgs",
            "repos_url": "https://api.github.com/users/rafaeljusto/repos",
            "events_url": "https://api.github.com/users/rafaeljusto/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rafaeljusto/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@nelsam Got the error bellow on Travis built, related to a `fmt.Errorf` message that I didn't work on. Looking at [this line](https://github.com/go-gorp/gorp/blob/6032c66e0f5f155fd56216ed14cbbdd991034605/select.go#L134) it does not appear that we need to add `...` to `args`. Any clues for that? \ud83d\ude04 \r\n\r\n```\r\n# github.com/go-gorp/gorp\r\n./select.go:134: missing ... in args forwarded to printf-like function\r\nFAIL\tgithub.com/go-gorp/gorp [build failed]\r\n```",
        "created_at": "2018-06-19T16:37:03Z",
        "updated_at": "2018-06-19T16:53:35Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/376#discussion_r196496992",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/376",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/196496992"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/376#discussion_r196496992"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/376"
            }
        },
        "in_reply_to_id": 196164664
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/196499671",
        "pull_request_review_id": 130064123,
        "id": 196499671,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NjQ5OTY3MQ==",
        "diff_hunk": "@@ -0,0 +1,256 @@\n+// Copyright 2012 James Cooper. All rights reserved.\n+// Use of this source code is governed by a MIT-style\n+// license that can be found in the LICENSE file.\n+\n+// Package gorp provides a simple way to marshal Go structs to and from\n+// SQL databases.  It uses the database/sql package, and should work with any\n+// compliant database/sql driver.\n+//\n+// Source code and project home:\n+// https://github.com/go-gorp/gorp\n+\n+package gorp",
        "path": "db_test.go",
        "position": null,
        "original_position": 12,
        "commit_id": "49db9c301f3236b7ec9b134f99c99e73d8d3b99c",
        "original_commit_id": "d8d671c5943defbe2e172f90670e9b4b90442551",
        "user": {
            "login": "nelsam",
            "id": 1019908,
            "node_id": "MDQ6VXNlcjEwMTk5MDg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1019908?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nelsam",
            "html_url": "https://github.com/nelsam",
            "followers_url": "https://api.github.com/users/nelsam/followers",
            "following_url": "https://api.github.com/users/nelsam/following{/other_user}",
            "gists_url": "https://api.github.com/users/nelsam/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nelsam/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nelsam/subscriptions",
            "organizations_url": "https://api.github.com/users/nelsam/orgs",
            "repos_url": "https://api.github.com/users/nelsam/repos",
            "events_url": "https://api.github.com/users/nelsam/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nelsam/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "That failure only seemed to happen in go `tip`, which is an allowed failure - you can ignore it, I think.\r\n\r\nThe real failure is in [the test run with postgres](https://travis-ci.org/go-gorp/gorp/jobs/394025421#L4715-L4720):\r\n```\r\n--- FAIL: TestDbMap_Select_expandSliceArgs (0.01s)\r\n    --- FAIL: TestDbMap_Select_expandSliceArgs/it_should_handle_slice_placeholders_correctly (0.00s)\r\n    \tdb_test.go:180: pq: column \"field1\" does not exist\r\n    --- FAIL: TestDbMap_Select_expandSliceArgs/it_should_handle_slice_placeholders_correctly_with_custom_types (0.00s)\r\n    \tdb_test.go:180: pq: column \"field2\" does not exist\r\n```",
        "created_at": "2018-06-19T16:45:50Z",
        "updated_at": "2018-06-19T16:53:35Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/376#discussion_r196499671",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/376",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/196499671"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/376#discussion_r196499671"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/376"
            }
        },
        "in_reply_to_id": 196164664
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/196506385",
        "pull_request_review_id": 130072298,
        "id": 196506385,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NjUwNjM4NQ==",
        "diff_hunk": "@@ -0,0 +1,256 @@\n+// Copyright 2012 James Cooper. All rights reserved.\n+// Use of this source code is governed by a MIT-style\n+// license that can be found in the LICENSE file.\n+\n+// Package gorp provides a simple way to marshal Go structs to and from\n+// SQL databases.  It uses the database/sql package, and should work with any\n+// compliant database/sql driver.\n+//\n+// Source code and project home:\n+// https://github.com/go-gorp/gorp\n+\n+package gorp",
        "path": "db_test.go",
        "position": null,
        "original_position": 12,
        "commit_id": "49db9c301f3236b7ec9b134f99c99e73d8d3b99c",
        "original_commit_id": "d8d671c5943defbe2e172f90670e9b4b90442551",
        "user": {
            "login": "rafaeljusto",
            "id": 611469,
            "node_id": "MDQ6VXNlcjYxMTQ2OQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/611469?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rafaeljusto",
            "html_url": "https://github.com/rafaeljusto",
            "followers_url": "https://api.github.com/users/rafaeljusto/followers",
            "following_url": "https://api.github.com/users/rafaeljusto/following{/other_user}",
            "gists_url": "https://api.github.com/users/rafaeljusto/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rafaeljusto/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rafaeljusto/subscriptions",
            "organizations_url": "https://api.github.com/users/rafaeljusto/orgs",
            "repos_url": "https://api.github.com/users/rafaeljusto/repos",
            "events_url": "https://api.github.com/users/rafaeljusto/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rafaeljusto/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Thanks @nelsam , solved the postgres issue. `Go 1.9` and `Go 1.10` tests are green.",
        "created_at": "2018-06-19T17:07:18Z",
        "updated_at": "2018-06-19T17:07:19Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/376#discussion_r196506385",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/376",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/196506385"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/376#discussion_r196506385"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/376"
            }
        },
        "in_reply_to_id": 196164664
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/196522131",
        "pull_request_review_id": 130091155,
        "id": 196522131,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NjUyMjEzMQ==",
        "diff_hunk": "@@ -0,0 +1,256 @@\n+// Copyright 2012 James Cooper. All rights reserved.\n+// Use of this source code is governed by a MIT-style\n+// license that can be found in the LICENSE file.\n+\n+// Package gorp provides a simple way to marshal Go structs to and from\n+// SQL databases.  It uses the database/sql package, and should work with any\n+// compliant database/sql driver.\n+//\n+// Source code and project home:\n+// https://github.com/go-gorp/gorp\n+\n+package gorp",
        "path": "db_test.go",
        "position": null,
        "original_position": 12,
        "commit_id": "49db9c301f3236b7ec9b134f99c99e73d8d3b99c",
        "original_commit_id": "d8d671c5943defbe2e172f90670e9b4b90442551",
        "user": {
            "login": "nelsam",
            "id": 1019908,
            "node_id": "MDQ6VXNlcjEwMTk5MDg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1019908?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nelsam",
            "html_url": "https://github.com/nelsam",
            "followers_url": "https://api.github.com/users/nelsam/followers",
            "following_url": "https://api.github.com/users/nelsam/following{/other_user}",
            "gists_url": "https://api.github.com/users/nelsam/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nelsam/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nelsam/subscriptions",
            "organizations_url": "https://api.github.com/users/nelsam/orgs",
            "repos_url": "https://api.github.com/users/nelsam/repos",
            "events_url": "https://api.github.com/users/nelsam/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nelsam/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "cool; I'll review after work",
        "created_at": "2018-06-19T17:55:51Z",
        "updated_at": "2018-06-19T17:55:51Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/376#discussion_r196522131",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/376",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/196522131"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/376#discussion_r196522131"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/376"
            }
        },
        "in_reply_to_id": 196164664
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/193306398",
        "pull_request_review_id": 126250063,
        "id": 193306398,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzMwNjM5OA==",
        "diff_hunk": "@@ -87,12 +87,29 @@ func (t *TableMap) SetUniqueTogether(fieldNames ...string) *TableMap {\n \t\t\t\"gorp: SetUniqueTogether: must provide at least two fieldNames to set uniqueness constraint.\"))\n \t}\n \n-\tcolumns := make([]string, 0)\n+\tcolumns := make([]string, 0, len(fieldNames))\n \tfor _, name := range fieldNames {\n \t\tcolumns = append(columns, name)\n \t}\n-\tt.uniqueTogether = append(t.uniqueTogether, columns)\n-\tt.ResetSql()\n+\n+\talreadyExists := false\n+checkDuplicates:",
        "path": "table.go",
        "position": null,
        "original_position": 13,
        "commit_id": "eb790dbe59229ba49b2afef2ce86edd7be2a6ac0",
        "original_commit_id": "30eeb387c749fd7fc490870e7f9340e4c695aec2",
        "user": {
            "login": "nelsam",
            "id": 1019908,
            "node_id": "MDQ6VXNlcjEwMTk5MDg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1019908?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nelsam",
            "html_url": "https://github.com/nelsam",
            "followers_url": "https://api.github.com/users/nelsam/followers",
            "following_url": "https://api.github.com/users/nelsam/following{/other_user}",
            "gists_url": "https://api.github.com/users/nelsam/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nelsam/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nelsam/subscriptions",
            "organizations_url": "https://api.github.com/users/nelsam/orgs",
            "repos_url": "https://api.github.com/users/nelsam/repos",
            "events_url": "https://api.github.com/users/nelsam/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nelsam/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'm not really comfortable merging named loops if they can be avoided.  I'll refactor this next time I get a chance (hopefully tomorrow) and send you a PR for your PR.",
        "created_at": "2018-06-06T06:43:37Z",
        "updated_at": "2018-06-22T14:20:29Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/372#discussion_r193306398",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/372",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/193306398"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/372#discussion_r193306398"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/372"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/206192121",
        "pull_request_review_id": 141582589,
        "id": 206192121,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjE5MjEyMQ==",
        "diff_hunk": "@@ -169,8 +169,16 @@ func (t *TableMap) bindInsert(elem reflect.Value) (bindInstance, error) {\n }\n \n func (t *TableMap) bindUpdate(elem reflect.Value, colFilter ColumnFilter) (bindInstance, error) {\n+\n \tif colFilter == nil {\n+\t\tif t.colFilter != nil {\n+\t\t\tt.updatePlan = bindPlan{}\n+\t\t}\n+\t\tt.colFilter = nil\n \t\tcolFilter = acceptAllFilter\n+\t} else {\n+\t\tt.updatePlan = bindPlan{} // a new bindPlan everytime; since we cannot compare colFilter funcs\n+\t\tt.colFilter = colFilter",
        "path": "table_bindings.go",
        "position": 13,
        "original_position": 13,
        "commit_id": "17f746edfe1d1f250bf487136d7d80b825f584e9",
        "original_commit_id": "17f746edfe1d1f250bf487136d7d80b825f584e9",
        "user": {
            "login": "nelsam",
            "id": 1019908,
            "node_id": "MDQ6VXNlcjEwMTk5MDg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1019908?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nelsam",
            "html_url": "https://github.com/nelsam",
            "followers_url": "https://api.github.com/users/nelsam/followers",
            "following_url": "https://api.github.com/users/nelsam/following{/other_user}",
            "gists_url": "https://api.github.com/users/nelsam/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nelsam/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nelsam/subscriptions",
            "organizations_url": "https://api.github.com/users/nelsam/orgs",
            "repos_url": "https://api.github.com/users/nelsam/repos",
            "events_url": "https://api.github.com/users/nelsam/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nelsam/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'm a firm believer in avoiding `else` at nearly all costs.  Branches are really harsh on the mental stack when reading code, and `else` statements are the worst (especially in go, where they can carry extra context).  Can we try something more like:\r\n```go\r\nif t.colFilter != nil || colFilter != nil {\r\n    t.updatePlan = bindPlan{}\r\n}\r\nif colFilter == nil {\r\n    colFilter = acceptAllFilter\r\n}\r\nt.colFilter = colFilter\r\n```",
        "created_at": "2018-07-30T15:17:42Z",
        "updated_at": "2018-07-30T15:17:42Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/373#discussion_r206192121",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/373",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/206192121"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/373#discussion_r206192121"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/373"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/206192958",
        "pull_request_review_id": 141583072,
        "id": 206192958,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjE5Mjk1OA==",
        "diff_hunk": "@@ -26,12 +26,13 @@ type TableMap struct {\n \tSchemaName     string\n \tgotype         reflect.Type\n \tColumns        []*ColumnMap\n-\tkeys           []*ColumnMap\n+\tkeys           []*ColumnMap // primary key column; can be autoIncrement",
        "path": "table.go",
        "position": 5,
        "original_position": 5,
        "commit_id": "17f746edfe1d1f250bf487136d7d80b825f584e9",
        "original_commit_id": "17f746edfe1d1f250bf487136d7d80b825f584e9",
        "user": {
            "login": "nelsam",
            "id": 1019908,
            "node_id": "MDQ6VXNlcjEwMTk5MDg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1019908?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nelsam",
            "html_url": "https://github.com/nelsam",
            "followers_url": "https://api.github.com/users/nelsam/followers",
            "following_url": "https://api.github.com/users/nelsam/following{/other_user}",
            "gists_url": "https://api.github.com/users/nelsam/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nelsam/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nelsam/subscriptions",
            "organizations_url": "https://api.github.com/users/nelsam/orgs",
            "repos_url": "https://api.github.com/users/nelsam/repos",
            "events_url": "https://api.github.com/users/nelsam/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nelsam/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I don't think this comment is related to this PR.",
        "created_at": "2018-07-30T15:18:43Z",
        "updated_at": "2018-07-30T15:18:44Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/373#discussion_r206192958",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/373",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/206192958"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/373#discussion_r206192958"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/373"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/206193427",
        "pull_request_review_id": 141583374,
        "id": 206193427,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjE5MzQyNw==",
        "diff_hunk": "@@ -296,7 +296,7 @@ func (m *DbMap) readStructColumns(t reflect.Type) (cols []*ColumnMap, primaryKey\n \t\t\t\t\tisPK = true\n \t\t\t\tcase \"autoincrement\":\n \t\t\t\t\tisAuto = true\n-\t\t\t\tcase \"notnull\":\n+\t\t\t\tcase \"notnull\", \"not null\":",
        "path": "db.go",
        "position": 5,
        "original_position": 5,
        "commit_id": "17f746edfe1d1f250bf487136d7d80b825f584e9",
        "original_commit_id": "17f746edfe1d1f250bf487136d7d80b825f584e9",
        "user": {
            "login": "nelsam",
            "id": 1019908,
            "node_id": "MDQ6VXNlcjEwMTk5MDg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1019908?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nelsam",
            "html_url": "https://github.com/nelsam",
            "followers_url": "https://api.github.com/users/nelsam/followers",
            "following_url": "https://api.github.com/users/nelsam/following{/other_user}",
            "gists_url": "https://api.github.com/users/nelsam/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nelsam/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nelsam/subscriptions",
            "organizations_url": "https://api.github.com/users/nelsam/orgs",
            "repos_url": "https://api.github.com/users/nelsam/repos",
            "events_url": "https://api.github.com/users/nelsam/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nelsam/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This change is not related to this PR, and it also doesn't have any tests.",
        "created_at": "2018-07-30T15:19:22Z",
        "updated_at": "2018-07-30T15:19:22Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/373#discussion_r206193427",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/373",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/206193427"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/373#discussion_r206193427"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/373"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/206282495",
        "pull_request_review_id": 141668449,
        "id": 206282495,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjI4MjQ5NQ==",
        "diff_hunk": "@@ -72,6 +72,9 @@ type Dialect interface {\n \tIfSchemaNotExists(command, schema string) string\n \tIfTableExists(command, schema, table string) string\n \tIfTableNotExists(command, schema, table string) string\n+\n+\t// The command to create a new database/schema\n+\tCreateSchemaCommand() string",
        "path": "dialect.go",
        "position": 6,
        "original_position": 6,
        "commit_id": "af38f4280fbd7033024c8ab40608b88045b2c593",
        "original_commit_id": "af38f4280fbd7033024c8ab40608b88045b2c593",
        "user": {
            "login": "nelsam",
            "id": 1019908,
            "node_id": "MDQ6VXNlcjEwMTk5MDg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1019908?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nelsam",
            "html_url": "https://github.com/nelsam",
            "followers_url": "https://api.github.com/users/nelsam/followers",
            "following_url": "https://api.github.com/users/nelsam/following{/other_user}",
            "gists_url": "https://api.github.com/users/nelsam/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nelsam/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nelsam/subscriptions",
            "organizations_url": "https://api.github.com/users/nelsam/orgs",
            "repos_url": "https://api.github.com/users/nelsam/repos",
            "events_url": "https://api.github.com/users/nelsam/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nelsam/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@zikes Hey, just checking in; have you had any more time to work on this?",
        "created_at": "2018-07-30T18:51:01Z",
        "updated_at": "2018-07-30T18:51:01Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/359#discussion_r206282495",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/359",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/206282495"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/359#discussion_r206282495"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/359"
            }
        },
        "in_reply_to_id": 157131828
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/206983976",
        "pull_request_review_id": 142504485,
        "id": 206983976,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjk4Mzk3Ng==",
        "diff_hunk": "@@ -72,6 +72,9 @@ type Dialect interface {\n \tIfSchemaNotExists(command, schema string) string\n \tIfTableExists(command, schema, table string) string\n \tIfTableNotExists(command, schema, table string) string\n+\n+\t// The command to create a new database/schema\n+\tCreateSchemaCommand() string",
        "path": "dialect.go",
        "position": 6,
        "original_position": 6,
        "commit_id": "af38f4280fbd7033024c8ab40608b88045b2c593",
        "original_commit_id": "af38f4280fbd7033024c8ab40608b88045b2c593",
        "user": {
            "login": "zikes",
            "id": 410905,
            "node_id": "MDQ6VXNlcjQxMDkwNQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/410905?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zikes",
            "html_url": "https://github.com/zikes",
            "followers_url": "https://api.github.com/users/zikes/followers",
            "following_url": "https://api.github.com/users/zikes/following{/other_user}",
            "gists_url": "https://api.github.com/users/zikes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zikes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zikes/subscriptions",
            "organizations_url": "https://api.github.com/users/zikes/orgs",
            "repos_url": "https://api.github.com/users/zikes/repos",
            "events_url": "https://api.github.com/users/zikes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zikes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I haven't, sorry. It's something I'd still be interested in implementing sometime, but it's been less of a priority for me lately.",
        "created_at": "2018-08-01T18:24:31Z",
        "updated_at": "2018-08-01T18:24:31Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/359#discussion_r206983976",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/359",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/206983976"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/359#discussion_r206983976"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/359"
            }
        },
        "in_reply_to_id": 157131828
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/228396416",
        "pull_request_review_id": 168660726,
        "id": 228396416,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODM5NjQxNg==",
        "diff_hunk": "@@ -2,6 +2,7 @@ language: go\n go:\n - \"1.9\"\n - \"1.10\"\n+- \"1.11\"",
        "path": ".travis.yml",
        "position": null,
        "original_position": 4,
        "commit_id": "0db517660bfd49e06ae4a0fdd22d10e436dd1194",
        "original_commit_id": "d0f1ff54c945b70323876681ee9f7b70af58a030",
        "user": {
            "login": "nelsam",
            "id": 1019908,
            "node_id": "MDQ6VXNlcjEwMTk5MDg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1019908?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nelsam",
            "html_url": "https://github.com/nelsam",
            "followers_url": "https://api.github.com/users/nelsam/followers",
            "following_url": "https://api.github.com/users/nelsam/following{/other_user}",
            "gists_url": "https://api.github.com/users/nelsam/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nelsam/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nelsam/subscriptions",
            "organizations_url": "https://api.github.com/users/nelsam/orgs",
            "repos_url": "https://api.github.com/users/nelsam/repos",
            "events_url": "https://api.github.com/users/nelsam/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nelsam/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "can we skip to 1.11.1?  1.11 had a pretty nasty DNS bug that _probably_ doesn't affect us, but as long as 1.11.1 is out anyway, I'd like to skip straight to it.\r\n\r\nAlso, while we're at it, let's drop 1.9 support.",
        "created_at": "2018-10-26T03:27:42Z",
        "updated_at": "2018-10-27T19:23:35Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/388#discussion_r228396416",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/388",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/228396416"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/388#discussion_r228396416"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/388"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/228433606",
        "pull_request_review_id": 168705539,
        "id": 228433606,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODQzMzYwNg==",
        "diff_hunk": "@@ -2,6 +2,7 @@ language: go\n go:\n - \"1.9\"\n - \"1.10\"\n+- \"1.11\"",
        "path": ".travis.yml",
        "position": null,
        "original_position": 4,
        "commit_id": "0db517660bfd49e06ae4a0fdd22d10e436dd1194",
        "original_commit_id": "d0f1ff54c945b70323876681ee9f7b70af58a030",
        "user": {
            "login": "HaraldNordgren",
            "id": 9569897,
            "node_id": "MDQ6VXNlcjk1Njk4OTc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/9569897?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/HaraldNordgren",
            "html_url": "https://github.com/HaraldNordgren",
            "followers_url": "https://api.github.com/users/HaraldNordgren/followers",
            "following_url": "https://api.github.com/users/HaraldNordgren/following{/other_user}",
            "gists_url": "https://api.github.com/users/HaraldNordgren/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/HaraldNordgren/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/HaraldNordgren/subscriptions",
            "organizations_url": "https://api.github.com/users/HaraldNordgren/orgs",
            "repos_url": "https://api.github.com/users/HaraldNordgren/repos",
            "events_url": "https://api.github.com/users/HaraldNordgren/events{/privacy}",
            "received_events_url": "https://api.github.com/users/HaraldNordgren/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It\u2019s probably better to set the 1.11 version to 1.11.x then, to always receive the latest 1.11 version. Thoughts?",
        "created_at": "2018-10-26T07:49:04Z",
        "updated_at": "2018-10-27T19:23:35Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/388#discussion_r228433606",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/388",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/228433606"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/388#discussion_r228433606"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/388"
            }
        },
        "in_reply_to_id": 228396416
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/228620137",
        "pull_request_review_id": 168941690,
        "id": 228620137,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODYyMDEzNw==",
        "diff_hunk": "@@ -2,6 +2,7 @@ language: go\n go:\n - \"1.9\"\n - \"1.10\"\n+- \"1.11\"",
        "path": ".travis.yml",
        "position": null,
        "original_position": 4,
        "commit_id": "0db517660bfd49e06ae4a0fdd22d10e436dd1194",
        "original_commit_id": "d0f1ff54c945b70323876681ee9f7b70af58a030",
        "user": {
            "login": "nelsam",
            "id": 1019908,
            "node_id": "MDQ6VXNlcjEwMTk5MDg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1019908?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nelsam",
            "html_url": "https://github.com/nelsam",
            "followers_url": "https://api.github.com/users/nelsam/followers",
            "following_url": "https://api.github.com/users/nelsam/following{/other_user}",
            "gists_url": "https://api.github.com/users/nelsam/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nelsam/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nelsam/subscriptions",
            "organizations_url": "https://api.github.com/users/nelsam/orgs",
            "repos_url": "https://api.github.com/users/nelsam/repos",
            "events_url": "https://api.github.com/users/nelsam/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nelsam/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "sounds good to me.  honestly, I had no idea that was a thing.  I tend to prefer concourse as my CI system when possible, but there's no hosted version available yet - so I stick with travis for most of the open source projects I work on.  but I'm ignorant of most of how travis operates.",
        "created_at": "2018-10-26T18:13:15Z",
        "updated_at": "2018-10-27T19:23:35Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/388#discussion_r228620137",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/388",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/228620137"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/388#discussion_r228620137"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/388"
            }
        },
        "in_reply_to_id": 228396416
    },
    {
        "url": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/228749157",
        "pull_request_review_id": 169092982,
        "id": 228749157,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODc0OTE1Nw==",
        "diff_hunk": "@@ -2,6 +2,7 @@ language: go\n go:\n - \"1.9\"\n - \"1.10\"\n+- \"1.11\"",
        "path": ".travis.yml",
        "position": null,
        "original_position": 4,
        "commit_id": "0db517660bfd49e06ae4a0fdd22d10e436dd1194",
        "original_commit_id": "d0f1ff54c945b70323876681ee9f7b70af58a030",
        "user": {
            "login": "HaraldNordgren",
            "id": 9569897,
            "node_id": "MDQ6VXNlcjk1Njk4OTc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/9569897?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/HaraldNordgren",
            "html_url": "https://github.com/HaraldNordgren",
            "followers_url": "https://api.github.com/users/HaraldNordgren/followers",
            "following_url": "https://api.github.com/users/HaraldNordgren/following{/other_user}",
            "gists_url": "https://api.github.com/users/HaraldNordgren/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/HaraldNordgren/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/HaraldNordgren/subscriptions",
            "organizations_url": "https://api.github.com/users/HaraldNordgren/orgs",
            "repos_url": "https://api.github.com/users/HaraldNordgren/repos",
            "events_url": "https://api.github.com/users/HaraldNordgren/events{/privacy}",
            "received_events_url": "https://api.github.com/users/HaraldNordgren/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@nelsam Updated.",
        "created_at": "2018-10-28T13:44:35Z",
        "updated_at": "2018-10-28T13:44:35Z",
        "html_url": "https://github.com/go-gorp/gorp/pull/388#discussion_r228749157",
        "pull_request_url": "https://api.github.com/repos/go-gorp/gorp/pulls/388",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/comments/228749157"
            },
            "html": {
                "href": "https://github.com/go-gorp/gorp/pull/388#discussion_r228749157"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-gorp/gorp/pulls/388"
            }
        },
        "in_reply_to_id": 228396416
    }
]