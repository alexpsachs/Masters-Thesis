[
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/4521578",
        "pull_request_review_id": null,
        "id": 4521578,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE1Nzg=",
        "diff_hunk": "@@ -30,6 +30,10 @@ class DemoService extends Actor with SprayActorLogging {\n     case HttpRequest(GET, Uri.Path(\"/timeout\"), _, _, _) =>\n       log.info(\"Dropping request, triggering a timeout\")\n \n+    case HttpRequest(GET, Uri.Path(\"/changetimeout\"), _, _, _) =>\n+      sender ! SetRequestTimeout(60.seconds)\n+      log.info(\"Changing timeout initially set by 'spray.servlet.request-timeout' property and triggering timeout\")\n+",
        "path": "examples/spray-servlet/simple-spray-servlet-server/src/main/scala/spray/examples/DemoService.scala",
        "position": 7,
        "original_position": 7,
        "commit_id": "231ab3aadec267f55b282210aed8f63a30766cf1",
        "original_commit_id": "231ab3aadec267f55b282210aed8f63a30766cf1",
        "user": {
            "login": "2beaucoup",
            "id": 243903,
            "node_id": "MDQ6VXNlcjI0MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/243903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/2beaucoup",
            "html_url": "https://github.com/2beaucoup",
            "followers_url": "https://api.github.com/users/2beaucoup/followers",
            "following_url": "https://api.github.com/users/2beaucoup/following{/other_user}",
            "gists_url": "https://api.github.com/users/2beaucoup/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/2beaucoup/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/2beaucoup/subscriptions",
            "organizations_url": "https://api.github.com/users/2beaucoup/orgs",
            "repos_url": "https://api.github.com/users/2beaucoup/repos",
            "events_url": "https://api.github.com/users/2beaucoup/events{/privacy}",
            "received_events_url": "https://api.github.com/users/2beaucoup/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Add `/changetimeout` to the index?\n",
        "created_at": "2013-06-04T12:58:54Z",
        "updated_at": "2013-06-04T12:58:54Z",
        "html_url": "https://github.com/spray/spray/pull/299#discussion_r4521578",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/299",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/4521578"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/299#discussion_r4521578"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/299"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/4521596",
        "pull_request_review_id": null,
        "id": 4521596,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE1OTY=",
        "diff_hunk": "@@ -30,6 +30,10 @@ class DemoService extends Actor with SprayActorLogging {\n     case HttpRequest(GET, Uri.Path(\"/timeout\"), _, _, _) =>\n       log.info(\"Dropping request, triggering a timeout\")\n \n+    case HttpRequest(GET, Uri.Path(\"/changetimeout\"), _, _, _) =>\n+      sender ! SetRequestTimeout(60.seconds)\n+      log.info(\"Changing timeout initially set by 'spray.servlet.request-timeout' property and triggering timeout\")\n+",
        "path": "examples/spray-servlet/simple-spray-servlet-server/src/main/scala/spray/examples/DemoService.scala",
        "position": 7,
        "original_position": 7,
        "commit_id": "231ab3aadec267f55b282210aed8f63a30766cf1",
        "original_commit_id": "231ab3aadec267f55b282210aed8f63a30766cf1",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yes, either that or remove it altogether (since it's not really that interesting).\n",
        "created_at": "2013-06-04T13:00:17Z",
        "updated_at": "2013-06-04T13:00:17Z",
        "html_url": "https://github.com/spray/spray/pull/299#discussion_r4521596",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/299",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/4521596"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/299#discussion_r4521596"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/299"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/4521610",
        "pull_request_review_id": null,
        "id": 4521610,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE2MTA=",
        "diff_hunk": "@@ -72,6 +73,12 @@ private[can] class HttpServerConnection(tcpConnection: ActorRef,\n     def log = actor.log\n     def sslEngine = sslEngineProvider(this)\n   }\n+\n+  override def running(tcpConnection: ActorRef, pipelines: Pipelines): Receive =\n+    super.running(tcpConnection, pipelines) orElse {\n+      case x: SetRequestTimeout \u21d2 pipelines.commandPipeline(CommandWrapper(x))\n+      case x: SetTimeoutTimeout \u21d2 pipelines.commandPipeline(CommandWrapper(x))",
        "path": "spray-can/src/main/scala/spray/can/server/HttpServerConnection.scala",
        "position": 16,
        "original_position": 16,
        "commit_id": "231ab3aadec267f55b282210aed8f63a30766cf1",
        "original_commit_id": "231ab3aadec267f55b282210aed8f63a30766cf1",
        "user": {
            "login": "2beaucoup",
            "id": 243903,
            "node_id": "MDQ6VXNlcjI0MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/243903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/2beaucoup",
            "html_url": "https://github.com/2beaucoup",
            "followers_url": "https://api.github.com/users/2beaucoup/followers",
            "following_url": "https://api.github.com/users/2beaucoup/following{/other_user}",
            "gists_url": "https://api.github.com/users/2beaucoup/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/2beaucoup/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/2beaucoup/subscriptions",
            "organizations_url": "https://api.github.com/users/2beaucoup/orgs",
            "repos_url": "https://api.github.com/users/2beaucoup/repos",
            "events_url": "https://api.github.com/users/2beaucoup/events{/privacy}",
            "received_events_url": "https://api.github.com/users/2beaucoup/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "`case x: SetRequestTimeout | SetTimeoutTimeout \u21d2 pipelines.commandPipeline(CommandWrapper(x))`?\n",
        "created_at": "2013-06-04T13:01:03Z",
        "updated_at": "2013-06-04T13:01:03Z",
        "html_url": "https://github.com/spray/spray/pull/299#discussion_r4521610",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/299",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/4521610"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/299#discussion_r4521610"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/299"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/4521782",
        "pull_request_review_id": null,
        "id": 4521782,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE3ODI=",
        "diff_hunk": "@@ -72,6 +73,12 @@ private[can] class HttpServerConnection(tcpConnection: ActorRef,\n     def log = actor.log\n     def sslEngine = sslEngineProvider(this)\n   }\n+\n+  override def running(tcpConnection: ActorRef, pipelines: Pipelines): Receive =\n+    super.running(tcpConnection, pipelines) orElse {\n+      case x: SetRequestTimeout \u21d2 pipelines.commandPipeline(CommandWrapper(x))\n+      case x: SetTimeoutTimeout \u21d2 pipelines.commandPipeline(CommandWrapper(x))",
        "path": "spray-can/src/main/scala/spray/can/server/HttpServerConnection.scala",
        "position": 16,
        "original_position": 16,
        "commit_id": "231ab3aadec267f55b282210aed8f63a30766cf1",
        "original_commit_id": "231ab3aadec267f55b282210aed8f63a30766cf1",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Theoretically\n\n```\ncase x@ (SetRequestTimeout(_) | SetTimeoutTimeout(_)) \u21d2 pipelines.commandPipeline(CommandWrapper(x))\n```\n\ncould work, however, `x` is then inferred as `Any` and not as `AnyRef`, requiring a cast. Therefore it might not be really better than the current solution.\n",
        "created_at": "2013-06-04T13:10:53Z",
        "updated_at": "2013-06-04T13:10:53Z",
        "html_url": "https://github.com/spray/spray/pull/299#discussion_r4521782",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/299",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/4521782"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/299#discussion_r4521782"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/299"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/4521913",
        "pull_request_review_id": null,
        "id": 4521913,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE5MTM=",
        "diff_hunk": "@@ -72,6 +73,12 @@ private[can] class HttpServerConnection(tcpConnection: ActorRef,\n     def log = actor.log\n     def sslEngine = sslEngineProvider(this)\n   }\n+\n+  override def running(tcpConnection: ActorRef, pipelines: Pipelines): Receive =\n+    super.running(tcpConnection, pipelines) orElse {\n+      case x: SetRequestTimeout \u21d2 pipelines.commandPipeline(CommandWrapper(x))\n+      case x: SetTimeoutTimeout \u21d2 pipelines.commandPipeline(CommandWrapper(x))",
        "path": "spray-can/src/main/scala/spray/can/server/HttpServerConnection.scala",
        "position": 16,
        "original_position": 16,
        "commit_id": "231ab3aadec267f55b282210aed8f63a30766cf1",
        "original_commit_id": "231ab3aadec267f55b282210aed8f63a30766cf1",
        "user": {
            "login": "2beaucoup",
            "id": 243903,
            "node_id": "MDQ6VXNlcjI0MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/243903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/2beaucoup",
            "html_url": "https://github.com/2beaucoup",
            "followers_url": "https://api.github.com/users/2beaucoup/followers",
            "following_url": "https://api.github.com/users/2beaucoup/following{/other_user}",
            "gists_url": "https://api.github.com/users/2beaucoup/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/2beaucoup/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/2beaucoup/subscriptions",
            "organizations_url": "https://api.github.com/users/2beaucoup/orgs",
            "repos_url": "https://api.github.com/users/2beaucoup/repos",
            "events_url": "https://api.github.com/users/2beaucoup/events{/privacy}",
            "received_events_url": "https://api.github.com/users/2beaucoup/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Oops. I guess I should wrap my head around alternative pattern semantics first. Thx!\n",
        "created_at": "2013-06-04T13:19:45Z",
        "updated_at": "2013-06-04T13:19:45Z",
        "html_url": "https://github.com/spray/spray/pull/299#discussion_r4521913",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/299",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/4521913"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/299#discussion_r4521913"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/299"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/4772243",
        "pull_request_review_id": null,
        "id": 4772243,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzIyNDM=",
        "diff_hunk": "@@ -24,29 +25,33 @@ private[parser] trait AcceptHeader {\n   this: Parser with ProtocolParameterRules with CommonActions \u21d2\n \n   def `*Accept` = rule(\n-    zeroOrMore(MediaRangeDecl ~ optional(AcceptParams), separator = ListSep) ~ EOI ~~> (HttpHeaders.Accept(_)))\n+    zeroOrMore(MediaRangeDecl, separator = ListSep) ~ EOI ~~> (HttpHeaders.Accept(_)))\n \n   def MediaRangeDecl = rule {\n-    MediaRangeDef ~ zeroOrMore(\";\" ~ Parameter ~ DROP) // TODO: support parameters    \n+    MediaRangeDef ~ zeroOrMore(\";\" ~ Parameter) ~~> { (main, sub, params) \u21d2\n+      // we don't support q values yet and don't want them to cause creation of custom MediaTypes every time\n+      // we see them, so we filter them out of the parameter list here\n+      @tailrec def toNonQValueMap(remaining: List[(String, String)],\n+                                  builder: StringMapBuilder = null): Map[String, String] =\n+        remaining match {",
        "path": "spray-http/src/main/scala/spray/http/parser/AcceptHeader.scala",
        "position": null,
        "original_position": 22,
        "commit_id": "978986e7240f29c4bf882ab073ccd60a952ef897",
        "original_commit_id": "d8a9ee4711f06cf4861015247756c50df6ede50c",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "That's basically `params.toMap.filterKeys(_ != \"q\")`. Is this code significantly faster than that to warrant the extra code?\n",
        "created_at": "2013-06-19T13:37:16Z",
        "updated_at": "2013-06-19T14:58:21Z",
        "html_url": "https://github.com/spray/spray/pull/325#discussion_r4772243",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/325",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/4772243"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/325#discussion_r4772243"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/325"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/4775717",
        "pull_request_review_id": null,
        "id": 4775717,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU3MTc=",
        "diff_hunk": "@@ -24,29 +24,22 @@ private[parser] trait AcceptHeader {\n   this: Parser with ProtocolParameterRules with CommonActions \u21d2\n \n   def `*Accept` = rule(\n-    zeroOrMore(MediaRangeDecl ~ optional(AcceptParams), separator = ListSep) ~ EOI ~~> (HttpHeaders.Accept(_)))\n+    zeroOrMore(MediaRangeDecl, separator = ListSep) ~ EOI ~~> (HttpHeaders.Accept(_)))\n \n   def MediaRangeDecl = rule {\n-    MediaRangeDef ~ zeroOrMore(\";\" ~ Parameter ~ DROP) // TODO: support parameters    \n+    MediaRangeDef ~ zeroOrMore(\";\" ~ Parameter) ~~> { (main, sub, params) \u21d2\n+      // we don't support q values yet and don't want them to cause creation of custom MediaTypes every time\n+      // we see them, so we filter them out of the parameter list here\n+      val parameters = params.toMap.filterKeys(_ != \"q\")",
        "path": "spray-http/src/main/scala/spray/http/parser/AcceptHeader.scala",
        "position": 12,
        "original_position": 12,
        "commit_id": "978986e7240f29c4bf882ab073ccd60a952ef897",
        "original_commit_id": "978986e7240f29c4bf882ab073ccd60a952ef897",
        "user": {
            "login": "ryanlecompte",
            "id": 637158,
            "node_id": "MDQ6VXNlcjYzNzE1OA==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/637158?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ryanlecompte",
            "html_url": "https://github.com/ryanlecompte",
            "followers_url": "https://api.github.com/users/ryanlecompte/followers",
            "following_url": "https://api.github.com/users/ryanlecompte/following{/other_user}",
            "gists_url": "https://api.github.com/users/ryanlecompte/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ryanlecompte/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ryanlecompte/subscriptions",
            "organizations_url": "https://api.github.com/users/ryanlecompte/orgs",
            "repos_url": "https://api.github.com/users/ryanlecompte/repos",
            "events_url": "https://api.github.com/users/ryanlecompte/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ryanlecompte/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Do we really want to use `filterKeys` here? Just like `mapValues`, it returns a lazy view. Not sure if we care here. More info: https://issues.scala-lang.org/browse/SI-4776\n",
        "created_at": "2013-06-19T15:51:08Z",
        "updated_at": "2013-06-19T15:51:08Z",
        "html_url": "https://github.com/spray/spray/pull/325#discussion_r4775717",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/325",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/4775717"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/325#discussion_r4775717"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/325"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/4776118",
        "pull_request_review_id": null,
        "id": 4776118,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYxMTg=",
        "diff_hunk": "@@ -24,29 +24,22 @@ private[parser] trait AcceptHeader {\n   this: Parser with ProtocolParameterRules with CommonActions \u21d2\n \n   def `*Accept` = rule(\n-    zeroOrMore(MediaRangeDecl ~ optional(AcceptParams), separator = ListSep) ~ EOI ~~> (HttpHeaders.Accept(_)))\n+    zeroOrMore(MediaRangeDecl, separator = ListSep) ~ EOI ~~> (HttpHeaders.Accept(_)))\n \n   def MediaRangeDecl = rule {\n-    MediaRangeDef ~ zeroOrMore(\";\" ~ Parameter ~ DROP) // TODO: support parameters    \n+    MediaRangeDef ~ zeroOrMore(\";\" ~ Parameter) ~~> { (main, sub, params) \u21d2\n+      // we don't support q values yet and don't want them to cause creation of custom MediaTypes every time\n+      // we see them, so we filter them out of the parameter list here\n+      val parameters = params.toMap.filterKeys(_ != \"q\")",
        "path": "spray-http/src/main/scala/spray/http/parser/AcceptHeader.scala",
        "position": 12,
        "original_position": 12,
        "commit_id": "978986e7240f29c4bf882ab073ccd60a952ef897",
        "original_commit_id": "978986e7240f29c4bf882ab073ccd60a952ef897",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Thanks, for sharing that info, I didn't know it.\n",
        "created_at": "2013-06-19T16:08:51Z",
        "updated_at": "2013-06-19T16:08:51Z",
        "html_url": "https://github.com/spray/spray/pull/325#discussion_r4776118",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/325",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/4776118"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/325#discussion_r4776118"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/325"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/4805928",
        "pull_request_review_id": null,
        "id": 4805928,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDU5Mjg=",
        "diff_hunk": "@@ -24,29 +24,22 @@ private[parser] trait AcceptHeader {\n   this: Parser with ProtocolParameterRules with CommonActions \u21d2\n \n   def `*Accept` = rule(\n-    zeroOrMore(MediaRangeDecl ~ optional(AcceptParams), separator = ListSep) ~ EOI ~~> (HttpHeaders.Accept(_)))\n+    zeroOrMore(MediaRangeDecl, separator = ListSep) ~ EOI ~~> (HttpHeaders.Accept(_)))\n \n   def MediaRangeDecl = rule {\n-    MediaRangeDef ~ zeroOrMore(\";\" ~ Parameter ~ DROP) // TODO: support parameters    \n+    MediaRangeDef ~ zeroOrMore(\";\" ~ Parameter) ~~> { (main, sub, params) \u21d2\n+      // we don't support q values yet and don't want them to cause creation of custom MediaTypes every time\n+      // we see them, so we filter them out of the parameter list here\n+      val parameters = params.toMap.filterKeys(_ != \"q\")",
        "path": "spray-http/src/main/scala/spray/http/parser/AcceptHeader.scala",
        "position": 12,
        "original_position": 12,
        "commit_id": "978986e7240f29c4bf882ab073ccd60a952ef897",
        "original_commit_id": "978986e7240f29c4bf882ab073ccd60a952ef897",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Interesting!\nIn that case we'll change it back to the more verbose custom filtering variant we had initially...\nThanks for having our back here, Ryan!\n",
        "created_at": "2013-06-20T20:05:41Z",
        "updated_at": "2013-06-20T20:05:41Z",
        "html_url": "https://github.com/spray/spray/pull/325#discussion_r4805928",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/325",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/4805928"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/325#discussion_r4805928"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/325"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5028806",
        "pull_request_review_id": null,
        "id": 5028806,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg4MDY=",
        "diff_hunk": "@@ -9,6 +10,8 @@ import akka.util.ByteString\n class BackPressureHandlingSpec extends Specification with Specs2PipelineStageTest {\n   val stage = BackPressureHandling(4)\n \n+  override lazy val config = ConfigFactory.parseString(\"akka.test.single-expect-default = 100 ms\")",
        "path": "spray-io-tests/src/test/scala/spray/io/BackPressureHandlingSpec.scala",
        "position": 12,
        "original_position": 12,
        "commit_id": "965ec78175e55e8fd1307046f1a606115979e7af",
        "original_commit_id": "965ec78175e55e8fd1307046f1a606115979e7af",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Good catch. Good trick to keep in mind.\n",
        "created_at": "2013-07-04T10:19:44Z",
        "updated_at": "2013-07-04T10:19:44Z",
        "html_url": "https://github.com/spray/spray/pull/356#discussion_r5028806",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/356",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5028806"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/356#discussion_r5028806"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/356"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5214486",
        "pull_request_review_id": null,
        "id": 5214486,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ0ODY=",
        "diff_hunk": "@@ -51,7 +51,7 @@ private[parser] trait SimpleHeaders {\n   // see also https://issues.apache.org/bugzilla/show_bug.cgi?id=35122 (WONTFIX in Apache 2 issue) and\n   // https://bugzilla.mozilla.org/show_bug.cgi?id=464162 (FIXED in mozilla)\n   def `*Host` = rule(\n-    (Token | IPv6Reference) ~ OptWS ~ optional(\":\" ~ oneOrMore(Digit) ~> (_.toInt)) ~ EOI\n+    (Token | IPv6Reference | push(\"\")) ~ OptWS ~ optional(\":\" ~ oneOrMore(Digit) ~> (_.toInt)) ~ EOI",
        "path": "spray-http/src/main/scala/spray/http/parser/SimpleHeaders.scala",
        "position": null,
        "original_position": 5,
        "commit_id": "51f325ce1e7eb70c6e35821cdb598b0fc4a5c947",
        "original_commit_id": "0ff0cced0e7df1b79b68700590433f8974b57cd0",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Wouldn't this allow a header like this:\n\n```\nHost: :3843\n```\n\nIs that allowed by the spec? (It says \"empty field-value\" which I would interpret as a completely empty string)\n",
        "created_at": "2013-07-16T12:56:28Z",
        "updated_at": "2013-07-16T13:47:57Z",
        "html_url": "https://github.com/spray/spray/pull/366#discussion_r5214486",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/366",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5214486"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/366#discussion_r5214486"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/366"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5215540",
        "pull_request_review_id": null,
        "id": 5215540,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU1NDA=",
        "diff_hunk": "@@ -51,7 +51,7 @@ private[parser] trait SimpleHeaders {\n   // see also https://issues.apache.org/bugzilla/show_bug.cgi?id=35122 (WONTFIX in Apache 2 issue) and\n   // https://bugzilla.mozilla.org/show_bug.cgi?id=464162 (FIXED in mozilla)\n   def `*Host` = rule(\n-    (Token | IPv6Reference) ~ OptWS ~ optional(\":\" ~ oneOrMore(Digit) ~> (_.toInt)) ~ EOI\n+    (Token | IPv6Reference | push(\"\")) ~ OptWS ~ optional(\":\" ~ oneOrMore(Digit) ~> (_.toInt)) ~ EOI",
        "path": "spray-http/src/main/scala/spray/http/parser/SimpleHeaders.scala",
        "position": null,
        "original_position": 5,
        "commit_id": "51f325ce1e7eb70c6e35821cdb598b0fc4a5c947",
        "original_commit_id": "0ff0cced0e7df1b79b68700590433f8974b57cd0",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "According to the discussion in [this httpbis issue](http://trac.tools.ietf.org/wg/httpbis/trac/ticket/92) this rather strange looking host header is indeed correct. I'll add a comment pointing to this reference though.\n",
        "created_at": "2013-07-16T13:44:14Z",
        "updated_at": "2013-07-16T13:47:57Z",
        "html_url": "https://github.com/spray/spray/pull/366#discussion_r5215540",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/366",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5215540"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/366#discussion_r5215540"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/366"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5215968",
        "pull_request_review_id": null,
        "id": 5215968,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU5Njg=",
        "diff_hunk": "@@ -51,7 +51,7 @@ private[parser] trait SimpleHeaders {\n   // see also https://issues.apache.org/bugzilla/show_bug.cgi?id=35122 (WONTFIX in Apache 2 issue) and\n   // https://bugzilla.mozilla.org/show_bug.cgi?id=464162 (FIXED in mozilla)\n   def `*Host` = rule(\n-    (Token | IPv6Reference) ~ OptWS ~ optional(\":\" ~ oneOrMore(Digit) ~> (_.toInt)) ~ EOI\n+    (Token | IPv6Reference | push(\"\")) ~ OptWS ~ optional(\":\" ~ oneOrMore(Digit) ~> (_.toInt)) ~ EOI",
        "path": "spray-http/src/main/scala/spray/http/parser/SimpleHeaders.scala",
        "position": null,
        "original_position": 5,
        "commit_id": "51f325ce1e7eb70c6e35821cdb598b0fc4a5c947",
        "original_commit_id": "0ff0cced0e7df1b79b68700590433f8974b57cd0",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Interesting, though then I wouldn't considered that to be an empty Host header but a Host header that corresponds to an uri-host which is an empty `reg-name` + port. This, however, would mean that there's no thing as the \"empty Host header\" because there's always the ambiguity just an empty reg-name without port or the \"empty field value\".\n\nHaha, in the end I guess it won't matter :)\n",
        "created_at": "2013-07-16T13:58:23Z",
        "updated_at": "2013-07-16T13:58:23Z",
        "html_url": "https://github.com/spray/spray/pull/366#discussion_r5215968",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/366",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5215968"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/366#discussion_r5215968"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/366"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5216208",
        "pull_request_review_id": null,
        "id": 5216208,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYyMDg=",
        "diff_hunk": "@@ -51,7 +51,7 @@ private[parser] trait SimpleHeaders {\n   // see also https://issues.apache.org/bugzilla/show_bug.cgi?id=35122 (WONTFIX in Apache 2 issue) and\n   // https://bugzilla.mozilla.org/show_bug.cgi?id=464162 (FIXED in mozilla)\n   def `*Host` = rule(\n-    (Token | IPv6Reference) ~ OptWS ~ optional(\":\" ~ oneOrMore(Digit) ~> (_.toInt)) ~ EOI\n+    (Token | IPv6Reference | push(\"\")) ~ OptWS ~ optional(\":\" ~ oneOrMore(Digit) ~> (_.toInt)) ~ EOI",
        "path": "spray-http/src/main/scala/spray/http/parser/SimpleHeaders.scala",
        "position": null,
        "original_position": 5,
        "commit_id": "51f325ce1e7eb70c6e35821cdb598b0fc4a5c947",
        "original_commit_id": "0ff0cced0e7df1b79b68700590433f8974b57cd0",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yeah, it's a mess.\n\nFound [another discussion with Fielding](http://w3-org.9356.n7.nabble.com/Host-header-with-an-empty-value-td249428.html) on this issue, where he shows this example:\n\n```\nGET urn:ietf:rfc:2616.txt HTTP/1.1 \nHost:\n```\n\nSo maybe the `must carry an empty Host` sentence from the spec actually refers to requests with URIs whose URI _type_ does not allow for an authority component. This would make more sense.\n\nAnd of course there are also request with a `*` target like this one:\n\n```\nOPTIONS * HTTP/1.1\n```\n\nI guess they too require a (really) empty `Host` header (without port).\n\nAnyway.\nIt's a mess...\n",
        "created_at": "2013-07-16T14:07:37Z",
        "updated_at": "2013-07-16T14:07:37Z",
        "html_url": "https://github.com/spray/spray/pull/366#discussion_r5216208",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/366",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5216208"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/366#discussion_r5216208"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/366"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5240123",
        "pull_request_review_id": null,
        "id": 5240123,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAxMjM=",
        "diff_hunk": "@@ -0,0 +1,170 @@\n+package spray.examples\n+\n+import spray.client.pipelining._\n+import spray.http._\n+import spray.util._\n+import javax.net.ssl.SSLContext\n+import akka.actor.ActorSystem\n+import spray.routing.authentication._\n+import scala.concurrent.ExecutionContext\n+import spray.json._\n+import spray.httpx.SprayJsonSupport\n+import spray.http.Uri.Query\n+import spray.routing.authentication.OAuthAccessToken\n+import spray.http.OAuth2BearerToken\n+import scala.Some\n+import spray.http.HttpResponse\n+import spray.routing.authentication.OAuthIdentity\n+import spray.routing.authentication.OAuthAuthorizationCode\n+\n+\n+/**\n+ * Simple implementation of the Google OAuth authentication mechanisms.",
        "path": "examples/spray-routing/openid-connect-routing-app/src/main/scala/spray/examples/FacebookAuthentication.scala",
        "position": null,
        "original_position": 22,
        "commit_id": "404cef1c156dbce0d155d4f7f2bfa3f2d279d374",
        "original_commit_id": "8f8a360600102e0757aabd152112fa91a36908e9",
        "user": {
            "login": "martin-g",
            "id": 232002,
            "node_id": "MDQ6VXNlcjIzMjAwMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/232002?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/martin-g",
            "html_url": "https://github.com/martin-g",
            "followers_url": "https://api.github.com/users/martin-g/followers",
            "following_url": "https://api.github.com/users/martin-g/following{/other_user}",
            "gists_url": "https://api.github.com/users/martin-g/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/martin-g/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/martin-g/subscriptions",
            "organizations_url": "https://api.github.com/users/martin-g/orgs",
            "repos_url": "https://api.github.com/users/martin-g/repos",
            "events_url": "https://api.github.com/users/martin-g/events{/privacy}",
            "received_events_url": "https://api.github.com/users/martin-g/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "s/Google/Facebook/\n",
        "created_at": "2013-07-17T12:00:15Z",
        "updated_at": "2013-07-18T06:07:39Z",
        "html_url": "https://github.com/spray/spray/pull/372#discussion_r5240123",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/372",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5240123"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/372#discussion_r5240123"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/372"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5240844",
        "pull_request_review_id": null,
        "id": 5240844,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA4NDQ=",
        "diff_hunk": "@@ -0,0 +1,170 @@\n+package spray.examples\n+\n+import spray.client.pipelining._\n+import spray.http._\n+import spray.util._\n+import javax.net.ssl.SSLContext\n+import akka.actor.ActorSystem\n+import spray.routing.authentication._\n+import scala.concurrent.ExecutionContext\n+import spray.json._\n+import spray.httpx.SprayJsonSupport\n+import spray.http.Uri.Query\n+import spray.routing.authentication.OAuthAccessToken\n+import spray.http.OAuth2BearerToken\n+import scala.Some\n+import spray.http.HttpResponse\n+import spray.routing.authentication.OAuthIdentity\n+import spray.routing.authentication.OAuthAuthorizationCode\n+\n+\n+/**\n+ * Simple implementation of the Google OAuth authentication mechanisms.\n+ * NOTE: THIS IS A SAMPLE ONLY, IT DOES NOT STORE OR CACHE THE TOKENS IN ANY WAY,\n+ * NEITHER IS THE SECURITY STATE RANDOMIZED OR SECURE.\n+ * IT DOES NOT RENEW TOKENS NOR VALIDATE THE LIFECYCLE OF TOKENS\n+ *\n+ * In Order to use this sample, you need to register your application at facebook\n+ * and obtain a client ID and clientSecret.\n+ * See: https://developers.facebook.com/docs/facebook-login/login-flow-for-web-no-jssdk/ for more information\n+ *\n+ * e.g. Use this for your own good, implement proper security and storage of tokens.\n+ *\n+ * @param oauthCallbackUrl Callback URI that is used for google to send authorization response\n+ * @param system  implicit found actor system\n+ * @param log implicit found log system\n+ */\n+class FacebookAuthentication(oauthCallbackUrl: Uri)(implicit system: ActorSystem, log: LoggingContext) extends OAuthTransformer {\n+  // response by the facebook call to return an identity\n+  //{\"id\":\"1055486847\",\"name\":\"Olger Warnier\",\"first_name\":\"Olger\",\"last_name\":\"Warnier\",\"link\":\"http:\\/\\/www.facebook.com\\/owarnier\",\"username\":\"owarnier\",\"gender\":\"male\",\"email\":\"olger\\u0040spectare.nl\",\"timezone\":2,\"locale\":\"nl_NL\",\"verified\":true,\"updated_time\":\"2013-06-13T18:46:40+0000\"}\n+\n+  case class OAuthIdentityResponse(id: String, name: String, first_name: String, last_name: String, link: String, username: String, gender: String, email: String, timezone: Int, locale: String, verified: Boolean, updated_time: String)",
        "path": "examples/spray-routing/openid-connect-routing-app/src/main/scala/spray/examples/FacebookAuthentication.scala",
        "position": null,
        "original_position": 41,
        "commit_id": "404cef1c156dbce0d155d4f7f2bfa3f2d279d374",
        "original_commit_id": "8f8a360600102e0757aabd152112fa91a36908e9",
        "user": {
            "login": "2beaucoup",
            "id": 243903,
            "node_id": "MDQ6VXNlcjI0MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/243903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/2beaucoup",
            "html_url": "https://github.com/2beaucoup",
            "followers_url": "https://api.github.com/users/2beaucoup/followers",
            "following_url": "https://api.github.com/users/2beaucoup/following{/other_user}",
            "gists_url": "https://api.github.com/users/2beaucoup/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/2beaucoup/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/2beaucoup/subscriptions",
            "organizations_url": "https://api.github.com/users/2beaucoup/orgs",
            "repos_url": "https://api.github.com/users/2beaucoup/repos",
            "events_url": "https://api.github.com/users/2beaucoup/events{/privacy}",
            "received_events_url": "https://api.github.com/users/2beaucoup/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Maybe insert some line breaks here a la:\n\n``` scala\n/**\n *{\"id\":\"1055486847\",\n * \"name\":\"Olger Warnier\",\n * \"first_name\":\"Olger\",\n * \"last_name\":\"Warnier\",\n * \"link\":\"http:\\/\\/www.facebook.com\\/owarnier\", \n * \"username\":\"owarnier\",\n * \"gender\":\"male\",\n * \"email\":\"olger\\u0040spectare.nl\",\n * \"timezone\":2,\n * \"locale\":\"nl_NL\",\n * \"verified\":true,\n * \"updated_time\":\"2013-06-13T18:46:40+0000\"}\n */\n\ncase class OAuthIdentityResponse(\n  id: String,\n  name: String,\n  first_name: String,\n  last_name: String,\n  link: String,\n  username: String,\n  gender: String,\n  email: String,\n  timezone: Int,\n  locale: String,\n  verified: Boolean,\n  updated_time: String)\n```\n",
        "created_at": "2013-07-17T12:47:49Z",
        "updated_at": "2013-07-18T06:07:39Z",
        "html_url": "https://github.com/spray/spray/pull/372#discussion_r5240844",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/372",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5240844"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/372#discussion_r5240844"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/372"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5240942",
        "pull_request_review_id": null,
        "id": 5240942,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA5NDI=",
        "diff_hunk": "@@ -0,0 +1,170 @@\n+package spray.examples\n+\n+import spray.client.pipelining._\n+import spray.http._\n+import spray.util._\n+import javax.net.ssl.SSLContext\n+import akka.actor.ActorSystem\n+import spray.routing.authentication._\n+import scala.concurrent.ExecutionContext\n+import spray.json._\n+import spray.httpx.SprayJsonSupport\n+import spray.http.Uri.Query\n+import spray.routing.authentication.OAuthAccessToken\n+import spray.http.OAuth2BearerToken\n+import scala.Some\n+import spray.http.HttpResponse\n+import spray.routing.authentication.OAuthIdentity\n+import spray.routing.authentication.OAuthAuthorizationCode\n+\n+\n+/**\n+ * Simple implementation of the Google OAuth authentication mechanisms.\n+ * NOTE: THIS IS A SAMPLE ONLY, IT DOES NOT STORE OR CACHE THE TOKENS IN ANY WAY,\n+ * NEITHER IS THE SECURITY STATE RANDOMIZED OR SECURE.\n+ * IT DOES NOT RENEW TOKENS NOR VALIDATE THE LIFECYCLE OF TOKENS\n+ *\n+ * In Order to use this sample, you need to register your application at facebook\n+ * and obtain a client ID and clientSecret.\n+ * See: https://developers.facebook.com/docs/facebook-login/login-flow-for-web-no-jssdk/ for more information\n+ *\n+ * e.g. Use this for your own good, implement proper security and storage of tokens.\n+ *\n+ * @param oauthCallbackUrl Callback URI that is used for google to send authorization response\n+ * @param system  implicit found actor system\n+ * @param log implicit found log system\n+ */\n+class FacebookAuthentication(oauthCallbackUrl: Uri)(implicit system: ActorSystem, log: LoggingContext) extends OAuthTransformer {\n+  // response by the facebook call to return an identity\n+  //{\"id\":\"1055486847\",\"name\":\"Olger Warnier\",\"first_name\":\"Olger\",\"last_name\":\"Warnier\",\"link\":\"http:\\/\\/www.facebook.com\\/owarnier\",\"username\":\"owarnier\",\"gender\":\"male\",\"email\":\"olger\\u0040spectare.nl\",\"timezone\":2,\"locale\":\"nl_NL\",\"verified\":true,\"updated_time\":\"2013-06-13T18:46:40+0000\"}\n+\n+  case class OAuthIdentityResponse(id: String, name: String, first_name: String, last_name: String, link: String, username: String, gender: String, email: String, timezone: Int, locale: String, verified: Boolean, updated_time: String)\n+\n+  object OAuthClientJsonProtocol extends DefaultJsonProtocol {\n+    implicit val oAuthIdentityResponseFormat = jsonFormat12(OAuthIdentityResponse)\n+  }\n+\n+  import ExecutionContext.Implicits.global\n+  import OAuthClientJsonProtocol._\n+  import SprayJsonSupport._\n+\n+\n+  // facebook\n+  private val authServer = Uri(\"https://www.facebook.com/dialog/oauth\")\n+  private val tokenServer = Uri(\"https://graph.facebook.com/oauth/access_token\")\n+  private val clientId = \"YOUR_CLIENT_ID_HERE\"\n+  private val clientSecret = \"YOUR_CLIENT_SECRET_HERE\"\n+  private val identityUrl = \"https://graph.facebook.com/me\"\n+  //https://graph.facebook.com/me?access_token=\n+\n+  private implicit val mySSLContext: SSLContext = {\n+    val context = SSLContext.getDefault\n+    context\n+  }\n+\n+  def loginUrl =\n+    s\"\"\"\n+     |$authServer?\n+     |client_id=$clientId&\n+     |response_type=code&\n+     |state=AAAAAAA&\n+     |redirect_uri=$oauthCallbackUrl&\n+     |scope=email\n+    \"\"\".stripMargin\n+  //     |scope=openid%20email&\n+\n+\n+  def accessToken(code: OAuthAuthorizationCode): Option[OAuthAccessToken] = {\n+\n+    val pipeline = logRequest(log) ~> sendReceive ~> logResponse(log)\n+\n+    val postData = FormData(Map(\"code\" -> code.code, \"client_id\" -> clientId, \"client_secret\" -> clientSecret,\n+      \"redirect_uri\" -> (oauthCallbackUrl.toString), \"grant_type\" -> \"authorization_code\"))\n+\n+    val responseFuture = pipeline { Post(tokenServer, postData) }\n+    val result = responseFuture.await\n+    //HttpResponse(200 OK,HttpEntity(text/plain; charset=UTF-8,access_token=CAAC80FcIc0kBAKNa3gxnpdjZALB9pHBgU3KsMYtoOQmhbLDH3tIbW06WuLnQt7IzJpLlj0aSJw3Nh6aAXGQj9o5ySqhsPxz04MAlZBCpLGVZCNhfYZAVmM6xjJ44FkR3cQt7q3blYcYQbN0hcBH7&expires=5184000),List(Content-Length: 178, Connection: keep-alive, Date: Tue, 16 Jul 2013 18:08:52 GMT, X-FB-Debug: Vc/QMj9oV26mt/z/t0YwfnxjmBdAdfHGgAUKliQ/NXM=, X-FB-Rev: 876422, Pragma: no-cache, Expires: Sat, 01 Jan 2000 00:00:00 GMT, Content-Type: text/plain; charset=UTF-8, Cache-Control: private, no-cache, no-store, must-revalidate, Access-Control-Allow-Origin: *),HTTP/1.1)",
        "path": "examples/spray-routing/openid-connect-routing-app/src/main/scala/spray/examples/FacebookAuthentication.scala",
        "position": null,
        "original_position": 86,
        "commit_id": "404cef1c156dbce0d155d4f7f2bfa3f2d279d374",
        "original_commit_id": "8f8a360600102e0757aabd152112fa91a36908e9",
        "user": {
            "login": "2beaucoup",
            "id": 243903,
            "node_id": "MDQ6VXNlcjI0MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/243903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/2beaucoup",
            "html_url": "https://github.com/2beaucoup",
            "followers_url": "https://api.github.com/users/2beaucoup/followers",
            "following_url": "https://api.github.com/users/2beaucoup/following{/other_user}",
            "gists_url": "https://api.github.com/users/2beaucoup/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/2beaucoup/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/2beaucoup/subscriptions",
            "organizations_url": "https://api.github.com/users/2beaucoup/orgs",
            "repos_url": "https://api.github.com/users/2beaucoup/repos",
            "events_url": "https://api.github.com/users/2beaucoup/events{/privacy}",
            "received_events_url": "https://api.github.com/users/2beaucoup/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This could also use some pretty printing:\n\n```\n/**\n  *HttpResponse(\n  *  200 OK,\n  *  HttpEntity(\n  *    text/plain; charset=UTF-8,\n  *    access_token=CAAC80FcIc0kBAKNa3gxnpdjZALB9pHBgU3KsMYtoOQmhbLDH3tIbW06WuLnQt7IzJpLlj0aSJw3Nh6aAXGQj9o5ySqhsPxz04MAlZBCpLGVZCNhfYZAVmM6xjJ44FkR3cQt7q3blYcYQbN0hcBH7&expires=5184000),\n  *  List(\n  *    Content-Length: 178,\n  *    Connection: keep-alive,\n  *    Date: Tue, 16 Jul 2013 18:08:52 GMT,\n  *    X-FB-Debug: Vc/QMj9oV26mt/z/t0YwfnxjmBdAdfHGgAUKliQ/NXM=,\n  *    X-FB-Rev: 876422,\n  *    Pragma: no-cache,\n  *    Expires: Sat,\n  *    01 Jan 2000 00:00:00 GMT,\n  *    Content-Type: text/plain; charset=UTF-8,\n  *    Cache-Control: private, no-cache, no-store, must-revalidate,\n  *   Access-Control-Allow-Origin: *),\n  *  HTTP/1.1)\n  */\n```\n",
        "created_at": "2013-07-17T12:51:50Z",
        "updated_at": "2013-07-18T06:07:39Z",
        "html_url": "https://github.com/spray/spray/pull/372#discussion_r5240942",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/372",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5240942"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/372#discussion_r5240942"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/372"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5241102",
        "pull_request_review_id": null,
        "id": 5241102,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDExMDI=",
        "diff_hunk": "@@ -0,0 +1,170 @@\n+package spray.examples\n+\n+import spray.client.pipelining._\n+import spray.http._\n+import spray.util._\n+import javax.net.ssl.SSLContext\n+import akka.actor.ActorSystem\n+import spray.routing.authentication._\n+import scala.concurrent.ExecutionContext\n+import spray.json._\n+import spray.httpx.SprayJsonSupport\n+import spray.http.Uri.Query\n+import spray.routing.authentication.OAuthAccessToken\n+import spray.http.OAuth2BearerToken\n+import scala.Some\n+import spray.http.HttpResponse\n+import spray.routing.authentication.OAuthIdentity\n+import spray.routing.authentication.OAuthAuthorizationCode\n+\n+\n+/**\n+ * Simple implementation of the Google OAuth authentication mechanisms.\n+ * NOTE: THIS IS A SAMPLE ONLY, IT DOES NOT STORE OR CACHE THE TOKENS IN ANY WAY,\n+ * NEITHER IS THE SECURITY STATE RANDOMIZED OR SECURE.\n+ * IT DOES NOT RENEW TOKENS NOR VALIDATE THE LIFECYCLE OF TOKENS\n+ *\n+ * In Order to use this sample, you need to register your application at facebook\n+ * and obtain a client ID and clientSecret.\n+ * See: https://developers.facebook.com/docs/facebook-login/login-flow-for-web-no-jssdk/ for more information\n+ *\n+ * e.g. Use this for your own good, implement proper security and storage of tokens.\n+ *\n+ * @param oauthCallbackUrl Callback URI that is used for google to send authorization response\n+ * @param system  implicit found actor system\n+ * @param log implicit found log system\n+ */\n+class FacebookAuthentication(oauthCallbackUrl: Uri)(implicit system: ActorSystem, log: LoggingContext) extends OAuthTransformer {\n+  // response by the facebook call to return an identity\n+  //{\"id\":\"1055486847\",\"name\":\"Olger Warnier\",\"first_name\":\"Olger\",\"last_name\":\"Warnier\",\"link\":\"http:\\/\\/www.facebook.com\\/owarnier\",\"username\":\"owarnier\",\"gender\":\"male\",\"email\":\"olger\\u0040spectare.nl\",\"timezone\":2,\"locale\":\"nl_NL\",\"verified\":true,\"updated_time\":\"2013-06-13T18:46:40+0000\"}\n+\n+  case class OAuthIdentityResponse(id: String, name: String, first_name: String, last_name: String, link: String, username: String, gender: String, email: String, timezone: Int, locale: String, verified: Boolean, updated_time: String)\n+\n+  object OAuthClientJsonProtocol extends DefaultJsonProtocol {\n+    implicit val oAuthIdentityResponseFormat = jsonFormat12(OAuthIdentityResponse)\n+  }\n+\n+  import ExecutionContext.Implicits.global\n+  import OAuthClientJsonProtocol._\n+  import SprayJsonSupport._\n+\n+\n+  // facebook\n+  private val authServer = Uri(\"https://www.facebook.com/dialog/oauth\")\n+  private val tokenServer = Uri(\"https://graph.facebook.com/oauth/access_token\")\n+  private val clientId = \"YOUR_CLIENT_ID_HERE\"\n+  private val clientSecret = \"YOUR_CLIENT_SECRET_HERE\"\n+  private val identityUrl = \"https://graph.facebook.com/me\"\n+  //https://graph.facebook.com/me?access_token=\n+\n+  private implicit val mySSLContext: SSLContext = {\n+    val context = SSLContext.getDefault\n+    context\n+  }\n+\n+  def loginUrl =\n+    s\"\"\"\n+     |$authServer?\n+     |client_id=$clientId&\n+     |response_type=code&\n+     |state=AAAAAAA&\n+     |redirect_uri=$oauthCallbackUrl&\n+     |scope=email\n+    \"\"\".stripMargin\n+  //     |scope=openid%20email&\n+\n+\n+  def accessToken(code: OAuthAuthorizationCode): Option[OAuthAccessToken] = {\n+\n+    val pipeline = logRequest(log) ~> sendReceive ~> logResponse(log)\n+\n+    val postData = FormData(Map(\"code\" -> code.code, \"client_id\" -> clientId, \"client_secret\" -> clientSecret,\n+      \"redirect_uri\" -> (oauthCallbackUrl.toString), \"grant_type\" -> \"authorization_code\"))\n+\n+    val responseFuture = pipeline { Post(tokenServer, postData) }\n+    val result = responseFuture.await\n+    //HttpResponse(200 OK,HttpEntity(text/plain; charset=UTF-8,access_token=CAAC80FcIc0kBAKNa3gxnpdjZALB9pHBgU3KsMYtoOQmhbLDH3tIbW06WuLnQt7IzJpLlj0aSJw3Nh6aAXGQj9o5ySqhsPxz04MAlZBCpLGVZCNhfYZAVmM6xjJ44FkR3cQt7q3blYcYQbN0hcBH7&expires=5184000),List(Content-Length: 178, Connection: keep-alive, Date: Tue, 16 Jul 2013 18:08:52 GMT, X-FB-Debug: Vc/QMj9oV26mt/z/t0YwfnxjmBdAdfHGgAUKliQ/NXM=, X-FB-Rev: 876422, Pragma: no-cache, Expires: Sat, 01 Jan 2000 00:00:00 GMT, Content-Type: text/plain; charset=UTF-8, Cache-Control: private, no-cache, no-store, must-revalidate, Access-Control-Allow-Origin: *),HTTP/1.1)\n+    result match {\n+      case HttpResponse(StatusCodes.OK, entity, _, _) => {\n+        log.debug(\"OK result = \" + entity.asString)\n+        Query(entity.asString).get(\"access_token\").map(t => OAuthAccessToken(t)).orElse(None)\n+      }\n+      case _ => {\n+        log.debug(\"result = \" + result)\n+        None\n+      }\n+    }\n+  }\n+\n+\n+  def userContext(accessToken: OAuthAccessToken): Option[OAuthIdentity] = {\n+    //HttpResponse(200 OK,HttpEntity(text/javascript; charset=UTF-8,{\"id\":\"1055486847\",\"name\":\"Olger Warnier\",\"first_name\":\"Olger\",\"last_name\":\"Warnier\",\"link\":\"http:\\/\\/www.facebook.com\\/owarnier\",\"username\":\"owarnier\",\"gender\":\"male\",\"email\":\"olger\\u0040spectare.nl\",\"timezone\":2,\"locale\":\"nl_NL\",\"verified\":true,\"updated_time\":\"2013-06-13T18:46:40+0000\"}),List(Content-Length: 289, Connection: keep-alive, Date: Tue, 16 Jul 2013 18:20:08 GMT, X-FB-Debug: dx9tSglmLZWjUZW2GDb0Xie4PgEj9UlKYzf9rTZSku0=, X-FB-Rev: 876422, Pragma: no-cache, Last-Modified: 2013-06-13T18:46:40+0000, Expires: Sat, 01 Jan 2000 00:00:00 GMT, ETag: \"d2dceb50681613af79192b7af99477fef2896240\", Content-Type: text/javascript; charset=UTF-8, Cache-Control: private, no-cache, no-store, must-revalidate, Access-Control-Allow-Origin: *),HTTP/1.1)\n+    val pipeline = logRequest(log) ~> sendReceive ~> logResponse(log)\n+\n+    val responseFuture = pipeline {\n+      addCredentials(OAuth2BearerToken(accessToken.token)) { Get(identityUrl) }\n+    }\n+\n+    val result = responseFuture.await\n+    result match {\n+      case HttpResponse(StatusCodes.OK, entity, _, _) => {\n+        log.debug(\"OK result = \" + entity.asString)\n+        val fbId = entity.asString.asJson.convertTo[OAuthIdentityResponse]",
        "path": "examples/spray-routing/openid-connect-routing-app/src/main/scala/spray/examples/FacebookAuthentication.scala",
        "position": 105,
        "original_position": 112,
        "commit_id": "404cef1c156dbce0d155d4f7f2bfa3f2d279d374",
        "original_commit_id": "8f8a360600102e0757aabd152112fa91a36908e9",
        "user": {
            "login": "2beaucoup",
            "id": 243903,
            "node_id": "MDQ6VXNlcjI0MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/243903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/2beaucoup",
            "html_url": "https://github.com/2beaucoup",
            "followers_url": "https://api.github.com/users/2beaucoup/followers",
            "following_url": "https://api.github.com/users/2beaucoup/following{/other_user}",
            "gists_url": "https://api.github.com/users/2beaucoup/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/2beaucoup/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/2beaucoup/subscriptions",
            "organizations_url": "https://api.github.com/users/2beaucoup/orgs",
            "repos_url": "https://api.github.com/users/2beaucoup/repos",
            "events_url": "https://api.github.com/users/2beaucoup/events{/privacy}",
            "received_events_url": "https://api.github.com/users/2beaucoup/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Wouldn't `entity.as[OAuthIdentityResponse]` work as well?\n",
        "created_at": "2013-07-17T13:01:03Z",
        "updated_at": "2013-07-18T06:07:39Z",
        "html_url": "https://github.com/spray/spray/pull/372#discussion_r5241102",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/372",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5241102"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/372#discussion_r5241102"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/372"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5241505",
        "pull_request_review_id": null,
        "id": 5241505,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE1MDU=",
        "diff_hunk": "@@ -0,0 +1,170 @@\n+package spray.examples\n+\n+import spray.client.pipelining._\n+import spray.http._\n+import spray.util._\n+import javax.net.ssl.SSLContext\n+import akka.actor.ActorSystem\n+import spray.routing.authentication._\n+import scala.concurrent.ExecutionContext\n+import spray.json._\n+import spray.httpx.SprayJsonSupport\n+import spray.routing.authentication.OAuthAccessToken\n+import spray.http.OAuth2BearerToken\n+import scala.Some\n+import spray.routing.authentication.OAuthIdentity\n+import spray.routing.authentication.OAuthAuthorizationCode",
        "path": "examples/spray-routing/openid-connect-routing-app/src/main/scala/spray/examples/GoogleAuthentication.scala",
        "position": null,
        "original_position": 16,
        "commit_id": "404cef1c156dbce0d155d4f7f2bfa3f2d279d374",
        "original_commit_id": "8f8a360600102e0757aabd152112fa91a36908e9",
        "user": {
            "login": "2beaucoup",
            "id": 243903,
            "node_id": "MDQ6VXNlcjI0MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/243903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/2beaucoup",
            "html_url": "https://github.com/2beaucoup",
            "followers_url": "https://api.github.com/users/2beaucoup/followers",
            "following_url": "https://api.github.com/users/2beaucoup/following{/other_user}",
            "gists_url": "https://api.github.com/users/2beaucoup/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/2beaucoup/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/2beaucoup/subscriptions",
            "organizations_url": "https://api.github.com/users/2beaucoup/orgs",
            "repos_url": "https://api.github.com/users/2beaucoup/repos",
            "events_url": "https://api.github.com/users/2beaucoup/events{/privacy}",
            "received_events_url": "https://api.github.com/users/2beaucoup/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "`scala._` (e.g. `Option`) is imported by default. There are duplications for `spray.routing.authentication._` and `spray.http._`.\n\nMaybe the following would work:\n\n``` scala\nimport spray.client.pipelining._\nimport spray.json._\nimport spray.http._\nimport spray.httpx.SprayJsonSupport\nimport spray.routing.authentication._\nimport spray.util._\nimport javax.net.ssl.SSLContext\nimport scala.concurrent.ExecutionContext\nimport akka.actor.ActorSystem\n```\n",
        "created_at": "2013-07-17T13:22:16Z",
        "updated_at": "2013-07-18T06:07:39Z",
        "html_url": "https://github.com/spray/spray/pull/372#discussion_r5241505",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/372",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5241505"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/372#discussion_r5241505"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/372"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5245173",
        "pull_request_review_id": null,
        "id": 5245173,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUxNzM=",
        "diff_hunk": "@@ -0,0 +1,77 @@\n+package spray.examples\n+\n+import scala.concurrent.duration._\n+import akka.actor.ActorSystem\n+import spray.routing.SimpleRoutingApp\n+import spray.http.MediaTypes._\n+import spray.routing.authentication.OAuth\n+import scala.concurrent.ExecutionContext\n+import spray.http._\n+import spray.util._\n+\n+object Main extends App with SimpleRoutingApp {\n+\n+\n+  implicit val system = ActorSystem(\"oidc-routing-app\")\n+  implicit val log = LoggingContext.fromActorSystem(system)\n+\n+  // Configuration\n+\n+  // NOTE: You need a host that is accessible for external servers\n+  val appHomeUrl = \"http://yourhost.domain.com\"\n+  val callbackRoute = \"oauthcallback\"\n+  val oauthCallbackUrl = Uri(appHomeUrl + \"/\" + callbackRoute)\n+\n+  import ExecutionContext.Implicits.global\n+\n+  //val oauthComm = new GoogleAuthentication(oauthCallbackUrl)\n+  // Try the other sample by commenting the Google one and enabling the Facebook one.\n+  // NOTE: Both implementations are samples only. A starting point for embedding it in your infrastructure\n+  val oauthComm = new FacebookAuthentication(oauthCallbackUrl)\n+\n+\n+  // use \"localhost\" for local binding only, as this uses a callback of an authorization server\n+  // you probably need to bind it to a port that's available outside this host.\n+  startServer(\"0.0.0.0\", port = 8080) {\n+    get {\n+      path(\"\") {\n+        redirect(\"/hello\", StatusCodes.Found)\n+      } ~\n+      path(\"hello\") {\n+        respondWithMediaType(`text/html`) { // XML is marshalled to `text/xml` by default, so we simply override here",
        "path": "examples/spray-routing/openid-connect-routing-app/src/main/scala/spray/examples/Main.scala",
        "position": 41,
        "original_position": 41,
        "commit_id": "404cef1c156dbce0d155d4f7f2bfa3f2d279d374",
        "original_commit_id": "8f8a360600102e0757aabd152112fa91a36908e9",
        "user": {
            "login": "2beaucoup",
            "id": 243903,
            "node_id": "MDQ6VXNlcjI0MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/243903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/2beaucoup",
            "html_url": "https://github.com/2beaucoup",
            "followers_url": "https://api.github.com/users/2beaucoup/followers",
            "following_url": "https://api.github.com/users/2beaucoup/following{/other_user}",
            "gists_url": "https://api.github.com/users/2beaucoup/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/2beaucoup/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/2beaucoup/subscriptions",
            "organizations_url": "https://api.github.com/users/2beaucoup/orgs",
            "repos_url": "https://api.github.com/users/2beaucoup/repos",
            "events_url": "https://api.github.com/users/2beaucoup/events{/privacy}",
            "received_events_url": "https://api.github.com/users/2beaucoup/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "That should be negotiated by the client. [NodeSeqMarshaller](https://github.com/spray/spray/blob/release/1.0/spray-httpx/src/main/scala/spray/httpx/marshalling/BasicMarshallers.scala#L55-L57) also supports `text/html`.\n",
        "created_at": "2013-07-17T15:37:03Z",
        "updated_at": "2013-07-18T06:07:39Z",
        "html_url": "https://github.com/spray/spray/pull/372#discussion_r5245173",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/372",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5245173"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/372#discussion_r5245173"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/372"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5253280",
        "pull_request_review_id": null,
        "id": 5253280,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMyODA=",
        "diff_hunk": "@@ -0,0 +1,170 @@\n+package spray.examples\n+\n+import spray.client.pipelining._\n+import spray.http._\n+import spray.util._\n+import javax.net.ssl.SSLContext\n+import akka.actor.ActorSystem\n+import spray.routing.authentication._\n+import scala.concurrent.ExecutionContext\n+import spray.json._\n+import spray.httpx.SprayJsonSupport\n+import spray.http.Uri.Query\n+import spray.routing.authentication.OAuthAccessToken\n+import spray.http.OAuth2BearerToken\n+import scala.Some\n+import spray.http.HttpResponse\n+import spray.routing.authentication.OAuthIdentity\n+import spray.routing.authentication.OAuthAuthorizationCode\n+\n+\n+/**\n+ * Simple implementation of the Google OAuth authentication mechanisms.\n+ * NOTE: THIS IS A SAMPLE ONLY, IT DOES NOT STORE OR CACHE THE TOKENS IN ANY WAY,\n+ * NEITHER IS THE SECURITY STATE RANDOMIZED OR SECURE.\n+ * IT DOES NOT RENEW TOKENS NOR VALIDATE THE LIFECYCLE OF TOKENS\n+ *\n+ * In Order to use this sample, you need to register your application at facebook\n+ * and obtain a client ID and clientSecret.\n+ * See: https://developers.facebook.com/docs/facebook-login/login-flow-for-web-no-jssdk/ for more information\n+ *\n+ * e.g. Use this for your own good, implement proper security and storage of tokens.\n+ *\n+ * @param oauthCallbackUrl Callback URI that is used for google to send authorization response\n+ * @param system  implicit found actor system\n+ * @param log implicit found log system\n+ */\n+class FacebookAuthentication(oauthCallbackUrl: Uri)(implicit system: ActorSystem, log: LoggingContext) extends OAuthTransformer {\n+  // response by the facebook call to return an identity\n+  //{\"id\":\"1055486847\",\"name\":\"Olger Warnier\",\"first_name\":\"Olger\",\"last_name\":\"Warnier\",\"link\":\"http:\\/\\/www.facebook.com\\/owarnier\",\"username\":\"owarnier\",\"gender\":\"male\",\"email\":\"olger\\u0040spectare.nl\",\"timezone\":2,\"locale\":\"nl_NL\",\"verified\":true,\"updated_time\":\"2013-06-13T18:46:40+0000\"}\n+\n+  case class OAuthIdentityResponse(id: String, name: String, first_name: String, last_name: String, link: String, username: String, gender: String, email: String, timezone: Int, locale: String, verified: Boolean, updated_time: String)",
        "path": "examples/spray-routing/openid-connect-routing-app/src/main/scala/spray/examples/FacebookAuthentication.scala",
        "position": null,
        "original_position": 41,
        "commit_id": "404cef1c156dbce0d155d4f7f2bfa3f2d279d374",
        "original_commit_id": "8f8a360600102e0757aabd152112fa91a36908e9",
        "user": {
            "login": "olger",
            "id": 734430,
            "node_id": "MDQ6VXNlcjczNDQzMA==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/734430?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/olger",
            "html_url": "https://github.com/olger",
            "followers_url": "https://api.github.com/users/olger/followers",
            "following_url": "https://api.github.com/users/olger/following{/other_user}",
            "gists_url": "https://api.github.com/users/olger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/olger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/olger/subscriptions",
            "organizations_url": "https://api.github.com/users/olger/orgs",
            "repos_url": "https://api.github.com/users/olger/repos",
            "events_url": "https://api.github.com/users/olger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/olger/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Could just remove this comment, any preference on keeping this or formatting it ?\n",
        "created_at": "2013-07-17T20:30:49Z",
        "updated_at": "2013-07-18T06:07:39Z",
        "html_url": "https://github.com/spray/spray/pull/372#discussion_r5253280",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/372",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5253280"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/372#discussion_r5253280"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/372"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5253302",
        "pull_request_review_id": null,
        "id": 5253302,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMzMDI=",
        "diff_hunk": "@@ -0,0 +1,170 @@\n+package spray.examples\n+\n+import spray.client.pipelining._\n+import spray.http._\n+import spray.util._\n+import javax.net.ssl.SSLContext\n+import akka.actor.ActorSystem\n+import spray.routing.authentication._\n+import scala.concurrent.ExecutionContext\n+import spray.json._\n+import spray.httpx.SprayJsonSupport\n+import spray.http.Uri.Query\n+import spray.routing.authentication.OAuthAccessToken\n+import spray.http.OAuth2BearerToken\n+import scala.Some\n+import spray.http.HttpResponse\n+import spray.routing.authentication.OAuthIdentity\n+import spray.routing.authentication.OAuthAuthorizationCode\n+\n+\n+/**\n+ * Simple implementation of the Google OAuth authentication mechanisms.\n+ * NOTE: THIS IS A SAMPLE ONLY, IT DOES NOT STORE OR CACHE THE TOKENS IN ANY WAY,\n+ * NEITHER IS THE SECURITY STATE RANDOMIZED OR SECURE.\n+ * IT DOES NOT RENEW TOKENS NOR VALIDATE THE LIFECYCLE OF TOKENS\n+ *\n+ * In Order to use this sample, you need to register your application at facebook\n+ * and obtain a client ID and clientSecret.\n+ * See: https://developers.facebook.com/docs/facebook-login/login-flow-for-web-no-jssdk/ for more information\n+ *\n+ * e.g. Use this for your own good, implement proper security and storage of tokens.\n+ *\n+ * @param oauthCallbackUrl Callback URI that is used for google to send authorization response\n+ * @param system  implicit found actor system\n+ * @param log implicit found log system\n+ */\n+class FacebookAuthentication(oauthCallbackUrl: Uri)(implicit system: ActorSystem, log: LoggingContext) extends OAuthTransformer {\n+  // response by the facebook call to return an identity\n+  //{\"id\":\"1055486847\",\"name\":\"Olger Warnier\",\"first_name\":\"Olger\",\"last_name\":\"Warnier\",\"link\":\"http:\\/\\/www.facebook.com\\/owarnier\",\"username\":\"owarnier\",\"gender\":\"male\",\"email\":\"olger\\u0040spectare.nl\",\"timezone\":2,\"locale\":\"nl_NL\",\"verified\":true,\"updated_time\":\"2013-06-13T18:46:40+0000\"}\n+\n+  case class OAuthIdentityResponse(id: String, name: String, first_name: String, last_name: String, link: String, username: String, gender: String, email: String, timezone: Int, locale: String, verified: Boolean, updated_time: String)\n+\n+  object OAuthClientJsonProtocol extends DefaultJsonProtocol {\n+    implicit val oAuthIdentityResponseFormat = jsonFormat12(OAuthIdentityResponse)\n+  }\n+\n+  import ExecutionContext.Implicits.global\n+  import OAuthClientJsonProtocol._\n+  import SprayJsonSupport._\n+\n+\n+  // facebook\n+  private val authServer = Uri(\"https://www.facebook.com/dialog/oauth\")\n+  private val tokenServer = Uri(\"https://graph.facebook.com/oauth/access_token\")\n+  private val clientId = \"YOUR_CLIENT_ID_HERE\"\n+  private val clientSecret = \"YOUR_CLIENT_SECRET_HERE\"\n+  private val identityUrl = \"https://graph.facebook.com/me\"\n+  //https://graph.facebook.com/me?access_token=\n+\n+  private implicit val mySSLContext: SSLContext = {\n+    val context = SSLContext.getDefault\n+    context\n+  }\n+\n+  def loginUrl =\n+    s\"\"\"\n+     |$authServer?\n+     |client_id=$clientId&\n+     |response_type=code&\n+     |state=AAAAAAA&\n+     |redirect_uri=$oauthCallbackUrl&\n+     |scope=email\n+    \"\"\".stripMargin\n+  //     |scope=openid%20email&\n+\n+\n+  def accessToken(code: OAuthAuthorizationCode): Option[OAuthAccessToken] = {\n+\n+    val pipeline = logRequest(log) ~> sendReceive ~> logResponse(log)\n+\n+    val postData = FormData(Map(\"code\" -> code.code, \"client_id\" -> clientId, \"client_secret\" -> clientSecret,\n+      \"redirect_uri\" -> (oauthCallbackUrl.toString), \"grant_type\" -> \"authorization_code\"))\n+\n+    val responseFuture = pipeline { Post(tokenServer, postData) }\n+    val result = responseFuture.await\n+    //HttpResponse(200 OK,HttpEntity(text/plain; charset=UTF-8,access_token=CAAC80FcIc0kBAKNa3gxnpdjZALB9pHBgU3KsMYtoOQmhbLDH3tIbW06WuLnQt7IzJpLlj0aSJw3Nh6aAXGQj9o5ySqhsPxz04MAlZBCpLGVZCNhfYZAVmM6xjJ44FkR3cQt7q3blYcYQbN0hcBH7&expires=5184000),List(Content-Length: 178, Connection: keep-alive, Date: Tue, 16 Jul 2013 18:08:52 GMT, X-FB-Debug: Vc/QMj9oV26mt/z/t0YwfnxjmBdAdfHGgAUKliQ/NXM=, X-FB-Rev: 876422, Pragma: no-cache, Expires: Sat, 01 Jan 2000 00:00:00 GMT, Content-Type: text/plain; charset=UTF-8, Cache-Control: private, no-cache, no-store, must-revalidate, Access-Control-Allow-Origin: *),HTTP/1.1)",
        "path": "examples/spray-routing/openid-connect-routing-app/src/main/scala/spray/examples/FacebookAuthentication.scala",
        "position": null,
        "original_position": 86,
        "commit_id": "404cef1c156dbce0d155d4f7f2bfa3f2d279d374",
        "original_commit_id": "8f8a360600102e0757aabd152112fa91a36908e9",
        "user": {
            "login": "olger",
            "id": 734430,
            "node_id": "MDQ6VXNlcjczNDQzMA==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/734430?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/olger",
            "html_url": "https://github.com/olger",
            "followers_url": "https://api.github.com/users/olger/followers",
            "following_url": "https://api.github.com/users/olger/following{/other_user}",
            "gists_url": "https://api.github.com/users/olger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/olger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/olger/subscriptions",
            "organizations_url": "https://api.github.com/users/olger/orgs",
            "repos_url": "https://api.github.com/users/olger/repos",
            "events_url": "https://api.github.com/users/olger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/olger/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Same thing, could remove the comment (its more debug info) or format it. \n",
        "created_at": "2013-07-17T20:31:31Z",
        "updated_at": "2013-07-18T06:07:39Z",
        "html_url": "https://github.com/spray/spray/pull/372#discussion_r5253302",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/372",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5253302"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/372#discussion_r5253302"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/372"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5253775",
        "pull_request_review_id": null,
        "id": 5253775,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM3NzU=",
        "diff_hunk": "@@ -0,0 +1,77 @@\n+package spray.examples\n+\n+import scala.concurrent.duration._\n+import akka.actor.ActorSystem\n+import spray.routing.SimpleRoutingApp\n+import spray.http.MediaTypes._\n+import spray.routing.authentication.OAuth\n+import scala.concurrent.ExecutionContext\n+import spray.http._\n+import spray.util._\n+\n+object Main extends App with SimpleRoutingApp {\n+\n+\n+  implicit val system = ActorSystem(\"oidc-routing-app\")\n+  implicit val log = LoggingContext.fromActorSystem(system)\n+\n+  // Configuration\n+\n+  // NOTE: You need a host that is accessible for external servers\n+  val appHomeUrl = \"http://yourhost.domain.com\"\n+  val callbackRoute = \"oauthcallback\"\n+  val oauthCallbackUrl = Uri(appHomeUrl + \"/\" + callbackRoute)\n+\n+  import ExecutionContext.Implicits.global\n+\n+  //val oauthComm = new GoogleAuthentication(oauthCallbackUrl)\n+  // Try the other sample by commenting the Google one and enabling the Facebook one.\n+  // NOTE: Both implementations are samples only. A starting point for embedding it in your infrastructure\n+  val oauthComm = new FacebookAuthentication(oauthCallbackUrl)\n+\n+\n+  // use \"localhost\" for local binding only, as this uses a callback of an authorization server\n+  // you probably need to bind it to a port that's available outside this host.\n+  startServer(\"0.0.0.0\", port = 8080) {\n+    get {\n+      path(\"\") {\n+        redirect(\"/hello\", StatusCodes.Found)\n+      } ~\n+      path(\"hello\") {\n+        respondWithMediaType(`text/html`) { // XML is marshalled to `text/xml` by default, so we simply override here",
        "path": "examples/spray-routing/openid-connect-routing-app/src/main/scala/spray/examples/Main.scala",
        "position": 41,
        "original_position": 41,
        "commit_id": "404cef1c156dbce0d155d4f7f2bfa3f2d279d374",
        "original_commit_id": "8f8a360600102e0757aabd152112fa91a36908e9",
        "user": {
            "login": "olger",
            "id": 734430,
            "node_id": "MDQ6VXNlcjczNDQzMA==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/734430?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/olger",
            "html_url": "https://github.com/olger",
            "followers_url": "https://api.github.com/users/olger/followers",
            "following_url": "https://api.github.com/users/olger/following{/other_user}",
            "gists_url": "https://api.github.com/users/olger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/olger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/olger/subscriptions",
            "organizations_url": "https://api.github.com/users/olger/orgs",
            "repos_url": "https://api.github.com/users/olger/repos",
            "events_url": "https://api.github.com/users/olger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/olger/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'll give that a try. Please note that the simple-routing-app has the same structure (I tried to keep it similar to the sample)\n",
        "created_at": "2013-07-17T20:48:20Z",
        "updated_at": "2013-07-18T06:07:39Z",
        "html_url": "https://github.com/spray/spray/pull/372#discussion_r5253775",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/372",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5253775"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/372#discussion_r5253775"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/372"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5253850",
        "pull_request_review_id": null,
        "id": 5253850,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM4NTA=",
        "diff_hunk": "@@ -0,0 +1,77 @@\n+package spray.examples\n+\n+import scala.concurrent.duration._\n+import akka.actor.ActorSystem\n+import spray.routing.SimpleRoutingApp\n+import spray.http.MediaTypes._\n+import spray.routing.authentication.OAuth\n+import scala.concurrent.ExecutionContext\n+import spray.http._\n+import spray.util._\n+\n+object Main extends App with SimpleRoutingApp {\n+\n+\n+  implicit val system = ActorSystem(\"oidc-routing-app\")\n+  implicit val log = LoggingContext.fromActorSystem(system)\n+\n+  // Configuration\n+\n+  // NOTE: You need a host that is accessible for external servers\n+  val appHomeUrl = \"http://yourhost.domain.com\"\n+  val callbackRoute = \"oauthcallback\"\n+  val oauthCallbackUrl = Uri(appHomeUrl + \"/\" + callbackRoute)\n+\n+  import ExecutionContext.Implicits.global\n+\n+  //val oauthComm = new GoogleAuthentication(oauthCallbackUrl)\n+  // Try the other sample by commenting the Google one and enabling the Facebook one.\n+  // NOTE: Both implementations are samples only. A starting point for embedding it in your infrastructure\n+  val oauthComm = new FacebookAuthentication(oauthCallbackUrl)\n+\n+\n+  // use \"localhost\" for local binding only, as this uses a callback of an authorization server\n+  // you probably need to bind it to a port that's available outside this host.\n+  startServer(\"0.0.0.0\", port = 8080) {\n+    get {\n+      path(\"\") {\n+        redirect(\"/hello\", StatusCodes.Found)\n+      } ~\n+      path(\"hello\") {\n+        respondWithMediaType(`text/html`) { // XML is marshalled to `text/xml` by default, so we simply override here",
        "path": "examples/spray-routing/openid-connect-routing-app/src/main/scala/spray/examples/Main.scala",
        "position": 41,
        "original_position": 41,
        "commit_id": "404cef1c156dbce0d155d4f7f2bfa3f2d279d374",
        "original_commit_id": "8f8a360600102e0757aabd152112fa91a36908e9",
        "user": {
            "login": "olger",
            "id": 734430,
            "node_id": "MDQ6VXNlcjczNDQzMA==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/734430?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/olger",
            "html_url": "https://github.com/olger",
            "followers_url": "https://api.github.com/users/olger/followers",
            "following_url": "https://api.github.com/users/olger/following{/other_user}",
            "gists_url": "https://api.github.com/users/olger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/olger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/olger/subscriptions",
            "organizations_url": "https://api.github.com/users/olger/orgs",
            "repos_url": "https://api.github.com/users/olger/repos",
            "events_url": "https://api.github.com/users/olger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/olger/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Tried to remove the respondWithMediaType, that is not enough to render html in a browser (Safari). Any tips on what you would expect to see ? \n",
        "created_at": "2013-07-17T20:51:37Z",
        "updated_at": "2013-07-18T06:07:39Z",
        "html_url": "https://github.com/spray/spray/pull/372#discussion_r5253850",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/372",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5253850"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/372#discussion_r5253850"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/372"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5254198",
        "pull_request_review_id": null,
        "id": 5254198,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQxOTg=",
        "diff_hunk": "@@ -0,0 +1,170 @@\n+package spray.examples\n+\n+import spray.client.pipelining._\n+import spray.http._\n+import spray.util._\n+import javax.net.ssl.SSLContext\n+import akka.actor.ActorSystem\n+import spray.routing.authentication._\n+import scala.concurrent.ExecutionContext\n+import spray.json._\n+import spray.httpx.SprayJsonSupport\n+import spray.http.Uri.Query\n+import spray.routing.authentication.OAuthAccessToken\n+import spray.http.OAuth2BearerToken\n+import scala.Some\n+import spray.http.HttpResponse\n+import spray.routing.authentication.OAuthIdentity\n+import spray.routing.authentication.OAuthAuthorizationCode\n+\n+\n+/**\n+ * Simple implementation of the Google OAuth authentication mechanisms.\n+ * NOTE: THIS IS A SAMPLE ONLY, IT DOES NOT STORE OR CACHE THE TOKENS IN ANY WAY,\n+ * NEITHER IS THE SECURITY STATE RANDOMIZED OR SECURE.\n+ * IT DOES NOT RENEW TOKENS NOR VALIDATE THE LIFECYCLE OF TOKENS\n+ *\n+ * In Order to use this sample, you need to register your application at facebook\n+ * and obtain a client ID and clientSecret.\n+ * See: https://developers.facebook.com/docs/facebook-login/login-flow-for-web-no-jssdk/ for more information\n+ *\n+ * e.g. Use this for your own good, implement proper security and storage of tokens.\n+ *\n+ * @param oauthCallbackUrl Callback URI that is used for google to send authorization response\n+ * @param system  implicit found actor system\n+ * @param log implicit found log system\n+ */\n+class FacebookAuthentication(oauthCallbackUrl: Uri)(implicit system: ActorSystem, log: LoggingContext) extends OAuthTransformer {\n+  // response by the facebook call to return an identity\n+  //{\"id\":\"1055486847\",\"name\":\"Olger Warnier\",\"first_name\":\"Olger\",\"last_name\":\"Warnier\",\"link\":\"http:\\/\\/www.facebook.com\\/owarnier\",\"username\":\"owarnier\",\"gender\":\"male\",\"email\":\"olger\\u0040spectare.nl\",\"timezone\":2,\"locale\":\"nl_NL\",\"verified\":true,\"updated_time\":\"2013-06-13T18:46:40+0000\"}\n+\n+  case class OAuthIdentityResponse(id: String, name: String, first_name: String, last_name: String, link: String, username: String, gender: String, email: String, timezone: Int, locale: String, verified: Boolean, updated_time: String)\n+\n+  object OAuthClientJsonProtocol extends DefaultJsonProtocol {\n+    implicit val oAuthIdentityResponseFormat = jsonFormat12(OAuthIdentityResponse)\n+  }\n+\n+  import ExecutionContext.Implicits.global\n+  import OAuthClientJsonProtocol._\n+  import SprayJsonSupport._\n+\n+\n+  // facebook\n+  private val authServer = Uri(\"https://www.facebook.com/dialog/oauth\")\n+  private val tokenServer = Uri(\"https://graph.facebook.com/oauth/access_token\")\n+  private val clientId = \"YOUR_CLIENT_ID_HERE\"\n+  private val clientSecret = \"YOUR_CLIENT_SECRET_HERE\"\n+  private val identityUrl = \"https://graph.facebook.com/me\"\n+  //https://graph.facebook.com/me?access_token=\n+\n+  private implicit val mySSLContext: SSLContext = {\n+    val context = SSLContext.getDefault\n+    context\n+  }\n+\n+  def loginUrl =\n+    s\"\"\"\n+     |$authServer?\n+     |client_id=$clientId&\n+     |response_type=code&\n+     |state=AAAAAAA&\n+     |redirect_uri=$oauthCallbackUrl&\n+     |scope=email\n+    \"\"\".stripMargin\n+  //     |scope=openid%20email&\n+\n+\n+  def accessToken(code: OAuthAuthorizationCode): Option[OAuthAccessToken] = {\n+\n+    val pipeline = logRequest(log) ~> sendReceive ~> logResponse(log)\n+\n+    val postData = FormData(Map(\"code\" -> code.code, \"client_id\" -> clientId, \"client_secret\" -> clientSecret,\n+      \"redirect_uri\" -> (oauthCallbackUrl.toString), \"grant_type\" -> \"authorization_code\"))\n+\n+    val responseFuture = pipeline { Post(tokenServer, postData) }\n+    val result = responseFuture.await\n+    //HttpResponse(200 OK,HttpEntity(text/plain; charset=UTF-8,access_token=CAAC80FcIc0kBAKNa3gxnpdjZALB9pHBgU3KsMYtoOQmhbLDH3tIbW06WuLnQt7IzJpLlj0aSJw3Nh6aAXGQj9o5ySqhsPxz04MAlZBCpLGVZCNhfYZAVmM6xjJ44FkR3cQt7q3blYcYQbN0hcBH7&expires=5184000),List(Content-Length: 178, Connection: keep-alive, Date: Tue, 16 Jul 2013 18:08:52 GMT, X-FB-Debug: Vc/QMj9oV26mt/z/t0YwfnxjmBdAdfHGgAUKliQ/NXM=, X-FB-Rev: 876422, Pragma: no-cache, Expires: Sat, 01 Jan 2000 00:00:00 GMT, Content-Type: text/plain; charset=UTF-8, Cache-Control: private, no-cache, no-store, must-revalidate, Access-Control-Allow-Origin: *),HTTP/1.1)\n+    result match {\n+      case HttpResponse(StatusCodes.OK, entity, _, _) => {\n+        log.debug(\"OK result = \" + entity.asString)\n+        Query(entity.asString).get(\"access_token\").map(t => OAuthAccessToken(t)).orElse(None)\n+      }\n+      case _ => {\n+        log.debug(\"result = \" + result)\n+        None\n+      }\n+    }\n+  }\n+\n+\n+  def userContext(accessToken: OAuthAccessToken): Option[OAuthIdentity] = {\n+    //HttpResponse(200 OK,HttpEntity(text/javascript; charset=UTF-8,{\"id\":\"1055486847\",\"name\":\"Olger Warnier\",\"first_name\":\"Olger\",\"last_name\":\"Warnier\",\"link\":\"http:\\/\\/www.facebook.com\\/owarnier\",\"username\":\"owarnier\",\"gender\":\"male\",\"email\":\"olger\\u0040spectare.nl\",\"timezone\":2,\"locale\":\"nl_NL\",\"verified\":true,\"updated_time\":\"2013-06-13T18:46:40+0000\"}),List(Content-Length: 289, Connection: keep-alive, Date: Tue, 16 Jul 2013 18:20:08 GMT, X-FB-Debug: dx9tSglmLZWjUZW2GDb0Xie4PgEj9UlKYzf9rTZSku0=, X-FB-Rev: 876422, Pragma: no-cache, Last-Modified: 2013-06-13T18:46:40+0000, Expires: Sat, 01 Jan 2000 00:00:00 GMT, ETag: \"d2dceb50681613af79192b7af99477fef2896240\", Content-Type: text/javascript; charset=UTF-8, Cache-Control: private, no-cache, no-store, must-revalidate, Access-Control-Allow-Origin: *),HTTP/1.1)\n+    val pipeline = logRequest(log) ~> sendReceive ~> logResponse(log)\n+\n+    val responseFuture = pipeline {\n+      addCredentials(OAuth2BearerToken(accessToken.token)) { Get(identityUrl) }\n+    }\n+\n+    val result = responseFuture.await\n+    result match {\n+      case HttpResponse(StatusCodes.OK, entity, _, _) => {\n+        log.debug(\"OK result = \" + entity.asString)\n+        val fbId = entity.asString.asJson.convertTo[OAuthIdentityResponse]",
        "path": "examples/spray-routing/openid-connect-routing-app/src/main/scala/spray/examples/FacebookAuthentication.scala",
        "position": 105,
        "original_position": 112,
        "commit_id": "404cef1c156dbce0d155d4f7f2bfa3f2d279d374",
        "original_commit_id": "8f8a360600102e0757aabd152112fa91a36908e9",
        "user": {
            "login": "olger",
            "id": 734430,
            "node_id": "MDQ6VXNlcjczNDQzMA==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/734430?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/olger",
            "html_url": "https://github.com/olger",
            "followers_url": "https://api.github.com/users/olger/followers",
            "following_url": "https://api.github.com/users/olger/following{/other_user}",
            "gists_url": "https://api.github.com/users/olger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/olger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/olger/subscriptions",
            "organizations_url": "https://api.github.com/users/olger/orgs",
            "repos_url": "https://api.github.com/users/olger/repos",
            "events_url": "https://api.github.com/users/olger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/olger/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Tried it (just now), doesn't work. (although it doesn't give an exception)\n",
        "created_at": "2013-07-17T21:02:50Z",
        "updated_at": "2013-07-18T06:07:39Z",
        "html_url": "https://github.com/spray/spray/pull/372#discussion_r5254198",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/372",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5254198"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/372#discussion_r5254198"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/372"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5135465",
        "pull_request_review_id": null,
        "id": 5135465,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU0NjU=",
        "diff_hunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright (C) 2011-2013 spray.io\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.http\n+package parser\n+\n+import org.parboiled.scala._\n+import BasicRules._\n+import HttpHeaders._\n+import HttpMethods._\n+import ProtectedHeaderCreation.enable\n+import org.parboiled.errors.ParsingException\n+\n+/**\n+ * parser rules for CORS header that does not fit to SimpleHeaders\n+ * Spec http://www.w3.org/TR/cors/\n+ */\n+private[parser] trait CORSHeaders {\n+  this: Parser with ProtocolParameterRules with AdditionalRules \u21d2\n+\n+  def `*Access-Control-Allow-Methods` = rule {\n+    oneOrMore(HttpMethodDef, separator = ListSep) ~ EOI ~~> (`Access-Control-Allow-Methods`(_))\n+  }\n+\n+  def `*Access-Control-Allow-Headers` = rule {\n+    oneOrMore(Token, separator = ListSep) ~ EOI ~~> (`Access-Control-Allow-Headers`(_))\n+  }\n+\n+  def `*Access-Control-Request-Method` = rule {\n+    HttpMethodDef ~ EOI ~~> (`Access-Control-Request-Method`(_))\n+  }\n+\n+  def `*Access-Control-Request-Headers` = rule {\n+    oneOrMore(Token, separator = ListSep) ~ EOI ~~> (`Access-Control-Request-Headers`(_))\n+  }\n+\n+  def `*Access-Control-Allow-Origin` = rule {\n+    oneOrMore(Text) ~> (`Access-Control-Allow-Origin`(_))\n+  }\n+\n+  def `*Access-Control-Expose-Headers` = rule {\n+    oneOrMore(Token, separator = ListSep) ~~> (`Access-Control-Expose-Headers`(_))\n+  }\n+\n+  def `*Access-Control-Max-Age` = rule {\n+    oneOrMore(Digit) ~> (s \u21d2 `Access-Control-Max-Age`(s.toLong)) ~ EOI\n+  }\n+\n+  //according to http://www.w3.org/TR/cors/#access-control-allow-credentials-response-header this is case-sensitive\n+  def `*Access-Control-Allow-Credentials` = rule {\n+    (\"true\" ~ push(`Access-Control-Allow-Credentials`(true)) | \"false\" ~ push(`Access-Control-Allow-Credentials`(false))) ~ EOI\n+  }\n+\n+  def `*Origin` = rule {\n+    oneOrMore(Text) ~> { uri \u21d2 Origin(Uri.parseAbsolute(uri)) } ~ EOI\n+  }\n+\n+  def HttpMethodDef = rule {",
        "path": "spray-http/src/main/scala/spray/http/parser/CORSHeaders.scala",
        "position": 71,
        "original_position": 71,
        "commit_id": "bdf20adfccada47811526c0ac965711f08afdcb4",
        "original_commit_id": "d035675d24f78e77f3579e085fc078675dd93211",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This rule should already be defined somewhere else, isn't it?\n",
        "created_at": "2013-07-11T08:05:00Z",
        "updated_at": "2013-07-18T06:27:41Z",
        "html_url": "https://github.com/spray/spray/pull/351#discussion_r5135465",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/351",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5135465"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/351#discussion_r5135465"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/351"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5135545",
        "pull_request_review_id": null,
        "id": 5135545,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU1NDU=",
        "diff_hunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright (C) 2011-2013 spray.io\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.http\n+package parser\n+\n+import org.parboiled.scala._\n+import BasicRules._\n+import HttpHeaders._\n+import HttpMethods._\n+import ProtectedHeaderCreation.enable\n+import org.parboiled.errors.ParsingException\n+\n+/**\n+ * parser rules for CORS header that does not fit to SimpleHeaders\n+ * Spec http://www.w3.org/TR/cors/\n+ */\n+private[parser] trait CORSHeaders {\n+  this: Parser with ProtocolParameterRules with AdditionalRules \u21d2\n+\n+  def `*Access-Control-Allow-Methods` = rule {\n+    oneOrMore(HttpMethodDef, separator = ListSep) ~ EOI ~~> (`Access-Control-Allow-Methods`(_))\n+  }\n+\n+  def `*Access-Control-Allow-Headers` = rule {\n+    oneOrMore(Token, separator = ListSep) ~ EOI ~~> (`Access-Control-Allow-Headers`(_))\n+  }\n+\n+  def `*Access-Control-Request-Method` = rule {\n+    HttpMethodDef ~ EOI ~~> (`Access-Control-Request-Method`(_))\n+  }\n+\n+  def `*Access-Control-Request-Headers` = rule {\n+    oneOrMore(Token, separator = ListSep) ~ EOI ~~> (`Access-Control-Request-Headers`(_))\n+  }\n+\n+  def `*Access-Control-Allow-Origin` = rule {\n+    oneOrMore(Text) ~> (`Access-Control-Allow-Origin`(_))\n+  }\n+\n+  def `*Access-Control-Expose-Headers` = rule {\n+    oneOrMore(Token, separator = ListSep) ~~> (`Access-Control-Expose-Headers`(_))\n+  }\n+\n+  def `*Access-Control-Max-Age` = rule {\n+    oneOrMore(Digit) ~> (s \u21d2 `Access-Control-Max-Age`(s.toLong)) ~ EOI\n+  }\n+\n+  //according to http://www.w3.org/TR/cors/#access-control-allow-credentials-response-header this is case-sensitive\n+  def `*Access-Control-Allow-Credentials` = rule {\n+    (\"true\" ~ push(`Access-Control-Allow-Credentials`(true)) | \"false\" ~ push(`Access-Control-Allow-Credentials`(false))) ~ EOI\n+  }\n+\n+  def `*Origin` = rule {\n+    oneOrMore(Text) ~> { uri \u21d2 Origin(Uri.parseAbsolute(uri)) } ~ EOI\n+  }\n+\n+  def HttpMethodDef = rule {",
        "path": "spray-http/src/main/scala/spray/http/parser/CORSHeaders.scala",
        "position": 71,
        "original_position": 71,
        "commit_id": "bdf20adfccada47811526c0ac965711f08afdcb4",
        "original_commit_id": "d035675d24f78e77f3579e085fc078675dd93211",
        "user": {
            "login": "marekzebrowski",
            "id": 689964,
            "node_id": "MDQ6VXNlcjY4OTk2NA==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/689964?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/marekzebrowski",
            "html_url": "https://github.com/marekzebrowski",
            "followers_url": "https://api.github.com/users/marekzebrowski/followers",
            "following_url": "https://api.github.com/users/marekzebrowski/following{/other_user}",
            "gists_url": "https://api.github.com/users/marekzebrowski/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/marekzebrowski/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/marekzebrowski/subscriptions",
            "organizations_url": "https://api.github.com/users/marekzebrowski/orgs",
            "repos_url": "https://api.github.com/users/marekzebrowski/repos",
            "events_url": "https://api.github.com/users/marekzebrowski/events{/privacy}",
            "received_events_url": "https://api.github.com/users/marekzebrowski/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "where do you propose to put HttpMethodDef? It wasn't defined anywhere else, so I just put it here. Feel free to move it anywhere else or point me, where do you see it fits.\n",
        "created_at": "2013-07-11T08:12:25Z",
        "updated_at": "2013-07-18T06:27:41Z",
        "html_url": "https://github.com/spray/spray/pull/351#discussion_r5135545",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/351",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5135545"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/351#discussion_r5135545"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/351"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5135778",
        "pull_request_review_id": null,
        "id": 5135778,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU3Nzg=",
        "diff_hunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright (C) 2011-2013 spray.io\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.http\n+package parser\n+\n+import org.parboiled.scala._\n+import BasicRules._\n+import HttpHeaders._\n+import HttpMethods._\n+import ProtectedHeaderCreation.enable\n+import org.parboiled.errors.ParsingException\n+\n+/**\n+ * parser rules for CORS header that does not fit to SimpleHeaders\n+ * Spec http://www.w3.org/TR/cors/\n+ */\n+private[parser] trait CORSHeaders {\n+  this: Parser with ProtocolParameterRules with AdditionalRules \u21d2\n+\n+  def `*Access-Control-Allow-Methods` = rule {\n+    oneOrMore(HttpMethodDef, separator = ListSep) ~ EOI ~~> (`Access-Control-Allow-Methods`(_))\n+  }\n+\n+  def `*Access-Control-Allow-Headers` = rule {\n+    oneOrMore(Token, separator = ListSep) ~ EOI ~~> (`Access-Control-Allow-Headers`(_))\n+  }\n+\n+  def `*Access-Control-Request-Method` = rule {\n+    HttpMethodDef ~ EOI ~~> (`Access-Control-Request-Method`(_))\n+  }\n+\n+  def `*Access-Control-Request-Headers` = rule {\n+    oneOrMore(Token, separator = ListSep) ~ EOI ~~> (`Access-Control-Request-Headers`(_))\n+  }\n+\n+  def `*Access-Control-Allow-Origin` = rule {\n+    oneOrMore(Text) ~> (`Access-Control-Allow-Origin`(_))\n+  }\n+\n+  def `*Access-Control-Expose-Headers` = rule {\n+    oneOrMore(Token, separator = ListSep) ~~> (`Access-Control-Expose-Headers`(_))\n+  }\n+\n+  def `*Access-Control-Max-Age` = rule {\n+    oneOrMore(Digit) ~> (s \u21d2 `Access-Control-Max-Age`(s.toLong)) ~ EOI\n+  }\n+\n+  //according to http://www.w3.org/TR/cors/#access-control-allow-credentials-response-header this is case-sensitive\n+  def `*Access-Control-Allow-Credentials` = rule {\n+    (\"true\" ~ push(`Access-Control-Allow-Credentials`(true)) | \"false\" ~ push(`Access-Control-Allow-Credentials`(false))) ~ EOI\n+  }\n+\n+  def `*Origin` = rule {\n+    oneOrMore(Text) ~> { uri \u21d2 Origin(Uri.parseAbsolute(uri)) } ~ EOI\n+  }\n+\n+  def HttpMethodDef = rule {",
        "path": "spray-http/src/main/scala/spray/http/parser/CORSHeaders.scala",
        "position": 71,
        "original_position": 71,
        "commit_id": "bdf20adfccada47811526c0ac965711f08afdcb4",
        "original_commit_id": "d035675d24f78e77f3579e085fc078675dd93211",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You are right, it seems method parsing is completely folded into the request parser which can't be easily reused here:\n\nhttps://github.com/spray/spray/blob/master/spray-can/src/main/scala/spray/can/parsing/HttpRequestPartParser.scala#L45\n\nMaybe it would still make sense to provide a trait to parse common http primitives? WDYT @sirthias?\n",
        "created_at": "2013-07-11T08:30:57Z",
        "updated_at": "2013-07-18T06:27:41Z",
        "html_url": "https://github.com/spray/spray/pull/351#discussion_r5135778",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/351",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5135778"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/351#discussion_r5135778"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/351"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5135806",
        "pull_request_review_id": null,
        "id": 5135806,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU4MDY=",
        "diff_hunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright (C) 2011-2013 spray.io\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.http\n+package parser\n+\n+import org.parboiled.scala._\n+import BasicRules._\n+import HttpHeaders._\n+import HttpMethods._\n+import ProtectedHeaderCreation.enable\n+import org.parboiled.errors.ParsingException\n+\n+/**\n+ * parser rules for CORS header that does not fit to SimpleHeaders\n+ * Spec http://www.w3.org/TR/cors/\n+ */\n+private[parser] trait CORSHeaders {\n+  this: Parser with ProtocolParameterRules with AdditionalRules \u21d2\n+\n+  def `*Access-Control-Allow-Methods` = rule {\n+    oneOrMore(HttpMethodDef, separator = ListSep) ~ EOI ~~> (`Access-Control-Allow-Methods`(_))\n+  }\n+\n+  def `*Access-Control-Allow-Headers` = rule {\n+    oneOrMore(Token, separator = ListSep) ~ EOI ~~> (`Access-Control-Allow-Headers`(_))\n+  }\n+\n+  def `*Access-Control-Request-Method` = rule {\n+    HttpMethodDef ~ EOI ~~> (`Access-Control-Request-Method`(_))\n+  }\n+\n+  def `*Access-Control-Request-Headers` = rule {\n+    oneOrMore(Token, separator = ListSep) ~ EOI ~~> (`Access-Control-Request-Headers`(_))\n+  }\n+\n+  def `*Access-Control-Allow-Origin` = rule {\n+    oneOrMore(Text) ~> (`Access-Control-Allow-Origin`(_))\n+  }\n+\n+  def `*Access-Control-Expose-Headers` = rule {\n+    oneOrMore(Token, separator = ListSep) ~~> (`Access-Control-Expose-Headers`(_))",
        "path": "spray-http/src/main/scala/spray/http/parser/CORSHeaders.scala",
        "position": null,
        "original_position": 55,
        "commit_id": "bdf20adfccada47811526c0ac965711f08afdcb4",
        "original_commit_id": "d035675d24f78e77f3579e085fc078675dd93211",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "`~ EOI` ? \n",
        "created_at": "2013-07-11T08:32:38Z",
        "updated_at": "2013-07-18T06:27:41Z",
        "html_url": "https://github.com/spray/spray/pull/351#discussion_r5135806",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/351",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5135806"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/351#discussion_r5135806"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/351"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5135808",
        "pull_request_review_id": null,
        "id": 5135808,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU4MDg=",
        "diff_hunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright (C) 2011-2013 spray.io\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.http\n+package parser\n+\n+import org.parboiled.scala._\n+import BasicRules._\n+import HttpHeaders._\n+import HttpMethods._\n+import ProtectedHeaderCreation.enable\n+import org.parboiled.errors.ParsingException\n+\n+/**\n+ * parser rules for CORS header that does not fit to SimpleHeaders\n+ * Spec http://www.w3.org/TR/cors/\n+ */\n+private[parser] trait CORSHeaders {\n+  this: Parser with ProtocolParameterRules with AdditionalRules \u21d2\n+\n+  def `*Access-Control-Allow-Methods` = rule {\n+    oneOrMore(HttpMethodDef, separator = ListSep) ~ EOI ~~> (`Access-Control-Allow-Methods`(_))\n+  }\n+\n+  def `*Access-Control-Allow-Headers` = rule {\n+    oneOrMore(Token, separator = ListSep) ~ EOI ~~> (`Access-Control-Allow-Headers`(_))\n+  }\n+\n+  def `*Access-Control-Request-Method` = rule {\n+    HttpMethodDef ~ EOI ~~> (`Access-Control-Request-Method`(_))\n+  }\n+\n+  def `*Access-Control-Request-Headers` = rule {\n+    oneOrMore(Token, separator = ListSep) ~ EOI ~~> (`Access-Control-Request-Headers`(_))\n+  }\n+\n+  def `*Access-Control-Allow-Origin` = rule {\n+    oneOrMore(Text) ~> (`Access-Control-Allow-Origin`(_))",
        "path": "spray-http/src/main/scala/spray/http/parser/CORSHeaders.scala",
        "position": null,
        "original_position": 51,
        "commit_id": "bdf20adfccada47811526c0ac965711f08afdcb4",
        "original_commit_id": "d035675d24f78e77f3579e085fc078675dd93211",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "`~ EOI` ?\n",
        "created_at": "2013-07-11T08:32:50Z",
        "updated_at": "2013-07-18T06:27:41Z",
        "html_url": "https://github.com/spray/spray/pull/351#discussion_r5135808",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/351",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5135808"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/351#discussion_r5135808"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/351"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5135820",
        "pull_request_review_id": null,
        "id": 5135820,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU4MjA=",
        "diff_hunk": "@@ -101,6 +101,70 @@ object HttpHeaders {\n     protected def companion = `Accept-Language`\n   }\n \n+  object `Access-Control-Allow-Origin` extends ModeledCompanion\n+  case class `Access-Control-Allow-Origin`(origin: Uri) extends ModeledHeader {\n+    def renderValue[R <: Rendering](r: R): r.type = r ~~ origin\n+    protected def companion = `Access-Control-Allow-Origin`\n+  }\n+\n+  object `Access-Control-Expose-Headers` extends ModeledCompanion {\n+    def apply(first: String, more: String*): `Access-Control-Expose-Headers` = apply(first +: more)\n+    implicit val headersRenderer = Renderer.defaultSeqRenderer[String]\n+  }\n+  case class `Access-Control-Expose-Headers`(headers: Seq[String]) extends ModeledHeader {\n+    import `Access-Control-Expose-Headers`.headersRenderer\n+    def renderValue[R <: Rendering](r: R): r.type = r ~~ headers\n+    protected def companion = `Access-Control-Expose-Headers`\n+  }\n+\n+  object `Access-Control-Max-Age` extends ModeledCompanion\n+  case class `Access-Control-Max-Age`(deltaSeconds: Long) extends ModeledHeader {",
        "path": "spray-http/src/main/scala/spray/http/HttpHeader.scala",
        "position": 21,
        "original_position": 21,
        "commit_id": "bdf20adfccada47811526c0ac965711f08afdcb4",
        "original_commit_id": "d035675d24f78e77f3579e085fc078675dd93211",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Are there invariants for deltaSeconds? Can we check them here?\n",
        "created_at": "2013-07-11T08:33:55Z",
        "updated_at": "2013-07-18T06:27:41Z",
        "html_url": "https://github.com/spray/spray/pull/351#discussion_r5135820",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/351",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5135820"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/351#discussion_r5135820"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/351"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5136302",
        "pull_request_review_id": null,
        "id": 5136302,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzMDI=",
        "diff_hunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright (C) 2011-2013 spray.io\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.http\n+package parser\n+\n+import org.parboiled.scala._\n+import BasicRules._\n+import HttpHeaders._\n+import HttpMethods._\n+import ProtectedHeaderCreation.enable\n+import org.parboiled.errors.ParsingException\n+\n+/**\n+ * parser rules for CORS header that does not fit to SimpleHeaders\n+ * Spec http://www.w3.org/TR/cors/\n+ */\n+private[parser] trait CORSHeaders {\n+  this: Parser with ProtocolParameterRules with AdditionalRules \u21d2\n+\n+  def `*Access-Control-Allow-Methods` = rule {\n+    oneOrMore(HttpMethodDef, separator = ListSep) ~ EOI ~~> (`Access-Control-Allow-Methods`(_))\n+  }\n+\n+  def `*Access-Control-Allow-Headers` = rule {\n+    oneOrMore(Token, separator = ListSep) ~ EOI ~~> (`Access-Control-Allow-Headers`(_))\n+  }\n+\n+  def `*Access-Control-Request-Method` = rule {\n+    HttpMethodDef ~ EOI ~~> (`Access-Control-Request-Method`(_))\n+  }\n+\n+  def `*Access-Control-Request-Headers` = rule {\n+    oneOrMore(Token, separator = ListSep) ~ EOI ~~> (`Access-Control-Request-Headers`(_))\n+  }\n+\n+  def `*Access-Control-Allow-Origin` = rule {\n+    oneOrMore(Text) ~> (`Access-Control-Allow-Origin`(_))\n+  }\n+\n+  def `*Access-Control-Expose-Headers` = rule {\n+    oneOrMore(Token, separator = ListSep) ~~> (`Access-Control-Expose-Headers`(_))\n+  }\n+\n+  def `*Access-Control-Max-Age` = rule {\n+    oneOrMore(Digit) ~> (s \u21d2 `Access-Control-Max-Age`(s.toLong)) ~ EOI\n+  }\n+\n+  //according to http://www.w3.org/TR/cors/#access-control-allow-credentials-response-header this is case-sensitive\n+  def `*Access-Control-Allow-Credentials` = rule {\n+    (\"true\" ~ push(`Access-Control-Allow-Credentials`(true)) | \"false\" ~ push(`Access-Control-Allow-Credentials`(false))) ~ EOI\n+  }\n+\n+  def `*Origin` = rule {\n+    oneOrMore(Text) ~> { uri \u21d2 Origin(Uri.parseAbsolute(uri)) } ~ EOI\n+  }\n+\n+  def HttpMethodDef = rule {",
        "path": "spray-http/src/main/scala/spray/http/parser/CORSHeaders.scala",
        "position": 71,
        "original_position": 71,
        "commit_id": "bdf20adfccada47811526c0ac965711f08afdcb4",
        "original_commit_id": "d035675d24f78e77f3579e085fc078675dd93211",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Generally this is a good idea, however, method parsing in the spray-can request parser is very much optimized for speed and reads directly from a `CompactByteString` rather than a `String`. We might be able to unify this better once parboiled2 is available but for the time being I guess it's ok the way the patch currently does it.\n",
        "created_at": "2013-07-11T08:56:51Z",
        "updated_at": "2013-07-18T06:27:41Z",
        "html_url": "https://github.com/spray/spray/pull/351#discussion_r5136302",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/351",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5136302"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/351#discussion_r5136302"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/351"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5136339",
        "pull_request_review_id": null,
        "id": 5136339,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzMzk=",
        "diff_hunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright (C) 2011-2013 spray.io\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.http\n+package parser\n+\n+import org.parboiled.scala._\n+import BasicRules._\n+import HttpHeaders._\n+import HttpMethods._\n+import ProtectedHeaderCreation.enable\n+import org.parboiled.errors.ParsingException\n+\n+/**\n+ * parser rules for CORS header that does not fit to SimpleHeaders\n+ * Spec http://www.w3.org/TR/cors/\n+ */\n+private[parser] trait CORSHeaders {\n+  this: Parser with ProtocolParameterRules with AdditionalRules \u21d2\n+\n+  def `*Access-Control-Allow-Methods` = rule {\n+    oneOrMore(HttpMethodDef, separator = ListSep) ~ EOI ~~> (`Access-Control-Allow-Methods`(_))\n+  }\n+\n+  def `*Access-Control-Allow-Headers` = rule {\n+    oneOrMore(Token, separator = ListSep) ~ EOI ~~> (`Access-Control-Allow-Headers`(_))\n+  }\n+\n+  def `*Access-Control-Request-Method` = rule {\n+    HttpMethodDef ~ EOI ~~> (`Access-Control-Request-Method`(_))\n+  }\n+\n+  def `*Access-Control-Request-Headers` = rule {\n+    oneOrMore(Token, separator = ListSep) ~ EOI ~~> (`Access-Control-Request-Headers`(_))\n+  }\n+\n+  def `*Access-Control-Allow-Origin` = rule {\n+    oneOrMore(Text) ~> (`Access-Control-Allow-Origin`(_))\n+  }\n+\n+  def `*Access-Control-Expose-Headers` = rule {\n+    oneOrMore(Token, separator = ListSep) ~~> (`Access-Control-Expose-Headers`(_))",
        "path": "spray-http/src/main/scala/spray/http/parser/CORSHeaders.scala",
        "position": null,
        "original_position": 55,
        "commit_id": "bdf20adfccada47811526c0ac965711f08afdcb4",
        "original_commit_id": "d035675d24f78e77f3579e085fc078675dd93211",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yes, good catch!\n",
        "created_at": "2013-07-11T08:59:07Z",
        "updated_at": "2013-07-18T06:27:41Z",
        "html_url": "https://github.com/spray/spray/pull/351#discussion_r5136339",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/351",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5136339"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/351#discussion_r5136339"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/351"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5136341",
        "pull_request_review_id": null,
        "id": 5136341,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzNDE=",
        "diff_hunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright (C) 2011-2013 spray.io\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.http\n+package parser\n+\n+import org.parboiled.scala._\n+import BasicRules._\n+import HttpHeaders._\n+import HttpMethods._\n+import ProtectedHeaderCreation.enable\n+import org.parboiled.errors.ParsingException\n+\n+/**\n+ * parser rules for CORS header that does not fit to SimpleHeaders\n+ * Spec http://www.w3.org/TR/cors/\n+ */\n+private[parser] trait CORSHeaders {\n+  this: Parser with ProtocolParameterRules with AdditionalRules \u21d2\n+\n+  def `*Access-Control-Allow-Methods` = rule {\n+    oneOrMore(HttpMethodDef, separator = ListSep) ~ EOI ~~> (`Access-Control-Allow-Methods`(_))\n+  }\n+\n+  def `*Access-Control-Allow-Headers` = rule {\n+    oneOrMore(Token, separator = ListSep) ~ EOI ~~> (`Access-Control-Allow-Headers`(_))\n+  }\n+\n+  def `*Access-Control-Request-Method` = rule {\n+    HttpMethodDef ~ EOI ~~> (`Access-Control-Request-Method`(_))\n+  }\n+\n+  def `*Access-Control-Request-Headers` = rule {\n+    oneOrMore(Token, separator = ListSep) ~ EOI ~~> (`Access-Control-Request-Headers`(_))\n+  }\n+\n+  def `*Access-Control-Allow-Origin` = rule {\n+    oneOrMore(Text) ~> (`Access-Control-Allow-Origin`(_))",
        "path": "spray-http/src/main/scala/spray/http/parser/CORSHeaders.scala",
        "position": null,
        "original_position": 51,
        "commit_id": "bdf20adfccada47811526c0ac965711f08afdcb4",
        "original_commit_id": "d035675d24f78e77f3579e085fc078675dd93211",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Dito\n",
        "created_at": "2013-07-11T08:59:11Z",
        "updated_at": "2013-07-18T06:27:41Z",
        "html_url": "https://github.com/spray/spray/pull/351#discussion_r5136341",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/351",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5136341"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/351#discussion_r5136341"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/351"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5214088",
        "pull_request_review_id": null,
        "id": 5214088,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQwODg=",
        "diff_hunk": "@@ -101,6 +101,70 @@ object HttpHeaders {\n     protected def companion = `Accept-Language`\n   }\n \n+  object `Access-Control-Allow-Origin` extends ModeledCompanion\n+  case class `Access-Control-Allow-Origin`(origin: Uri) extends ModeledHeader {\n+    def renderValue[R <: Rendering](r: R): r.type = r ~~ origin\n+    protected def companion = `Access-Control-Allow-Origin`\n+  }\n+\n+  object `Access-Control-Expose-Headers` extends ModeledCompanion {\n+    def apply(first: String, more: String*): `Access-Control-Expose-Headers` = apply(first +: more)\n+    implicit val headersRenderer = Renderer.defaultSeqRenderer[String]\n+  }\n+  case class `Access-Control-Expose-Headers`(headers: Seq[String]) extends ModeledHeader {\n+    import `Access-Control-Expose-Headers`.headersRenderer\n+    def renderValue[R <: Rendering](r: R): r.type = r ~~ headers\n+    protected def companion = `Access-Control-Expose-Headers`\n+  }\n+\n+  object `Access-Control-Max-Age` extends ModeledCompanion\n+  case class `Access-Control-Max-Age`(deltaSeconds: Long) extends ModeledHeader {",
        "path": "spray-http/src/main/scala/spray/http/HttpHeader.scala",
        "position": 21,
        "original_position": 21,
        "commit_id": "bdf20adfccada47811526c0ac965711f08afdcb4",
        "original_commit_id": "d035675d24f78e77f3579e085fc078675dd93211",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think we should add a `require(deltaSeconds > 0, \"deltaSeconds must be > 0\")` here, no?\n",
        "created_at": "2013-07-16T12:35:24Z",
        "updated_at": "2013-07-18T06:27:41Z",
        "html_url": "https://github.com/spray/spray/pull/351#discussion_r5214088",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/351",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5214088"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/351#discussion_r5214088"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/351"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5261572",
        "pull_request_review_id": null,
        "id": 5261572,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE1NzI=",
        "diff_hunk": "@@ -101,6 +101,71 @@ object HttpHeaders {\n     protected def companion = `Accept-Language`\n   }\n \n+  object `Access-Control-Allow-Origin` extends ModeledCompanion\n+  case class `Access-Control-Allow-Origin`(origin: Uri) extends ModeledHeader {\n+    def renderValue[R <: Rendering](r: R): r.type = r ~~ origin\n+    protected def companion = `Access-Control-Allow-Origin`\n+  }\n+\n+  object `Access-Control-Expose-Headers` extends ModeledCompanion {\n+    def apply(first: String, more: String*): `Access-Control-Expose-Headers` = apply(first +: more)\n+    implicit val headersRenderer = Renderer.defaultSeqRenderer[String]\n+  }\n+  case class `Access-Control-Expose-Headers`(headers: Seq[String]) extends ModeledHeader {\n+    import `Access-Control-Expose-Headers`.headersRenderer\n+    def renderValue[R <: Rendering](r: R): r.type = r ~~ headers\n+    protected def companion = `Access-Control-Expose-Headers`\n+  }\n+\n+  object `Access-Control-Max-Age` extends ModeledCompanion\n+  case class `Access-Control-Max-Age`(deltaSeconds: Long) extends ModeledHeader {\n+    require(deltaSeconds >= 0, \"deltaSeconds must be >= 0\")",
        "path": "spray-http/src/main/scala/spray/http/HttpHeader.scala",
        "position": 22,
        "original_position": 22,
        "commit_id": "bdf20adfccada47811526c0ac965711f08afdcb4",
        "original_commit_id": "bdf20adfccada47811526c0ac965711f08afdcb4",
        "user": {
            "login": "marekzebrowski",
            "id": 689964,
            "node_id": "MDQ6VXNlcjY4OTk2NA==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/689964?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/marekzebrowski",
            "html_url": "https://github.com/marekzebrowski",
            "followers_url": "https://api.github.com/users/marekzebrowski/followers",
            "following_url": "https://api.github.com/users/marekzebrowski/following{/other_user}",
            "gists_url": "https://api.github.com/users/marekzebrowski/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/marekzebrowski/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/marekzebrowski/subscriptions",
            "organizations_url": "https://api.github.com/users/marekzebrowski/orgs",
            "repos_url": "https://api.github.com/users/marekzebrowski/repos",
            "events_url": "https://api.github.com/users/marekzebrowski/events{/privacy}",
            "received_events_url": "https://api.github.com/users/marekzebrowski/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Done. >= is more apropriate than >.\n",
        "created_at": "2013-07-18T06:31:58Z",
        "updated_at": "2013-07-18T06:31:58Z",
        "html_url": "https://github.com/spray/spray/pull/351#discussion_r5261572",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/351",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5261572"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/351#discussion_r5261572"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/351"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5262035",
        "pull_request_review_id": null,
        "id": 5262035,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjIwMzU=",
        "diff_hunk": "@@ -101,6 +101,71 @@ object HttpHeaders {\n     protected def companion = `Accept-Language`\n   }\n \n+  object `Access-Control-Allow-Origin` extends ModeledCompanion\n+  case class `Access-Control-Allow-Origin`(origin: Uri) extends ModeledHeader {\n+    def renderValue[R <: Rendering](r: R): r.type = r ~~ origin\n+    protected def companion = `Access-Control-Allow-Origin`\n+  }\n+\n+  object `Access-Control-Expose-Headers` extends ModeledCompanion {\n+    def apply(first: String, more: String*): `Access-Control-Expose-Headers` = apply(first +: more)\n+    implicit val headersRenderer = Renderer.defaultSeqRenderer[String]\n+  }\n+  case class `Access-Control-Expose-Headers`(headers: Seq[String]) extends ModeledHeader {\n+    import `Access-Control-Expose-Headers`.headersRenderer\n+    def renderValue[R <: Rendering](r: R): r.type = r ~~ headers\n+    protected def companion = `Access-Control-Expose-Headers`\n+  }\n+\n+  object `Access-Control-Max-Age` extends ModeledCompanion\n+  case class `Access-Control-Max-Age`(deltaSeconds: Long) extends ModeledHeader {\n+    require(deltaSeconds >= 0, \"deltaSeconds must be >= 0\")",
        "path": "spray-http/src/main/scala/spray/http/HttpHeader.scala",
        "position": 22,
        "original_position": 22,
        "commit_id": "bdf20adfccada47811526c0ac965711f08afdcb4",
        "original_commit_id": "bdf20adfccada47811526c0ac965711f08afdcb4",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yes, right. That's also what the \"delta-seconds\" BNF in RFC2616 says.\n",
        "created_at": "2013-07-18T07:10:56Z",
        "updated_at": "2013-07-18T07:10:56Z",
        "html_url": "https://github.com/spray/spray/pull/351#discussion_r5262035",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/351",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5262035"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/351#discussion_r5262035"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/351"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5262421",
        "pull_request_review_id": null,
        "id": 5262421,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI0MjE=",
        "diff_hunk": "@@ -0,0 +1,77 @@\n+package spray.examples\n+\n+import scala.concurrent.duration._\n+import akka.actor.ActorSystem\n+import spray.routing.SimpleRoutingApp\n+import spray.http.MediaTypes._\n+import spray.routing.authentication.OAuth\n+import scala.concurrent.ExecutionContext\n+import spray.http._\n+import spray.util._\n+\n+object Main extends App with SimpleRoutingApp {\n+\n+\n+  implicit val system = ActorSystem(\"oidc-routing-app\")\n+  implicit val log = LoggingContext.fromActorSystem(system)\n+\n+  // Configuration\n+\n+  // NOTE: You need a host that is accessible for external servers\n+  val appHomeUrl = \"http://yourhost.domain.com\"\n+  val callbackRoute = \"oauthcallback\"\n+  val oauthCallbackUrl = Uri(appHomeUrl + \"/\" + callbackRoute)\n+\n+  import ExecutionContext.Implicits.global\n+\n+  //val oauthComm = new GoogleAuthentication(oauthCallbackUrl)\n+  // Try the other sample by commenting the Google one and enabling the Facebook one.\n+  // NOTE: Both implementations are samples only. A starting point for embedding it in your infrastructure\n+  val oauthComm = new FacebookAuthentication(oauthCallbackUrl)\n+\n+\n+  // use \"localhost\" for local binding only, as this uses a callback of an authorization server\n+  // you probably need to bind it to a port that's available outside this host.\n+  startServer(\"0.0.0.0\", port = 8080) {\n+    get {\n+      path(\"\") {\n+        redirect(\"/hello\", StatusCodes.Found)\n+      } ~\n+      path(\"hello\") {\n+        respondWithMediaType(`text/html`) { // XML is marshalled to `text/xml` by default, so we simply override here",
        "path": "examples/spray-routing/openid-connect-routing-app/src/main/scala/spray/examples/Main.scala",
        "position": 41,
        "original_position": 41,
        "commit_id": "404cef1c156dbce0d155d4f7f2bfa3f2d279d374",
        "original_commit_id": "8f8a360600102e0757aabd152112fa91a36908e9",
        "user": {
            "login": "2beaucoup",
            "id": 243903,
            "node_id": "MDQ6VXNlcjI0MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/243903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/2beaucoup",
            "html_url": "https://github.com/2beaucoup",
            "followers_url": "https://api.github.com/users/2beaucoup/followers",
            "following_url": "https://api.github.com/users/2beaucoup/following{/other_user}",
            "gists_url": "https://api.github.com/users/2beaucoup/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/2beaucoup/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/2beaucoup/subscriptions",
            "organizations_url": "https://api.github.com/users/2beaucoup/orgs",
            "repos_url": "https://api.github.com/users/2beaucoup/repos",
            "events_url": "https://api.github.com/users/2beaucoup/events{/privacy}",
            "received_events_url": "https://api.github.com/users/2beaucoup/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You are right. (I just tried myself). Although [Marshalling](http://spray.io/documentation/1.0-M8.1/spray-httpx/marshalling/) mentions content negotiation, it seems to be driven by the server instead of the client (see [Marshaller](https://github.com/spray/spray/blob/master/spray-httpx/src/main/scala/spray/httpx/marshalling/Marshaller.scala#L42-L45)).\n\n@sirthias Is this intended behaviour?\n",
        "created_at": "2013-07-18T07:46:01Z",
        "updated_at": "2013-07-18T07:46:01Z",
        "html_url": "https://github.com/spray/spray/pull/372#discussion_r5262421",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/372",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5262421"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/372#discussion_r5262421"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/372"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5262650",
        "pull_request_review_id": null,
        "id": 5262650,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI2NTA=",
        "diff_hunk": "@@ -0,0 +1,77 @@\n+package spray.examples\n+\n+import scala.concurrent.duration._\n+import akka.actor.ActorSystem\n+import spray.routing.SimpleRoutingApp\n+import spray.http.MediaTypes._\n+import spray.routing.authentication.OAuth\n+import scala.concurrent.ExecutionContext\n+import spray.http._\n+import spray.util._\n+\n+object Main extends App with SimpleRoutingApp {\n+\n+\n+  implicit val system = ActorSystem(\"oidc-routing-app\")\n+  implicit val log = LoggingContext.fromActorSystem(system)\n+\n+  // Configuration\n+\n+  // NOTE: You need a host that is accessible for external servers\n+  val appHomeUrl = \"http://yourhost.domain.com\"\n+  val callbackRoute = \"oauthcallback\"\n+  val oauthCallbackUrl = Uri(appHomeUrl + \"/\" + callbackRoute)\n+\n+  import ExecutionContext.Implicits.global\n+\n+  //val oauthComm = new GoogleAuthentication(oauthCallbackUrl)\n+  // Try the other sample by commenting the Google one and enabling the Facebook one.\n+  // NOTE: Both implementations are samples only. A starting point for embedding it in your infrastructure\n+  val oauthComm = new FacebookAuthentication(oauthCallbackUrl)\n+\n+\n+  // use \"localhost\" for local binding only, as this uses a callback of an authorization server\n+  // you probably need to bind it to a port that's available outside this host.\n+  startServer(\"0.0.0.0\", port = 8080) {\n+    get {\n+      path(\"\") {\n+        redirect(\"/hello\", StatusCodes.Found)\n+      } ~\n+      path(\"hello\") {\n+        respondWithMediaType(`text/html`) { // XML is marshalled to `text/xml` by default, so we simply override here",
        "path": "examples/spray-routing/openid-connect-routing-app/src/main/scala/spray/examples/Main.scala",
        "position": 41,
        "original_position": 41,
        "commit_id": "404cef1c156dbce0d155d4f7f2bfa3f2d279d374",
        "original_commit_id": "8f8a360600102e0757aabd152112fa91a36908e9",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Content negotiation is based on the `Accept*` headers sent by the client and the preference that the server-side marshaller attaches to the different Content-Types within the boundaries of what the client accepts.\nIf the client is a browser it will probably accept anything (e.g. this is the `Accept` header my Chrome instance sends: `Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8`). In these cases spray chooses the first content-type listed by the marshaller, which is `text/xml` in this case. The `respondWithMediaType` directive overrides this. (see also: https://github.com/spray/spray/blob/master/spray-routing/src/main/scala/spray/routing/directives/RespondWithDirectives.scala#L78-L86)\n\nAlso note that quality values are not yet supported: https://github.com/spray/spray/issues/167\n",
        "created_at": "2013-07-18T08:00:39Z",
        "updated_at": "2013-07-18T08:00:39Z",
        "html_url": "https://github.com/spray/spray/pull/372#discussion_r5262650",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/372",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5262650"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/372#discussion_r5262650"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/372"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5263045",
        "pull_request_review_id": null,
        "id": 5263045,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMwNDU=",
        "diff_hunk": "@@ -0,0 +1,77 @@\n+package spray.examples\n+\n+import scala.concurrent.duration._\n+import akka.actor.ActorSystem\n+import spray.routing.SimpleRoutingApp\n+import spray.http.MediaTypes._\n+import spray.routing.authentication.OAuth\n+import scala.concurrent.ExecutionContext\n+import spray.http._\n+import spray.util._\n+\n+object Main extends App with SimpleRoutingApp {\n+\n+\n+  implicit val system = ActorSystem(\"oidc-routing-app\")\n+  implicit val log = LoggingContext.fromActorSystem(system)\n+\n+  // Configuration\n+\n+  // NOTE: You need a host that is accessible for external servers\n+  val appHomeUrl = \"http://yourhost.domain.com\"\n+  val callbackRoute = \"oauthcallback\"\n+  val oauthCallbackUrl = Uri(appHomeUrl + \"/\" + callbackRoute)\n+\n+  import ExecutionContext.Implicits.global\n+\n+  //val oauthComm = new GoogleAuthentication(oauthCallbackUrl)\n+  // Try the other sample by commenting the Google one and enabling the Facebook one.\n+  // NOTE: Both implementations are samples only. A starting point for embedding it in your infrastructure\n+  val oauthComm = new FacebookAuthentication(oauthCallbackUrl)\n+\n+\n+  // use \"localhost\" for local binding only, as this uses a callback of an authorization server\n+  // you probably need to bind it to a port that's available outside this host.\n+  startServer(\"0.0.0.0\", port = 8080) {\n+    get {\n+      path(\"\") {\n+        redirect(\"/hello\", StatusCodes.Found)\n+      } ~\n+      path(\"hello\") {\n+        respondWithMediaType(`text/html`) { // XML is marshalled to `text/xml` by default, so we simply override here",
        "path": "examples/spray-routing/openid-connect-routing-app/src/main/scala/spray/examples/Main.scala",
        "position": 41,
        "original_position": 41,
        "commit_id": "404cef1c156dbce0d155d4f7f2bfa3f2d279d374",
        "original_commit_id": "8f8a360600102e0757aabd152112fa91a36908e9",
        "user": {
            "login": "2beaucoup",
            "id": 243903,
            "node_id": "MDQ6VXNlcjI0MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/243903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/2beaucoup",
            "html_url": "https://github.com/2beaucoup",
            "followers_url": "https://api.github.com/users/2beaucoup/followers",
            "following_url": "https://api.github.com/users/2beaucoup/following{/other_user}",
            "gists_url": "https://api.github.com/users/2beaucoup/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/2beaucoup/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/2beaucoup/subscriptions",
            "organizations_url": "https://api.github.com/users/2beaucoup/orgs",
            "repos_url": "https://api.github.com/users/2beaucoup/repos",
            "events_url": "https://api.github.com/users/2beaucoup/events{/privacy}",
            "received_events_url": "https://api.github.com/users/2beaucoup/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I had the misconception that the order of the Accept types was also driving the negotiation procees. After reading [the Spec](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1) again I learned that quality values are the only way to express preferences by the client. So for now `respondWithMediaType` ist necessary.\n\nThx again for the clarifications!\n",
        "created_at": "2013-07-18T08:27:19Z",
        "updated_at": "2013-07-18T08:27:19Z",
        "html_url": "https://github.com/spray/spray/pull/372#discussion_r5263045",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/372",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5263045"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/372#discussion_r5263045"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/372"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5263271",
        "pull_request_review_id": null,
        "id": 5263271,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMyNzE=",
        "diff_hunk": "@@ -0,0 +1,77 @@\n+package spray.examples\n+\n+import scala.concurrent.duration._\n+import akka.actor.ActorSystem\n+import spray.routing.SimpleRoutingApp\n+import spray.http.MediaTypes._\n+import spray.routing.authentication.OAuth\n+import scala.concurrent.ExecutionContext\n+import spray.http._\n+import spray.util._\n+\n+object Main extends App with SimpleRoutingApp {\n+\n+\n+  implicit val system = ActorSystem(\"oidc-routing-app\")\n+  implicit val log = LoggingContext.fromActorSystem(system)\n+\n+  // Configuration\n+\n+  // NOTE: You need a host that is accessible for external servers\n+  val appHomeUrl = \"http://yourhost.domain.com\"\n+  val callbackRoute = \"oauthcallback\"\n+  val oauthCallbackUrl = Uri(appHomeUrl + \"/\" + callbackRoute)\n+\n+  import ExecutionContext.Implicits.global\n+\n+  //val oauthComm = new GoogleAuthentication(oauthCallbackUrl)\n+  // Try the other sample by commenting the Google one and enabling the Facebook one.\n+  // NOTE: Both implementations are samples only. A starting point for embedding it in your infrastructure\n+  val oauthComm = new FacebookAuthentication(oauthCallbackUrl)\n+\n+\n+  // use \"localhost\" for local binding only, as this uses a callback of an authorization server\n+  // you probably need to bind it to a port that's available outside this host.\n+  startServer(\"0.0.0.0\", port = 8080) {\n+    get {\n+      path(\"\") {\n+        redirect(\"/hello\", StatusCodes.Found)\n+      } ~\n+      path(\"hello\") {\n+        respondWithMediaType(`text/html`) { // XML is marshalled to `text/xml` by default, so we simply override here",
        "path": "examples/spray-routing/openid-connect-routing-app/src/main/scala/spray/examples/Main.scala",
        "position": 41,
        "original_position": 41,
        "commit_id": "404cef1c156dbce0d155d4f7f2bfa3f2d279d374",
        "original_commit_id": "8f8a360600102e0757aabd152112fa91a36908e9",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "No problem. Maybe we should prioritze #167 higher. Without having checked deeper it might be that it's actually not that hard to implement. Sorting the accepted media-types and testing them in order against the marshaller might be all that is required...\n",
        "created_at": "2013-07-18T08:41:46Z",
        "updated_at": "2013-07-18T08:41:46Z",
        "html_url": "https://github.com/spray/spray/pull/372#discussion_r5263271",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/372",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5263271"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/372#discussion_r5263271"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/372"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5216995",
        "pull_request_review_id": null,
        "id": 5216995,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY5OTU=",
        "diff_hunk": "@@ -116,9 +116,11 @@ case class UnacceptedResponseEncodingRejection(supported: HttpEncoding) extends\n \n /**\n  * Rejection created by the 'authenticate' directive.\n- * Signals that the request was rejected because the user could not be authenticated.\n+ * Signals that the request was rejected because the user could not be authenticated, either\n+ * because the `Authorization` header was not supplied or the supplied credentials are invalid.\n  */\n-case class AuthenticationFailedRejection(realm: String) extends Rejection\n+case class AuthenticationFailedRejection(authHeaderPresent: Boolean, scheme: String, realm: String,",
        "path": "spray-routing/src/main/scala/spray/routing/Rejection.scala",
        "position": null,
        "original_position": 9,
        "commit_id": "034779de9eff97bd8e0cceb717f07d12f4d6a780",
        "original_commit_id": "1cba29a6e93f5cba9b33026afcc362748e3fca02",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Could we have a bit more documentation for the parameters here? With the merge of the two rejections (which I agree to) I now find it a bit difficult to understand why this class has those parameters and what they mean. (This is not your fault btw, you just merged but we could now improve things)\n\nIs there a better name for `authHeaderPresent`? Or maybe an enum instead to distinguish CredentialsMissing and CredentialsRejected more easily?\n\nAlso, it is hard to understand why `params` are included in this rejection and how the `params` in the rejection, in `HttpChallenge`, in `HttpCredentials`, and in `HttpAuthenticator` are related in detail. If I understand the RejectionHandler code correctly, the `HttpAuthenticator` is asked to extract (or generate?) `params` from the context at the time authentication fails and the rejection is generated. E.g. if one would implement digest authentication the `params` map would already contain the new nonce for the next request and not the one that failed the request.\n\nSo, now the rejection seems to carry two bits of information: 1) what failed and how (credentials missing or rejected) and 2) partial information on how to go on (i.e. by adding a `WWW-Authenticate` header appropriately parameterized). Couldn't we make the rejection a bit more general by changing it's definition to be the rejection for all kinds of authentication failures which would result in a 401 status code + some added headers (or even some arbitrary change of the response) ?\n\n``` scala\nsealed trait AuthenticationFailureCause\ncase object CredentialsMissing extends AuthenticationFailureCause\ncase object CredentialsRejected extends AuthenticationFailureCause\ncase class AuthenticationFailedRejection(cause: AuthenticationFailureCause, addChallengeToResponse: HttpResponse => HttpResponse)\n```\n\nor maybe better:\n\n``` scala\ncase class AuthenticationFailedRejection(cause: AuthenticationFailureCause, authenticator: HttpAuthenticator)\n```\n\nand then use a new method in the authenticator to generate the next challenge.\n\nWDYT?\n",
        "created_at": "2013-07-16T14:35:27Z",
        "updated_at": "2013-07-18T13:25:43Z",
        "html_url": "https://github.com/spray/spray/pull/358#discussion_r5216995",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/358",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5216995"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/358#discussion_r5216995"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/358"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5238048",
        "pull_request_review_id": null,
        "id": 5238048,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzgwNDg=",
        "diff_hunk": "@@ -116,9 +116,11 @@ case class UnacceptedResponseEncodingRejection(supported: HttpEncoding) extends\n \n /**\n  * Rejection created by the 'authenticate' directive.\n- * Signals that the request was rejected because the user could not be authenticated.\n+ * Signals that the request was rejected because the user could not be authenticated, either\n+ * because the `Authorization` header was not supplied or the supplied credentials are invalid.\n  */\n-case class AuthenticationFailedRejection(realm: String) extends Rejection\n+case class AuthenticationFailedRejection(authHeaderPresent: Boolean, scheme: String, realm: String,",
        "path": "spray-routing/src/main/scala/spray/routing/Rejection.scala",
        "position": null,
        "original_position": 9,
        "commit_id": "034779de9eff97bd8e0cceb717f07d12f4d6a780",
        "original_commit_id": "1cba29a6e93f5cba9b33026afcc362748e3fca02",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "> case class AuthenticationFailedRejection(cause: AuthenticationFailureCause, authenticator: HttpAuthenticator)\n\nYes, that is much better.\nLet's do it that way!\nSo we add a `def addChallengeToResponse(response: HttpResponse): HttpResponse` method to `HttpAuthenticator` and have the default `RejectionHandler` call it.\n",
        "created_at": "2013-07-17T09:50:39Z",
        "updated_at": "2013-07-18T13:25:43Z",
        "html_url": "https://github.com/spray/spray/pull/358#discussion_r5238048",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/358",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5238048"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/358#discussion_r5238048"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/358"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5239209",
        "pull_request_review_id": null,
        "id": 5239209,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzkyMDk=",
        "diff_hunk": "@@ -116,9 +116,11 @@ case class UnacceptedResponseEncodingRejection(supported: HttpEncoding) extends\n \n /**\n  * Rejection created by the 'authenticate' directive.\n- * Signals that the request was rejected because the user could not be authenticated.\n+ * Signals that the request was rejected because the user could not be authenticated, either\n+ * because the `Authorization` header was not supplied or the supplied credentials are invalid.\n  */\n-case class AuthenticationFailedRejection(realm: String) extends Rejection\n+case class AuthenticationFailedRejection(authHeaderPresent: Boolean, scheme: String, realm: String,",
        "path": "spray-routing/src/main/scala/spray/routing/Rejection.scala",
        "position": null,
        "original_position": 9,
        "commit_id": "034779de9eff97bd8e0cceb717f07d12f4d6a780",
        "original_commit_id": "1cba29a6e93f5cba9b33026afcc362748e3fca02",
        "user": {
            "login": "markvandertol",
            "id": 2835719,
            "node_id": "MDQ6VXNlcjI4MzU3MTk=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/2835719?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/markvandertol",
            "html_url": "https://github.com/markvandertol",
            "followers_url": "https://api.github.com/users/markvandertol/followers",
            "following_url": "https://api.github.com/users/markvandertol/following{/other_user}",
            "gists_url": "https://api.github.com/users/markvandertol/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/markvandertol/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/markvandertol/subscriptions",
            "organizations_url": "https://api.github.com/users/markvandertol/orgs",
            "repos_url": "https://api.github.com/users/markvandertol/repos",
            "events_url": "https://api.github.com/users/markvandertol/events{/privacy}",
            "received_events_url": "https://api.github.com/users/markvandertol/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "That is indeed a cleaner way to solve this. I shall have a look at this today.\n",
        "created_at": "2013-07-17T10:56:15Z",
        "updated_at": "2013-07-18T13:25:43Z",
        "html_url": "https://github.com/spray/spray/pull/358#discussion_r5239209",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/358",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5239209"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/358#discussion_r5239209"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/358"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5239844",
        "pull_request_review_id": null,
        "id": 5239844,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk4NDQ=",
        "diff_hunk": "@@ -116,9 +116,11 @@ case class UnacceptedResponseEncodingRejection(supported: HttpEncoding) extends\n \n /**\n  * Rejection created by the 'authenticate' directive.\n- * Signals that the request was rejected because the user could not be authenticated.\n+ * Signals that the request was rejected because the user could not be authenticated, either\n+ * because the `Authorization` header was not supplied or the supplied credentials are invalid.\n  */\n-case class AuthenticationFailedRejection(realm: String) extends Rejection\n+case class AuthenticationFailedRejection(authHeaderPresent: Boolean, scheme: String, realm: String,",
        "path": "spray-routing/src/main/scala/spray/routing/Rejection.scala",
        "position": null,
        "original_position": 9,
        "commit_id": "034779de9eff97bd8e0cceb717f07d12f4d6a780",
        "original_commit_id": "1cba29a6e93f5cba9b33026afcc362748e3fca02",
        "user": {
            "login": "markvandertol",
            "id": 2835719,
            "node_id": "MDQ6VXNlcjI4MzU3MTk=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/2835719?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/markvandertol",
            "html_url": "https://github.com/markvandertol",
            "followers_url": "https://api.github.com/users/markvandertol/followers",
            "following_url": "https://api.github.com/users/markvandertol/following{/other_user}",
            "gists_url": "https://api.github.com/users/markvandertol/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/markvandertol/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/markvandertol/subscriptions",
            "organizations_url": "https://api.github.com/users/markvandertol/orgs",
            "repos_url": "https://api.github.com/users/markvandertol/repos",
            "events_url": "https://api.github.com/users/markvandertol/events{/privacy}",
            "received_events_url": "https://api.github.com/users/markvandertol/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "On second thought, instead of adding `def addChallengeToResponse(response: HttpResponse): HttpResponse` to `HttpAuthenticator`, I think it would be more consistent to add a method `def getChallengeHeaders: List[HttpHeader]` to `HttpAuthenticator`. This because, in `RejectionHandler` all rejections use the `CompletionMagnet` to create the `HttpResponse` object behind the scenes. When you have a method that transforms that response, it is no longer possible to use the `CompletionMagnet` to create the response object. To prevent the duplication of the (small amount of) logic required to create the `HttpResponse`, just asking the `HttpAuthenticator` for the headers seems better. An authenticator shouldn't have to do more than add some headers to the request, so just returning these headers would be enough.\n",
        "created_at": "2013-07-17T11:40:46Z",
        "updated_at": "2013-07-18T13:25:43Z",
        "html_url": "https://github.com/spray/spray/pull/358#discussion_r5239844",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/358",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5239844"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/358#discussion_r5239844"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/358"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5239976",
        "pull_request_review_id": null,
        "id": 5239976,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk5NzY=",
        "diff_hunk": "@@ -116,9 +116,11 @@ case class UnacceptedResponseEncodingRejection(supported: HttpEncoding) extends\n \n /**\n  * Rejection created by the 'authenticate' directive.\n- * Signals that the request was rejected because the user could not be authenticated.\n+ * Signals that the request was rejected because the user could not be authenticated, either\n+ * because the `Authorization` header was not supplied or the supplied credentials are invalid.\n  */\n-case class AuthenticationFailedRejection(realm: String) extends Rejection\n+case class AuthenticationFailedRejection(authHeaderPresent: Boolean, scheme: String, realm: String,",
        "path": "spray-routing/src/main/scala/spray/routing/Rejection.scala",
        "position": null,
        "original_position": 9,
        "commit_id": "034779de9eff97bd8e0cceb717f07d12f4d6a780",
        "original_commit_id": "1cba29a6e93f5cba9b33026afcc362748e3fca02",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ok, Mark, point taken.\nHow about we add a `request: HttpRequest` parameter to your proposed `getChallengeHeaders` method?\nThis way we enable challenges that somehow depend on request properties...\n",
        "created_at": "2013-07-17T11:48:53Z",
        "updated_at": "2013-07-18T13:25:43Z",
        "html_url": "https://github.com/spray/spray/pull/358#discussion_r5239976",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/358",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5239976"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/358#discussion_r5239976"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/358"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5240481",
        "pull_request_review_id": null,
        "id": 5240481,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA0ODE=",
        "diff_hunk": "@@ -116,9 +116,11 @@ case class UnacceptedResponseEncodingRejection(supported: HttpEncoding) extends\n \n /**\n  * Rejection created by the 'authenticate' directive.\n- * Signals that the request was rejected because the user could not be authenticated.\n+ * Signals that the request was rejected because the user could not be authenticated, either\n+ * because the `Authorization` header was not supplied or the supplied credentials are invalid.\n  */\n-case class AuthenticationFailedRejection(realm: String) extends Rejection\n+case class AuthenticationFailedRejection(authHeaderPresent: Boolean, scheme: String, realm: String,",
        "path": "spray-routing/src/main/scala/spray/routing/Rejection.scala",
        "position": null,
        "original_position": 9,
        "commit_id": "034779de9eff97bd8e0cceb717f07d12f4d6a780",
        "original_commit_id": "1cba29a6e93f5cba9b33026afcc362748e3fca02",
        "user": {
            "login": "markvandertol",
            "id": 2835719,
            "node_id": "MDQ6VXNlcjI4MzU3MTk=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/2835719?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/markvandertol",
            "html_url": "https://github.com/markvandertol",
            "followers_url": "https://api.github.com/users/markvandertol/followers",
            "following_url": "https://api.github.com/users/markvandertol/following{/other_user}",
            "gists_url": "https://api.github.com/users/markvandertol/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/markvandertol/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/markvandertol/subscriptions",
            "organizations_url": "https://api.github.com/users/markvandertol/orgs",
            "repos_url": "https://api.github.com/users/markvandertol/repos",
            "events_url": "https://api.github.com/users/markvandertol/events{/privacy}",
            "received_events_url": "https://api.github.com/users/markvandertol/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "In `HttpAuthenticator` there is `def params(ctx: RequestContext): Map[String, String]`, so `RequestContext` has to be passed, which gives access to the `HttpRequest`. This will change the signature to `def getChallengeHeaders(ctx: RequestContext): List[HttpHeader]` or the signature of `params` has to be changed to work with a `HttpRequest` instead of `RequestContext`. I don't think implementations of `params` would need access to the whole context, just the request part is enough.\n",
        "created_at": "2013-07-17T12:25:39Z",
        "updated_at": "2013-07-18T13:25:43Z",
        "html_url": "https://github.com/spray/spray/pull/358#discussion_r5240481",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/358",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5240481"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/358#discussion_r5240481"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/358"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5240657",
        "pull_request_review_id": null,
        "id": 5240657,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA2NTc=",
        "diff_hunk": "@@ -116,9 +116,11 @@ case class UnacceptedResponseEncodingRejection(supported: HttpEncoding) extends\n \n /**\n  * Rejection created by the 'authenticate' directive.\n- * Signals that the request was rejected because the user could not be authenticated.\n+ * Signals that the request was rejected because the user could not be authenticated, either\n+ * because the `Authorization` header was not supplied or the supplied credentials are invalid.\n  */\n-case class AuthenticationFailedRejection(realm: String) extends Rejection\n+case class AuthenticationFailedRejection(authHeaderPresent: Boolean, scheme: String, realm: String,",
        "path": "spray-routing/src/main/scala/spray/routing/Rejection.scala",
        "position": null,
        "original_position": 9,
        "commit_id": "034779de9eff97bd8e0cceb717f07d12f4d6a780",
        "original_commit_id": "1cba29a6e93f5cba9b33026afcc362748e3fca02",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think by following @jrudolph's proposal we can actually get rid of the `scheme`, `realm` and `params` methods in `HttpAuthenticator`, no? And I agree that access to the `HttpRequest` is sufficient.\n",
        "created_at": "2013-07-17T12:37:06Z",
        "updated_at": "2013-07-18T13:25:43Z",
        "html_url": "https://github.com/spray/spray/pull/358#discussion_r5240657",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/358",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5240657"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/358#discussion_r5240657"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/358"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5241314",
        "pull_request_review_id": null,
        "id": 5241314,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDEzMTQ=",
        "diff_hunk": "@@ -116,9 +116,11 @@ case class UnacceptedResponseEncodingRejection(supported: HttpEncoding) extends\n \n /**\n  * Rejection created by the 'authenticate' directive.\n- * Signals that the request was rejected because the user could not be authenticated.\n+ * Signals that the request was rejected because the user could not be authenticated, either\n+ * because the `Authorization` header was not supplied or the supplied credentials are invalid.\n  */\n-case class AuthenticationFailedRejection(realm: String) extends Rejection\n+case class AuthenticationFailedRejection(authHeaderPresent: Boolean, scheme: String, realm: String,",
        "path": "spray-routing/src/main/scala/spray/routing/Rejection.scala",
        "position": null,
        "original_position": 9,
        "commit_id": "034779de9eff97bd8e0cceb717f07d12f4d6a780",
        "original_commit_id": "1cba29a6e93f5cba9b33026afcc362748e3fca02",
        "user": {
            "login": "markvandertol",
            "id": 2835719,
            "node_id": "MDQ6VXNlcjI4MzU3MTk=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/2835719?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/markvandertol",
            "html_url": "https://github.com/markvandertol",
            "followers_url": "https://api.github.com/users/markvandertol/followers",
            "following_url": "https://api.github.com/users/markvandertol/following{/other_user}",
            "gists_url": "https://api.github.com/users/markvandertol/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/markvandertol/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/markvandertol/subscriptions",
            "organizations_url": "https://api.github.com/users/markvandertol/orgs",
            "repos_url": "https://api.github.com/users/markvandertol/repos",
            "events_url": "https://api.github.com/users/markvandertol/events{/privacy}",
            "received_events_url": "https://api.github.com/users/markvandertol/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Those are indeed then no longer needed in the `HttpAuthenticator`, since they won't be needed for every type of `HttpAuthenticator`.\n",
        "created_at": "2013-07-17T13:11:03Z",
        "updated_at": "2013-07-18T13:25:43Z",
        "html_url": "https://github.com/spray/spray/pull/358#discussion_r5241314",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/358",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5241314"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/358#discussion_r5241314"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/358"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5288468",
        "pull_request_review_id": null,
        "id": 5288468,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg0Njg=",
        "diff_hunk": "@@ -0,0 +1,160 @@\n+:author: matsluni\n+:tags: scala, spray-can, raspberry pi\n+:index-paragraphs: 1\n+:show-post-structure: yes\n+\n+Spray on the Raspberry Pi\n+=========================\n+\n+Introduction\n+------------\n+\n+As a spray newbie and general computer enthusiast I thought of playing around with spray.io and my Raspberry Pi (RPI) at home.\n+In this blog-entry I want to show a small example of how to get started with spray.io on the RPI.\n+\n+The `Raspberry Pi`_ is a credit-card sized computer with a huge amount of use cases. It can be connected to a TV\n+and equipped with Raspbmc_ a special XBMC_-Distribution for the RPI and then be used as a Home Cinema PC (HTPC).\n+A photo-enthusiast enhanced his camera and built a RPI based mini-computer into a battery grip and called this `Camera Pi`_.\n+Just recently I discovered that it also possible to build a `custom GoogleTV`_ with the RPI.\n+It is also possible to use it as a server in your network e.g. fileserver. As you can see, there are a number of possibilities\n+with this little computer.\n+\n+Spray.io is a lightweight REST/HTTP toolkit. It is possible to run spray.io in jetty_, a servlet-container, with the help of\n+the spray-servlet module. But, as many of you know, spray.io has its own HTTP-Server, spray-can, which is the preferred\n+way to run spray.io. As the documentation states it:\n+\n+    spray-can provides a low-level, low-overhead, high-performance HTTP server and client built on top of spray-io.\n+    Both are fully asynchronous, non-blocking and built 100% in Scala on top of Akka.\n+\n+Considering that Java/Scala might normally be a bit to heavy-weight for the RPI, this sounds perfect for me to try it on\n+the RPI.\n+\n+.. _`Raspberry Pi`: http://www.raspberrypi.org\n+.. _Raspbmc: http://www.raspbmc.com\n+.. _XBMC: http://xbmc.org\n+.. _`Camera Pi`: http://www.davidhunt.ie/?p=2641\n+.. _`custom GoogleTV`: http://blog.donaldderek.com/2013/06/build-your-own-google-tv-using-raspberrypi-nodejs-and-socket-io/\n+.. _jetty: http://www.eclipse.org/jetty/\n+\n+JVM on the Raspberry Pi\n+-----------------------\n+\n+Because of the ARM_-based architecture of the RPI and differences in the support of the hardfp_-api you have to\n+be careful which JVM you can use. Currently there are some JVMs available with and without the support of the hardfp-api.\n+If you choose the Debian-based Raspbian_-Distribution as the operating system for the RPI you can use the Oracle\n+early-access version of the Jdk 8 with hardfp-support. Otherwise you can try the OpenJDK-version shipped version of your\n+RPI-Distribution or alternatively a complete other one (e.g. Avian_). No matter the fact that there are different JVMs\n+regarding the support the hardfp-api, it is of no relevance for the demo. You can use either one of them. It only matters\n+that you pick a JVM which is capable of using the hardfp-api-variant of the OS.\n+\n+First, you need a working Linux-Distribution on your RPI. For this introduction I use Raspbian. You can find the\n+Raspian-images on the RPI downloads_-page. I'll use the *Raspbian \u201cwheezy\u201d* image, which is a hard-float image for the RPI.\n+\n+If your Raspbian is in place we can move on further to install the Jdk.",
        "path": "docs/blog/2013-07-18-spray-on-the-raspberry-pi.rst",
        "position": null,
        "original_position": 53,
        "commit_id": "5505d4b433fd7633821092557bd799ed31dcec15",
        "original_commit_id": "58623eaefe9ea735bc3d592e7c2dd2a382d20fd0",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Using all caps `JDK` reads better for me.\n",
        "created_at": "2013-07-19T09:16:22Z",
        "updated_at": "2013-07-23T16:30:41Z",
        "html_url": "https://github.com/spray/spray/pull/383#discussion_r5288468",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/383",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5288468"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/383#discussion_r5288468"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/383"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5288474",
        "pull_request_review_id": null,
        "id": 5288474,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg0NzQ=",
        "diff_hunk": "@@ -0,0 +1,160 @@\n+:author: matsluni\n+:tags: scala, spray-can, raspberry pi\n+:index-paragraphs: 1\n+:show-post-structure: yes\n+\n+Spray on the Raspberry Pi\n+=========================\n+\n+Introduction\n+------------\n+\n+As a spray newbie and general computer enthusiast I thought of playing around with spray.io and my Raspberry Pi (RPI) at home.\n+In this blog-entry I want to show a small example of how to get started with spray.io on the RPI.\n+\n+The `Raspberry Pi`_ is a credit-card sized computer with a huge amount of use cases. It can be connected to a TV\n+and equipped with Raspbmc_ a special XBMC_-Distribution for the RPI and then be used as a Home Cinema PC (HTPC).\n+A photo-enthusiast enhanced his camera and built a RPI based mini-computer into a battery grip and called this `Camera Pi`_.\n+Just recently I discovered that it also possible to build a `custom GoogleTV`_ with the RPI.\n+It is also possible to use it as a server in your network e.g. fileserver. As you can see, there are a number of possibilities\n+with this little computer.\n+\n+Spray.io is a lightweight REST/HTTP toolkit. It is possible to run spray.io in jetty_, a servlet-container, with the help of\n+the spray-servlet module. But, as many of you know, spray.io has its own HTTP-Server, spray-can, which is the preferred\n+way to run spray.io. As the documentation states it:\n+\n+    spray-can provides a low-level, low-overhead, high-performance HTTP server and client built on top of spray-io.\n+    Both are fully asynchronous, non-blocking and built 100% in Scala on top of Akka.\n+\n+Considering that Java/Scala might normally be a bit to heavy-weight for the RPI, this sounds perfect for me to try it on\n+the RPI.\n+\n+.. _`Raspberry Pi`: http://www.raspberrypi.org\n+.. _Raspbmc: http://www.raspbmc.com\n+.. _XBMC: http://xbmc.org\n+.. _`Camera Pi`: http://www.davidhunt.ie/?p=2641\n+.. _`custom GoogleTV`: http://blog.donaldderek.com/2013/06/build-your-own-google-tv-using-raspberrypi-nodejs-and-socket-io/\n+.. _jetty: http://www.eclipse.org/jetty/\n+\n+JVM on the Raspberry Pi\n+-----------------------\n+\n+Because of the ARM_-based architecture of the RPI and differences in the support of the hardfp_-api you have to\n+be careful which JVM you can use. Currently there are some JVMs available with and without the support of the hardfp-api.\n+If you choose the Debian-based Raspbian_-Distribution as the operating system for the RPI you can use the Oracle\n+early-access version of the Jdk 8 with hardfp-support. Otherwise you can try the OpenJDK-version shipped version of your\n+RPI-Distribution or alternatively a complete other one (e.g. Avian_). No matter the fact that there are different JVMs\n+regarding the support the hardfp-api, it is of no relevance for the demo. You can use either one of them. It only matters\n+that you pick a JVM which is capable of using the hardfp-api-variant of the OS.\n+\n+First, you need a working Linux-Distribution on your RPI. For this introduction I use Raspbian. You can find the\n+Raspian-images on the RPI downloads_-page. I'll use the *Raspbian \u201cwheezy\u201d* image, which is a hard-float image for the RPI.\n+\n+If your Raspbian is in place we can move on further to install the Jdk.\n+\n+For the demo we will use the Jdk from Oracle/Sun. Currently there is a early-access version of the Jdk 8 available",
        "path": "docs/blog/2013-07-18-spray-on-the-raspberry-pi.rst",
        "position": null,
        "original_position": 55,
        "commit_id": "5505d4b433fd7633821092557bd799ed31dcec15",
        "original_commit_id": "58623eaefe9ea735bc3d592e7c2dd2a382d20fd0",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\"an early-access\"\n",
        "created_at": "2013-07-19T09:16:39Z",
        "updated_at": "2013-07-23T16:30:41Z",
        "html_url": "https://github.com/spray/spray/pull/383#discussion_r5288474",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/383",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5288474"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/383#discussion_r5288474"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/383"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5288492",
        "pull_request_review_id": null,
        "id": 5288492,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg0OTI=",
        "diff_hunk": "@@ -0,0 +1,160 @@\n+:author: matsluni\n+:tags: scala, spray-can, raspberry pi\n+:index-paragraphs: 1\n+:show-post-structure: yes\n+\n+Spray on the Raspberry Pi\n+=========================\n+\n+Introduction\n+------------\n+\n+As a spray newbie and general computer enthusiast I thought of playing around with spray.io and my Raspberry Pi (RPI) at home.\n+In this blog-entry I want to show a small example of how to get started with spray.io on the RPI.\n+\n+The `Raspberry Pi`_ is a credit-card sized computer with a huge amount of use cases. It can be connected to a TV\n+and equipped with Raspbmc_ a special XBMC_-Distribution for the RPI and then be used as a Home Cinema PC (HTPC).\n+A photo-enthusiast enhanced his camera and built a RPI based mini-computer into a battery grip and called this `Camera Pi`_.\n+Just recently I discovered that it also possible to build a `custom GoogleTV`_ with the RPI.\n+It is also possible to use it as a server in your network e.g. fileserver. As you can see, there are a number of possibilities\n+with this little computer.\n+\n+Spray.io is a lightweight REST/HTTP toolkit. It is possible to run spray.io in jetty_, a servlet-container, with the help of\n+the spray-servlet module. But, as many of you know, spray.io has its own HTTP-Server, spray-can, which is the preferred\n+way to run spray.io. As the documentation states it:\n+\n+    spray-can provides a low-level, low-overhead, high-performance HTTP server and client built on top of spray-io.\n+    Both are fully asynchronous, non-blocking and built 100% in Scala on top of Akka.\n+\n+Considering that Java/Scala might normally be a bit to heavy-weight for the RPI, this sounds perfect for me to try it on\n+the RPI.\n+\n+.. _`Raspberry Pi`: http://www.raspberrypi.org\n+.. _Raspbmc: http://www.raspbmc.com\n+.. _XBMC: http://xbmc.org\n+.. _`Camera Pi`: http://www.davidhunt.ie/?p=2641\n+.. _`custom GoogleTV`: http://blog.donaldderek.com/2013/06/build-your-own-google-tv-using-raspberrypi-nodejs-and-socket-io/\n+.. _jetty: http://www.eclipse.org/jetty/\n+\n+JVM on the Raspberry Pi\n+-----------------------\n+\n+Because of the ARM_-based architecture of the RPI and differences in the support of the hardfp_-api you have to\n+be careful which JVM you can use. Currently there are some JVMs available with and without the support of the hardfp-api.\n+If you choose the Debian-based Raspbian_-Distribution as the operating system for the RPI you can use the Oracle\n+early-access version of the Jdk 8 with hardfp-support. Otherwise you can try the OpenJDK-version shipped version of your\n+RPI-Distribution or alternatively a complete other one (e.g. Avian_). No matter the fact that there are different JVMs\n+regarding the support the hardfp-api, it is of no relevance for the demo. You can use either one of them. It only matters\n+that you pick a JVM which is capable of using the hardfp-api-variant of the OS.\n+\n+First, you need a working Linux-Distribution on your RPI. For this introduction I use Raspbian. You can find the\n+Raspian-images on the RPI downloads_-page. I'll use the *Raspbian \u201cwheezy\u201d* image, which is a hard-float image for the RPI.\n+\n+If your Raspbian is in place we can move on further to install the Jdk.\n+\n+For the demo we will use the Jdk from Oracle/Sun. Currently there is a early-access version of the Jdk 8 available\n+for the ARM-Architecture, which is used by the RPI. You can download the Jdk from here_. There is a installguide_ which",
        "path": "docs/blog/2013-07-18-spray-on-the-raspberry-pi.rst",
        "position": null,
        "original_position": 56,
        "commit_id": "5505d4b433fd7633821092557bd799ed31dcec15",
        "original_commit_id": "58623eaefe9ea735bc3d592e7c2dd2a382d20fd0",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\"an installguide\"\n",
        "created_at": "2013-07-19T09:17:51Z",
        "updated_at": "2013-07-23T16:30:41Z",
        "html_url": "https://github.com/spray/spray/pull/383#discussion_r5288492",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/383",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5288492"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/383#discussion_r5288492"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/383"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5288524",
        "pull_request_review_id": null,
        "id": 5288524,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg1MjQ=",
        "diff_hunk": "@@ -0,0 +1,160 @@\n+:author: matsluni\n+:tags: scala, spray-can, raspberry pi\n+:index-paragraphs: 1\n+:show-post-structure: yes\n+\n+Spray on the Raspberry Pi\n+=========================\n+\n+Introduction\n+------------\n+\n+As a spray newbie and general computer enthusiast I thought of playing around with spray.io and my Raspberry Pi (RPI) at home.\n+In this blog-entry I want to show a small example of how to get started with spray.io on the RPI.\n+\n+The `Raspberry Pi`_ is a credit-card sized computer with a huge amount of use cases. It can be connected to a TV\n+and equipped with Raspbmc_ a special XBMC_-Distribution for the RPI and then be used as a Home Cinema PC (HTPC).\n+A photo-enthusiast enhanced his camera and built a RPI based mini-computer into a battery grip and called this `Camera Pi`_.\n+Just recently I discovered that it also possible to build a `custom GoogleTV`_ with the RPI.\n+It is also possible to use it as a server in your network e.g. fileserver. As you can see, there are a number of possibilities\n+with this little computer.\n+\n+Spray.io is a lightweight REST/HTTP toolkit. It is possible to run spray.io in jetty_, a servlet-container, with the help of\n+the spray-servlet module. But, as many of you know, spray.io has its own HTTP-Server, spray-can, which is the preferred\n+way to run spray.io. As the documentation states it:\n+\n+    spray-can provides a low-level, low-overhead, high-performance HTTP server and client built on top of spray-io.\n+    Both are fully asynchronous, non-blocking and built 100% in Scala on top of Akka.\n+\n+Considering that Java/Scala might normally be a bit to heavy-weight for the RPI, this sounds perfect for me to try it on\n+the RPI.\n+\n+.. _`Raspberry Pi`: http://www.raspberrypi.org\n+.. _Raspbmc: http://www.raspbmc.com\n+.. _XBMC: http://xbmc.org\n+.. _`Camera Pi`: http://www.davidhunt.ie/?p=2641\n+.. _`custom GoogleTV`: http://blog.donaldderek.com/2013/06/build-your-own-google-tv-using-raspberrypi-nodejs-and-socket-io/\n+.. _jetty: http://www.eclipse.org/jetty/\n+\n+JVM on the Raspberry Pi\n+-----------------------\n+\n+Because of the ARM_-based architecture of the RPI and differences in the support of the hardfp_-api you have to\n+be careful which JVM you can use. Currently there are some JVMs available with and without the support of the hardfp-api.\n+If you choose the Debian-based Raspbian_-Distribution as the operating system for the RPI you can use the Oracle\n+early-access version of the Jdk 8 with hardfp-support. Otherwise you can try the OpenJDK-version shipped version of your\n+RPI-Distribution or alternatively a complete other one (e.g. Avian_). No matter the fact that there are different JVMs\n+regarding the support the hardfp-api, it is of no relevance for the demo. You can use either one of them. It only matters\n+that you pick a JVM which is capable of using the hardfp-api-variant of the OS.\n+\n+First, you need a working Linux-Distribution on your RPI. For this introduction I use Raspbian. You can find the\n+Raspian-images on the RPI downloads_-page. I'll use the *Raspbian \u201cwheezy\u201d* image, which is a hard-float image for the RPI.\n+\n+If your Raspbian is in place we can move on further to install the Jdk.\n+\n+For the demo we will use the Jdk from Oracle/Sun. Currently there is a early-access version of the Jdk 8 available\n+for the ARM-Architecture, which is used by the RPI. You can download the Jdk from here_. There is a installguide_ which\n+describes how to install the jdk on the RPI. This is basically a tar-file which you can then simply  un-tar to a folder\n+of your  choice. For this demo it will be ok to just un-tar it in the home-folder of the user *pi*.\n+\n+``tar -xf jdk-8-ea-b36e-linux-arm-hflt-29_nov_2012.tar``\n+\n+This will create the folder *jdk1.8.0* in the current dir. Now, you can type *./jdk1.8.0/bin/java -version* to check that",
        "path": "docs/blog/2013-07-18-spray-on-the-raspberry-pi.rst",
        "position": null,
        "original_position": 62,
        "commit_id": "5505d4b433fd7633821092557bd799ed31dcec15",
        "original_commit_id": "58623eaefe9ea735bc3d592e7c2dd2a382d20fd0",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "For consistency, I guess it makes sense to use code quoting (double backticks) for all kinds of command lines, paths etc.\n",
        "created_at": "2013-07-19T09:20:38Z",
        "updated_at": "2013-07-23T16:30:41Z",
        "html_url": "https://github.com/spray/spray/pull/383#discussion_r5288524",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/383",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5288524"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/383#discussion_r5288524"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/383"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5288748",
        "pull_request_review_id": null,
        "id": 5288748,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg3NDg=",
        "diff_hunk": "@@ -0,0 +1,160 @@\n+:author: matsluni\n+:tags: scala, spray-can, raspberry pi\n+:index-paragraphs: 1\n+:show-post-structure: yes\n+\n+Spray on the Raspberry Pi\n+=========================\n+\n+Introduction\n+------------\n+\n+As a spray newbie and general computer enthusiast I thought of playing around with spray.io and my Raspberry Pi (RPI) at home.\n+In this blog-entry I want to show a small example of how to get started with spray.io on the RPI.\n+\n+The `Raspberry Pi`_ is a credit-card sized computer with a huge amount of use cases. It can be connected to a TV\n+and equipped with Raspbmc_ a special XBMC_-Distribution for the RPI and then be used as a Home Cinema PC (HTPC).\n+A photo-enthusiast enhanced his camera and built a RPI based mini-computer into a battery grip and called this `Camera Pi`_.\n+Just recently I discovered that it also possible to build a `custom GoogleTV`_ with the RPI.\n+It is also possible to use it as a server in your network e.g. fileserver. As you can see, there are a number of possibilities\n+with this little computer.\n+\n+Spray.io is a lightweight REST/HTTP toolkit. It is possible to run spray.io in jetty_, a servlet-container, with the help of\n+the spray-servlet module. But, as many of you know, spray.io has its own HTTP-Server, spray-can, which is the preferred\n+way to run spray.io. As the documentation states it:\n+\n+    spray-can provides a low-level, low-overhead, high-performance HTTP server and client built on top of spray-io.\n+    Both are fully asynchronous, non-blocking and built 100% in Scala on top of Akka.\n+\n+Considering that Java/Scala might normally be a bit to heavy-weight for the RPI, this sounds perfect for me to try it on\n+the RPI.\n+\n+.. _`Raspberry Pi`: http://www.raspberrypi.org\n+.. _Raspbmc: http://www.raspbmc.com\n+.. _XBMC: http://xbmc.org\n+.. _`Camera Pi`: http://www.davidhunt.ie/?p=2641\n+.. _`custom GoogleTV`: http://blog.donaldderek.com/2013/06/build-your-own-google-tv-using-raspberrypi-nodejs-and-socket-io/\n+.. _jetty: http://www.eclipse.org/jetty/\n+\n+JVM on the Raspberry Pi\n+-----------------------\n+\n+Because of the ARM_-based architecture of the RPI and differences in the support of the hardfp_-api you have to",
        "path": "docs/blog/2013-07-18-spray-on-the-raspberry-pi.rst",
        "position": null,
        "original_position": 42,
        "commit_id": "5505d4b433fd7633821092557bd799ed31dcec15",
        "original_commit_id": "58623eaefe9ea735bc3d592e7c2dd2a382d20fd0",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It's a bit unclear to me what the conclusion of this paragraph is. Maybe you it would be clearer if structured like this:\n- there are several options which JVM to use on the Raspberry PI with varying levels of support for the hardware of the RPI\n- you can skip this paragraph and just use XXX distribution and YYY JDK\n- which to use depends on what the floating point support API of the chosen linux distro is: softfp or hardfp, hardfp will give better performance\n- openjdk which is open but has no dedicated support for the ARM instruction set which means you have to use the slower ZeroVM\n- early-access JDK8, which isn't open but has support for the ARM instruction set and is probably the fastest option currently\n- something else like avian\n- important in any case: distro fp type and JDK fp type must match\n- for this blog post, we use XXX distribution and YYY JDK which match and are fast\n\nOr even put the details into a footnote.\n",
        "created_at": "2013-07-19T09:36:29Z",
        "updated_at": "2013-07-23T16:30:41Z",
        "html_url": "https://github.com/spray/spray/pull/383#discussion_r5288748",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/383",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5288748"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/383#discussion_r5288748"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/383"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5288780",
        "pull_request_review_id": null,
        "id": 5288780,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg3ODA=",
        "diff_hunk": "@@ -0,0 +1,160 @@\n+:author: matsluni\n+:tags: scala, spray-can, raspberry pi\n+:index-paragraphs: 1\n+:show-post-structure: yes\n+\n+Spray on the Raspberry Pi\n+=========================\n+\n+Introduction\n+------------\n+\n+As a spray newbie and general computer enthusiast I thought of playing around with spray.io and my Raspberry Pi (RPI) at home.\n+In this blog-entry I want to show a small example of how to get started with spray.io on the RPI.\n+\n+The `Raspberry Pi`_ is a credit-card sized computer with a huge amount of use cases. It can be connected to a TV\n+and equipped with Raspbmc_ a special XBMC_-Distribution for the RPI and then be used as a Home Cinema PC (HTPC).\n+A photo-enthusiast enhanced his camera and built a RPI based mini-computer into a battery grip and called this `Camera Pi`_.\n+Just recently I discovered that it also possible to build a `custom GoogleTV`_ with the RPI.\n+It is also possible to use it as a server in your network e.g. fileserver. As you can see, there are a number of possibilities\n+with this little computer.\n+\n+Spray.io is a lightweight REST/HTTP toolkit. It is possible to run spray.io in jetty_, a servlet-container, with the help of\n+the spray-servlet module. But, as many of you know, spray.io has its own HTTP-Server, spray-can, which is the preferred\n+way to run spray.io. As the documentation states it:\n+\n+    spray-can provides a low-level, low-overhead, high-performance HTTP server and client built on top of spray-io.\n+    Both are fully asynchronous, non-blocking and built 100% in Scala on top of Akka.\n+\n+Considering that Java/Scala might normally be a bit to heavy-weight for the RPI, this sounds perfect for me to try it on\n+the RPI.\n+\n+.. _`Raspberry Pi`: http://www.raspberrypi.org\n+.. _Raspbmc: http://www.raspbmc.com\n+.. _XBMC: http://xbmc.org\n+.. _`Camera Pi`: http://www.davidhunt.ie/?p=2641\n+.. _`custom GoogleTV`: http://blog.donaldderek.com/2013/06/build-your-own-google-tv-using-raspberrypi-nodejs-and-socket-io/\n+.. _jetty: http://www.eclipse.org/jetty/\n+\n+JVM on the Raspberry Pi\n+-----------------------\n+\n+Because of the ARM_-based architecture of the RPI and differences in the support of the hardfp_-api you have to\n+be careful which JVM you can use. Currently there are some JVMs available with and without the support of the hardfp-api.\n+If you choose the Debian-based Raspbian_-Distribution as the operating system for the RPI you can use the Oracle\n+early-access version of the Jdk 8 with hardfp-support. Otherwise you can try the OpenJDK-version shipped version of your\n+RPI-Distribution or alternatively a complete other one (e.g. Avian_). No matter the fact that there are different JVMs\n+regarding the support the hardfp-api, it is of no relevance for the demo. You can use either one of them. It only matters\n+that you pick a JVM which is capable of using the hardfp-api-variant of the OS.\n+\n+First, you need a working Linux-Distribution on your RPI. For this introduction I use Raspbian. You can find the\n+Raspian-images on the RPI downloads_-page. I'll use the *Raspbian \u201cwheezy\u201d* image, which is a hard-float image for the RPI.\n+\n+If your Raspbian is in place we can move on further to install the Jdk.\n+\n+For the demo we will use the Jdk from Oracle/Sun. Currently there is a early-access version of the Jdk 8 available\n+for the ARM-Architecture, which is used by the RPI. You can download the Jdk from here_. There is a installguide_ which\n+describes how to install the jdk on the RPI. This is basically a tar-file which you can then simply  un-tar to a folder\n+of your  choice. For this demo it will be ok to just un-tar it in the home-folder of the user *pi*.\n+\n+``tar -xf jdk-8-ea-b36e-linux-arm-hflt-29_nov_2012.tar``\n+\n+This will create the folder *jdk1.8.0* in the current dir. Now, you can type *./jdk1.8.0/bin/java -version* to check that\n+Java will run correctly and to see some version information.\n+\n+.. _ARM: https://en.wikipedia.org/wiki/ARM_architecture\n+.. _hardfp: http://www.raspbian.org/RaspbianFAQ#What_do_you_mean_by_.22soft_float_ABI.22_and_.22hard_float_ABI.22.3F\n+.. _Raspbian: http://www.raspbian.org\n+.. _Avian: https://github.com/ReadyTalk/avian\n+.. _downloads: http://www.raspberrypi.org/downloads\n+.. _here: https://jdk8.java.net/fxarmpreview/index.html\n+.. _installguide: https://blogs.oracle.com/hinkmond/entry/quickie_guide_getting_hard_float\n+\n+Spray-can on the Raspberry Pi\n+-----------------------------\n+\n+So, after our RPI runs a Linux and a JVM, I want to show you how to get started with spray.io on your RPI.\n+\n+For this I created a `customized version`_ of the spray-template project from Github. You can clone this customized version\n+with the command:\n+\n+``git clone https://github.com/matsluni/spray-template.git``\n+\n+Modifications on the spray-template-project",
        "path": "docs/blog/2013-07-18-spray-on-the-raspberry-pi.rst",
        "position": null,
        "original_position": 83,
        "commit_id": "5505d4b433fd7633821092557bd799ed31dcec15",
        "original_commit_id": "58623eaefe9ea735bc3d592e7c2dd2a382d20fd0",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": ":+1: It's good to have the necessary changes explained here.\n",
        "created_at": "2013-07-19T09:38:43Z",
        "updated_at": "2013-07-23T16:30:41Z",
        "html_url": "https://github.com/spray/spray/pull/383#discussion_r5288780",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/383",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5288780"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/383#discussion_r5288780"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/383"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5288789",
        "pull_request_review_id": null,
        "id": 5288789,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg3ODk=",
        "diff_hunk": "@@ -0,0 +1,160 @@\n+:author: matsluni\n+:tags: scala, spray-can, raspberry pi\n+:index-paragraphs: 1\n+:show-post-structure: yes\n+\n+Spray on the Raspberry Pi\n+=========================\n+\n+Introduction\n+------------\n+\n+As a spray newbie and general computer enthusiast I thought of playing around with spray.io and my Raspberry Pi (RPI) at home.\n+In this blog-entry I want to show a small example of how to get started with spray.io on the RPI.\n+\n+The `Raspberry Pi`_ is a credit-card sized computer with a huge amount of use cases. It can be connected to a TV\n+and equipped with Raspbmc_ a special XBMC_-Distribution for the RPI and then be used as a Home Cinema PC (HTPC).\n+A photo-enthusiast enhanced his camera and built a RPI based mini-computer into a battery grip and called this `Camera Pi`_.\n+Just recently I discovered that it also possible to build a `custom GoogleTV`_ with the RPI.\n+It is also possible to use it as a server in your network e.g. fileserver. As you can see, there are a number of possibilities\n+with this little computer.\n+\n+Spray.io is a lightweight REST/HTTP toolkit. It is possible to run spray.io in jetty_, a servlet-container, with the help of\n+the spray-servlet module. But, as many of you know, spray.io has its own HTTP-Server, spray-can, which is the preferred\n+way to run spray.io. As the documentation states it:\n+\n+    spray-can provides a low-level, low-overhead, high-performance HTTP server and client built on top of spray-io.\n+    Both are fully asynchronous, non-blocking and built 100% in Scala on top of Akka.\n+\n+Considering that Java/Scala might normally be a bit to heavy-weight for the RPI, this sounds perfect for me to try it on\n+the RPI.\n+\n+.. _`Raspberry Pi`: http://www.raspberrypi.org\n+.. _Raspbmc: http://www.raspbmc.com\n+.. _XBMC: http://xbmc.org\n+.. _`Camera Pi`: http://www.davidhunt.ie/?p=2641\n+.. _`custom GoogleTV`: http://blog.donaldderek.com/2013/06/build-your-own-google-tv-using-raspberrypi-nodejs-and-socket-io/\n+.. _jetty: http://www.eclipse.org/jetty/\n+\n+JVM on the Raspberry Pi\n+-----------------------\n+\n+Because of the ARM_-based architecture of the RPI and differences in the support of the hardfp_-api you have to\n+be careful which JVM you can use. Currently there are some JVMs available with and without the support of the hardfp-api.\n+If you choose the Debian-based Raspbian_-Distribution as the operating system for the RPI you can use the Oracle\n+early-access version of the Jdk 8 with hardfp-support. Otherwise you can try the OpenJDK-version shipped version of your\n+RPI-Distribution or alternatively a complete other one (e.g. Avian_). No matter the fact that there are different JVMs\n+regarding the support the hardfp-api, it is of no relevance for the demo. You can use either one of them. It only matters\n+that you pick a JVM which is capable of using the hardfp-api-variant of the OS.\n+\n+First, you need a working Linux-Distribution on your RPI. For this introduction I use Raspbian. You can find the\n+Raspian-images on the RPI downloads_-page. I'll use the *Raspbian \u201cwheezy\u201d* image, which is a hard-float image for the RPI.\n+\n+If your Raspbian is in place we can move on further to install the Jdk.\n+\n+For the demo we will use the Jdk from Oracle/Sun. Currently there is a early-access version of the Jdk 8 available\n+for the ARM-Architecture, which is used by the RPI. You can download the Jdk from here_. There is a installguide_ which\n+describes how to install the jdk on the RPI. This is basically a tar-file which you can then simply  un-tar to a folder\n+of your  choice. For this demo it will be ok to just un-tar it in the home-folder of the user *pi*.\n+\n+``tar -xf jdk-8-ea-b36e-linux-arm-hflt-29_nov_2012.tar``\n+\n+This will create the folder *jdk1.8.0* in the current dir. Now, you can type *./jdk1.8.0/bin/java -version* to check that\n+Java will run correctly and to see some version information.\n+\n+.. _ARM: https://en.wikipedia.org/wiki/ARM_architecture\n+.. _hardfp: http://www.raspbian.org/RaspbianFAQ#What_do_you_mean_by_.22soft_float_ABI.22_and_.22hard_float_ABI.22.3F\n+.. _Raspbian: http://www.raspbian.org\n+.. _Avian: https://github.com/ReadyTalk/avian\n+.. _downloads: http://www.raspberrypi.org/downloads\n+.. _here: https://jdk8.java.net/fxarmpreview/index.html\n+.. _installguide: https://blogs.oracle.com/hinkmond/entry/quickie_guide_getting_hard_float\n+\n+Spray-can on the Raspberry Pi\n+-----------------------------\n+\n+So, after our RPI runs a Linux and a JVM, I want to show you how to get started with spray.io on your RPI.\n+\n+For this I created a `customized version`_ of the spray-template project from Github. You can clone this customized version\n+with the command:\n+\n+``git clone https://github.com/matsluni/spray-template.git``\n+\n+Modifications on the spray-template-project\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+This customized version is based on the spray-template-project_ (1.2-M8). This version already uses akka-2.2 including the\n+new IO-module developed together with the spray.io team and is completely actor-based. Furthermore, the customized version\n+includes the `assembly plugin`_ for sbt_ (see build.sbt). This is necessary because it is not possible to build the\n+project on the RPI itself. Therefore we build it on our local system and transfer the complete jar over to our RPI.\n+This packaging is done by the assembly plugin.\n+\n+There are further changes, which include a slightly modified Akka dispatcher config (see application.conf) to reduce\n+the amount of threads to start by the akka-runtime. Otherwise Akka would start up to 64 threads which would kill the JVM\n+of the RPI. Another minor change is to let spray-can listen to all interfaces of the RPI (see Boot.scala). This makes it\n+possible to reach the demo-application from other hosts in the network including our local system.\n+\n+Running the modified project on the RPI\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+After you cloned the git repository you can start *sbt* in this scala project. With the assembly-plugin it is very easy to\n+package the jar which contains all the dependencies we need for spray.io. From within sbt you can just type *assembly* to\n+the packaging process. If everything worked out you should have a jar file in ./target/scala-2.10/ called something like",
        "path": "docs/blog/2013-07-18-spray-on-the-raspberry-pi.rst",
        "position": null,
        "original_position": 102,
        "commit_id": "5505d4b433fd7633821092557bd799ed31dcec15",
        "original_commit_id": "58623eaefe9ea735bc3d592e7c2dd2a382d20fd0",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\"start the packaging process\"\n",
        "created_at": "2013-07-19T09:39:25Z",
        "updated_at": "2013-07-23T16:30:41Z",
        "html_url": "https://github.com/spray/spray/pull/383#discussion_r5288789",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/383",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5288789"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/383#discussion_r5288789"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/383"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5288806",
        "pull_request_review_id": null,
        "id": 5288806,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg4MDY=",
        "diff_hunk": "@@ -0,0 +1,160 @@\n+:author: matsluni\n+:tags: scala, spray-can, raspberry pi\n+:index-paragraphs: 1\n+:show-post-structure: yes\n+\n+Spray on the Raspberry Pi\n+=========================\n+\n+Introduction\n+------------\n+\n+As a spray newbie and general computer enthusiast I thought of playing around with spray.io and my Raspberry Pi (RPI) at home.\n+In this blog-entry I want to show a small example of how to get started with spray.io on the RPI.\n+\n+The `Raspberry Pi`_ is a credit-card sized computer with a huge amount of use cases. It can be connected to a TV\n+and equipped with Raspbmc_ a special XBMC_-Distribution for the RPI and then be used as a Home Cinema PC (HTPC).\n+A photo-enthusiast enhanced his camera and built a RPI based mini-computer into a battery grip and called this `Camera Pi`_.\n+Just recently I discovered that it also possible to build a `custom GoogleTV`_ with the RPI.\n+It is also possible to use it as a server in your network e.g. fileserver. As you can see, there are a number of possibilities\n+with this little computer.\n+\n+Spray.io is a lightweight REST/HTTP toolkit. It is possible to run spray.io in jetty_, a servlet-container, with the help of\n+the spray-servlet module. But, as many of you know, spray.io has its own HTTP-Server, spray-can, which is the preferred\n+way to run spray.io. As the documentation states it:\n+\n+    spray-can provides a low-level, low-overhead, high-performance HTTP server and client built on top of spray-io.\n+    Both are fully asynchronous, non-blocking and built 100% in Scala on top of Akka.\n+\n+Considering that Java/Scala might normally be a bit to heavy-weight for the RPI, this sounds perfect for me to try it on\n+the RPI.\n+\n+.. _`Raspberry Pi`: http://www.raspberrypi.org\n+.. _Raspbmc: http://www.raspbmc.com\n+.. _XBMC: http://xbmc.org\n+.. _`Camera Pi`: http://www.davidhunt.ie/?p=2641\n+.. _`custom GoogleTV`: http://blog.donaldderek.com/2013/06/build-your-own-google-tv-using-raspberrypi-nodejs-and-socket-io/\n+.. _jetty: http://www.eclipse.org/jetty/\n+\n+JVM on the Raspberry Pi\n+-----------------------\n+\n+Because of the ARM_-based architecture of the RPI and differences in the support of the hardfp_-api you have to\n+be careful which JVM you can use. Currently there are some JVMs available with and without the support of the hardfp-api.\n+If you choose the Debian-based Raspbian_-Distribution as the operating system for the RPI you can use the Oracle\n+early-access version of the Jdk 8 with hardfp-support. Otherwise you can try the OpenJDK-version shipped version of your\n+RPI-Distribution or alternatively a complete other one (e.g. Avian_). No matter the fact that there are different JVMs\n+regarding the support the hardfp-api, it is of no relevance for the demo. You can use either one of them. It only matters\n+that you pick a JVM which is capable of using the hardfp-api-variant of the OS.\n+\n+First, you need a working Linux-Distribution on your RPI. For this introduction I use Raspbian. You can find the\n+Raspian-images on the RPI downloads_-page. I'll use the *Raspbian \u201cwheezy\u201d* image, which is a hard-float image for the RPI.\n+\n+If your Raspbian is in place we can move on further to install the Jdk.\n+\n+For the demo we will use the Jdk from Oracle/Sun. Currently there is a early-access version of the Jdk 8 available\n+for the ARM-Architecture, which is used by the RPI. You can download the Jdk from here_. There is a installguide_ which\n+describes how to install the jdk on the RPI. This is basically a tar-file which you can then simply  un-tar to a folder\n+of your  choice. For this demo it will be ok to just un-tar it in the home-folder of the user *pi*.\n+\n+``tar -xf jdk-8-ea-b36e-linux-arm-hflt-29_nov_2012.tar``\n+\n+This will create the folder *jdk1.8.0* in the current dir. Now, you can type *./jdk1.8.0/bin/java -version* to check that\n+Java will run correctly and to see some version information.\n+\n+.. _ARM: https://en.wikipedia.org/wiki/ARM_architecture\n+.. _hardfp: http://www.raspbian.org/RaspbianFAQ#What_do_you_mean_by_.22soft_float_ABI.22_and_.22hard_float_ABI.22.3F\n+.. _Raspbian: http://www.raspbian.org\n+.. _Avian: https://github.com/ReadyTalk/avian\n+.. _downloads: http://www.raspberrypi.org/downloads\n+.. _here: https://jdk8.java.net/fxarmpreview/index.html\n+.. _installguide: https://blogs.oracle.com/hinkmond/entry/quickie_guide_getting_hard_float\n+\n+Spray-can on the Raspberry Pi\n+-----------------------------\n+\n+So, after our RPI runs a Linux and a JVM, I want to show you how to get started with spray.io on your RPI.\n+\n+For this I created a `customized version`_ of the spray-template project from Github. You can clone this customized version\n+with the command:\n+\n+``git clone https://github.com/matsluni/spray-template.git``\n+\n+Modifications on the spray-template-project\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+This customized version is based on the spray-template-project_ (1.2-M8). This version already uses akka-2.2 including the\n+new IO-module developed together with the spray.io team and is completely actor-based. Furthermore, the customized version\n+includes the `assembly plugin`_ for sbt_ (see build.sbt). This is necessary because it is not possible to build the\n+project on the RPI itself. Therefore we build it on our local system and transfer the complete jar over to our RPI.\n+This packaging is done by the assembly plugin.\n+\n+There are further changes, which include a slightly modified Akka dispatcher config (see application.conf) to reduce\n+the amount of threads to start by the akka-runtime. Otherwise Akka would start up to 64 threads which would kill the JVM\n+of the RPI. Another minor change is to let spray-can listen to all interfaces of the RPI (see Boot.scala). This makes it\n+possible to reach the demo-application from other hosts in the network including our local system.\n+\n+Running the modified project on the RPI\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+After you cloned the git repository you can start *sbt* in this scala project. With the assembly-plugin it is very easy to\n+package the jar which contains all the dependencies we need for spray.io. From within sbt you can just type *assembly* to\n+the packaging process. If everything worked out you should have a jar file in ./target/scala-2.10/ called something like\n+\"default-...jar\" this is the jar file containing spray.io and everything it needs to run. This jar can now transferred",
        "path": "docs/blog/2013-07-18-spray-on-the-raspberry-pi.rst",
        "position": null,
        "original_position": 103,
        "commit_id": "5505d4b433fd7633821092557bd799ed31dcec15",
        "original_commit_id": "58623eaefe9ea735bc3d592e7c2dd2a382d20fd0",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Another possibility would be to give the template project a name, so that the jar will get a well-known name as well.\n",
        "created_at": "2013-07-19T09:40:25Z",
        "updated_at": "2013-07-23T16:30:41Z",
        "html_url": "https://github.com/spray/spray/pull/383#discussion_r5288806",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/383",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5288806"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/383#discussion_r5288806"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/383"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5288820",
        "pull_request_review_id": null,
        "id": 5288820,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg4MjA=",
        "diff_hunk": "@@ -0,0 +1,160 @@\n+:author: matsluni\n+:tags: scala, spray-can, raspberry pi\n+:index-paragraphs: 1\n+:show-post-structure: yes\n+\n+Spray on the Raspberry Pi\n+=========================\n+\n+Introduction\n+------------\n+\n+As a spray newbie and general computer enthusiast I thought of playing around with spray.io and my Raspberry Pi (RPI) at home.\n+In this blog-entry I want to show a small example of how to get started with spray.io on the RPI.\n+\n+The `Raspberry Pi`_ is a credit-card sized computer with a huge amount of use cases. It can be connected to a TV\n+and equipped with Raspbmc_ a special XBMC_-Distribution for the RPI and then be used as a Home Cinema PC (HTPC).\n+A photo-enthusiast enhanced his camera and built a RPI based mini-computer into a battery grip and called this `Camera Pi`_.\n+Just recently I discovered that it also possible to build a `custom GoogleTV`_ with the RPI.\n+It is also possible to use it as a server in your network e.g. fileserver. As you can see, there are a number of possibilities\n+with this little computer.\n+\n+Spray.io is a lightweight REST/HTTP toolkit. It is possible to run spray.io in jetty_, a servlet-container, with the help of\n+the spray-servlet module. But, as many of you know, spray.io has its own HTTP-Server, spray-can, which is the preferred\n+way to run spray.io. As the documentation states it:\n+\n+    spray-can provides a low-level, low-overhead, high-performance HTTP server and client built on top of spray-io.\n+    Both are fully asynchronous, non-blocking and built 100% in Scala on top of Akka.\n+\n+Considering that Java/Scala might normally be a bit to heavy-weight for the RPI, this sounds perfect for me to try it on\n+the RPI.\n+\n+.. _`Raspberry Pi`: http://www.raspberrypi.org\n+.. _Raspbmc: http://www.raspbmc.com\n+.. _XBMC: http://xbmc.org\n+.. _`Camera Pi`: http://www.davidhunt.ie/?p=2641\n+.. _`custom GoogleTV`: http://blog.donaldderek.com/2013/06/build-your-own-google-tv-using-raspberrypi-nodejs-and-socket-io/\n+.. _jetty: http://www.eclipse.org/jetty/\n+\n+JVM on the Raspberry Pi\n+-----------------------\n+\n+Because of the ARM_-based architecture of the RPI and differences in the support of the hardfp_-api you have to\n+be careful which JVM you can use. Currently there are some JVMs available with and without the support of the hardfp-api.\n+If you choose the Debian-based Raspbian_-Distribution as the operating system for the RPI you can use the Oracle\n+early-access version of the Jdk 8 with hardfp-support. Otherwise you can try the OpenJDK-version shipped version of your\n+RPI-Distribution or alternatively a complete other one (e.g. Avian_). No matter the fact that there are different JVMs\n+regarding the support the hardfp-api, it is of no relevance for the demo. You can use either one of them. It only matters\n+that you pick a JVM which is capable of using the hardfp-api-variant of the OS.\n+\n+First, you need a working Linux-Distribution on your RPI. For this introduction I use Raspbian. You can find the\n+Raspian-images on the RPI downloads_-page. I'll use the *Raspbian \u201cwheezy\u201d* image, which is a hard-float image for the RPI.\n+\n+If your Raspbian is in place we can move on further to install the Jdk.\n+\n+For the demo we will use the Jdk from Oracle/Sun. Currently there is a early-access version of the Jdk 8 available\n+for the ARM-Architecture, which is used by the RPI. You can download the Jdk from here_. There is a installguide_ which\n+describes how to install the jdk on the RPI. This is basically a tar-file which you can then simply  un-tar to a folder\n+of your  choice. For this demo it will be ok to just un-tar it in the home-folder of the user *pi*.\n+\n+``tar -xf jdk-8-ea-b36e-linux-arm-hflt-29_nov_2012.tar``\n+\n+This will create the folder *jdk1.8.0* in the current dir. Now, you can type *./jdk1.8.0/bin/java -version* to check that\n+Java will run correctly and to see some version information.\n+\n+.. _ARM: https://en.wikipedia.org/wiki/ARM_architecture\n+.. _hardfp: http://www.raspbian.org/RaspbianFAQ#What_do_you_mean_by_.22soft_float_ABI.22_and_.22hard_float_ABI.22.3F\n+.. _Raspbian: http://www.raspbian.org\n+.. _Avian: https://github.com/ReadyTalk/avian\n+.. _downloads: http://www.raspberrypi.org/downloads\n+.. _here: https://jdk8.java.net/fxarmpreview/index.html\n+.. _installguide: https://blogs.oracle.com/hinkmond/entry/quickie_guide_getting_hard_float\n+\n+Spray-can on the Raspberry Pi\n+-----------------------------\n+\n+So, after our RPI runs a Linux and a JVM, I want to show you how to get started with spray.io on your RPI.\n+\n+For this I created a `customized version`_ of the spray-template project from Github. You can clone this customized version\n+with the command:\n+\n+``git clone https://github.com/matsluni/spray-template.git``\n+\n+Modifications on the spray-template-project\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+This customized version is based on the spray-template-project_ (1.2-M8). This version already uses akka-2.2 including the\n+new IO-module developed together with the spray.io team and is completely actor-based. Furthermore, the customized version\n+includes the `assembly plugin`_ for sbt_ (see build.sbt). This is necessary because it is not possible to build the\n+project on the RPI itself. Therefore we build it on our local system and transfer the complete jar over to our RPI.\n+This packaging is done by the assembly plugin.\n+\n+There are further changes, which include a slightly modified Akka dispatcher config (see application.conf) to reduce\n+the amount of threads to start by the akka-runtime. Otherwise Akka would start up to 64 threads which would kill the JVM\n+of the RPI. Another minor change is to let spray-can listen to all interfaces of the RPI (see Boot.scala). This makes it\n+possible to reach the demo-application from other hosts in the network including our local system.\n+\n+Running the modified project on the RPI\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+After you cloned the git repository you can start *sbt* in this scala project. With the assembly-plugin it is very easy to\n+package the jar which contains all the dependencies we need for spray.io. From within sbt you can just type *assembly* to\n+the packaging process. If everything worked out you should have a jar file in ./target/scala-2.10/ called something like\n+\"default-...jar\" this is the jar file containing spray.io and everything it needs to run. This jar can now transferred\n+to the RPI. If you are on a Unix-like system you can do it with *scp* or if you are on Windows you can use WinSCP_.\n+\n+The time is now come to start spray-can on the RPI. This is easy. If you transferred the jar from your system to the",
        "path": "docs/blog/2013-07-18-spray-on-the-raspberry-pi.rst",
        "position": null,
        "original_position": 106,
        "commit_id": "5505d4b433fd7633821092557bd799ed31dcec15",
        "original_commit_id": "58623eaefe9ea735bc3d592e7c2dd2a382d20fd0",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\"Now the time has come to start the spray app\"\n",
        "created_at": "2013-07-19T09:41:01Z",
        "updated_at": "2013-07-23T16:30:41Z",
        "html_url": "https://github.com/spray/spray/pull/383#discussion_r5288820",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/383",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5288820"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/383#discussion_r5288820"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/383"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5288849",
        "pull_request_review_id": null,
        "id": 5288849,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg4NDk=",
        "diff_hunk": "@@ -0,0 +1,160 @@\n+:author: matsluni\n+:tags: scala, spray-can, raspberry pi\n+:index-paragraphs: 1\n+:show-post-structure: yes\n+\n+Spray on the Raspberry Pi\n+=========================\n+\n+Introduction\n+------------\n+\n+As a spray newbie and general computer enthusiast I thought of playing around with spray.io and my Raspberry Pi (RPI) at home.\n+In this blog-entry I want to show a small example of how to get started with spray.io on the RPI.\n+\n+The `Raspberry Pi`_ is a credit-card sized computer with a huge amount of use cases. It can be connected to a TV\n+and equipped with Raspbmc_ a special XBMC_-Distribution for the RPI and then be used as a Home Cinema PC (HTPC).\n+A photo-enthusiast enhanced his camera and built a RPI based mini-computer into a battery grip and called this `Camera Pi`_.\n+Just recently I discovered that it also possible to build a `custom GoogleTV`_ with the RPI.\n+It is also possible to use it as a server in your network e.g. fileserver. As you can see, there are a number of possibilities\n+with this little computer.\n+\n+Spray.io is a lightweight REST/HTTP toolkit. It is possible to run spray.io in jetty_, a servlet-container, with the help of\n+the spray-servlet module. But, as many of you know, spray.io has its own HTTP-Server, spray-can, which is the preferred\n+way to run spray.io. As the documentation states it:\n+\n+    spray-can provides a low-level, low-overhead, high-performance HTTP server and client built on top of spray-io.\n+    Both are fully asynchronous, non-blocking and built 100% in Scala on top of Akka.\n+\n+Considering that Java/Scala might normally be a bit to heavy-weight for the RPI, this sounds perfect for me to try it on\n+the RPI.\n+\n+.. _`Raspberry Pi`: http://www.raspberrypi.org\n+.. _Raspbmc: http://www.raspbmc.com\n+.. _XBMC: http://xbmc.org\n+.. _`Camera Pi`: http://www.davidhunt.ie/?p=2641\n+.. _`custom GoogleTV`: http://blog.donaldderek.com/2013/06/build-your-own-google-tv-using-raspberrypi-nodejs-and-socket-io/\n+.. _jetty: http://www.eclipse.org/jetty/\n+\n+JVM on the Raspberry Pi\n+-----------------------\n+\n+Because of the ARM_-based architecture of the RPI and differences in the support of the hardfp_-api you have to\n+be careful which JVM you can use. Currently there are some JVMs available with and without the support of the hardfp-api.\n+If you choose the Debian-based Raspbian_-Distribution as the operating system for the RPI you can use the Oracle\n+early-access version of the Jdk 8 with hardfp-support. Otherwise you can try the OpenJDK-version shipped version of your\n+RPI-Distribution or alternatively a complete other one (e.g. Avian_). No matter the fact that there are different JVMs\n+regarding the support the hardfp-api, it is of no relevance for the demo. You can use either one of them. It only matters\n+that you pick a JVM which is capable of using the hardfp-api-variant of the OS.\n+\n+First, you need a working Linux-Distribution on your RPI. For this introduction I use Raspbian. You can find the\n+Raspian-images on the RPI downloads_-page. I'll use the *Raspbian \u201cwheezy\u201d* image, which is a hard-float image for the RPI.\n+\n+If your Raspbian is in place we can move on further to install the Jdk.\n+\n+For the demo we will use the Jdk from Oracle/Sun. Currently there is a early-access version of the Jdk 8 available\n+for the ARM-Architecture, which is used by the RPI. You can download the Jdk from here_. There is a installguide_ which\n+describes how to install the jdk on the RPI. This is basically a tar-file which you can then simply  un-tar to a folder\n+of your  choice. For this demo it will be ok to just un-tar it in the home-folder of the user *pi*.\n+\n+``tar -xf jdk-8-ea-b36e-linux-arm-hflt-29_nov_2012.tar``\n+\n+This will create the folder *jdk1.8.0* in the current dir. Now, you can type *./jdk1.8.0/bin/java -version* to check that\n+Java will run correctly and to see some version information.\n+\n+.. _ARM: https://en.wikipedia.org/wiki/ARM_architecture\n+.. _hardfp: http://www.raspbian.org/RaspbianFAQ#What_do_you_mean_by_.22soft_float_ABI.22_and_.22hard_float_ABI.22.3F\n+.. _Raspbian: http://www.raspbian.org\n+.. _Avian: https://github.com/ReadyTalk/avian\n+.. _downloads: http://www.raspberrypi.org/downloads\n+.. _here: https://jdk8.java.net/fxarmpreview/index.html\n+.. _installguide: https://blogs.oracle.com/hinkmond/entry/quickie_guide_getting_hard_float\n+\n+Spray-can on the Raspberry Pi\n+-----------------------------\n+\n+So, after our RPI runs a Linux and a JVM, I want to show you how to get started with spray.io on your RPI.\n+\n+For this I created a `customized version`_ of the spray-template project from Github. You can clone this customized version\n+with the command:\n+\n+``git clone https://github.com/matsluni/spray-template.git``\n+\n+Modifications on the spray-template-project\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+This customized version is based on the spray-template-project_ (1.2-M8). This version already uses akka-2.2 including the\n+new IO-module developed together with the spray.io team and is completely actor-based. Furthermore, the customized version\n+includes the `assembly plugin`_ for sbt_ (see build.sbt). This is necessary because it is not possible to build the\n+project on the RPI itself. Therefore we build it on our local system and transfer the complete jar over to our RPI.\n+This packaging is done by the assembly plugin.\n+\n+There are further changes, which include a slightly modified Akka dispatcher config (see application.conf) to reduce\n+the amount of threads to start by the akka-runtime. Otherwise Akka would start up to 64 threads which would kill the JVM\n+of the RPI. Another minor change is to let spray-can listen to all interfaces of the RPI (see Boot.scala). This makes it\n+possible to reach the demo-application from other hosts in the network including our local system.\n+\n+Running the modified project on the RPI\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+After you cloned the git repository you can start *sbt* in this scala project. With the assembly-plugin it is very easy to\n+package the jar which contains all the dependencies we need for spray.io. From within sbt you can just type *assembly* to\n+the packaging process. If everything worked out you should have a jar file in ./target/scala-2.10/ called something like\n+\"default-...jar\" this is the jar file containing spray.io and everything it needs to run. This jar can now transferred\n+to the RPI. If you are on a Unix-like system you can do it with *scp* or if you are on Windows you can use WinSCP_.\n+\n+The time is now come to start spray-can on the RPI. This is easy. If you transferred the jar from your system to the\n+homefolder of the user pi where you also downloaded the jdk you can just enter:\n+\n+``~/jdk1.8.0/bin/java -Xss1M -Xms64M -jar default-a924ea-assembly-0.1.jar``\n+\n+This is a standard Java jar start with modifications for the stacksize of 1Mb (-Xss1M) and the start-heapsize of 64Mb (-Xms64M).\n+\n+If everything worked fine you should see something like:\n+\n+    [INFO] [05/18/2013 08:28:09.287] [on-spray-can-akka.actor.default-dispatcher-3] [akka://on-spray-can/user/IO-HTTP/listener-0] Bound to /0.0.0.0:8080\n+\n+Now you can open your browser and direct it to the ip-address of your RPI and the correct port (both shown above in the\n+log output of spray-can) and you should see the welcome message of spray-routing and spray-can. This shows that spray-can",
        "path": "docs/blog/2013-07-18-spray-on-the-raspberry-pi.rst",
        "position": null,
        "original_position": 118,
        "commit_id": "5505d4b433fd7633821092557bd799ed31dcec15",
        "original_commit_id": "58623eaefe9ea735bc3d592e7c2dd2a382d20fd0",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Is the hostname really shown? It usually just says `0.0.0.0`, or do you mean something else?\n",
        "created_at": "2013-07-19T09:42:52Z",
        "updated_at": "2013-07-23T16:30:41Z",
        "html_url": "https://github.com/spray/spray/pull/383#discussion_r5288849",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/383",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5288849"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/383#discussion_r5288849"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/383"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5758688",
        "pull_request_review_id": null,
        "id": 5758688,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTg2ODg=",
        "diff_hunk": "@@ -0,0 +1,13 @@\n+#######################################\n+# spray-https Reference Config File #",
        "path": "spray-httpx/src/main/resources/reference.conf",
        "position": 2,
        "original_position": 2,
        "commit_id": "c6c56e3d14bdcacc2f82eabfceab8962d98504cb",
        "original_commit_id": "c6c56e3d14bdcacc2f82eabfceab8962d98504cb",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\"spray-httpx\"\n",
        "created_at": "2013-08-14T09:24:27Z",
        "updated_at": "2013-08-14T09:24:27Z",
        "html_url": "https://github.com/spray/spray/pull/434#discussion_r5758688",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/434",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5758688"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/434#discussion_r5758688"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/434"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5758691",
        "pull_request_review_id": null,
        "id": 5758691,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTg2OTE=",
        "diff_hunk": "@@ -20,6 +20,7 @@ import spray.httpx.marshalling.Marshaller\n import spray.httpx.unmarshalling.Unmarshaller\n import spray.json._\n import spray.http._\n+import scala.Predef._",
        "path": "spray-httpx/src/main/scala/spray/httpx/SprayJsonSupport.scala",
        "position": 4,
        "original_position": 4,
        "commit_id": "c6c56e3d14bdcacc2f82eabfceab8962d98504cb",
        "original_commit_id": "c6c56e3d14bdcacc2f82eabfceab8962d98504cb",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "That line shouldn't be needed.\n",
        "created_at": "2013-08-14T09:24:31Z",
        "updated_at": "2013-08-14T09:24:31Z",
        "html_url": "https://github.com/spray/spray/pull/434#discussion_r5758691",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/434",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5758691"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/434#discussion_r5758691"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/434"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5604897",
        "pull_request_review_id": null,
        "id": 5604897,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDQ4OTc=",
        "diff_hunk": "@@ -24,20 +24,32 @@ object SphinxSupport {\n     watchSources <++= (sourceDirectory in sphinxCompile) map { d => (d ***).get.map(_.getAbsoluteFile) }\n   )\n \n-  def compileSphinxSources(script: String, sourceDir: File, targetDir: File, v: String, state: State) = {\n+  def compileSphinxSources(script: Option[File], sourceDir: File, targetDir: File, v: String, state: State) = {\n     val log = colorLog(state)\n     log(\"[YELLOW]Recompiling Sphinx sources...\")\n     if (script.nonEmpty) {\n-      val cmd = \"%1$s -b json -d %3$s/doctrees -D version=%4$s -D release=%4$s %2$s %3$s/json\".format(script, sourceDir, targetDir, v)\n+      val cmd = \"%1$s -b json -d %3$s/doctrees -D version=%4$s -D release=%4$s %2$s %3$s/json\".format(script.get, sourceDir, targetDir, v)\n       log(cmd)\n       val exitCode = Process(cmd) ! state.log\n       if (exitCode != 0) sys.error(\"Error compiling sphinx sources\")\n \n       (targetDir / \"json\" ** (\"*.fjson\" | \"*.svg\" | \"*.png\")).get.map(_.getAbsoluteFile)\n     } else {\n-      log(\"[YELLOW]Environment variable SPHINX_PATH (pointing to sphinx-build script) not set, skipping Sphinx run...\")\n+      log(\"[YELLOW]sphinx-script not found, please point SPHINX_PATH to the sphinx-build script. Skipping Sphinx run...\")\n       Nil\n     }\n   }\n \n+  val wellKnownSphinxLocations =\n+    Seq(\n+      \"/usr/bin/sphinx-build\",               // Ubuntu\n+      \"/usr/local/share/python/sphinx-build\" // OS/X",
        "path": "project/SphinxSupport.scala",
        "position": null,
        "original_position": 41,
        "commit_id": "827b920f113e612db3a311fb77be8922a24724ea",
        "original_commit_id": "84cd1f1b9a75cba4e881cfd955089f1a3c5bfb1a",
        "user": {
            "login": "agemooij",
            "id": 46568,
            "node_id": "MDQ6VXNlcjQ2NTY4",
            "avatar_url": "https://avatars2.githubusercontent.com/u/46568?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/agemooij",
            "html_url": "https://github.com/agemooij",
            "followers_url": "https://api.github.com/users/agemooij/followers",
            "following_url": "https://api.github.com/users/agemooij/following{/other_user}",
            "gists_url": "https://api.github.com/users/agemooij/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/agemooij/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/agemooij/subscriptions",
            "organizations_url": "https://api.github.com/users/agemooij/orgs",
            "repos_url": "https://api.github.com/users/agemooij/repos",
            "events_url": "https://api.github.com/users/agemooij/events{/privacy}",
            "received_events_url": "https://api.github.com/users/agemooij/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "My version of Sphinx (1.2b1) was installed using pip, which was installed as a side effect of installing Python with Homebrew. The end result is that `sphinx-build` ended up in `/usr/local/bin` along with all the other Homebrew-installed binaries, so that might also be a good place to find it on OSX.\n",
        "created_at": "2013-08-06T14:18:32Z",
        "updated_at": "2013-08-15T13:21:08Z",
        "html_url": "https://github.com/spray/spray/pull/419#discussion_r5604897",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/419",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5604897"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/419#discussion_r5604897"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/419"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5789574",
        "pull_request_review_id": null,
        "id": 5789574,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODk1NzQ=",
        "diff_hunk": "@@ -24,20 +24,32 @@ object SphinxSupport {\n     watchSources <++= (sourceDirectory in sphinxCompile) map { d => (d ***).get.map(_.getAbsoluteFile) }\n   )\n \n-  def compileSphinxSources(script: String, sourceDir: File, targetDir: File, v: String, state: State) = {\n+  def compileSphinxSources(script: Option[File], sourceDir: File, targetDir: File, v: String, state: State) = {\n     val log = colorLog(state)\n     log(\"[YELLOW]Recompiling Sphinx sources...\")\n     if (script.nonEmpty) {\n-      val cmd = \"%1$s -b json -d %3$s/doctrees -D version=%4$s -D release=%4$s %2$s %3$s/json\".format(script, sourceDir, targetDir, v)\n+      val cmd = \"%1$s -b json -d %3$s/doctrees -D version=%4$s -D release=%4$s %2$s %3$s/json\".format(script.get, sourceDir, targetDir, v)\n       log(cmd)\n       val exitCode = Process(cmd) ! state.log\n       if (exitCode != 0) sys.error(\"Error compiling sphinx sources\")\n \n       (targetDir / \"json\" ** (\"*.fjson\" | \"*.svg\" | \"*.png\")).get.map(_.getAbsoluteFile)\n     } else {\n-      log(\"[YELLOW]Environment variable SPHINX_PATH (pointing to sphinx-build script) not set, skipping Sphinx run...\")\n+      log(\"[YELLOW]sphinx-script not found, please point SPHINX_PATH to the sphinx-build script. Skipping Sphinx run...\")\n       Nil\n     }\n   }\n \n+  val wellKnownSphinxLocations =\n+    Seq(\n+      \"/usr/bin/sphinx-build\",               // Ubuntu\n+      \"/usr/local/share/python/sphinx-build\" // OS/X",
        "path": "project/SphinxSupport.scala",
        "position": null,
        "original_position": 41,
        "commit_id": "827b920f113e612db3a311fb77be8922a24724ea",
        "original_commit_id": "84cd1f1b9a75cba4e881cfd955089f1a3c5bfb1a",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Thanks. I added this one as well.\n",
        "created_at": "2013-08-15T13:21:18Z",
        "updated_at": "2013-08-15T13:21:18Z",
        "html_url": "https://github.com/spray/spray/pull/419#discussion_r5789574",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/419",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5789574"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/419#discussion_r5789574"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/419"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5897429",
        "pull_request_review_id": null,
        "id": 5897429,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4OTc0Mjk=",
        "diff_hunk": "@@ -19,10 +19,21 @@ package spray.util\n import akka.actor.ActorSystem\n import com.typesafe.config.Config\n import com.typesafe.config.ConfigFactory._\n+import scala.collection.immutable.ListMap\n \n abstract class SettingsCompanion[T](prefix: String) {\n+  private final val MaxCached = 8\n+  private[this] var cache = ListMap.empty[ActorSystem, T]\n+\n   def apply(system: ActorSystem): T =\n-    apply(system.settings.config)\n+    cache.getOrElse(system, {\n+      val settings = apply(system.settings.config)\n+      val c =\n+        if (cache.size < MaxCached) cache\n+        else cache.tail // drop the first (and oldest) cache entry\n+      cache = c.updated(system, settings)",
        "path": "spray-util/src/main/scala/spray/util/SettingsCompanion.scala",
        "position": null,
        "original_position": 17,
        "commit_id": "e234dd99388e4f3ff02af3bbe175c9db739ee26a",
        "original_commit_id": "9c4260282a8d20862973713ca47158002218081a",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Maybe you could add a comment on why it's not necessary to synchronize on cache changes.\n",
        "created_at": "2013-08-21T14:53:51Z",
        "updated_at": "2013-08-21T15:16:25Z",
        "html_url": "https://github.com/spray/spray/pull/452#discussion_r5897429",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/452",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5897429"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/452#discussion_r5897429"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/452"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5897654",
        "pull_request_review_id": null,
        "id": 5897654,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4OTc2NTQ=",
        "diff_hunk": "@@ -19,10 +19,21 @@ package spray.util\n import akka.actor.ActorSystem\n import com.typesafe.config.Config\n import com.typesafe.config.ConfigFactory._\n+import scala.collection.immutable.ListMap\n \n abstract class SettingsCompanion[T](prefix: String) {\n+  private final val MaxCached = 8\n+  private[this] var cache = ListMap.empty[ActorSystem, T]\n+\n   def apply(system: ActorSystem): T =\n-    apply(system.settings.config)\n+    cache.getOrElse(system, {\n+      val settings = apply(system.settings.config)\n+      val c =\n+        if (cache.size < MaxCached) cache\n+        else cache.tail // drop the first (and oldest) cache entry\n+      cache = c.updated(system, settings)",
        "path": "spray-util/src/main/scala/spray/util/SettingsCompanion.scala",
        "position": null,
        "original_position": 17,
        "commit_id": "e234dd99388e4f3ff02af3bbe175c9db739ee26a",
        "original_commit_id": "9c4260282a8d20862973713ca47158002218081a",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Good point. I would say it _is_ necessary and leaving it out is a bug.\nAm I wrong?\n",
        "created_at": "2013-08-21T15:01:22Z",
        "updated_at": "2013-08-21T15:16:25Z",
        "html_url": "https://github.com/spray/spray/pull/452#discussion_r5897654",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/452",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5897654"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/452#discussion_r5897654"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/452"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/5813424",
        "pull_request_review_id": null,
        "id": 5813424,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTM0MjQ=",
        "diff_hunk": "@@ -284,6 +284,22 @@ object HttpHeaders {\n     protected def companion = Origin\n   }\n \n+  object `Proxy-Authenticate` extends ModeledCompanion {\n+    def apply(first: HttpChallenge, more: HttpChallenge*): `Proxy-Authenticate` = apply(first +: more)\n+    implicit val challengesRenderer = Renderer.defaultSeqRenderer[HttpChallenge] // cache\n+  }\n+  case class `Proxy-Authenticate`(challenges: Seq[HttpChallenge]) extends ModeledHeader {\n+    import `Proxy-Authenticate`.challengesRenderer\n+    def renderValue[R <: Rendering](r: R): r.type = r ~~ challenges\n+    protected def companion = `Proxy-Authenticate`\n+  }\n+\n+  object `Proxy-Authorization` extends ModeledCompanion\n+  case class `Proxy-Authorization`(credentials: HttpCredentials) extends ModeledHeader {\n+    def renderValue[R <: Rendering](r: R): r.type = r ~~ credentials\n+    protected def companion = `Proxy-Authorization`\n+  }\n+",
        "path": "spray-http/src/main/scala/spray/http/HttpHeader.scala",
        "position": null,
        "original_position": 19,
        "commit_id": "cacd005a84ed3266d4b2c184ae45c1ccc535b847",
        "original_commit_id": "24a8e8df29dc50316c94700a5239182700b1f16b",
        "user": {
            "login": "2beaucoup",
            "id": 243903,
            "node_id": "MDQ6VXNlcjI0MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/243903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/2beaucoup",
            "html_url": "https://github.com/2beaucoup",
            "followers_url": "https://api.github.com/users/2beaucoup/followers",
            "following_url": "https://api.github.com/users/2beaucoup/following{/other_user}",
            "gists_url": "https://api.github.com/users/2beaucoup/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/2beaucoup/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/2beaucoup/subscriptions",
            "organizations_url": "https://api.github.com/users/2beaucoup/orgs",
            "repos_url": "https://api.github.com/users/2beaucoup/repos",
            "events_url": "https://api.github.com/users/2beaucoup/events{/privacy}",
            "received_events_url": "https://api.github.com/users/2beaucoup/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "These are plain copies of `WWW-Authenticate`/`Authorization`. Should these be DRYed up?\n",
        "created_at": "2013-08-16T13:19:34Z",
        "updated_at": "2013-08-23T12:37:47Z",
        "html_url": "https://github.com/spray/spray/pull/432#discussion_r5813424",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/432",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/5813424"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/432#discussion_r5813424"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/432"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6001385",
        "pull_request_review_id": null,
        "id": 6001385,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDEzODU=",
        "diff_hunk": "@@ -0,0 +1,27 @@\n+.. _-schemeName-:\n+\n+schemeName\n+==========\n+\n+Extracts the value of the request Uri scheme.\n+\n+Signature\n+---------\n+\n+.. includecode:: /../spray-routing/src/main/scala/spray/routing/directives/SchemeDirectives.scala\n+   :snippet: schemeName\n+\n+Description\n+-----------\n+\n+The ``schemeName`` directive can be used to determine the Uri scheme (i.e. \"http\", \"https\", etc.)\n+for an incoming request. If the request is a relative one, the extracted scheme name will be the",
        "path": "docs/documentation/spray-routing/scheme-directives/schemeName.rst",
        "position": null,
        "original_position": 18,
        "commit_id": "4a1461a2205d3b1a496ba48fbb4cf4e46a694689",
        "original_commit_id": "4ded64a383ffbfb808a1aec001c0e03aea8b29da",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Actually, the request should never have a relative URI in spray-routing. We just found out that it is a bug that you are able to write tests which produce relative URIs. I would suggest you just remove this sentence.\n",
        "created_at": "2013-08-27T10:12:09Z",
        "updated_at": "2013-08-27T11:09:41Z",
        "html_url": "https://github.com/spray/spray/pull/417#discussion_r6001385",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/417",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6001385"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/417#discussion_r6001385"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/417"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6001404",
        "pull_request_review_id": null,
        "id": 6001404,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDE0MDQ=",
        "diff_hunk": "@@ -0,0 +1,43 @@\n+package docs.directives\n+\n+import spray.http.Uri\n+import spray.http.StatusCodes._\n+import spray.http.HttpHeaders._\n+\n+class SchemeDirectivesExamplesSpec extends DirectivesSpec {\n+  \"example-1\" in {\n+    val route =\n+      schemeName { scheme =>\n+        complete(s\"The scheme is '${scheme}'\")\n+      }\n+\n+    Get(\"https://www.example.com/\") ~> route ~> check {\n+      entityAs[String] === \"The scheme is 'https'\"\n+    }\n+\n+    Get(\"/hello\") ~> route ~> check {",
        "path": "docs/documentation/spray-routing/code/docs/directives/SchemeDirectivesExamplesSpec.scala",
        "position": null,
        "original_position": 18,
        "commit_id": "4a1461a2205d3b1a496ba48fbb4cf4e46a694689",
        "original_commit_id": "4ded64a383ffbfb808a1aec001c0e03aea8b29da",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Also remove this test because of the comment below.\n",
        "created_at": "2013-08-27T10:13:28Z",
        "updated_at": "2013-08-27T11:09:41Z",
        "html_url": "https://github.com/spray/spray/pull/417#discussion_r6001404",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/417",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6001404"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/417#discussion_r6001404"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/417"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6001423",
        "pull_request_review_id": null,
        "id": 6001423,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDE0MjM=",
        "diff_hunk": "@@ -0,0 +1,31 @@\n+.. _-scheme-:\n+\n+scheme\n+======\n+\n+Rejects a request if its Uri scheme does not match a given one.\n+\n+Signature\n+---------\n+\n+.. includecode:: /../spray-routing/src/main/scala/spray/routing/directives/SchemeDirectives.scala\n+   :snippet: scheme(",
        "path": "docs/documentation/spray-routing/scheme-directives/scheme.rst",
        "position": null,
        "original_position": 12,
        "commit_id": "4a1461a2205d3b1a496ba48fbb4cf4e46a694689",
        "original_commit_id": "4ded64a383ffbfb808a1aec001c0e03aea8b29da",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Haha, I just found out that with the bug fixed, you currently _cannot_ use the suffix `(` or the sphinx will fail. However, it should now work without...\n",
        "created_at": "2013-08-27T10:14:23Z",
        "updated_at": "2013-08-27T11:09:41Z",
        "html_url": "https://github.com/spray/spray/pull/417#discussion_r6001423",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/417",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6001423"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/417#discussion_r6001423"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/417"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6001436",
        "pull_request_review_id": null,
        "id": 6001436,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDE0MzY=",
        "diff_hunk": "@@ -0,0 +1,31 @@\n+.. _-scheme-:\n+\n+scheme\n+======\n+\n+Rejects a request if its Uri scheme does not match a given one.\n+\n+Signature\n+---------\n+\n+.. includecode:: /../spray-routing/src/main/scala/spray/routing/directives/SchemeDirectives.scala\n+   :snippet: scheme(",
        "path": "docs/documentation/spray-routing/scheme-directives/scheme.rst",
        "position": null,
        "original_position": 12,
        "commit_id": "4a1461a2205d3b1a496ba48fbb4cf4e46a694689",
        "original_commit_id": "4ded64a383ffbfb808a1aec001c0e03aea8b29da",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I.e. this fix I mentioned in the PR https://github.com/spray/spray/commit/9dded0e6d01f79a3e54acbd43dc56f654419a03d. So, please just remove the parentheses for now.\n",
        "created_at": "2013-08-27T10:15:06Z",
        "updated_at": "2013-08-27T11:09:41Z",
        "html_url": "https://github.com/spray/spray/pull/417#discussion_r6001436",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/417",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6001436"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/417#discussion_r6001436"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/417"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6001467",
        "pull_request_review_id": null,
        "id": 6001467,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDE0Njc=",
        "diff_hunk": "@@ -0,0 +1,43 @@\n+package docs.directives\n+\n+import spray.http.Uri\n+import spray.http.StatusCodes._\n+import spray.http.HttpHeaders._\n+\n+class SchemeDirectivesExamplesSpec extends DirectivesSpec {\n+  \"example-1\" in {\n+    val route =\n+      schemeName { scheme =>\n+        complete(s\"The scheme is '${scheme}'\")\n+      }\n+\n+    Get(\"https://www.example.com/\") ~> route ~> check {\n+      entityAs[String] === \"The scheme is 'https'\"\n+    }\n+\n+    Get(\"/hello\") ~> route ~> check {",
        "path": "docs/documentation/spray-routing/code/docs/directives/SchemeDirectivesExamplesSpec.scala",
        "position": null,
        "original_position": 18,
        "commit_id": "4a1461a2205d3b1a496ba48fbb4cf4e46a694689",
        "original_commit_id": "4ded64a383ffbfb808a1aec001c0e03aea8b29da",
        "user": {
            "login": "agemooij",
            "id": 46568,
            "node_id": "MDQ6VXNlcjQ2NTY4",
            "avatar_url": "https://avatars2.githubusercontent.com/u/46568?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/agemooij",
            "html_url": "https://github.com/agemooij",
            "followers_url": "https://api.github.com/users/agemooij/followers",
            "following_url": "https://api.github.com/users/agemooij/following{/other_user}",
            "gists_url": "https://api.github.com/users/agemooij/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/agemooij/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/agemooij/subscriptions",
            "organizations_url": "https://api.github.com/users/agemooij/orgs",
            "repos_url": "https://api.github.com/users/agemooij/repos",
            "events_url": "https://api.github.com/users/agemooij/events{/privacy}",
            "received_events_url": "https://api.github.com/users/agemooij/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Shall I remove the relative tests from SchemeDirectivesSpec  too?\n",
        "created_at": "2013-08-27T10:17:26Z",
        "updated_at": "2013-08-27T11:09:41Z",
        "html_url": "https://github.com/spray/spray/pull/417#discussion_r6001467",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/417",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6001467"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/417#discussion_r6001467"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/417"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6001503",
        "pull_request_review_id": null,
        "id": 6001503,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDE1MDM=",
        "diff_hunk": "@@ -0,0 +1,43 @@\n+package docs.directives\n+\n+import spray.http.Uri\n+import spray.http.StatusCodes._\n+import spray.http.HttpHeaders._\n+\n+class SchemeDirectivesExamplesSpec extends DirectivesSpec {\n+  \"example-1\" in {\n+    val route =\n+      schemeName { scheme =>\n+        complete(s\"The scheme is '${scheme}'\")\n+      }\n+\n+    Get(\"https://www.example.com/\") ~> route ~> check {\n+      entityAs[String] === \"The scheme is 'https'\"\n+    }\n+\n+    Get(\"/hello\") ~> route ~> check {",
        "path": "docs/documentation/spray-routing/code/docs/directives/SchemeDirectivesExamplesSpec.scala",
        "position": null,
        "original_position": 18,
        "commit_id": "4a1461a2205d3b1a496ba48fbb4cf4e46a694689",
        "original_commit_id": "4ded64a383ffbfb808a1aec001c0e03aea8b29da",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yes, I think so because they will all start to fail once we've fixed the inconsistency in the spray-testkit.\n",
        "created_at": "2013-08-27T10:19:01Z",
        "updated_at": "2013-08-27T11:09:41Z",
        "html_url": "https://github.com/spray/spray/pull/417#discussion_r6001503",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/417",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6001503"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/417#discussion_r6001503"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/417"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6002120",
        "pull_request_review_id": null,
        "id": 6002120,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDIxMjA=",
        "diff_hunk": "@@ -98,6 +98,15 @@ class RejectionHandlerSpec extends RoutingSpec {\n         entityAs[String] === \"HTTP method not allowed, supported methods: GET, PUT\"\n       }\n     }\n+    \"respond with BadRequest for requests resulting in SchemeRejections\" in {\n+      Get(\"/\") ~> wrap {",
        "path": "spray-routing-tests/src/test/scala/spray/routing/RejectionHandlerSpec.scala",
        "position": null,
        "original_position": 5,
        "commit_id": "4a1461a2205d3b1a496ba48fbb4cf4e46a694689",
        "original_commit_id": "cf4bc445dccb8f0752c978694731a1efbf891388",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Locally, I merged my previously mentioned fix for the absolute URI behavior with your PR, and this test came out as failing. That's because now all requests like this are automatically \"absolutized\" using \"http://example.com\" which then doesn't produce the rejection here.\n\nThe test can be made working if you put `Get(\"custom:/\")` here instead which is seen as a strange but absolute URI and won't be touched by the new logic.\n",
        "created_at": "2013-08-27T11:00:23Z",
        "updated_at": "2013-08-27T11:09:41Z",
        "html_url": "https://github.com/spray/spray/pull/417#discussion_r6002120",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/417",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6002120"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/417#discussion_r6002120"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/417"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6002220",
        "pull_request_review_id": null,
        "id": 6002220,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDIyMjA=",
        "diff_hunk": "@@ -98,6 +98,15 @@ class RejectionHandlerSpec extends RoutingSpec {\n         entityAs[String] === \"HTTP method not allowed, supported methods: GET, PUT\"\n       }\n     }\n+    \"respond with BadRequest for requests resulting in SchemeRejections\" in {\n+      Get(\"/\") ~> wrap {",
        "path": "spray-routing-tests/src/test/scala/spray/routing/RejectionHandlerSpec.scala",
        "position": null,
        "original_position": 5,
        "commit_id": "4a1461a2205d3b1a496ba48fbb4cf4e46a694689",
        "original_commit_id": "cf4bc445dccb8f0752c978694731a1efbf891388",
        "user": {
            "login": "agemooij",
            "id": 46568,
            "node_id": "MDQ6VXNlcjQ2NTY4",
            "avatar_url": "https://avatars2.githubusercontent.com/u/46568?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/agemooij",
            "html_url": "https://github.com/agemooij",
            "followers_url": "https://api.github.com/users/agemooij/followers",
            "following_url": "https://api.github.com/users/agemooij/following{/other_user}",
            "gists_url": "https://api.github.com/users/agemooij/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/agemooij/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/agemooij/subscriptions",
            "organizations_url": "https://api.github.com/users/agemooij/orgs",
            "repos_url": "https://api.github.com/users/agemooij/repos",
            "events_url": "https://api.github.com/users/agemooij/events{/privacy}",
            "received_events_url": "https://api.github.com/users/agemooij/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think I'll just let it fail by getting an http resource while only allowing https, that would make the code nice and simple. Coming up.\n",
        "created_at": "2013-08-27T11:06:49Z",
        "updated_at": "2013-08-27T11:09:41Z",
        "html_url": "https://github.com/spray/spray/pull/417#discussion_r6002220",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/417",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6002220"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/417#discussion_r6002220"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/417"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6032066",
        "pull_request_review_id": null,
        "id": 6032066,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMzIwNjY=",
        "diff_hunk": "@@ -0,0 +1,115 @@\n+package docs.directives\n+\n+import spray.http.{BasicHttpCredentials, HttpChallenge, StatusCodes, HttpHeaders}\n+import spray.routing.authentication.{BasicAuth, UserPass}\n+import scala.concurrent.Future\n+import com.typesafe.config.ConfigFactory\n+\n+class SecurityDirectivesExamplesSpec extends DirectivesSpec {\n+  \"authenticate-custom-user-pass-authenticator\" in {\n+    def myUserPassAuthenticator(userPass: Option[UserPass]): Future[Option[String]] =\n+      Future {\n+        if (userPass.exists(up => up.user == \"John\" && up.pass == \"p4ssw0rd\")) Some(\"John\")\n+        else None\n+      }\n+\n+    val route =\n+      sealRoute {\n+        path(\"secured\") {\n+          authenticate(BasicAuth(myUserPassAuthenticator _, realm = \"secure site\")) { userName =>\n+            complete(s\"The user is '$userName'\")\n+          }\n+        }\n+      }\n+\n+    Get(\"/secured\") ~> sealRoute(route) ~> check {",
        "path": "docs/documentation/spray-routing/code/docs/directives/SecurityDirectivesExamplesSpec.scala",
        "position": 25,
        "original_position": 25,
        "commit_id": "10dc25e6521b8bd009996711f79265129b4af5f6",
        "original_commit_id": "10dc25e6521b8bd009996711f79265129b4af5f6",
        "user": {
            "login": "martin-g",
            "id": 232002,
            "node_id": "MDQ6VXNlcjIzMjAwMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/232002?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/martin-g",
            "html_url": "https://github.com/martin-g",
            "followers_url": "https://api.github.com/users/martin-g/followers",
            "following_url": "https://api.github.com/users/martin-g/following{/other_user}",
            "gists_url": "https://api.github.com/users/martin-g/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/martin-g/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/martin-g/subscriptions",
            "organizations_url": "https://api.github.com/users/martin-g/orgs",
            "repos_url": "https://api.github.com/users/martin-g/repos",
            "events_url": "https://api.github.com/users/martin-g/events{/privacy}",
            "received_events_url": "https://api.github.com/users/martin-g/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "the route is already sealed.\nsince this is for documentation it may lead to questions like : why seal twice?\n",
        "created_at": "2013-08-28T12:49:42Z",
        "updated_at": "2013-08-28T12:49:42Z",
        "html_url": "https://github.com/spray/spray/pull/466#discussion_r6032066",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/466",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6032066"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/466#discussion_r6032066"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/466"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6032176",
        "pull_request_review_id": null,
        "id": 6032176,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMzIxNzY=",
        "diff_hunk": "@@ -0,0 +1,115 @@\n+package docs.directives\n+\n+import spray.http.{BasicHttpCredentials, HttpChallenge, StatusCodes, HttpHeaders}\n+import spray.routing.authentication.{BasicAuth, UserPass}\n+import scala.concurrent.Future\n+import com.typesafe.config.ConfigFactory\n+\n+class SecurityDirectivesExamplesSpec extends DirectivesSpec {\n+  \"authenticate-custom-user-pass-authenticator\" in {\n+    def myUserPassAuthenticator(userPass: Option[UserPass]): Future[Option[String]] =\n+      Future {\n+        if (userPass.exists(up => up.user == \"John\" && up.pass == \"p4ssw0rd\")) Some(\"John\")\n+        else None\n+      }\n+\n+    val route =\n+      sealRoute {\n+        path(\"secured\") {\n+          authenticate(BasicAuth(myUserPassAuthenticator _, realm = \"secure site\")) { userName =>\n+            complete(s\"The user is '$userName'\")\n+          }\n+        }\n+      }\n+\n+    Get(\"/secured\") ~> sealRoute(route) ~> check {\n+      status === StatusCodes.Unauthorized\n+      entityAs[String] === \"The resource requires authentication, which was not supplied with the request\"\n+      header[HttpHeaders.`WWW-Authenticate`].get.challenges.head === HttpChallenge(\"Basic\", \"secure site\")\n+    }\n+\n+    val validCredentials = BasicHttpCredentials(\"John\", \"p4ssw0rd\")\n+    Get(\"/secured\") ~>\n+      addCredentials(validCredentials) ~> // adds Authorization header\n+      route ~> check {\n+      entityAs[String] === \"The user is 'John'\"\n+    }\n+\n+    val invalidCredentials = BasicHttpCredentials(\"Peter\", \"pan\")\n+    Get(\"/secured\") ~>\n+      addCredentials(invalidCredentials) ~>  // adds Authorization header\n+      sealRoute(route) ~> check {\n+        status === StatusCodes.Unauthorized\n+        entityAs[String] === \"The supplied authentication is invalid\"\n+        header[HttpHeaders.`WWW-Authenticate`].get.challenges.head === HttpChallenge(\"Basic\", \"secure site\")\n+      }\n+  }\n+\n+  \"authenticate-from-config\" in {\n+    def extractUser(userPass: UserPass): String = userPass.user\n+    val config = ConfigFactory.parseString(\"John = p4ssw0rd\")\n+\n+    val route =\n+      sealRoute {\n+        path(\"secured\") {\n+          authenticate(BasicAuth(realm = \"secure site\", config = config, createUser = extractUser _)) { userName =>\n+            complete(s\"The user is '$userName'\")\n+          }\n+        }\n+      }\n+\n+    Get(\"/secured\") ~> route ~> check {\n+      status === StatusCodes.Unauthorized\n+      entityAs[String] === \"The resource requires authentication, which was not supplied with the request\"\n+      header[HttpHeaders.`WWW-Authenticate`].get.challenges.head === HttpChallenge(\"Basic\", \"secure site\")\n+    }\n+\n+    val validCredentials = BasicHttpCredentials(\"John\", \"p4ssw0rd\")\n+    Get(\"/secured\") ~>\n+      addCredentials(validCredentials) ~>  // adds Authorization header\n+      route ~> check {\n+      entityAs[String] === \"The user is 'John'\"\n+    }\n+\n+    val invalidCredentials = BasicHttpCredentials(\"Peter\", \"pan\")\n+    Get(\"/secured\") ~>\n+      addCredentials(invalidCredentials) ~>  // adds Authorization header\n+      route ~> check {\n+        status === StatusCodes.Unauthorized\n+        entityAs[String] === \"The supplied authentication is invalid\"\n+        header[HttpHeaders.`WWW-Authenticate`].get.challenges.head === HttpChallenge(\"Basic\", \"secure site\")\n+      }\n+  }\n+\n+  \"authorize-1\" in {\n+    def extractUser(userPass: UserPass): String = userPass.user\n+    val config = ConfigFactory.parseString(\"John = p4ssw0rd\\nPeter = pan\")\n+    def hasPermissionToPetersLair(userName: String) = userName == \"Peter\"\n+\n+    val route =\n+      sealRoute {\n+        authenticate(BasicAuth(realm = \"secure site\", config = config, createUser = extractUser _)) { userName =>\n+          path(\"peters-lair\") {\n+            authorize(hasPermissionToPetersLair(userName)) {\n+              complete(s\"'$userName' visited Peter's lair\")\n+            }\n+          }\n+        }\n+      }\n+\n+    val paulsCred = BasicHttpCredentials(\"John\", \"p4ssw0rd\")",
        "path": "docs/documentation/spray-routing/code/docs/directives/SecurityDirectivesExamplesSpec.scala",
        "position": 100,
        "original_position": 100,
        "commit_id": "10dc25e6521b8bd009996711f79265129b4af5f6",
        "original_commit_id": "10dc25e6521b8bd009996711f79265129b4af5f6",
        "user": {
            "login": "martin-g",
            "id": 232002,
            "node_id": "MDQ6VXNlcjIzMjAwMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/232002?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/martin-g",
            "html_url": "https://github.com/martin-g",
            "followers_url": "https://api.github.com/users/martin-g/followers",
            "following_url": "https://api.github.com/users/martin-g/following{/other_user}",
            "gists_url": "https://api.github.com/users/martin-g/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/martin-g/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/martin-g/subscriptions",
            "organizations_url": "https://api.github.com/users/martin-g/orgs",
            "repos_url": "https://api.github.com/users/martin-g/repos",
            "events_url": "https://api.github.com/users/martin-g/events{/privacy}",
            "received_events_url": "https://api.github.com/users/martin-g/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "paul != john\n",
        "created_at": "2013-08-28T12:54:29Z",
        "updated_at": "2013-08-28T12:54:29Z",
        "html_url": "https://github.com/spray/spray/pull/466#discussion_r6032176",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/466",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6032176"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/466#discussion_r6032176"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/466"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6082277",
        "pull_request_review_id": null,
        "id": 6082277,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODIyNzc=",
        "diff_hunk": "@@ -340,8 +340,26 @@ trait PathMatchers {\n     }\n   }\n \n+  /**\n+   * A PathMatcher that matches all remaining segments as a List[String].\n+   * This can also be no segments resulting in the empty list. This matcher will\n+   * will consume the complete remaining path so it isn't possible to match a suffix",
        "path": "spray-routing/src/main/scala/spray/routing/PathMatcher.scala",
        "position": null,
        "original_position": 7,
        "commit_id": "529ce4e25c83df0a23ef9b784813874c66980d87",
        "original_commit_id": "22a450be019870a51f10f7c6cd571954afa4e909",
        "user": {
            "login": "martin-g",
            "id": 232002,
            "node_id": "MDQ6VXNlcjIzMjAwMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/232002?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/martin-g",
            "html_url": "https://github.com/martin-g",
            "followers_url": "https://api.github.com/users/martin-g/followers",
            "following_url": "https://api.github.com/users/martin-g/following{/other_user}",
            "gists_url": "https://api.github.com/users/martin-g/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/martin-g/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/martin-g/subscriptions",
            "organizations_url": "https://api.github.com/users/martin-g/orgs",
            "repos_url": "https://api.github.com/users/martin-g/repos",
            "events_url": "https://api.github.com/users/martin-g/events{/privacy}",
            "received_events_url": "https://api.github.com/users/martin-g/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Two \"will\" in \"This matcher will will consume\".\n",
        "created_at": "2013-08-30T09:25:45Z",
        "updated_at": "2013-08-30T09:27:51Z",
        "html_url": "https://github.com/spray/spray/pull/475#discussion_r6082277",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/475",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6082277"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/475#discussion_r6082277"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/475"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6082313",
        "pull_request_review_id": null,
        "id": 6082313,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODIzMTM=",
        "diff_hunk": "@@ -340,8 +340,26 @@ trait PathMatchers {\n     }\n   }\n \n+  /**\n+   * A PathMatcher that matches all remaining segments as a List[String].\n+   * This can also be no segments resulting in the empty list. This matcher will\n+   * will consume the complete remaining path so it isn't possible to match a suffix",
        "path": "spray-routing/src/main/scala/spray/routing/PathMatcher.scala",
        "position": null,
        "original_position": 7,
        "commit_id": "529ce4e25c83df0a23ef9b784813874c66980d87",
        "original_commit_id": "22a450be019870a51f10f7c6cd571954afa4e909",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Fixed, thanks again @martin-g !\n",
        "created_at": "2013-08-30T09:28:04Z",
        "updated_at": "2013-08-30T09:28:04Z",
        "html_url": "https://github.com/spray/spray/pull/475#discussion_r6082313",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/475",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6082313"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/475#discussion_r6082313"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/475"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6148642",
        "pull_request_review_id": null,
        "id": 6148642,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDg2NDI=",
        "diff_hunk": "@@ -378,8 +380,24 @@ object HttpHeaders {\n     protected def companion = `X-Forwarded-For`\n   }\n \n+  /**\n+   * Provides information about the SSL session the message was received over.\n+   *\n+   * For non-certificate based cipher suites (e.g., Kerberos), `localCertificates` and `peerCertificates` are both empty lists.\n+   */\n+  object `SSL-Session-Info` extends ModeledCompanion\n+  case class `SSL-Session-Info`(\n+      cipherSuite: String,\n+      localCertificates: List[Certificate],\n+      localPrincipal: Principal,\n+      peerCertificates: List[Certificate],\n+      peerPrincipal: Principal) extends ModeledHeader {\n+    def renderValue[R <: Rendering](r: R): r.type = r ~~ peerPrincipal.toString",
        "path": "spray-http/src/main/scala/spray/http/HttpHeader.scala",
        "position": null,
        "original_position": 33,
        "commit_id": "e48690062296816d8238b58f3cb91872e42cd6a2",
        "original_commit_id": "269a96284081440b1569cfa23a3043c42c8946c0",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "If we don't render all the parameters here, we should override `toString` which otherwise depends on `renderValue` to render a string representation.\n",
        "created_at": "2013-09-04T09:14:05Z",
        "updated_at": "2013-09-09T16:11:34Z",
        "html_url": "https://github.com/spray/spray/pull/487#discussion_r6148642",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/487",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6148642"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/487#discussion_r6148642"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/487"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6148687",
        "pull_request_review_id": null,
        "id": 6148687,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDg2ODc=",
        "diff_hunk": "@@ -157,7 +162,11 @@ object SslTlsSupport extends OptionalPipelineStage[SslTlsContext] {\n         if (tempBuf.remaining > 0) eventPL(Tcp.Received(ByteString(tempBuf)))\n         result.getStatus match {\n           case OK \u21d2 result.getHandshakeStatus match {\n-            case NOT_HANDSHAKING | FINISHED \u21d2\n+            case NOT_HANDSHAKING \u21d2\n+              if (buffer.remaining > 0) decrypt(buffer, tempBuf)",
        "path": "spray-io/src/main/scala/spray/io/SslTlsSupport.scala",
        "position": null,
        "original_position": 29,
        "commit_id": "e48690062296816d8238b58f3cb91872e42cd6a2",
        "original_commit_id": "269a96284081440b1569cfa23a3043c42c8946c0",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Can we DRY this up? Maybe just leave the case pattern and use `if (status == FINISHED) publishEvent()`. Also we should DRY the behavior up between `encrypt` and `decrypt`.\n",
        "created_at": "2013-09-04T09:16:33Z",
        "updated_at": "2013-09-09T16:11:34Z",
        "html_url": "https://github.com/spray/spray/pull/487#discussion_r6148687",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/487",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6148687"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/487#discussion_r6148687"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/487"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6148773",
        "pull_request_review_id": null,
        "id": 6148773,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDg3NzM=",
        "diff_hunk": "@@ -237,6 +246,48 @@ object SslTlsSupport extends OptionalPipelineStage[SslTlsContext] {\n       new Send(buffer, write.ack)\n     }\n   }\n+\n+  /**\n+   * Event dispatched upon successful SSL handshaking.\n+   *\n+   * For non-certificate based cipher suites (e.g., Kerberos), `localCertificates` and `peerCertificates` are both empty lists.\n+   */\n+  case class SSLSessionEstablished(\n+    cipherSuite: String,\n+    localCertificates: List[Certificate],\n+    localPrincipal: Principal,\n+    peerCertificates: List[Certificate],\n+    peerPrincipal: Principal) extends Event\n+\n+  object SSLSessionEstablished {\n+\n+    def fromEngine(engine: SSLEngine): Option[SSLSessionEstablished] =\n+      fromSession(engine.getSession)\n+\n+    def fromSession(session: SSLSession): Option[SSLSessionEstablished] = {\n+      session.getCipherSuite match {\n+        case \"SSL_NULL_WITH_NULL_NULL\" \u21d2 None",
        "path": "spray-io/src/main/scala/spray/io/SslTlsSupport.scala",
        "position": null,
        "original_position": 60,
        "commit_id": "e48690062296816d8238b58f3cb91872e42cd6a2",
        "original_commit_id": "269a96284081440b1569cfa23a3043c42c8946c0",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Isn't that a particularly important case to support: using SSL but without encryption / authentication? \n",
        "created_at": "2013-09-04T09:20:09Z",
        "updated_at": "2013-09-09T16:11:34Z",
        "html_url": "https://github.com/spray/spray/pull/487#discussion_r6148773",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/487",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6148773"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/487#discussion_r6148773"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/487"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6149060",
        "pull_request_review_id": null,
        "id": 6149060,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDkwNjA=",
        "diff_hunk": "@@ -237,6 +246,48 @@ object SslTlsSupport extends OptionalPipelineStage[SslTlsContext] {\n       new Send(buffer, write.ack)\n     }\n   }\n+\n+  /**\n+   * Event dispatched upon successful SSL handshaking.\n+   *\n+   * For non-certificate based cipher suites (e.g., Kerberos), `localCertificates` and `peerCertificates` are both empty lists.\n+   */\n+  case class SSLSessionEstablished(\n+    cipherSuite: String,\n+    localCertificates: List[Certificate],\n+    localPrincipal: Principal,\n+    peerCertificates: List[Certificate],\n+    peerPrincipal: Principal) extends Event\n+\n+  object SSLSessionEstablished {\n+\n+    def fromEngine(engine: SSLEngine): Option[SSLSessionEstablished] =\n+      fromSession(engine.getSession)\n+\n+    def fromSession(session: SSLSession): Option[SSLSessionEstablished] = {\n+      session.getCipherSuite match {\n+        case \"SSL_NULL_WITH_NULL_NULL\" \u21d2 None\n+        case cipherSuite \u21d2\n+          try {\n+            val localCertificates = {\n+              val certs = session.getLocalCertificates\n+              if (certs eq null) Nil\n+              else certs.toList\n+            }\n+            val peerCertificates = {\n+              if (isKerberosCipherSuite(cipherSuite)) Nil",
        "path": "spray-io/src/main/scala/spray/io/SslTlsSupport.scala",
        "position": null,
        "original_position": 69,
        "commit_id": "e48690062296816d8238b58f3cb91872e42cd6a2",
        "original_commit_id": "269a96284081440b1569cfa23a3043c42c8946c0",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Can't we encode cipher suite specific information in the model in another way than just implying some invariants between the parameters?\n\nE.g.\n\n``` scala\nsealed trait CipherConfiguration {\n  def cipherName: String\n}\ncase object NullCipher extends CipherConfiguration {\n  def cipherName = ...\n}\ncase class KerberosConfiguration(cipherName: String, localCertificates: Seq[Certificate]) extends CipherConfiguration\ncase class Other(...) extends CipherConfiguration\ncase class SSLSessionEstablished(\n   cipher: CipherConfiguration,\n   localPrincipal: Principal,\n   peerPrincipal: Principal) extends Event\n```\n\nor something along those lines (it still seems to miss part of the invariants).\n\nDo we understand all of those invariants?\n- are principals always available?\n- what's the relation between principals and certificates? I'd say certificates provide evidence for the identity of a principal, right?\n- do we know which cipher suites provide principals and certificates apart from Kerberos?\n",
        "created_at": "2013-09-04T09:32:38Z",
        "updated_at": "2013-09-09T16:11:34Z",
        "html_url": "https://github.com/spray/spray/pull/487#discussion_r6149060",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/487",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6149060"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/487#discussion_r6149060"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/487"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6149074",
        "pull_request_review_id": null,
        "id": 6149074,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDkwNzQ=",
        "diff_hunk": "@@ -237,6 +246,48 @@ object SslTlsSupport extends OptionalPipelineStage[SslTlsContext] {\n       new Send(buffer, write.ack)\n     }\n   }\n+\n+  /**\n+   * Event dispatched upon successful SSL handshaking.\n+   *\n+   * For non-certificate based cipher suites (e.g., Kerberos), `localCertificates` and `peerCertificates` are both empty lists.\n+   */\n+  case class SSLSessionEstablished(\n+    cipherSuite: String,\n+    localCertificates: List[Certificate],\n+    localPrincipal: Principal,\n+    peerCertificates: List[Certificate],\n+    peerPrincipal: Principal) extends Event\n+\n+  object SSLSessionEstablished {\n+\n+    def fromEngine(engine: SSLEngine): Option[SSLSessionEstablished] =\n+      fromSession(engine.getSession)\n+\n+    def fromSession(session: SSLSession): Option[SSLSessionEstablished] = {\n+      session.getCipherSuite match {\n+        case \"SSL_NULL_WITH_NULL_NULL\" \u21d2 None\n+        case cipherSuite \u21d2\n+          try {\n+            val localCertificates = {\n+              val certs = session.getLocalCertificates\n+              if (certs eq null) Nil\n+              else certs.toList\n+            }\n+            val peerCertificates = {\n+              if (isKerberosCipherSuite(cipherSuite)) Nil\n+              else session.getPeerCertificates.toList\n+            }\n+            Some(SSLSessionEstablished(cipherSuite, localCertificates, session.getLocalPrincipal, peerCertificates, session.getPeerPrincipal))\n+          } catch {\n+            case e: SSLPeerUnverifiedException \u21d2 None",
        "path": "spray-io/src/main/scala/spray/io/SslTlsSupport.scala",
        "position": null,
        "original_position": 74,
        "commit_id": "e48690062296816d8238b58f3cb91872e42cd6a2",
        "original_commit_id": "269a96284081440b1569cfa23a3043c42c8946c0",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "What is throwing those? I think this is also an important case we shouldn't miss.\n",
        "created_at": "2013-09-04T09:33:06Z",
        "updated_at": "2013-09-09T16:11:34Z",
        "html_url": "https://github.com/spray/spray/pull/487#discussion_r6149074",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/487",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6149074"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/487#discussion_r6149074"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/487"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6149106",
        "pull_request_review_id": null,
        "id": 6149106,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDkxMDY=",
        "diff_hunk": "@@ -237,6 +246,48 @@ object SslTlsSupport extends OptionalPipelineStage[SslTlsContext] {\n       new Send(buffer, write.ack)\n     }\n   }\n+\n+  /**\n+   * Event dispatched upon successful SSL handshaking.\n+   *\n+   * For non-certificate based cipher suites (e.g., Kerberos), `localCertificates` and `peerCertificates` are both empty lists.\n+   */\n+  case class SSLSessionEstablished(\n+    cipherSuite: String,\n+    localCertificates: List[Certificate],\n+    localPrincipal: Principal,\n+    peerCertificates: List[Certificate],\n+    peerPrincipal: Principal) extends Event\n+\n+  object SSLSessionEstablished {\n+\n+    def fromEngine(engine: SSLEngine): Option[SSLSessionEstablished] =\n+      fromSession(engine.getSession)\n+\n+    def fromSession(session: SSLSession): Option[SSLSessionEstablished] = {\n+      session.getCipherSuite match {\n+        case \"SSL_NULL_WITH_NULL_NULL\" \u21d2 None",
        "path": "spray-io/src/main/scala/spray/io/SslTlsSupport.scala",
        "position": null,
        "original_position": 60,
        "commit_id": "e48690062296816d8238b58f3cb91872e42cd6a2",
        "original_commit_id": "269a96284081440b1569cfa23a3043c42c8946c0",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Also IMO the protocol should be reliable to always provide the message when the handshake is finished.\n",
        "created_at": "2013-09-04T09:34:26Z",
        "updated_at": "2013-09-09T16:11:34Z",
        "html_url": "https://github.com/spray/spray/pull/487#discussion_r6149106",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/487",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6149106"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/487#discussion_r6149106"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/487"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6152346",
        "pull_request_review_id": null,
        "id": 6152346,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTIzNDY=",
        "diff_hunk": "@@ -237,6 +246,48 @@ object SslTlsSupport extends OptionalPipelineStage[SslTlsContext] {\n       new Send(buffer, write.ack)\n     }\n   }\n+\n+  /**\n+   * Event dispatched upon successful SSL handshaking.\n+   *\n+   * For non-certificate based cipher suites (e.g., Kerberos), `localCertificates` and `peerCertificates` are both empty lists.\n+   */\n+  case class SSLSessionEstablished(\n+    cipherSuite: String,\n+    localCertificates: List[Certificate],\n+    localPrincipal: Principal,\n+    peerCertificates: List[Certificate],\n+    peerPrincipal: Principal) extends Event\n+\n+  object SSLSessionEstablished {\n+\n+    def fromEngine(engine: SSLEngine): Option[SSLSessionEstablished] =\n+      fromSession(engine.getSession)\n+\n+    def fromSession(session: SSLSession): Option[SSLSessionEstablished] = {\n+      session.getCipherSuite match {\n+        case \"SSL_NULL_WITH_NULL_NULL\" \u21d2 None",
        "path": "spray-io/src/main/scala/spray/io/SslTlsSupport.scala",
        "position": null,
        "original_position": 60,
        "commit_id": "e48690062296816d8238b58f3cb91872e42cd6a2",
        "original_commit_id": "269a96284081440b1569cfa23a3043c42c8946c0",
        "user": {
            "login": "mpilquist",
            "id": 118078,
            "node_id": "MDQ6VXNlcjExODA3OA==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118078?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mpilquist",
            "html_url": "https://github.com/mpilquist",
            "followers_url": "https://api.github.com/users/mpilquist/followers",
            "following_url": "https://api.github.com/users/mpilquist/following{/other_user}",
            "gists_url": "https://api.github.com/users/mpilquist/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mpilquist/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mpilquist/subscriptions",
            "organizations_url": "https://api.github.com/users/mpilquist/orgs",
            "repos_url": "https://api.github.com/users/mpilquist/repos",
            "events_url": "https://api.github.com/users/mpilquist/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mpilquist/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "> Isn't that a particularly important case to support: using SSL but without encryption / authentication?\n\nAs far as I can tell, SSL_NULL_WITH_NULL_NULL is only used during handshaking (and maybe renegotiation?). I didn't expect an SSL session to be able to select that cipher suite via negotiation.\n\n> Also IMO the protocol should be reliable to always provide the message when the handshake is finished.\n\nI agree. I originally had this in a more general `SSLSessionInfo` class outside of `SslTlsSupport` and I was guarding against folks calling `SSLSessionInfo.fromSession` with a session that hasn't been established. Perhaps it is better to just document that calling `fromSession` with a session that hasn't completed handshaking will result in an exception. WDYT?\n",
        "created_at": "2013-09-04T12:52:16Z",
        "updated_at": "2013-09-09T16:11:34Z",
        "html_url": "https://github.com/spray/spray/pull/487#discussion_r6152346",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/487",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6152346"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/487#discussion_r6152346"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/487"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6152767",
        "pull_request_review_id": null,
        "id": 6152767,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTI3Njc=",
        "diff_hunk": "@@ -237,6 +246,48 @@ object SslTlsSupport extends OptionalPipelineStage[SslTlsContext] {\n       new Send(buffer, write.ack)\n     }\n   }\n+\n+  /**\n+   * Event dispatched upon successful SSL handshaking.\n+   *\n+   * For non-certificate based cipher suites (e.g., Kerberos), `localCertificates` and `peerCertificates` are both empty lists.\n+   */\n+  case class SSLSessionEstablished(\n+    cipherSuite: String,\n+    localCertificates: List[Certificate],\n+    localPrincipal: Principal,\n+    peerCertificates: List[Certificate],\n+    peerPrincipal: Principal) extends Event\n+\n+  object SSLSessionEstablished {\n+\n+    def fromEngine(engine: SSLEngine): Option[SSLSessionEstablished] =\n+      fromSession(engine.getSession)\n+\n+    def fromSession(session: SSLSession): Option[SSLSessionEstablished] = {\n+      session.getCipherSuite match {\n+        case \"SSL_NULL_WITH_NULL_NULL\" \u21d2 None\n+        case cipherSuite \u21d2\n+          try {\n+            val localCertificates = {\n+              val certs = session.getLocalCertificates\n+              if (certs eq null) Nil\n+              else certs.toList\n+            }\n+            val peerCertificates = {\n+              if (isKerberosCipherSuite(cipherSuite)) Nil",
        "path": "spray-io/src/main/scala/spray/io/SslTlsSupport.scala",
        "position": null,
        "original_position": 69,
        "commit_id": "e48690062296816d8238b58f3cb91872e42cd6a2",
        "original_commit_id": "269a96284081440b1569cfa23a3043c42c8946c0",
        "user": {
            "login": "mpilquist",
            "id": 118078,
            "node_id": "MDQ6VXNlcjExODA3OA==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118078?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mpilquist",
            "html_url": "https://github.com/mpilquist",
            "followers_url": "https://api.github.com/users/mpilquist/followers",
            "following_url": "https://api.github.com/users/mpilquist/following{/other_user}",
            "gists_url": "https://api.github.com/users/mpilquist/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mpilquist/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mpilquist/subscriptions",
            "organizations_url": "https://api.github.com/users/mpilquist/orgs",
            "repos_url": "https://api.github.com/users/mpilquist/repos",
            "events_url": "https://api.github.com/users/mpilquist/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mpilquist/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I considered this but one issue I encountered is that there's no common module between spray-io and spray-http. We'd need the `SSL-Session-Info` header to match I think.\n\nWith regards to the specific questions, my answers below are based on the JavaDoc of SSLSession. It's been many years since I've used a JSSE provider besides JRE and Bouncycastle so I don't know if other providers implement things per JavaDoc invariants.\n\n> are principals always available?\n\nThe local principal is available if one was sent in the handshake. If using an X509 based cipher suite, the leaf certificate is returned and if using a Kerberos cipher suite, the `KerberosPrincipal` is returned. Based on this, I assume that the client side of an SSL session where the server does not request client authentication results in `session.getLocalPrincipal` returning null.\n\nThe `getPeerPrincipal` method returns the leaf certificate for an X509 based cipher suite and a `KerberosPrincipal` for a Kerberos cipher suite. If the peer's identity wasn't verified, an `SSLPeerUnverifiedException` is thrown.\n\nBased on both of the above, I assume anonymous cipher suites (e.g., SSL_DH_anon_WITH_RC4_128_MD5) result in `getLocalPrincipal` returning null and `getPeerPrincipal` throwing. I'll test that.\n\nSo anyway, no, principals are not always available.\n\n> what's the relation between principals and certificates? I'd say certificates provide evidence for the identity of a principal, right?\n\nYes, for certificate based cipher suites, the principal is just the leaf certificate. For non-certificate based cipher suites, `getLocalCertificates` returns null and `getPeerCertificates` throws `SSLPeerUnverifiedException`.\n\n> do we know which cipher suites provide principals and certificates apart from Kerberos?\n\nNot exhaustively -- supported cipher suites change in each Java release and custom JSSE providers can support different / additional ones.\n\nSo att the very least, we'd need to change `localPrincipal` and `peerPrincipal` to be `Option[Prinicpal]`. WDYT?\n",
        "created_at": "2013-09-04T13:12:30Z",
        "updated_at": "2013-09-09T16:11:34Z",
        "html_url": "https://github.com/spray/spray/pull/487#discussion_r6152767",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/487",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6152767"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/487#discussion_r6152767"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/487"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6152809",
        "pull_request_review_id": null,
        "id": 6152809,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTI4MDk=",
        "diff_hunk": "@@ -237,6 +246,48 @@ object SslTlsSupport extends OptionalPipelineStage[SslTlsContext] {\n       new Send(buffer, write.ack)\n     }\n   }\n+\n+  /**\n+   * Event dispatched upon successful SSL handshaking.\n+   *\n+   * For non-certificate based cipher suites (e.g., Kerberos), `localCertificates` and `peerCertificates` are both empty lists.\n+   */\n+  case class SSLSessionEstablished(\n+    cipherSuite: String,\n+    localCertificates: List[Certificate],\n+    localPrincipal: Principal,\n+    peerCertificates: List[Certificate],\n+    peerPrincipal: Principal) extends Event\n+\n+  object SSLSessionEstablished {\n+\n+    def fromEngine(engine: SSLEngine): Option[SSLSessionEstablished] =\n+      fromSession(engine.getSession)\n+\n+    def fromSession(session: SSLSession): Option[SSLSessionEstablished] = {\n+      session.getCipherSuite match {\n+        case \"SSL_NULL_WITH_NULL_NULL\" \u21d2 None\n+        case cipherSuite \u21d2\n+          try {\n+            val localCertificates = {\n+              val certs = session.getLocalCertificates\n+              if (certs eq null) Nil\n+              else certs.toList\n+            }\n+            val peerCertificates = {\n+              if (isKerberosCipherSuite(cipherSuite)) Nil\n+              else session.getPeerCertificates.toList\n+            }\n+            Some(SSLSessionEstablished(cipherSuite, localCertificates, session.getLocalPrincipal, peerCertificates, session.getPeerPrincipal))\n+          } catch {\n+            case e: SSLPeerUnverifiedException \u21d2 None",
        "path": "spray-io/src/main/scala/spray/io/SslTlsSupport.scala",
        "position": null,
        "original_position": 74,
        "commit_id": "e48690062296816d8238b58f3cb91872e42cd6a2",
        "original_commit_id": "269a96284081440b1569cfa23a3043c42c8946c0",
        "user": {
            "login": "mpilquist",
            "id": 118078,
            "node_id": "MDQ6VXNlcjExODA3OA==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118078?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mpilquist",
            "html_url": "https://github.com/mpilquist",
            "followers_url": "https://api.github.com/users/mpilquist/followers",
            "following_url": "https://api.github.com/users/mpilquist/following{/other_user}",
            "gists_url": "https://api.github.com/users/mpilquist/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mpilquist/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mpilquist/subscriptions",
            "organizations_url": "https://api.github.com/users/mpilquist/orgs",
            "repos_url": "https://api.github.com/users/mpilquist/repos",
            "events_url": "https://api.github.com/users/mpilquist/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mpilquist/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "`session.getPeerPrincipal` and `session.getPeerCertificates` -- see comment above for full details.\n",
        "created_at": "2013-09-04T13:14:32Z",
        "updated_at": "2013-09-09T16:11:34Z",
        "html_url": "https://github.com/spray/spray/pull/487#discussion_r6152809",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/487",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6152809"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/487#discussion_r6152809"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/487"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6152837",
        "pull_request_review_id": null,
        "id": 6152837,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTI4Mzc=",
        "diff_hunk": "@@ -378,8 +380,24 @@ object HttpHeaders {\n     protected def companion = `X-Forwarded-For`\n   }\n \n+  /**\n+   * Provides information about the SSL session the message was received over.\n+   *\n+   * For non-certificate based cipher suites (e.g., Kerberos), `localCertificates` and `peerCertificates` are both empty lists.\n+   */\n+  object `SSL-Session-Info` extends ModeledCompanion\n+  case class `SSL-Session-Info`(\n+      cipherSuite: String,\n+      localCertificates: List[Certificate],\n+      localPrincipal: Principal,\n+      peerCertificates: List[Certificate],\n+      peerPrincipal: Principal) extends ModeledHeader {\n+    def renderValue[R <: Rendering](r: R): r.type = r ~~ peerPrincipal.toString",
        "path": "spray-http/src/main/scala/spray/http/HttpHeader.scala",
        "position": null,
        "original_position": 33,
        "commit_id": "e48690062296816d8238b58f3cb91872e42cd6a2",
        "original_commit_id": "269a96284081440b1569cfa23a3043c42c8946c0",
        "user": {
            "login": "mpilquist",
            "id": 118078,
            "node_id": "MDQ6VXNlcjExODA3OA==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118078?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mpilquist",
            "html_url": "https://github.com/mpilquist",
            "followers_url": "https://api.github.com/users/mpilquist/followers",
            "following_url": "https://api.github.com/users/mpilquist/following{/other_user}",
            "gists_url": "https://api.github.com/users/mpilquist/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mpilquist/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mpilquist/subscriptions",
            "organizations_url": "https://api.github.com/users/mpilquist/orgs",
            "repos_url": "https://api.github.com/users/mpilquist/repos",
            "events_url": "https://api.github.com/users/mpilquist/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mpilquist/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yep, fixed in ea78498\n",
        "created_at": "2013-09-04T13:15:40Z",
        "updated_at": "2013-09-09T16:11:34Z",
        "html_url": "https://github.com/spray/spray/pull/487#discussion_r6152837",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/487",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6152837"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/487#discussion_r6152837"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/487"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6152842",
        "pull_request_review_id": null,
        "id": 6152842,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTI4NDI=",
        "diff_hunk": "@@ -157,7 +162,11 @@ object SslTlsSupport extends OptionalPipelineStage[SslTlsContext] {\n         if (tempBuf.remaining > 0) eventPL(Tcp.Received(ByteString(tempBuf)))\n         result.getStatus match {\n           case OK \u21d2 result.getHandshakeStatus match {\n-            case NOT_HANDSHAKING | FINISHED \u21d2\n+            case NOT_HANDSHAKING \u21d2\n+              if (buffer.remaining > 0) decrypt(buffer, tempBuf)",
        "path": "spray-io/src/main/scala/spray/io/SslTlsSupport.scala",
        "position": null,
        "original_position": 29,
        "commit_id": "e48690062296816d8238b58f3cb91872e42cd6a2",
        "original_commit_id": "269a96284081440b1569cfa23a3043c42c8946c0",
        "user": {
            "login": "mpilquist",
            "id": 118078,
            "node_id": "MDQ6VXNlcjExODA3OA==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118078?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mpilquist",
            "html_url": "https://github.com/mpilquist",
            "followers_url": "https://api.github.com/users/mpilquist/followers",
            "following_url": "https://api.github.com/users/mpilquist/following{/other_user}",
            "gists_url": "https://api.github.com/users/mpilquist/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mpilquist/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mpilquist/subscriptions",
            "organizations_url": "https://api.github.com/users/mpilquist/orgs",
            "repos_url": "https://api.github.com/users/mpilquist/repos",
            "events_url": "https://api.github.com/users/mpilquist/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mpilquist/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yep, fixed in ea78498\n",
        "created_at": "2013-09-04T13:15:51Z",
        "updated_at": "2013-09-09T16:11:34Z",
        "html_url": "https://github.com/spray/spray/pull/487#discussion_r6152842",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/487",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6152842"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/487#discussion_r6152842"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/487"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6153183",
        "pull_request_review_id": null,
        "id": 6153183,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTMxODM=",
        "diff_hunk": "@@ -237,6 +246,48 @@ object SslTlsSupport extends OptionalPipelineStage[SslTlsContext] {\n       new Send(buffer, write.ack)\n     }\n   }\n+\n+  /**\n+   * Event dispatched upon successful SSL handshaking.\n+   *\n+   * For non-certificate based cipher suites (e.g., Kerberos), `localCertificates` and `peerCertificates` are both empty lists.\n+   */\n+  case class SSLSessionEstablished(\n+    cipherSuite: String,\n+    localCertificates: List[Certificate],\n+    localPrincipal: Principal,\n+    peerCertificates: List[Certificate],\n+    peerPrincipal: Principal) extends Event\n+\n+  object SSLSessionEstablished {\n+\n+    def fromEngine(engine: SSLEngine): Option[SSLSessionEstablished] =\n+      fromSession(engine.getSession)\n+\n+    def fromSession(session: SSLSession): Option[SSLSessionEstablished] = {\n+      session.getCipherSuite match {\n+        case \"SSL_NULL_WITH_NULL_NULL\" \u21d2 None\n+        case cipherSuite \u21d2\n+          try {\n+            val localCertificates = {\n+              val certs = session.getLocalCertificates\n+              if (certs eq null) Nil\n+              else certs.toList\n+            }\n+            val peerCertificates = {\n+              if (isKerberosCipherSuite(cipherSuite)) Nil",
        "path": "spray-io/src/main/scala/spray/io/SslTlsSupport.scala",
        "position": null,
        "original_position": 69,
        "commit_id": "e48690062296816d8238b58f3cb91872e42cd6a2",
        "original_commit_id": "269a96284081440b1569cfa23a3043c42c8946c0",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "> I considered this but one issue I encountered is that there's no common module between spray-io and spray-http. We'd need the SSL-Session-Info header to match I think.\n\nI discussed this with Mathias and we think that we should put the SSL session info model in spray-util for the time being. spray-http may not yet have a dependency on spray-util but you can introduce that.\n",
        "created_at": "2013-09-04T13:31:07Z",
        "updated_at": "2013-09-09T16:11:34Z",
        "html_url": "https://github.com/spray/spray/pull/487#discussion_r6153183",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/487",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6153183"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/487#discussion_r6153183"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/487"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6155777",
        "pull_request_review_id": null,
        "id": 6155777,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTU3Nzc=",
        "diff_hunk": "@@ -237,6 +246,48 @@ object SslTlsSupport extends OptionalPipelineStage[SslTlsContext] {\n       new Send(buffer, write.ack)\n     }\n   }\n+\n+  /**\n+   * Event dispatched upon successful SSL handshaking.\n+   *\n+   * For non-certificate based cipher suites (e.g., Kerberos), `localCertificates` and `peerCertificates` are both empty lists.\n+   */\n+  case class SSLSessionEstablished(\n+    cipherSuite: String,\n+    localCertificates: List[Certificate],\n+    localPrincipal: Principal,\n+    peerCertificates: List[Certificate],\n+    peerPrincipal: Principal) extends Event\n+\n+  object SSLSessionEstablished {\n+\n+    def fromEngine(engine: SSLEngine): Option[SSLSessionEstablished] =\n+      fromSession(engine.getSession)\n+\n+    def fromSession(session: SSLSession): Option[SSLSessionEstablished] = {\n+      session.getCipherSuite match {\n+        case \"SSL_NULL_WITH_NULL_NULL\" \u21d2 None\n+        case cipherSuite \u21d2\n+          try {\n+            val localCertificates = {\n+              val certs = session.getLocalCertificates\n+              if (certs eq null) Nil\n+              else certs.toList\n+            }\n+            val peerCertificates = {\n+              if (isKerberosCipherSuite(cipherSuite)) Nil",
        "path": "spray-io/src/main/scala/spray/io/SslTlsSupport.scala",
        "position": null,
        "original_position": 69,
        "commit_id": "e48690062296816d8238b58f3cb91872e42cd6a2",
        "original_commit_id": "269a96284081440b1569cfa23a3043c42c8946c0",
        "user": {
            "login": "mpilquist",
            "id": 118078,
            "node_id": "MDQ6VXNlcjExODA3OA==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118078?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mpilquist",
            "html_url": "https://github.com/mpilquist",
            "followers_url": "https://api.github.com/users/mpilquist/followers",
            "following_url": "https://api.github.com/users/mpilquist/following{/other_user}",
            "gists_url": "https://api.github.com/users/mpilquist/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mpilquist/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mpilquist/subscriptions",
            "organizations_url": "https://api.github.com/users/mpilquist/orgs",
            "repos_url": "https://api.github.com/users/mpilquist/repos",
            "events_url": "https://api.github.com/users/mpilquist/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mpilquist/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "> Based on both of the above, I assume anonymous cipher suites (e.g., SSL_DH_anon_WITH_RC4_128_MD5) result in getLocalPrincipal returning null and getPeerPrincipal throwing. I'll test that.\n\nJust tested and confirmed this behavior. Based on latest commit (30bf6fa), using an anonymous cipher suite results in a header like `SSL-Session-Info(SSL_DH_anon_WITH_RC4_128_MD5, List(), None, List(), None)`.\n\nWhere does that leave us with the CipherConfiguration ADT?\n",
        "created_at": "2013-09-04T14:54:39Z",
        "updated_at": "2013-09-09T16:11:34Z",
        "html_url": "https://github.com/spray/spray/pull/487#discussion_r6155777",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/487",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6155777"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/487#discussion_r6155777"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/487"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6156008",
        "pull_request_review_id": null,
        "id": 6156008,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTYwMDg=",
        "diff_hunk": "@@ -237,6 +246,48 @@ object SslTlsSupport extends OptionalPipelineStage[SslTlsContext] {\n       new Send(buffer, write.ack)\n     }\n   }\n+\n+  /**\n+   * Event dispatched upon successful SSL handshaking.\n+   *\n+   * For non-certificate based cipher suites (e.g., Kerberos), `localCertificates` and `peerCertificates` are both empty lists.\n+   */\n+  case class SSLSessionEstablished(\n+    cipherSuite: String,\n+    localCertificates: List[Certificate],\n+    localPrincipal: Principal,\n+    peerCertificates: List[Certificate],\n+    peerPrincipal: Principal) extends Event\n+\n+  object SSLSessionEstablished {\n+\n+    def fromEngine(engine: SSLEngine): Option[SSLSessionEstablished] =\n+      fromSession(engine.getSession)\n+\n+    def fromSession(session: SSLSession): Option[SSLSessionEstablished] = {\n+      session.getCipherSuite match {\n+        case \"SSL_NULL_WITH_NULL_NULL\" \u21d2 None",
        "path": "spray-io/src/main/scala/spray/io/SslTlsSupport.scala",
        "position": null,
        "original_position": 60,
        "commit_id": "e48690062296816d8238b58f3cb91872e42cd6a2",
        "original_commit_id": "269a96284081440b1569cfa23a3043c42c8946c0",
        "user": {
            "login": "mpilquist",
            "id": 118078,
            "node_id": "MDQ6VXNlcjExODA3OA==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118078?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mpilquist",
            "html_url": "https://github.com/mpilquist",
            "followers_url": "https://api.github.com/users/mpilquist/followers",
            "following_url": "https://api.github.com/users/mpilquist/following{/other_user}",
            "gists_url": "https://api.github.com/users/mpilquist/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mpilquist/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mpilquist/subscriptions",
            "organizations_url": "https://api.github.com/users/mpilquist/orgs",
            "repos_url": "https://api.github.com/users/mpilquist/repos",
            "events_url": "https://api.github.com/users/mpilquist/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mpilquist/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "As of commit 30bf6fa, there's no possibility of an exception being thrown so disregard.\n",
        "created_at": "2013-09-04T15:02:21Z",
        "updated_at": "2013-09-09T16:11:34Z",
        "html_url": "https://github.com/spray/spray/pull/487#discussion_r6156008",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/487",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6156008"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/487#discussion_r6156008"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/487"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6182874",
        "pull_request_review_id": null,
        "id": 6182874,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODI4NzQ=",
        "diff_hunk": "@@ -39,11 +40,22 @@ object ResponseParsing {\n               log.warning(errorInfo.withSummaryPrepended(\"Illegal response header\").formatPretty)\n           }\n           var openRequestMethods = Queue.empty[HttpMethod]\n+          var sslSessionInfo: Option[`SSL-Session-Info`] = None\n+\n+          def normalize(response: HttpResponse): HttpResponse =",
        "path": "spray-can/src/main/scala/spray/can/client/ResponseParsing.scala",
        "position": null,
        "original_position": 14,
        "commit_id": "e48690062296816d8238b58f3cb91872e42cd6a2",
        "original_commit_id": "c0e0e7f0cbdba0ad9e53fd73c5522bbb6673930b",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "can we call this method `addSslHeader` or similar\n",
        "created_at": "2013-09-05T14:32:49Z",
        "updated_at": "2013-09-09T16:11:34Z",
        "html_url": "https://github.com/spray/spray/pull/487#discussion_r6182874",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/487",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6182874"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/487#discussion_r6182874"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/487"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6237079",
        "pull_request_review_id": null,
        "id": 6237079,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMzcwNzk=",
        "diff_hunk": "@@ -98,4 +98,4 @@ object RequestParsing {\n   ////////////// EVENTS //////////////\n \n   case class HttpMessageStartEvent(messagePart: HttpMessageStart, closeAfterResponseCompletion: Boolean) extends Event\n-}",
        "path": "spray-can/src/main/scala/spray/can/server/RequestParsing.scala",
        "position": null,
        "original_position": 13,
        "commit_id": "e48690062296816d8238b58f3cb91872e42cd6a2",
        "original_commit_id": "1ae41dc6d4c31afa9c240939cbe6dcba7ed9022a",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "When squashing, can you remove the changes here and in ResponseParsing which are just whitespace changes?\n",
        "created_at": "2013-09-09T13:11:18Z",
        "updated_at": "2013-09-09T16:11:34Z",
        "html_url": "https://github.com/spray/spray/pull/487#discussion_r6237079",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/487",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6237079"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/487#discussion_r6237079"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/487"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6237333",
        "pull_request_review_id": null,
        "id": 6237333,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMzczMzM=",
        "diff_hunk": "@@ -98,4 +98,4 @@ object RequestParsing {\n   ////////////// EVENTS //////////////\n \n   case class HttpMessageStartEvent(messagePart: HttpMessageStart, closeAfterResponseCompletion: Boolean) extends Event\n-}",
        "path": "spray-can/src/main/scala/spray/can/server/RequestParsing.scala",
        "position": null,
        "original_position": 13,
        "commit_id": "e48690062296816d8238b58f3cb91872e42cd6a2",
        "original_commit_id": "1ae41dc6d4c31afa9c240939cbe6dcba7ed9022a",
        "user": {
            "login": "mpilquist",
            "id": 118078,
            "node_id": "MDQ6VXNlcjExODA3OA==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118078?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mpilquist",
            "html_url": "https://github.com/mpilquist",
            "followers_url": "https://api.github.com/users/mpilquist/followers",
            "following_url": "https://api.github.com/users/mpilquist/following{/other_user}",
            "gists_url": "https://api.github.com/users/mpilquist/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mpilquist/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mpilquist/subscriptions",
            "organizations_url": "https://api.github.com/users/mpilquist/orgs",
            "repos_url": "https://api.github.com/users/mpilquist/repos",
            "events_url": "https://api.github.com/users/mpilquist/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mpilquist/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yep, will do\n",
        "created_at": "2013-09-09T13:22:12Z",
        "updated_at": "2013-09-09T16:11:34Z",
        "html_url": "https://github.com/spray/spray/pull/487#discussion_r6237333",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/487",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6237333"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/487#discussion_r6237333"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/487"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6244596",
        "pull_request_review_id": null,
        "id": 6244596,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDQ1OTY=",
        "diff_hunk": "@@ -240,6 +240,10 @@ object MediaTypes extends ObjectRegistry[(String, String), MediaType] {\n   private final val binary = true          // compile-time constant\n   private final val notBinary = false      // compile-time constant\n \n+  // dummy value currently only used by ContentType.NoContentType\n+  val NoMediaType = new NonMultipartMediaType(\"none\", \"none\", false, false, Seq.empty) {",
        "path": "spray-http/src/main/scala/spray/http/MediaType.scala",
        "position": null,
        "original_position": 5,
        "commit_id": "7a45d8261afa8a688eb76e1ddf2ac05eb0bb522a",
        "original_commit_id": "a7a01f2328e4e70af75f780148bfa55673c2ee49",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "If it's there for no other reason, we should maybe make this value private[http].\n",
        "created_at": "2013-09-09T17:35:37Z",
        "updated_at": "2013-09-09T18:25:15Z",
        "html_url": "https://github.com/spray/spray/pull/493#discussion_r6244596",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/493",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6244596"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/493#discussion_r6244596"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/493"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6100706",
        "pull_request_review_id": null,
        "id": 6100706,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDA3MDY=",
        "diff_hunk": "@@ -108,10 +108,10 @@ spray.can {\n     # dispatched to the handler.\n     request-chunk-aggregation-limit = 1m\n \n-    # The initial size if the buffer to render the response in.\n+    # The initial size if the buffer to render the response headers in.\n     # Can be used for fine-tuning response rendering performance but probably\n     # doesn't have to be fiddled with in most applications.\n-    response-size-hint = 1k\n+    response-header-size-hint = 512",
        "path": "spray-can/src/main/resources/reference.conf",
        "position": 9,
        "original_position": 9,
        "commit_id": "ab3576136927703586828e8bd8a1edaea1e07a31",
        "original_commit_id": "fad394ef11a6b5fa29c711cd480d910c6611cfc0",
        "user": {
            "login": "martin-g",
            "id": 232002,
            "node_id": "MDQ6VXNlcjIzMjAwMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/232002?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/martin-g",
            "html_url": "https://github.com/martin-g",
            "followers_url": "https://api.github.com/users/martin-g/followers",
            "following_url": "https://api.github.com/users/martin-g/following{/other_user}",
            "gists_url": "https://api.github.com/users/martin-g/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/martin-g/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/martin-g/subscriptions",
            "organizations_url": "https://api.github.com/users/martin-g/orgs",
            "repos_url": "https://api.github.com/users/martin-g/repos",
            "events_url": "https://api.github.com/users/martin-g/events{/privacy}",
            "received_events_url": "https://api.github.com/users/martin-g/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "From the comment I understand that maybe not many apps use this setting. \nBut maybe it is a good idea to add an entry about this renaming and value change in the release notes for the next release.\n",
        "created_at": "2013-08-31T19:37:38Z",
        "updated_at": "2013-09-10T14:06:13Z",
        "html_url": "https://github.com/spray/spray/pull/478#discussion_r6100706",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/478",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6100706"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/478#discussion_r6100706"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/478"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6100772",
        "pull_request_review_id": null,
        "id": 6100772,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDA3NzI=",
        "diff_hunk": "@@ -0,0 +1,217 @@\n+/*\n+ * Copyright (C) 2011-2013 spray.io\n+ * Based on code copyright (C) 2010-2011 by the BlueEyes Web Framework Team (http://github.com/jdegoes/blueeyes)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.http\n+\n+import java.io.{ FileInputStream, File }\n+import java.nio.charset.Charset\n+import scala.collection.immutable.VectorBuilder\n+import scala.annotation.tailrec\n+import akka.util.ByteString\n+import spray.util.UTF8\n+\n+sealed abstract class HttpData {\n+  def isEmpty: Boolean\n+  def nonEmpty: Boolean = !isEmpty\n+  def length: Long\n+  def copyToArray(xs: Array[Byte], sourceOffset: Long = 0, targetOffset: Int = 0, span: Int = length.toInt): Unit\n+  def toByteArray: Array[Byte]\n+  def toByteString: ByteString\n+  def +:(other: HttpData): HttpData\n+  def asString: String = asString(UTF8)\n+  def asString(charset: HttpCharset): String = asString(charset.nioCharset)\n+  def asString(charset: java.nio.charset.Charset): String = new String(toByteArray, charset)\n+}\n+\n+object HttpData {\n+  def apply(string: String): HttpData =\n+    apply(string, HttpCharsets.`UTF-8`)\n+  def apply(string: String, charset: HttpCharset): HttpData =\n+    if (string.isEmpty) Empty else new Bytes(ByteString(string getBytes charset.nioCharset))\n+  def apply(bytes: Array[Byte]): HttpData =\n+    if (bytes.isEmpty) Empty else new Bytes(ByteString(bytes))\n+  def apply(bytes: ByteString): HttpData =\n+    if (bytes.isEmpty) Empty else new Bytes(bytes)\n+\n+  /**\n+   * Creates an HttpData.FileBytes instance if the given file exists, is readable, non-empty\n+   * and the given `length` parameter is non-zero. Otherwise the method returns HttpData.Empty.\n+   * A negative `length` value signifies that the respective number of bytes at the end of the\n+   * file is to be ommitted, i.e., a value of -10 will select all bytes starting at `offset`\n+   * except for the last 10.\n+   * If `length` is greater or equal to \"file length - offset\" all bytes in the file starting at\n+   * `offset` are selected.\n+   */\n+  def apply(file: File, offset: Long = 0, length: Long = Long.MaxValue): HttpData = {\n+    val fileLength = file.length\n+    if (fileLength > 0) {\n+      require(offset >= 0 && offset < fileLength, s\"offset $offset out of range $fileLength\")\n+      if (file.canRead)\n+        if (length > 0) new FileBytes(file.getAbsolutePath, offset, math.min(fileLength - offset, length))\n+        else if (length < 0 && length > offset - fileLength) new FileBytes(file.getAbsolutePath, offset, fileLength - offset + length)\n+        else Empty\n+      else Empty\n+    } else Empty\n+  }\n+\n+  /**\n+   * Creates an HttpData.FileBytes instance if the given file exists, is readable, non-empty\n+   * and the given `length` parameter is non-zero. Otherwise the method returns HttpData.Empty.\n+   * A negative `length` value signifies that the respective number of bytes at the end of the\n+   * file is to be ommitted, i.e., a value of -10 will select all bytes starting at `offset`\n+   * except for the last 10.\n+   * If `length` is greater or equal to \"file length - offset\" all bytes in the file starting at\n+   * `offset` are selected.\n+   */\n+  def fromFile(fileName: String, offset: Long = 0, length: Long = Long.MaxValue) =\n+    apply(new File(fileName), offset, length)\n+\n+  case object Empty extends HttpData {\n+    def isEmpty = true\n+    def length = 0L\n+    def copyToArray(xs: Array[Byte], sourceOffset: Long, targetOffset: Int, span: Int) = ()\n+    val toByteArray = Array.empty[Byte]\n+    def toByteString = ByteString.empty\n+    def +:(other: HttpData) = other\n+    override def asString(charset: Charset) = \"\"\n+  }\n+\n+  sealed abstract class NonEmpty extends HttpData {\n+    def isEmpty = false\n+    def +:(other: HttpData): NonEmpty =\n+      other match {\n+        case Empty                                 \u21d2 this\n+        case x: CompactNonEmpty                    \u21d2 Compound(x, this)\n+        case Compound(head, tail: CompactNonEmpty) \u21d2 Compound(head, Compound(tail, this))\n+        case x: Compound                           \u21d2 newBuilder.+=(x).+=(this).result().asInstanceOf[Compound]\n+      }\n+    def toByteArray = {\n+      require(length <= Int.MaxValue, \"Cannot create a byte array greater than 2GB\")\n+      val array = Array.ofDim[Byte](length.toInt)\n+      copyToArray(array)\n+      array\n+    }\n+  }\n+\n+  sealed abstract class CompactNonEmpty extends NonEmpty { _: Product \u21d2\n+    override def toString = s\"$productPrefix(<$length bytes>)\"\n+  }\n+\n+  case class Bytes private[HttpData] (bytes: ByteString) extends CompactNonEmpty {\n+    def length = bytes.length\n+    def copyToArray(xs: Array[Byte], sourceOffset: Long = 0, targetOffset: Int = 0, span: Int = length.toInt) = {\n+      require(sourceOffset >= 0, \"sourceOffset must be >= 0 but is \" + sourceOffset)\n+      if (sourceOffset < length)\n+        bytes.iterator.drop(sourceOffset.toInt).copyToArray(xs, targetOffset, span)\n+    }\n+    def toByteString = bytes\n+  }\n+\n+  case class FileBytes private[HttpData] (fileName: String, offset: Long = 0, length: Long) extends CompactNonEmpty {\n+    def copyToArray(xs: Array[Byte], sourceOffset: Long = 0, targetOffset: Int = 0, span: Int = length.toInt) = {\n+      require(sourceOffset >= 0, \"sourceOffset must be >= 0 but is \" + sourceOffset)\n+      if (span > 0 && xs.length > 0 && sourceOffset < length) {\n+        require(0 <= targetOffset && targetOffset < xs.length, s\"start must be >= 0 and <= ${xs.length} but is $targetOffset\")\n+        val stream = new FileInputStream(fileName)\n+        stream.skip(offset + sourceOffset)\n+        val targetEnd = math.min(xs.length, targetOffset + math.min(span, (length - sourceOffset).toInt))\n+        @tailrec def load(ix: Int = targetOffset): Unit =\n+          if (ix < targetEnd)\n+            stream.read(xs, ix, targetEnd - ix) match {\n+              case -1    \u21d2 // file length changed since this FileBytes instance was created\n+              case count \u21d2 load(ix + count)\n+            }\n+        load()\n+        stream.close()",
        "path": "spray-http/src/main/scala/spray/http/HttpData.scala",
        "position": null,
        "original_position": 139,
        "commit_id": "ab3576136927703586828e8bd8a1edaea1e07a31",
        "original_commit_id": "fad394ef11a6b5fa29c711cd480d910c6611cfc0",
        "user": {
            "login": "martin-g",
            "id": 232002,
            "node_id": "MDQ6VXNlcjIzMjAwMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/232002?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/martin-g",
            "html_url": "https://github.com/martin-g",
            "followers_url": "https://api.github.com/users/martin-g/followers",
            "following_url": "https://api.github.com/users/martin-g/following{/other_user}",
            "gists_url": "https://api.github.com/users/martin-g/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/martin-g/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/martin-g/subscriptions",
            "organizations_url": "https://api.github.com/users/martin-g/orgs",
            "repos_url": "https://api.github.com/users/martin-g/repos",
            "events_url": "https://api.github.com/users/martin-g/events{/privacy}",
            "received_events_url": "https://api.github.com/users/martin-g/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Use try/finally just to be on the safe side and prevent file descriptor leak ?!\n",
        "created_at": "2013-08-31T20:00:19Z",
        "updated_at": "2013-09-10T14:06:13Z",
        "html_url": "https://github.com/spray/spray/pull/478#discussion_r6100772",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/478",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6100772"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/478#discussion_r6100772"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/478"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6106105",
        "pull_request_review_id": null,
        "id": 6106105,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDYxMDU=",
        "diff_hunk": "@@ -108,10 +108,10 @@ spray.can {\n     # dispatched to the handler.\n     request-chunk-aggregation-limit = 1m\n \n-    # The initial size if the buffer to render the response in.\n+    # The initial size if the buffer to render the response headers in.\n     # Can be used for fine-tuning response rendering performance but probably\n     # doesn't have to be fiddled with in most applications.\n-    response-size-hint = 1k\n+    response-header-size-hint = 512",
        "path": "spray-can/src/main/resources/reference.conf",
        "position": 9,
        "original_position": 9,
        "commit_id": "ab3576136927703586828e8bd8a1edaea1e07a31",
        "original_commit_id": "fad394ef11a6b5fa29c711cd480d910c6611cfc0",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yes, that's right.\nOne central reason of why we introduced our new [commit message policy](http://spray.io/project-info/contributing/#git-commit-messages) was that it makes finding and aggregating all the info for a migration guide much easier.\n",
        "created_at": "2013-09-02T07:45:13Z",
        "updated_at": "2013-09-10T14:06:13Z",
        "html_url": "https://github.com/spray/spray/pull/478#discussion_r6106105",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/478",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6106105"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/478#discussion_r6106105"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/478"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6106117",
        "pull_request_review_id": null,
        "id": 6106117,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDYxMTc=",
        "diff_hunk": "@@ -0,0 +1,217 @@\n+/*\n+ * Copyright (C) 2011-2013 spray.io\n+ * Based on code copyright (C) 2010-2011 by the BlueEyes Web Framework Team (http://github.com/jdegoes/blueeyes)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.http\n+\n+import java.io.{ FileInputStream, File }\n+import java.nio.charset.Charset\n+import scala.collection.immutable.VectorBuilder\n+import scala.annotation.tailrec\n+import akka.util.ByteString\n+import spray.util.UTF8\n+\n+sealed abstract class HttpData {\n+  def isEmpty: Boolean\n+  def nonEmpty: Boolean = !isEmpty\n+  def length: Long\n+  def copyToArray(xs: Array[Byte], sourceOffset: Long = 0, targetOffset: Int = 0, span: Int = length.toInt): Unit\n+  def toByteArray: Array[Byte]\n+  def toByteString: ByteString\n+  def +:(other: HttpData): HttpData\n+  def asString: String = asString(UTF8)\n+  def asString(charset: HttpCharset): String = asString(charset.nioCharset)\n+  def asString(charset: java.nio.charset.Charset): String = new String(toByteArray, charset)\n+}\n+\n+object HttpData {\n+  def apply(string: String): HttpData =\n+    apply(string, HttpCharsets.`UTF-8`)\n+  def apply(string: String, charset: HttpCharset): HttpData =\n+    if (string.isEmpty) Empty else new Bytes(ByteString(string getBytes charset.nioCharset))\n+  def apply(bytes: Array[Byte]): HttpData =\n+    if (bytes.isEmpty) Empty else new Bytes(ByteString(bytes))\n+  def apply(bytes: ByteString): HttpData =\n+    if (bytes.isEmpty) Empty else new Bytes(bytes)\n+\n+  /**\n+   * Creates an HttpData.FileBytes instance if the given file exists, is readable, non-empty\n+   * and the given `length` parameter is non-zero. Otherwise the method returns HttpData.Empty.\n+   * A negative `length` value signifies that the respective number of bytes at the end of the\n+   * file is to be ommitted, i.e., a value of -10 will select all bytes starting at `offset`\n+   * except for the last 10.\n+   * If `length` is greater or equal to \"file length - offset\" all bytes in the file starting at\n+   * `offset` are selected.\n+   */\n+  def apply(file: File, offset: Long = 0, length: Long = Long.MaxValue): HttpData = {\n+    val fileLength = file.length\n+    if (fileLength > 0) {\n+      require(offset >= 0 && offset < fileLength, s\"offset $offset out of range $fileLength\")\n+      if (file.canRead)\n+        if (length > 0) new FileBytes(file.getAbsolutePath, offset, math.min(fileLength - offset, length))\n+        else if (length < 0 && length > offset - fileLength) new FileBytes(file.getAbsolutePath, offset, fileLength - offset + length)\n+        else Empty\n+      else Empty\n+    } else Empty\n+  }\n+\n+  /**\n+   * Creates an HttpData.FileBytes instance if the given file exists, is readable, non-empty\n+   * and the given `length` parameter is non-zero. Otherwise the method returns HttpData.Empty.\n+   * A negative `length` value signifies that the respective number of bytes at the end of the\n+   * file is to be ommitted, i.e., a value of -10 will select all bytes starting at `offset`\n+   * except for the last 10.\n+   * If `length` is greater or equal to \"file length - offset\" all bytes in the file starting at\n+   * `offset` are selected.\n+   */\n+  def fromFile(fileName: String, offset: Long = 0, length: Long = Long.MaxValue) =\n+    apply(new File(fileName), offset, length)\n+\n+  case object Empty extends HttpData {\n+    def isEmpty = true\n+    def length = 0L\n+    def copyToArray(xs: Array[Byte], sourceOffset: Long, targetOffset: Int, span: Int) = ()\n+    val toByteArray = Array.empty[Byte]\n+    def toByteString = ByteString.empty\n+    def +:(other: HttpData) = other\n+    override def asString(charset: Charset) = \"\"\n+  }\n+\n+  sealed abstract class NonEmpty extends HttpData {\n+    def isEmpty = false\n+    def +:(other: HttpData): NonEmpty =\n+      other match {\n+        case Empty                                 \u21d2 this\n+        case x: CompactNonEmpty                    \u21d2 Compound(x, this)\n+        case Compound(head, tail: CompactNonEmpty) \u21d2 Compound(head, Compound(tail, this))\n+        case x: Compound                           \u21d2 newBuilder.+=(x).+=(this).result().asInstanceOf[Compound]\n+      }\n+    def toByteArray = {\n+      require(length <= Int.MaxValue, \"Cannot create a byte array greater than 2GB\")\n+      val array = Array.ofDim[Byte](length.toInt)\n+      copyToArray(array)\n+      array\n+    }\n+  }\n+\n+  sealed abstract class CompactNonEmpty extends NonEmpty { _: Product \u21d2\n+    override def toString = s\"$productPrefix(<$length bytes>)\"\n+  }\n+\n+  case class Bytes private[HttpData] (bytes: ByteString) extends CompactNonEmpty {\n+    def length = bytes.length\n+    def copyToArray(xs: Array[Byte], sourceOffset: Long = 0, targetOffset: Int = 0, span: Int = length.toInt) = {\n+      require(sourceOffset >= 0, \"sourceOffset must be >= 0 but is \" + sourceOffset)\n+      if (sourceOffset < length)\n+        bytes.iterator.drop(sourceOffset.toInt).copyToArray(xs, targetOffset, span)\n+    }\n+    def toByteString = bytes\n+  }\n+\n+  case class FileBytes private[HttpData] (fileName: String, offset: Long = 0, length: Long) extends CompactNonEmpty {\n+    def copyToArray(xs: Array[Byte], sourceOffset: Long = 0, targetOffset: Int = 0, span: Int = length.toInt) = {\n+      require(sourceOffset >= 0, \"sourceOffset must be >= 0 but is \" + sourceOffset)\n+      if (span > 0 && xs.length > 0 && sourceOffset < length) {\n+        require(0 <= targetOffset && targetOffset < xs.length, s\"start must be >= 0 and <= ${xs.length} but is $targetOffset\")\n+        val stream = new FileInputStream(fileName)\n+        stream.skip(offset + sourceOffset)\n+        val targetEnd = math.min(xs.length, targetOffset + math.min(span, (length - sourceOffset).toInt))\n+        @tailrec def load(ix: Int = targetOffset): Unit =\n+          if (ix < targetEnd)\n+            stream.read(xs, ix, targetEnd - ix) match {\n+              case -1    \u21d2 // file length changed since this FileBytes instance was created\n+              case count \u21d2 load(ix + count)\n+            }\n+        load()\n+        stream.close()",
        "path": "spray-http/src/main/scala/spray/http/HttpData.scala",
        "position": null,
        "original_position": 139,
        "commit_id": "ab3576136927703586828e8bd8a1edaea1e07a31",
        "original_commit_id": "fad394ef11a6b5fa29c711cd480d910c6611cfc0",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Very good point and clearly an oversight here.\nI'll get that fixed right away.\nThanks for having our back!\n",
        "created_at": "2013-09-02T07:45:59Z",
        "updated_at": "2013-09-10T14:06:13Z",
        "html_url": "https://github.com/spray/spray/pull/478#discussion_r6106117",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/478",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6106117"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/478#discussion_r6106117"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/478"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6181404",
        "pull_request_review_id": null,
        "id": 6181404,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODE0MDQ=",
        "diff_hunk": "@@ -18,19 +18,35 @@ package spray.httpx.marshalling\n \n import java.nio.CharBuffer\n import scala.xml.NodeSeq\n+import akka.util.ByteString\n import spray.http._\n import MediaTypes._\n \n trait BasicMarshallers {\n \n-  def byteArrayMarshaller(contentType: ContentType) =\n+  implicit val ByteArrayMarshaller = byteArrayMarshaller(ContentTypes.`application/octet-stream`)\n+  def byteArrayMarshaller(contentType: ContentType): Marshaller[Array[Byte]] =\n     Marshaller.of[Array[Byte]](contentType) { (value, _, ctx) \u21d2\n       // we marshal to the ContentType given as argument to the method, not the one established by content-negotiation,\n       // since the former is the one belonging to the byte array\n       ctx.marshalTo(HttpEntity(contentType, value))\n     }\n \n-  implicit val ByteArrayMarshaller = byteArrayMarshaller(ContentTypes.`application/octet-stream`)\n+  implicit val ByteStringMarshaller = byteStringMarshaller(ContentTypes.`application/octet-stream`)\n+  def byteStringMarshaller(contentType: ContentType): Marshaller[ByteString] =\n+    Marshaller.of[ByteString](contentType) { (value, _, ctx) \u21d2\n+      // we marshal to the ContentType given as argument to the method, not the one established by content-negotiation,\n+      // since the former is the one belonging to the ByteString\n+      ctx.marshalTo(HttpEntity(contentType, value))\n+    }\n+\n+  implicit val HttpDataMarshaller = httpDataMarshaller(ContentTypes.`application/octet-stream`)\n+  def httpDataMarshaller(contentType: ContentType): Marshaller[HttpData] =\n+    Marshaller.of[HttpData](contentType) { (value, _, ctx) \u21d2\n+      // we marshal to the ContentType given as argument to the method, not the one established by content-negotiation,\n+      // since the former is the one belonging to the ByteString",
        "path": "spray-httpx/src/main/scala/spray/httpx/marshalling/BasicMarshallers.scala",
        "position": null,
        "original_position": 32,
        "commit_id": "ab3576136927703586828e8bd8a1edaea1e07a31",
        "original_commit_id": "7b69b34c528d3772401b990e67ad2f1cb1644b25",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\"to the HttpData\"\n",
        "created_at": "2013-09-05T13:41:34Z",
        "updated_at": "2013-09-10T14:06:13Z",
        "html_url": "https://github.com/spray/spray/pull/478#discussion_r6181404",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/478",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6181404"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/478#discussion_r6181404"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/478"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6184430",
        "pull_request_review_id": null,
        "id": 6184430,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODQ0MzA=",
        "diff_hunk": "@@ -18,19 +18,35 @@ package spray.httpx.marshalling\n \n import java.nio.CharBuffer\n import scala.xml.NodeSeq\n+import akka.util.ByteString\n import spray.http._\n import MediaTypes._\n \n trait BasicMarshallers {\n \n-  def byteArrayMarshaller(contentType: ContentType) =\n+  implicit val ByteArrayMarshaller = byteArrayMarshaller(ContentTypes.`application/octet-stream`)\n+  def byteArrayMarshaller(contentType: ContentType): Marshaller[Array[Byte]] =\n     Marshaller.of[Array[Byte]](contentType) { (value, _, ctx) \u21d2\n       // we marshal to the ContentType given as argument to the method, not the one established by content-negotiation,\n       // since the former is the one belonging to the byte array\n       ctx.marshalTo(HttpEntity(contentType, value))\n     }\n \n-  implicit val ByteArrayMarshaller = byteArrayMarshaller(ContentTypes.`application/octet-stream`)\n+  implicit val ByteStringMarshaller = byteStringMarshaller(ContentTypes.`application/octet-stream`)\n+  def byteStringMarshaller(contentType: ContentType): Marshaller[ByteString] =\n+    Marshaller.of[ByteString](contentType) { (value, _, ctx) \u21d2\n+      // we marshal to the ContentType given as argument to the method, not the one established by content-negotiation,\n+      // since the former is the one belonging to the ByteString\n+      ctx.marshalTo(HttpEntity(contentType, value))\n+    }\n+\n+  implicit val HttpDataMarshaller = httpDataMarshaller(ContentTypes.`application/octet-stream`)\n+  def httpDataMarshaller(contentType: ContentType): Marshaller[HttpData] =\n+    Marshaller.of[HttpData](contentType) { (value, _, ctx) \u21d2\n+      // we marshal to the ContentType given as argument to the method, not the one established by content-negotiation,\n+      // since the former is the one belonging to the ByteString",
        "path": "spray-httpx/src/main/scala/spray/httpx/marshalling/BasicMarshallers.scala",
        "position": null,
        "original_position": 32,
        "commit_id": "ab3576136927703586828e8bd8a1edaea1e07a31",
        "original_commit_id": "7b69b34c528d3772401b990e67ad2f1cb1644b25",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "right\n",
        "created_at": "2013-09-05T15:25:24Z",
        "updated_at": "2013-09-10T14:06:13Z",
        "html_url": "https://github.com/spray/spray/pull/478#discussion_r6184430",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/478",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6184430"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/478#discussion_r6184430"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/478"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6148942",
        "pull_request_review_id": null,
        "id": 6148942,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDg5NDI=",
        "diff_hunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright (C) 2011-2013 spray.io\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.can.client\n+\n+import akka.actor._\n+import spray.http.{ Uri, HttpHeaders, HttpRequest }\n+\n+private[can] class ProxiedHostConnector(host: String, port: Int, proxyConnector: ActorRef) extends Actor with ActorLogging {\n+\n+  import Uri._\n+  val Authority(uriHost, normalizedPort, _) = Authority(Host(host), port).normalizedFor(\"http\")\n+  val hostHeader = HttpHeaders.Host(host, normalizedPort)\n+\n+  context.watch(proxyConnector)\n+\n+  def receive: Receive = {\n+    case request: HttpRequest \u21d2\n+      request.header[HttpHeaders.Host] match {\n+        case Some(hostHeader @ HttpHeaders.Host(h, p)) if h != host || p != port \u21d2\n+          log.warning(s\"sending request with host header '$hostHeader.toString' to a proxied connection to $host:$port\")\n+        case _ \u21d2\n+      }\n+      val effectiveUri =\n+        if (request.uri.isRelative)\n+          request.uri.toEffectiveHttpRequestUri(false, uriHost, port)\n+        else {\n+          log.warning(s\"sending request with absolute Uri '$request.uri.toString' to a proxied connection to $host:$port\")\n+          request.uri\n+        }\n+      proxyConnector.forward(request.copy(uri = effectiveUri).withHeaders(hostHeader :: request.headers))\n+    case Terminated(`proxyConnector`) \u21d2\n+      context.stop(self)",
        "path": "spray-can/src/main/scala/spray/can/client/ProxiedHostConnector.scala",
        "position": null,
        "original_position": 46,
        "commit_id": "9725417588d4a3e4b5122fa567b3e8943294d7f6",
        "original_commit_id": "502b8e3661a4be812c6d39a1f237e0a1404c4701",
        "user": {
            "login": "2beaucoup",
            "id": 243903,
            "node_id": "MDQ6VXNlcjI0MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/243903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/2beaucoup",
            "html_url": "https://github.com/2beaucoup",
            "followers_url": "https://api.github.com/users/2beaucoup/followers",
            "following_url": "https://api.github.com/users/2beaucoup/following{/other_user}",
            "gists_url": "https://api.github.com/users/2beaucoup/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/2beaucoup/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/2beaucoup/subscriptions",
            "organizations_url": "https://api.github.com/users/2beaucoup/orgs",
            "repos_url": "https://api.github.com/users/2beaucoup/repos",
            "events_url": "https://api.github.com/users/2beaucoup/events{/privacy}",
            "received_events_url": "https://api.github.com/users/2beaucoup/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'm no actor expert (yet). Here I try to sync the lifecycles between `ProxiedHostConnector` and `HttpHostConnector`.\n",
        "created_at": "2013-09-04T09:27:24Z",
        "updated_at": "2013-09-11T12:33:48Z",
        "html_url": "https://github.com/spray/spray/pull/490#discussion_r6148942",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/490",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6148942"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/490#discussion_r6148942"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/490"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6203637",
        "pull_request_review_id": null,
        "id": 6203637,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDM2Mzc=",
        "diff_hunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright (C) 2011-2013 spray.io\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.can.client\n+\n+import akka.actor._\n+import spray.http.{ Uri, HttpHeaders, HttpRequest }\n+\n+private[can] class ProxiedHostConnector(host: String, port: Int, proxyConnector: ActorRef) extends Actor with ActorLogging {",
        "path": "spray-can/src/main/scala/spray/can/client/ProxiedHostConnector.scala",
        "position": null,
        "original_position": 22,
        "commit_id": "9725417588d4a3e4b5122fa567b3e8943294d7f6",
        "original_commit_id": "3a76af2bfdafb7689938d6771ea21f549a17799f",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I know it's missing at other places, but could we have a short, high-level specification what this actor is supposed to do.\n",
        "created_at": "2013-09-06T08:41:54Z",
        "updated_at": "2013-09-11T12:33:48Z",
        "html_url": "https://github.com/spray/spray/pull/490#discussion_r6203637",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/490",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6203637"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/490#discussion_r6203637"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/490"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6203708",
        "pull_request_review_id": null,
        "id": 6203708,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDM3MDg=",
        "diff_hunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright (C) 2011-2013 spray.io\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.can.client\n+\n+import spray.can.Http\n+import spray.util._\n+\n+private[can] object ProxySupport {\n+  private final val * = '*'\n+\n+  // see http://docs.oracle.com/javase/6/docs/technotes/guides/net/proxies.html\n+  def validIgnore(pattern: String) = pattern.exists(_ != *) && !pattern.drop(1).dropRight(1).contains(*)\n+\n+  def proxyFor(normalizedSetup: Http.HostConnectorSetup): Option[(String, Int)] =\n+    if (normalizedSetup.sslEncryption) None // TODO\n+    else {\n+      import Http.ConnectionType._\n+      normalizedSetup.connection match {\n+        case Direct                        \u21d2 None\n+        case Proxied(proxyHost, proxyPort) \u21d2 Some((proxyHost, proxyPort))\n+        case AutoProxied \u21d2\n+          normalizedSetup.settings.get.connectionSettings.proxySettings.get(\"http\") flatMap {\n+            case ProxySettings(proxyHost, proxyPort, ignorePatterns) \u21d2\n+              def matches(pattern: String) = {\n+                val matchStart = pattern endsWith *\n+                val matchEnd = pattern startsWith *\n+                val (start, end, check): (Int, Int, (String, String) \u21d2 Boolean) = (matchStart, matchEnd) match {",
        "path": "spray-can/src/main/scala/spray/can/client/ProxySupport.scala",
        "position": null,
        "original_position": 41,
        "commit_id": "9725417588d4a3e4b5122fa567b3e8943294d7f6",
        "original_commit_id": "3a76af2bfdafb7689938d6771ea21f549a17799f",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Maybe that's the most concise way of writing the code, but in any case, it's probably not the most readable :) Do we have any alternative?\n",
        "created_at": "2013-09-06T08:46:13Z",
        "updated_at": "2013-09-11T12:33:48Z",
        "html_url": "https://github.com/spray/spray/pull/490#discussion_r6203708",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/490",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6203708"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/490#discussion_r6203708"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/490"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6203810",
        "pull_request_review_id": null,
        "id": 6203810,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDM4MTA=",
        "diff_hunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright (C) 2011-2013 spray.io\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.can.client\n+\n+import spray.can.Http\n+import spray.util._\n+\n+private[can] object ProxySupport {\n+  private final val * = '*'\n+\n+  // see http://docs.oracle.com/javase/6/docs/technotes/guides/net/proxies.html\n+  def validIgnore(pattern: String) = pattern.exists(_ != *) && !pattern.drop(1).dropRight(1).contains(*)\n+\n+  def proxyFor(normalizedSetup: Http.HostConnectorSetup): Option[(String, Int)] =\n+    if (normalizedSetup.sslEncryption) None // TODO\n+    else {\n+      import Http.ConnectionType._\n+      normalizedSetup.connection match {\n+        case Direct                        \u21d2 None\n+        case Proxied(proxyHost, proxyPort) \u21d2 Some((proxyHost, proxyPort))\n+        case AutoProxied \u21d2\n+          normalizedSetup.settings.get.connectionSettings.proxySettings.get(\"http\") flatMap {\n+            case ProxySettings(proxyHost, proxyPort, ignorePatterns) \u21d2\n+              def matches(pattern: String) = {\n+                val matchStart = pattern endsWith *\n+                val matchEnd = pattern startsWith *\n+                val (start, end, check): (Int, Int, (String, String) \u21d2 Boolean) = (matchStart, matchEnd) match {",
        "path": "spray-can/src/main/scala/spray/can/client/ProxySupport.scala",
        "position": null,
        "original_position": 41,
        "commit_id": "9725417588d4a3e4b5122fa567b3e8943294d7f6",
        "original_commit_id": "3a76af2bfdafb7689938d6771ea21f549a17799f",
        "user": {
            "login": "2beaucoup",
            "id": 243903,
            "node_id": "MDQ6VXNlcjI0MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/243903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/2beaucoup",
            "html_url": "https://github.com/2beaucoup",
            "followers_url": "https://api.github.com/users/2beaucoup/followers",
            "following_url": "https://api.github.com/users/2beaucoup/following{/other_user}",
            "gists_url": "https://api.github.com/users/2beaucoup/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/2beaucoup/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/2beaucoup/subscriptions",
            "organizations_url": "https://api.github.com/users/2beaucoup/orgs",
            "repos_url": "https://api.github.com/users/2beaucoup/repos",
            "events_url": "https://api.github.com/users/2beaucoup/events{/privacy}",
            "received_events_url": "https://api.github.com/users/2beaucoup/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Please see https://github.com/2beaucoup/spray/commit/502b8e3661a4be812c6d39a1f237e0a1404c4701#commitcomment-4013590 ;)\n\nI guess we could fall back to regex matching. As wildcards are only allowed at first/last position I thought I could as well match \"by hand\".\n",
        "created_at": "2013-09-06T08:53:13Z",
        "updated_at": "2013-09-11T12:33:48Z",
        "html_url": "https://github.com/spray/spray/pull/490#discussion_r6203810",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/490",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6203810"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/490#discussion_r6203810"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/490"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6203857",
        "pull_request_review_id": null,
        "id": 6203857,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDM4NTc=",
        "diff_hunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright (C) 2011-2013 spray.io\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.can.client\n+\n+import akka.actor._\n+import spray.http.{ Uri, HttpHeaders, HttpRequest }\n+\n+private[can] class ProxiedHostConnector(host: String, port: Int, proxyConnector: ActorRef) extends Actor with ActorLogging {",
        "path": "spray-can/src/main/scala/spray/can/client/ProxiedHostConnector.scala",
        "position": null,
        "original_position": 22,
        "commit_id": "9725417588d4a3e4b5122fa567b3e8943294d7f6",
        "original_commit_id": "3a76af2bfdafb7689938d6771ea21f549a17799f",
        "user": {
            "login": "2beaucoup",
            "id": 243903,
            "node_id": "MDQ6VXNlcjI0MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/243903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/2beaucoup",
            "html_url": "https://github.com/2beaucoup",
            "followers_url": "https://api.github.com/users/2beaucoup/followers",
            "following_url": "https://api.github.com/users/2beaucoup/following{/other_user}",
            "gists_url": "https://api.github.com/users/2beaucoup/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/2beaucoup/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/2beaucoup/subscriptions",
            "organizations_url": "https://api.github.com/users/2beaucoup/orgs",
            "repos_url": "https://api.github.com/users/2beaucoup/repos",
            "events_url": "https://api.github.com/users/2beaucoup/events{/privacy}",
            "received_events_url": "https://api.github.com/users/2beaucoup/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I was just trying to adhere to the standard here. ;)\n\nAs it's just adding the host/port to the headers/uri and delegating this shouldn't be too hard.\n",
        "created_at": "2013-09-06T08:56:15Z",
        "updated_at": "2013-09-11T12:33:48Z",
        "html_url": "https://github.com/spray/spray/pull/490#discussion_r6203857",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/490",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6203857"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/490#discussion_r6203857"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/490"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6203899",
        "pull_request_review_id": null,
        "id": 6203899,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDM4OTk=",
        "diff_hunk": "@@ -28,9 +28,11 @@ private[can] class HttpManager(httpSettings: HttpExt#Settings) extends Actor wit\n   private[this] val listenerCounter = Iterator from 0\n   private[this] val groupCounter = Iterator from 0\n   private[this] val hostConnectorCounter = Iterator from 0\n+  private[this] val proxyConnectorCounter = Iterator from 0\n \n   private[this] var settingsGroups = Map.empty[ClientConnectionSettings, ActorRef]\n   private[this] var hostConnectors = Map.empty[HostConnectorSetup, ActorRef]\n+  private[this] var proxiedConnectors = Map.empty[(String, Int, HostConnectorSetup), ActorRef]",
        "path": "spray-can/src/main/scala/spray/can/HttpManager.scala",
        "position": null,
        "original_position": 17,
        "commit_id": "9725417588d4a3e4b5122fa567b3e8943294d7f6",
        "original_commit_id": "3a76af2bfdafb7689938d6771ea21f549a17799f",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Why do we need another map? Shouldn't `HostConnectorSetup` contain all the necessary information? I would consider it the task of normalization to replace `AutoProxied` setups with the actual setup as determined from the settings. What would be the downside?\n",
        "created_at": "2013-09-06T08:59:03Z",
        "updated_at": "2013-09-11T12:33:48Z",
        "html_url": "https://github.com/spray/spray/pull/490#discussion_r6203899",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/490",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6203899"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/490#discussion_r6203899"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/490"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6203941",
        "pull_request_review_id": null,
        "id": 6203941,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDM5NDE=",
        "diff_hunk": "@@ -32,13 +32,9 @@ private[can] class HttpHostConnector(normalizedSetup: Http.HostConnectorSetup, c\n   private[this] val dispatchStrategy = if (settings.pipelining) new PipelinedStrategy else new NonPipelinedStrategy\n   private[this] var openRequestCounts = Map.empty[ActorRef, Int] // open requests per child, holds -1 if unconnected\n   private[this] val hostHeader = {\n-    val encrypted = normalizedSetup.sslEncryption\n-    val port = normalizedSetup.port match {\n-      case 443 if encrypted \u21d2 0\n-      case 80 if !encrypted \u21d2 0\n-      case x                \u21d2 x\n-    }\n-    HttpHeaders.Host(normalizedSetup.host, port)\n+    import Uri._",
        "path": "spray-can/src/main/scala/spray/can/client/HttpHostConnector.scala",
        "position": null,
        "original_position": 20,
        "commit_id": "9725417588d4a3e4b5122fa567b3e8943294d7f6",
        "original_commit_id": "3a76af2bfdafb7689938d6771ea21f549a17799f",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "What's this change about?\n",
        "created_at": "2013-09-06T09:01:24Z",
        "updated_at": "2013-09-11T12:33:48Z",
        "html_url": "https://github.com/spray/spray/pull/490#discussion_r6203941",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/490",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6203941"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/490#discussion_r6203941"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/490"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6203969",
        "pull_request_review_id": null,
        "id": 6203969,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDM5Njk=",
        "diff_hunk": "@@ -28,9 +28,11 @@ private[can] class HttpManager(httpSettings: HttpExt#Settings) extends Actor wit\n   private[this] val listenerCounter = Iterator from 0\n   private[this] val groupCounter = Iterator from 0\n   private[this] val hostConnectorCounter = Iterator from 0\n+  private[this] val proxyConnectorCounter = Iterator from 0\n \n   private[this] var settingsGroups = Map.empty[ClientConnectionSettings, ActorRef]\n   private[this] var hostConnectors = Map.empty[HostConnectorSetup, ActorRef]\n+  private[this] var proxiedConnectors = Map.empty[(String, Int, HostConnectorSetup), ActorRef]",
        "path": "spray-can/src/main/scala/spray/can/HttpManager.scala",
        "position": null,
        "original_position": 17,
        "commit_id": "9725417588d4a3e4b5122fa567b3e8943294d7f6",
        "original_commit_id": "3a76af2bfdafb7689938d6771ea21f549a17799f",
        "user": {
            "login": "2beaucoup",
            "id": 243903,
            "node_id": "MDQ6VXNlcjI0MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/243903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/2beaucoup",
            "html_url": "https://github.com/2beaucoup",
            "followers_url": "https://api.github.com/users/2beaucoup/followers",
            "following_url": "https://api.github.com/users/2beaucoup/following{/other_user}",
            "gists_url": "https://api.github.com/users/2beaucoup/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/2beaucoup/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/2beaucoup/subscriptions",
            "organizations_url": "https://api.github.com/users/2beaucoup/orgs",
            "repos_url": "https://api.github.com/users/2beaucoup/repos",
            "events_url": "https://api.github.com/users/2beaucoup/events{/privacy}",
            "received_events_url": "https://api.github.com/users/2beaucoup/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Please see the discussion [here](https://github.com/2beaucoup/spray/commit/502b8e3661a4be812c6d39a1f237e0a1404c4701#commitcomment-4013172).\n",
        "created_at": "2013-09-06T09:02:43Z",
        "updated_at": "2013-09-11T12:33:48Z",
        "html_url": "https://github.com/spray/spray/pull/490#discussion_r6203969",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/490",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6203969"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/490#discussion_r6203969"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/490"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6203983",
        "pull_request_review_id": null,
        "id": 6203983,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDM5ODM=",
        "diff_hunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright (C) 2011-2013 spray.io\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.can.client\n+\n+import spray.can.Http\n+import spray.util._\n+\n+private[can] object ProxySupport {\n+  private final val * = '*'\n+\n+  // see http://docs.oracle.com/javase/6/docs/technotes/guides/net/proxies.html\n+  def validIgnore(pattern: String) = pattern.exists(_ != *) && !pattern.drop(1).dropRight(1).contains(*)\n+\n+  def proxyFor(normalizedSetup: Http.HostConnectorSetup): Option[(String, Int)] =\n+    if (normalizedSetup.sslEncryption) None // TODO\n+    else {\n+      import Http.ConnectionType._\n+      normalizedSetup.connection match {\n+        case Direct                        \u21d2 None\n+        case Proxied(proxyHost, proxyPort) \u21d2 Some((proxyHost, proxyPort))\n+        case AutoProxied \u21d2\n+          normalizedSetup.settings.get.connectionSettings.proxySettings.get(\"http\") flatMap {\n+            case ProxySettings(proxyHost, proxyPort, ignorePatterns) \u21d2\n+              def matches(pattern: String) = {\n+                val matchStart = pattern endsWith *\n+                val matchEnd = pattern startsWith *\n+                val (start, end, check): (Int, Int, (String, String) \u21d2 Boolean) = (matchStart, matchEnd) match {",
        "path": "spray-can/src/main/scala/spray/can/client/ProxySupport.scala",
        "position": null,
        "original_position": 41,
        "commit_id": "9725417588d4a3e4b5122fa567b3e8943294d7f6",
        "original_commit_id": "3a76af2bfdafb7689938d6771ea21f549a17799f",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "In any case, the logic dealing with understanding `nonProxyHosts` needs it's own method.\n",
        "created_at": "2013-09-06T09:03:32Z",
        "updated_at": "2013-09-11T12:33:48Z",
        "html_url": "https://github.com/spray/spray/pull/490#discussion_r6203983",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/490",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6203983"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/490#discussion_r6203983"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/490"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6204005",
        "pull_request_review_id": null,
        "id": 6204005,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDQwMDU=",
        "diff_hunk": "@@ -32,13 +32,9 @@ private[can] class HttpHostConnector(normalizedSetup: Http.HostConnectorSetup, c\n   private[this] val dispatchStrategy = if (settings.pipelining) new PipelinedStrategy else new NonPipelinedStrategy\n   private[this] var openRequestCounts = Map.empty[ActorRef, Int] // open requests per child, holds -1 if unconnected\n   private[this] val hostHeader = {\n-    val encrypted = normalizedSetup.sslEncryption\n-    val port = normalizedSetup.port match {\n-      case 443 if encrypted \u21d2 0\n-      case 80 if !encrypted \u21d2 0\n-      case x                \u21d2 x\n-    }\n-    HttpHeaders.Host(normalizedSetup.host, port)\n+    import Uri._",
        "path": "spray-can/src/main/scala/spray/can/client/HttpHostConnector.scala",
        "position": null,
        "original_position": 20,
        "commit_id": "9725417588d4a3e4b5122fa567b3e8943294d7f6",
        "original_commit_id": "3a76af2bfdafb7689938d6771ea21f549a17799f",
        "user": {
            "login": "2beaucoup",
            "id": 243903,
            "node_id": "MDQ6VXNlcjI0MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/243903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/2beaucoup",
            "html_url": "https://github.com/2beaucoup",
            "followers_url": "https://api.github.com/users/2beaucoup/followers",
            "following_url": "https://api.github.com/users/2beaucoup/following{/other_user}",
            "gists_url": "https://api.github.com/users/2beaucoup/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/2beaucoup/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/2beaucoup/subscriptions",
            "organizations_url": "https://api.github.com/users/2beaucoup/orgs",
            "repos_url": "https://api.github.com/users/2beaucoup/repos",
            "events_url": "https://api.github.com/users/2beaucoup/events{/privacy}",
            "received_events_url": "https://api.github.com/users/2beaucoup/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Using `Authority.normalizedForHttp()` instead of duplicating the default port logic here as explained in the commit msg.\n",
        "created_at": "2013-09-06T09:05:37Z",
        "updated_at": "2013-09-11T12:33:48Z",
        "html_url": "https://github.com/spray/spray/pull/490#discussion_r6204005",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/490",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6204005"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/490#discussion_r6204005"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/490"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6204224",
        "pull_request_review_id": null,
        "id": 6204224,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDQyMjQ=",
        "diff_hunk": "@@ -28,9 +28,11 @@ private[can] class HttpManager(httpSettings: HttpExt#Settings) extends Actor wit\n   private[this] val listenerCounter = Iterator from 0\n   private[this] val groupCounter = Iterator from 0\n   private[this] val hostConnectorCounter = Iterator from 0\n+  private[this] val proxyConnectorCounter = Iterator from 0\n \n   private[this] var settingsGroups = Map.empty[ClientConnectionSettings, ActorRef]\n   private[this] var hostConnectors = Map.empty[HostConnectorSetup, ActorRef]\n+  private[this] var proxiedConnectors = Map.empty[(String, Int, HostConnectorSetup), ActorRef]",
        "path": "spray-can/src/main/scala/spray/can/HttpManager.scala",
        "position": null,
        "original_position": 17,
        "commit_id": "9725417588d4a3e4b5122fa567b3e8943294d7f6",
        "original_commit_id": "3a76af2bfdafb7689938d6771ea21f549a17799f",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I agree the discussion is related but what about the suggestion to replace `AutoProxied` during normalization with the actual proxy from the settings? Which information is then missing from the `HostConnectorSetup`?\n",
        "created_at": "2013-09-06T09:21:33Z",
        "updated_at": "2013-09-11T12:33:48Z",
        "html_url": "https://github.com/spray/spray/pull/490#discussion_r6204224",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/490",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6204224"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/490#discussion_r6204224"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/490"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6204288",
        "pull_request_review_id": null,
        "id": 6204288,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDQyODg=",
        "diff_hunk": "@@ -28,9 +28,11 @@ private[can] class HttpManager(httpSettings: HttpExt#Settings) extends Actor wit\n   private[this] val listenerCounter = Iterator from 0\n   private[this] val groupCounter = Iterator from 0\n   private[this] val hostConnectorCounter = Iterator from 0\n+  private[this] val proxyConnectorCounter = Iterator from 0\n \n   private[this] var settingsGroups = Map.empty[ClientConnectionSettings, ActorRef]\n   private[this] var hostConnectors = Map.empty[HostConnectorSetup, ActorRef]\n+  private[this] var proxiedConnectors = Map.empty[(String, Int, HostConnectorSetup), ActorRef]",
        "path": "spray-can/src/main/scala/spray/can/HttpManager.scala",
        "position": null,
        "original_position": 17,
        "commit_id": "9725417588d4a3e4b5122fa567b3e8943294d7f6",
        "original_commit_id": "3a76af2bfdafb7689938d6771ea21f549a17799f",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I.e. it would change semantics a little bit in that `HostConnectorSetup(connection = AutoProxied)` and `HostConnectorSetup(connection = Proxied(a, b))` would return the same connector if (a, b) is also the configured proxy. I would actually consider that a feature and it should simplify the code quite a bit.\n",
        "created_at": "2013-09-06T09:25:26Z",
        "updated_at": "2013-09-11T12:33:48Z",
        "html_url": "https://github.com/spray/spray/pull/490#discussion_r6204288",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/490",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6204288"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/490#discussion_r6204288"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/490"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6204296",
        "pull_request_review_id": null,
        "id": 6204296,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDQyOTY=",
        "diff_hunk": "@@ -32,13 +32,9 @@ private[can] class HttpHostConnector(normalizedSetup: Http.HostConnectorSetup, c\n   private[this] val dispatchStrategy = if (settings.pipelining) new PipelinedStrategy else new NonPipelinedStrategy\n   private[this] var openRequestCounts = Map.empty[ActorRef, Int] // open requests per child, holds -1 if unconnected\n   private[this] val hostHeader = {\n-    val encrypted = normalizedSetup.sslEncryption\n-    val port = normalizedSetup.port match {\n-      case 443 if encrypted \u21d2 0\n-      case 80 if !encrypted \u21d2 0\n-      case x                \u21d2 x\n-    }\n-    HttpHeaders.Host(normalizedSetup.host, port)\n+    import Uri._",
        "path": "spray-can/src/main/scala/spray/can/client/HttpHostConnector.scala",
        "position": null,
        "original_position": 20,
        "commit_id": "9725417588d4a3e4b5122fa567b3e8943294d7f6",
        "original_commit_id": "3a76af2bfdafb7689938d6771ea21f549a17799f",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Thanks, sorry I missed that line in the message.\n",
        "created_at": "2013-09-06T09:25:59Z",
        "updated_at": "2013-09-11T12:33:48Z",
        "html_url": "https://github.com/spray/spray/pull/490#discussion_r6204296",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/490",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6204296"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/490#discussion_r6204296"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/490"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6204318",
        "pull_request_review_id": null,
        "id": 6204318,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDQzMTg=",
        "diff_hunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright (C) 2011-2013 spray.io\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.can.client\n+\n+import spray.can.Http\n+import spray.util._\n+\n+private[can] object ProxySupport {\n+  private final val * = '*'\n+\n+  // see http://docs.oracle.com/javase/6/docs/technotes/guides/net/proxies.html\n+  def validIgnore(pattern: String) = pattern.exists(_ != *) && !pattern.drop(1).dropRight(1).contains(*)\n+\n+  def proxyFor(normalizedSetup: Http.HostConnectorSetup): Option[(String, Int)] =\n+    if (normalizedSetup.sslEncryption) None // TODO\n+    else {\n+      import Http.ConnectionType._\n+      normalizedSetup.connection match {\n+        case Direct                        \u21d2 None\n+        case Proxied(proxyHost, proxyPort) \u21d2 Some((proxyHost, proxyPort))\n+        case AutoProxied \u21d2\n+          normalizedSetup.settings.get.connectionSettings.proxySettings.get(\"http\") flatMap {\n+            case ProxySettings(proxyHost, proxyPort, ignorePatterns) \u21d2\n+              def matches(pattern: String) = {\n+                val matchStart = pattern endsWith *\n+                val matchEnd = pattern startsWith *\n+                val (start, end, check): (Int, Int, (String, String) \u21d2 Boolean) = (matchStart, matchEnd) match {",
        "path": "spray-can/src/main/scala/spray/can/client/ProxySupport.scala",
        "position": null,
        "original_position": 41,
        "commit_id": "9725417588d4a3e4b5122fa567b3e8943294d7f6",
        "original_commit_id": "3a76af2bfdafb7689938d6771ea21f549a17799f",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Haha, sorry for missing the initial discussion. I see, it seems @sirthias and I don't share the same opinion in this case.\n",
        "created_at": "2013-09-06T09:27:14Z",
        "updated_at": "2013-09-11T12:33:48Z",
        "html_url": "https://github.com/spray/spray/pull/490#discussion_r6204318",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/490",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6204318"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/490#discussion_r6204318"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/490"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6204320",
        "pull_request_review_id": null,
        "id": 6204320,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDQzMjA=",
        "diff_hunk": "@@ -28,9 +28,11 @@ private[can] class HttpManager(httpSettings: HttpExt#Settings) extends Actor wit\n   private[this] val listenerCounter = Iterator from 0\n   private[this] val groupCounter = Iterator from 0\n   private[this] val hostConnectorCounter = Iterator from 0\n+  private[this] val proxyConnectorCounter = Iterator from 0\n \n   private[this] var settingsGroups = Map.empty[ClientConnectionSettings, ActorRef]\n   private[this] var hostConnectors = Map.empty[HostConnectorSetup, ActorRef]\n+  private[this] var proxiedConnectors = Map.empty[(String, Int, HostConnectorSetup), ActorRef]",
        "path": "spray-can/src/main/scala/spray/can/HttpManager.scala",
        "position": null,
        "original_position": 17,
        "commit_id": "9725417588d4a3e4b5122fa567b3e8943294d7f6",
        "original_commit_id": "3a76af2bfdafb7689938d6771ea21f549a17799f",
        "user": {
            "login": "2beaucoup",
            "id": 243903,
            "node_id": "MDQ6VXNlcjI0MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/243903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/2beaucoup",
            "html_url": "https://github.com/2beaucoup",
            "followers_url": "https://api.github.com/users/2beaucoup/followers",
            "following_url": "https://api.github.com/users/2beaucoup/following{/other_user}",
            "gists_url": "https://api.github.com/users/2beaucoup/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/2beaucoup/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/2beaucoup/subscriptions",
            "organizations_url": "https://api.github.com/users/2beaucoup/orgs",
            "repos_url": "https://api.github.com/users/2beaucoup/repos",
            "events_url": "https://api.github.com/users/2beaucoup/events{/privacy}",
            "received_events_url": "https://api.github.com/users/2beaucoup/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Sounds great. I'll give that a try.\n",
        "created_at": "2013-09-06T09:27:17Z",
        "updated_at": "2013-09-11T12:33:48Z",
        "html_url": "https://github.com/spray/spray/pull/490#discussion_r6204320",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/490",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6204320"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/490#discussion_r6204320"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/490"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6204461",
        "pull_request_review_id": null,
        "id": 6204461,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDQ0NjE=",
        "diff_hunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright (C) 2011-2013 spray.io\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.can.client\n+\n+import spray.can.Http\n+import spray.util._\n+\n+private[can] object ProxySupport {\n+  private final val * = '*'\n+\n+  // see http://docs.oracle.com/javase/6/docs/technotes/guides/net/proxies.html\n+  def validIgnore(pattern: String) = pattern.exists(_ != *) && !pattern.drop(1).dropRight(1).contains(*)\n+\n+  def proxyFor(normalizedSetup: Http.HostConnectorSetup): Option[(String, Int)] =\n+    if (normalizedSetup.sslEncryption) None // TODO\n+    else {\n+      import Http.ConnectionType._\n+      normalizedSetup.connection match {\n+        case Direct                        \u21d2 None\n+        case Proxied(proxyHost, proxyPort) \u21d2 Some((proxyHost, proxyPort))\n+        case AutoProxied \u21d2\n+          normalizedSetup.settings.get.connectionSettings.proxySettings.get(\"http\") flatMap {\n+            case ProxySettings(proxyHost, proxyPort, ignorePatterns) \u21d2\n+              def matches(pattern: String) = {\n+                val matchStart = pattern endsWith *\n+                val matchEnd = pattern startsWith *\n+                val (start, end, check): (Int, Int, (String, String) \u21d2 Boolean) = (matchStart, matchEnd) match {",
        "path": "spray-can/src/main/scala/spray/can/client/ProxySupport.scala",
        "position": null,
        "original_position": 41,
        "commit_id": "9725417588d4a3e4b5122fa567b3e8943294d7f6",
        "original_commit_id": "3a76af2bfdafb7689938d6771ea21f549a17799f",
        "user": {
            "login": "2beaucoup",
            "id": 243903,
            "node_id": "MDQ6VXNlcjI0MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/243903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/2beaucoup",
            "html_url": "https://github.com/2beaucoup",
            "followers_url": "https://api.github.com/users/2beaucoup/followers",
            "following_url": "https://api.github.com/users/2beaucoup/following{/other_user}",
            "gists_url": "https://api.github.com/users/2beaucoup/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/2beaucoup/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/2beaucoup/subscriptions",
            "organizations_url": "https://api.github.com/users/2beaucoup/orgs",
            "repos_url": "https://api.github.com/users/2beaucoup/repos",
            "events_url": "https://api.github.com/users/2beaucoup/events{/privacy}",
            "received_events_url": "https://api.github.com/users/2beaucoup/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Readability is in the eye of the beholder... Extracting a method seems like a good compromise here. ;)\n",
        "created_at": "2013-09-06T09:34:48Z",
        "updated_at": "2013-09-11T12:33:48Z",
        "html_url": "https://github.com/spray/spray/pull/490#discussion_r6204461",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/490",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6204461"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/490#discussion_r6204461"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/490"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6210319",
        "pull_request_review_id": null,
        "id": 6210319,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTAzMTk=",
        "diff_hunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright (C) 2011-2013 spray.io\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.can.client\n+\n+import akka.actor._\n+import spray.http.{ Uri, HttpHeaders, HttpRequest }\n+\n+private[can] class ProxiedHostConnector(host: String, port: Int, proxyConnector: ActorRef) extends Actor with ActorLogging {",
        "path": "spray-can/src/main/scala/spray/can/client/ProxiedHostConnector.scala",
        "position": null,
        "original_position": 22,
        "commit_id": "9725417588d4a3e4b5122fa567b3e8943294d7f6",
        "original_commit_id": "3a76af2bfdafb7689938d6771ea21f549a17799f",
        "user": {
            "login": "2beaucoup",
            "id": 243903,
            "node_id": "MDQ6VXNlcjI0MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/243903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/2beaucoup",
            "html_url": "https://github.com/2beaucoup",
            "followers_url": "https://api.github.com/users/2beaucoup/followers",
            "following_url": "https://api.github.com/users/2beaucoup/following{/other_user}",
            "gists_url": "https://api.github.com/users/2beaucoup/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/2beaucoup/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/2beaucoup/subscriptions",
            "organizations_url": "https://api.github.com/users/2beaucoup/orgs",
            "repos_url": "https://api.github.com/users/2beaucoup/repos",
            "events_url": "https://api.github.com/users/2beaucoup/events{/privacy}",
            "received_events_url": "https://api.github.com/users/2beaucoup/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "done\n",
        "created_at": "2013-09-06T15:15:41Z",
        "updated_at": "2013-09-11T12:33:48Z",
        "html_url": "https://github.com/spray/spray/pull/490#discussion_r6210319",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/490",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6210319"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/490#discussion_r6210319"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/490"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6210329",
        "pull_request_review_id": null,
        "id": 6210329,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTAzMjk=",
        "diff_hunk": "@@ -28,9 +28,11 @@ private[can] class HttpManager(httpSettings: HttpExt#Settings) extends Actor wit\n   private[this] val listenerCounter = Iterator from 0\n   private[this] val groupCounter = Iterator from 0\n   private[this] val hostConnectorCounter = Iterator from 0\n+  private[this] val proxyConnectorCounter = Iterator from 0\n \n   private[this] var settingsGroups = Map.empty[ClientConnectionSettings, ActorRef]\n   private[this] var hostConnectors = Map.empty[HostConnectorSetup, ActorRef]\n+  private[this] var proxiedConnectors = Map.empty[(String, Int, HostConnectorSetup), ActorRef]",
        "path": "spray-can/src/main/scala/spray/can/HttpManager.scala",
        "position": null,
        "original_position": 17,
        "commit_id": "9725417588d4a3e4b5122fa567b3e8943294d7f6",
        "original_commit_id": "3a76af2bfdafb7689938d6771ea21f549a17799f",
        "user": {
            "login": "2beaucoup",
            "id": 243903,
            "node_id": "MDQ6VXNlcjI0MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/243903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/2beaucoup",
            "html_url": "https://github.com/2beaucoup",
            "followers_url": "https://api.github.com/users/2beaucoup/followers",
            "following_url": "https://api.github.com/users/2beaucoup/following{/other_user}",
            "gists_url": "https://api.github.com/users/2beaucoup/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/2beaucoup/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/2beaucoup/subscriptions",
            "organizations_url": "https://api.github.com/users/2beaucoup/orgs",
            "repos_url": "https://api.github.com/users/2beaucoup/repos",
            "events_url": "https://api.github.com/users/2beaucoup/events{/privacy}",
            "received_events_url": "https://api.github.com/users/2beaucoup/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "done\n",
        "created_at": "2013-09-06T15:15:57Z",
        "updated_at": "2013-09-11T12:33:48Z",
        "html_url": "https://github.com/spray/spray/pull/490#discussion_r6210329",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/490",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6210329"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/490#discussion_r6210329"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/490"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6376882",
        "pull_request_review_id": null,
        "id": 6376882,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzY4ODI=",
        "diff_hunk": "@@ -0,0 +1,20 @@\n+package spray.util\n+\n+import scala.collection.immutable.Queue\n+import akka.actor.Actor\n+\n+/**\n+ * A simplistic Stash implementation that doesn't need a special mailbox and doesn't\n+ * off any ordering as the standard Stash which sorts unstashed messages to the front",
        "path": "spray-util/src/main/scala/spray/util/SimpleStash.scala",
        "position": null,
        "original_position": 8,
        "commit_id": "78b711e0f7d71dc8ba87e770b54177a548813833",
        "original_commit_id": "771a65b7cc4fe8c506d96691acc020f8e2ec796c",
        "user": {
            "login": "martin-g",
            "id": 232002,
            "node_id": "MDQ6VXNlcjIzMjAwMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/232002?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/martin-g",
            "html_url": "https://github.com/martin-g",
            "followers_url": "https://api.github.com/users/martin-g/followers",
            "following_url": "https://api.github.com/users/martin-g/following{/other_user}",
            "gists_url": "https://api.github.com/users/martin-g/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/martin-g/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/martin-g/subscriptions",
            "organizations_url": "https://api.github.com/users/martin-g/orgs",
            "repos_url": "https://api.github.com/users/martin-g/repos",
            "events_url": "https://api.github.com/users/martin-g/events{/privacy}",
            "received_events_url": "https://api.github.com/users/martin-g/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "s/off/offer/ ?\n",
        "created_at": "2013-09-16T13:58:32Z",
        "updated_at": "2013-09-19T14:57:07Z",
        "html_url": "https://github.com/spray/spray/pull/511#discussion_r6376882",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/511",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6376882"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/511#discussion_r6376882"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/511"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6376920",
        "pull_request_review_id": null,
        "id": 6376920,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzY5MjA=",
        "diff_hunk": "@@ -0,0 +1,20 @@\n+package spray.util\n+\n+import scala.collection.immutable.Queue\n+import akka.actor.Actor\n+\n+/**\n+ * A simplistic Stash implementation that doesn't need a special mailbox and doesn't\n+ * off any ordering as the standard Stash which sorts unstashed messages to the front\n+ * of the mailbox.\n+ *\n+ * It also doesn't provide any reasonable Actor restart behavior.\n+ */\n+trait SimpleStash { self: Actor \u21d2\n+  var buffered = Queue.empty[Any]\n+  def stash(x: Any): Unit = buffered = buffered.enqueue(x)\n+  def unstashAll() = {\n+    buffered.foreach(self !)\n+    buffered = Queue.empty",
        "path": "spray-util/src/main/scala/spray/util/SimpleStash.scala",
        "position": null,
        "original_position": 18,
        "commit_id": "78b711e0f7d71dc8ba87e770b54177a548813833",
        "original_commit_id": "771a65b7cc4fe8c506d96691acc020f8e2ec796c",
        "user": {
            "login": "martin-g",
            "id": 232002,
            "node_id": "MDQ6VXNlcjIzMjAwMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/232002?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/martin-g",
            "html_url": "https://github.com/martin-g",
            "followers_url": "https://api.github.com/users/martin-g/followers",
            "following_url": "https://api.github.com/users/martin-g/following{/other_user}",
            "gists_url": "https://api.github.com/users/martin-g/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/martin-g/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/martin-g/subscriptions",
            "organizations_url": "https://api.github.com/users/martin-g/orgs",
            "repos_url": "https://api.github.com/users/martin-g/repos",
            "events_url": "https://api.github.com/users/martin-g/events{/privacy}",
            "received_events_url": "https://api.github.com/users/martin-g/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "empty[Any] ?\nJust to be explicit in its type as at line 14.\n",
        "created_at": "2013-09-16T14:00:07Z",
        "updated_at": "2013-09-19T14:57:07Z",
        "html_url": "https://github.com/spray/spray/pull/511#discussion_r6376920",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/511",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6376920"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/511#discussion_r6376920"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/511"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6429884",
        "pull_request_review_id": null,
        "id": 6429884,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0Mjk4ODQ=",
        "diff_hunk": "@@ -49,16 +73,25 @@ object LruCache {\n  * A thread-safe implementation of [[spray.caching.cache]].\n  * The cache has a defined maximum number of entries it can store. After the maximum capacity is reached new\n  * entries cause old ones to be evicted in a last-recently-used manner, i.e. the entries that haven't been accessed for\n- * the longest time are evicted first.\n+ * the longest time are evicted first. If specified, the onEvict handler will be called on any entries evicted in this manner\n+ * (but not on entries removed normally).\n  */\n-final class SimpleLruCache[V](val maxCapacity: Int, val initialCapacity: Int) extends Cache[V] {\n+final class SimpleLruCache[V](val maxCapacity: Int, val initialCapacity: Int, onEvict: Option[Future[V] => Unit] = None) extends Cache[V] with EvictionHandler[V] {\n   require(maxCapacity >= 0, \"maxCapacity must not be negative\")\n   require(initialCapacity <= maxCapacity, \"initialCapacity must be <= maxCapacity\")\n \n-  private[caching] val store = new ConcurrentLinkedHashMap.Builder[Any, Future[V]]\n-    .initialCapacity(initialCapacity)\n-    .maximumWeightedCapacity(maxCapacity)\n-    .build()\n+  private[caching] lazy val store = {\n+    val baseBuilder = new ConcurrentLinkedHashMap.Builder[Any, Future[V]]\n+      .initialCapacity(initialCapacity)\n+      .maximumWeightedCapacity(maxCapacity)\n+\n+    val builderWithEvict = onEvict.map { evictionFunction =>",
        "path": "spray-caching/src/main/scala/spray/caching/LruCache.scala",
        "position": null,
        "original_position": 71,
        "commit_id": "fdedb10cab285e487c7af87bc4d1c9c03c3faa92",
        "original_commit_id": "15988c317bc54612997813dd42baf6fa5998c3a3",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Isn't the builder side-effecting anyway? So you could use `foreach` instead?\n",
        "created_at": "2013-09-18T10:35:15Z",
        "updated_at": "2013-09-19T18:56:12Z",
        "html_url": "https://github.com/spray/spray/pull/500#discussion_r6429884",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/500",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6429884"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/500#discussion_r6429884"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/500"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6429895",
        "pull_request_review_id": null,
        "id": 6429895,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0Mjk4OTU=",
        "diff_hunk": "@@ -41,7 +56,16 @@ object LruCache {\n     if (isNonZeroFinite(timeToLive) || isNonZeroFinite(timeToIdle))\n       new ExpiringLruCache[V](maxCapacity, initialCapacity, millis(timeToLive), millis(timeToIdle))\n     else\n-      new SimpleLruCache[V](maxCapacity, initialCapacity)\n+      new SimpleLruCache[V](maxCapacity, initialCapacity, onEvict)\n+  }\n+}\n+\n+private[caching] trait EvictionHandler[V] {",
        "path": "spray-caching/src/main/scala/spray/caching/LruCache.scala",
        "position": 46,
        "original_position": 40,
        "commit_id": "fdedb10cab285e487c7af87bc4d1c9c03c3faa92",
        "original_commit_id": "15988c317bc54612997813dd42baf6fa5998c3a3",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Why do we need this trait? Couldn't we put the single method into the companion object of SimpleLruCache?\n",
        "created_at": "2013-09-18T10:35:54Z",
        "updated_at": "2013-09-19T18:56:12Z",
        "html_url": "https://github.com/spray/spray/pull/500#discussion_r6429895",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/500",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6429895"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/500#discussion_r6429895"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/500"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6429910",
        "pull_request_review_id": null,
        "id": 6429910,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0Mjk5MTA=",
        "diff_hunk": "@@ -34,6 +34,21 @@ object LruCache {\n                initialCapacity: Int = 16,\n                timeToLive: Duration = Duration.Zero,\n                timeToIdle: Duration = Duration.Zero): Cache[V] = {\n+    LruCache.apply(maxCapacity, initialCapacity, timeToLive, timeToIdle, None)\n+  }\n+\n+  def withEvictHandler[V](maxCapacity: Int = 500,",
        "path": "spray-caching/src/main/scala/spray/caching/LruCache.scala",
        "position": null,
        "original_position": 16,
        "commit_id": "fdedb10cab285e487c7af87bc4d1c9c03c3faa92",
        "original_commit_id": "15988c317bc54612997813dd42baf6fa5998c3a3",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "`withEvictionHandler`\n",
        "created_at": "2013-09-18T10:37:04Z",
        "updated_at": "2013-09-19T18:56:12Z",
        "html_url": "https://github.com/spray/spray/pull/500#discussion_r6429910",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/500",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6429910"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/500#discussion_r6429910"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/500"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6435841",
        "pull_request_review_id": null,
        "id": 6435841,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MzU4NDE=",
        "diff_hunk": "@@ -41,7 +56,16 @@ object LruCache {\n     if (isNonZeroFinite(timeToLive) || isNonZeroFinite(timeToIdle))\n       new ExpiringLruCache[V](maxCapacity, initialCapacity, millis(timeToLive), millis(timeToIdle))\n     else\n-      new SimpleLruCache[V](maxCapacity, initialCapacity)\n+      new SimpleLruCache[V](maxCapacity, initialCapacity, onEvict)\n+  }\n+}\n+\n+private[caching] trait EvictionHandler[V] {\n+\n+  private[caching] def evictionListener[T](toFuture: T => Future[V], onEvict: Future[V] => Unit) = new EvictionListener[Any, T] {\n+    def onEviction(key: Any, value: T) {",
        "path": "spray-caching/src/main/scala/spray/caching/LruCache.scala",
        "position": null,
        "original_position": 43,
        "commit_id": "fdedb10cab285e487c7af87bc4d1c9c03c3faa92",
        "original_commit_id": "15988c317bc54612997813dd42baf6fa5998c3a3",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Explicit `: Unit` result type and no braces please.\n",
        "created_at": "2013-09-18T15:12:05Z",
        "updated_at": "2013-09-19T18:56:12Z",
        "html_url": "https://github.com/spray/spray/pull/500#discussion_r6435841",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/500",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6435841"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/500#discussion_r6435841"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/500"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6436070",
        "pull_request_review_id": null,
        "id": 6436070,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MzYwNzA=",
        "diff_hunk": "@@ -34,6 +34,21 @@ object LruCache {\n                initialCapacity: Int = 16,\n                timeToLive: Duration = Duration.Zero,\n                timeToIdle: Duration = Duration.Zero): Cache[V] = {\n+    LruCache.apply(maxCapacity, initialCapacity, timeToLive, timeToIdle, None)\n+  }\n+\n+  def withEvictHandler[V](maxCapacity: Int = 500,",
        "path": "spray-caching/src/main/scala/spray/caching/LruCache.scala",
        "position": null,
        "original_position": 16,
        "commit_id": "fdedb10cab285e487c7af87bc4d1c9c03c3faa92",
        "original_commit_id": "15988c317bc54612997813dd42baf6fa5998c3a3",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Do we really need this method?\nIt seems I can do the same thing by simply using `apply`.\n",
        "created_at": "2013-09-18T15:18:53Z",
        "updated_at": "2013-09-19T18:56:12Z",
        "html_url": "https://github.com/spray/spray/pull/500#discussion_r6436070",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/500",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6436070"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/500#discussion_r6436070"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/500"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6436173",
        "pull_request_review_id": null,
        "id": 6436173,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MzYxNzM=",
        "diff_hunk": "@@ -34,6 +34,21 @@ object LruCache {\n                initialCapacity: Int = 16,\n                timeToLive: Duration = Duration.Zero,\n                timeToIdle: Duration = Duration.Zero): Cache[V] = {\n+    LruCache.apply(maxCapacity, initialCapacity, timeToLive, timeToIdle, None)\n+  }\n+\n+  def withEvictHandler[V](maxCapacity: Int = 500,\n+                          initialCapacity: Int = 16,\n+                          timeToLive: Duration = Duration.Zero,\n+                          timeToIdle: Duration = Duration.Zero)(onEvict: Future[V] => Unit): Cache[V] = {\n+    LruCache(maxCapacity, initialCapacity, timeToLive, timeToIdle, Some(onEvict))\n+  }\n+\n+  private def apply[V](maxCapacity: Int,\n+                       initialCapacity: Int,\n+                       timeToLive: Duration,\n+                       timeToIdle: Duration,\n+                       onEvict: Option[Future[V] => Unit]): Cache[V] = {",
        "path": "spray-caching/src/main/scala/spray/caching/LruCache.scala",
        "position": null,
        "original_position": 27,
        "commit_id": "fdedb10cab285e487c7af87bc4d1c9c03c3faa92",
        "original_commit_id": "15988c317bc54612997813dd42baf6fa5998c3a3",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'd vote for loosing the `Option` around `onEvict` and adding a\n\n```\nval EmptyEvictionHandler: Future[Any] => Unit = _ => ()\n```\n\non the `Cache` companion object as the default.\n",
        "created_at": "2013-09-18T15:21:45Z",
        "updated_at": "2013-09-19T18:56:12Z",
        "html_url": "https://github.com/spray/spray/pull/500#discussion_r6436173",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/500",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6436173"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/500#discussion_r6436173"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/500"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6436325",
        "pull_request_review_id": null,
        "id": 6436325,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MzYzMjU=",
        "diff_hunk": "@@ -41,7 +56,16 @@ object LruCache {\n     if (isNonZeroFinite(timeToLive) || isNonZeroFinite(timeToIdle))\n       new ExpiringLruCache[V](maxCapacity, initialCapacity, millis(timeToLive), millis(timeToIdle))",
        "path": "spray-caching/src/main/scala/spray/caching/LruCache.scala",
        "position": 39,
        "original_position": 33,
        "commit_id": "fdedb10cab285e487c7af87bc4d1c9c03c3faa92",
        "original_commit_id": "15988c317bc54612997813dd42baf6fa5998c3a3",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Aren't you missing the `onEvict` argument here?\n",
        "created_at": "2013-09-18T15:25:11Z",
        "updated_at": "2013-09-19T18:56:12Z",
        "html_url": "https://github.com/spray/spray/pull/500#discussion_r6436325",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/500",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6436325"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/500#discussion_r6436325"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/500"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6436468",
        "pull_request_review_id": null,
        "id": 6436468,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MzY0Njg=",
        "diff_hunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright (C) 2011-2013 spray.io\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.caching\n+\n+import java.util.Random\n+import java.util.concurrent.CountDownLatch\n+import akka.actor.ActorSystem\n+import scala.concurrent.{ Promise, Future }\n+import scala.concurrent.duration._\n+import org.specs2.mutable.Specification\n+import org.specs2.matcher.Matcher\n+import spray.util._\n+import org.specs2.time.NoTimeConversions\n+\n+class SimpleLruCacheSpec extends Specification with NoTimeConversions {",
        "path": "spray-caching/src/test/scala/spray/caching/SimpleLruCacheSpec.scala",
        "position": 29,
        "original_position": 29,
        "commit_id": "fdedb10cab285e487c7af87bc4d1c9c03c3faa92",
        "original_commit_id": "15988c317bc54612997813dd42baf6fa5998c3a3",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Is there a clever way to avoid much of the duplication that we have between the `ExpiringLruCacheSpec` and the `SimpleLruCacheSpec` here?\n",
        "created_at": "2013-09-18T15:29:13Z",
        "updated_at": "2013-09-19T18:56:12Z",
        "html_url": "https://github.com/spray/spray/pull/500#discussion_r6436468",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/500",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6436468"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/500#discussion_r6436468"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/500"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6466772",
        "pull_request_review_id": null,
        "id": 6466772,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NjY3NzI=",
        "diff_hunk": "@@ -34,6 +34,21 @@ object LruCache {\n                initialCapacity: Int = 16,\n                timeToLive: Duration = Duration.Zero,\n                timeToIdle: Duration = Duration.Zero): Cache[V] = {\n+    LruCache.apply(maxCapacity, initialCapacity, timeToLive, timeToIdle, None)\n+  }\n+\n+  def withEvictHandler[V](maxCapacity: Int = 500,",
        "path": "spray-caching/src/main/scala/spray/caching/LruCache.scala",
        "position": null,
        "original_position": 16,
        "commit_id": "fdedb10cab285e487c7af87bc4d1c9c03c3faa92",
        "original_commit_id": "15988c317bc54612997813dd42baf6fa5998c3a3",
        "user": {
            "login": "drapp",
            "id": 1399280,
            "node_id": "MDQ6VXNlcjEzOTkyODA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1399280?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/drapp",
            "html_url": "https://github.com/drapp",
            "followers_url": "https://api.github.com/users/drapp/followers",
            "following_url": "https://api.github.com/users/drapp/following{/other_user}",
            "gists_url": "https://api.github.com/users/drapp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/drapp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/drapp/subscriptions",
            "organizations_url": "https://api.github.com/users/drapp/orgs",
            "repos_url": "https://api.github.com/users/drapp/repos",
            "events_url": "https://api.github.com/users/drapp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/drapp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This issue is that `.apply(...)` and `.apply(...)(...)` can't coexist. I get compile errors like\n\n```\n[error] /Users/drapp/Depot/spray/spray-caching/src/main/scala/spray/caching/LruCache.scala:43: double definition:\n[error] method apply$default$4:[V]=> scala.concurrent.duration.Duration and\n[error] method apply$default$4:[V]=> scala.concurrent.duration.Duration at line 36\n[error] have same type\n[error]                timeToIdle: Duration = Duration.Zero)(onEvict: Future[V] ? Unit): Cache[V] = {\n...\n```\n\nThis was my solution. We could also ditch the fancy syntax and just have \n\n```\nprivate def apply[V](maxCapacity: Int,\n                       initialCapacity: Int,\n                       timeToLive: Duration,\n                       timeToIdle: Duration,\n                       onEvict: Future[V] => Unit = EmptyEvictionHandler): Cache[V] = {\n```\n\nI'm open to other suggestions\n",
        "created_at": "2013-09-19T17:26:25Z",
        "updated_at": "2013-09-19T18:56:12Z",
        "html_url": "https://github.com/spray/spray/pull/500#discussion_r6466772",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/500",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6466772"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/500#discussion_r6466772"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/500"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6466797",
        "pull_request_review_id": null,
        "id": 6466797,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NjY3OTc=",
        "diff_hunk": "@@ -41,7 +56,16 @@ object LruCache {\n     if (isNonZeroFinite(timeToLive) || isNonZeroFinite(timeToIdle))\n       new ExpiringLruCache[V](maxCapacity, initialCapacity, millis(timeToLive), millis(timeToIdle))\n     else\n-      new SimpleLruCache[V](maxCapacity, initialCapacity)\n+      new SimpleLruCache[V](maxCapacity, initialCapacity, onEvict)\n+  }\n+}\n+\n+private[caching] trait EvictionHandler[V] {",
        "path": "spray-caching/src/main/scala/spray/caching/LruCache.scala",
        "position": 46,
        "original_position": 40,
        "commit_id": "fdedb10cab285e487c7af87bc4d1c9c03c3faa92",
        "original_commit_id": "15988c317bc54612997813dd42baf6fa5998c3a3",
        "user": {
            "login": "drapp",
            "id": 1399280,
            "node_id": "MDQ6VXNlcjEzOTkyODA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1399280?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/drapp",
            "html_url": "https://github.com/drapp",
            "followers_url": "https://api.github.com/users/drapp/followers",
            "following_url": "https://api.github.com/users/drapp/following{/other_user}",
            "gists_url": "https://api.github.com/users/drapp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/drapp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/drapp/subscriptions",
            "organizations_url": "https://api.github.com/users/drapp/orgs",
            "repos_url": "https://api.github.com/users/drapp/repos",
            "events_url": "https://api.github.com/users/drapp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/drapp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It's used by both `SimpleLruCache` and `ExpiringLruCache`, so I thought it should be somewhere common. I'm happy to move it elsewhere\n",
        "created_at": "2013-09-19T17:27:57Z",
        "updated_at": "2013-09-19T18:56:12Z",
        "html_url": "https://github.com/spray/spray/pull/500#discussion_r6466797",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/500",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6466797"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/500#discussion_r6466797"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/500"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6466920",
        "pull_request_review_id": null,
        "id": 6466920,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NjY5MjA=",
        "diff_hunk": "@@ -49,16 +73,25 @@ object LruCache {\n  * A thread-safe implementation of [[spray.caching.cache]].\n  * The cache has a defined maximum number of entries it can store. After the maximum capacity is reached new\n  * entries cause old ones to be evicted in a last-recently-used manner, i.e. the entries that haven't been accessed for\n- * the longest time are evicted first.\n+ * the longest time are evicted first. If specified, the onEvict handler will be called on any entries evicted in this manner\n+ * (but not on entries removed normally).\n  */\n-final class SimpleLruCache[V](val maxCapacity: Int, val initialCapacity: Int) extends Cache[V] {\n+final class SimpleLruCache[V](val maxCapacity: Int, val initialCapacity: Int, onEvict: Option[Future[V] => Unit] = None) extends Cache[V] with EvictionHandler[V] {\n   require(maxCapacity >= 0, \"maxCapacity must not be negative\")\n   require(initialCapacity <= maxCapacity, \"initialCapacity must be <= maxCapacity\")\n \n-  private[caching] val store = new ConcurrentLinkedHashMap.Builder[Any, Future[V]]\n-    .initialCapacity(initialCapacity)\n-    .maximumWeightedCapacity(maxCapacity)\n-    .build()\n+  private[caching] lazy val store = {\n+    val baseBuilder = new ConcurrentLinkedHashMap.Builder[Any, Future[V]]\n+      .initialCapacity(initialCapacity)\n+      .maximumWeightedCapacity(maxCapacity)\n+\n+    val builderWithEvict = onEvict.map { evictionFunction =>",
        "path": "spray-caching/src/main/scala/spray/caching/LruCache.scala",
        "position": null,
        "original_position": 71,
        "commit_id": "fdedb10cab285e487c7af87bc4d1c9c03c3faa92",
        "original_commit_id": "15988c317bc54612997813dd42baf6fa5998c3a3",
        "user": {
            "login": "drapp",
            "id": 1399280,
            "node_id": "MDQ6VXNlcjEzOTkyODA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1399280?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/drapp",
            "html_url": "https://github.com/drapp",
            "followers_url": "https://api.github.com/users/drapp/followers",
            "following_url": "https://api.github.com/users/drapp/following{/other_user}",
            "gists_url": "https://api.github.com/users/drapp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/drapp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/drapp/subscriptions",
            "organizations_url": "https://api.github.com/users/drapp/orgs",
            "repos_url": "https://api.github.com/users/drapp/repos",
            "events_url": "https://api.github.com/users/drapp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/drapp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "true\n",
        "created_at": "2013-09-19T17:32:15Z",
        "updated_at": "2013-09-19T18:56:12Z",
        "html_url": "https://github.com/spray/spray/pull/500#discussion_r6466920",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/500",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6466920"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/500#discussion_r6466920"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/500"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6469453",
        "pull_request_review_id": null,
        "id": 6469453,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0Njk0NTM=",
        "diff_hunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright (C) 2011-2013 spray.io\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.caching\n+\n+import java.util.Random\n+import java.util.concurrent.CountDownLatch\n+import akka.actor.ActorSystem\n+import scala.concurrent.{ Promise, Future }\n+import scala.concurrent.duration._\n+import org.specs2.mutable.Specification\n+import org.specs2.matcher.Matcher\n+import spray.util._\n+import org.specs2.time.NoTimeConversions\n+\n+class SimpleLruCacheSpec extends Specification with NoTimeConversions {",
        "path": "spray-caching/src/test/scala/spray/caching/SimpleLruCacheSpec.scala",
        "position": 29,
        "original_position": 29,
        "commit_id": "fdedb10cab285e487c7af87bc4d1c9c03c3faa92",
        "original_commit_id": "15988c317bc54612997813dd42baf6fa5998c3a3",
        "user": {
            "login": "drapp",
            "id": 1399280,
            "node_id": "MDQ6VXNlcjEzOTkyODA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1399280?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/drapp",
            "html_url": "https://github.com/drapp",
            "followers_url": "https://api.github.com/users/drapp/followers",
            "following_url": "https://api.github.com/users/drapp/following{/other_user}",
            "gists_url": "https://api.github.com/users/drapp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/drapp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/drapp/subscriptions",
            "organizations_url": "https://api.github.com/users/drapp/orgs",
            "repos_url": "https://api.github.com/users/drapp/repos",
            "events_url": "https://api.github.com/users/drapp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/drapp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Not without making `ExpiringLruCacheSpec` worse. it does a bunch of verification on `cache.store.toString` that doesn't work in `SimpleLruCache` because it uses different data types. I tried to merge them a bit, but it seemed uglier than just having some duplication of tests\n",
        "created_at": "2013-09-19T18:47:02Z",
        "updated_at": "2013-09-19T18:56:12Z",
        "html_url": "https://github.com/spray/spray/pull/500#discussion_r6469453",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/500",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6469453"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/500#discussion_r6469453"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/500"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6537243",
        "pull_request_review_id": null,
        "id": 6537243,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MzcyNDM=",
        "diff_hunk": "@@ -3,4 +3,29 @@\n onComplete\n ==========\n \n-(todo)\n\\ No newline at end of file\n+\"Unwraps\" a ``Future[T]`` and run its inner route after future completion with the future's\n+value as an extraction of type ``Try[T]``.\n+\n+Signature\n+---------\n+\n+.. includecode:: /../spray-routing/src/main/scala/spray/routing/directives/FutureDirectives.scala\n+   :snippet: onComplete\n+\n+Description\n+-----------\n+\n+The execution of the inner route passed to a onComplete directive is deferred until the given future\n+has completed. The future is evaluated once at route creation time, ideally in order to prepare\n+some costly resource necessary to evaluate the inner route. In case you need to evaluate the future\n+per each request, consider wrapping the onComplete directive with the :ref:`-dynamic-`",
        "path": "docs/documentation/spray-routing/future-directives/oncomplete.rst",
        "position": null,
        "original_position": 21,
        "commit_id": "19f58774b0fb0517ad758dee1ea45bda83f096f7",
        "original_commit_id": "3c1ef63db6522a029469e99af570fea5f872dd83",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Maybe you could add an example to showcase when you would need dynamic.\n",
        "created_at": "2013-09-24T08:02:35Z",
        "updated_at": "2013-09-24T13:03:27Z",
        "html_url": "https://github.com/spray/spray/pull/528#discussion_r6537243",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/528",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6537243"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/528#discussion_r6537243"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/528"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6537269",
        "pull_request_review_id": null,
        "id": 6537269,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MzcyNjk=",
        "diff_hunk": "@@ -3,4 +3,29 @@\n onComplete\n ==========\n \n-(todo)\n\\ No newline at end of file\n+\"Unwraps\" a ``Future[T]`` and run its inner route after future completion with the future's\n+value as an extraction of type ``Try[T]``.\n+\n+Signature\n+---------\n+\n+.. includecode:: /../spray-routing/src/main/scala/spray/routing/directives/FutureDirectives.scala\n+   :snippet: onComplete\n+\n+Description\n+-----------\n+\n+The execution of the inner route passed to a onComplete directive is deferred until the given future\n+has completed. The future is evaluated once at route creation time, ideally in order to prepare\n+some costly resource necessary to evaluate the inner route. In case you need to evaluate the future\n+per each request, consider wrapping the onComplete directive with the :ref:`-dynamic-`",
        "path": "docs/documentation/spray-routing/future-directives/oncomplete.rst",
        "position": null,
        "original_position": 21,
        "commit_id": "19f58774b0fb0517ad758dee1ea45bda83f096f7",
        "original_commit_id": "3c1ef63db6522a029469e99af570fea5f872dd83",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Also, as this sentence is basically the same for each of the directives it might make sense to create an extra section on the overview page for FuturesDirectives explaining that and linking from here. WDYT?\n",
        "created_at": "2013-09-24T08:04:13Z",
        "updated_at": "2013-09-24T13:03:27Z",
        "html_url": "https://github.com/spray/spray/pull/528#discussion_r6537269",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/528",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6537269"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/528#discussion_r6537269"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/528"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6541725",
        "pull_request_review_id": null,
        "id": 6541725,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NDE3MjU=",
        "diff_hunk": "@@ -3,4 +3,29 @@\n onComplete\n ==========\n \n-(todo)\n\\ No newline at end of file\n+\"Unwraps\" a ``Future[T]`` and run its inner route after future completion with the future's\n+value as an extraction of type ``Try[T]``.\n+\n+Signature\n+---------\n+\n+.. includecode:: /../spray-routing/src/main/scala/spray/routing/directives/FutureDirectives.scala\n+   :snippet: onComplete\n+\n+Description\n+-----------\n+\n+The execution of the inner route passed to a onComplete directive is deferred until the given future\n+has completed. The future is evaluated once at route creation time, ideally in order to prepare\n+some costly resource necessary to evaluate the inner route. In case you need to evaluate the future\n+per each request, consider wrapping the onComplete directive with the :ref:`-dynamic-`",
        "path": "docs/documentation/spray-routing/future-directives/oncomplete.rst",
        "position": null,
        "original_position": 21,
        "commit_id": "19f58774b0fb0517ad758dee1ea45bda83f096f7",
        "original_commit_id": "3c1ef63db6522a029469e99af570fea5f872dd83",
        "user": {
            "login": "ivantopo",
            "id": 1302854,
            "node_id": "MDQ6VXNlcjEzMDI4NTQ=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1302854?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ivantopo",
            "html_url": "https://github.com/ivantopo",
            "followers_url": "https://api.github.com/users/ivantopo/followers",
            "following_url": "https://api.github.com/users/ivantopo/following{/other_user}",
            "gists_url": "https://api.github.com/users/ivantopo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ivantopo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ivantopo/subscriptions",
            "organizations_url": "https://api.github.com/users/ivantopo/orgs",
            "repos_url": "https://api.github.com/users/ivantopo/repos",
            "events_url": "https://api.github.com/users/ivantopo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ivantopo/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "That makes sense! Let me pull it out to the overview page and see how it looks like.\n",
        "created_at": "2013-09-24T12:15:37Z",
        "updated_at": "2013-09-24T13:03:27Z",
        "html_url": "https://github.com/spray/spray/pull/528#discussion_r6541725",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/528",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6541725"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/528#discussion_r6541725"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/528"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6564897",
        "pull_request_review_id": null,
        "id": 6564897,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NjQ4OTc=",
        "diff_hunk": "@@ -294,8 +285,8 @@ class RequestParserSpec extends Specification {\n \n     \"reject a request with\" in {\n       \"an illegal HTTP method\" in {\n-        parse(\"get\") === (NotImplemented, \"Unsupported HTTP method\")\n-        parse(\"GETX\") === (NotImplemented, \"Unsupported HTTP method\")\n+        parse(\"get \") === (NotImplemented, \"Unsupported HTTP method: get\")",
        "path": "spray-can-tests/src/test/scala/spray/can/parsing/RequestParserSpec.scala",
        "position": 86,
        "original_position": 86,
        "commit_id": "5d78dae96f83c0be3509a212ac74e5d68f9a2455",
        "original_commit_id": "3c25c7523f1fdf8fd37bee6c2aa7691a1e66e0ee",
        "user": {
            "login": "martin-g",
            "id": 232002,
            "node_id": "MDQ6VXNlcjIzMjAwMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/232002?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/martin-g",
            "html_url": "https://github.com/martin-g",
            "followers_url": "https://api.github.com/users/martin-g/followers",
            "following_url": "https://api.github.com/users/martin-g/following{/other_user}",
            "gists_url": "https://api.github.com/users/martin-g/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/martin-g/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/martin-g/subscriptions",
            "organizations_url": "https://api.github.com/users/martin-g/orgs",
            "repos_url": "https://api.github.com/users/martin-g/repos",
            "events_url": "https://api.github.com/users/martin-g/events{/privacy}",
            "received_events_url": "https://api.github.com/users/martin-g/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "is the error message correct here?\nthe method is not valid because of the trailing space, right ? If YES then the error message should also have the trailing space. Event better wrap the HTTP method name in quotes, e.g. \"Unsupported HTTP method: 'get '\"\n",
        "created_at": "2013-09-25T06:22:02Z",
        "updated_at": "2013-09-25T09:01:20Z",
        "html_url": "https://github.com/spray/spray/pull/530#discussion_r6564897",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/530",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6564897"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/530#discussion_r6564897"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/530"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6565597",
        "pull_request_review_id": null,
        "id": 6565597,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NjU1OTc=",
        "diff_hunk": "@@ -294,8 +285,8 @@ class RequestParserSpec extends Specification {\n \n     \"reject a request with\" in {\n       \"an illegal HTTP method\" in {\n-        parse(\"get\") === (NotImplemented, \"Unsupported HTTP method\")\n-        parse(\"GETX\") === (NotImplemented, \"Unsupported HTTP method\")\n+        parse(\"get \") === (NotImplemented, \"Unsupported HTTP method: get\")",
        "path": "spray-can-tests/src/test/scala/spray/can/parsing/RequestParserSpec.scala",
        "position": 86,
        "original_position": 86,
        "commit_id": "5d78dae96f83c0be3509a212ac74e5d68f9a2455",
        "original_commit_id": "3c25c7523f1fdf8fd37bee6c2aa7691a1e66e0ee",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "No, the method is invalid because it is not all uppercase.\nWe only need the trailing blank in order to terminate the method parser, because we now also support custom methods (which we weren't before).\n",
        "created_at": "2013-09-25T07:20:45Z",
        "updated_at": "2013-09-25T09:01:20Z",
        "html_url": "https://github.com/spray/spray/pull/530#discussion_r6565597",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/530",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6565597"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/530#discussion_r6565597"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/530"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6567332",
        "pull_request_review_id": null,
        "id": 6567332,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NjczMzI=",
        "diff_hunk": "@@ -11,11 +11,10 @@ import HttpHeaders._\n import parser.HttpParser\n import HttpHeaders.RawHeader\n import spray.io.CommandWrapper\n-import spray.util.SprayActorLogging\n import scala.annotation.tailrec\n \n \n-class FileUploadHandler(client: ActorRef, start: ChunkedRequestStart) extends Actor with SprayActorLogging {\n+class FileUploadHandler(client: ActorRef, start: ChunkedRequestStart) extends Actor with ActorLogging {",
        "path": "examples/spray-can/simple-http-server/src/main/scala/spray/examples/FileUploadHandler.scala",
        "position": 9,
        "original_position": 9,
        "commit_id": "f2c8b5f82c48b114a1c255e8b8fa278c0b3fb403",
        "original_commit_id": "f2c8b5f82c48b114a1c255e8b8fa278c0b3fb403",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This is already fixed in master and conflicts now.\n",
        "created_at": "2013-09-25T09:07:36Z",
        "updated_at": "2013-09-25T09:07:36Z",
        "html_url": "https://github.com/spray/spray/pull/486#discussion_r6567332",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/486",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6567332"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/486#discussion_r6567332"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/486"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6567363",
        "pull_request_review_id": null,
        "id": 6567363,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NjczNjM=",
        "diff_hunk": "@@ -88,8 +88,7 @@ class MultipartUnmarshallersSpec extends Specification {\n            |--XYZABC--\"\"\".stripMargin).as[MultipartFormData] === Right {\n           MultipartFormData(\n             Map(\"email\" -> BodyPart(\n-              HttpEntity(ContentType(`text/plain`, `US-ASCII`), \"test@there.com\"),\n-              List(`Content-Disposition`(\"form-data\", Map(\"name\" -> \"email\"))))))\n+              HttpEntity(ContentType(`text/plain`, `US-ASCII`), \"test@there.com\"))))",
        "path": "spray-httpx/src/test/scala/spray/httpx/unmarshalling/MultipartUnmarshallersSpec.scala",
        "position": 6,
        "original_position": 6,
        "commit_id": "f2c8b5f82c48b114a1c255e8b8fa278c0b3fb403",
        "original_commit_id": "f2c8b5f82c48b114a1c255e8b8fa278c0b3fb403",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This conflicts with changes from this commit:\n\nhttps://github.com/spray/spray/commit/538b2c59744f41e2e85853baa6fccb13fc0c7e92\n",
        "created_at": "2013-09-25T09:09:13Z",
        "updated_at": "2013-09-25T09:09:13Z",
        "html_url": "https://github.com/spray/spray/pull/486#discussion_r6567363",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/486",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6567363"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/486#discussion_r6567363"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/486"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6429932",
        "pull_request_review_id": null,
        "id": 6429932,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0Mjk5MzI=",
        "diff_hunk": "@@ -3,4 +3,37 @@\n entity\n ======\n \n-(todo)\n\\ No newline at end of file\n+Unmarshalls the request entity to the given type passes it to its inner Route. If there is ",
        "path": "docs/documentation/spray-routing/marshalling-directives/entity.rst",
        "position": null,
        "original_position": 6,
        "commit_id": "95293d654eb623ee22d97785066e72abd4497089",
        "original_commit_id": "bcafcf8356a411c710281416f648c91446268fb9",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\"type and passes\"\n",
        "created_at": "2013-09-18T10:38:20Z",
        "updated_at": "2013-09-25T11:55:13Z",
        "html_url": "https://github.com/spray/spray/pull/496#discussion_r6429932",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/496",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6429932"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/496#discussion_r6429932"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/496"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6430002",
        "pull_request_review_id": null,
        "id": 6430002,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MzAwMDI=",
        "diff_hunk": "@@ -3,4 +3,37 @@\n entity\n ======\n \n-(todo)\n\\ No newline at end of file\n+Unmarshalls the request entity to the given type passes it to its inner Route. If there is \n+a problem with unmarshalling the request is rejected with the ``spray.routing.Rejection``\n+produced by the unmarshaller.",
        "path": "docs/documentation/spray-routing/marshalling-directives/entity.rst",
        "position": null,
        "original_position": 8,
        "commit_id": "95293d654eb623ee22d97785066e72abd4497089",
        "original_commit_id": "bcafcf8356a411c710281416f648c91446268fb9",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Actually, that's not completely correct as Unmarshallers cannot produce rejections directly. Instead unmarshallers can produce `Left(exception)` values which are converted into rejections in the entity directive (see its sources).\n\nMaybe we can rephrase it as:\n\n\"If unmarshalling fails the request is rejected with a rejection depending on the error.\"\n\nAnd maybe give the mapping of exceptions => rejections in the description section.\n",
        "created_at": "2013-09-18T10:43:15Z",
        "updated_at": "2013-09-25T11:55:13Z",
        "html_url": "https://github.com/spray/spray/pull/496#discussion_r6430002",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/496",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6430002"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/496#discussion_r6430002"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/496"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6430040",
        "pull_request_review_id": null,
        "id": 6430040,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MzAwNDA=",
        "diff_hunk": "@@ -3,4 +3,37 @@\n entity\n ======\n \n-(todo)\n\\ No newline at end of file\n+Unmarshalls the request entity to the given type passes it to its inner Route. If there is \n+a problem with unmarshalling the request is rejected with the ``spray.routing.Rejection``\n+produced by the unmarshaller.\n+\n+Signature\n+---------\n+\n+.. includecode:: /../spray-routing/src/main/scala/spray/routing/directives/MarshallingDirectives.scala\n+   :snippet: entity[T]",
        "path": "docs/documentation/spray-routing/marshalling-directives/entity.rst",
        "position": null,
        "original_position": 14,
        "commit_id": "95293d654eb623ee22d97785066e72abd4497089",
        "original_commit_id": "bcafcf8356a411c710281416f648c91446268fb9",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You don't need to specify the type parameter any more.\n",
        "created_at": "2013-09-18T10:46:23Z",
        "updated_at": "2013-09-25T11:55:13Z",
        "html_url": "https://github.com/spray/spray/pull/496#discussion_r6430040",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/496",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6430040"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/496#discussion_r6430040"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/496"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6430075",
        "pull_request_review_id": null,
        "id": 6430075,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MzAwNzU=",
        "diff_hunk": "@@ -3,4 +3,46 @@\n handleWith\n ==========\n \n-(todo)\n\\ No newline at end of file\n+Completes the request using the given function. The input to the function is produced with \n+the in-scope entity unmarshaller and the result value of the function is marshalled with \n+the in-scope marshaller.",
        "path": "docs/documentation/spray-routing/marshalling-directives/handleWith.rst",
        "position": null,
        "original_position": 8,
        "commit_id": "95293d654eb623ee22d97785066e72abd4497089",
        "original_commit_id": "bcafcf8356a411c710281416f648c91446268fb9",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Maybe already note here that it's basically a convenience method which combines `entity` with `complete`\n",
        "created_at": "2013-09-18T10:48:31Z",
        "updated_at": "2013-09-25T11:55:13Z",
        "html_url": "https://github.com/spray/spray/pull/496#discussion_r6430075",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/496",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6430075"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/496#discussion_r6430075"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/496"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6430092",
        "pull_request_review_id": null,
        "id": 6430092,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MzAwOTI=",
        "diff_hunk": "@@ -3,4 +3,46 @@\n handleWith\n ==========\n \n-(todo)\n\\ No newline at end of file\n+Completes the request using the given function. The input to the function is produced with \n+the in-scope entity unmarshaller and the result value of the function is marshalled with \n+the in-scope marshaller.\n+   \n+\n+Signature\n+---------\n+\n+.. includecode:: /../spray-routing/src/main/scala/spray/routing/directives/MarshallingDirectives.scala\n+   :snippet: handleWith\n+\n+Description\n+-----------\n+\n+The ``handleWith`` directive is used when you want to handle a route with a given function of \n+type A \u21d2 B.  ``handleWith`` will use both an in-scope unmarshaller to convert a request into \n+type A and an in-scope marshaller to convert type B into a response. This is helpful when your \n+core business logic resides in some other class or you want your business logic to be independent\n+of Spray. You can use ``handleWith`` to \"hand off\" processing to a given function without requiring",
        "path": "docs/documentation/spray-routing/marshalling-directives/handleWith.rst",
        "position": null,
        "original_position": 24,
        "commit_id": "95293d654eb623ee22d97785066e72abd4497089",
        "original_commit_id": "bcafcf8356a411c710281416f648c91446268fb9",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "We usually render spray as `*spray*`.\n",
        "created_at": "2013-09-18T10:49:51Z",
        "updated_at": "2013-09-25T11:55:13Z",
        "html_url": "https://github.com/spray/spray/pull/496#discussion_r6430092",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/496",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6430092"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/496#discussion_r6430092"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/496"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6430119",
        "pull_request_review_id": null,
        "id": 6430119,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MzAxMTk=",
        "diff_hunk": "@@ -3,4 +3,46 @@\n handleWith\n ==========\n \n-(todo)\n\\ No newline at end of file\n+Completes the request using the given function. The input to the function is produced with \n+the in-scope entity unmarshaller and the result value of the function is marshalled with \n+the in-scope marshaller.\n+   \n+\n+Signature\n+---------\n+\n+.. includecode:: /../spray-routing/src/main/scala/spray/routing/directives/MarshallingDirectives.scala\n+   :snippet: handleWith\n+\n+Description\n+-----------\n+\n+The ``handleWith`` directive is used when you want to handle a route with a given function of \n+type A \u21d2 B.  ``handleWith`` will use both an in-scope unmarshaller to convert a request into \n+type A and an in-scope marshaller to convert type B into a response. This is helpful when your \n+core business logic resides in some other class or you want your business logic to be independent\n+of Spray. You can use ``handleWith`` to \"hand off\" processing to a given function without requiring\n+any spray-specific functionality.\n+\n+``handleWith`` is similar to ``produce``.  The main difference is ``handleWith`` automatically\n+calls ``complete`` when the function passed to ``handleWith`` returns. Using ``produce`` you\n+must explicity call the completion function passed from the ``produce`` function.",
        "path": "docs/documentation/spray-routing/marshalling-directives/handleWith.rst",
        "position": 29,
        "original_position": 29,
        "commit_id": "95293d654eb623ee22d97785066e72abd4497089",
        "original_commit_id": "bcafcf8356a411c710281416f648c91446268fb9",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Maybe we should add a sentence about how in consequence the execution semantics differ: `handleWith` is always executed synchronously in the current context while the function `produce` gives you can be sent somewhere else and can be completed in a different execution context.\n",
        "created_at": "2013-09-18T10:51:56Z",
        "updated_at": "2013-09-25T11:55:13Z",
        "html_url": "https://github.com/spray/spray/pull/496#discussion_r6430119",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/496",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6430119"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/496#discussion_r6430119"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/496"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6430130",
        "pull_request_review_id": null,
        "id": 6430130,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MzAxMzA=",
        "diff_hunk": "@@ -157,4 +157,4 @@ class MarshallingDirectivesSpec extends RoutingSpec {\n         }\n     }\n   }\n-}",
        "path": "spray-routing-tests/src/test/scala/spray/routing/MarshallingDirectivesSpec.scala",
        "position": 4,
        "original_position": 4,
        "commit_id": "95293d654eb623ee22d97785066e72abd4497089",
        "original_commit_id": "bcafcf8356a411c710281416f648c91446268fb9",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This change is not needed any more :)\n",
        "created_at": "2013-09-18T10:53:10Z",
        "updated_at": "2013-09-25T11:55:13Z",
        "html_url": "https://github.com/spray/spray/pull/496#discussion_r6430130",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/496",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6430130"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/496#discussion_r6430130"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/496"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6485852",
        "pull_request_review_id": null,
        "id": 6485852,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODU4NTI=",
        "diff_hunk": "@@ -96,7 +99,7 @@ sealed abstract class HttpData {\n    * Returns the contents of this instance as a `Stream[ByteString]` with each",
        "path": "spray-http/src/main/scala/spray/http/HttpData.scala",
        "position": null,
        "original_position": 11,
        "commit_id": "a966cbff077137e31d402077579c2cf4e0a04f49",
        "original_commit_id": "bb13c3d2b4dbf0ba8035abb1bd19f02e10060a87",
        "user": {
            "login": "martin-g",
            "id": 232002,
            "node_id": "MDQ6VXNlcjIzMjAwMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/232002?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/martin-g",
            "html_url": "https://github.com/martin-g",
            "followers_url": "https://api.github.com/users/martin-g/followers",
            "following_url": "https://api.github.com/users/martin-g/following{/other_user}",
            "gists_url": "https://api.github.com/users/martin-g/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/martin-g/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/martin-g/subscriptions",
            "organizations_url": "https://api.github.com/users/martin-g/orgs",
            "repos_url": "https://api.github.com/users/martin-g/repos",
            "events_url": "https://api.github.com/users/martin-g/events{/privacy}",
            "received_events_url": "https://api.github.com/users/martin-g/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Update the scaladoc that the new return type is Stream[HttpData].\n",
        "created_at": "2013-09-20T13:05:40Z",
        "updated_at": "2013-09-25T12:36:38Z",
        "html_url": "https://github.com/spray/spray/pull/517#discussion_r6485852",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/517",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6485852"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/517#discussion_r6485852"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/517"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6485886",
        "pull_request_review_id": null,
        "id": 6485886,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODU4ODY=",
        "diff_hunk": "@@ -187,9 +190,10 @@ object HttpData {\n     def length = 0L\n     def copyToArray(xs: Array[Byte], sourceOffset: Long, targetOffset: Int, span: Int) = ()\n     def slice(offset: Long, span: Int): ByteString = toByteString\n+    def sliceData(offset: Long, span: Long): HttpData = Empty\n     val toByteArray = Array.empty[Byte]\n     def toByteString = ByteString.empty\n-    def toChunkStream(maxChunkSize: Int) = Stream.empty\n+    def toChunkStream(maxChunkSize: Long) = Stream.empty",
        "path": "spray-http/src/main/scala/spray/http/HttpData.scala",
        "position": null,
        "original_position": 27,
        "commit_id": "a966cbff077137e31d402077579c2cf4e0a04f49",
        "original_commit_id": "bb13c3d2b4dbf0ba8035abb1bd19f02e10060a87",
        "user": {
            "login": "martin-g",
            "id": 232002,
            "node_id": "MDQ6VXNlcjIzMjAwMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/232002?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/martin-g",
            "html_url": "https://github.com/martin-g",
            "followers_url": "https://api.github.com/users/martin-g/followers",
            "following_url": "https://api.github.com/users/martin-g/following{/other_user}",
            "gists_url": "https://api.github.com/users/martin-g/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/martin-g/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/martin-g/subscriptions",
            "organizations_url": "https://api.github.com/users/martin-g/orgs",
            "repos_url": "https://api.github.com/users/martin-g/repos",
            "events_url": "https://api.github.com/users/martin-g/events{/privacy}",
            "received_events_url": "https://api.github.com/users/martin-g/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Is \"Stream.empty[HttpData]\" better than \"Stream.empty\" ?\nI remember some article by Bill Venners saying that letting the compiler to infer the correct type makes the compilation slower.\n",
        "created_at": "2013-09-20T13:07:47Z",
        "updated_at": "2013-09-25T12:36:38Z",
        "html_url": "https://github.com/spray/spray/pull/517#discussion_r6485886",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/517",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6485886"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/517#discussion_r6485886"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/517"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6485946",
        "pull_request_review_id": null,
        "id": 6485946,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODU5NDY=",
        "diff_hunk": "@@ -96,7 +99,7 @@ sealed abstract class HttpData {\n    * Returns the contents of this instance as a `Stream[ByteString]` with each",
        "path": "spray-http/src/main/scala/spray/http/HttpData.scala",
        "position": null,
        "original_position": 11,
        "commit_id": "a966cbff077137e31d402077579c2cf4e0a04f49",
        "original_commit_id": "bb13c3d2b4dbf0ba8035abb1bd19f02e10060a87",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Thanks, good catch.\n",
        "created_at": "2013-09-20T13:10:03Z",
        "updated_at": "2013-09-25T12:36:38Z",
        "html_url": "https://github.com/spray/spray/pull/517#discussion_r6485946",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/517",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6485946"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/517#discussion_r6485946"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/517"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6486125",
        "pull_request_review_id": null,
        "id": 6486125,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODYxMjU=",
        "diff_hunk": "@@ -187,9 +190,10 @@ object HttpData {\n     def length = 0L\n     def copyToArray(xs: Array[Byte], sourceOffset: Long, targetOffset: Int, span: Int) = ()\n     def slice(offset: Long, span: Int): ByteString = toByteString\n+    def sliceData(offset: Long, span: Long): HttpData = Empty\n     val toByteArray = Array.empty[Byte]\n     def toByteString = ByteString.empty\n-    def toChunkStream(maxChunkSize: Int) = Stream.empty\n+    def toChunkStream(maxChunkSize: Long) = Stream.empty",
        "path": "spray-http/src/main/scala/spray/http/HttpData.scala",
        "position": null,
        "original_position": 27,
        "commit_id": "a966cbff077137e31d402077579c2cf4e0a04f49",
        "original_commit_id": "bb13c3d2b4dbf0ba8035abb1bd19f02e10060a87",
        "user": {
            "login": "martin-g",
            "id": 232002,
            "node_id": "MDQ6VXNlcjIzMjAwMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/232002?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/martin-g",
            "html_url": "https://github.com/martin-g",
            "followers_url": "https://api.github.com/users/martin-g/followers",
            "following_url": "https://api.github.com/users/martin-g/following{/other_user}",
            "gists_url": "https://api.github.com/users/martin-g/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/martin-g/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/martin-g/subscriptions",
            "organizations_url": "https://api.github.com/users/martin-g/orgs",
            "repos_url": "https://api.github.com/users/martin-g/repos",
            "events_url": "https://api.github.com/users/martin-g/events{/privacy}",
            "received_events_url": "https://api.github.com/users/martin-g/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "http://www.artima.com/articles/compile_time.html\nthis is the article, but I cannot find anything about the types, so just ignore me.\n",
        "created_at": "2013-09-20T13:18:53Z",
        "updated_at": "2013-09-25T12:36:38Z",
        "html_url": "https://github.com/spray/spray/pull/517#discussion_r6486125",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/517",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6486125"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/517#discussion_r6486125"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/517"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6486208",
        "pull_request_review_id": null,
        "id": 6486208,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODYyMDg=",
        "diff_hunk": "@@ -187,9 +190,10 @@ object HttpData {\n     def length = 0L\n     def copyToArray(xs: Array[Byte], sourceOffset: Long, targetOffset: Int, span: Int) = ()\n     def slice(offset: Long, span: Int): ByteString = toByteString\n+    def sliceData(offset: Long, span: Long): HttpData = Empty\n     val toByteArray = Array.empty[Byte]\n     def toByteString = ByteString.empty\n-    def toChunkStream(maxChunkSize: Int) = Stream.empty\n+    def toChunkStream(maxChunkSize: Long) = Stream.empty",
        "path": "spray-http/src/main/scala/spray/http/HttpData.scala",
        "position": null,
        "original_position": 27,
        "commit_id": "a966cbff077137e31d402077579c2cf4e0a04f49",
        "original_commit_id": "bb13c3d2b4dbf0ba8035abb1bd19f02e10060a87",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I've also read about it. I don't think it's much an issue in simple cases like this but in general you are right.\n",
        "created_at": "2013-09-20T13:21:34Z",
        "updated_at": "2013-09-25T12:36:38Z",
        "html_url": "https://github.com/spray/spray/pull/517#discussion_r6486208",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/517",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6486208"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/517#discussion_r6486208"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/517"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6501999",
        "pull_request_review_id": null,
        "id": 6501999,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDE5OTk=",
        "diff_hunk": "@@ -96,7 +99,7 @@ sealed abstract class HttpData {\n    * Returns the contents of this instance as a `Stream[ByteString]` with each",
        "path": "spray-http/src/main/scala/spray/http/HttpData.scala",
        "position": null,
        "original_position": 11,
        "commit_id": "a966cbff077137e31d402077579c2cf4e0a04f49",
        "original_commit_id": "bb13c3d2b4dbf0ba8035abb1bd19f02e10060a87",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Fixed in latest version.\n",
        "created_at": "2013-09-21T06:57:01Z",
        "updated_at": "2013-09-25T12:36:38Z",
        "html_url": "https://github.com/spray/spray/pull/517#discussion_r6501999",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/517",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6501999"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/517#discussion_r6501999"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/517"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6569250",
        "pull_request_review_id": null,
        "id": 6569250,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NjkyNTA=",
        "diff_hunk": "@@ -329,28 +335,40 @@ object HttpData {\n         rec()\n       }\n     }\n-    def slice(offset: Long, span: Int): ByteString = {\n+    def sliceBytes(offset: Long, span: Int): ByteString = slice(offset, span).toByteString\n+\n+    def slice(offset: Long, span: Long): HttpData = {\n       require(offset >= 0, \"offset must be >= 0\")\n       require(span >= 0, \"span must be >= 0\")\n       if (offset < length && span > 0) {\n         val iter = iterator\n-        val builder = ByteString.newBuilder\n-        @tailrec def rec(offset: Long = offset, span: Int = span): ByteString =\n+        val builder = newBuilder\n+        @tailrec def rec(offset: Long = offset, span: Long = span): HttpData =\n           if (span > 0 && iter.hasNext) {\n             val current = iter.next()\n             if (offset < current.length) {\n-              builder ++= current.slice(offset, span)\n-              rec(0, math.max(0, span - current.length).toInt)\n+              val piece = current.slice(offset, span)\n+              builder += piece\n+              rec(0, math.max(0, span - piece.length))\n             } else rec(offset - current.length, span)\n           } else builder.result()\n         rec()\n-      } else ByteString.empty\n+      } else HttpData.Empty\n+    }\n+    def toByteString = {",
        "path": "spray-http/src/main/scala/spray/http/HttpData.scala",
        "position": 159,
        "original_position": 160,
        "commit_id": "a966cbff077137e31d402077579c2cf4e0a04f49",
        "original_commit_id": "1442cdf3a8383a5d36c9ef9f70299a501f99901f",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Nice one! This is much better...\n",
        "created_at": "2013-09-25T10:59:14Z",
        "updated_at": "2013-09-25T12:36:38Z",
        "html_url": "https://github.com/spray/spray/pull/517#discussion_r6569250",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/517",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6569250"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/517#discussion_r6569250"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/517"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6569273",
        "pull_request_review_id": null,
        "id": 6569273,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NjkyNzM=",
        "diff_hunk": "@@ -271,23 +285,15 @@ object HttpData {\n       } else ByteString.empty\n     }\n     def toByteString = createByteStringUnsafe(toByteArray)\n-    def toChunkStream(maxChunkSize: Int): Stream[ByteString] = {",
        "path": "spray-http/src/main/scala/spray/http/HttpData.scala",
        "position": null,
        "original_position": 101,
        "commit_id": "a966cbff077137e31d402077579c2cf4e0a04f49",
        "original_commit_id": "1442cdf3a8383a5d36c9ef9f70299a501f99901f",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Looking at this it seems we were also leaking file descriptors before (since the `FileInputStream` was not properly closed).\nSo the new implementation is an improvement in several aspects...\n",
        "created_at": "2013-09-25T11:01:07Z",
        "updated_at": "2013-09-25T12:36:38Z",
        "html_url": "https://github.com/spray/spray/pull/517#discussion_r6569273",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/517",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6569273"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/517#discussion_r6569273"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/517"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6570685",
        "pull_request_review_id": null,
        "id": 6570685,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NzA2ODU=",
        "diff_hunk": "@@ -16,10 +16,10 @@\n \n package spray.io\n \n-import scala.concurrent.duration.Duration\n+import scala.concurrent.duration.{ FiniteDuration, Duration }\n import akka.io.Tcp\n-import spray.util.requirePositive\n-import System.{ currentTimeMillis \u21d2 now }\n+import spray.util.{ Timestamp, Utils, requirePositive }\n+import System.{ nanoTime \u21d2 now }",
        "path": "spray-io/src/main/scala/spray/io/ConnectionTimeouts.scala",
        "position": null,
        "original_position": 10,
        "commit_id": "23947205a5240567410052004a33044816750319",
        "original_commit_id": "7eccbc13c19a7912f5e87ad81e191a6ab9015ab6",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This import is unused.\n",
        "created_at": "2013-09-25T12:35:16Z",
        "updated_at": "2013-09-25T12:53:53Z",
        "html_url": "https://github.com/spray/spray/pull/509#discussion_r6570685",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/509",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6570685"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/509#discussion_r6570685"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/509"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6570692",
        "pull_request_review_id": null,
        "id": 6570692,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NzA2OTI=",
        "diff_hunk": "@@ -16,10 +16,10 @@\n \n package spray.io\n \n-import scala.concurrent.duration.Duration\n+import scala.concurrent.duration.{ FiniteDuration, Duration }\n import akka.io.Tcp\n-import spray.util.requirePositive\n-import System.{ currentTimeMillis \u21d2 now }\n+import spray.util.{ Timestamp, Utils, requirePositive }",
        "path": "spray-io/src/main/scala/spray/io/ConnectionTimeouts.scala",
        "position": null,
        "original_position": 9,
        "commit_id": "23947205a5240567410052004a33044816750319",
        "original_commit_id": "7eccbc13c19a7912f5e87ad81e191a6ab9015ab6",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "`Utils` is unused.\n",
        "created_at": "2013-09-25T12:35:29Z",
        "updated_at": "2013-09-25T12:53:53Z",
        "html_url": "https://github.com/spray/spray/pull/509#discussion_r6570692",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/509",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6570692"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/509#discussion_r6570692"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/509"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6570696",
        "pull_request_review_id": null,
        "id": 6570696,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NzA2OTY=",
        "diff_hunk": "@@ -16,10 +16,10 @@\n \n package spray.io\n \n-import scala.concurrent.duration.Duration\n+import scala.concurrent.duration.{ FiniteDuration, Duration }",
        "path": "spray-io/src/main/scala/spray/io/ConnectionTimeouts.scala",
        "position": null,
        "original_position": 5,
        "commit_id": "23947205a5240567410052004a33044816750319",
        "original_commit_id": "7eccbc13c19a7912f5e87ad81e191a6ab9015ab6",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "`FiniteDuration` is unused.\n",
        "created_at": "2013-09-25T12:35:39Z",
        "updated_at": "2013-09-25T12:53:53Z",
        "html_url": "https://github.com/spray/spray/pull/509#discussion_r6570696",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/509",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6570696"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/509#discussion_r6570696"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/509"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6570717",
        "pull_request_review_id": null,
        "id": 6570717,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NzA3MTc=",
        "diff_hunk": "@@ -29,25 +29,20 @@ object ConnectionTimeouts {\n     new PipelineStage {\n       def apply(context: PipelineContext, commandPL: CPL, eventPL: EPL): Pipelines = new Pipelines {\n         var timeout = idleTimeout\n-        var lastActivity = now\n+        var idleDeadline = Timestamp.never\n+        def refreshDeadline() = idleDeadline = Timestamp.fromNow(timeout)",
        "path": "spray-io/src/main/scala/spray/io/ConnectionTimeouts.scala",
        "position": null,
        "original_position": 20,
        "commit_id": "23947205a5240567410052004a33044816750319",
        "original_commit_id": "7eccbc13c19a7912f5e87ad81e191a6ab9015ab6",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'd say `idleDeadline = Timestamp.now + timeout` is even more readable, and we can get rid of `Timestamp.fromNow` altogether I think.\n",
        "created_at": "2013-09-25T12:36:52Z",
        "updated_at": "2013-09-25T12:53:53Z",
        "html_url": "https://github.com/spray/spray/pull/509#discussion_r6570717",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/509",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6570717"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/509#discussion_r6570717"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/509"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6570734",
        "pull_request_review_id": null,
        "id": 6570734,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NzA3MzQ=",
        "diff_hunk": "@@ -0,0 +1,34 @@\n+package spray.util\n+\n+import scala.concurrent.duration._\n+\n+private[spray] class Timestamp private[Timestamp] (val timestampNanos: Long) extends AnyVal {\n+  def +(period: Duration): Timestamp =\n+    if (timestampNanos == Long.MaxValue) this",
        "path": "spray-util/src/main/scala/spray/util/Timestamp.scala",
        "position": null,
        "original_position": 7,
        "commit_id": "23947205a5240567410052004a33044816750319",
        "original_commit_id": "7eccbc13c19a7912f5e87ad81e191a6ab9015ab6",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Maybe factor out the `timestampNanos == Long.MaxValue` into\n\n```\ndef isNever: Boolean = timestampNanos == Long.MaxValue\n```\n\n?\n",
        "created_at": "2013-09-25T12:37:37Z",
        "updated_at": "2013-09-25T12:53:53Z",
        "html_url": "https://github.com/spray/spray/pull/509#discussion_r6570734",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/509",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6570734"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/509#discussion_r6570734"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/509"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6570746",
        "pull_request_review_id": null,
        "id": 6570746,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NzA3NDY=",
        "diff_hunk": "@@ -0,0 +1,34 @@\n+package spray.util\n+\n+import scala.concurrent.duration._\n+\n+private[spray] class Timestamp private[Timestamp] (val timestampNanos: Long) extends AnyVal {",
        "path": "spray-util/src/main/scala/spray/util/Timestamp.scala",
        "position": null,
        "original_position": 5,
        "commit_id": "23947205a5240567410052004a33044816750319",
        "original_commit_id": "7eccbc13c19a7912f5e87ad81e191a6ab9015ab6",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "`private (val timestampNanos: Long)` should be sufficient.\n",
        "created_at": "2013-09-25T12:38:08Z",
        "updated_at": "2013-09-25T12:53:53Z",
        "html_url": "https://github.com/spray/spray/pull/509#discussion_r6570746",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/509",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6570746"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/509#discussion_r6570746"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/509"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6570755",
        "pull_request_review_id": null,
        "id": 6570755,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NzA3NTU=",
        "diff_hunk": "@@ -0,0 +1,34 @@\n+package spray.util\n+\n+import scala.concurrent.duration._\n+\n+private[spray] class Timestamp private[Timestamp] (val timestampNanos: Long) extends AnyVal {\n+  def +(period: Duration): Timestamp =\n+    if (timestampNanos == Long.MaxValue) this\n+    else if (!period.isFinite()) Timestamp.never\n+    else new Timestamp(timestampNanos + period.toNanos)\n+\n+  def -(other: Timestamp): Duration =\n+    if (timestampNanos == Long.MaxValue) Duration.Inf\n+    else if (other.timestampNanos == Long.MaxValue) Duration.MinusInf\n+    else (timestampNanos - other.timestampNanos).nanos\n+\n+  def isPast: Boolean = System.nanoTime() >= timestampNanos\n+  def isFuture: Boolean = !isPast\n+\n+  def isFinite: Boolean = timestampNanos < Long.MaxValue\n+}\n+private[spray] object Timestamp {\n+  def now: Timestamp = new Timestamp(System.nanoTime())\n+  def never: Timestamp = new Timestamp(Long.MaxValue)\n+\n+  def fromNow(dur: Duration): Timestamp = dur match {",
        "path": "spray-util/src/main/scala/spray/util/Timestamp.scala",
        "position": null,
        "original_position": 25,
        "commit_id": "23947205a5240567410052004a33044816750319",
        "original_commit_id": "7eccbc13c19a7912f5e87ad81e191a6ab9015ab6",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'd prefer `Timstamp.now + duration` instead of this special builder.\n",
        "created_at": "2013-09-25T12:38:34Z",
        "updated_at": "2013-09-25T12:53:53Z",
        "html_url": "https://github.com/spray/spray/pull/509#discussion_r6570755",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/509",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6570755"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/509#discussion_r6570755"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/509"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6570836",
        "pull_request_review_id": null,
        "id": 6570836,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NzA4MzY=",
        "diff_hunk": "@@ -56,9 +57,14 @@ trait OpenRequestComponent { component \u21d2\n   def requestTimeout: Duration\n   def timeoutTimeout: Duration\n \n+  sealed trait RequestState\n+  case object WaitingForChunkedEnd extends RequestState\n+  case class WaitingForResponse(timestamp: Timestamp = Timestamp.now) extends RequestState\n+  case class WaitingForTimeoutResponse(timestamp: Timestamp = Timestamp.now) extends RequestState",
        "path": "spray-can/src/main/scala/spray/can/server/OpenRequest.scala",
        "position": null,
        "original_position": 24,
        "commit_id": "23947205a5240567410052004a33044816750319",
        "original_commit_id": "7eccbc13c19a7912f5e87ad81e191a6ab9015ab6",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think we should move these four types out of the `OpenRequest` trait so they don't close over it and we spare the unused `outer$` reference.\n",
        "created_at": "2013-09-25T12:41:46Z",
        "updated_at": "2013-09-25T12:53:53Z",
        "html_url": "https://github.com/spray/spray/pull/509#discussion_r6570836",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/509",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6570836"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/509#discussion_r6570836"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/509"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6570854",
        "pull_request_review_id": null,
        "id": 6570854,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NzA4NTQ=",
        "diff_hunk": "@@ -93,22 +99,26 @@ trait OpenRequestComponent { component \u21d2\n       }\n     }\n \n-    def checkForTimeout(now: Long): Unit = {\n-      if (timestamp > 0) {\n-        if (timestamp + requestTimeout.toMillis < now) {\n-          val timeoutHandler =\n-            if (settings.timeoutHandler.isEmpty) handler\n-            else context.actorContext.actorFor(settings.timeoutHandler)\n-          if (RefUtils.isLocal(timeoutHandler))\n-            downstreamCommandPL(Pipeline.Tell(timeoutHandler, Timedout(request), receiverRef))\n-          else context.log.warning(\"The TimeoutHandler '{}' is not a local actor and thus cannot be used as a \" +\n-            \"timeout handler\", timeoutHandler)\n-          timestamp = -now // we record the time of the Timeout dispatch as negative timestamp value\n-        }\n-      } else if (timestamp < -1 && timeoutTimeout.isFinite() && (-timestamp + timeoutTimeout.toMillis < now)) {\n-        val response = timeoutResponse(request)\n-        // we always close the connection after a timeout-timeout\n-        sendPart(response.withHeaders(HttpHeaders.Connection(\"close\") :: response.headers))\n+    def checkForTimeout(now: Timestamp): Unit = {",
        "path": "spray-can/src/main/scala/spray/can/server/OpenRequest.scala",
        "position": 55,
        "original_position": 62,
        "commit_id": "23947205a5240567410052004a33044816750319",
        "original_commit_id": "7eccbc13c19a7912f5e87ad81e191a6ab9015ab6",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yeah, this is much better. Nice cleanup!\n",
        "created_at": "2013-09-25T12:42:24Z",
        "updated_at": "2013-09-25T12:53:53Z",
        "html_url": "https://github.com/spray/spray/pull/509#discussion_r6570854",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/509",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6570854"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/509#discussion_r6570854"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/509"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6571415",
        "pull_request_review_id": null,
        "id": 6571415,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NzE0MTU=",
        "diff_hunk": "@@ -41,7 +56,16 @@ object LruCache {\n     if (isNonZeroFinite(timeToLive) || isNonZeroFinite(timeToIdle))\n       new ExpiringLruCache[V](maxCapacity, initialCapacity, millis(timeToLive), millis(timeToIdle))",
        "path": "spray-caching/src/main/scala/spray/caching/LruCache.scala",
        "position": 39,
        "original_position": 33,
        "commit_id": "fdedb10cab285e487c7af87bc4d1c9c03c3faa92",
        "original_commit_id": "15988c317bc54612997813dd42baf6fa5998c3a3",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The passing on of the `onEvict` handler is still missing here, no?\n",
        "created_at": "2013-09-25T13:06:20Z",
        "updated_at": "2013-09-25T13:06:20Z",
        "html_url": "https://github.com/spray/spray/pull/500#discussion_r6571415",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/500",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6571415"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/500#discussion_r6571415"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/500"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6571454",
        "pull_request_review_id": null,
        "id": 6571454,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NzE0NTQ=",
        "diff_hunk": "@@ -41,7 +56,16 @@ object LruCache {\n     if (isNonZeroFinite(timeToLive) || isNonZeroFinite(timeToIdle))\n       new ExpiringLruCache[V](maxCapacity, initialCapacity, millis(timeToLive), millis(timeToIdle))\n     else\n-      new SimpleLruCache[V](maxCapacity, initialCapacity)\n+      new SimpleLruCache[V](maxCapacity, initialCapacity, onEvict)\n+  }\n+}\n+\n+private[caching] trait EvictionHandler[V] {",
        "path": "spray-caching/src/main/scala/spray/caching/LruCache.scala",
        "position": 46,
        "original_position": 40,
        "commit_id": "fdedb10cab285e487c7af87bc4d1c9c03c3faa92",
        "original_commit_id": "15988c317bc54612997813dd42baf6fa5998c3a3",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'd vote more moving it into the `LruCache` object.\n",
        "created_at": "2013-09-25T13:07:53Z",
        "updated_at": "2013-09-25T13:07:53Z",
        "html_url": "https://github.com/spray/spray/pull/500#discussion_r6571454",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/500",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6571454"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/500#discussion_r6571454"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/500"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6571578",
        "pull_request_review_id": null,
        "id": 6571578,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NzE1Nzg=",
        "diff_hunk": "@@ -41,7 +56,16 @@ object LruCache {\n     if (isNonZeroFinite(timeToLive) || isNonZeroFinite(timeToIdle))\n       new ExpiringLruCache[V](maxCapacity, initialCapacity, millis(timeToLive), millis(timeToIdle))\n     else\n-      new SimpleLruCache[V](maxCapacity, initialCapacity)\n+      new SimpleLruCache[V](maxCapacity, initialCapacity, onEvict)\n+  }\n+}\n+\n+private[caching] trait EvictionHandler[V] {",
        "path": "spray-caching/src/main/scala/spray/caching/LruCache.scala",
        "position": 46,
        "original_position": 40,
        "commit_id": "fdedb10cab285e487c7af87bc4d1c9c03c3faa92",
        "original_commit_id": "15988c317bc54612997813dd42baf6fa5998c3a3",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Actually, seeing that you also need the `toFuture` helper function to make this common implementation fit the two user cases I think I'd even prefer inlining the `new EvictionListener[Any, T] { ... }` directly into the respective `builder.listener(...)` calls, e.g.:\n\n```\nif (onEvict != LruCache.EmptyEvictionHandler)\n  builder.listener {\n    new EvictionListener[Any, T] {\n      ...\n    }\n  }\n```\n",
        "created_at": "2013-09-25T13:13:53Z",
        "updated_at": "2013-09-25T13:13:53Z",
        "html_url": "https://github.com/spray/spray/pull/500#discussion_r6571578",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/500",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6571578"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/500#discussion_r6571578"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/500"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6571597",
        "pull_request_review_id": null,
        "id": 6571597,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NzE1OTc=",
        "diff_hunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright (C) 2011-2013 spray.io\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.caching\n+\n+import java.util.Random\n+import java.util.concurrent.CountDownLatch\n+import akka.actor.ActorSystem\n+import scala.concurrent.{ Promise, Future }\n+import scala.concurrent.duration._\n+import org.specs2.mutable.Specification\n+import org.specs2.matcher.Matcher\n+import spray.util._\n+import org.specs2.time.NoTimeConversions\n+\n+class SimpleLruCacheSpec extends Specification with NoTimeConversions {",
        "path": "spray-caching/src/test/scala/spray/caching/SimpleLruCacheSpec.scala",
        "position": 29,
        "original_position": 29,
        "commit_id": "fdedb10cab285e487c7af87bc4d1c9c03c3faa92",
        "original_commit_id": "15988c317bc54612997813dd42baf6fa5998c3a3",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ok, can you add a `//TODO: DRY up with ExpiringLruCacheSpec` reminder then?\n",
        "created_at": "2013-09-25T13:14:48Z",
        "updated_at": "2013-09-25T13:14:48Z",
        "html_url": "https://github.com/spray/spray/pull/500#discussion_r6571597",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/500",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6571597"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/500#discussion_r6571597"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/500"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6504852",
        "pull_request_review_id": null,
        "id": 6504852,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDQ4NTI=",
        "diff_hunk": "@@ -496,5 +496,18 @@ class UriSpec extends Specification {\n       val uri = Uri(\"http://host:80/path?query#fragment\")\n       uri.copy() === uri\n     }\n+\n+    \"provide sugar for fluent transformations\" in {\n+      val uri = Uri(\"http://host:80/path?query#fragment\")\n+\n+      uri.withScheme(\"https\") === Uri(\"https://host/path?query#fragment\")\n+      uri.withPort(90) === Uri(\"http://host:90/path?query#fragment\")\n+      uri.withHost(Host(\"other\")) === Uri(\"http://other:80/path?query#fragment\")\n+      uri.withAuthority(Authority(Host(\"other\"), 3030)) === Uri(\"http://other:3030/path?query#fragment\")\n+      uri.withUserInfo(\"someInfo\") === Uri(\"http://someInfo@host:80/path?query#fragment\")\n+      uri.withPath(Path(\"/newpath\")) === Uri(\"http://host/newpath?query#fragment\")\n+      uri.withQuery(Query(\"param1\" -> \"value1\")) === Uri(\"http://host:80/path?param1=value1#fragment\")\n+      uri.withFragment(Some(\"otherFragment\")) === Uri(\"http://host:80/path?query#otherFragment\")",
        "path": "spray-http/src/test/scala/spray/http/UriSpec.scala",
        "position": null,
        "original_position": 15,
        "commit_id": "c6d5499fd3bd40d08e6e1a6719009ae37eb3bc55",
        "original_commit_id": "4c5c8fd3c8067eb4ea2fa7f6ae218786e1f09318",
        "user": {
            "login": "martin-g",
            "id": 232002,
            "node_id": "MDQ6VXNlcjIzMjAwMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/232002?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/martin-g",
            "html_url": "https://github.com/martin-g",
            "followers_url": "https://api.github.com/users/martin-g/followers",
            "following_url": "https://api.github.com/users/martin-g/following{/other_user}",
            "gists_url": "https://api.github.com/users/martin-g/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/martin-g/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/martin-g/subscriptions",
            "organizations_url": "https://api.github.com/users/martin-g/orgs",
            "repos_url": "https://api.github.com/users/martin-g/repos",
            "events_url": "https://api.github.com/users/martin-g/events{/privacy}",
            "received_events_url": "https://api.github.com/users/martin-g/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Why some of the assertions have the port (80) and others don't ?\nOne can say that port 80 is the default for HTTP scheme and that's why it may be missed, but then why `uri.withScheme(\"https\") === Uri(\"https://host/path?query#fragment\")` doesn't use it explicitly ? In this case port 443 should be the default and port 80 must be used.\n",
        "created_at": "2013-09-22T09:17:19Z",
        "updated_at": "2013-09-26T15:53:18Z",
        "html_url": "https://github.com/spray/spray/pull/520#discussion_r6504852",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/520",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6504852"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/520#discussion_r6504852"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/520"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6511322",
        "pull_request_review_id": null,
        "id": 6511322,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MTEzMjI=",
        "diff_hunk": "@@ -496,5 +496,18 @@ class UriSpec extends Specification {\n       val uri = Uri(\"http://host:80/path?query#fragment\")\n       uri.copy() === uri\n     }\n+\n+    \"provide sugar for fluent transformations\" in {\n+      val uri = Uri(\"http://host:80/path?query#fragment\")\n+\n+      uri.withScheme(\"https\") === Uri(\"https://host/path?query#fragment\")\n+      uri.withPort(90) === Uri(\"http://host:90/path?query#fragment\")\n+      uri.withHost(Host(\"other\")) === Uri(\"http://other:80/path?query#fragment\")\n+      uri.withAuthority(Authority(Host(\"other\"), 3030)) === Uri(\"http://other:3030/path?query#fragment\")\n+      uri.withUserInfo(\"someInfo\") === Uri(\"http://someInfo@host:80/path?query#fragment\")\n+      uri.withPath(Path(\"/newpath\")) === Uri(\"http://host/newpath?query#fragment\")\n+      uri.withQuery(Query(\"param1\" -> \"value1\")) === Uri(\"http://host:80/path?param1=value1#fragment\")\n+      uri.withFragment(Some(\"otherFragment\")) === Uri(\"http://host:80/path?query#otherFragment\")",
        "path": "spray-http/src/test/scala/spray/http/UriSpec.scala",
        "position": null,
        "original_position": 15,
        "commit_id": "c6d5499fd3bd40d08e6e1a6719009ae37eb3bc55",
        "original_commit_id": "4c5c8fd3c8067eb4ea2fa7f6ae218786e1f09318",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "That's a question we have to decide upon and document the decision properly.\n",
        "created_at": "2013-09-23T10:12:55Z",
        "updated_at": "2013-09-26T15:53:18Z",
        "html_url": "https://github.com/spray/spray/pull/520#discussion_r6511322",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/520",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6511322"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/520#discussion_r6511322"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/520"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6568320",
        "pull_request_review_id": null,
        "id": 6568320,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NjgzMjA=",
        "diff_hunk": "@@ -496,5 +496,18 @@ class UriSpec extends Specification {\n       val uri = Uri(\"http://host:80/path?query#fragment\")\n       uri.copy() === uri\n     }\n+\n+    \"provide sugar for fluent transformations\" in {\n+      val uri = Uri(\"http://host:80/path?query#fragment\")\n+\n+      uri.withScheme(\"https\") === Uri(\"https://host/path?query#fragment\")\n+      uri.withPort(90) === Uri(\"http://host:90/path?query#fragment\")\n+      uri.withHost(Host(\"other\")) === Uri(\"http://other:80/path?query#fragment\")\n+      uri.withAuthority(Authority(Host(\"other\"), 3030)) === Uri(\"http://other:3030/path?query#fragment\")\n+      uri.withUserInfo(\"someInfo\") === Uri(\"http://someInfo@host:80/path?query#fragment\")\n+      uri.withPath(Path(\"/newpath\")) === Uri(\"http://host/newpath?query#fragment\")\n+      uri.withQuery(Query(\"param1\" -> \"value1\")) === Uri(\"http://host:80/path?param1=value1#fragment\")\n+      uri.withFragment(Some(\"otherFragment\")) === Uri(\"http://host:80/path?query#otherFragment\")",
        "path": "spray-http/src/test/scala/spray/http/UriSpec.scala",
        "position": null,
        "original_position": 15,
        "commit_id": "c6d5499fd3bd40d08e6e1a6719009ae37eb3bc55",
        "original_commit_id": "4c5c8fd3c8067eb4ea2fa7f6ae218786e1f09318",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I see the `withXXX` modifiers as simple helpers for changing _one_ property of the `Uri`.\nI wouldn't expect the `withScheme` modifier to also change the port. So I think the current implementation is fine.\n",
        "created_at": "2013-09-25T09:58:49Z",
        "updated_at": "2013-09-26T15:53:18Z",
        "html_url": "https://github.com/spray/spray/pull/520#discussion_r6568320",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/520",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6568320"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/520#discussion_r6568320"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/520"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6568591",
        "pull_request_review_id": null,
        "id": 6568591,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1Njg1OTE=",
        "diff_hunk": "@@ -496,5 +496,18 @@ class UriSpec extends Specification {\n       val uri = Uri(\"http://host:80/path?query#fragment\")\n       uri.copy() === uri\n     }\n+\n+    \"provide sugar for fluent transformations\" in {\n+      val uri = Uri(\"http://host:80/path?query#fragment\")\n+\n+      uri.withScheme(\"https\") === Uri(\"https://host/path?query#fragment\")\n+      uri.withPort(90) === Uri(\"http://host:90/path?query#fragment\")\n+      uri.withHost(Host(\"other\")) === Uri(\"http://other:80/path?query#fragment\")\n+      uri.withAuthority(Authority(Host(\"other\"), 3030)) === Uri(\"http://other:3030/path?query#fragment\")\n+      uri.withUserInfo(\"someInfo\") === Uri(\"http://someInfo@host:80/path?query#fragment\")\n+      uri.withPath(Path(\"/newpath\")) === Uri(\"http://host/newpath?query#fragment\")\n+      uri.withQuery(Query(\"param1\" -> \"value1\")) === Uri(\"http://host:80/path?param1=value1#fragment\")\n+      uri.withFragment(Some(\"otherFragment\")) === Uri(\"http://host:80/path?query#otherFragment\")",
        "path": "spray-http/src/test/scala/spray/http/UriSpec.scala",
        "position": null,
        "original_position": 15,
        "commit_id": "c6d5499fd3bd40d08e6e1a6719009ae37eb3bc55",
        "original_commit_id": "4c5c8fd3c8067eb4ea2fa7f6ae218786e1f09318",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@martin-g Thinking more about it you definitely have a point though with regard to confusion potential.\nI think we should add something like this to the scaladoc of `withScheme`:\n\n```\nThe `scheme` change of the Uri has the following effect on the port value:\nIf the Uri has a non-default port for the scheme before the change this port will remain unchanged.\nIf the Uri has the default port for the scheme before the change it will have the default port for\nthe *new* scheme after the change.\n```\n",
        "created_at": "2013-09-25T10:15:05Z",
        "updated_at": "2013-09-26T15:53:18Z",
        "html_url": "https://github.com/spray/spray/pull/520#discussion_r6568591",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/520",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6568591"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/520#discussion_r6568591"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/520"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6584462",
        "pull_request_review_id": null,
        "id": 6584462,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1ODQ0NjI=",
        "diff_hunk": "@@ -496,5 +496,18 @@ class UriSpec extends Specification {\n       val uri = Uri(\"http://host:80/path?query#fragment\")\n       uri.copy() === uri\n     }\n+\n+    \"provide sugar for fluent transformations\" in {\n+      val uri = Uri(\"http://host:80/path?query#fragment\")\n+\n+      uri.withScheme(\"https\") === Uri(\"https://host/path?query#fragment\")\n+      uri.withPort(90) === Uri(\"http://host:90/path?query#fragment\")\n+      uri.withHost(Host(\"other\")) === Uri(\"http://other:80/path?query#fragment\")\n+      uri.withAuthority(Authority(Host(\"other\"), 3030)) === Uri(\"http://other:3030/path?query#fragment\")\n+      uri.withUserInfo(\"someInfo\") === Uri(\"http://someInfo@host:80/path?query#fragment\")\n+      uri.withPath(Path(\"/newpath\")) === Uri(\"http://host/newpath?query#fragment\")\n+      uri.withQuery(Query(\"param1\" -> \"value1\")) === Uri(\"http://host:80/path?param1=value1#fragment\")\n+      uri.withFragment(Some(\"otherFragment\")) === Uri(\"http://host:80/path?query#otherFragment\")",
        "path": "spray-http/src/test/scala/spray/http/UriSpec.scala",
        "position": null,
        "original_position": 15,
        "commit_id": "c6d5499fd3bd40d08e6e1a6719009ae37eb3bc55",
        "original_commit_id": "4c5c8fd3c8067eb4ea2fa7f6ae218786e1f09318",
        "user": {
            "login": "martin-g",
            "id": 232002,
            "node_id": "MDQ6VXNlcjIzMjAwMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/232002?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/martin-g",
            "html_url": "https://github.com/martin-g",
            "followers_url": "https://api.github.com/users/martin-g/followers",
            "following_url": "https://api.github.com/users/martin-g/following{/other_user}",
            "gists_url": "https://api.github.com/users/martin-g/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/martin-g/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/martin-g/subscriptions",
            "organizations_url": "https://api.github.com/users/martin-g/orgs",
            "repos_url": "https://api.github.com/users/martin-g/repos",
            "events_url": "https://api.github.com/users/martin-g/events{/privacy}",
            "received_events_url": "https://api.github.com/users/martin-g/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@sirthias What bothers me is the following:\n1) val uri = Uri(\"http://host:80/path?query#fragment\")     - uri has port == 80\n2) uri.withScheme(\"https\") === Uri(\"https://host/path?query#fragment\")\n2.1) uriWithScheme (the left hand value) has scheme 'https' but still has port == 80. That's OK.\n2.2) the right hand Uri (Uri(\"https://host/path?query#fragment\")) is a completely new instance that is just created/parsed. Since the port is not explicitly specified I'd expect that it should be calculated from the scheme. I.e. I'd expect the right hand Uri to have port == 443 and thus to fail the assertion.\n3) The correct assertion, IMO, should be : uri.withScheme(\"https\") === Uri(\"https://host:80/path?query#fragment\")\n",
        "created_at": "2013-09-25T20:19:47Z",
        "updated_at": "2013-09-26T15:53:18Z",
        "html_url": "https://github.com/spray/spray/pull/520#discussion_r6584462",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/520",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6584462"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/520#discussion_r6584462"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/520"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6584641",
        "pull_request_review_id": null,
        "id": 6584641,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1ODQ2NDE=",
        "diff_hunk": "@@ -496,5 +496,18 @@ class UriSpec extends Specification {\n       val uri = Uri(\"http://host:80/path?query#fragment\")\n       uri.copy() === uri\n     }\n+\n+    \"provide sugar for fluent transformations\" in {\n+      val uri = Uri(\"http://host:80/path?query#fragment\")\n+\n+      uri.withScheme(\"https\") === Uri(\"https://host/path?query#fragment\")\n+      uri.withPort(90) === Uri(\"http://host:90/path?query#fragment\")\n+      uri.withHost(Host(\"other\")) === Uri(\"http://other:80/path?query#fragment\")\n+      uri.withAuthority(Authority(Host(\"other\"), 3030)) === Uri(\"http://other:3030/path?query#fragment\")\n+      uri.withUserInfo(\"someInfo\") === Uri(\"http://someInfo@host:80/path?query#fragment\")\n+      uri.withPath(Path(\"/newpath\")) === Uri(\"http://host/newpath?query#fragment\")\n+      uri.withQuery(Query(\"param1\" -> \"value1\")) === Uri(\"http://host:80/path?param1=value1#fragment\")\n+      uri.withFragment(Some(\"otherFragment\")) === Uri(\"http://host:80/path?query#otherFragment\")",
        "path": "spray-http/src/test/scala/spray/http/UriSpec.scala",
        "position": null,
        "original_position": 15,
        "commit_id": "c6d5499fd3bd40d08e6e1a6719009ae37eb3bc55",
        "original_commit_id": "4c5c8fd3c8067eb4ea2fa7f6ae218786e1f09318",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think what Mathias meant is that we leave the behavior as it is implemented here which makes your point 2.1 untrue. After using `withScheme(\"https\")` an URI that had a default port before will also use the default port corresponding to the new scheme.\n\nSo, the test case tests this sentence which Mathias proposed:\n`If the Uri has the default port for the scheme before the change it will have the default port for the *new* scheme after the change.`\n\nWe should add another test case for the other sentence.\n",
        "created_at": "2013-09-25T20:25:54Z",
        "updated_at": "2013-09-26T15:53:18Z",
        "html_url": "https://github.com/spray/spray/pull/520#discussion_r6584641",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/520",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6584641"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/520#discussion_r6584641"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/520"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6585665",
        "pull_request_review_id": null,
        "id": 6585665,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1ODU2NjU=",
        "diff_hunk": "@@ -496,5 +496,18 @@ class UriSpec extends Specification {\n       val uri = Uri(\"http://host:80/path?query#fragment\")\n       uri.copy() === uri\n     }\n+\n+    \"provide sugar for fluent transformations\" in {\n+      val uri = Uri(\"http://host:80/path?query#fragment\")\n+\n+      uri.withScheme(\"https\") === Uri(\"https://host/path?query#fragment\")\n+      uri.withPort(90) === Uri(\"http://host:90/path?query#fragment\")\n+      uri.withHost(Host(\"other\")) === Uri(\"http://other:80/path?query#fragment\")\n+      uri.withAuthority(Authority(Host(\"other\"), 3030)) === Uri(\"http://other:3030/path?query#fragment\")\n+      uri.withUserInfo(\"someInfo\") === Uri(\"http://someInfo@host:80/path?query#fragment\")\n+      uri.withPath(Path(\"/newpath\")) === Uri(\"http://host/newpath?query#fragment\")\n+      uri.withQuery(Query(\"param1\" -> \"value1\")) === Uri(\"http://host:80/path?param1=value1#fragment\")\n+      uri.withFragment(Some(\"otherFragment\")) === Uri(\"http://host:80/path?query#otherFragment\")",
        "path": "spray-http/src/test/scala/spray/http/UriSpec.scala",
        "position": null,
        "original_position": 15,
        "commit_id": "c6d5499fd3bd40d08e6e1a6719009ae37eb3bc55",
        "original_commit_id": "4c5c8fd3c8067eb4ea2fa7f6ae218786e1f09318",
        "user": {
            "login": "martin-g",
            "id": 232002,
            "node_id": "MDQ6VXNlcjIzMjAwMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/232002?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/martin-g",
            "html_url": "https://github.com/martin-g",
            "followers_url": "https://api.github.com/users/martin-g/followers",
            "following_url": "https://api.github.com/users/martin-g/following{/other_user}",
            "gists_url": "https://api.github.com/users/martin-g/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/martin-g/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/martin-g/subscriptions",
            "organizations_url": "https://api.github.com/users/martin-g/orgs",
            "repos_url": "https://api.github.com/users/martin-g/repos",
            "events_url": "https://api.github.com/users/martin-g/events{/privacy}",
            "received_events_url": "https://api.github.com/users/martin-g/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I just checked Uri.scala and it seems that Uri(\"https://host/path?query#fragment\").authority.port should be 443. So I agree that what Mathias suggest should be enough. \nBut now I cannot see how this PR passes the test at all. Since withScheme() doesn't normalize the port the assertion should fail due to the different ports.\nAnyway, I'll keep an eye on your PRs and let your know if I see something fishy. Keep the good work!\n",
        "created_at": "2013-09-25T20:57:59Z",
        "updated_at": "2013-09-26T15:53:18Z",
        "html_url": "https://github.com/spray/spray/pull/520#discussion_r6585665",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/520",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6585665"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/520#discussion_r6585665"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/520"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6588407",
        "pull_request_review_id": null,
        "id": 6588407,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1ODg0MDc=",
        "diff_hunk": "@@ -496,5 +496,18 @@ class UriSpec extends Specification {\n       val uri = Uri(\"http://host:80/path?query#fragment\")\n       uri.copy() === uri\n     }\n+\n+    \"provide sugar for fluent transformations\" in {\n+      val uri = Uri(\"http://host:80/path?query#fragment\")\n+\n+      uri.withScheme(\"https\") === Uri(\"https://host/path?query#fragment\")\n+      uri.withPort(90) === Uri(\"http://host:90/path?query#fragment\")\n+      uri.withHost(Host(\"other\")) === Uri(\"http://other:80/path?query#fragment\")\n+      uri.withAuthority(Authority(Host(\"other\"), 3030)) === Uri(\"http://other:3030/path?query#fragment\")\n+      uri.withUserInfo(\"someInfo\") === Uri(\"http://someInfo@host:80/path?query#fragment\")\n+      uri.withPath(Path(\"/newpath\")) === Uri(\"http://host/newpath?query#fragment\")\n+      uri.withQuery(Query(\"param1\" -> \"value1\")) === Uri(\"http://host:80/path?param1=value1#fragment\")\n+      uri.withFragment(Some(\"otherFragment\")) === Uri(\"http://host:80/path?query#otherFragment\")",
        "path": "spray-http/src/test/scala/spray/http/UriSpec.scala",
        "position": null,
        "original_position": 15,
        "commit_id": "c6d5499fd3bd40d08e6e1a6719009ae37eb3bc55",
        "original_commit_id": "4c5c8fd3c8067eb4ea2fa7f6ae218786e1f09318",
        "user": {
            "login": "ivantopo",
            "id": 1302854,
            "node_id": "MDQ6VXNlcjEzMDI4NTQ=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1302854?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ivantopo",
            "html_url": "https://github.com/ivantopo",
            "followers_url": "https://api.github.com/users/ivantopo/followers",
            "following_url": "https://api.github.com/users/ivantopo/following{/other_user}",
            "gists_url": "https://api.github.com/users/ivantopo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ivantopo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ivantopo/subscriptions",
            "organizations_url": "https://api.github.com/users/ivantopo/orgs",
            "repos_url": "https://api.github.com/users/ivantopo/repos",
            "events_url": "https://api.github.com/users/ivantopo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ivantopo/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Thanks for your comments @martin-g! I just wanted to point out that all the `withXXX` end up calling `copy(..)` which calls a version of `Uri.apply(..)` that normalizes the scheme, thus making the tests pass. I included one more assertion with a non default port that illustrates the behavior described by Mathias bellow.\n",
        "created_at": "2013-09-25T22:38:39Z",
        "updated_at": "2013-09-26T15:53:18Z",
        "html_url": "https://github.com/spray/spray/pull/520#discussion_r6588407",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/520",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6588407"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/520#discussion_r6588407"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/520"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6594748",
        "pull_request_review_id": null,
        "id": 6594748,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTQ3NDg=",
        "diff_hunk": "@@ -496,5 +496,18 @@ class UriSpec extends Specification {\n       val uri = Uri(\"http://host:80/path?query#fragment\")\n       uri.copy() === uri\n     }\n+\n+    \"provide sugar for fluent transformations\" in {\n+      val uri = Uri(\"http://host:80/path?query#fragment\")\n+\n+      uri.withScheme(\"https\") === Uri(\"https://host/path?query#fragment\")\n+      uri.withPort(90) === Uri(\"http://host:90/path?query#fragment\")\n+      uri.withHost(Host(\"other\")) === Uri(\"http://other:80/path?query#fragment\")\n+      uri.withAuthority(Authority(Host(\"other\"), 3030)) === Uri(\"http://other:3030/path?query#fragment\")\n+      uri.withUserInfo(\"someInfo\") === Uri(\"http://someInfo@host:80/path?query#fragment\")\n+      uri.withPath(Path(\"/newpath\")) === Uri(\"http://host/newpath?query#fragment\")\n+      uri.withQuery(Query(\"param1\" -> \"value1\")) === Uri(\"http://host:80/path?param1=value1#fragment\")\n+      uri.withFragment(Some(\"otherFragment\")) === Uri(\"http://host:80/path?query#otherFragment\")",
        "path": "spray-http/src/test/scala/spray/http/UriSpec.scala",
        "position": null,
        "original_position": 15,
        "commit_id": "c6d5499fd3bd40d08e6e1a6719009ae37eb3bc55",
        "original_commit_id": "4c5c8fd3c8067eb4ea2fa7f6ae218786e1f09318",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think the reason it works is that Authority encodes the default port specially as `port == 0`. Normalization (`normalizePort`) makes sure this is valid even if the port was explicitly specified like in the test-case above. Since this is public API it would maybe make sense to make the API a bit more explicit about this fact. See this console snippet for an example:\n\n```\nscala> val uri = Uri(\"http://example.com:80/\")\nuri: spray.http.Uri = http://example.com/\n\nscala> uri.authority.port\nres3: Int = 0\n```\n",
        "created_at": "2013-09-26T07:57:59Z",
        "updated_at": "2013-09-26T15:53:18Z",
        "html_url": "https://github.com/spray/spray/pull/520#discussion_r6594748",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/520",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6594748"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/520#discussion_r6594748"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/520"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6595360",
        "pull_request_review_id": null,
        "id": 6595360,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTUzNjA=",
        "diff_hunk": "@@ -47,6 +47,80 @@ sealed abstract case class Uri(scheme: String, authority: Authority, path: Path,\n     Uri(scheme, authority, path, query, fragment)\n \n   /**\n+   * Returns a copy of this Uri with the given scheme. The `scheme` change of the Uri has the following\n+   * effect on the port value:\n+   * - If the Uri has a non-default port for the scheme before the change this port will remain unchanged.\n+   * - If the Uri has the default port for the scheme before the change it will have the default port for\n+   *   the '''new''' scheme after the change.\n+   */\n+  def withScheme(scheme: String): Uri = copy(scheme = scheme)\n+\n+  /**\n+   * Returns a copy of this Uri with the given authority.\n+   */\n+  def withAuthority(authority: Authority): Uri = copy(authority = authority)\n+\n+  /**\n+   * Returns a copy of this Uri with a Authority created using the given host, port and userinfo.\n+   */\n+  def withAuthority(host: Host, port: Int, userinfo: String = \"\"): Uri = copy(authority = Authority(host, port, userinfo))\n+\n+  /**\n+   * Returns a copy of this Uri with a Authority created using the given host, port and userinfo.\n+   */\n+  def withAuthority(host: String, port: Int, userinfo: String): Uri = copy(authority = Authority(Host(host), port, userinfo))",
        "path": "spray-http/src/main/scala/spray/http/Uri.scala",
        "position": null,
        "original_position": 34,
        "commit_id": "c6d5499fd3bd40d08e6e1a6719009ae37eb3bc55",
        "original_commit_id": "d1ef9fbbe3fe2cd4256186981d8f10be79db8df5",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think in most cases the user will not want to set the userinfo (since it is a somewhat more rarely used feature of an URI), so I'd vote for simply removing the `userinfo` parameter here. If the user really wants to set a userinfo she'll have to use another `withAuthority` overload.\n",
        "created_at": "2013-09-26T08:33:51Z",
        "updated_at": "2013-09-26T15:53:18Z",
        "html_url": "https://github.com/spray/spray/pull/520#discussion_r6595360",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/520",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6595360"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/520#discussion_r6595360"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/520"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6709818",
        "pull_request_review_id": null,
        "id": 6709818,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MDk4MTg=",
        "diff_hunk": "@@ -269,7 +269,7 @@ case class HttpRequest(method: HttpMethod = HttpMethods.GET,\n   def withHeadersAndEntity(headers: List[HttpHeader], entity: HttpEntity) =\n     if ((headers eq this.headers) && (entity eq this.entity)) this else copy(headers = headers, entity = entity)\n \n-  def chunkedMessageStart: HttpMessageStart = ChunkedRequestStart(withEntity(HttpEntity.Empty))\n+  def chunkedMessageStart: HttpMessageStart = ChunkedRequestStart(withEntity(entity))",
        "path": "spray-http/src/main/scala/spray/http/HttpMessage.scala",
        "position": 5,
        "original_position": 5,
        "commit_id": "dff09682b0e2287853905e9f7fb41d1d82be1276",
        "original_commit_id": "dff09682b0e2287853905e9f7fb41d1d82be1276",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I don't think that's the right fix here because the way this method is used (i.e. to create a stream of chunked messages from a single HttpMessage) it will duplicate the entity. We should use the mechanism we introduce above for signalling Content-Type for chunked start messages and use that one here in combination with an empty entity to transport the content-type.\n",
        "created_at": "2013-10-02T09:19:12Z",
        "updated_at": "2013-10-02T09:19:12Z",
        "html_url": "https://github.com/spray/spray/pull/548#discussion_r6709818",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/548",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6709818"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/548#discussion_r6709818"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/548"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6766031",
        "pull_request_review_id": null,
        "id": 6766031,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjYwMzE=",
        "diff_hunk": "@@ -36,52 +35,84 @@ private[can] trait ResponseRenderingComponent {\n       case x  \u21d2 (\"Server: \" + x + \"\\r\\nDate: \").getAsciiBytes\n     }\n \n+  // returns a boolean indicating whether the connection is to be closed after this response was sent\n   def renderResponsePartRenderingContext(r: Rendering, ctx: ResponsePartRenderingContext,\n                                          log: LoggingAdapter): Boolean = {\n-    def renderResponseStart(response: HttpResponse): Connection = {\n-      val manualContentHeadersAllowed =\n-        transparentHeadRequests && ctx.requestMethod == HttpMethods.HEAD && response.entity.isEmpty\n+    def renderResponseStart(response: HttpResponse, disallowUserContentType: Boolean,",
        "path": "spray-can/src/main/scala/spray/can/rendering/ResponseRenderingComponent.scala",
        "position": null,
        "original_position": 18,
        "commit_id": "02d6da4cf687e6ca4ad15e494f33e2f71ace5b35",
        "original_commit_id": "69bda9c4e660116146151a3ac576a0897d89a28f",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think it would make sense to swap the names from `disallow` to `allow` as the conditions below are also all negated which makes it hard to understand what's meant:\n\n``` scala\n// we only allow user-specified Content-Type headers for responses to HEAD request with an empty entity\ndisallowUserContentType = entity.nonEmpty || ctx.requestMethod != HttpMethods.HEAD,\n```\n\nand\n\n``` scala\ndisallowUserContentType = response.entity.nonEmpty, // for empty entities we allow user-specified Content-Type\ndisallowUserContentLength = !chunkless\n```\n",
        "created_at": "2013-10-04T12:23:38Z",
        "updated_at": "2013-10-04T13:33:18Z",
        "html_url": "https://github.com/spray/spray/pull/556#discussion_r6766031",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/556",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6766031"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/556#discussion_r6766031"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/556"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6767372",
        "pull_request_review_id": null,
        "id": 6767372,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjczNzI=",
        "diff_hunk": "@@ -36,52 +35,84 @@ private[can] trait ResponseRenderingComponent {\n       case x  \u21d2 (\"Server: \" + x + \"\\r\\nDate: \").getAsciiBytes\n     }\n \n+  // returns a boolean indicating whether the connection is to be closed after this response was sent\n   def renderResponsePartRenderingContext(r: Rendering, ctx: ResponsePartRenderingContext,\n                                          log: LoggingAdapter): Boolean = {\n-    def renderResponseStart(response: HttpResponse): Connection = {\n-      val manualContentHeadersAllowed =\n-        transparentHeadRequests && ctx.requestMethod == HttpMethods.HEAD && response.entity.isEmpty\n+    def renderResponseStart(response: HttpResponse, disallowUserContentType: Boolean,",
        "path": "spray-can/src/main/scala/spray/can/rendering/ResponseRenderingComponent.scala",
        "position": null,
        "original_position": 18,
        "commit_id": "02d6da4cf687e6ca4ad15e494f33e2f71ace5b35",
        "original_commit_id": "69bda9c4e660116146151a3ac576a0897d89a28f",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ok, agreed.\n",
        "created_at": "2013-10-04T13:29:11Z",
        "updated_at": "2013-10-04T13:33:18Z",
        "html_url": "https://github.com/spray/spray/pull/556#discussion_r6767372",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/556",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6767372"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/556#discussion_r6767372"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/556"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6880432",
        "pull_request_review_id": null,
        "id": 6880432,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4ODA0MzI=",
        "diff_hunk": "@@ -89,9 +91,20 @@ private class HttpHostConnectionSlot(host: String, port: Int,\n   def connected(httpConnection: ActorRef, openRequests: Queue[RequestContext],\n                 closeAfterResponseEnd: Boolean = false): Receive = {\n     case part: HttpResponsePart if openRequests.nonEmpty \u21d2\n-      val RequestContext(request, _, commander) = openRequests.head\n+      val ctx @ RequestContext(request, _, redirectsLeft, commander) = openRequests.head\n       if (log.isDebugEnabled) log.debug(\"Delivering {} for {}\", formatResponse(part), format(request))\n-      commander ! part\n+      part match {\n+        case res: HttpResponse \u21d2\n+          //Check for potential redirection\n+          //Only it's a 3xx status code, and we have a location header and we have redirection left",
        "path": "spray-can/src/main/scala/spray/can/client/HttpHostConnectionSlot.scala",
        "position": null,
        "original_position": 20,
        "commit_id": "98365ff0cc3fa7448bd4e0f59d80804c9ed48445",
        "original_commit_id": "d66781dcfd7c4ff41c0e7a7574414448890e565c",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think this comment doesn't really add any value here, the code is readable enough I think.\n",
        "created_at": "2013-10-10T08:15:23Z",
        "updated_at": "2013-10-17T14:48:40Z",
        "html_url": "https://github.com/spray/spray/pull/560#discussion_r6880432",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/560",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6880432"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/560#discussion_r6880432"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/560"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6880442",
        "pull_request_review_id": null,
        "id": 6880442,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4ODA0NDI=",
        "diff_hunk": "@@ -89,9 +91,20 @@ private class HttpHostConnectionSlot(host: String, port: Int,\n   def connected(httpConnection: ActorRef, openRequests: Queue[RequestContext],\n                 closeAfterResponseEnd: Boolean = false): Receive = {\n     case part: HttpResponsePart if openRequests.nonEmpty \u21d2\n-      val RequestContext(request, _, commander) = openRequests.head\n+      val ctx @ RequestContext(request, _, redirectsLeft, commander) = openRequests.head\n       if (log.isDebugEnabled) log.debug(\"Delivering {} for {}\", formatResponse(part), format(request))\n-      commander ! part\n+      part match {\n+        case res: HttpResponse \u21d2\n+          //Check for potential redirection\n+          //Only it's a 3xx status code, and we have a location header and we have redirection left\n+          val location = res.header[Location]",
        "path": "spray-can/src/main/scala/spray/can/client/HttpHostConnectionSlot.scala",
        "position": null,
        "original_position": 21,
        "commit_id": "98365ff0cc3fa7448bd4e0f59d80804c9ed48445",
        "original_commit_id": "d66781dcfd7c4ff41c0e7a7574414448890e565c",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "We don't need to search for the header if the response status is not a redirect or if there are no redirects left, no?\n",
        "created_at": "2013-10-10T08:15:57Z",
        "updated_at": "2013-10-17T14:48:40Z",
        "html_url": "https://github.com/spray/spray/pull/560#discussion_r6880442",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/560",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6880442"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/560#discussion_r6880442"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/560"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6880475",
        "pull_request_review_id": null,
        "id": 6880475,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4ODA0NzU=",
        "diff_hunk": "@@ -149,6 +162,16 @@ private class HttpHostConnectionSlot(host: String, port: Int,\n       context.become(unconnected)\n   }\n \n+  def redirect(location: Location, ctx: RequestContext) {\n+    import context._",
        "path": "spray-can/src/main/scala/spray/can/client/HttpHostConnectionSlot.scala",
        "position": null,
        "original_position": 37,
        "commit_id": "98365ff0cc3fa7448bd4e0f59d80804c9ed48445",
        "original_commit_id": "d66781dcfd7c4ff41c0e7a7574414448890e565c",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Do we really need this import?\nI currently don't see its value...\n",
        "created_at": "2013-10-10T08:17:52Z",
        "updated_at": "2013-10-17T14:48:40Z",
        "html_url": "https://github.com/spray/spray/pull/560#discussion_r6880475",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/560",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6880475"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/560#discussion_r6880475"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/560"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6880823",
        "pull_request_review_id": null,
        "id": 6880823,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4ODA4MjM=",
        "diff_hunk": "@@ -89,9 +91,20 @@ private class HttpHostConnectionSlot(host: String, port: Int,\n   def connected(httpConnection: ActorRef, openRequests: Queue[RequestContext],\n                 closeAfterResponseEnd: Boolean = false): Receive = {\n     case part: HttpResponsePart if openRequests.nonEmpty \u21d2\n-      val RequestContext(request, _, commander) = openRequests.head\n+      val ctx @ RequestContext(request, _, redirectsLeft, commander) = openRequests.head\n       if (log.isDebugEnabled) log.debug(\"Delivering {} for {}\", formatResponse(part), format(request))\n-      commander ! part\n+      part match {\n+        case res: HttpResponse \u21d2\n+          //Check for potential redirection\n+          //Only it's a 3xx status code, and we have a location header and we have redirection left\n+          val location = res.header[Location]",
        "path": "spray-can/src/main/scala/spray/can/client/HttpHostConnectionSlot.scala",
        "position": null,
        "original_position": 21,
        "commit_id": "98365ff0cc3fa7448bd4e0f59d80804c9ed48445",
        "original_commit_id": "d66781dcfd7c4ff41c0e7a7574414448890e565c",
        "user": {
            "login": "theon",
            "id": 759170,
            "node_id": "MDQ6VXNlcjc1OTE3MA==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/759170?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/theon",
            "html_url": "https://github.com/theon",
            "followers_url": "https://api.github.com/users/theon/followers",
            "following_url": "https://api.github.com/users/theon/following{/other_user}",
            "gists_url": "https://api.github.com/users/theon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/theon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/theon/subscriptions",
            "organizations_url": "https://api.github.com/users/theon/orgs",
            "repos_url": "https://api.github.com/users/theon/repos",
            "events_url": "https://api.github.com/users/theon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/theon/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "That is true. We could add another level of `if else` nesting (maybe at the cost of readability?) or alternatively make `location` a `lazy val`.\n",
        "created_at": "2013-10-10T08:35:39Z",
        "updated_at": "2013-10-17T14:48:40Z",
        "html_url": "https://github.com/spray/spray/pull/560#discussion_r6880823",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/560",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6880823"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/560#discussion_r6880823"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/560"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6880831",
        "pull_request_review_id": null,
        "id": 6880831,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4ODA4MzE=",
        "diff_hunk": "@@ -89,9 +91,20 @@ private class HttpHostConnectionSlot(host: String, port: Int,\n   def connected(httpConnection: ActorRef, openRequests: Queue[RequestContext],\n                 closeAfterResponseEnd: Boolean = false): Receive = {\n     case part: HttpResponsePart if openRequests.nonEmpty \u21d2\n-      val RequestContext(request, _, commander) = openRequests.head\n+      val ctx @ RequestContext(request, _, redirectsLeft, commander) = openRequests.head\n       if (log.isDebugEnabled) log.debug(\"Delivering {} for {}\", formatResponse(part), format(request))\n-      commander ! part\n+      part match {\n+        case res: HttpResponse \u21d2\n+          //Check for potential redirection\n+          //Only it's a 3xx status code, and we have a location header and we have redirection left\n+          val location = res.header[Location]\n+          if (res.status.isRedirect && location.nonEmpty && redirectsLeft > 0) {",
        "path": "spray-can/src/main/scala/spray/can/client/HttpHostConnectionSlot.scala",
        "position": null,
        "original_position": 22,
        "commit_id": "98365ff0cc3fa7448bd4e0f59d80804c9ed48445",
        "original_commit_id": "d66781dcfd7c4ff41c0e7a7574414448890e565c",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I don't think we can handle all 3xx responses in the same way.\nJudging from http://tools.ietf.org/html/rfc2616#section-10.3 I'd say we should handle the responses like this:\n\nStatus **300**: Never follow a potentially existing `Location` header, always return to the user as is.\n\nStatus **301**: Here the spec says: \"If the 301 status code is received in response to a request other than GET or HEAD, the user agent MUST NOT automatically redirect the request unless it can be confirmed by the user...\"!\n\nStatus **302**: Spec: \"If the 302 status code is received in response to a request other than GET or HEAD, the user agent MUST NOT automatically redirect the request...\"!\n\nStatus **303**: Spec: \"The response to the request can be found under a different URI and SHOULD be retrieved using a GET method on that resource.\"\n\nStatus **304**: No redirection required.\n\nStatus **305**: Theoretically we could support it, but I see it as outside of the scope of this PR. Let's add a ticket for it.\n\nStatus **307**: Spec: \"If the 307 status code is received in response to a request other than GET or HEAD, the user agent MUST NOT automatically redirect the request\"\n",
        "created_at": "2013-10-10T08:35:58Z",
        "updated_at": "2013-10-17T14:48:40Z",
        "html_url": "https://github.com/spray/spray/pull/560#discussion_r6880831",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/560",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6880831"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/560#discussion_r6880831"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/560"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6880847",
        "pull_request_review_id": null,
        "id": 6880847,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4ODA4NDc=",
        "diff_hunk": "@@ -149,6 +162,16 @@ private class HttpHostConnectionSlot(host: String, port: Int,\n       context.become(unconnected)\n   }\n \n+  def redirect(location: Location, ctx: RequestContext) {\n+    import context._\n+\n+    val baseUri = ctx.request.uri.toEffectiveHttpRequestUri(Uri.Host(host), port, sslEncryption)\n+    val redirectUri = location.uri.resolvedAgainst(baseUri)\n+\n+    val request = HttpRequest(HttpMethods.GET, redirectUri)",
        "path": "spray-can/src/main/scala/spray/can/client/HttpHostConnectionSlot.scala",
        "position": null,
        "original_position": 42,
        "commit_id": "98365ff0cc3fa7448bd4e0f59d80804c9ed48445",
        "original_commit_id": "d66781dcfd7c4ff41c0e7a7574414448890e565c",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "What about HEAD requests?\n",
        "created_at": "2013-10-10T08:36:30Z",
        "updated_at": "2013-10-17T14:48:40Z",
        "html_url": "https://github.com/spray/spray/pull/560#discussion_r6880847",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/560",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6880847"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/560#discussion_r6880847"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/560"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6880853",
        "pull_request_review_id": null,
        "id": 6880853,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4ODA4NTM=",
        "diff_hunk": "@@ -149,6 +162,16 @@ private class HttpHostConnectionSlot(host: String, port: Int,\n       context.become(unconnected)\n   }\n \n+  def redirect(location: Location, ctx: RequestContext) {\n+    import context._",
        "path": "spray-can/src/main/scala/spray/can/client/HttpHostConnectionSlot.scala",
        "position": null,
        "original_position": 37,
        "commit_id": "98365ff0cc3fa7448bd4e0f59d80804c9ed48445",
        "original_commit_id": "d66781dcfd7c4ff41c0e7a7574414448890e565c",
        "user": {
            "login": "theon",
            "id": 759170,
            "node_id": "MDQ6VXNlcjc1OTE3MA==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/759170?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/theon",
            "html_url": "https://github.com/theon",
            "followers_url": "https://api.github.com/users/theon/followers",
            "following_url": "https://api.github.com/users/theon/following{/other_user}",
            "gists_url": "https://api.github.com/users/theon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/theon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/theon/subscriptions",
            "organizations_url": "https://api.github.com/users/theon/orgs",
            "repos_url": "https://api.github.com/users/theon/repos",
            "events_url": "https://api.github.com/users/theon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/theon/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It brings into scope the implicit actor system required by `IO(key)(system)`.\n",
        "created_at": "2013-10-10T08:36:52Z",
        "updated_at": "2013-10-17T14:48:40Z",
        "html_url": "https://github.com/spray/spray/pull/560#discussion_r6880853",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/560",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6880853"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/560#discussion_r6880853"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/560"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6880902",
        "pull_request_review_id": null,
        "id": 6880902,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4ODA5MDI=",
        "diff_hunk": "@@ -89,9 +91,20 @@ private class HttpHostConnectionSlot(host: String, port: Int,\n   def connected(httpConnection: ActorRef, openRequests: Queue[RequestContext],\n                 closeAfterResponseEnd: Boolean = false): Receive = {\n     case part: HttpResponsePart if openRequests.nonEmpty \u21d2\n-      val RequestContext(request, _, commander) = openRequests.head\n+      val ctx @ RequestContext(request, _, redirectsLeft, commander) = openRequests.head\n       if (log.isDebugEnabled) log.debug(\"Delivering {} for {}\", formatResponse(part), format(request))\n-      commander ! part\n+      part match {\n+        case res: HttpResponse \u21d2\n+          //Check for potential redirection\n+          //Only it's a 3xx status code, and we have a location header and we have redirection left\n+          val location = res.header[Location]",
        "path": "spray-can/src/main/scala/spray/can/client/HttpHostConnectionSlot.scala",
        "position": null,
        "original_position": 21,
        "commit_id": "98365ff0cc3fa7448bd4e0f59d80804c9ed48445",
        "original_commit_id": "d66781dcfd7c4ff41c0e7a7574414448890e565c",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'd vote for another if/else level.\n",
        "created_at": "2013-10-10T08:38:17Z",
        "updated_at": "2013-10-17T14:48:40Z",
        "html_url": "https://github.com/spray/spray/pull/560#discussion_r6880902",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/560",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6880902"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/560#discussion_r6880902"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/560"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6880919",
        "pull_request_review_id": null,
        "id": 6880919,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4ODA5MTk=",
        "diff_hunk": "@@ -149,6 +162,16 @@ private class HttpHostConnectionSlot(host: String, port: Int,\n       context.become(unconnected)\n   }\n \n+  def redirect(location: Location, ctx: RequestContext) {\n+    import context._",
        "path": "spray-can/src/main/scala/spray/can/client/HttpHostConnectionSlot.scala",
        "position": null,
        "original_position": 37,
        "commit_id": "98365ff0cc3fa7448bd4e0f59d80804c9ed48445",
        "original_commit_id": "d66781dcfd7c4ff41c0e7a7574414448890e565c",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "If that's the only use that let's either import only the member we need or supply it to `IO(Http)` explicitly.\n",
        "created_at": "2013-10-10T08:39:20Z",
        "updated_at": "2013-10-17T14:48:40Z",
        "html_url": "https://github.com/spray/spray/pull/560#discussion_r6880919",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/560",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6880919"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/560#discussion_r6880919"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/560"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6881024",
        "pull_request_review_id": null,
        "id": 6881024,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4ODEwMjQ=",
        "diff_hunk": "@@ -172,6 +172,19 @@ sealed abstract case class Uri(scheme: String, authority: Authority, path: Path,\n                                 defaultAuthority: Authority = Authority.Empty): Uri =\n     effectiveHttpRequestUri(scheme, authority.host, authority.port, path, query, fragment, securedConnection,\n       hostHeaderHost, hostHeaderPort, defaultAuthority)\n+\n+  /**\n+   * Converts this URI into a relative URI by keeping the path, query and fragment, but dropping the scheme and authority.\n+   */\n+  def toRelative =\n+    Uri(path = if (path.isEmpty) Uri.Path./ else path, query = query, fragment = fragment)\n+\n+  /**\n+   * Converts this URI into a relative URI and drops the fragment by keeping the path and query, but dropping the scheme,\n+   * authority and fragment.\n+   */\n+  def toRelativeNoFragment =",
        "path": "spray-http/src/main/scala/spray/http/Uri.scala",
        "position": null,
        "original_position": 15,
        "commit_id": "98365ff0cc3fa7448bd4e0f59d80804c9ed48445",
        "original_commit_id": "d66781dcfd7c4ff41c0e7a7574414448890e565c",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Rather than adding this special modifier that kind of \"does too much\", let's add a `withoutFragment` modifier, so I can achieve the same effect with `uri.toRelative.withoutFragment` at the (small) expense of one more intermediate allocation.\n",
        "created_at": "2013-10-10T08:45:01Z",
        "updated_at": "2013-10-17T14:48:40Z",
        "html_url": "https://github.com/spray/spray/pull/560#discussion_r6881024",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/560",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6881024"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/560#discussion_r6881024"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/560"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6881230",
        "pull_request_review_id": null,
        "id": 6881230,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4ODEyMzA=",
        "diff_hunk": "@@ -89,9 +91,20 @@ private class HttpHostConnectionSlot(host: String, port: Int,\n   def connected(httpConnection: ActorRef, openRequests: Queue[RequestContext],\n                 closeAfterResponseEnd: Boolean = false): Receive = {\n     case part: HttpResponsePart if openRequests.nonEmpty \u21d2\n-      val RequestContext(request, _, commander) = openRequests.head\n+      val ctx @ RequestContext(request, _, redirectsLeft, commander) = openRequests.head\n       if (log.isDebugEnabled) log.debug(\"Delivering {} for {}\", formatResponse(part), format(request))\n-      commander ! part\n+      part match {\n+        case res: HttpResponse \u21d2\n+          //Check for potential redirection\n+          //Only it's a 3xx status code, and we have a location header and we have redirection left\n+          val location = res.header[Location]\n+          if (res.status.isRedirect && location.nonEmpty && redirectsLeft > 0) {",
        "path": "spray-can/src/main/scala/spray/can/client/HttpHostConnectionSlot.scala",
        "position": null,
        "original_position": 22,
        "commit_id": "98365ff0cc3fa7448bd4e0f59d80804c9ed48445",
        "original_commit_id": "d66781dcfd7c4ff41c0e7a7574414448890e565c",
        "user": {
            "login": "theon",
            "id": 759170,
            "node_id": "MDQ6VXNlcjc1OTE3MA==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/759170?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/theon",
            "html_url": "https://github.com/theon",
            "followers_url": "https://api.github.com/users/theon/followers",
            "following_url": "https://api.github.com/users/theon/following{/other_user}",
            "gists_url": "https://api.github.com/users/theon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/theon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/theon/subscriptions",
            "organizations_url": "https://api.github.com/users/theon/orgs",
            "repos_url": "https://api.github.com/users/theon/repos",
            "events_url": "https://api.github.com/users/theon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/theon/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yes, it makes sense to change to logic to only automatically redirect for `301` from `GET/HEAD`, `302` from `GET/HEAD`, `303` and `307` from `GET/HEAD` . I'm not sure how we should handle non `GET` `301` and `302`.\n\nHaving a quick search at how other HTTP clients tackle this: Apache HTTPClient seems NOT to follow non-GET `302` and `301` by default but allow users to drop in their own logic by implementing their own [`RedirectStrategy`](http://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/impl/client/DefaultRedirectStrategy.html). We could do the same and have a `trait` which gives users the opportunity to make their own decision e.g. a decisions based on confirming with whoever their user is:\n\n```\ntrait RedirectStrategy {\n    def shouldRedirect(r: HttpRequest, r: HttpResponse): Boolean\n}\n```\n",
        "created_at": "2013-10-10T08:58:44Z",
        "updated_at": "2013-10-17T14:48:40Z",
        "html_url": "https://github.com/spray/spray/pull/560#discussion_r6881230",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/560",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6881230"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/560#discussion_r6881230"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/560"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6881376",
        "pull_request_review_id": null,
        "id": 6881376,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4ODEzNzY=",
        "diff_hunk": "@@ -89,9 +91,20 @@ private class HttpHostConnectionSlot(host: String, port: Int,\n   def connected(httpConnection: ActorRef, openRequests: Queue[RequestContext],\n                 closeAfterResponseEnd: Boolean = false): Receive = {\n     case part: HttpResponsePart if openRequests.nonEmpty \u21d2\n-      val RequestContext(request, _, commander) = openRequests.head\n+      val ctx @ RequestContext(request, _, redirectsLeft, commander) = openRequests.head\n       if (log.isDebugEnabled) log.debug(\"Delivering {} for {}\", formatResponse(part), format(request))\n-      commander ! part\n+      part match {\n+        case res: HttpResponse \u21d2\n+          //Check for potential redirection\n+          //Only it's a 3xx status code, and we have a location header and we have redirection left\n+          val location = res.header[Location]\n+          if (res.status.isRedirect && location.nonEmpty && redirectsLeft > 0) {",
        "path": "spray-can/src/main/scala/spray/can/client/HttpHostConnectionSlot.scala",
        "position": null,
        "original_position": 22,
        "commit_id": "98365ff0cc3fa7448bd4e0f59d80804c9ed48445",
        "original_commit_id": "d66781dcfd7c4ff41c0e7a7574414448890e565c",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Since we are running in an actor whose logic is completely shielded from the \"user space\" it's not that easy to have the user provide us with custom logic. Also, we can't really use actor messages either since they must be fully serializable.\nSo, I'd vote against a custom redirect strategy. If the user has special requirements they can implement their custom redirection logic on \"their side of the fence\".\n\nIn total I think we should implement this logic:\n1. For GET or HEAD requests we follow redirects in 301, 302, 303 and 307 responses.\n2. For non-GET/HEAD requests we follow redirects in 303 responses and change the request method to GET.\n3. For all other cases we don't follow the redirect but return the response as is.\n\nDoes this make sense?\n",
        "created_at": "2013-10-10T09:06:47Z",
        "updated_at": "2013-10-17T14:48:40Z",
        "html_url": "https://github.com/spray/spray/pull/560#discussion_r6881376",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/560",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6881376"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/560#discussion_r6881376"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/560"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6886025",
        "pull_request_review_id": null,
        "id": 6886025,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4ODYwMjU=",
        "diff_hunk": "@@ -89,9 +91,20 @@ private class HttpHostConnectionSlot(host: String, port: Int,\n   def connected(httpConnection: ActorRef, openRequests: Queue[RequestContext],\n                 closeAfterResponseEnd: Boolean = false): Receive = {\n     case part: HttpResponsePart if openRequests.nonEmpty \u21d2\n-      val RequestContext(request, _, commander) = openRequests.head\n+      val ctx @ RequestContext(request, _, redirectsLeft, commander) = openRequests.head\n       if (log.isDebugEnabled) log.debug(\"Delivering {} for {}\", formatResponse(part), format(request))\n-      commander ! part\n+      part match {\n+        case res: HttpResponse \u21d2\n+          //Check for potential redirection\n+          //Only it's a 3xx status code, and we have a location header and we have redirection left\n+          val location = res.header[Location]\n+          if (res.status.isRedirect && location.nonEmpty && redirectsLeft > 0) {",
        "path": "spray-can/src/main/scala/spray/can/client/HttpHostConnectionSlot.scala",
        "position": null,
        "original_position": 22,
        "commit_id": "98365ff0cc3fa7448bd4e0f59d80804c9ed48445",
        "original_commit_id": "d66781dcfd7c4ff41c0e7a7574414448890e565c",
        "user": {
            "login": "theon",
            "id": 759170,
            "node_id": "MDQ6VXNlcjc1OTE3MA==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/759170?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/theon",
            "html_url": "https://github.com/theon",
            "followers_url": "https://api.github.com/users/theon/followers",
            "following_url": "https://api.github.com/users/theon/following{/other_user}",
            "gists_url": "https://api.github.com/users/theon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/theon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/theon/subscriptions",
            "organizations_url": "https://api.github.com/users/theon/orgs",
            "repos_url": "https://api.github.com/users/theon/repos",
            "events_url": "https://api.github.com/users/theon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/theon/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "What about this note in the spec:\n\n> Note: RFC 1945 and RFC 2068 specify that the client is not allowed\n>       to change the method on the redirected request.  However, most\n>       existing user agent implementations treat 302 as if it were a 303\n>       response, performing a GET on the Location field-value regardless\n>       of the original request method. The status codes 303 and 307 have\n>       been added for servers that wish to make unambiguously clear which\n>       kind of reaction is expected of the client.\n\nShould we behave like most existing user agent implementations? or behave exactly to the spec? If we were to make the changes to behave as \"most existing user agent implementations\":\n1. For `GET` or `HEAD` requests we follow redirects in `302` and `303` and responses and change the request method to GET.\n2. For NON `GET`/`HEAD` requests we follow redirects in `303` and responses and change the request method to GET.\n3. For `GET` or `HEAD` requests we follow redirects in `307` but keep the original request method.\n4. For all other cases we don't follow the redirect but return the response as is.\n\n`301` either fits into bullet 1 or 3 (I can't see clarification in the spec), but I suspect we maintain the original request method, unless it states otherwise (so it would fit into bullet 3).\n",
        "created_at": "2013-10-10T13:19:41Z",
        "updated_at": "2013-10-17T14:48:40Z",
        "html_url": "https://github.com/spray/spray/pull/560#discussion_r6886025",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/560",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6886025"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/560#discussion_r6886025"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/560"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6886376",
        "pull_request_review_id": null,
        "id": 6886376,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4ODYzNzY=",
        "diff_hunk": "@@ -89,9 +91,20 @@ private class HttpHostConnectionSlot(host: String, port: Int,\n   def connected(httpConnection: ActorRef, openRequests: Queue[RequestContext],\n                 closeAfterResponseEnd: Boolean = false): Receive = {\n     case part: HttpResponsePart if openRequests.nonEmpty \u21d2\n-      val RequestContext(request, _, commander) = openRequests.head\n+      val ctx @ RequestContext(request, _, redirectsLeft, commander) = openRequests.head\n       if (log.isDebugEnabled) log.debug(\"Delivering {} for {}\", formatResponse(part), format(request))\n-      commander ! part\n+      part match {\n+        case res: HttpResponse \u21d2\n+          //Check for potential redirection\n+          //Only it's a 3xx status code, and we have a location header and we have redirection left\n+          val location = res.header[Location]\n+          if (res.status.isRedirect && location.nonEmpty && redirectsLeft > 0) {",
        "path": "spray-can/src/main/scala/spray/can/client/HttpHostConnectionSlot.scala",
        "position": null,
        "original_position": 22,
        "commit_id": "98365ff0cc3fa7448bd4e0f59d80804c9ed48445",
        "original_commit_id": "d66781dcfd7c4ff41c0e7a7574414448890e565c",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "My interpretation of this note in the spec is that this central sentence should actually read \"However, most\nexisting user agent implementations treat 302 as if it were a 303 response, performing a GET on the Location field-value even if the original request method was neither a HEAD nor GET\".\n\nSo, IMHO, your bullets 1 and 3 should be merged, leaving:\n1. For `GET` and `HEAD` requests we follow redirects in 301, 302, 303 and 307 responses keeping the original request method.\n2. For non-`GET`/`HEAD` requests we follow redirects in 302 and 303 responses and change the request method to `GET`.\n3. For all other cases we don't follow the redirect but return the response as is.\n\nI'm fine with this interpretation of the spec and behaving like \"most existing user agent implementations\".\n",
        "created_at": "2013-10-10T13:33:32Z",
        "updated_at": "2013-10-17T14:48:40Z",
        "html_url": "https://github.com/spray/spray/pull/560#discussion_r6886376",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/560",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6886376"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/560#discussion_r6886376"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/560"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6887310",
        "pull_request_review_id": null,
        "id": 6887310,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4ODczMTA=",
        "diff_hunk": "@@ -89,9 +91,20 @@ private class HttpHostConnectionSlot(host: String, port: Int,\n   def connected(httpConnection: ActorRef, openRequests: Queue[RequestContext],\n                 closeAfterResponseEnd: Boolean = false): Receive = {\n     case part: HttpResponsePart if openRequests.nonEmpty \u21d2\n-      val RequestContext(request, _, commander) = openRequests.head\n+      val ctx @ RequestContext(request, _, redirectsLeft, commander) = openRequests.head\n       if (log.isDebugEnabled) log.debug(\"Delivering {} for {}\", formatResponse(part), format(request))\n-      commander ! part\n+      part match {\n+        case res: HttpResponse \u21d2\n+          //Check for potential redirection\n+          //Only it's a 3xx status code, and we have a location header and we have redirection left\n+          val location = res.header[Location]\n+          if (res.status.isRedirect && location.nonEmpty && redirectsLeft > 0) {",
        "path": "spray-can/src/main/scala/spray/can/client/HttpHostConnectionSlot.scala",
        "position": null,
        "original_position": 22,
        "commit_id": "98365ff0cc3fa7448bd4e0f59d80804c9ed48445",
        "original_commit_id": "d66781dcfd7c4ff41c0e7a7574414448890e565c",
        "user": {
            "login": "theon",
            "id": 759170,
            "node_id": "MDQ6VXNlcjc1OTE3MA==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/759170?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/theon",
            "html_url": "https://github.com/theon",
            "followers_url": "https://api.github.com/users/theon/followers",
            "following_url": "https://api.github.com/users/theon/following{/other_user}",
            "gists_url": "https://api.github.com/users/theon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/theon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/theon/subscriptions",
            "organizations_url": "https://api.github.com/users/theon/orgs",
            "repos_url": "https://api.github.com/users/theon/repos",
            "events_url": "https://api.github.com/users/theon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/theon/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I am going to implement your interpretation.\n\nI've just tried a couple of tests which were inconclusive:\n- CURL - `HEAD` with a `302` response redirects with a `HEAD` request\n- jQuery in Chrome - `HEAD` with a `302` response redirects with a `GET` request\n\nHere be dragons.\n",
        "created_at": "2013-10-10T14:05:30Z",
        "updated_at": "2013-10-17T14:48:40Z",
        "html_url": "https://github.com/spray/spray/pull/560#discussion_r6887310",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/560",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6887310"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/560#discussion_r6887310"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/560"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6887384",
        "pull_request_review_id": null,
        "id": 6887384,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4ODczODQ=",
        "diff_hunk": "@@ -89,9 +91,20 @@ private class HttpHostConnectionSlot(host: String, port: Int,\n   def connected(httpConnection: ActorRef, openRequests: Queue[RequestContext],\n                 closeAfterResponseEnd: Boolean = false): Receive = {\n     case part: HttpResponsePart if openRequests.nonEmpty \u21d2\n-      val RequestContext(request, _, commander) = openRequests.head\n+      val ctx @ RequestContext(request, _, redirectsLeft, commander) = openRequests.head\n       if (log.isDebugEnabled) log.debug(\"Delivering {} for {}\", formatResponse(part), format(request))\n-      commander ! part\n+      part match {\n+        case res: HttpResponse \u21d2\n+          //Check for potential redirection\n+          //Only it's a 3xx status code, and we have a location header and we have redirection left\n+          val location = res.header[Location]\n+          if (res.status.isRedirect && location.nonEmpty && redirectsLeft > 0) {",
        "path": "spray-can/src/main/scala/spray/can/client/HttpHostConnectionSlot.scala",
        "position": null,
        "original_position": 22,
        "commit_id": "98365ff0cc3fa7448bd4e0f59d80804c9ed48445",
        "original_commit_id": "d66781dcfd7c4ff41c0e7a7574414448890e565c",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "> Here be dragons.\n\nYes, indeed.\nLet's stick to out logic and make sure to properly document it.\n",
        "created_at": "2013-10-10T14:08:09Z",
        "updated_at": "2013-10-17T14:48:40Z",
        "html_url": "https://github.com/spray/spray/pull/560#discussion_r6887384",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/560",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6887384"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/560#discussion_r6887384"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/560"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/6893163",
        "pull_request_review_id": null,
        "id": 6893163,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4OTMxNjM=",
        "diff_hunk": "@@ -89,9 +91,20 @@ private class HttpHostConnectionSlot(host: String, port: Int,\n   def connected(httpConnection: ActorRef, openRequests: Queue[RequestContext],\n                 closeAfterResponseEnd: Boolean = false): Receive = {\n     case part: HttpResponsePart if openRequests.nonEmpty \u21d2\n-      val RequestContext(request, _, commander) = openRequests.head\n+      val ctx @ RequestContext(request, _, redirectsLeft, commander) = openRequests.head\n       if (log.isDebugEnabled) log.debug(\"Delivering {} for {}\", formatResponse(part), format(request))\n-      commander ! part\n+      part match {\n+        case res: HttpResponse \u21d2\n+          //Check for potential redirection\n+          //Only it's a 3xx status code, and we have a location header and we have redirection left\n+          val location = res.header[Location]\n+          if (res.status.isRedirect && location.nonEmpty && redirectsLeft > 0) {",
        "path": "spray-can/src/main/scala/spray/can/client/HttpHostConnectionSlot.scala",
        "position": null,
        "original_position": 22,
        "commit_id": "98365ff0cc3fa7448bd4e0f59d80804c9ed48445",
        "original_commit_id": "d66781dcfd7c4ff41c0e7a7574414448890e565c",
        "user": {
            "login": "theon",
            "id": 759170,
            "node_id": "MDQ6VXNlcjc1OTE3MA==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/759170?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/theon",
            "html_url": "https://github.com/theon",
            "followers_url": "https://api.github.com/users/theon/followers",
            "following_url": "https://api.github.com/users/theon/following{/other_user}",
            "gists_url": "https://api.github.com/users/theon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/theon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/theon/subscriptions",
            "organizations_url": "https://api.github.com/users/theon/orgs",
            "repos_url": "https://api.github.com/users/theon/repos",
            "events_url": "https://api.github.com/users/theon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/theon/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I almost have this finished now. I've also added in automatic redirection for 308 responses for all requests (regardless of method). This maintains the existing request method. 308 isn't mentioned in the RFC-2616, but is in this (draft) spec: http://tools.ietf.org/html/draft-reschke-http-status-308-07#section-3\n\nLet me know if you have any concerns with this, otherwise I will update this PR sometime later this evening.\n",
        "created_at": "2013-10-10T17:09:01Z",
        "updated_at": "2013-10-17T14:48:40Z",
        "html_url": "https://github.com/spray/spray/pull/560#discussion_r6893163",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/560",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/6893163"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/560#discussion_r6893163"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/560"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/7058366",
        "pull_request_review_id": null,
        "id": 7058366,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNTgzNjY=",
        "diff_hunk": "@@ -47,212 +47,344 @@ trait SslTlsContext extends PipelineContext {\n  */\n object SslTlsSupport {\n \n-  def apply(publishSslSessionInfo: Boolean) = new OptionalPipelineStage[SslTlsContext] {\n-\n-    def enabled(context: SslTlsContext) = context.sslEngine.isDefined\n-\n-    def applyIfEnabled(context: SslTlsContext, commandPL: CPL, eventPL: EPL): Pipelines =\n-      new Pipelines {\n-        import context._\n-        val engine = context.sslEngine.get\n-        var pendingSends = Queue.empty[Send]\n-        var inboundReceptacle: ByteBuffer = _ // holds incoming data that are too small to be decrypted yet\n-        var originalCloseCommand: Tcp.CloseCommand = _\n+  def apply(maxEncryptionChunkSize: Int, publishSslSessionInfo: Boolean,\n+            tracing: Boolean = false): OptionalPipelineStage[SslTlsContext] =\n+    new OptionalPipelineStage[SslTlsContext] {\n+      def enabled(context: SslTlsContext) = context.sslEngine.isDefined\n+\n+      def applyIfEnabled(context: SslTlsContext, commandPL: CPL, eventPL: EPL): Pipelines =\n+        new DynamicPipelines {\n+          import context._\n+          val engine = context.sslEngine.get\n+          var pendingInboundBytes: ByteBuffer = EmptyByteBuffer // encrypted bytes to be decrypted\n+          var pendingOutboundBytes: ByteBuffer = EmptyByteBuffer // plaintext bytes to be encrypted\n+          val pendingEncryptedBytes = new ByteStringBuilder // encrypted bytes to be sent",
        "path": "spray-io/src/main/scala/spray/io/SslTlsSupport.scala",
        "position": 45,
        "original_position": 45,
        "commit_id": "11d77364f8268aad5a8edcbd471dd317b927dc4a",
        "original_commit_id": "e87c78e5b0b8af6858c4159f790b5aa3a9a45178",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "In which way do those variables differ from the remaining state? Are there any invariants about their values that could be explained/checked?\n",
        "created_at": "2013-10-18T10:29:44Z",
        "updated_at": "2013-10-18T13:51:57Z",
        "html_url": "https://github.com/spray/spray/pull/600#discussion_r7058366",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/600",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/7058366"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/600#discussion_r7058366"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/600"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/7058407",
        "pull_request_review_id": null,
        "id": 7058407,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNTg0MDc=",
        "diff_hunk": "@@ -47,212 +47,344 @@ trait SslTlsContext extends PipelineContext {\n  */\n object SslTlsSupport {\n \n-  def apply(publishSslSessionInfo: Boolean) = new OptionalPipelineStage[SslTlsContext] {\n-\n-    def enabled(context: SslTlsContext) = context.sslEngine.isDefined\n-\n-    def applyIfEnabled(context: SslTlsContext, commandPL: CPL, eventPL: EPL): Pipelines =\n-      new Pipelines {\n-        import context._\n-        val engine = context.sslEngine.get\n-        var pendingSends = Queue.empty[Send]\n-        var inboundReceptacle: ByteBuffer = _ // holds incoming data that are too small to be decrypted yet\n-        var originalCloseCommand: Tcp.CloseCommand = _\n+  def apply(maxEncryptionChunkSize: Int, publishSslSessionInfo: Boolean,\n+            tracing: Boolean = false): OptionalPipelineStage[SslTlsContext] =\n+    new OptionalPipelineStage[SslTlsContext] {\n+      def enabled(context: SslTlsContext) = context.sslEngine.isDefined\n+\n+      def applyIfEnabled(context: SslTlsContext, commandPL: CPL, eventPL: EPL): Pipelines =\n+        new DynamicPipelines {\n+          import context._\n+          val engine = context.sslEngine.get\n+          var pendingInboundBytes: ByteBuffer = EmptyByteBuffer // encrypted bytes to be decrypted\n+          var pendingOutboundBytes: ByteBuffer = EmptyByteBuffer // plaintext bytes to be encrypted\n+          val pendingEncryptedBytes = new ByteStringBuilder // encrypted bytes to be sent\n+\n+          become(defaultState())\n+\n+          // No ACK pending,\n+          // if the given stream is empty no write is currently pending, otherwise its head is the currently pending write\n+          // if closedEvent is defined an outbound close is scheduled after the current chunk stream is sent\n+          def defaultState(remainingOutgoingData: Stream[WriteChunk] = Stream.empty,\n+                           closedEvent: Option[Tcp.ConnectionClosed] = None): State = new State {\n+            if (tracing) log.debug(\"Transitioning to defaultState\")\n+            val commandPipeline: CPL = {\n+              case x: Tcp.WriteCommand \u21d2\n+                if (tracing) log.debug(\"Received write {} in defaultState\", x.getClass)\n+                startSending(x, remainingOutgoingData, closedEvent, sendNow = true)\n+              case x @ (Tcp.Close | Tcp.ConfirmedClose) \u21d2\n+                log.debug(\"Closing outbound SSL stream due to reception of {}\", x)\n+                startClosing(x.asInstanceOf[Tcp.CloseCommand].event)\n+              case Tcp.Abort \u21d2 abort() // do we need to close anything in this case?\n+              case cmd       \u21d2 commandPL(cmd)\n+            }\n+            val eventPipeline: EPL = {\n+              case Tcp.Received(data) \u21d2\n+                if (tracing) log.debug(\"Received {} inbound bytes in defaultState\", data.size)\n+                enqueueInboundBytes(data)\n+                decrypt()\n+                if (encryptedBytesPending) {\n+                  sendEncryptedBytes()\n+                  become {\n+                    if (isOutboundDone) finishingClose(closedEvent)\n+                    else waitingForAck(remainingOutgoingData, closedEvent)\n+                  }\n+                } else assert(!isOutboundDone)\n+              case Tcp.PeerClosed     \u21d2 receivedUnexpectedPeerClosed()\n+              case x: Tcp.ErrorClosed \u21d2 eventPL(x) // is there anything we need to close in this case?\n+              case x @ (_: Tcp.ConnectionClosed | WriteChunkAck) \u21d2\n+                throw new IllegalStateException(\"Received \" + x + \" in defaultState\")\n+              case ev \u21d2 eventPL(ev)\n+            }\n+          }\n \n-        val commandPipeline: CPL = {\n-          case x: Tcp.Write \u21d2\n-            if (pendingSends.isEmpty) withTempBuf(encrypt(Send(x), _))\n-            else pendingSends = pendingSends enqueue Send(x)\n+          // ACK pending,\n+          // if the given stream is empty no write is currently pending, otherwise its head is the currently pending write\n+          // if closedEvent is defined an outbound close is scheduled after the current chunk stream is sent\n+          def waitingForAck(remainingOutgoingData: Stream[WriteChunk] = Stream.empty,\n+                            closedEvent: Option[Tcp.ConnectionClosed] = None): State = new State {\n+            if (tracing) log.debug(\"Transitioning to waitingForAck\")\n+            val commandPipeline: CPL = {\n+              case x: Tcp.WriteCommand \u21d2\n+                if (tracing) log.debug(\"Received write {} in waitingForAck\", x.getClass)\n+                startSending(x, remainingOutgoingData, closedEvent, sendNow = false)\n+              case x @ (Tcp.Close | Tcp.ConfirmedClose) \u21d2\n+                if (closedEvent.isEmpty) {\n+                  log.debug(\"Scheduling close of outbound SSL stream due to reception of {}\", x)\n+                  become(waitingForAck(remainingOutgoingData, Some(x.asInstanceOf[Tcp.CloseCommand].event)))\n+                } else log.debug(\"Dropping {} since an SSL-level close is already scheduled\", x)\n+              case Tcp.Abort \u21d2 abort() // do we need to close anything in this case?\n+              case cmd       \u21d2 commandPL(cmd)\n+            }\n+            val eventPipeline: EPL = {\n+              case Tcp.Received(data) \u21d2\n+                if (tracing) log.debug(\"Received {} inbound bytes in waitingForAck\", data.size)\n+                enqueueInboundBytes(data)\n+                decrypt()\n+                if (isOutboundDone) become(finishingClose(closedEvent)) // else stay in this state\n+              case WriteChunkAck \u21d2\n+                if (tracing) log.debug(\"Received WriteChunkAck in waitingForAck\")\n+                if (encryptedBytesPending) sendEncryptedBytes()\n+                else {\n+                  if (bytesLeft(pendingOutboundBytes))\n+                    become(defaultState(remainingOutgoingData, closedEvent)) // we need to wait for incoming inbound data\n+                  else if (remainingOutgoingData.isEmpty)\n+                    startClosingOrReturnToDefaultState()\n+                  else {\n+                    if (tracing) log.debug(\"Finished sending write chunk\")\n+                    val WriteChunk(_, write) #:: tail = remainingOutgoingData\n+                    if (write.wantsAck) eventPL(write.ack)\n+                    if (tail.isEmpty) startClosingOrReturnToDefaultState()\n+                    else {\n+                      setPendingOutboundBytes(tail.head.buffer)\n+                      encrypt()\n+                      sendEncryptedBytes()\n+                      become(waitingForAck(tail, closedEvent))\n+                    }\n+                  }\n+                }\n+              case Tcp.PeerClosed          \u21d2 receivedUnexpectedPeerClosed()\n+              case x: Tcp.ErrorClosed      \u21d2 eventPL(x) // is there anything we need to close in this case?\n+              case x: Tcp.ConnectionClosed \u21d2 throw new IllegalStateException(\"Received \" + x + \" in waitingForAck\")\n+              case ev                      \u21d2 eventPL(ev)\n+            }\n+            def startClosingOrReturnToDefaultState(): Unit =\n+              closedEvent match {\n+                case Some(ev) \u21d2 startClosing(ev)\n+                case None     \u21d2 become(defaultState())\n+              }\n+          }\n \n-          case x @ (Tcp.Close | Tcp.ConfirmedClose) \u21d2\n-            originalCloseCommand = x.asInstanceOf[Tcp.CloseCommand]\n+          // SSLEngine is outbound done, ACK pending for SSL-level closing sequence bytes that were already sent\n+          // the inbound side might still be open, however we don't wait for the peer's closing bytes\n+          // but simply issue a ConfirmedClose to the TCP layer\n+          def finishingClose(closedEvent: Option[Tcp.ConnectionClosed] = None,\n+                             closeCommand: Tcp.CloseCommand = Tcp.ConfirmedClose): State = new State {\n+            if (tracing) log.debug(\"Transitioning to finishClose({}, {})\", closedEvent, closeCommand)\n+            commandPL(closeCommand)\n+            val commandPipeline: CPL = {\n+              case x: Tcp.WriteCommand                  \u21d2 failWrite(x, \"the SSL connection is already closing\")\n+              case x @ (Tcp.Close | Tcp.ConfirmedClose) \u21d2 log.debug(\"Dropping {} since the SSL connection is already closing\", x)\n+              case Tcp.Abort                            \u21d2 abort() // do we need to close anything in this case?\n+              case cmd                                  \u21d2 commandPL(cmd)\n+            }\n+            val eventPipeline: EPL = {\n+              case Tcp.Received(data) \u21d2\n+                if (tracing) log.debug(\"Received {} inbound bytes in closingInbound\", data.size)\n+                if (!engine.isInboundDone) {\n+                  enqueueInboundBytes(data)\n+                  decrypt()\n+                } else log.warning(\"Dropping {} bytes that were received after SSL-level close\", data.size)\n+              case WriteChunkAck           \u21d2 // ignore, expected as ACK for the closing outbound bytes\n+              case Tcp.PeerClosed          \u21d2 // expected after the final inbound packet, we simply drop it here\n+              case _: Tcp.ConnectionClosed \u21d2 eventPL(closedEvent getOrElse Tcp.PeerClosed)\n+              case ev                      \u21d2 eventPL(ev)\n+            }\n+          }\n \n-            log.debug(\"Closing SSLEngine due to reception of {}\", x)\n+          def startSending(write: Tcp.WriteCommand, remainingOutgoingData: Stream[WriteChunk],\n+                           closedEvent: Option[Tcp.ConnectionClosed], sendNow: Boolean): Unit =\n+            if (closedEvent.isEmpty) {\n+              if (remainingOutgoingData.isEmpty) {\n+                val chunkStream = writeChunkStream(write)\n+                if (chunkStream.nonEmpty) {\n+                  setPendingOutboundBytes(chunkStream.head.buffer)\n+                  encrypt()\n+                  if (sendNow) sendEncryptedBytes()\n+                  become(waitingForAck(chunkStream))\n+                } // else ignore\n+              } else failWrite(write, \"there is already another write in progress\")\n+            } else failWrite(write, \"the SSL connection is already closing\")\n+\n+          def startClosing(closedEvent: Tcp.ConnectionClosed): Unit = {\n             engine.closeOutbound()\n-            withTempBuf(closeEngine)\n+            encrypt()\n+            sendEncryptedBytes()\n+            become {\n+              if (isOutboundDone) finishingClose(Some(closedEvent))\n+              else waitingForAck(closedEvent = Some(closedEvent))\n+            }\n+          }\n \n-          // don't send close command to network here, it's the job of the SSL engine\n-          // to shutdown the connection when getting CLOSED in encrypt\n+          def receivedUnexpectedPeerClosed(): Unit = {\n+            log.debug(\"Received unexpected Tcp.PeerClosed, invalidating SSL session\")\n+            try {\n+              engine.closeInbound() // invalidates SSL session and should throw SSLException\n+              throw new IllegalStateException(\"No SSLException after unexpected Tcp.PeerClosed\")\n+            } catch { case e: SSLException \u21d2 } // ignore warning about truncation attack\n+            become(finishingClose(Some(Tcp.ErrorClosed(\"Peer closed SSL connection prematurely\")), Tcp.Close))\n+          }\n \n-          case cmd \u21d2 commandPL(cmd)\n-        }\n+          def abort(): Unit = {\n+            commandPL(Tcp.Abort)\n+            become {\n+              new State {\n+                def commandPipeline = commandPL\n+                val eventPipeline: EPL = {\n+                  case Tcp.Received(data) \u21d2 log.debug(\"Dropping {} received bytes due to connection having been aborted\", data.size)\n+                  case ev                 \u21d2 eventPL(ev)\n+                }\n+              }\n+            }\n+          }\n \n-        val eventPipeline: EPL = {\n-          case Tcp.Received(data) \u21d2\n-            val buf = if (inboundReceptacle != null) {\n-              try ByteBuffer.allocate(inboundReceptacle.remaining + data.length).put(inboundReceptacle)\n-              finally inboundReceptacle = null\n-            } else ByteBuffer allocate data.length\n-            data copyToBuffer buf\n-            buf.flip()\n-            withTempBuf(decrypt(buf, _))\n-\n-          case x: Tcp.ConnectionClosed \u21d2\n-            // After we have closed the connection we ignore FIN from the other side.\n-            // That's to avoid a strange condition where we know that no truncation attack\n-            // can happen any more (because we actively closed the connection) but the peer\n-            // isn't behaving properly and didn't send close_notify. Why is this condition strange?\n-            // Because if we had closed the connection directly after we sent close_notify (which\n-            // is allowed by the spec) we wouldn't even have noticed.\n-            if (!engine.isOutboundDone)\n-              try engine.closeInbound()\n-              catch { case e: SSLException \u21d2 } // ignore warning about possible possible truncation attacks\n-\n-            if (x.isAborted || (originalCloseCommand eq null)) eventPL(x)\n-            else if (!engine.isInboundDone) eventPL(originalCloseCommand.event)\n-          // else close message was sent by decrypt case CLOSED\n-\n-          case ev \u21d2 eventPL(ev)\n-        }\n+          override def process[T](msg: T, pl: Pipeline[T]): Unit =\n+            try pl(msg)\n+            catch {\n+              case e: SSLException \u21d2\n+                log.error(\"Aborting encrypted connection to {} due to {}\", context.remoteAddress, Utils.fullErrorMessageFor(e))\n+                abort()\n+            }\n \n-        def publishSSLSessionEstablished() =\n-          if (publishSslSessionInfo) eventPL(SSLSessionEstablished(SSLSessionInfo(engine)))\n-\n-        /**\n-         * Encrypts the given buffers and dispatches the results to the commandPL as IOPeer.Send messages.\n-         */\n-        @tailrec\n-        def encrypt(send: Send, tempBuf: ByteBuffer, fromQueue: Boolean = false): Unit = {\n-          import send._\n-          log.debug(\"Encrypting {} bytes\", buffer.remaining)\n-          tempBuf.clear()\n-          val ackDefinedAndPreContentLeft = ack != Tcp.NoAck && buffer.remaining > 0\n-          val result = engine.wrap(buffer, tempBuf)\n-          val postContentLeft = buffer.remaining > 0\n-          tempBuf.flip()\n-          if (tempBuf.remaining > 0) {\n-            val writeAck = if (ackDefinedAndPreContentLeft && !postContentLeft) ack else Tcp.NoAck\n-            commandPL(Tcp.Write(ByteString(tempBuf), writeAck))\n-          }\n-          result.getStatus match {\n-            case OK \u21d2 result.getHandshakeStatus match {\n-              case status @ (NOT_HANDSHAKING | FINISHED) \u21d2\n-                if (status == FINISHED) publishSSLSessionEstablished()\n-                if (postContentLeft) encrypt(send, tempBuf, fromQueue)\n-              case NEED_WRAP \u21d2 encrypt(send, tempBuf, fromQueue)\n-              case NEED_UNWRAP \u21d2\n-                pendingSends =\n-                  if (fromQueue) send +: pendingSends // output coming from the queue needs to go to the front\n-                  else pendingSends enqueue send // \"new\" output to the back of the queue\n-              case NEED_TASK \u21d2\n-                runDelegatedTasks()\n-                encrypt(send, tempBuf, fromQueue)\n+          abstract class PumpAction {\n+            // returns true if the action was completed successfully,\n+            // otherwise the connection has already been aborted\n+            def apply(): Unit = {\n+              val tempBuf = SslBufferPool.acquire()\n+              try apply(tempBuf)\n+              finally SslBufferPool.release(tempBuf)\n             }\n-            case CLOSED \u21d2\n-              if (postContentLeft) {\n-                log.warning(\"SSLEngine closed prematurely while sending\")\n-                commandPL(Tcp.Abort)\n-              }\n-              commandPL(Tcp.ConfirmedClose)\n-            case BUFFER_OVERFLOW \u21d2\n-              throw new IllegalStateException // the SslBufferPool should make sure that buffers are never too small\n-            case BUFFER_UNDERFLOW \u21d2\n-              throw new IllegalStateException // BUFFER_UNDERFLOW should never appear as a result of a wrap\n+            def apply(tempBuf: ByteBuffer): Unit\n           }\n-        }\n \n-        /**\n-         * Decrypts the given buffer and dispatches the results to the eventPL as a Received message.\n-         */\n-        @tailrec\n-        def decrypt(buffer: ByteBuffer, tempBuf: ByteBuffer): Unit = {\n-          log.debug(\"Decrypting {} bytes\", buffer.remaining)\n-          tempBuf.clear()\n-          val result = engine.unwrap(buffer, tempBuf)\n-          tempBuf.flip()\n-          if (tempBuf.remaining > 0) eventPL(Tcp.Received(ByteString(tempBuf)))\n-          result.getStatus match {\n-            case OK \u21d2 result.getHandshakeStatus match {\n-              case status @ (NOT_HANDSHAKING | FINISHED) \u21d2\n-                if (status == FINISHED) publishSSLSessionEstablished()\n-                if (buffer.remaining > 0) decrypt(buffer, tempBuf)\n-                else processPendingSends(tempBuf)\n-              case NEED_UNWRAP \u21d2 decrypt(buffer, tempBuf)\n-              case NEED_WRAP \u21d2\n-                if (pendingSends.isEmpty) encrypt(Send.Empty, tempBuf)\n-                else processPendingSends(tempBuf)\n-                if (buffer.remaining > 0) decrypt(buffer, tempBuf)\n-              case NEED_TASK \u21d2\n-                runDelegatedTasks()\n-                decrypt(buffer, tempBuf)\n+          // pumps inbound and outbound data through the SSLEngine starting with encrypting\n+          // potentially decrypted bytes are immediately dispatched to the eventPL\n+          // potentially encrypted bytes are accumulated in the pendingEncryptedBytes builder\n+          // pumping is only stopped by a buffer underflow on the inbound side or when both sides are done\n+          val encrypt: PumpAction = new PumpAction {\n+            @tailrec def apply(tempBuf: ByteBuffer): Unit = {\n+              assert(!engine.isOutboundDone)\n+              tempBuf.clear()\n+              val result = engine.wrap(pendingOutboundBytes, tempBuf)\n+              tempBuf.flip()\n+              if (bytesLeft(tempBuf)) pendingEncryptedBytes ++= ByteString(tempBuf)\n+              result.getStatus match {\n+                case OK \u21d2 result.getHandshakeStatus match {\n+                  case status @ (NOT_HANDSHAKING | FINISHED) \u21d2\n+                    if (status == FINISHED) publishSSLSessionEstablished()\n+                    if (bytesLeft(pendingOutboundBytes)) apply(tempBuf)\n+                    else decrypt(tempBuf)\n+                  case NEED_WRAP   \u21d2 apply(tempBuf)\n+                  case NEED_UNWRAP \u21d2 decrypt(tempBuf)\n+                  case NEED_TASK   \u21d2 runDelegatedTasks(); apply(tempBuf)\n+                }\n+                case CLOSED           \u21d2 if (!engine.isInboundDone) decrypt(tempBuf)",
        "path": "spray-io/src/main/scala/spray/io/SslTlsSupport.scala",
        "position": 361,
        "original_position": 361,
        "commit_id": "11d77364f8268aad5a8edcbd471dd317b927dc4a",
        "original_commit_id": "e87c78e5b0b8af6858c4159f790b5aa3a9a45178",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The behavior seems to have changed from before. In which cases do we get into this state? I guess we now emit the previous error (`\"SSLEngine closed prematurely while sending\"`) in another way, right?\n",
        "created_at": "2013-10-18T10:31:48Z",
        "updated_at": "2013-10-18T13:51:57Z",
        "html_url": "https://github.com/spray/spray/pull/600#discussion_r7058407",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/600",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/7058407"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/600#discussion_r7058407"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/600"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/7058793",
        "pull_request_review_id": null,
        "id": 7058793,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNTg3OTM=",
        "diff_hunk": "@@ -47,212 +47,344 @@ trait SslTlsContext extends PipelineContext {\n  */\n object SslTlsSupport {\n \n-  def apply(publishSslSessionInfo: Boolean) = new OptionalPipelineStage[SslTlsContext] {\n-\n-    def enabled(context: SslTlsContext) = context.sslEngine.isDefined\n-\n-    def applyIfEnabled(context: SslTlsContext, commandPL: CPL, eventPL: EPL): Pipelines =\n-      new Pipelines {\n-        import context._\n-        val engine = context.sslEngine.get\n-        var pendingSends = Queue.empty[Send]\n-        var inboundReceptacle: ByteBuffer = _ // holds incoming data that are too small to be decrypted yet\n-        var originalCloseCommand: Tcp.CloseCommand = _\n+  def apply(maxEncryptionChunkSize: Int, publishSslSessionInfo: Boolean,\n+            tracing: Boolean = false): OptionalPipelineStage[SslTlsContext] =\n+    new OptionalPipelineStage[SslTlsContext] {\n+      def enabled(context: SslTlsContext) = context.sslEngine.isDefined\n+\n+      def applyIfEnabled(context: SslTlsContext, commandPL: CPL, eventPL: EPL): Pipelines =\n+        new DynamicPipelines {\n+          import context._\n+          val engine = context.sslEngine.get\n+          var pendingInboundBytes: ByteBuffer = EmptyByteBuffer // encrypted bytes to be decrypted\n+          var pendingOutboundBytes: ByteBuffer = EmptyByteBuffer // plaintext bytes to be encrypted\n+          val pendingEncryptedBytes = new ByteStringBuilder // encrypted bytes to be sent\n+\n+          become(defaultState())\n+\n+          // No ACK pending,\n+          // if the given stream is empty no write is currently pending, otherwise its head is the currently pending write\n+          // if closedEvent is defined an outbound close is scheduled after the current chunk stream is sent\n+          def defaultState(remainingOutgoingData: Stream[WriteChunk] = Stream.empty,\n+                           closedEvent: Option[Tcp.ConnectionClosed] = None): State = new State {\n+            if (tracing) log.debug(\"Transitioning to defaultState\")\n+            val commandPipeline: CPL = {\n+              case x: Tcp.WriteCommand \u21d2\n+                if (tracing) log.debug(\"Received write {} in defaultState\", x.getClass)\n+                startSending(x, remainingOutgoingData, closedEvent, sendNow = true)\n+              case x @ (Tcp.Close | Tcp.ConfirmedClose) \u21d2\n+                log.debug(\"Closing outbound SSL stream due to reception of {}\", x)\n+                startClosing(x.asInstanceOf[Tcp.CloseCommand].event)\n+              case Tcp.Abort \u21d2 abort() // do we need to close anything in this case?\n+              case cmd       \u21d2 commandPL(cmd)\n+            }\n+            val eventPipeline: EPL = {\n+              case Tcp.Received(data) \u21d2\n+                if (tracing) log.debug(\"Received {} inbound bytes in defaultState\", data.size)\n+                enqueueInboundBytes(data)\n+                decrypt()\n+                if (encryptedBytesPending) {\n+                  sendEncryptedBytes()\n+                  become {\n+                    if (isOutboundDone) finishingClose(closedEvent)\n+                    else waitingForAck(remainingOutgoingData, closedEvent)\n+                  }\n+                } else assert(!isOutboundDone)\n+              case Tcp.PeerClosed     \u21d2 receivedUnexpectedPeerClosed()\n+              case x: Tcp.ErrorClosed \u21d2 eventPL(x) // is there anything we need to close in this case?\n+              case x @ (_: Tcp.ConnectionClosed | WriteChunkAck) \u21d2\n+                throw new IllegalStateException(\"Received \" + x + \" in defaultState\")\n+              case ev \u21d2 eventPL(ev)\n+            }\n+          }\n \n-        val commandPipeline: CPL = {\n-          case x: Tcp.Write \u21d2\n-            if (pendingSends.isEmpty) withTempBuf(encrypt(Send(x), _))\n-            else pendingSends = pendingSends enqueue Send(x)\n+          // ACK pending,\n+          // if the given stream is empty no write is currently pending, otherwise its head is the currently pending write\n+          // if closedEvent is defined an outbound close is scheduled after the current chunk stream is sent\n+          def waitingForAck(remainingOutgoingData: Stream[WriteChunk] = Stream.empty,\n+                            closedEvent: Option[Tcp.ConnectionClosed] = None): State = new State {\n+            if (tracing) log.debug(\"Transitioning to waitingForAck\")\n+            val commandPipeline: CPL = {\n+              case x: Tcp.WriteCommand \u21d2\n+                if (tracing) log.debug(\"Received write {} in waitingForAck\", x.getClass)\n+                startSending(x, remainingOutgoingData, closedEvent, sendNow = false)\n+              case x @ (Tcp.Close | Tcp.ConfirmedClose) \u21d2\n+                if (closedEvent.isEmpty) {\n+                  log.debug(\"Scheduling close of outbound SSL stream due to reception of {}\", x)\n+                  become(waitingForAck(remainingOutgoingData, Some(x.asInstanceOf[Tcp.CloseCommand].event)))\n+                } else log.debug(\"Dropping {} since an SSL-level close is already scheduled\", x)\n+              case Tcp.Abort \u21d2 abort() // do we need to close anything in this case?\n+              case cmd       \u21d2 commandPL(cmd)\n+            }\n+            val eventPipeline: EPL = {\n+              case Tcp.Received(data) \u21d2\n+                if (tracing) log.debug(\"Received {} inbound bytes in waitingForAck\", data.size)\n+                enqueueInboundBytes(data)\n+                decrypt()\n+                if (isOutboundDone) become(finishingClose(closedEvent)) // else stay in this state\n+              case WriteChunkAck \u21d2\n+                if (tracing) log.debug(\"Received WriteChunkAck in waitingForAck\")\n+                if (encryptedBytesPending) sendEncryptedBytes()\n+                else {\n+                  if (bytesLeft(pendingOutboundBytes))\n+                    become(defaultState(remainingOutgoingData, closedEvent)) // we need to wait for incoming inbound data\n+                  else if (remainingOutgoingData.isEmpty)\n+                    startClosingOrReturnToDefaultState()\n+                  else {\n+                    if (tracing) log.debug(\"Finished sending write chunk\")\n+                    val WriteChunk(_, write) #:: tail = remainingOutgoingData\n+                    if (write.wantsAck) eventPL(write.ack)\n+                    if (tail.isEmpty) startClosingOrReturnToDefaultState()\n+                    else {\n+                      setPendingOutboundBytes(tail.head.buffer)\n+                      encrypt()\n+                      sendEncryptedBytes()\n+                      become(waitingForAck(tail, closedEvent))\n+                    }\n+                  }\n+                }\n+              case Tcp.PeerClosed          \u21d2 receivedUnexpectedPeerClosed()\n+              case x: Tcp.ErrorClosed      \u21d2 eventPL(x) // is there anything we need to close in this case?\n+              case x: Tcp.ConnectionClosed \u21d2 throw new IllegalStateException(\"Received \" + x + \" in waitingForAck\")\n+              case ev                      \u21d2 eventPL(ev)\n+            }\n+            def startClosingOrReturnToDefaultState(): Unit =\n+              closedEvent match {\n+                case Some(ev) \u21d2 startClosing(ev)\n+                case None     \u21d2 become(defaultState())\n+              }\n+          }\n \n-          case x @ (Tcp.Close | Tcp.ConfirmedClose) \u21d2\n-            originalCloseCommand = x.asInstanceOf[Tcp.CloseCommand]\n+          // SSLEngine is outbound done, ACK pending for SSL-level closing sequence bytes that were already sent\n+          // the inbound side might still be open, however we don't wait for the peer's closing bytes\n+          // but simply issue a ConfirmedClose to the TCP layer\n+          def finishingClose(closedEvent: Option[Tcp.ConnectionClosed] = None,\n+                             closeCommand: Tcp.CloseCommand = Tcp.ConfirmedClose): State = new State {\n+            if (tracing) log.debug(\"Transitioning to finishClose({}, {})\", closedEvent, closeCommand)\n+            commandPL(closeCommand)\n+            val commandPipeline: CPL = {\n+              case x: Tcp.WriteCommand                  \u21d2 failWrite(x, \"the SSL connection is already closing\")\n+              case x @ (Tcp.Close | Tcp.ConfirmedClose) \u21d2 log.debug(\"Dropping {} since the SSL connection is already closing\", x)\n+              case Tcp.Abort                            \u21d2 abort() // do we need to close anything in this case?\n+              case cmd                                  \u21d2 commandPL(cmd)\n+            }\n+            val eventPipeline: EPL = {\n+              case Tcp.Received(data) \u21d2\n+                if (tracing) log.debug(\"Received {} inbound bytes in closingInbound\", data.size)",
        "path": "spray-io/src/main/scala/spray/io/SslTlsSupport.scala",
        "position": null,
        "original_position": 163,
        "commit_id": "11d77364f8268aad5a8edcbd471dd317b927dc4a",
        "original_commit_id": "e87c78e5b0b8af6858c4159f790b5aa3a9a45178",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "`closingInbound` -> `finishingClose`\n",
        "created_at": "2013-10-18T10:56:13Z",
        "updated_at": "2013-10-18T13:51:57Z",
        "html_url": "https://github.com/spray/spray/pull/600#discussion_r7058793",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/600",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/7058793"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/600#discussion_r7058793"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/600"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/7081951",
        "pull_request_review_id": null,
        "id": 7081951,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwODE5NTE=",
        "diff_hunk": "@@ -21,8 +21,11 @@ import org.specs2.specification.{ SpecificationStructure, Fragments, Step }\n \n trait Specs2Interface extends TestFrameworkInterface with SpecificationStructure {\n \n-  def failTest(msg: String) = throw new FailureException(Failure(msg))",
        "path": "spray-testkit/src/main/scala/spray/testkit/Specs2Interface.scala",
        "position": 4,
        "original_position": 4,
        "commit_id": "1480e73f3ce40286b1a6e596ec693228ab4916ae",
        "original_commit_id": "1480e73f3ce40286b1a6e596ec693228ab4916ae",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ah, this is cool.\n",
        "created_at": "2013-10-20T09:52:29Z",
        "updated_at": "2013-10-20T09:52:29Z",
        "html_url": "https://github.com/spray/spray/pull/605#discussion_r7081951",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/605",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/7081951"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/605#discussion_r7081951"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/605"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/7254294",
        "pull_request_review_id": null,
        "id": 7254294,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcyNTQyOTQ=",
        "diff_hunk": "@@ -26,6 +26,7 @@ import MediaRanges._\n import HttpCharsets._\n import HttpEncodings._\n import HttpMethods._\n+import com.sun.tools.internal.xjc.ModelLoader",
        "path": "spray-http/src/test/scala/spray/http/HttpHeaderSpec.scala",
        "position": null,
        "original_position": 4,
        "commit_id": "443b0d898d3b2fc8cb00aba58fffd8dad7d32e90",
        "original_commit_id": "6aabef8e976d38dc1ddb3985e49568f447141146",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Tests failed, at least because of this.\n",
        "created_at": "2013-10-28T16:52:12Z",
        "updated_at": "2013-10-29T22:23:18Z",
        "html_url": "https://github.com/spray/spray/pull/644#discussion_r7254294",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/644",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/7254294"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/644#discussion_r7254294"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/644"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/7274325",
        "pull_request_review_id": null,
        "id": 7274325,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcyNzQzMjU=",
        "diff_hunk": "@@ -26,6 +26,7 @@ import MediaRanges._\n import HttpCharsets._\n import HttpEncodings._\n import HttpMethods._\n+import com.sun.tools.internal.xjc.ModelLoader",
        "path": "spray-http/src/test/scala/spray/http/HttpHeaderSpec.scala",
        "position": null,
        "original_position": 4,
        "commit_id": "443b0d898d3b2fc8cb00aba58fffd8dad7d32e90",
        "original_commit_id": "6aabef8e976d38dc1ddb3985e49568f447141146",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Well, yes, this is clearly a mis-import.\n",
        "created_at": "2013-10-29T09:28:07Z",
        "updated_at": "2013-10-29T22:23:18Z",
        "html_url": "https://github.com/spray/spray/pull/644#discussion_r7274325",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/644",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/7274325"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/644#discussion_r7274325"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/644"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/7283730",
        "pull_request_review_id": null,
        "id": 7283730,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcyODM3MzA=",
        "diff_hunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright \u00a9 2011-2013 the spray project <http://spray.io>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.http\n+\n+import java.net.{ UnknownHostException, InetAddress }\n+\n+sealed abstract class RemoteAddress extends ValueRenderable {\n+  def toOption: Option[InetAddress]\n+}\n+\n+object RemoteAddress {\n+  case object Unknown extends RemoteAddress {\n+    def toOption = None\n+    def render[R <: Rendering](r: R): r.type = r ~~ \"unknown\"\n+  }\n+\n+  case class IP(ip: InetAddress) extends RemoteAddress {\n+    def toOption: Option[InetAddress] = Some(ip)\n+    def render[R <: Rendering](r: R): r.type = r ~~ ip.getHostAddress\n+  }\n+\n+  def apply(s: String): RemoteAddress =\n+    try IP(InetAddress.getByName(s)) catch { case _: UnknownHostException \u21d2 Unknown }\n+\n+  def apply(a: InetAddress): IP = IP(a)\n+\n+  def apply(bytes: Array[Byte]): RemoteAddress = {\n+    require(bytes.length == 4 || bytes.length == 16)\n+    try IP(InetAddress.getByAddress(bytes)) catch { case _: UnknownHostException \u21d2 Unknown }",
        "path": "spray-http/src/main/scala/spray/http/RemoteAddress.scala",
        "position": 43,
        "original_position": 43,
        "commit_id": "443b0d898d3b2fc8cb00aba58fffd8dad7d32e90",
        "original_commit_id": "93ae402e4e198e03a347b28aea70ecbddc0cf449",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Can that exception happen? In the docs in says only \"if IP address is of illegal length\". But maybe it's better this way as we never know what else Java is hiding behind it...\n",
        "created_at": "2013-10-29T15:56:01Z",
        "updated_at": "2013-10-29T22:23:18Z",
        "html_url": "https://github.com/spray/spray/pull/644#discussion_r7283730",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/644",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/7283730"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/644#discussion_r7283730"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/644"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/7283790",
        "pull_request_review_id": null,
        "id": 7283790,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcyODM3OTA=",
        "diff_hunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright \u00a9 2011-2013 the spray project <http://spray.io>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.http\n+\n+import java.net.{ UnknownHostException, InetAddress }\n+\n+sealed abstract class RemoteAddress extends ValueRenderable {\n+  def toOption: Option[InetAddress]\n+}\n+\n+object RemoteAddress {\n+  case object Unknown extends RemoteAddress {\n+    def toOption = None\n+    def render[R <: Rendering](r: R): r.type = r ~~ \"unknown\"\n+  }\n+\n+  case class IP(ip: InetAddress) extends RemoteAddress {\n+    def toOption: Option[InetAddress] = Some(ip)\n+    def render[R <: Rendering](r: R): r.type = r ~~ ip.getHostAddress\n+  }\n+\n+  def apply(s: String): RemoteAddress =\n+    try IP(InetAddress.getByName(s)) catch { case _: UnknownHostException \u21d2 Unknown }\n+\n+  def apply(a: InetAddress): IP = IP(a)\n+\n+  def apply(bytes: Array[Byte]): RemoteAddress = {\n+    require(bytes.length == 4 || bytes.length == 16)\n+    try IP(InetAddress.getByAddress(bytes)) catch { case _: UnknownHostException \u21d2 Unknown }",
        "path": "spray-http/src/main/scala/spray/http/RemoteAddress.scala",
        "position": 43,
        "original_position": 43,
        "commit_id": "443b0d898d3b2fc8cb00aba58fffd8dad7d32e90",
        "original_commit_id": "93ae402e4e198e03a347b28aea70ecbddc0cf449",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I _shouldn't_ happen. But since we have two cases for `RemoteAddress` can as well catch it here.\n",
        "created_at": "2013-10-29T15:57:32Z",
        "updated_at": "2013-10-29T22:23:18Z",
        "html_url": "https://github.com/spray/spray/pull/644#discussion_r7283790",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/644",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/7283790"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/644#discussion_r7283790"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/644"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/7283983",
        "pull_request_review_id": null,
        "id": 7283983,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcyODM5ODM=",
        "diff_hunk": "@@ -292,9 +283,17 @@ class HttpHeaderSpec extends Specification {\n     \"X-Forwarded-For\" in {\n       \"X-Forwarded-For: 1.2.3.4\" =!= `X-Forwarded-For`(\"1.2.3.4\")\n       \"X-Forwarded-For: 234.123.5.6, 8.8.8.8\" =!= `X-Forwarded-For`(\"234.123.5.6\", \"8.8.8.8\")\n-      \"X-Forwarded-For: 1.2.3.4, unknown\" =!= `X-Forwarded-For`(Seq(Some(HttpIp(\"1.2.3.4\")), None))\n-      \"X-Forwarded-For: 0:0:0:0:0:0:0:1\" =!= `X-Forwarded-For`(\"::1\")\n+      \"X-Forwarded-For: 1.2.3.4, unknown\" =!= `X-Forwarded-For`(RemoteAddress(\"1.2.3.4\"), RemoteAddress.Unknown)\n       \"X-Forwarded-For: 192.0.2.43, 2001:db8:cafe:0:0:0:0:17\" =!= `X-Forwarded-For`(\"192.0.2.43\", \"2001:db8:cafe::17\")\n+      \"X-Forwarded-For: 1234:5678:9abc:def1:2345:6789:abcd:ef00\" =!= `X-Forwarded-For`(\"1234:5678:9abc:def1:2345:6789:abcd:ef00\")\n+      \"X-Forwarded-For: 1234:567:9a:d:2:67:abc:ef00\" =!= `X-Forwarded-For`(\"1234:567:9a:d:2:67:abc:ef00\")\n+      \"X-Forwarded-For: 1:2:3:4:5:6:7:8\" =!= `X-Forwarded-For`(\"1:2:3:4:5:6:7:8\")\n+      \"X-Forwarded-For: 0:0:0:0:0:0:0:1\" =!= `X-Forwarded-For`(\"0:0:0:0:0:0:0:1\")\n+      \"X-Forwarded-For: ::\" =!=> \"0:0:0:0:0:0:0:0\"\n+      \"X-Forwarded-For: 1::\" =!=> \"1:0:0:0:0:0:0:0\"\n+      \"X-Forwarded-For: ::1\" =!=> \"0:0:0:0:0:0:0:1\"\n+      \"X-Forwarded-For: 1::2\" =!=> \"1:0:0:0:0:0:0:2\"",
        "path": "spray-http/src/test/scala/spray/http/HttpHeaderSpec.scala",
        "position": null,
        "original_position": 150,
        "commit_id": "443b0d898d3b2fc8cb00aba58fffd8dad7d32e90",
        "original_commit_id": "93ae402e4e198e03a347b28aea70ecbddc0cf449",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I guess the parser could need even more simple tests with the `::` at different places.\n",
        "created_at": "2013-10-29T16:02:36Z",
        "updated_at": "2013-10-29T22:23:18Z",
        "html_url": "https://github.com/spray/spray/pull/644#discussion_r7283983",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/644",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/7283983"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/644#discussion_r7283983"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/644"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/7297057",
        "pull_request_review_id": null,
        "id": 7297057,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcyOTcwNTc=",
        "diff_hunk": "@@ -292,9 +283,17 @@ class HttpHeaderSpec extends Specification {\n     \"X-Forwarded-For\" in {\n       \"X-Forwarded-For: 1.2.3.4\" =!= `X-Forwarded-For`(\"1.2.3.4\")\n       \"X-Forwarded-For: 234.123.5.6, 8.8.8.8\" =!= `X-Forwarded-For`(\"234.123.5.6\", \"8.8.8.8\")\n-      \"X-Forwarded-For: 1.2.3.4, unknown\" =!= `X-Forwarded-For`(Seq(Some(HttpIp(\"1.2.3.4\")), None))\n-      \"X-Forwarded-For: 0:0:0:0:0:0:0:1\" =!= `X-Forwarded-For`(\"::1\")\n+      \"X-Forwarded-For: 1.2.3.4, unknown\" =!= `X-Forwarded-For`(RemoteAddress(\"1.2.3.4\"), RemoteAddress.Unknown)\n       \"X-Forwarded-For: 192.0.2.43, 2001:db8:cafe:0:0:0:0:17\" =!= `X-Forwarded-For`(\"192.0.2.43\", \"2001:db8:cafe::17\")\n+      \"X-Forwarded-For: 1234:5678:9abc:def1:2345:6789:abcd:ef00\" =!= `X-Forwarded-For`(\"1234:5678:9abc:def1:2345:6789:abcd:ef00\")\n+      \"X-Forwarded-For: 1234:567:9a:d:2:67:abc:ef00\" =!= `X-Forwarded-For`(\"1234:567:9a:d:2:67:abc:ef00\")\n+      \"X-Forwarded-For: 1:2:3:4:5:6:7:8\" =!= `X-Forwarded-For`(\"1:2:3:4:5:6:7:8\")\n+      \"X-Forwarded-For: 0:0:0:0:0:0:0:1\" =!= `X-Forwarded-For`(\"0:0:0:0:0:0:0:1\")\n+      \"X-Forwarded-For: ::\" =!=> \"0:0:0:0:0:0:0:0\"\n+      \"X-Forwarded-For: 1::\" =!=> \"1:0:0:0:0:0:0:0\"\n+      \"X-Forwarded-For: ::1\" =!=> \"0:0:0:0:0:0:0:1\"\n+      \"X-Forwarded-For: 1::2\" =!=> \"1:0:0:0:0:0:0:2\"",
        "path": "spray-http/src/test/scala/spray/http/HttpHeaderSpec.scala",
        "position": null,
        "original_position": 150,
        "commit_id": "443b0d898d3b2fc8cb00aba58fffd8dad7d32e90",
        "original_commit_id": "93ae402e4e198e03a347b28aea70ecbddc0cf449",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yes, fixed.\n",
        "created_at": "2013-10-29T22:24:04Z",
        "updated_at": "2013-10-29T22:24:04Z",
        "html_url": "https://github.com/spray/spray/pull/644#discussion_r7297057",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/644",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/7297057"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/644#discussion_r7297057"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/644"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/7305202",
        "pull_request_review_id": null,
        "id": 7305202,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDczMDUyMDI=",
        "diff_hunk": "@@ -106,38 +123,56 @@ object PathMatcher extends ImplicitPathMatcherConstruction {\n   }\n \n   implicit class PimpedPathMatcher[L <: HList](underlying: PathMatcher[L]) {\n-    def ?(implicit opt: PathMatcher.Optional[L]): PathMatcher[opt.Out] =\n-      new PathMatcher[opt.Out] { def apply(path: Path) = opt(path, underlying(path)) }\n+    def ?(implicit lift: PathMatcher.Lift[L, Option]): PathMatcher[lift.Out] =\n+      new PathMatcher[lift.Out] {\n+        def apply(path: Path) = underlying(path) match {\n+          case Matched(rest, extractions) \u21d2 Matched(rest, lift(extractions))\n+          case Unmatched                  \u21d2 Matched(path, lift())\n+        }\n+      }\n   }\n \n-  sealed trait Optional[L <: HList] {\n+  sealed trait Lift[L <: HList, M[+_]] {\n     type Out <: HList\n-    def apply(path: Path, matching: Matching[L]): Matching[Out]\n+    def apply(): Out\n+    def apply(value: L): Out\n+    def apply(value: L, more: Out): Out\n   }\n-  object Optional {\n-    implicit object OptionalHNil extends Optional[HNil] {\n+  object Lift {\n+    trait MOps[M[+_]] {\n+      def apply(): M[Nothing]\n+      def apply[T](value: T): M[T]\n+      def apply[T](value: T, more: M[T]): M[T]\n+    }\n+    object MOps {\n+      implicit object OptionMOps extends MOps[Option] {\n+        def apply(): Option[Nothing] = None\n+        def apply[T](value: T): Option[T] = Some(value)\n+        def apply[T](value: T, more: Option[T]): Option[T] = Some(value)\n+      }\n+      implicit object ListMOps extends MOps[List] {\n+        def apply(): List[Nothing] = Nil\n+        def apply[T](value: T): List[T] = value :: Nil\n+        def apply[T](value: T, more: List[T]): List[T] = value :: more\n+      }\n+    }\n+    implicit def liftHNil[M[+_]](implicit mops: MOps[M]) = new Lift[HNil, M] {",
        "path": "spray-routing/src/main/scala/spray/routing/PathMatcher.scala",
        "position": null,
        "original_position": 67,
        "commit_id": "8ee49d7c197e0c309376596beda22f60f015ae58",
        "original_commit_id": "ca44276ab2794d7385b730a0582a06a2132a5e99",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It seems the implicit isn't needed here.\n",
        "created_at": "2013-10-30T08:47:40Z",
        "updated_at": "2013-10-30T08:59:13Z",
        "html_url": "https://github.com/spray/spray/pull/650#discussion_r7305202",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/650",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/7305202"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/650#discussion_r7305202"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/650"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/7305243",
        "pull_request_review_id": null,
        "id": 7305243,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDczMDUyNDM=",
        "diff_hunk": "@@ -106,38 +123,56 @@ object PathMatcher extends ImplicitPathMatcherConstruction {\n   }\n \n   implicit class PimpedPathMatcher[L <: HList](underlying: PathMatcher[L]) {\n-    def ?(implicit opt: PathMatcher.Optional[L]): PathMatcher[opt.Out] =\n-      new PathMatcher[opt.Out] { def apply(path: Path) = opt(path, underlying(path)) }\n+    def ?(implicit lift: PathMatcher.Lift[L, Option]): PathMatcher[lift.Out] =\n+      new PathMatcher[lift.Out] {\n+        def apply(path: Path) = underlying(path) match {\n+          case Matched(rest, extractions) \u21d2 Matched(rest, lift(extractions))\n+          case Unmatched                  \u21d2 Matched(path, lift())\n+        }\n+      }\n   }\n \n-  sealed trait Optional[L <: HList] {\n+  sealed trait Lift[L <: HList, M[+_]] {\n     type Out <: HList\n-    def apply(path: Path, matching: Matching[L]): Matching[Out]\n+    def apply(): Out\n+    def apply(value: L): Out\n+    def apply(value: L, more: Out): Out\n   }\n-  object Optional {\n-    implicit object OptionalHNil extends Optional[HNil] {\n+  object Lift {\n+    trait MOps[M[+_]] {\n+      def apply(): M[Nothing]\n+      def apply[T](value: T): M[T]\n+      def apply[T](value: T, more: M[T]): M[T]\n+    }\n+    object MOps {\n+      implicit object OptionMOps extends MOps[Option] {\n+        def apply(): Option[Nothing] = None\n+        def apply[T](value: T): Option[T] = Some(value)\n+        def apply[T](value: T, more: Option[T]): Option[T] = Some(value)\n+      }\n+      implicit object ListMOps extends MOps[List] {\n+        def apply(): List[Nothing] = Nil\n+        def apply[T](value: T): List[T] = value :: Nil\n+        def apply[T](value: T, more: List[T]): List[T] = value :: more\n+      }\n+    }\n+    implicit def liftHNil[M[+_]](implicit mops: MOps[M]) = new Lift[HNil, M] {",
        "path": "spray-routing/src/main/scala/spray/routing/PathMatcher.scala",
        "position": null,
        "original_position": 67,
        "commit_id": "8ee49d7c197e0c309376596beda22f60f015ae58",
        "original_commit_id": "ca44276ab2794d7385b730a0582a06a2132a5e99",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "yes, well spotted\n",
        "created_at": "2013-10-30T08:49:35Z",
        "updated_at": "2013-10-30T08:59:13Z",
        "html_url": "https://github.com/spray/spray/pull/650#discussion_r7305243",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/650",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/7305243"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/650#discussion_r7305243"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/650"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/7305304",
        "pull_request_review_id": null,
        "id": 7305304,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDczMDUzMDQ=",
        "diff_hunk": "@@ -106,38 +123,56 @@ object PathMatcher extends ImplicitPathMatcherConstruction {\n   }\n \n   implicit class PimpedPathMatcher[L <: HList](underlying: PathMatcher[L]) {\n-    def ?(implicit opt: PathMatcher.Optional[L]): PathMatcher[opt.Out] =\n-      new PathMatcher[opt.Out] { def apply(path: Path) = opt(path, underlying(path)) }\n+    def ?(implicit lift: PathMatcher.Lift[L, Option]): PathMatcher[lift.Out] =\n+      new PathMatcher[lift.Out] {\n+        def apply(path: Path) = underlying(path) match {\n+          case Matched(rest, extractions) \u21d2 Matched(rest, lift(extractions))\n+          case Unmatched                  \u21d2 Matched(path, lift())\n+        }\n+      }\n   }\n \n-  sealed trait Optional[L <: HList] {\n+  sealed trait Lift[L <: HList, M[+_]] {",
        "path": "spray-routing/src/main/scala/spray/routing/PathMatcher.scala",
        "position": 40,
        "original_position": 40,
        "commit_id": "8ee49d7c197e0c309376596beda22f60f015ae58",
        "original_commit_id": "ca44276ab2794d7385b730a0582a06a2132a5e99",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The way we use it now, it seems to me as if there could be a simpler solution for `Lift`. Right now `M` is never dynamically determined, both uses are either fixed to `List` or `Option`. This means that for every **usage** of `?` or `repeat` the compiler has to do an implicit search for `MOps` which, in fact, could be avoided. I have no better solution for now but I feel there should be one :)\n",
        "created_at": "2013-10-30T08:52:12Z",
        "updated_at": "2013-10-30T08:59:13Z",
        "html_url": "https://github.com/spray/spray/pull/650#discussion_r7305304",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/650",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/7305304"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/650#discussion_r7305304"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/650"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/7305356",
        "pull_request_review_id": null,
        "id": 7305356,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDczMDUzNTY=",
        "diff_hunk": "@@ -106,38 +123,56 @@ object PathMatcher extends ImplicitPathMatcherConstruction {\n   }\n \n   implicit class PimpedPathMatcher[L <: HList](underlying: PathMatcher[L]) {\n-    def ?(implicit opt: PathMatcher.Optional[L]): PathMatcher[opt.Out] =\n-      new PathMatcher[opt.Out] { def apply(path: Path) = opt(path, underlying(path)) }\n+    def ?(implicit lift: PathMatcher.Lift[L, Option]): PathMatcher[lift.Out] =\n+      new PathMatcher[lift.Out] {\n+        def apply(path: Path) = underlying(path) match {\n+          case Matched(rest, extractions) \u21d2 Matched(rest, lift(extractions))\n+          case Unmatched                  \u21d2 Matched(path, lift())\n+        }\n+      }\n   }\n \n-  sealed trait Optional[L <: HList] {\n+  sealed trait Lift[L <: HList, M[+_]] {\n     type Out <: HList\n-    def apply(path: Path, matching: Matching[L]): Matching[Out]\n+    def apply(): Out\n+    def apply(value: L): Out\n+    def apply(value: L, more: Out): Out\n   }\n-  object Optional {\n-    implicit object OptionalHNil extends Optional[HNil] {\n+  object Lift {\n+    trait MOps[M[+_]] {\n+      def apply(): M[Nothing]\n+      def apply[T](value: T): M[T]\n+      def apply[T](value: T, more: M[T]): M[T]\n+    }\n+    object MOps {\n+      implicit object OptionMOps extends MOps[Option] {\n+        def apply(): Option[Nothing] = None\n+        def apply[T](value: T): Option[T] = Some(value)\n+        def apply[T](value: T, more: Option[T]): Option[T] = Some(value)\n+      }\n+      implicit object ListMOps extends MOps[List] {\n+        def apply(): List[Nothing] = Nil\n+        def apply[T](value: T): List[T] = value :: Nil\n+        def apply[T](value: T, more: List[T]): List[T] = value :: more\n+      }\n+    }\n+    implicit def liftHNil[M[+_]] = new Lift[HNil, M] {\n       type Out = HNil\n-      def apply(path: Path, matching: Matching[HNil]) =\n-        matching match {\n-          case x: Matched[_] \u21d2 x\n-          case _             \u21d2 Matched(path, HNil)\n-        }\n+      def apply() = HNil\n+      def apply(value: HNil) = value\n+      def apply(value: HNil, more: Out) = value\n     }\n-    implicit def optionalSingleElement[T] = new Optional[T :: HNil] {\n-      type Out = Option[T] :: HNil\n-      def apply(path: Path, matching: Matching[T :: HNil]): Matching[Out] =\n-        matching match {\n-          case Matched(rest, value) \u21d2 Matched(rest, Some(value.head) :: HNil)\n-          case _                    \u21d2 Matched(path, None :: HNil)\n-        }\n+    implicit def liftSingleElement[A, M[+_]](implicit mops: MOps[M]) = new Lift[A :: HNil, M] {\n+      type Out = M[A] :: HNil\n+      def apply() = mops() :: HNil\n+      def apply(value: A :: HNil) = mops(value.head) :: HNil\n+      def apply(value: A :: HNil, more: Out) = mops(value.head, more.head) :: HNil\n     }\n-    implicit def default[A, B, L <: HNil] = new Optional[A :: B :: L] {\n-      type Out = Option[A :: B :: L] :: HNil\n-      def apply(path: Path, matching: Matching[A :: B :: L]): Matching[Out] =\n-        matching match {\n-          case Matched(rest, values) \u21d2 Matched(rest, Some(values) :: HNil)\n-          case Unmatched             \u21d2 Matched(path, None :: HNil)\n-        }\n+    implicit def default[A, B, L <: HNil, M[+_]](implicit mops: MOps[M]) = new Lift[A :: B :: L, M] {",
        "path": "spray-routing/src/main/scala/spray/routing/PathMatcher.scala",
        "position": null,
        "original_position": 98,
        "commit_id": "8ee49d7c197e0c309376596beda22f60f015ae58",
        "original_commit_id": "7108946c7c8dc18ffa22c7efa2d7715147abd47f",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Shouldn't that be `L <: HList`?\n",
        "created_at": "2013-10-30T08:55:37Z",
        "updated_at": "2013-10-30T08:59:13Z",
        "html_url": "https://github.com/spray/spray/pull/650#discussion_r7305356",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/650",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/7305356"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/650#discussion_r7305356"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/650"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/7305385",
        "pull_request_review_id": null,
        "id": 7305385,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDczMDUzODU=",
        "diff_hunk": "@@ -106,38 +123,56 @@ object PathMatcher extends ImplicitPathMatcherConstruction {\n   }\n \n   implicit class PimpedPathMatcher[L <: HList](underlying: PathMatcher[L]) {\n-    def ?(implicit opt: PathMatcher.Optional[L]): PathMatcher[opt.Out] =\n-      new PathMatcher[opt.Out] { def apply(path: Path) = opt(path, underlying(path)) }\n+    def ?(implicit lift: PathMatcher.Lift[L, Option]): PathMatcher[lift.Out] =\n+      new PathMatcher[lift.Out] {\n+        def apply(path: Path) = underlying(path) match {\n+          case Matched(rest, extractions) \u21d2 Matched(rest, lift(extractions))\n+          case Unmatched                  \u21d2 Matched(path, lift())\n+        }\n+      }\n   }\n \n-  sealed trait Optional[L <: HList] {\n+  sealed trait Lift[L <: HList, M[+_]] {",
        "path": "spray-routing/src/main/scala/spray/routing/PathMatcher.scala",
        "position": 40,
        "original_position": 40,
        "commit_id": "8ee49d7c197e0c309376596beda22f60f015ae58",
        "original_commit_id": "ca44276ab2794d7385b730a0582a06a2132a5e99",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yes, however I'd deem usages of `?` and `repeat` not very frequent.\nOf course we could simply duplicate `Lift` and created two dedicated variants, one for `Option` and one for `List`.\nTo be honest, I wanted to try out higher-kinds once more... :)\n",
        "created_at": "2013-10-30T08:57:04Z",
        "updated_at": "2013-10-30T08:59:13Z",
        "html_url": "https://github.com/spray/spray/pull/650#discussion_r7305385",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/650",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/7305385"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/650#discussion_r7305385"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/650"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/7305395",
        "pull_request_review_id": null,
        "id": 7305395,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDczMDUzOTU=",
        "diff_hunk": "@@ -106,38 +123,56 @@ object PathMatcher extends ImplicitPathMatcherConstruction {\n   }\n \n   implicit class PimpedPathMatcher[L <: HList](underlying: PathMatcher[L]) {\n-    def ?(implicit opt: PathMatcher.Optional[L]): PathMatcher[opt.Out] =\n-      new PathMatcher[opt.Out] { def apply(path: Path) = opt(path, underlying(path)) }\n+    def ?(implicit lift: PathMatcher.Lift[L, Option]): PathMatcher[lift.Out] =\n+      new PathMatcher[lift.Out] {\n+        def apply(path: Path) = underlying(path) match {\n+          case Matched(rest, extractions) \u21d2 Matched(rest, lift(extractions))\n+          case Unmatched                  \u21d2 Matched(path, lift())\n+        }\n+      }\n   }\n \n-  sealed trait Optional[L <: HList] {\n+  sealed trait Lift[L <: HList, M[+_]] {\n     type Out <: HList\n-    def apply(path: Path, matching: Matching[L]): Matching[Out]\n+    def apply(): Out\n+    def apply(value: L): Out\n+    def apply(value: L, more: Out): Out\n   }\n-  object Optional {\n-    implicit object OptionalHNil extends Optional[HNil] {\n+  object Lift {\n+    trait MOps[M[+_]] {\n+      def apply(): M[Nothing]\n+      def apply[T](value: T): M[T]\n+      def apply[T](value: T, more: M[T]): M[T]\n+    }\n+    object MOps {\n+      implicit object OptionMOps extends MOps[Option] {\n+        def apply(): Option[Nothing] = None\n+        def apply[T](value: T): Option[T] = Some(value)\n+        def apply[T](value: T, more: Option[T]): Option[T] = Some(value)\n+      }\n+      implicit object ListMOps extends MOps[List] {\n+        def apply(): List[Nothing] = Nil\n+        def apply[T](value: T): List[T] = value :: Nil\n+        def apply[T](value: T, more: List[T]): List[T] = value :: more\n+      }\n+    }\n+    implicit def liftHNil[M[+_]] = new Lift[HNil, M] {\n       type Out = HNil\n-      def apply(path: Path, matching: Matching[HNil]) =\n-        matching match {\n-          case x: Matched[_] \u21d2 x\n-          case _             \u21d2 Matched(path, HNil)\n-        }\n+      def apply() = HNil\n+      def apply(value: HNil) = value\n+      def apply(value: HNil, more: Out) = value\n     }\n-    implicit def optionalSingleElement[T] = new Optional[T :: HNil] {\n-      type Out = Option[T] :: HNil\n-      def apply(path: Path, matching: Matching[T :: HNil]): Matching[Out] =\n-        matching match {\n-          case Matched(rest, value) \u21d2 Matched(rest, Some(value.head) :: HNil)\n-          case _                    \u21d2 Matched(path, None :: HNil)\n-        }\n+    implicit def liftSingleElement[A, M[+_]](implicit mops: MOps[M]) = new Lift[A :: HNil, M] {\n+      type Out = M[A] :: HNil\n+      def apply() = mops() :: HNil\n+      def apply(value: A :: HNil) = mops(value.head) :: HNil\n+      def apply(value: A :: HNil, more: Out) = mops(value.head, more.head) :: HNil\n     }\n-    implicit def default[A, B, L <: HNil] = new Optional[A :: B :: L] {\n-      type Out = Option[A :: B :: L] :: HNil\n-      def apply(path: Path, matching: Matching[A :: B :: L]): Matching[Out] =\n-        matching match {\n-          case Matched(rest, values) \u21d2 Matched(rest, Some(values) :: HNil)\n-          case Unmatched             \u21d2 Matched(path, None :: HNil)\n-        }\n+    implicit def default[A, B, L <: HNil, M[+_]](implicit mops: MOps[M]) = new Lift[A :: B :: L, M] {",
        "path": "spray-routing/src/main/scala/spray/routing/PathMatcher.scala",
        "position": null,
        "original_position": 98,
        "commit_id": "8ee49d7c197e0c309376596beda22f60f015ae58",
        "original_commit_id": "7108946c7c8dc18ffa22c7efa2d7715147abd47f",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yes, absolutely!\nThanks for the catch!\n",
        "created_at": "2013-10-30T08:57:42Z",
        "updated_at": "2013-10-30T08:59:13Z",
        "html_url": "https://github.com/spray/spray/pull/650#discussion_r7305395",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/650",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/7305395"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/650#discussion_r7305395"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/650"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/7305430",
        "pull_request_review_id": null,
        "id": 7305430,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDczMDU0MzA=",
        "diff_hunk": "@@ -106,38 +123,56 @@ object PathMatcher extends ImplicitPathMatcherConstruction {\n   }\n \n   implicit class PimpedPathMatcher[L <: HList](underlying: PathMatcher[L]) {\n-    def ?(implicit opt: PathMatcher.Optional[L]): PathMatcher[opt.Out] =\n-      new PathMatcher[opt.Out] { def apply(path: Path) = opt(path, underlying(path)) }\n+    def ?(implicit lift: PathMatcher.Lift[L, Option]): PathMatcher[lift.Out] =\n+      new PathMatcher[lift.Out] {\n+        def apply(path: Path) = underlying(path) match {\n+          case Matched(rest, extractions) \u21d2 Matched(rest, lift(extractions))\n+          case Unmatched                  \u21d2 Matched(path, lift())\n+        }\n+      }\n   }\n \n-  sealed trait Optional[L <: HList] {\n+  sealed trait Lift[L <: HList, M[+_]] {\n     type Out <: HList\n-    def apply(path: Path, matching: Matching[L]): Matching[Out]\n+    def apply(): Out\n+    def apply(value: L): Out\n+    def apply(value: L, more: Out): Out\n   }\n-  object Optional {\n-    implicit object OptionalHNil extends Optional[HNil] {\n+  object Lift {\n+    trait MOps[M[+_]] {\n+      def apply(): M[Nothing]\n+      def apply[T](value: T): M[T]\n+      def apply[T](value: T, more: M[T]): M[T]\n+    }\n+    object MOps {\n+      implicit object OptionMOps extends MOps[Option] {\n+        def apply(): Option[Nothing] = None\n+        def apply[T](value: T): Option[T] = Some(value)\n+        def apply[T](value: T, more: Option[T]): Option[T] = Some(value)\n+      }\n+      implicit object ListMOps extends MOps[List] {\n+        def apply(): List[Nothing] = Nil\n+        def apply[T](value: T): List[T] = value :: Nil\n+        def apply[T](value: T, more: List[T]): List[T] = value :: more\n+      }\n+    }\n+    implicit def liftHNil[M[+_]] = new Lift[HNil, M] {\n       type Out = HNil\n-      def apply(path: Path, matching: Matching[HNil]) =\n-        matching match {\n-          case x: Matched[_] \u21d2 x\n-          case _             \u21d2 Matched(path, HNil)\n-        }\n+      def apply() = HNil\n+      def apply(value: HNil) = value\n+      def apply(value: HNil, more: Out) = value\n     }\n-    implicit def optionalSingleElement[T] = new Optional[T :: HNil] {\n-      type Out = Option[T] :: HNil\n-      def apply(path: Path, matching: Matching[T :: HNil]): Matching[Out] =\n-        matching match {\n-          case Matched(rest, value) \u21d2 Matched(rest, Some(value.head) :: HNil)\n-          case _                    \u21d2 Matched(path, None :: HNil)\n-        }\n+    implicit def liftSingleElement[A, M[+_]](implicit mops: MOps[M]) = new Lift[A :: HNil, M] {\n+      type Out = M[A] :: HNil\n+      def apply() = mops() :: HNil\n+      def apply(value: A :: HNil) = mops(value.head) :: HNil\n+      def apply(value: A :: HNil, more: Out) = mops(value.head, more.head) :: HNil\n     }\n-    implicit def default[A, B, L <: HNil] = new Optional[A :: B :: L] {\n-      type Out = Option[A :: B :: L] :: HNil\n-      def apply(path: Path, matching: Matching[A :: B :: L]): Matching[Out] =\n-        matching match {\n-          case Matched(rest, values) \u21d2 Matched(rest, Some(values) :: HNil)\n-          case Unmatched             \u21d2 Matched(path, None :: HNil)\n-        }\n+    implicit def default[A, B, L <: HNil, M[+_]](implicit mops: MOps[M]) = new Lift[A :: B :: L, M] {",
        "path": "spray-routing/src/main/scala/spray/routing/PathMatcher.scala",
        "position": null,
        "original_position": 98,
        "commit_id": "8ee49d7c197e0c309376596beda22f60f015ae58",
        "original_commit_id": "7108946c7c8dc18ffa22c7efa2d7715147abd47f",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Fixed.\n",
        "created_at": "2013-10-30T08:59:19Z",
        "updated_at": "2013-10-30T08:59:19Z",
        "html_url": "https://github.com/spray/spray/pull/650#discussion_r7305430",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/650",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/7305430"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/650#discussion_r7305430"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/650"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/7388930",
        "pull_request_review_id": null,
        "id": 7388930,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDczODg5MzA=",
        "diff_hunk": "@@ -32,7 +32,7 @@ import util.pimps._\n \n package object util {\n \n-  val EOL = System.getProperty(\"line.separator\")\n+  val EOL = \"\\n\"",
        "path": "spray-util/src/main/scala/spray/util/package.scala",
        "position": 5,
        "original_position": 5,
        "commit_id": "486c3e64d7c3930d269f30a42fc8ff84de979329",
        "original_commit_id": "486c3e64d7c3930d269f30a42fc8ff84de979329",
        "user": {
            "login": "markvandertol",
            "id": 2835719,
            "node_id": "MDQ6VXNlcjI4MzU3MTk=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/2835719?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/markvandertol",
            "html_url": "https://github.com/markvandertol",
            "followers_url": "https://api.github.com/users/markvandertol/followers",
            "following_url": "https://api.github.com/users/markvandertol/following{/other_user}",
            "gists_url": "https://api.github.com/users/markvandertol/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/markvandertol/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/markvandertol/subscriptions",
            "organizations_url": "https://api.github.com/users/markvandertol/orgs",
            "repos_url": "https://api.github.com/users/markvandertol/repos",
            "events_url": "https://api.github.com/users/markvandertol/events{/privacy}",
            "received_events_url": "https://api.github.com/users/markvandertol/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This val is only used from tests, however it is part of the public API. Maybe it is better to remove usages of this from tests and don't make a breaking change?\n",
        "created_at": "2013-11-02T22:02:53Z",
        "updated_at": "2013-11-02T22:02:53Z",
        "html_url": "https://github.com/spray/spray/pull/663#discussion_r7388930",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/663",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/7388930"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/663#discussion_r7388930"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/663"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/7562071",
        "pull_request_review_id": null,
        "id": 7562071,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc1NjIwNzE=",
        "diff_hunk": "@@ -46,7 +46,11 @@ private[parser] trait AuthorizationHeader {\n   }\n \n   def OAuth2BearerTokenDef = rule {\n-    ignoreCase(\"Bearer \") ~ Token ~~> (OAuth2BearerToken(_))\n+    ignoreCase(\"Bearer \") ~ B64token ~> OAuth2BearerToken",
        "path": "spray-http/src/main/scala/spray/http/parser/AuthorizationHeader.scala",
        "position": null,
        "original_position": 5,
        "commit_id": "398011ee62a3a9026c967d594ef0875d7973953e",
        "original_commit_id": "27471bbbb6ec4fda4eb8337a5652b40064783cdb",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Do we match enough white-space here? In the specs its `1*SP`.\n",
        "created_at": "2013-11-11T15:32:32Z",
        "updated_at": "2013-11-11T16:33:28Z",
        "html_url": "https://github.com/spray/spray/pull/678#discussion_r7562071",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/678",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/7562071"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/678#discussion_r7562071"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/678"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/7564349",
        "pull_request_review_id": null,
        "id": 7564349,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc1NjQzNDk=",
        "diff_hunk": "@@ -46,7 +46,11 @@ private[parser] trait AuthorizationHeader {\n   }\n \n   def OAuth2BearerTokenDef = rule {\n-    ignoreCase(\"Bearer \") ~ Token ~~> (OAuth2BearerToken(_))\n+    ignoreCase(\"Bearer \") ~ B64token ~> OAuth2BearerToken",
        "path": "spray-http/src/main/scala/spray/http/parser/AuthorizationHeader.scala",
        "position": null,
        "original_position": 5,
        "commit_id": "398011ee62a3a9026c967d594ef0875d7973953e",
        "original_commit_id": "27471bbbb6ec4fda4eb8337a5652b40064783cdb",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "True that. Fixed.\n",
        "created_at": "2013-11-11T16:33:42Z",
        "updated_at": "2013-11-11T16:33:42Z",
        "html_url": "https://github.com/spray/spray/pull/678#discussion_r7564349",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/678",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/7564349"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/678#discussion_r7564349"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/678"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/7626351",
        "pull_request_review_id": null,
        "id": 7626351,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc2MjYzNTE=",
        "diff_hunk": "@@ -17,15 +17,39 @@\n package spray.http\n \n sealed abstract class HttpEncodingRange extends Renderable {\n+  type Self <: HttpEncodingRange\n+  def value: String",
        "path": "spray-http/src/main/scala/spray/http/HttpEncoding.scala",
        "position": null,
        "original_position": 5,
        "commit_id": "470ce81aa485cdb7bdbfc2e942ef6593174db6f1",
        "original_commit_id": "589648d50f754f3243b0abf3a1aa21b08a63145b",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Do we really need `value`?\n",
        "created_at": "2013-11-13T14:14:43Z",
        "updated_at": "2013-11-13T19:29:16Z",
        "html_url": "https://github.com/spray/spray/pull/686#discussion_r7626351",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/686",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/7626351"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/686#discussion_r7626351"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/686"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/7626353",
        "pull_request_review_id": null,
        "id": 7626353,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc2MjYzNTM=",
        "diff_hunk": "@@ -17,15 +17,39 @@\n package spray.http\n \n sealed abstract class HttpEncodingRange extends Renderable {\n+  type Self <: HttpEncodingRange\n+  def value: String\n+  def qValue: Float\n   def matches(encoding: HttpEncoding): Boolean\n+\n+  /**\n+   * Returns a copy of this instance with the `qValue` member updated.\n+   */\n+  def withQValue(qValue: Double): Self",
        "path": "spray-http/src/main/scala/spray/http/HttpEncoding.scala",
        "position": null,
        "original_position": 12,
        "commit_id": "470ce81aa485cdb7bdbfc2e942ef6593174db6f1",
        "original_commit_id": "589648d50f754f3243b0abf3a1aa21b08a63145b",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Why a Double here?\n",
        "created_at": "2013-11-13T14:14:45Z",
        "updated_at": "2013-11-13T19:29:16Z",
        "html_url": "https://github.com/spray/spray/pull/686#discussion_r7626353",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/686",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/7626353"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/686#discussion_r7626353"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/686"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/7626367",
        "pull_request_review_id": null,
        "id": 7626367,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc2MjYzNjc=",
        "diff_hunk": "@@ -17,15 +17,39 @@\n package spray.http\n \n sealed abstract class HttpEncodingRange extends Renderable {\n+  type Self <: HttpEncodingRange\n+  def value: String\n+  def qValue: Float\n   def matches(encoding: HttpEncoding): Boolean\n+\n+  /**\n+   * Returns a copy of this instance with the `qValue` member updated.\n+   */\n+  def withQValue(qValue: Double): Self\n+}\n+\n+object HttpEncodingRange {\n+  case class custom(qValue: Float) extends HttpEncodingRange with ValueRenderable {",
        "path": "spray-http/src/main/scala/spray/http/HttpEncoding.scala",
        "position": null,
        "original_position": 16,
        "commit_id": "470ce81aa485cdb7bdbfc2e942ef6593174db6f1",
        "original_commit_id": "589648d50f754f3243b0abf3a1aa21b08a63145b",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Why is it called `custom`? Shouldn't it be something like `AnyEncoding`?\n",
        "created_at": "2013-11-13T14:15:17Z",
        "updated_at": "2013-11-13T19:29:16Z",
        "html_url": "https://github.com/spray/spray/pull/686#discussion_r7626367",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/686",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/7626367"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/686#discussion_r7626367"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/686"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/7626382",
        "pull_request_review_id": null,
        "id": 7626382,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc2MjYzODI=",
        "diff_hunk": "@@ -17,15 +17,39 @@\n package spray.http\n \n sealed abstract class HttpEncodingRange extends Renderable {\n+  type Self <: HttpEncodingRange\n+  def value: String\n+  def qValue: Float\n   def matches(encoding: HttpEncoding): Boolean\n+\n+  /**\n+   * Returns a copy of this instance with the `qValue` member updated.\n+   */\n+  def withQValue(qValue: Double): Self\n+}\n+\n+object HttpEncodingRange {\n+  case class custom(qValue: Float) extends HttpEncodingRange with ValueRenderable {\n+    type Self = HttpEncodingRange\n+    def render[R <: Rendering](r: R): r.type = if (qValue < 1.0f) r ~~ \"*;q=\" ~~ qValue else r ~~ '*'\n+    def matches(encoding: HttpEncoding) = true\n+    def withQValue(qValue: Double) = if (qValue != this.qValue) custom(qValue.toFloat) else this\n+  }\n }\n \n-case class HttpEncoding private[http] (value: String) extends HttpEncodingRange with LazyValueBytesRenderable {\n-  def matches(encoding: HttpEncoding) = this == encoding\n+case class HttpEncoding private[http] (value: String)(val name: String, val qValue: Float)",
        "path": "spray-http/src/main/scala/spray/http/HttpEncoding.scala",
        "position": null,
        "original_position": 26,
        "commit_id": "470ce81aa485cdb7bdbfc2e942ef6593174db6f1",
        "original_commit_id": "589648d50f754f3243b0abf3a1aa21b08a63145b",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Couldn't this just be `case class HttpEncoding private[http] (name: String)` and then implement `def value`?\n",
        "created_at": "2013-11-13T14:15:54Z",
        "updated_at": "2013-11-13T19:29:16Z",
        "html_url": "https://github.com/spray/spray/pull/686#discussion_r7626382",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/686",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/7626382"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/686#discussion_r7626382"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/686"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/7626416",
        "pull_request_review_id": null,
        "id": 7626416,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc2MjY0MTY=",
        "diff_hunk": "@@ -34,11 +58,9 @@ object HttpEncodings extends ObjectRegistry[String, HttpEncoding] {\n   def register(encoding: HttpEncoding): HttpEncoding =\n     register(encoding.value.toLowerCase, encoding)\n \n-  case object `*` extends HttpEncodingRange with SingletonValueRenderable {\n-    def matches(encoding: HttpEncoding) = true\n-  }\n+  val `*`: HttpEncodingRange = HttpEncodingRange.custom(1.0f)",
        "path": "spray-http/src/main/scala/spray/http/HttpEncoding.scala",
        "position": null,
        "original_position": 50,
        "commit_id": "470ce81aa485cdb7bdbfc2e942ef6593174db6f1",
        "original_commit_id": "589648d50f754f3243b0abf3a1aa21b08a63145b",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This seems to belong to the `HttpEncodingRange` object.\n",
        "created_at": "2013-11-13T14:16:57Z",
        "updated_at": "2013-11-13T19:29:16Z",
        "html_url": "https://github.com/spray/spray/pull/686#discussion_r7626416",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/686",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/7626416"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/686#discussion_r7626416"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/686"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/7626441",
        "pull_request_review_id": null,
        "id": 7626441,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc2MjY0NDE=",
        "diff_hunk": "@@ -17,15 +17,39 @@\n package spray.http\n \n sealed abstract class HttpEncodingRange extends Renderable {\n+  type Self <: HttpEncodingRange\n+  def value: String\n+  def qValue: Float\n   def matches(encoding: HttpEncoding): Boolean\n+\n+  /**\n+   * Returns a copy of this instance with the `qValue` member updated.\n+   */\n+  def withQValue(qValue: Double): Self\n+}\n+\n+object HttpEncodingRange {\n+  case class custom(qValue: Float) extends HttpEncodingRange with ValueRenderable {\n+    type Self = HttpEncodingRange\n+    def render[R <: Rendering](r: R): r.type = if (qValue < 1.0f) r ~~ \"*;q=\" ~~ qValue else r ~~ '*'\n+    def matches(encoding: HttpEncoding) = true\n+    def withQValue(qValue: Double) = if (qValue != this.qValue) custom(qValue.toFloat) else this\n+  }\n }\n \n-case class HttpEncoding private[http] (value: String) extends HttpEncodingRange with LazyValueBytesRenderable {\n-  def matches(encoding: HttpEncoding) = this == encoding\n+case class HttpEncoding private[http] (value: String)(val name: String, val qValue: Float)\n+    extends HttpEncodingRange with LazyValueBytesRenderable {\n+  type Self = HttpEncoding\n+  def withQValue(qValue: Double) = if (qValue != this.qValue) HttpEncoding.custom(name, qValue) else this\n+  def matches(encoding: HttpEncoding) = name.equalsIgnoreCase(encoding.name)\n }\n \n object HttpEncoding {\n-  def custom(value: String): HttpEncoding = apply(value)",
        "path": "spray-http/src/main/scala/spray/http/HttpEncoding.scala",
        "position": null,
        "original_position": 34,
        "commit_id": "470ce81aa485cdb7bdbfc2e942ef6593174db6f1",
        "original_commit_id": "589648d50f754f3243b0abf3a1aa21b08a63145b",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Can't we make the constructor public now and remove this method altogether?\n",
        "created_at": "2013-11-13T14:17:44Z",
        "updated_at": "2013-11-13T19:29:16Z",
        "html_url": "https://github.com/spray/spray/pull/686#discussion_r7626441",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/686",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/7626441"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/686#discussion_r7626441"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/686"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/7629400",
        "pull_request_review_id": null,
        "id": 7629400,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc2Mjk0MDA=",
        "diff_hunk": "@@ -183,53 +183,79 @@ case class HttpRequest(method: HttpMethod = HttpMethods.GET,\n       range \u2190 mediaRanges\n     } yield range).sortBy(-_.qValue)\n \n-  def acceptedCharsetRanges: List[HttpCharsetRange] = {\n-    // TODO: sort by preference\n-    for (`Accept-Charset`(charsetRanges) \u2190 headers; range \u2190 charsetRanges) yield range\n-  }\n+  def acceptedCharsetRanges: List[HttpCharsetRange] =\n+    (for {\n+      `Accept-Charset`(charsetRanges) \u2190 headers\n+      range \u2190 charsetRanges\n+    } yield range).sortBy(-_.qValue)\n \n-  def acceptedEncodingRanges: List[HttpEncodingRange] = {\n-    // TODO: sort by preference\n-    for (`Accept-Encoding`(encodingRanges) \u2190 headers; range \u2190 encodingRanges) yield range\n-  }\n+  def acceptedEncodingRanges: List[HttpEncodingRange] =\n+    (for {\n+      `Accept-Encoding`(encodingRanges) \u2190 headers\n+      range \u2190 encodingRanges\n+    } yield range).sortBy(-_.qValue)\n \n   def cookies: List[HttpCookie] = for (`Cookie`(cookies) \u2190 headers; cookie \u2190 cookies) yield cookie\n \n   /**\n    * Determines whether the given media-type is accepted by the client.\n    */\n-  def isMediaTypeAccepted(mediaType: MediaType) = {\n-    // according to the HTTP spec a client has to accept all mime types if no Accept header is sent with the request\n-    // http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1\n-    val ranges = acceptedMediaRanges\n-    ranges.isEmpty || ranges.exists(r \u21d2 isMediaTypeMatched(r, mediaType))\n-  }\n+  def isMediaTypeAccepted(mediaType: MediaType, ranges: List[MediaRange] = acceptedMediaRanges): Boolean =\n+    qValueForMediaType(mediaType, ranges) > 0f\n \n-  private def isMediaTypeMatched(mediaRange: MediaRange, mediaType: MediaType) =\n-    // according to the HTTP spec a media range with a q-Value of 0 is not acceptable for the client\n-    // http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.9\n-    mediaRange.qValue > 0.0f && mediaRange.matches(mediaType)\n+  /**\n+   * Returns the q-value that the client (implicitly or explicitly) attaches to the given media-type.\n+   */\n+  def qValueForMediaType(mediaType: MediaType, ranges: List[MediaRange] = acceptedMediaRanges): Float =\n+    ranges match {\n+      case Nil \u21d2 1.0f // http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1\n+      case x \u21d2\n+        @tailrec def rec(r: List[MediaRange] = x): Float = r match {",
        "path": "spray-http/src/main/scala/spray/http/HttpMessage.scala",
        "position": 49,
        "original_position": 49,
        "commit_id": "470ce81aa485cdb7bdbfc2e942ef6593174db6f1",
        "original_commit_id": "589648d50f754f3243b0abf3a1aa21b08a63145b",
        "user": {
            "login": "ryanlecompte",
            "id": 637158,
            "node_id": "MDQ6VXNlcjYzNzE1OA==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/637158?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ryanlecompte",
            "html_url": "https://github.com/ryanlecompte",
            "followers_url": "https://api.github.com/users/ryanlecompte/followers",
            "following_url": "https://api.github.com/users/ryanlecompte/following{/other_user}",
            "gists_url": "https://api.github.com/users/ryanlecompte/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ryanlecompte/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ryanlecompte/subscriptions",
            "organizations_url": "https://api.github.com/users/ryanlecompte/orgs",
            "repos_url": "https://api.github.com/users/ryanlecompte/repos",
            "events_url": "https://api.github.com/users/ryanlecompte/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ryanlecompte/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Maybe this version was implemented for performance reasons, but this could also just be: \n\n``` scala\nr.collectFirst { case x if x.matches(mediaType) => x.qValue }.getOrElse(0F)\n```\n",
        "created_at": "2013-11-13T15:40:45Z",
        "updated_at": "2013-11-13T19:29:16Z",
        "html_url": "https://github.com/spray/spray/pull/686#discussion_r7629400",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/686",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/7629400"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/686#discussion_r7629400"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/686"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/7631938",
        "pull_request_review_id": null,
        "id": 7631938,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc2MzE5Mzg=",
        "diff_hunk": "@@ -183,53 +183,79 @@ case class HttpRequest(method: HttpMethod = HttpMethods.GET,\n       range \u2190 mediaRanges\n     } yield range).sortBy(-_.qValue)\n \n-  def acceptedCharsetRanges: List[HttpCharsetRange] = {\n-    // TODO: sort by preference\n-    for (`Accept-Charset`(charsetRanges) \u2190 headers; range \u2190 charsetRanges) yield range\n-  }\n+  def acceptedCharsetRanges: List[HttpCharsetRange] =\n+    (for {\n+      `Accept-Charset`(charsetRanges) \u2190 headers\n+      range \u2190 charsetRanges\n+    } yield range).sortBy(-_.qValue)\n \n-  def acceptedEncodingRanges: List[HttpEncodingRange] = {\n-    // TODO: sort by preference\n-    for (`Accept-Encoding`(encodingRanges) \u2190 headers; range \u2190 encodingRanges) yield range\n-  }\n+  def acceptedEncodingRanges: List[HttpEncodingRange] =\n+    (for {\n+      `Accept-Encoding`(encodingRanges) \u2190 headers\n+      range \u2190 encodingRanges\n+    } yield range).sortBy(-_.qValue)\n \n   def cookies: List[HttpCookie] = for (`Cookie`(cookies) \u2190 headers; cookie \u2190 cookies) yield cookie\n \n   /**\n    * Determines whether the given media-type is accepted by the client.\n    */\n-  def isMediaTypeAccepted(mediaType: MediaType) = {\n-    // according to the HTTP spec a client has to accept all mime types if no Accept header is sent with the request\n-    // http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1\n-    val ranges = acceptedMediaRanges\n-    ranges.isEmpty || ranges.exists(r \u21d2 isMediaTypeMatched(r, mediaType))\n-  }\n+  def isMediaTypeAccepted(mediaType: MediaType, ranges: List[MediaRange] = acceptedMediaRanges): Boolean =\n+    qValueForMediaType(mediaType, ranges) > 0f\n \n-  private def isMediaTypeMatched(mediaRange: MediaRange, mediaType: MediaType) =\n-    // according to the HTTP spec a media range with a q-Value of 0 is not acceptable for the client\n-    // http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.9\n-    mediaRange.qValue > 0.0f && mediaRange.matches(mediaType)\n+  /**\n+   * Returns the q-value that the client (implicitly or explicitly) attaches to the given media-type.\n+   */\n+  def qValueForMediaType(mediaType: MediaType, ranges: List[MediaRange] = acceptedMediaRanges): Float =\n+    ranges match {\n+      case Nil \u21d2 1.0f // http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1\n+      case x \u21d2\n+        @tailrec def rec(r: List[MediaRange] = x): Float = r match {",
        "path": "spray-http/src/main/scala/spray/http/HttpMessage.scala",
        "position": 49,
        "original_position": 49,
        "commit_id": "470ce81aa485cdb7bdbfc2e942ef6593174db6f1",
        "original_commit_id": "589648d50f754f3243b0abf3a1aa21b08a63145b",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yes, the @tailrec is quite a bit faster (no extra allocations).\n",
        "created_at": "2013-11-13T16:45:51Z",
        "updated_at": "2013-11-13T19:29:16Z",
        "html_url": "https://github.com/spray/spray/pull/686#discussion_r7631938",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/686",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/7631938"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/686#discussion_r7631938"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/686"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/7632079",
        "pull_request_review_id": null,
        "id": 7632079,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc2MzIwNzk=",
        "diff_hunk": "@@ -11,38 +11,34 @@\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * limitations under the License.       `",
        "path": "spray-http/src/main/scala/spray/http/ContentType.scala",
        "position": null,
        "original_position": 5,
        "commit_id": "470ce81aa485cdb7bdbfc2e942ef6593174db6f1",
        "original_commit_id": "e2465a600e08210f2ef55a40faadeae2386d81cb",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Unintended edit.\n",
        "created_at": "2013-11-13T16:49:33Z",
        "updated_at": "2013-11-13T19:29:16Z",
        "html_url": "https://github.com/spray/spray/pull/686#discussion_r7632079",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/686",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/7632079"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/686#discussion_r7632079"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/686"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/7632285",
        "pull_request_review_id": null,
        "id": 7632285,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc2MzIyODU=",
        "diff_hunk": "@@ -183,53 +183,79 @@ case class HttpRequest(method: HttpMethod = HttpMethods.GET,\n       range \u2190 mediaRanges\n     } yield range).sortBy(-_.qValue)\n \n-  def acceptedCharsetRanges: List[HttpCharsetRange] = {\n-    // TODO: sort by preference\n-    for (`Accept-Charset`(charsetRanges) \u2190 headers; range \u2190 charsetRanges) yield range\n-  }\n+  def acceptedCharsetRanges: List[HttpCharsetRange] =\n+    (for {\n+      `Accept-Charset`(charsetRanges) \u2190 headers\n+      range \u2190 charsetRanges\n+    } yield range).sortBy(-_.qValue)\n \n-  def acceptedEncodingRanges: List[HttpEncodingRange] = {\n-    // TODO: sort by preference\n-    for (`Accept-Encoding`(encodingRanges) \u2190 headers; range \u2190 encodingRanges) yield range\n-  }\n+  def acceptedEncodingRanges: List[HttpEncodingRange] =\n+    (for {\n+      `Accept-Encoding`(encodingRanges) \u2190 headers\n+      range \u2190 encodingRanges\n+    } yield range).sortBy(-_.qValue)\n \n   def cookies: List[HttpCookie] = for (`Cookie`(cookies) \u2190 headers; cookie \u2190 cookies) yield cookie\n \n   /**\n    * Determines whether the given media-type is accepted by the client.\n    */\n-  def isMediaTypeAccepted(mediaType: MediaType) = {\n-    // according to the HTTP spec a client has to accept all mime types if no Accept header is sent with the request\n-    // http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1\n-    val ranges = acceptedMediaRanges\n-    ranges.isEmpty || ranges.exists(r \u21d2 isMediaTypeMatched(r, mediaType))\n-  }\n+  def isMediaTypeAccepted(mediaType: MediaType, ranges: List[MediaRange] = acceptedMediaRanges): Boolean =\n+    qValueForMediaType(mediaType, ranges) > 0f\n \n-  private def isMediaTypeMatched(mediaRange: MediaRange, mediaType: MediaType) =\n-    // according to the HTTP spec a media range with a q-Value of 0 is not acceptable for the client\n-    // http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.9\n-    mediaRange.qValue > 0.0f && mediaRange.matches(mediaType)\n+  /**\n+   * Returns the q-value that the client (implicitly or explicitly) attaches to the given media-type.\n+   */\n+  def qValueForMediaType(mediaType: MediaType, ranges: List[MediaRange] = acceptedMediaRanges): Float =\n+    ranges match {\n+      case Nil \u21d2 1.0f // http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1\n+      case x \u21d2\n+        @tailrec def rec(r: List[MediaRange] = x): Float = r match {\n+          case Nil          \u21d2 0f\n+          case head :: tail \u21d2 if (head.matches(mediaType)) head.qValue else rec(tail)\n+        }\n+        rec()\n+    }\n \n   /**\n    * Determines whether the given charset is accepted by the client.\n    */\n-  def isCharsetAccepted(charset: HttpCharset): Boolean = isCharsetAccepted(charset, acceptedCharsetRanges)\n+  def isCharsetAccepted(charset: HttpCharset, ranges: List[HttpCharsetRange] = acceptedCharsetRanges): Boolean =\n+    qValueForCharset(charset, ranges) > 0f\n \n-  private def isCharsetAccepted(charset: HttpCharset, ranges: List[HttpCharsetRange]): Boolean =\n-    // according to the HTTP spec a client has to accept all charsets if no Accept-Charset header is sent with the request\n-    // http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.2\n-    ranges.isEmpty || ranges.exists(_.matches(charset))\n+  /**\n+   * Returns the q-value that the client (implicitly or explicitly) attaches to the given charset.\n+   */\n+  def qValueForCharset(charset: HttpCharset, ranges: List[HttpCharsetRange] = acceptedCharsetRanges): Float =\n+    ranges match {\n+      case Nil \u21d2 1.0f // http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.2\n+      case x \u21d2\n+        @tailrec def rec(r: List[HttpCharsetRange] = x): Float = r match {\n+          case Nil          \u21d2 if (charset == `ISO-8859-1`) 1f else 0f\n+          case head :: tail \u21d2 if (head.matches(charset)) head.qValue else rec(tail)\n+        }\n+        rec()\n+    }\n \n   /**\n    * Determines whether the given encoding is accepted by the client.\n    */\n-  def isEncodingAccepted(encoding: HttpEncoding) = {\n-    // according to the HTTP spec the server MAY assume that the client will accept any content coding if no\n-    // Accept-Encoding header is sent with the request (http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3)\n-    // this is what we do here\n-    val ranges = acceptedEncodingRanges\n-    ranges.isEmpty || ranges.exists(_.matches(encoding))\n-  }\n+  def isEncodingAccepted(encoding: HttpEncoding, ranges: List[HttpEncodingRange] = acceptedEncodingRanges): Boolean =\n+    qValueForEncoding(encoding, ranges) > 0f\n+\n+  /**\n+   * Returns the q-value that the client (implicitly or explicitly) attaches to the given encoding.\n+   */\n+  def qValueForEncoding(encoding: HttpEncoding, ranges: List[HttpEncodingRange] = acceptedEncodingRanges): Float =\n+    ranges match {\n+      case Nil \u21d2 1.0f // http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3\n+      case x \u21d2\n+        @tailrec def rec(r: List[HttpEncodingRange] = x): Float = r match {\n+          case Nil          \u21d2 if (encoding == `ISO-8859-1`) 1f else 0f",
        "path": "spray-http/src/main/scala/spray/http/HttpMessage.scala",
        "position": null,
        "original_position": 102,
        "commit_id": "470ce81aa485cdb7bdbfc2e942ef6593174db6f1",
        "original_commit_id": "e2465a600e08210f2ef55a40faadeae2386d81cb",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "`ISO-8859-1` is not an encoding\n",
        "created_at": "2013-11-13T16:55:33Z",
        "updated_at": "2013-11-13T19:29:16Z",
        "html_url": "https://github.com/spray/spray/pull/686#discussion_r7632285",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/686",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/7632285"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/686#discussion_r7632285"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/686"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/7632541",
        "pull_request_review_id": null,
        "id": 7632541,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc2MzI1NDE=",
        "diff_hunk": "@@ -27,14 +26,16 @@ private[parser] trait AcceptCharsetHeader {\n   def `*Accept-Charset` = rule(\n     oneOrMore(CharsetRangeDecl, separator = ListSep) ~ EOI ~~> (HttpHeaders.`Accept-Charset`(_)))\n \n-  def CharsetRangeDecl = rule(\n-    CharsetRangeDef ~ optional(CharsetQuality))\n-\n-  def CharsetRangeDef = rule(\n-    \"*\" ~ push(`*`) | Charset ~~> getCharset)\n-\n-  def CharsetQuality = rule {\n-    \";\" ~ \"q\" ~ \"=\" ~ QValue // TODO: support charset quality\n+  def CharsetRangeDecl = rule {\n+    CharsetRangeDef ~ optional(CharsetQuality) ~~> { (name, optQ) \u21d2\n+      optQ match {\n+        case None    \u21d2 if (name == \"*\") HttpCharsetRange.`*` else HttpCharsetRange(getCharset(name))\n+        case Some(q) \u21d2 if (name == \"*\") HttpCharsetRange.`*`(q) else HttpCharsetRange(getCharset(name), q)\n+      }\n+    }",
        "path": "spray-http/src/main/scala/spray/http/parser/AcceptCharsetHeader.scala",
        "position": null,
        "original_position": 26,
        "commit_id": "470ce81aa485cdb7bdbfc2e942ef6593174db6f1",
        "original_commit_id": "e2465a600e08210f2ef55a40faadeae2386d81cb",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "``` scala\n      val range: HttpCharsetRange = if (name == \"*\") HttpCharsetRange.`*` else getCharset(name)\n      optQ match {\n        case None    \u21d2 range\n        case Some(q) \u21d2 range.withQValue(q)\n      }\n```\n",
        "created_at": "2013-11-13T17:03:00Z",
        "updated_at": "2013-11-13T19:29:16Z",
        "html_url": "https://github.com/spray/spray/pull/686#discussion_r7632541",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/686",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/7632541"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/686#discussion_r7632541"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/686"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/7632579",
        "pull_request_review_id": null,
        "id": 7632579,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc2MzI1Nzk=",
        "diff_hunk": "@@ -27,14 +26,16 @@ private[parser] trait AcceptCharsetHeader {\n   def `*Accept-Charset` = rule(\n     oneOrMore(CharsetRangeDecl, separator = ListSep) ~ EOI ~~> (HttpHeaders.`Accept-Charset`(_)))\n \n-  def CharsetRangeDecl = rule(\n-    CharsetRangeDef ~ optional(CharsetQuality))\n-\n-  def CharsetRangeDef = rule(\n-    \"*\" ~ push(`*`) | Charset ~~> getCharset)\n-\n-  def CharsetQuality = rule {\n-    \";\" ~ \"q\" ~ \"=\" ~ QValue // TODO: support charset quality\n+  def CharsetRangeDecl = rule {\n+    CharsetRangeDef ~ optional(CharsetQuality) ~~> { (name, optQ) \u21d2\n+      optQ match {\n+        case None    \u21d2 if (name == \"*\") HttpCharsetRange.`*` else HttpCharsetRange(getCharset(name))\n+        case Some(q) \u21d2 if (name == \"*\") HttpCharsetRange.`*`(q) else HttpCharsetRange(getCharset(name), q)\n+      }\n+    }",
        "path": "spray-http/src/main/scala/spray/http/parser/AcceptCharsetHeader.scala",
        "position": null,
        "original_position": 26,
        "commit_id": "470ce81aa485cdb7bdbfc2e942ef6593174db6f1",
        "original_commit_id": "e2465a600e08210f2ef55a40faadeae2386d81cb",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "or even better move it below the HttpCharsetRange creation into the CharsetRangeDef rule\n",
        "created_at": "2013-11-13T17:04:05Z",
        "updated_at": "2013-11-13T19:29:16Z",
        "html_url": "https://github.com/spray/spray/pull/686#discussion_r7632579",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/686",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/7632579"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/686#discussion_r7632579"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/686"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/7632590",
        "pull_request_review_id": null,
        "id": 7632590,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc2MzI1OTA=",
        "diff_hunk": "@@ -19,24 +19,26 @@ package parser\n \n import org.parboiled.scala._\n import BasicRules._\n-import HttpEncodings._\n \n private[parser] trait AcceptEncodingHeader {\n   this: Parser with ProtocolParameterRules \u21d2\n \n   def `*Accept-Encoding` = rule(\n-    (oneOrMore(EncodingRangeDecl, separator = ListSep) | push(Seq(HttpEncodings.identity))) ~ EOI\n+    (oneOrMore(EncodingRangeDecl, separator = ListSep) | push(Seq(HttpEncodingRange(HttpEncodings.identity)))) ~ EOI\n       ~~> (HttpHeaders.`Accept-Encoding`(_)))\n \n-  def EncodingRangeDecl = rule(\n-    EncodingRangeDef ~ optional(EncodingQuality))\n+  def EncodingRangeDecl = rule {\n+    EncodingRangeDef ~ optional(EncodingQuality) ~~> { (name, optQ) \u21d2",
        "path": "spray-http/src/main/scala/spray/http/parser/AcceptEncodingHeader.scala",
        "position": null,
        "original_position": 17,
        "commit_id": "470ce81aa485cdb7bdbfc2e942ef6593174db6f1",
        "original_commit_id": "e2465a600e08210f2ef55a40faadeae2386d81cb",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "see above\n",
        "created_at": "2013-11-13T17:04:24Z",
        "updated_at": "2013-11-13T19:29:16Z",
        "html_url": "https://github.com/spray/spray/pull/686#discussion_r7632590",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/686",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/7632590"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/686#discussion_r7632590"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/686"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/7632654",
        "pull_request_review_id": null,
        "id": 7632654,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc2MzI2NTQ=",
        "diff_hunk": "@@ -66,11 +66,36 @@ class ContentNegotiationSpec extends Specification {\n         accept(`text/plain` withCharset `UTF-8`) must reject\n       }\n \n+      \"Accept-Charset: UTF-16, UTF-8\" ! test { accept \u21d2\n+        accept(`text/plain`) must select(`text/plain`, `UTF-8`)\n+        accept(`text/plain` withCharset `UTF-16`) must select(`text/plain`, `UTF-16`)\n+      }\n+\n+      \"Accept-Charset: UTF-8;q=.2, UTF-16\" ! test { accept \u21d2\n+        accept(`text/plain`) must select(`text/plain`, `UTF-16`)\n+        accept(`text/plain` withCharset `UTF-8`) must select(`text/plain`, `UTF-8`)\n+      }\n+\n+      \"Accept-Charset: UTF-8;q=.2\" ! test { accept \u21d2\n+        accept(`text/plain`) must select(`text/plain`, `ISO-8859-1`)\n+        accept(`text/plain` withCharset `UTF-8`) must select(`text/plain`, `UTF-8`)\n+      }\n+\n+      \"Accept-Charset: latin1;q=.1, UTF-8;q=.2\" ! test { accept \u21d2\n+        accept(`text/plain`) must select(`text/plain`, `UTF-8`)\n+        accept(`text/plain` withCharset `UTF-8`) must select(`text/plain`, `UTF-8`)\n+      }\n+\n       \"Accept-Charset: *\" ! test { accept \u21d2\n         accept(`text/plain`) must select(`text/plain`, `UTF-8`)\n         accept(`text/plain` withCharset `UTF-16`) must select(`text/plain`, `UTF-16`)\n       }\n \n+      \"Accept-Charset: *;q=0\" ! test { accept \u21d2",
        "path": "spray-http/src/test/scala/spray/http/ContentNegotiationSpec.scala",
        "position": 29,
        "original_position": 29,
        "commit_id": "470ce81aa485cdb7bdbfc2e942ef6593174db6f1",
        "original_commit_id": "e2465a600e08210f2ef55a40faadeae2386d81cb",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Maybe add another test which has one element with `q=.2` and then `*;q=0`\n",
        "created_at": "2013-11-13T17:06:40Z",
        "updated_at": "2013-11-13T19:29:16Z",
        "html_url": "https://github.com/spray/spray/pull/686#discussion_r7632654",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/686",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/7632654"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/686#discussion_r7632654"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/686"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/7636534",
        "pull_request_review_id": null,
        "id": 7636534,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc2MzY1MzQ=",
        "diff_hunk": "@@ -183,53 +183,79 @@ case class HttpRequest(method: HttpMethod = HttpMethods.GET,\n       range \u2190 mediaRanges\n     } yield range).sortBy(-_.qValue)\n \n-  def acceptedCharsetRanges: List[HttpCharsetRange] = {\n-    // TODO: sort by preference\n-    for (`Accept-Charset`(charsetRanges) \u2190 headers; range \u2190 charsetRanges) yield range\n-  }\n+  def acceptedCharsetRanges: List[HttpCharsetRange] =\n+    (for {\n+      `Accept-Charset`(charsetRanges) \u2190 headers\n+      range \u2190 charsetRanges\n+    } yield range).sortBy(-_.qValue)\n \n-  def acceptedEncodingRanges: List[HttpEncodingRange] = {\n-    // TODO: sort by preference\n-    for (`Accept-Encoding`(encodingRanges) \u2190 headers; range \u2190 encodingRanges) yield range\n-  }\n+  def acceptedEncodingRanges: List[HttpEncodingRange] =\n+    (for {\n+      `Accept-Encoding`(encodingRanges) \u2190 headers\n+      range \u2190 encodingRanges\n+    } yield range).sortBy(-_.qValue)\n \n   def cookies: List[HttpCookie] = for (`Cookie`(cookies) \u2190 headers; cookie \u2190 cookies) yield cookie\n \n   /**\n    * Determines whether the given media-type is accepted by the client.\n    */\n-  def isMediaTypeAccepted(mediaType: MediaType) = {\n-    // according to the HTTP spec a client has to accept all mime types if no Accept header is sent with the request\n-    // http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1\n-    val ranges = acceptedMediaRanges\n-    ranges.isEmpty || ranges.exists(r \u21d2 isMediaTypeMatched(r, mediaType))\n-  }\n+  def isMediaTypeAccepted(mediaType: MediaType, ranges: List[MediaRange] = acceptedMediaRanges): Boolean =\n+    qValueForMediaType(mediaType, ranges) > 0f\n \n-  private def isMediaTypeMatched(mediaRange: MediaRange, mediaType: MediaType) =\n-    // according to the HTTP spec a media range with a q-Value of 0 is not acceptable for the client\n-    // http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.9\n-    mediaRange.qValue > 0.0f && mediaRange.matches(mediaType)\n+  /**\n+   * Returns the q-value that the client (implicitly or explicitly) attaches to the given media-type.\n+   */\n+  def qValueForMediaType(mediaType: MediaType, ranges: List[MediaRange] = acceptedMediaRanges): Float =\n+    ranges match {\n+      case Nil \u21d2 1.0f // http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1\n+      case x \u21d2\n+        @tailrec def rec(r: List[MediaRange] = x): Float = r match {\n+          case Nil          \u21d2 0f\n+          case head :: tail \u21d2 if (head.matches(mediaType)) head.qValue else rec(tail)\n+        }\n+        rec()\n+    }\n \n   /**\n    * Determines whether the given charset is accepted by the client.\n    */\n-  def isCharsetAccepted(charset: HttpCharset): Boolean = isCharsetAccepted(charset, acceptedCharsetRanges)\n+  def isCharsetAccepted(charset: HttpCharset, ranges: List[HttpCharsetRange] = acceptedCharsetRanges): Boolean =\n+    qValueForCharset(charset, ranges) > 0f\n \n-  private def isCharsetAccepted(charset: HttpCharset, ranges: List[HttpCharsetRange]): Boolean =\n-    // according to the HTTP spec a client has to accept all charsets if no Accept-Charset header is sent with the request\n-    // http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.2\n-    ranges.isEmpty || ranges.exists(_.matches(charset))\n+  /**\n+   * Returns the q-value that the client (implicitly or explicitly) attaches to the given charset.\n+   */\n+  def qValueForCharset(charset: HttpCharset, ranges: List[HttpCharsetRange] = acceptedCharsetRanges): Float =\n+    ranges match {\n+      case Nil \u21d2 1.0f // http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.2\n+      case x \u21d2\n+        @tailrec def rec(r: List[HttpCharsetRange] = x): Float = r match {\n+          case Nil          \u21d2 if (charset == `ISO-8859-1`) 1f else 0f\n+          case head :: tail \u21d2 if (head.matches(charset)) head.qValue else rec(tail)\n+        }\n+        rec()\n+    }\n \n   /**\n    * Determines whether the given encoding is accepted by the client.\n    */\n-  def isEncodingAccepted(encoding: HttpEncoding) = {\n-    // according to the HTTP spec the server MAY assume that the client will accept any content coding if no\n-    // Accept-Encoding header is sent with the request (http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3)\n-    // this is what we do here\n-    val ranges = acceptedEncodingRanges\n-    ranges.isEmpty || ranges.exists(_.matches(encoding))\n-  }\n+  def isEncodingAccepted(encoding: HttpEncoding, ranges: List[HttpEncodingRange] = acceptedEncodingRanges): Boolean =\n+    qValueForEncoding(encoding, ranges) > 0f\n+\n+  /**\n+   * Returns the q-value that the client (implicitly or explicitly) attaches to the given encoding.\n+   */\n+  def qValueForEncoding(encoding: HttpEncoding, ranges: List[HttpEncodingRange] = acceptedEncodingRanges): Float =\n+    ranges match {\n+      case Nil \u21d2 1.0f // http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3\n+      case x \u21d2\n+        @tailrec def rec(r: List[HttpEncodingRange] = x): Float = r match {\n+          case Nil          \u21d2 if (encoding == `ISO-8859-1`) 1f else 0f",
        "path": "spray-http/src/main/scala/spray/http/HttpMessage.scala",
        "position": null,
        "original_position": 102,
        "commit_id": "470ce81aa485cdb7bdbfc2e942ef6593174db6f1",
        "original_commit_id": "e2465a600e08210f2ef55a40faadeae2386d81cb",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Indeed, copypasta error. Well spotted.\n",
        "created_at": "2013-11-13T19:05:18Z",
        "updated_at": "2013-11-13T19:29:16Z",
        "html_url": "https://github.com/spray/spray/pull/686#discussion_r7636534",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/686",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/7636534"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/686#discussion_r7636534"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/686"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/7636562",
        "pull_request_review_id": null,
        "id": 7636562,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc2MzY1NjI=",
        "diff_hunk": "@@ -27,14 +26,16 @@ private[parser] trait AcceptCharsetHeader {\n   def `*Accept-Charset` = rule(\n     oneOrMore(CharsetRangeDecl, separator = ListSep) ~ EOI ~~> (HttpHeaders.`Accept-Charset`(_)))\n \n-  def CharsetRangeDecl = rule(\n-    CharsetRangeDef ~ optional(CharsetQuality))\n-\n-  def CharsetRangeDef = rule(\n-    \"*\" ~ push(`*`) | Charset ~~> getCharset)\n-\n-  def CharsetQuality = rule {\n-    \";\" ~ \"q\" ~ \"=\" ~ QValue // TODO: support charset quality\n+  def CharsetRangeDecl = rule {\n+    CharsetRangeDef ~ optional(CharsetQuality) ~~> { (name, optQ) \u21d2\n+      optQ match {\n+        case None    \u21d2 if (name == \"*\") HttpCharsetRange.`*` else HttpCharsetRange(getCharset(name))\n+        case Some(q) \u21d2 if (name == \"*\") HttpCharsetRange.`*`(q) else HttpCharsetRange(getCharset(name), q)\n+      }\n+    }",
        "path": "spray-http/src/main/scala/spray/http/parser/AcceptCharsetHeader.scala",
        "position": null,
        "original_position": 26,
        "commit_id": "470ce81aa485cdb7bdbfc2e942ef6593174db6f1",
        "original_commit_id": "e2465a600e08210f2ef55a40faadeae2386d81cb",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yup, better.\n",
        "created_at": "2013-11-13T19:06:12Z",
        "updated_at": "2013-11-13T19:29:16Z",
        "html_url": "https://github.com/spray/spray/pull/686#discussion_r7636562",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/686",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/7636562"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/686#discussion_r7636562"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/686"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/7636912",
        "pull_request_review_id": null,
        "id": 7636912,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc2MzY5MTI=",
        "diff_hunk": "@@ -66,11 +66,36 @@ class ContentNegotiationSpec extends Specification {\n         accept(`text/plain` withCharset `UTF-8`) must reject\n       }\n \n+      \"Accept-Charset: UTF-16, UTF-8\" ! test { accept \u21d2\n+        accept(`text/plain`) must select(`text/plain`, `UTF-8`)\n+        accept(`text/plain` withCharset `UTF-16`) must select(`text/plain`, `UTF-16`)\n+      }\n+\n+      \"Accept-Charset: UTF-8;q=.2, UTF-16\" ! test { accept \u21d2\n+        accept(`text/plain`) must select(`text/plain`, `UTF-16`)\n+        accept(`text/plain` withCharset `UTF-8`) must select(`text/plain`, `UTF-8`)\n+      }\n+\n+      \"Accept-Charset: UTF-8;q=.2\" ! test { accept \u21d2\n+        accept(`text/plain`) must select(`text/plain`, `ISO-8859-1`)\n+        accept(`text/plain` withCharset `UTF-8`) must select(`text/plain`, `UTF-8`)\n+      }\n+\n+      \"Accept-Charset: latin1;q=.1, UTF-8;q=.2\" ! test { accept \u21d2\n+        accept(`text/plain`) must select(`text/plain`, `UTF-8`)\n+        accept(`text/plain` withCharset `UTF-8`) must select(`text/plain`, `UTF-8`)\n+      }\n+\n       \"Accept-Charset: *\" ! test { accept \u21d2\n         accept(`text/plain`) must select(`text/plain`, `UTF-8`)\n         accept(`text/plain` withCharset `UTF-16`) must select(`text/plain`, `UTF-16`)\n       }\n \n+      \"Accept-Charset: *;q=0\" ! test { accept \u21d2",
        "path": "spray-http/src/test/scala/spray/http/ContentNegotiationSpec.scala",
        "position": 29,
        "original_position": 29,
        "commit_id": "470ce81aa485cdb7bdbfc2e942ef6593174db6f1",
        "original_commit_id": "e2465a600e08210f2ef55a40faadeae2386d81cb",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yep, will do.\n",
        "created_at": "2013-11-13T19:16:20Z",
        "updated_at": "2013-11-13T19:29:16Z",
        "html_url": "https://github.com/spray/spray/pull/686#discussion_r7636912",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/686",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/7636912"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/686#discussion_r7636912"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/686"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/7854677",
        "pull_request_review_id": null,
        "id": 7854677,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc4NTQ2Nzc=",
        "diff_hunk": "@@ -49,15 +53,17 @@ trait ConnectionHandler extends Actor with ActorLogging {\n \n   def running[C <: PipelineContext](tcpConnection: ActorRef, pipelineStage: RawPipelineStage[C],\n                                     pipelineContext: C): Receive = {\n-    val stage = pipelineStage(pipelineContext, baseCommandPipeline(tcpConnection), baseEventPipeline)\n+    val stage = pipelineStage(pipelineContext, baseCommandPipeline(tcpConnection), baseEventPipeline(tcpConnection))\n     running(tcpConnection, stage)\n   }\n \n   def running(tcpConnection: ActorRef, pipelines: Pipelines): Receive = {\n-    case x: Command                  \u21d2 pipelines.commandPipeline(x)\n-    case x: Event                    \u21d2 pipelines.eventPipeline(x)\n-    case Terminated(`tcpConnection`) \u21d2 pipelines.eventPipeline(Tcp.ErrorClosed(\"TcpConnection actor died\"))\n-    case Terminated(actor)           \u21d2 pipelines.eventPipeline(Pipeline.ActorDeath(actor))\n+    case x: Command \u21d2 pipelines.commandPipeline(x)\n+    case x: Event   \u21d2 pipelines.eventPipeline(x)\n+    case x @ Terminated(`tcpConnection`) \u21d2\n+      pipelines.eventPipeline(Tcp.ErrorClosed(\"TcpConnection actor died\"))\n+      self.forward(x)",
        "path": "spray-io/src/main/scala/spray/io/ConnectionHandler.scala",
        "position": null,
        "original_position": 36,
        "commit_id": "a4af6997f912a35d99847a2014e29cd313abcffd",
        "original_commit_id": "f8310ab67c18a0173dc13c0d30f293005bdfd1ec",
        "user": {
            "login": "rkuhn",
            "id": 470469,
            "node_id": "MDQ6VXNlcjQ3MDQ2OQ==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/470469?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rkuhn",
            "html_url": "https://github.com/rkuhn",
            "followers_url": "https://api.github.com/users/rkuhn/followers",
            "following_url": "https://api.github.com/users/rkuhn/following{/other_user}",
            "gists_url": "https://api.github.com/users/rkuhn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rkuhn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rkuhn/subscriptions",
            "organizations_url": "https://api.github.com/users/rkuhn/orgs",
            "repos_url": "https://api.github.com/users/rkuhn/repos",
            "events_url": "https://api.github.com/users/rkuhn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rkuhn/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This will not work: Terminated will be ignored after it has been passed into the behavior for the first time.\n",
        "created_at": "2013-11-22T12:40:51Z",
        "updated_at": "2013-11-22T13:48:31Z",
        "html_url": "https://github.com/spray/spray/pull/705#discussion_r7854677",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/705",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/7854677"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/705#discussion_r7854677"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/705"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/7855276",
        "pull_request_review_id": null,
        "id": 7855276,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc4NTUyNzY=",
        "diff_hunk": "@@ -49,15 +53,17 @@ trait ConnectionHandler extends Actor with ActorLogging {\n \n   def running[C <: PipelineContext](tcpConnection: ActorRef, pipelineStage: RawPipelineStage[C],\n                                     pipelineContext: C): Receive = {\n-    val stage = pipelineStage(pipelineContext, baseCommandPipeline(tcpConnection), baseEventPipeline)\n+    val stage = pipelineStage(pipelineContext, baseCommandPipeline(tcpConnection), baseEventPipeline(tcpConnection))\n     running(tcpConnection, stage)\n   }\n \n   def running(tcpConnection: ActorRef, pipelines: Pipelines): Receive = {\n-    case x: Command                  \u21d2 pipelines.commandPipeline(x)\n-    case x: Event                    \u21d2 pipelines.eventPipeline(x)\n-    case Terminated(`tcpConnection`) \u21d2 pipelines.eventPipeline(Tcp.ErrorClosed(\"TcpConnection actor died\"))\n-    case Terminated(actor)           \u21d2 pipelines.eventPipeline(Pipeline.ActorDeath(actor))\n+    case x: Command \u21d2 pipelines.commandPipeline(x)\n+    case x: Event   \u21d2 pipelines.eventPipeline(x)\n+    case x @ Terminated(`tcpConnection`) \u21d2\n+      pipelines.eventPipeline(Tcp.ErrorClosed(\"TcpConnection actor died\"))\n+      self.forward(x)",
        "path": "spray-io/src/main/scala/spray/io/ConnectionHandler.scala",
        "position": null,
        "original_position": 36,
        "commit_id": "a4af6997f912a35d99847a2014e29cd313abcffd",
        "original_commit_id": "f8310ab67c18a0173dc13c0d30f293005bdfd1ec",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ah, ok. Thanks for having our back here, Roland!\n",
        "created_at": "2013-11-22T13:13:24Z",
        "updated_at": "2013-11-22T13:48:31Z",
        "html_url": "https://github.com/spray/spray/pull/705#discussion_r7855276",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/705",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/7855276"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/705#discussion_r7855276"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/705"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/7855947",
        "pull_request_review_id": null,
        "id": 7855947,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc4NTU5NDc=",
        "diff_hunk": "@@ -49,15 +53,17 @@ trait ConnectionHandler extends Actor with ActorLogging {\n \n   def running[C <: PipelineContext](tcpConnection: ActorRef, pipelineStage: RawPipelineStage[C],\n                                     pipelineContext: C): Receive = {\n-    val stage = pipelineStage(pipelineContext, baseCommandPipeline(tcpConnection), baseEventPipeline)\n+    val stage = pipelineStage(pipelineContext, baseCommandPipeline(tcpConnection), baseEventPipeline(tcpConnection))\n     running(tcpConnection, stage)\n   }\n \n   def running(tcpConnection: ActorRef, pipelines: Pipelines): Receive = {\n-    case x: Command                  \u21d2 pipelines.commandPipeline(x)\n-    case x: Event                    \u21d2 pipelines.eventPipeline(x)\n-    case Terminated(`tcpConnection`) \u21d2 pipelines.eventPipeline(Tcp.ErrorClosed(\"TcpConnection actor died\"))\n-    case Terminated(actor)           \u21d2 pipelines.eventPipeline(Pipeline.ActorDeath(actor))\n+    case x: Command \u21d2 pipelines.commandPipeline(x)\n+    case x: Event   \u21d2 pipelines.eventPipeline(x)\n+    case x @ Terminated(`tcpConnection`) \u21d2\n+      pipelines.eventPipeline(Tcp.ErrorClosed(\"TcpConnection actor died\"))\n+      self.forward(x)",
        "path": "spray-io/src/main/scala/spray/io/ConnectionHandler.scala",
        "position": null,
        "original_position": 36,
        "commit_id": "a4af6997f912a35d99847a2014e29cd313abcffd",
        "original_commit_id": "f8310ab67c18a0173dc13c0d30f293005bdfd1ec",
        "user": {
            "login": "rkuhn",
            "id": 470469,
            "node_id": "MDQ6VXNlcjQ3MDQ2OQ==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/470469?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rkuhn",
            "html_url": "https://github.com/rkuhn",
            "followers_url": "https://api.github.com/users/rkuhn/followers",
            "following_url": "https://api.github.com/users/rkuhn/following{/other_user}",
            "gists_url": "https://api.github.com/users/rkuhn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rkuhn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rkuhn/subscriptions",
            "organizations_url": "https://api.github.com/users/rkuhn/orgs",
            "repos_url": "https://api.github.com/users/rkuhn/repos",
            "events_url": "https://api.github.com/users/rkuhn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rkuhn/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "we just happened to discuss this in the context of akka-persistence today; here it looks like the continuation can just be inlined (unless I\u2019m missing something)\n",
        "created_at": "2013-11-22T13:46:36Z",
        "updated_at": "2013-11-22T13:48:31Z",
        "html_url": "https://github.com/spray/spray/pull/705#discussion_r7855947",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/705",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/7855947"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/705#discussion_r7855947"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/705"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/7855977",
        "pull_request_review_id": null,
        "id": 7855977,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc4NTU5Nzc=",
        "diff_hunk": "@@ -49,15 +53,17 @@ trait ConnectionHandler extends Actor with ActorLogging {\n \n   def running[C <: PipelineContext](tcpConnection: ActorRef, pipelineStage: RawPipelineStage[C],\n                                     pipelineContext: C): Receive = {\n-    val stage = pipelineStage(pipelineContext, baseCommandPipeline(tcpConnection), baseEventPipeline)\n+    val stage = pipelineStage(pipelineContext, baseCommandPipeline(tcpConnection), baseEventPipeline(tcpConnection))\n     running(tcpConnection, stage)\n   }\n \n   def running(tcpConnection: ActorRef, pipelines: Pipelines): Receive = {\n-    case x: Command                  \u21d2 pipelines.commandPipeline(x)\n-    case x: Event                    \u21d2 pipelines.eventPipeline(x)\n-    case Terminated(`tcpConnection`) \u21d2 pipelines.eventPipeline(Tcp.ErrorClosed(\"TcpConnection actor died\"))\n-    case Terminated(actor)           \u21d2 pipelines.eventPipeline(Pipeline.ActorDeath(actor))\n+    case x: Command \u21d2 pipelines.commandPipeline(x)\n+    case x: Event   \u21d2 pipelines.eventPipeline(x)\n+    case x @ Terminated(`tcpConnection`) \u21d2\n+      pipelines.eventPipeline(Tcp.ErrorClosed(\"TcpConnection actor died\"))\n+      self.forward(x)",
        "path": "spray-io/src/main/scala/spray/io/ConnectionHandler.scala",
        "position": null,
        "original_position": 36,
        "commit_id": "a4af6997f912a35d99847a2014e29cd313abcffd",
        "original_commit_id": "f8310ab67c18a0173dc13c0d30f293005bdfd1ec",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yes, inlining is exactly what I just did. Thanks!\n",
        "created_at": "2013-11-22T13:48:05Z",
        "updated_at": "2013-11-22T13:48:31Z",
        "html_url": "https://github.com/spray/spray/pull/705#discussion_r7855977",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/705",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/7855977"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/705#discussion_r7855977"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/705"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/8463207",
        "pull_request_review_id": null,
        "id": 8463207,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0NjMyMDc=",
        "diff_hunk": "@@ -280,7 +284,7 @@ class HttpHeaderSpec extends Specification {\n                            realm=\"testrealm@host.com\",\n                            qop=\"auth,auth-int\",\n                            nonce=dcd98b7102dd2f0e8b11d0f600bfb0c093,\n-                           opaque=5ccc069c403ebaf9f0171e9517f40e41\"\"\".replace(EOL, \"\\r\\n\") =!=\n+                           opaque=5ccc069c403ebaf9f0171e9517f40e41\"\"\".replace(spray.util.EOL, \"\\r\\n\") =!=",
        "path": "spray-http/src/test/scala/spray/http/HttpHeaderSpec.scala",
        "position": null,
        "original_position": 25,
        "commit_id": "b06a45d88479cebe5d8f8f680f04d0a492b21aa2",
        "original_commit_id": "71a59a7f37adc1e1281f242e14724966611ab4ab",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think this needs to be fixed wrt the other PR.\n",
        "created_at": "2013-12-19T08:36:35Z",
        "updated_at": "2013-12-19T10:02:16Z",
        "html_url": "https://github.com/spray/spray/pull/730#discussion_r8463207",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/730",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/8463207"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/730#discussion_r8463207"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/730"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/8463591",
        "pull_request_review_id": null,
        "id": 8463591,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0NjM1OTE=",
        "diff_hunk": "@@ -280,7 +284,7 @@ class HttpHeaderSpec extends Specification {\n                            realm=\"testrealm@host.com\",\n                            qop=\"auth,auth-int\",\n                            nonce=dcd98b7102dd2f0e8b11d0f600bfb0c093,\n-                           opaque=5ccc069c403ebaf9f0171e9517f40e41\"\"\".replace(EOL, \"\\r\\n\") =!=\n+                           opaque=5ccc069c403ebaf9f0171e9517f40e41\"\"\".replace(spray.util.EOL, \"\\r\\n\") =!=",
        "path": "spray-http/src/test/scala/spray/http/HttpHeaderSpec.scala",
        "position": null,
        "original_position": 25,
        "commit_id": "b06a45d88479cebe5d8f8f680f04d0a492b21aa2",
        "original_commit_id": "71a59a7f37adc1e1281f242e14724966611ab4ab",
        "user": {
            "login": "2beaucoup",
            "id": 243903,
            "node_id": "MDQ6VXNlcjI0MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/243903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/2beaucoup",
            "html_url": "https://github.com/2beaucoup",
            "followers_url": "https://api.github.com/users/2beaucoup/followers",
            "following_url": "https://api.github.com/users/2beaucoup/following{/other_user}",
            "gists_url": "https://api.github.com/users/2beaucoup/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/2beaucoup/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/2beaucoup/subscriptions",
            "organizations_url": "https://api.github.com/users/2beaucoup/orgs",
            "repos_url": "https://api.github.com/users/2beaucoup/repos",
            "events_url": "https://api.github.com/users/2beaucoup/events{/privacy}",
            "received_events_url": "https://api.github.com/users/2beaucoup/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "ok, (un-)fixed ;)\n",
        "created_at": "2013-12-19T08:57:36Z",
        "updated_at": "2013-12-19T10:02:16Z",
        "html_url": "https://github.com/spray/spray/pull/730#discussion_r8463591",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/730",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/8463591"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/730#discussion_r8463591"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/730"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/8575810",
        "pull_request_review_id": null,
        "id": 8575810,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NzU4MTA=",
        "diff_hunk": "@@ -31,11 +31,14 @@ private[parsing] abstract class HttpMessagePartParser(val settings: ParserSettin\n   def apply(input: ByteString): Result = parseMessageSafe(input)\n \n   def parseMessageSafe(input: ByteString, offset: Int = 0): Result =\n-    try parseMessage(input, offset)\n-    catch {\n-      case NotEnoughDataException \u21d2 needMoreData(input, offset)(parseMessageSafe)\n-      case e: ParsingException    \u21d2 fail(e.status, e.info)\n-    }\n+    if (input.length == offset)\n+      needMoreData(input, offset)(parseMessageSafe)",
        "path": "spray-can/src/main/scala/spray/can/parsing/HttpMessagePartParser.scala",
        "position": null,
        "original_position": 10,
        "commit_id": "c7a287a4111fe63f721c7deed32c163cda23dda6",
        "original_commit_id": "7e5b664c68eeb365e3376824e2fbd55e62fd610b",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Can you put this line into a local `def` to DRY up the code?\n",
        "created_at": "2013-12-28T09:04:25Z",
        "updated_at": "2013-12-28T12:19:45Z",
        "html_url": "https://github.com/spray/spray/pull/741#discussion_r8575810",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/741",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/8575810"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/741#discussion_r8575810"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/741"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/8626556",
        "pull_request_review_id": null,
        "id": 8626556,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg2MjY1NTY=",
        "diff_hunk": "@@ -47,7 +47,7 @@ object HttpDialog {\n               trigger.success(())\n               context.become(connected(context.watch(sender)))\n             case _: Http.CommandFailed \u21d2\n-              trigger.failure(new RuntimeException(\"Could not connect to \" + connect.remoteAddress))\n+              trigger.failure(new RuntimeException(\"Could not connect to any of\" + connect.remoteAddresses))",
        "path": "spray-client/src/main/scala/spray/client/HttpDialog.scala",
        "position": null,
        "original_position": 5,
        "commit_id": "174900cac381bcd1c2a1a706900df086504eed20",
        "original_commit_id": "dcd629bdcf260b883f993c1674b2dfdd989f1545",
        "user": {
            "login": "2beaucoup",
            "id": 243903,
            "node_id": "MDQ6VXNlcjI0MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/243903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/2beaucoup",
            "html_url": "https://github.com/2beaucoup",
            "followers_url": "https://api.github.com/users/2beaucoup/followers",
            "following_url": "https://api.github.com/users/2beaucoup/following{/other_user}",
            "gists_url": "https://api.github.com/users/2beaucoup/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/2beaucoup/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/2beaucoup/subscriptions",
            "organizations_url": "https://api.github.com/users/2beaucoup/orgs",
            "repos_url": "https://api.github.com/users/2beaucoup/repos",
            "events_url": "https://api.github.com/users/2beaucoup/events{/privacy}",
            "received_events_url": "https://api.github.com/users/2beaucoup/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You missed a space here.\n",
        "created_at": "2014-01-02T23:34:33Z",
        "updated_at": "2014-03-03T15:53:41Z",
        "html_url": "https://github.com/spray/spray/pull/747#discussion_r8626556",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/747",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/8626556"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/747#discussion_r8626556"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/747"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/8626935",
        "pull_request_review_id": null,
        "id": 8626935,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg2MjY5MzU=",
        "diff_hunk": "@@ -52,11 +52,23 @@ private class HttpClientConnection(connectCommander: ActorRef,\n       context.become(running(tcpConnection, pipelineStage, pipelineContext(connected)))\n \n     case Tcp.CommandFailed(_: Tcp.Connect) \u21d2\n-      connectCommander ! Http.CommandFailed(connect)\n-      context.stop(self)\n+      retryRemainingOrStop(remainingAddresses)\n \n     case ReceiveTimeout \u21d2\n       log.warning(\"Configured connecting timeout of {} expired, stopping\", settings.connectingTimeout)",
        "path": "spray-can/src/main/scala/spray/can/client/HttpClientConnection.scala",
        "position": null,
        "original_position": 38,
        "commit_id": "174900cac381bcd1c2a1a706900df086504eed20",
        "original_commit_id": "ac666f53b80b8824d62cf02e27098311cc4cae92",
        "user": {
            "login": "2beaucoup",
            "id": 243903,
            "node_id": "MDQ6VXNlcjI0MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/243903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/2beaucoup",
            "html_url": "https://github.com/2beaucoup",
            "followers_url": "https://api.github.com/users/2beaucoup/followers",
            "following_url": "https://api.github.com/users/2beaucoup/following{/other_user}",
            "gists_url": "https://api.github.com/users/2beaucoup/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/2beaucoup/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/2beaucoup/subscriptions",
            "organizations_url": "https://api.github.com/users/2beaucoup/orgs",
            "repos_url": "https://api.github.com/users/2beaucoup/repos",
            "events_url": "https://api.github.com/users/2beaucoup/events{/privacy}",
            "received_events_url": "https://api.github.com/users/2beaucoup/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Not true if `remainingAddresses` is not empty. (See my proposal above.)\n",
        "created_at": "2014-01-02T23:57:30Z",
        "updated_at": "2014-03-03T15:53:41Z",
        "html_url": "https://github.com/spray/spray/pull/747#discussion_r8626935",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/747",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/8626935"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/747#discussion_r8626935"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/747"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/8626949",
        "pull_request_review_id": null,
        "id": 8626949,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg2MjY5NDk=",
        "diff_hunk": "@@ -31,16 +32,15 @@ private class HttpClientConnection(connectCommander: ActorRef,\n   import context.system\n   import connect._\n \n-  log.debug(\"Attempting connection to {}\", remoteAddress)\n-\n-  IO(Tcp) ! Tcp.Connect(remoteAddress, localAddress, options)\n-\n+  connectTo(remoteAddresses.head)\n   context.setReceiveTimeout(settings.connectingTimeout)\n \n   // we cannot sensibly recover from crashes\n   override def supervisorStrategy = SupervisorStrategy.stoppingStrategy\n \n-  def receive: Receive = {\n+  def receive: Receive = connecting(remoteAddresses.tail.toList)\n+\n+  def connecting(remainingAddresses: List[InetSocketAddress]): Receive = {",
        "path": "spray-can/src/main/scala/spray/can/client/HttpClientConnection.scala",
        "position": null,
        "original_position": 25,
        "commit_id": "174900cac381bcd1c2a1a706900df086504eed20",
        "original_commit_id": "ac666f53b80b8824d62cf02e27098311cc4cae92",
        "user": {
            "login": "2beaucoup",
            "id": 243903,
            "node_id": "MDQ6VXNlcjI0MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/243903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/2beaucoup",
            "html_url": "https://github.com/2beaucoup",
            "followers_url": "https://api.github.com/users/2beaucoup/followers",
            "following_url": "https://api.github.com/users/2beaucoup/following{/other_user}",
            "gists_url": "https://api.github.com/users/2beaucoup/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/2beaucoup/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/2beaucoup/subscriptions",
            "organizations_url": "https://api.github.com/users/2beaucoup/orgs",
            "repos_url": "https://api.github.com/users/2beaucoup/repos",
            "events_url": "https://api.github.com/users/2beaucoup/events{/privacy}",
            "received_events_url": "https://api.github.com/users/2beaucoup/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Should be `private`\n",
        "created_at": "2014-01-02T23:58:07Z",
        "updated_at": "2014-03-03T15:53:41Z",
        "html_url": "https://github.com/spray/spray/pull/747#discussion_r8626949",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/747",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/8626949"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/747#discussion_r8626949"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/747"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/8627611",
        "pull_request_review_id": null,
        "id": 8627611,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg2Mjc2MTE=",
        "diff_hunk": "@@ -40,15 +40,24 @@ object Http extends ExtensionKey[HttpExt] {\n   /// COMMANDS\n   type Command = Tcp.Command\n \n-  case class Connect(remoteAddress: InetSocketAddress,\n+  case class Connect(remoteAddresses: Array[InetSocketAddress],",
        "path": "spray-can/src/main/scala/spray/can/Http.scala",
        "position": null,
        "original_position": 14,
        "commit_id": "174900cac381bcd1c2a1a706900df086504eed20",
        "original_commit_id": "c20d4f2356f25cf0e9802f1e0404453ae0dbbb23",
        "user": {
            "login": "2beaucoup",
            "id": 243903,
            "node_id": "MDQ6VXNlcjI0MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/243903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/2beaucoup",
            "html_url": "https://github.com/2beaucoup",
            "followers_url": "https://api.github.com/users/2beaucoup/followers",
            "following_url": "https://api.github.com/users/2beaucoup/following{/other_user}",
            "gists_url": "https://api.github.com/users/2beaucoup/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/2beaucoup/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/2beaucoup/subscriptions",
            "organizations_url": "https://api.github.com/users/2beaucoup/orgs",
            "repos_url": "https://api.github.com/users/2beaucoup/repos",
            "events_url": "https://api.github.com/users/2beaucoup/events{/privacy}",
            "received_events_url": "https://api.github.com/users/2beaucoup/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'd switch to host/port here and deprecate the `InetSocketAddress` constructor.\n\n`getByName` / `getAllByName` could then be moved to `HttpClientConnection` and be protected by a new config property.\n\nLet's see what @jrudolph and @sirthias have to say...\n",
        "created_at": "2014-01-03T00:38:44Z",
        "updated_at": "2014-03-03T15:53:41Z",
        "html_url": "https://github.com/spray/spray/pull/747#discussion_r8627611",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/747",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/8627611"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/747#discussion_r8627611"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/747"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/8627658",
        "pull_request_review_id": null,
        "id": 8627658,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg2Mjc2NTg=",
        "diff_hunk": "@@ -40,15 +40,24 @@ object Http extends ExtensionKey[HttpExt] {\n   /// COMMANDS\n   type Command = Tcp.Command\n \n-  case class Connect(remoteAddress: InetSocketAddress,\n+  case class Connect(remoteAddresses: Array[InetSocketAddress],",
        "path": "spray-can/src/main/scala/spray/can/Http.scala",
        "position": null,
        "original_position": 14,
        "commit_id": "174900cac381bcd1c2a1a706900df086504eed20",
        "original_commit_id": "c20d4f2356f25cf0e9802f1e0404453ae0dbbb23",
        "user": {
            "login": "fernandezpablo85",
            "id": 28029,
            "node_id": "MDQ6VXNlcjI4MDI5",
            "avatar_url": "https://avatars3.githubusercontent.com/u/28029?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fernandezpablo85",
            "html_url": "https://github.com/fernandezpablo85",
            "followers_url": "https://api.github.com/users/fernandezpablo85/followers",
            "following_url": "https://api.github.com/users/fernandezpablo85/following{/other_user}",
            "gists_url": "https://api.github.com/users/fernandezpablo85/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/fernandezpablo85/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/fernandezpablo85/subscriptions",
            "organizations_url": "https://api.github.com/users/fernandezpablo85/orgs",
            "repos_url": "https://api.github.com/users/fernandezpablo85/repos",
            "events_url": "https://api.github.com/users/fernandezpablo85/events{/privacy}",
            "received_events_url": "https://api.github.com/users/fernandezpablo85/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "That's more like a core decision so I'll leave it to you guys. Glad that the conversation got started though :smiley: \n\nThanks a lot @2beaucoup \n",
        "created_at": "2014-01-03T00:42:54Z",
        "updated_at": "2014-03-03T15:53:41Z",
        "html_url": "https://github.com/spray/spray/pull/747#discussion_r8627658",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/747",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/8627658"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/747#discussion_r8627658"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/747"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10210503",
        "pull_request_review_id": null,
        "id": 10210503,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjEwNTAz",
        "diff_hunk": "@@ -40,15 +40,24 @@ object Http extends ExtensionKey[HttpExt] {\n   /// COMMANDS\n   type Command = Tcp.Command\n \n-  case class Connect(remoteAddress: InetSocketAddress,\n+  case class Connect(remoteAddresses: Array[InetSocketAddress],",
        "path": "spray-can/src/main/scala/spray/can/Http.scala",
        "position": null,
        "original_position": 14,
        "commit_id": "174900cac381bcd1c2a1a706900df086504eed20",
        "original_commit_id": "c20d4f2356f25cf0e9802f1e0404453ae0dbbb23",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "While I agree that @2beaucoup's suggestion would provide the cleaner and leaner API here there is one thing that is rather ugly about these DNS lookups (`getByName` / `getAllByName`): they are inherently blocking, potentially for a non-insignificant amount of time.\n\nBy moving them into the `HttpClientConnection` actor we'd effectively remove them completely from the control of the user. If we keep them where they are the user could manage the lookups him/herself (even potentially move them out underneath a dedicated dispatcher), so I'd prefer to _not_ move them into the `HttpClientConnection` actor.\n",
        "created_at": "2014-03-03T14:02:58Z",
        "updated_at": "2014-03-03T15:53:41Z",
        "html_url": "https://github.com/spray/spray/pull/747#discussion_r10210503",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/747",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10210503"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/747#discussion_r10210503"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/747"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10210562",
        "pull_request_review_id": null,
        "id": 10210562,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjEwNTYy",
        "diff_hunk": "@@ -40,15 +40,24 @@ object Http extends ExtensionKey[HttpExt] {\n   /// COMMANDS\n   type Command = Tcp.Command\n \n-  case class Connect(remoteAddress: InetSocketAddress,\n+  case class Connect(remoteAddresses: Array[InetSocketAddress],",
        "path": "spray-can/src/main/scala/spray/can/Http.scala",
        "position": null,
        "original_position": 14,
        "commit_id": "174900cac381bcd1c2a1a706900df086504eed20",
        "original_commit_id": "c20d4f2356f25cf0e9802f1e0404453ae0dbbb23",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "However, I'd turn the `Array` here into a `List` for two reasons:\n1. Arrays are mutable.\n2. The current implementation in `HttpClientConnection` is actually geared towards a `List` anyway.\n",
        "created_at": "2014-03-03T14:04:30Z",
        "updated_at": "2014-03-03T15:53:41Z",
        "html_url": "https://github.com/spray/spray/pull/747#discussion_r10210562",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/747",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10210562"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/747#discussion_r10210562"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/747"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10210871",
        "pull_request_review_id": null,
        "id": 10210871,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjEwODcx",
        "diff_hunk": "@@ -67,6 +67,10 @@ private[can] trait RequestRenderingComponent {\n               render(x)\n               renderHeaders(tail, hostHeaderSeen, userAgentSeen = true, contentTypeSeen, contentLengthSeen)\n \n+            case x: `Raw-Request-URI` \u21d2\n+              suppressionWarning(x, \"Raw-Request-URI header value is used to override the URI and is not sent in headers\")",
        "path": "spray-can/src/main/scala/spray/can/rendering/RequestRenderingComponent.scala",
        "position": null,
        "original_position": 5,
        "commit_id": "726cf1ac0dc21730d9393cfd5c07455f58869726",
        "original_commit_id": "d461a94cd494c85a3a4fe8eba303faeac5a2d9d8",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think we should remove this warning here as we assume that the user knows what he/she is doing when adding an `Raw-Request-URI` header.\n",
        "created_at": "2014-03-03T14:13:56Z",
        "updated_at": "2014-03-04T11:39:46Z",
        "html_url": "https://github.com/spray/spray/pull/745#discussion_r10210871",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/745",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10210871"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/745#discussion_r10210871"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/745"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10211043",
        "pull_request_review_id": null,
        "id": 10211043,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjExMDQz",
        "diff_hunk": "@@ -92,9 +96,27 @@ private[can] trait RequestRenderingComponent {\n             }\n         }\n \n-      import request._\n-      uri.renderWithoutFragment(r ~~ request.method ~~ ' ', UTF8) ~~ ' ' ~~ protocol ~~ CrLf\n-      renderHeaders(headers)\n+      def renderRequestLine(): Unit = {\n+        @tailrec def findRawRequestUriHeader(headers: List[HttpHeader]): Option[`Raw-Request-URI`] = {\n+          headers match {\n+            case head :: tail \u21d2 head match {\n+              case x: `Raw-Request-URI` \u21d2 Some(x)\n+              case _                    \u21d2 findRawRequestUriHeader(tail)\n+            }\n+            case Nil \u21d2 None\n+          }\n+        }\n+\n+        r ~~ request.method ~~ ' '\n+        findRawRequestUriHeader(request.headers) match {\n+          case Some(rawHeader) \u21d2 rawHeader.renderValue(r)",
        "path": "spray-can/src/main/scala/spray/can/rendering/RequestRenderingComponent.scala",
        "position": null,
        "original_position": 31,
        "commit_id": "726cf1ac0dc21730d9393cfd5c07455f58869726",
        "original_commit_id": "d461a94cd494c85a3a4fe8eba303faeac5a2d9d8",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "If you move these two cases right into the `findRawRequestUriHeader` method, rename it to `renderUri` and have it return `Unit` we can save the `Option` creation.\n",
        "created_at": "2014-03-03T14:18:56Z",
        "updated_at": "2014-03-04T11:39:46Z",
        "html_url": "https://github.com/spray/spray/pull/745#discussion_r10211043",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/745",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10211043"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/745#discussion_r10211043"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/745"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10256058",
        "pull_request_review_id": null,
        "id": 10256058,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjU2MDU4",
        "diff_hunk": "@@ -30,21 +31,27 @@ class Initializer extends ServletContextListener {\n \n   def contextInitialized(ev: ServletContextEvent): Unit = {\n     booted switchOn {\n-      println(\"Starting spray application ...\")\n-      val servletContext = ev.getServletContext\n+      val ctx = ev.getServletContext\n+      ctx.log(\"Starting spray application ...\")\n \n       try {\n         val classLoader = ActorSystem.asInstanceOf[{ def findClassLoader(): ClassLoader }].findClassLoader()\n         val config = ConfigFactory.load(classLoader)\n-        val settings = ConnectorSettings(config)\n-        servletContext.setAttribute(Initializer.SettingsAttrName, settings)\n+        val settings0 = ConnectorSettings(config)\n+        val settings =\n+          if (settings0.rootPath == Uri.Path(\"AUTO\")) {\n+            ctx.log(s\"Automatically spray.servlet.root-path to '${ctx.getContextPath}'\")",
        "path": "spray-servlet/src/main/scala/spray/servlet/Initializer.scala",
        "position": null,
        "original_position": 25,
        "commit_id": "4c25321ec30ecdcda37bba2cae59160996aebe83",
        "original_commit_id": "012a194e9704b69e6519a29a2430aeaafc0a5433",
        "user": {
            "login": "2beaucoup",
            "id": 243903,
            "node_id": "MDQ6VXNlcjI0MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/243903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/2beaucoup",
            "html_url": "https://github.com/2beaucoup",
            "followers_url": "https://api.github.com/users/2beaucoup/followers",
            "following_url": "https://api.github.com/users/2beaucoup/following{/other_user}",
            "gists_url": "https://api.github.com/users/2beaucoup/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/2beaucoup/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/2beaucoup/subscriptions",
            "organizations_url": "https://api.github.com/users/2beaucoup/orgs",
            "repos_url": "https://api.github.com/users/2beaucoup/repos",
            "events_url": "https://api.github.com/users/2beaucoup/events{/privacy}",
            "received_events_url": "https://api.github.com/users/2beaucoup/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "missing \"setting\"?\n",
        "created_at": "2014-03-04T14:35:13Z",
        "updated_at": "2014-03-04T14:55:49Z",
        "html_url": "https://github.com/spray/spray/pull/801#discussion_r10256058",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/801",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10256058"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/801#discussion_r10256058"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/801"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10256111",
        "pull_request_review_id": null,
        "id": 10256111,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjU2MTEx",
        "diff_hunk": "@@ -30,21 +31,27 @@ class Initializer extends ServletContextListener {\n \n   def contextInitialized(ev: ServletContextEvent): Unit = {\n     booted switchOn {\n-      println(\"Starting spray application ...\")\n-      val servletContext = ev.getServletContext\n+      val ctx = ev.getServletContext\n+      ctx.log(\"Starting spray application ...\")\n \n       try {\n         val classLoader = ActorSystem.asInstanceOf[{ def findClassLoader(): ClassLoader }].findClassLoader()\n         val config = ConfigFactory.load(classLoader)\n-        val settings = ConnectorSettings(config)\n-        servletContext.setAttribute(Initializer.SettingsAttrName, settings)\n+        val settings0 = ConnectorSettings(config)\n+        val settings =\n+          if (settings0.rootPath == Uri.Path(\"AUTO\")) {\n+            ctx.log(s\"Automatically spray.servlet.root-path to '${ctx.getContextPath}'\")",
        "path": "spray-servlet/src/main/scala/spray/servlet/Initializer.scala",
        "position": null,
        "original_position": 25,
        "commit_id": "4c25321ec30ecdcda37bba2cae59160996aebe83",
        "original_commit_id": "012a194e9704b69e6519a29a2430aeaafc0a5433",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Indeed. Thanks, for catching that.\n",
        "created_at": "2014-03-04T14:36:50Z",
        "updated_at": "2014-03-04T14:55:49Z",
        "html_url": "https://github.com/spray/spray/pull/801#discussion_r10256111",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/801",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10256111"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/801#discussion_r10256111"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/801"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10380716",
        "pull_request_review_id": null,
        "id": 10380716,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzgwNzE2",
        "diff_hunk": "@@ -95,6 +102,12 @@ trait HeaderDirectives {\n     extract(_.request.headers.mapFind(f))\n   }\n \n+  /**\n+   * Extract the header value of the option HTTP request header with the given type.",
        "path": "spray-routing/src/main/scala/spray/routing/directives/HeaderDirectives.scala",
        "position": null,
        "original_position": 19,
        "commit_id": "2ccbae1017c50ac43da4ce22d5eb205f0f59f7de",
        "original_commit_id": "d6d2b1b395921666f2ae8de4876849f0c214a9f3",
        "user": {
            "login": "2beaucoup",
            "id": 243903,
            "node_id": "MDQ6VXNlcjI0MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/243903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/2beaucoup",
            "html_url": "https://github.com/2beaucoup",
            "followers_url": "https://api.github.com/users/2beaucoup/followers",
            "following_url": "https://api.github.com/users/2beaucoup/following{/other_user}",
            "gists_url": "https://api.github.com/users/2beaucoup/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/2beaucoup/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/2beaucoup/subscriptions",
            "organizations_url": "https://api.github.com/users/2beaucoup/orgs",
            "repos_url": "https://api.github.com/users/2beaucoup/repos",
            "events_url": "https://api.github.com/users/2beaucoup/events{/privacy}",
            "received_events_url": "https://api.github.com/users/2beaucoup/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\"optional\"?\n",
        "created_at": "2014-03-07T11:52:55Z",
        "updated_at": "2014-03-07T11:58:54Z",
        "html_url": "https://github.com/spray/spray/pull/812#discussion_r10380716",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/812",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10380716"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/812#discussion_r10380716"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/812"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10380835",
        "pull_request_review_id": null,
        "id": 10380835,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzgwODM1",
        "diff_hunk": "@@ -95,6 +102,12 @@ trait HeaderDirectives {\n     extract(_.request.headers.mapFind(f))\n   }\n \n+  /**\n+   * Extract the header value of the option HTTP request header with the given type.",
        "path": "spray-routing/src/main/scala/spray/routing/directives/HeaderDirectives.scala",
        "position": null,
        "original_position": 19,
        "commit_id": "2ccbae1017c50ac43da4ce22d5eb205f0f59f7de",
        "original_commit_id": "d6d2b1b395921666f2ae8de4876849f0c214a9f3",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Thx, fixed.\n",
        "created_at": "2014-03-07T11:58:57Z",
        "updated_at": "2014-03-07T11:58:57Z",
        "html_url": "https://github.com/spray/spray/pull/812#discussion_r10380835",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/812",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10380835"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/812#discussion_r10380835"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/812"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10211896",
        "pull_request_review_id": null,
        "id": 10211896,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjExODk2",
        "diff_hunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright \u00a9 2011-2013 the spray project <http://spray.io>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.http\n+\n+sealed trait ByteRangeSetEntry extends ValueRenderable\n+\n+object ByteRange {\n+  def apply(firstBytePosition: Long, lastBytePosition: Long): ByteRange = ByteRange(firstBytePosition, Some(lastBytePosition))\n+}\n+\n+case class ByteRange(firstBytePosition: Long, lastBytePosition: Option[Long] = None) extends ByteRangeSetEntry {\n+  require(lastBytePosition.getOrElse(Long.MaxValue) >= firstBytePosition, s\"lastBytePosition must be greater than equals firstBytePosition\")",
        "path": "spray-http/src/main/scala/spray/http/ByteRange.scala",
        "position": null,
        "original_position": 26,
        "commit_id": "e2fce5b18b6a8f358c8b17354468e643ce29be3e",
        "original_commit_id": "bac0b505be53b5c7d3c1290463a537c9b72cd70a",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "How about \"firstBytePosition must be <= lastBytePosition\" for the error msg instead?\n",
        "created_at": "2014-03-03T14:44:12Z",
        "updated_at": "2014-03-07T12:44:21Z",
        "html_url": "https://github.com/spray/spray/pull/612#discussion_r10211896",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/612",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10211896"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/612#discussion_r10211896"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/612"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10211964",
        "pull_request_review_id": null,
        "id": 10211964,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjExOTY0",
        "diff_hunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright \u00a9 2011-2013 the spray project <http://spray.io>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.http\n+\n+sealed trait ByteRangeSetEntry extends ValueRenderable\n+\n+object ByteRange {\n+  def apply(firstBytePosition: Long, lastBytePosition: Long): ByteRange = ByteRange(firstBytePosition, Some(lastBytePosition))\n+}\n+\n+case class ByteRange(firstBytePosition: Long, lastBytePosition: Option[Long] = None) extends ByteRangeSetEntry {\n+  require(lastBytePosition.getOrElse(Long.MaxValue) >= firstBytePosition, s\"lastBytePosition must be greater than equals firstBytePosition\")\n+\n+  def render[R <: Rendering](r: R): r.type = r ~~ firstBytePosition.toString ~~ '-' ~~ lastBytePosition.map(_.toString).getOrElse(\"\")",
        "path": "spray-http/src/main/scala/spray/http/ByteRange.scala",
        "position": null,
        "original_position": 28,
        "commit_id": "e2fce5b18b6a8f358c8b17354468e643ce29be3e",
        "original_commit_id": "bac0b505be53b5c7d3c1290463a537c9b72cd70a",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Here I would replace `lastBytePosition.map(_.toString).getOrElse(\"\")` with\n\n```\n... ~~ {\n  lastBytePosition match {\n    case Some(x) => x.toString\n    case _ => \"\"\n  }\n}\n```\n\nand save the creation of two closures.\n",
        "created_at": "2014-03-03T14:46:05Z",
        "updated_at": "2014-03-07T12:44:21Z",
        "html_url": "https://github.com/spray/spray/pull/612#discussion_r10211964",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/612",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10211964"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/612#discussion_r10211964"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/612"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10212159",
        "pull_request_review_id": null,
        "id": 10212159,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjEyMTU5",
        "diff_hunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright (C) 2011-2013 spray.io\n+ * Based on code copyright (C) 2010-2011 by the BlueEyes Web Framework Team (http://github.com/jdegoes/blueeyes)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.http\n+\n+case class ContentRange(firstByte: Option[Long], lastByte: Option[Long], instanceLength: Option[Long]) extends ValueRenderable {\n+\n+  /*require(firstByte.getOrElse(0L) >= 0L, s\"firstByte must be non negative\")",
        "path": "spray-http/src/main/scala/spray/http/ContentRange.scala",
        "position": null,
        "original_position": 22,
        "commit_id": "e2fce5b18b6a8f358c8b17354468e643ce29be3e",
        "original_commit_id": "bac0b505be53b5c7d3c1290463a537c9b72cd70a",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Why have you commented out these requires?\n",
        "created_at": "2014-03-03T14:50:46Z",
        "updated_at": "2014-03-07T12:44:21Z",
        "html_url": "https://github.com/spray/spray/pull/612#discussion_r10212159",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/612",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10212159"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/612#discussion_r10212159"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/612"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10212252",
        "pull_request_review_id": null,
        "id": 10212252,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjEyMjUy",
        "diff_hunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright (C) 2011-2013 spray.io\n+ * Based on code copyright (C) 2010-2011 by the BlueEyes Web Framework Team (http://github.com/jdegoes/blueeyes)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.http\n+\n+case class ContentRange(firstByte: Option[Long], lastByte: Option[Long], instanceLength: Option[Long]) extends ValueRenderable {\n+\n+  /*require(firstByte.getOrElse(0L) >= 0L, s\"firstByte must be non negative\")\n+  require(lastByte.getOrElse(0L) >= 0L, s\"lastByte must be non negative\")\n+  require((firstByte.isDefined && lastByte.isDefined) || (firstByte.isEmpty && lastByte.isEmpty), s\"firstByte and lastByte must both be given or not given\")\n+  require(firstByte.getOrElse(0L) <= lastByte.getOrElse(Long.MaxValue), s\"firstByte must be less than lastByte\")\n+  require(instanceLength.getOrElse(0L) >= 0, s\"instanceLength must be non negative\")\n+  require(instanceLength.getOrElse(Long.MaxValue) > lastByte.getOrElse(0L), s\"instanceLength must be greater than lastByte\")\n+  */\n+\n+  def render[R <: Rendering](r: R): r.type = {\n+    r ~~ \"bytes \"\n+    if (firstByte.isEmpty || lastByte.isEmpty) {",
        "path": "spray-http/src/main/scala/spray/http/ContentRange.scala",
        "position": null,
        "original_position": 32,
        "commit_id": "e2fce5b18b6a8f358c8b17354468e643ce29be3e",
        "original_commit_id": "bac0b505be53b5c7d3c1290463a537c9b72cd70a",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "If we only really have two possibilities (either both bounds defined or both bounds undefined) should we really model them as two independent `Option`s?. Wouldn't an `Option[(Long, Long)]` or something of a similar shape be more appropriate?\n",
        "created_at": "2014-03-03T14:53:19Z",
        "updated_at": "2014-03-07T12:44:21Z",
        "html_url": "https://github.com/spray/spray/pull/612#discussion_r10212252",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/612",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10212252"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/612#discussion_r10212252"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/612"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10212332",
        "pull_request_review_id": null,
        "id": 10212332,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjEyMzMy",
        "diff_hunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright (C) 2011-2013 spray.io\n+ * Based on code copyright (C) 2010-2011 by the BlueEyes Web Framework Team (http://github.com/jdegoes/blueeyes)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.http\n+\n+case class ContentRange(firstByte: Option[Long], lastByte: Option[Long], instanceLength: Option[Long]) extends ValueRenderable {\n+\n+  /*require(firstByte.getOrElse(0L) >= 0L, s\"firstByte must be non negative\")\n+  require(lastByte.getOrElse(0L) >= 0L, s\"lastByte must be non negative\")\n+  require((firstByte.isDefined && lastByte.isDefined) || (firstByte.isEmpty && lastByte.isEmpty), s\"firstByte and lastByte must both be given or not given\")\n+  require(firstByte.getOrElse(0L) <= lastByte.getOrElse(Long.MaxValue), s\"firstByte must be less than lastByte\")\n+  require(instanceLength.getOrElse(0L) >= 0, s\"instanceLength must be non negative\")\n+  require(instanceLength.getOrElse(Long.MaxValue) > lastByte.getOrElse(0L), s\"instanceLength must be greater than lastByte\")\n+  */\n+\n+  def render[R <: Rendering](r: R): r.type = {\n+    r ~~ \"bytes \"\n+    if (firstByte.isEmpty || lastByte.isEmpty) {\n+      r ~~ \"*\"\n+    } else {\n+      r ~~ firstByte.get ~~ '-' ~~ lastByte.get\n+    }\n+    if (instanceLength.isDefined)\n+      r ~~ '/' ~~ instanceLength.get.toString\n+    else\n+      r ~~ \"/*\"\n+    r\n+  }\n+}\n+\n+object ContentRange {\n+\n+  def unsatisfiable(instanceLength: Long): ContentRange = ContentRange(None, None, Some(instanceLength))\n+  def apply(firstByte: Long, lastByte: Long, instanceLength: Long): ContentRange = ContentRange(Some(firstByte), Some(lastByte), Some(instanceLength))\n+  def apply(firstByte: Long, lastByte: Long): ContentRange = ContentRange(Some(firstByte), Some(lastByte), None)",
        "path": "spray-http/src/main/scala/spray/http/ContentRange.scala",
        "position": null,
        "original_position": 49,
        "commit_id": "e2fce5b18b6a8f358c8b17354468e643ce29be3e",
        "original_commit_id": "bac0b505be53b5c7d3c1290463a537c9b72cd70a",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Looking at these `apply`s: maybe an ADT (sealed trait with 2 or 3 implementing model case classes) would better express the different possible content range types that we need to support?\n",
        "created_at": "2014-03-03T14:56:02Z",
        "updated_at": "2014-03-07T12:44:21Z",
        "html_url": "https://github.com/spray/spray/pull/612#discussion_r10212332",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/612",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10212332"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/612#discussion_r10212332"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/612"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10212459",
        "pull_request_review_id": null,
        "id": 10212459,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjEyNDU5",
        "diff_hunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright (C) 2011-2013 spray.io\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.http\n+package parser\n+\n+import org.parboiled.scala._\n+import BasicRules._\n+\n+private[parser] trait AcceptRangesHeader {\n+  this: Parser with ProtocolParameterRules \u21d2\n+\n+  def `*Accept-Ranges` = rule(AcceptableRanges) ~ EOI ~~> (HttpHeaders.`Accept-Ranges`(_))\n+\n+  def AcceptableRanges = rule { str(\"none\") ~> (_ \u21d2 Nil) | oneOrMore(RangeUnit, separator = ListSep) }",
        "path": "spray-http/src/main/scala/spray/http/parser/AcceptRangesHeader.scala",
        "position": null,
        "original_position": 28,
        "commit_id": "e2fce5b18b6a8f358c8b17354468e643ce29be3e",
        "original_commit_id": "bac0b505be53b5c7d3c1290463a537c9b72cd70a",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "better:\n\n```\nrule { \"none\" ~ push(Nil) | oneOrMore(RangeUnit, separator = ListSep) }\n```\n",
        "created_at": "2014-03-03T14:59:10Z",
        "updated_at": "2014-03-07T12:44:21Z",
        "html_url": "https://github.com/spray/spray/pull/612#discussion_r10212459",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/612",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10212459"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/612#discussion_r10212459"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/612"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10212494",
        "pull_request_review_id": null,
        "id": 10212494,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjEyNDk0",
        "diff_hunk": "@@ -44,6 +44,8 @@ private[parser] object BasicRules extends Parser {\n \n   def LWS = rule { optional(CRLF) ~ oneOrMore(anyOf(\" \\t\")) }\n \n+  def SP = rule { str(\" \") }",
        "path": "spray-http/src/main/scala/spray/http/parser/BasicRules.scala",
        "position": 4,
        "original_position": 4,
        "commit_id": "e2fce5b18b6a8f358c8b17354468e643ce29be3e",
        "original_commit_id": "bac0b505be53b5c7d3c1290463a537c9b72cd70a",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "better:\n\n```\nrule { ch(' ') }\n```\n",
        "created_at": "2014-03-03T15:00:18Z",
        "updated_at": "2014-03-07T12:44:21Z",
        "html_url": "https://github.com/spray/spray/pull/612#discussion_r10212494",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/612",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10212494"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/612#discussion_r10212494"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/612"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10212575",
        "pull_request_review_id": null,
        "id": 10212575,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjEyNTc1",
        "diff_hunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright (C) 2011-2013 spray.io\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.http\n+package parser\n+\n+import org.parboiled.scala._\n+import spray.http.parser.BasicRules._\n+\n+/**\n+ * content-range-spec      = byte-content-range-spec\n+ * byte-content-range-spec = bytes-unit SP byte-range-resp-spec \"/\" ( instance-length | \"*\" )\n+ * byte-range-resp-spec    = (first-byte-pos \"-\" last-byte-pos) | \"*\"\n+ * instance-length         = 1*DIGIT\n+ */\n+private[parser] trait ContentRangeHeader {\n+  this: Parser with ProtocolParameterRules with RangeHeader \u21d2\n+\n+  def `*Content-Range` = rule(ContentRangeSpec) ~ EOI ~~> ((range, length) \u21d2 { HttpHeaders.`Content-Range`(ContentRange(range.map(_._1), range.map(_._2), length)) })\n+  def ContentRangeSpec = rule { ByteContentRangeSpec }\n+  def ByteContentRangeSpec = rule { BytesUnit ~ DROP ~ SP ~ BytesRangeResponseSpec ~ ch('/') ~ ((InstanceLength ~~> (a \u21d2 Some(a))) | ch('*') ~> (_ \u21d2 None)) }\n+  def BytesRangeResponseSpec = rule { (FirstBytePosition ~ ch('-') ~ LastBytePosition) ~~> ((a, b) \u21d2 Some(a, b)) | ch('*') ~> (_ \u21d2 None) }",
        "path": "spray-http/src/main/scala/spray/http/parser/ContentRangeHeader.scala",
        "position": null,
        "original_position": 35,
        "commit_id": "e2fce5b18b6a8f358c8b17354468e643ce29be3e",
        "original_commit_id": "bac0b505be53b5c7d3c1290463a537c9b72cd70a",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "better:\n\n```\nrule { (FirstBytePosition ~ ch('-') ~ LastBytePosition) ~~> (Some(_, _)) | ch('*') ~ push(None) }\n```\n",
        "created_at": "2014-03-03T15:02:41Z",
        "updated_at": "2014-03-07T12:44:21Z",
        "html_url": "https://github.com/spray/spray/pull/612#discussion_r10212575",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/612",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10212575"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/612#discussion_r10212575"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/612"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10212750",
        "pull_request_review_id": null,
        "id": 10212750,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjEyNzUw",
        "diff_hunk": "@@ -150,4 +150,13 @@ private[parser] trait ProtocolParameterRules {\n   def EntityTag = rule { optional(\"W/\") ~ OpaqueTag }\n \n   def OpaqueTag = rule { QuotedString }\n+\n+  /* 3.12 Range Units */\n+\n+  def RangeUnit = rule { BytesUnit | OtherRangeUnit }\n+\n+  def BytesUnit = rule { ignoreCase(\"bytes\") ~> (_ \u21d2 spray.http.BytesUnit) }",
        "path": "spray-http/src/main/scala/spray/http/parser/ProtocolParameterRules.scala",
        "position": null,
        "original_position": 9,
        "commit_id": "e2fce5b18b6a8f358c8b17354468e643ce29be3e",
        "original_commit_id": "bac0b505be53b5c7d3c1290463a537c9b72cd70a",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "better:\n\n```\nrule { ignoreCase(\"bytes\") ~ push(spray.http.BytesUnit) }\n```\n",
        "created_at": "2014-03-03T15:06:58Z",
        "updated_at": "2014-03-07T12:44:21Z",
        "html_url": "https://github.com/spray/spray/pull/612#discussion_r10212750",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/612",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10212750"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/612#discussion_r10212750"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/612"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10212778",
        "pull_request_review_id": null,
        "id": 10212778,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjEyNzc4",
        "diff_hunk": "@@ -150,4 +150,13 @@ private[parser] trait ProtocolParameterRules {\n   def EntityTag = rule { optional(\"W/\") ~ OpaqueTag }\n \n   def OpaqueTag = rule { QuotedString }\n+\n+  /* 3.12 Range Units */\n+\n+  def RangeUnit = rule { BytesUnit | OtherRangeUnit }\n+\n+  def BytesUnit = rule { ignoreCase(\"bytes\") ~> (_ \u21d2 spray.http.BytesUnit) }\n+\n+  def OtherRangeUnit = rule { Token ~~> (s \u21d2 spray.http.OtherRangeUnit(s)) }",
        "path": "spray-http/src/main/scala/spray/http/parser/ProtocolParameterRules.scala",
        "position": null,
        "original_position": 11,
        "commit_id": "e2fce5b18b6a8f358c8b17354468e643ce29be3e",
        "original_commit_id": "bac0b505be53b5c7d3c1290463a537c9b72cd70a",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "better:\n\n```\nrule { Token ~~> spray.http.OtherRangeUnit }\n```\n",
        "created_at": "2014-03-03T15:07:38Z",
        "updated_at": "2014-03-07T12:44:21Z",
        "html_url": "https://github.com/spray/spray/pull/612#discussion_r10212778",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/612",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10212778"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/612#discussion_r10212778"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/612"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10212909",
        "pull_request_review_id": null,
        "id": 10212909,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjEyOTA5",
        "diff_hunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright (C) 2011-2013 spray.io\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.http.parser\n+\n+import org.parboiled.scala._\n+import spray.http.parser.BasicRules._\n+import spray.http.{ HttpHeaders, SuffixByteRange, ByteRange }\n+\n+/**\n+ * From RFC 2616  14.35.1 Byte Ranges\n+ *\n+ * ranges-specifier = byte-ranges-specifier\n+ * byte-ranges-specifier = bytes-unit \"=\" byte-range-set\n+ * byte-range-set  = 1#( byte-range-spec | suffix-byte-range-spec )\n+ * byte-range-spec = first-byte-pos \"-\" [last-byte-pos]\n+ * first-byte-pos  = 1*DIGIT\n+ * last-byte-pos   = 1*DIGIT\n+ * suffix-byte-range-spec = \"-\" suffix-length\n+ * suffix-length = 1*DIGIT\n+ */\n+private[parser] trait RangeHeader {\n+  this: Parser with ProtocolParameterRules \u21d2\n+\n+  def `*Range` = rule(RangesSpecifier) ~ EOI ~~> ((ranges) \u21d2 {\n+    HttpHeaders.Range(ranges)\n+  })\n+\n+  def RangesSpecifier = rule { ByteRangesSpecifier }\n+  def ByteRangesSpecifier = rule { BytesUnit ~ DROP ~ ch('=') ~ ByteRangeSet }\n+  def ByteRangeSet = rule { oneOrMore(ByteRangeSpec | SuffixByteRangeSpec, separator = ListSep) }\n+  def ByteRangeSpec = rule { FirstBytePosition ~ ch('-') ~ optional(LastBytePosition) ~~> ((a, b) \u21d2 ByteRange(a, b)) }\n+  def FirstBytePosition = rule { oneOrMore(Digit) ~> (_.toLong) }\n+  def LastBytePosition = rule { oneOrMore(Digit) ~> (_.toLong) }\n+  def SuffixByteRangeSpec = rule { ch('-') ~ SuffixLength ~~> (a \u21d2 SuffixByteRange(a)) }\n+  def SuffixLength = rule { oneOrMore(Digit) ~> (_.toLong) }",
        "path": "spray-http/src/main/scala/spray/http/parser/RangeHeader.scala",
        "position": null,
        "original_position": 49,
        "commit_id": "e2fce5b18b6a8f358c8b17354468e643ce29be3e",
        "original_commit_id": "bac0b505be53b5c7d3c1290463a537c9b72cd70a",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Maybe factor out the several `oneOrMore(Digit) ~> (_.toLong)` into a helper rule?\n",
        "created_at": "2014-03-03T15:11:02Z",
        "updated_at": "2014-03-07T12:44:21Z",
        "html_url": "https://github.com/spray/spray/pull/612#discussion_r10212909",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/612",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10212909"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/612#discussion_r10212909"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/612"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10212992",
        "pull_request_review_id": null,
        "id": 10212992,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjEyOTky",
        "diff_hunk": "@@ -96,6 +96,12 @@ class HttpHeaderSpec extends Specification {\n       \"Access-Control-Request-Method: POST\" =!= `Access-Control-Request-Method`(POST)\n     }\n \n+    \"Accept-Ranges\" in {\n+      \"Accept-Ranges: bytes\" =!= `Accept-Ranges`(BytesUnit)\n+      \"Accept-Ranges: bytes, sausages\" =!= `Accept-Ranges`(BytesUnit, OtherRangeUnit(\"sausages\"))",
        "path": "spray-http/src/test/scala/spray/http/HttpHeaderSpec.scala",
        "position": null,
        "original_position": 6,
        "commit_id": "e2fce5b18b6a8f358c8b17354468e643ce29be3e",
        "original_commit_id": "bac0b505be53b5c7d3c1290463a537c9b72cd70a",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Nice, I like the sausages! :)\n",
        "created_at": "2014-03-03T15:12:56Z",
        "updated_at": "2014-03-07T12:44:21Z",
        "html_url": "https://github.com/spray/spray/pull/612#discussion_r10212992",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/612",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10212992"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/612#discussion_r10212992"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/612"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10213144",
        "pull_request_review_id": null,
        "id": 10213144,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjEzMTQ0",
        "diff_hunk": "@@ -24,6 +24,7 @@ import spray.util._\n import MediaTypes._\n import HttpHeaders._\n import HttpCharsets._\n+import scala.Some",
        "path": "spray-routing-tests/src/test/scala/spray/routing/FileAndResourceDirectivesSpec.scala",
        "position": null,
        "original_position": 4,
        "commit_id": "e2fce5b18b6a8f358c8b17354468e643ce29be3e",
        "original_commit_id": "bac0b505be53b5c7d3c1290463a537c9b72cd70a",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "IDE \"mal-import\" :)\n",
        "created_at": "2014-03-03T15:16:04Z",
        "updated_at": "2014-03-07T12:44:21Z",
        "html_url": "https://github.com/spray/spray/pull/612#discussion_r10213144",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/612",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10213144"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/612#discussion_r10213144"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/612"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10213176",
        "pull_request_review_id": null,
        "id": 10213176,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjEzMTc2",
        "diff_hunk": "@@ -63,6 +64,28 @@ class FileAndResourceDirectivesSpec extends RoutingSpec {\n       }\n       file.delete\n     }\n+\n+    \"return a partial file with a single requested range\" in {\n+      val file = File.createTempFile(\"partialTest\", null)\n+      FileUtils.writeAllText(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", file)\n+      Get() ~> addHeader(Range(ByteRange(0, 10))) ~> getFromFile(file) ~> check {\n+        body.asString === \"ABCDEFGHIJK\"\n+        status === StatusCodes.PartialContent\n+        headers must contain(`Content-Range`(ContentRange(0, 10, 26)))\n+      }\n+    }",
        "path": "spray-routing-tests/src/test/scala/spray/routing/FileAndResourceDirectivesSpec.scala",
        "position": null,
        "original_position": 30,
        "commit_id": "e2fce5b18b6a8f358c8b17354468e643ce29be3e",
        "original_commit_id": "bac0b505be53b5c7d3c1290463a537c9b72cd70a",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Please add a `file.delete` here\n",
        "created_at": "2014-03-03T15:16:55Z",
        "updated_at": "2014-03-07T12:44:21Z",
        "html_url": "https://github.com/spray/spray/pull/612#discussion_r10213176",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/612",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10213176"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/612#discussion_r10213176"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/612"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10213222",
        "pull_request_review_id": null,
        "id": 10213222,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjEzMjIy",
        "diff_hunk": "@@ -63,6 +64,28 @@ class FileAndResourceDirectivesSpec extends RoutingSpec {\n       }\n       file.delete\n     }\n+\n+    \"return a partial file with a single requested range\" in {\n+      val file = File.createTempFile(\"partialTest\", null)\n+      FileUtils.writeAllText(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", file)\n+      Get() ~> addHeader(Range(ByteRange(0, 10))) ~> getFromFile(file) ~> check {\n+        body.asString === \"ABCDEFGHIJK\"\n+        status === StatusCodes.PartialContent\n+        headers must contain(`Content-Range`(ContentRange(0, 10, 26)))\n+      }\n+    }\n+\n+    \"return a partial file with multiple requested ranges\" in {\n+      val file = File.createTempFile(\"partialTest\", null)\n+      FileUtils.writeAllText(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", file)\n+      Get() ~> addHeader(Range(ByteRange(0, 10), SuffixByteRange(10))) ~> getFromFile(file) ~> check {\n+        //responseAs[MultipartByteRanges].parts",
        "path": "spray-routing-tests/src/test/scala/spray/routing/FileAndResourceDirectivesSpec.scala",
        "position": null,
        "original_position": 36,
        "commit_id": "e2fce5b18b6a8f358c8b17354468e643ce29be3e",
        "original_commit_id": "bac0b505be53b5c7d3c1290463a537c9b72cd70a",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "No commented out code please (as it's unclear what its purpose is).\n",
        "created_at": "2014-03-03T15:18:00Z",
        "updated_at": "2014-03-07T12:44:21Z",
        "html_url": "https://github.com/spray/spray/pull/612#discussion_r10213222",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/612",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10213222"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/612#discussion_r10213222"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/612"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10213282",
        "pull_request_review_id": null,
        "id": 10213282,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjEzMjgy",
        "diff_hunk": "@@ -63,6 +64,28 @@ class FileAndResourceDirectivesSpec extends RoutingSpec {\n       }\n       file.delete\n     }\n+\n+    \"return a partial file with a single requested range\" in {",
        "path": "spray-routing-tests/src/test/scala/spray/routing/FileAndResourceDirectivesSpec.scala",
        "position": null,
        "original_position": 22,
        "commit_id": "e2fce5b18b6a8f358c8b17354468e643ce29be3e",
        "original_commit_id": "bac0b505be53b5c7d3c1290463a537c9b72cd70a",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "How about we add another test with a range that doesn't start at zero?\nI think we should have a test for every type of range definition that we support.\n",
        "created_at": "2014-03-03T15:19:33Z",
        "updated_at": "2014-03-07T12:44:21Z",
        "html_url": "https://github.com/spray/spray/pull/612#discussion_r10213282",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/612",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10213282"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/612#discussion_r10213282"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/612"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10213331",
        "pull_request_review_id": null,
        "id": 10213331,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjEzMzMx",
        "diff_hunk": "@@ -63,6 +64,28 @@ class FileAndResourceDirectivesSpec extends RoutingSpec {\n       }\n       file.delete\n     }\n+\n+    \"return a partial file with a single requested range\" in {\n+      val file = File.createTempFile(\"partialTest\", null)\n+      FileUtils.writeAllText(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", file)\n+      Get() ~> addHeader(Range(ByteRange(0, 10))) ~> getFromFile(file) ~> check {\n+        body.asString === \"ABCDEFGHIJK\"\n+        status === StatusCodes.PartialContent\n+        headers must contain(`Content-Range`(ContentRange(0, 10, 26)))\n+      }\n+    }\n+\n+    \"return a partial file with multiple requested ranges\" in {\n+      val file = File.createTempFile(\"partialTest\", null)\n+      FileUtils.writeAllText(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", file)\n+      Get() ~> addHeader(Range(ByteRange(0, 10), SuffixByteRange(10))) ~> getFromFile(file) ~> check {\n+        //responseAs[MultipartByteRanges].parts\n+        status === StatusCodes.PartialContent\n+        headers must not(haveOneElementLike { case `Content-Range`(_) \u21d2 ok })\n+        mediaType.withParameters(Map.empty) === `multipart/byteranges`\n+      }\n+    }",
        "path": "spray-routing-tests/src/test/scala/spray/routing/FileAndResourceDirectivesSpec.scala",
        "position": null,
        "original_position": 41,
        "commit_id": "e2fce5b18b6a8f358c8b17354468e643ce29be3e",
        "original_commit_id": "bac0b505be53b5c7d3c1290463a537c9b72cd70a",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Please add a `file.delete` here\n",
        "created_at": "2014-03-03T15:20:38Z",
        "updated_at": "2014-03-07T12:44:21Z",
        "html_url": "https://github.com/spray/spray/pull/612#discussion_r10213331",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/612",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10213331"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/612#discussion_r10213331"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/612"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10213406",
        "pull_request_review_id": null,
        "id": 10213406,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjEzNDA2",
        "diff_hunk": "@@ -29,4 +29,11 @@ spray.routing {\n   users {\n     # bob = secret\n   }\n+\n+  # the maximum size between two requested ranges. Ranges with less space in between will be coalesced.\n+  range-coalesce-threshold = 80\n+\n+  # the maximum number of allowed ranges per request. Requests with more ranges will be rejected due to DOS suspicion.\n+  range-count-limit = 16",
        "path": "spray-routing/src/main/resources/reference.conf",
        "position": null,
        "original_position": 9,
        "commit_id": "e2fce5b18b6a8f358c8b17354468e643ce29be3e",
        "original_commit_id": "bac0b505be53b5c7d3c1290463a537c9b72cd70a",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Nice!\n",
        "created_at": "2014-03-03T15:22:20Z",
        "updated_at": "2014-03-07T12:44:21Z",
        "html_url": "https://github.com/spray/spray/pull/612#discussion_r10213406",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/612",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10213406"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/612#discussion_r10213406"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/612"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10213419",
        "pull_request_review_id": null,
        "id": 10213419,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjEzNDE5",
        "diff_hunk": "@@ -29,4 +29,11 @@ spray.routing {\n   users {\n     # bob = secret\n   }\n+\n+  # the maximum size between two requested ranges. Ranges with less space in between will be coalesced.\n+  range-coalesce-threshold = 80",
        "path": "spray-routing/src/main/resources/reference.conf",
        "position": null,
        "original_position": 6,
        "commit_id": "e2fce5b18b6a8f358c8b17354468e643ce29be3e",
        "original_commit_id": "bac0b505be53b5c7d3c1290463a537c9b72cd70a",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Also nice!\n",
        "created_at": "2014-03-03T15:22:35Z",
        "updated_at": "2014-03-07T12:44:21Z",
        "html_url": "https://github.com/spray/spray/pull/612#discussion_r10213419",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/612",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10213419"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/612#discussion_r10213419"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/612"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10213638",
        "pull_request_review_id": null,
        "id": 10213638,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjEzNjM4",
        "diff_hunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright \u00a9 2011-2013 the spray project <http://spray.io>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.routing\n+package directives\n+\n+import spray.http.HttpHeaders.{ Range, `Accept-Ranges`, `Content-Range` }\n+import spray.http._\n+import shapeless.HNil\n+import scala.annotation.tailrec\n+import scala.Some\n+import spray.http.HttpResponse\n+import spray.routing.UnsatisfiableRangeRejection\n+import spray.http.SuffixByteRange\n+\n+trait RangeDirectives {\n+  import BasicDirectives._\n+  import MethodDirectives.get\n+  import RespondWithDirectives.respondWithHeader\n+  import StatusCodes.PartialContent\n+\n+  def supportRangedRequests()(implicit settings: RoutingSettings): Directive0 = supportRangedRequests(settings.rangeCountLimit, settings.rangeCoalesceThreshold)",
        "path": "spray-routing/src/main/scala/spray/routing/directives/RangeDirectives.scala",
        "position": null,
        "original_position": 35,
        "commit_id": "e2fce5b18b6a8f358c8b17354468e643ce29be3e",
        "original_commit_id": "bac0b505be53b5c7d3c1290463a537c9b72cd70a",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think I'd prefer the name `withRangeSupport` for the directive.\nBut maybe @jrudolph has a better idea.\n",
        "created_at": "2014-03-03T15:27:11Z",
        "updated_at": "2014-03-07T12:44:21Z",
        "html_url": "https://github.com/spray/spray/pull/612#discussion_r10213638",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/612",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10213638"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/612#discussion_r10213638"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/612"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10213719",
        "pull_request_review_id": null,
        "id": 10213719,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjEzNzE5",
        "diff_hunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright \u00a9 2011-2013 the spray project <http://spray.io>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.routing\n+package directives\n+\n+import spray.http.HttpHeaders.{ Range, `Accept-Ranges`, `Content-Range` }\n+import spray.http._\n+import shapeless.HNil\n+import scala.annotation.tailrec\n+import scala.Some\n+import spray.http.HttpResponse\n+import spray.routing.UnsatisfiableRangeRejection\n+import spray.http.SuffixByteRange\n+\n+trait RangeDirectives {\n+  import BasicDirectives._\n+  import MethodDirectives.get\n+  import RespondWithDirectives.respondWithHeader\n+  import StatusCodes.PartialContent\n+\n+  def supportRangedRequests()(implicit settings: RoutingSettings): Directive0 = supportRangedRequests(settings.rangeCountLimit, settings.rangeCoalesceThreshold)\n+\n+  def supportRangedRequests(rangeCountLimit: Int, rangeCoalesceThreshold: Long): Directive0 = (get & respondWithAcceptByteRangesHeader & applyRanges(rangeCountLimit, rangeCoalesceThreshold)) | pass\n+\n+  private val respondWithAcceptByteRangesHeader: Directive0 = respondWithHeader(`Accept-Ranges`(BytesUnit))\n+\n+  private def applyRanges(rangeCountLimit: Int, rangeCoalesceThreshold: Long): Directive0 = {\n+    extract(_.request.header[Range]).flatMap[HNil] {\n+      case None                \u21d2 pass\n+      case Some(Range(ranges)) \u21d2 applyMultipleRanges(rangeCountLimit, rangeCoalesceThreshold)(ranges)\n+    }\n+  }\n+\n+  private def applyMultipleRanges(rangeCountLimit: Int, rangeCoalesceThreshold: Long)(requestedRanges: Seq[ByteRangeSetEntry]): Directive0 = {",
        "path": "spray-routing/src/main/scala/spray/routing/directives/RangeDirectives.scala",
        "position": null,
        "original_position": 48,
        "commit_id": "e2fce5b18b6a8f358c8b17354468e643ce29be3e",
        "original_commit_id": "bac0b505be53b5c7d3c1290463a537c9b72cd70a",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Why the second parameter list? Can we get away with only a single one?\n",
        "created_at": "2014-03-03T15:28:56Z",
        "updated_at": "2014-03-07T12:44:21Z",
        "html_url": "https://github.com/spray/spray/pull/612#discussion_r10213719",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/612",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10213719"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/612#discussion_r10213719"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/612"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10213774",
        "pull_request_review_id": null,
        "id": 10213774,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjEzNzc0",
        "diff_hunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright \u00a9 2011-2013 the spray project <http://spray.io>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.routing\n+package directives\n+\n+import spray.http.HttpHeaders.{ Range, `Accept-Ranges`, `Content-Range` }\n+import spray.http._\n+import shapeless.HNil\n+import scala.annotation.tailrec\n+import scala.Some\n+import spray.http.HttpResponse\n+import spray.routing.UnsatisfiableRangeRejection\n+import spray.http.SuffixByteRange\n+\n+trait RangeDirectives {\n+  import BasicDirectives._\n+  import MethodDirectives.get\n+  import RespondWithDirectives.respondWithHeader\n+  import StatusCodes.PartialContent\n+\n+  def supportRangedRequests()(implicit settings: RoutingSettings): Directive0 = supportRangedRequests(settings.rangeCountLimit, settings.rangeCoalesceThreshold)",
        "path": "spray-routing/src/main/scala/spray/routing/directives/RangeDirectives.scala",
        "position": null,
        "original_position": 35,
        "commit_id": "e2fce5b18b6a8f358c8b17354468e643ce29be3e",
        "original_commit_id": "bac0b505be53b5c7d3c1290463a537c9b72cd70a",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "And I think we should have a short scaladoc.\n",
        "created_at": "2014-03-03T15:29:48Z",
        "updated_at": "2014-03-07T12:44:21Z",
        "html_url": "https://github.com/spray/spray/pull/612#discussion_r10213774",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/612",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10213774"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/612#discussion_r10213774"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/612"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10213972",
        "pull_request_review_id": null,
        "id": 10213972,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjEzOTcy",
        "diff_hunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright \u00a9 2011-2013 the spray project <http://spray.io>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.routing\n+package directives\n+\n+import spray.http.HttpHeaders.{ Range, `Accept-Ranges`, `Content-Range` }\n+import spray.http._\n+import shapeless.HNil\n+import scala.annotation.tailrec\n+import scala.Some\n+import spray.http.HttpResponse\n+import spray.routing.UnsatisfiableRangeRejection\n+import spray.http.SuffixByteRange\n+\n+trait RangeDirectives {\n+  import BasicDirectives._\n+  import MethodDirectives.get\n+  import RespondWithDirectives.respondWithHeader\n+  import StatusCodes.PartialContent\n+\n+  def supportRangedRequests()(implicit settings: RoutingSettings): Directive0 = supportRangedRequests(settings.rangeCountLimit, settings.rangeCoalesceThreshold)\n+\n+  def supportRangedRequests(rangeCountLimit: Int, rangeCoalesceThreshold: Long): Directive0 = (get & respondWithAcceptByteRangesHeader & applyRanges(rangeCountLimit, rangeCoalesceThreshold)) | pass\n+\n+  private val respondWithAcceptByteRangesHeader: Directive0 = respondWithHeader(`Accept-Ranges`(BytesUnit))\n+\n+  private def applyRanges(rangeCountLimit: Int, rangeCoalesceThreshold: Long): Directive0 = {\n+    extract(_.request.header[Range]).flatMap[HNil] {\n+      case None                \u21d2 pass\n+      case Some(Range(ranges)) \u21d2 applyMultipleRanges(rangeCountLimit, rangeCoalesceThreshold)(ranges)\n+    }\n+  }\n+\n+  private def applyMultipleRanges(rangeCountLimit: Int, rangeCoalesceThreshold: Long)(requestedRanges: Seq[ByteRangeSetEntry]): Directive0 = {\n+    mapRequestContext { ctx \u21d2\n+      ctx.withRouteResponseHandling {\n+        case HttpResponse(status, HttpEntity.NonEmpty(contentType, data), headers, _) \u21d2 {\n+          val entityLength = data.length\n+          val satisfiableRanges = requestedRanges.filter(satisfiableRange(entityLength))\n+          if (requestedRanges.length > rangeCountLimit) {",
        "path": "spray-routing/src/main/scala/spray/routing/directives/RangeDirectives.scala",
        "position": null,
        "original_position": 54,
        "commit_id": "e2fce5b18b6a8f358c8b17354468e643ce29be3e",
        "original_commit_id": "bac0b505be53b5c7d3c1290463a537c9b72cd70a",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "As this condition doesn't depend on the response at all we can pull it out of the `withRouteResponseHandling` and complete the request even without running our inner route.\n",
        "created_at": "2014-03-03T15:33:18Z",
        "updated_at": "2014-03-07T12:44:21Z",
        "html_url": "https://github.com/spray/spray/pull/612#discussion_r10213972",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/612",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10213972"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/612#discussion_r10213972"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/612"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10214120",
        "pull_request_review_id": null,
        "id": 10214120,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjE0MTIw",
        "diff_hunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright \u00a9 2011-2013 the spray project <http://spray.io>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.routing\n+package directives\n+\n+import spray.http.HttpHeaders.{ Range, `Accept-Ranges`, `Content-Range` }\n+import spray.http._\n+import shapeless.HNil\n+import scala.annotation.tailrec\n+import scala.Some\n+import spray.http.HttpResponse\n+import spray.routing.UnsatisfiableRangeRejection\n+import spray.http.SuffixByteRange\n+\n+trait RangeDirectives {\n+  import BasicDirectives._\n+  import MethodDirectives.get\n+  import RespondWithDirectives.respondWithHeader\n+  import StatusCodes.PartialContent\n+\n+  def supportRangedRequests()(implicit settings: RoutingSettings): Directive0 = supportRangedRequests(settings.rangeCountLimit, settings.rangeCoalesceThreshold)\n+\n+  def supportRangedRequests(rangeCountLimit: Int, rangeCoalesceThreshold: Long): Directive0 = (get & respondWithAcceptByteRangesHeader & applyRanges(rangeCountLimit, rangeCoalesceThreshold)) | pass\n+\n+  private val respondWithAcceptByteRangesHeader: Directive0 = respondWithHeader(`Accept-Ranges`(BytesUnit))\n+\n+  private def applyRanges(rangeCountLimit: Int, rangeCoalesceThreshold: Long): Directive0 = {\n+    extract(_.request.header[Range]).flatMap[HNil] {\n+      case None                \u21d2 pass\n+      case Some(Range(ranges)) \u21d2 applyMultipleRanges(rangeCountLimit, rangeCoalesceThreshold)(ranges)\n+    }\n+  }\n+\n+  private def applyMultipleRanges(rangeCountLimit: Int, rangeCoalesceThreshold: Long)(requestedRanges: Seq[ByteRangeSetEntry]): Directive0 = {\n+    mapRequestContext { ctx \u21d2\n+      ctx.withRouteResponseHandling {\n+        case HttpResponse(status, HttpEntity.NonEmpty(contentType, data), headers, _) \u21d2 {\n+          val entityLength = data.length\n+          val satisfiableRanges = requestedRanges.filter(satisfiableRange(entityLength))\n+          if (requestedRanges.length > rangeCountLimit) {\n+            ctx.reject(TooManyRangesRejection(rangeCountLimit))\n+          } else if (satisfiableRanges.isEmpty) {\n+            ctx.reject(UnsatisfiableRangeRejection(requestedRanges, entityLength))\n+          } else {\n+            val appliedRanges = satisfiableRanges.map(applyRange(entityLength))\n+\n+            if (requestedRanges.size == 1) {\n+              val appliedRange = appliedRanges(0)\n+              val contentRangeHeader: HttpHeader = `Content-Range`(ContentRange(appliedRange.firstBytePosition, appliedRange.lastBytePosition, entityLength))\n+              val partialData = data.slice(appliedRange.firstBytePosition, appliedRange.length)\n+              val partialEntity = HttpEntity(contentType, partialData)\n+              val partialResponse = HttpResponse(status = PartialContent, headers = contentRangeHeader :: headers, entity = partialEntity)\n+              ctx.complete(partialResponse)\n+            } else {\n+              val coalescedRanges = coalesceRanges(rangeCoalesceThreshold)(appliedRanges)\n+              val bodyParts = coalescedRanges.map(r \u21d2\n+                ByteRangePart(HttpEntity(contentType, data.slice(r.firstBytePosition, r.length)),\n+                  Seq(`Content-Range`(ContentRange(r.firstBytePosition, r.lastBytePosition, entityLength)))))\n+              ctx.complete(PartialContent, headers, MultipartByteRanges(bodyParts))\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+\n+  private case class AppliedByteRange(firstBytePosition: Long, lastBytePosition: Long) {",
        "path": "spray-routing/src/main/scala/spray/routing/directives/RangeDirectives.scala",
        "position": null,
        "original_position": 81,
        "commit_id": "e2fce5b18b6a8f358c8b17354468e643ce29be3e",
        "original_commit_id": "bac0b505be53b5c7d3c1290463a537c9b72cd70a",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The usual convention is specifying ranges as `startIndex` (inclusively) to `endIndex` (exclusively).\nDoes breaking with this convention (by making the end index also inclusively) buy us anything here?\nAt first glance it appears to only add complexity by requiring the odd `+ 1` and `- 1` here and there.\n",
        "created_at": "2014-03-03T15:36:37Z",
        "updated_at": "2014-03-07T12:44:21Z",
        "html_url": "https://github.com/spray/spray/pull/612#discussion_r10214120",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/612",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10214120"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/612#discussion_r10214120"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/612"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10214148",
        "pull_request_review_id": null,
        "id": 10214148,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjE0MTQ4",
        "diff_hunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright \u00a9 2011-2013 the spray project <http://spray.io>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.routing\n+package directives\n+\n+import spray.http.HttpHeaders.{ Range, `Accept-Ranges`, `Content-Range` }\n+import spray.http._\n+import shapeless.HNil\n+import scala.annotation.tailrec\n+import scala.Some\n+import spray.http.HttpResponse\n+import spray.routing.UnsatisfiableRangeRejection\n+import spray.http.SuffixByteRange\n+\n+trait RangeDirectives {\n+  import BasicDirectives._\n+  import MethodDirectives.get\n+  import RespondWithDirectives.respondWithHeader\n+  import StatusCodes.PartialContent\n+\n+  def supportRangedRequests()(implicit settings: RoutingSettings): Directive0 = supportRangedRequests(settings.rangeCountLimit, settings.rangeCoalesceThreshold)\n+\n+  def supportRangedRequests(rangeCountLimit: Int, rangeCoalesceThreshold: Long): Directive0 = (get & respondWithAcceptByteRangesHeader & applyRanges(rangeCountLimit, rangeCoalesceThreshold)) | pass\n+\n+  private val respondWithAcceptByteRangesHeader: Directive0 = respondWithHeader(`Accept-Ranges`(BytesUnit))\n+\n+  private def applyRanges(rangeCountLimit: Int, rangeCoalesceThreshold: Long): Directive0 = {\n+    extract(_.request.header[Range]).flatMap[HNil] {\n+      case None                \u21d2 pass\n+      case Some(Range(ranges)) \u21d2 applyMultipleRanges(rangeCountLimit, rangeCoalesceThreshold)(ranges)\n+    }\n+  }\n+\n+  private def applyMultipleRanges(rangeCountLimit: Int, rangeCoalesceThreshold: Long)(requestedRanges: Seq[ByteRangeSetEntry]): Directive0 = {\n+    mapRequestContext { ctx \u21d2\n+      ctx.withRouteResponseHandling {\n+        case HttpResponse(status, HttpEntity.NonEmpty(contentType, data), headers, _) \u21d2 {\n+          val entityLength = data.length\n+          val satisfiableRanges = requestedRanges.filter(satisfiableRange(entityLength))\n+          if (requestedRanges.length > rangeCountLimit) {\n+            ctx.reject(TooManyRangesRejection(rangeCountLimit))\n+          } else if (satisfiableRanges.isEmpty) {\n+            ctx.reject(UnsatisfiableRangeRejection(requestedRanges, entityLength))\n+          } else {\n+            val appliedRanges = satisfiableRanges.map(applyRange(entityLength))\n+\n+            if (requestedRanges.size == 1) {\n+              val appliedRange = appliedRanges(0)\n+              val contentRangeHeader: HttpHeader = `Content-Range`(ContentRange(appliedRange.firstBytePosition, appliedRange.lastBytePosition, entityLength))\n+              val partialData = data.slice(appliedRange.firstBytePosition, appliedRange.length)\n+              val partialEntity = HttpEntity(contentType, partialData)\n+              val partialResponse = HttpResponse(status = PartialContent, headers = contentRangeHeader :: headers, entity = partialEntity)\n+              ctx.complete(partialResponse)\n+            } else {\n+              val coalescedRanges = coalesceRanges(rangeCoalesceThreshold)(appliedRanges)\n+              val bodyParts = coalescedRanges.map(r \u21d2\n+                ByteRangePart(HttpEntity(contentType, data.slice(r.firstBytePosition, r.length)),\n+                  Seq(`Content-Range`(ContentRange(r.firstBytePosition, r.lastBytePosition, entityLength)))))\n+              ctx.complete(PartialContent, headers, MultipartByteRanges(bodyParts))\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+\n+  private case class AppliedByteRange(firstBytePosition: Long, lastBytePosition: Long) {\n+    lazy val length: Long = lastBytePosition - firstBytePosition + 1\n+    def shortestDistanceTo(other: AppliedByteRange): Long = {\n+      if (firstBytePosition <= other.firstBytePosition) {",
        "path": "spray-routing/src/main/scala/spray/routing/directives/RangeDirectives.scala",
        "position": null,
        "original_position": 84,
        "commit_id": "e2fce5b18b6a8f358c8b17354468e643ce29be3e",
        "original_commit_id": "bac0b505be53b5c7d3c1290463a537c9b72cd70a",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "the `math.max(0, ...)` can be pulled out\n",
        "created_at": "2014-03-03T15:37:05Z",
        "updated_at": "2014-03-07T12:44:21Z",
        "html_url": "https://github.com/spray/spray/pull/612#discussion_r10214148",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/612",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10214148"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/612#discussion_r10214148"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/612"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10214180",
        "pull_request_review_id": null,
        "id": 10214180,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjE0MTgw",
        "diff_hunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright \u00a9 2011-2013 the spray project <http://spray.io>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.routing\n+package directives\n+\n+import spray.http.HttpHeaders.{ Range, `Accept-Ranges`, `Content-Range` }\n+import spray.http._\n+import shapeless.HNil\n+import scala.annotation.tailrec\n+import scala.Some\n+import spray.http.HttpResponse\n+import spray.routing.UnsatisfiableRangeRejection\n+import spray.http.SuffixByteRange\n+\n+trait RangeDirectives {\n+  import BasicDirectives._\n+  import MethodDirectives.get\n+  import RespondWithDirectives.respondWithHeader\n+  import StatusCodes.PartialContent\n+\n+  def supportRangedRequests()(implicit settings: RoutingSettings): Directive0 = supportRangedRequests(settings.rangeCountLimit, settings.rangeCoalesceThreshold)\n+\n+  def supportRangedRequests(rangeCountLimit: Int, rangeCoalesceThreshold: Long): Directive0 = (get & respondWithAcceptByteRangesHeader & applyRanges(rangeCountLimit, rangeCoalesceThreshold)) | pass\n+\n+  private val respondWithAcceptByteRangesHeader: Directive0 = respondWithHeader(`Accept-Ranges`(BytesUnit))\n+\n+  private def applyRanges(rangeCountLimit: Int, rangeCoalesceThreshold: Long): Directive0 = {\n+    extract(_.request.header[Range]).flatMap[HNil] {\n+      case None                \u21d2 pass\n+      case Some(Range(ranges)) \u21d2 applyMultipleRanges(rangeCountLimit, rangeCoalesceThreshold)(ranges)\n+    }\n+  }\n+\n+  private def applyMultipleRanges(rangeCountLimit: Int, rangeCoalesceThreshold: Long)(requestedRanges: Seq[ByteRangeSetEntry]): Directive0 = {\n+    mapRequestContext { ctx \u21d2\n+      ctx.withRouteResponseHandling {\n+        case HttpResponse(status, HttpEntity.NonEmpty(contentType, data), headers, _) \u21d2 {\n+          val entityLength = data.length\n+          val satisfiableRanges = requestedRanges.filter(satisfiableRange(entityLength))\n+          if (requestedRanges.length > rangeCountLimit) {\n+            ctx.reject(TooManyRangesRejection(rangeCountLimit))\n+          } else if (satisfiableRanges.isEmpty) {\n+            ctx.reject(UnsatisfiableRangeRejection(requestedRanges, entityLength))\n+          } else {",
        "path": "spray-routing/src/main/scala/spray/routing/directives/RangeDirectives.scala",
        "position": null,
        "original_position": 58,
        "commit_id": "e2fce5b18b6a8f358c8b17354468e643ce29be3e",
        "original_commit_id": "bac0b505be53b5c7d3c1290463a537c9b72cd70a",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Maybe you can pull out the `else` branch into a separate method? (As this one is already quite long)\n",
        "created_at": "2014-03-03T15:38:00Z",
        "updated_at": "2014-03-07T12:44:21Z",
        "html_url": "https://github.com/spray/spray/pull/612#discussion_r10214180",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/612",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10214180"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/612#discussion_r10214180"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/612"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10214224",
        "pull_request_review_id": null,
        "id": 10214224,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjE0MjI0",
        "diff_hunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright \u00a9 2011-2013 the spray project <http://spray.io>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.routing\n+package directives\n+\n+import spray.http.HttpHeaders.{ Range, `Accept-Ranges`, `Content-Range` }\n+import spray.http._\n+import shapeless.HNil\n+import scala.annotation.tailrec\n+import scala.Some\n+import spray.http.HttpResponse\n+import spray.routing.UnsatisfiableRangeRejection\n+import spray.http.SuffixByteRange\n+\n+trait RangeDirectives {\n+  import BasicDirectives._\n+  import MethodDirectives.get\n+  import RespondWithDirectives.respondWithHeader\n+  import StatusCodes.PartialContent\n+\n+  def supportRangedRequests()(implicit settings: RoutingSettings): Directive0 = supportRangedRequests(settings.rangeCountLimit, settings.rangeCoalesceThreshold)\n+\n+  def supportRangedRequests(rangeCountLimit: Int, rangeCoalesceThreshold: Long): Directive0 = (get & respondWithAcceptByteRangesHeader & applyRanges(rangeCountLimit, rangeCoalesceThreshold)) | pass\n+\n+  private val respondWithAcceptByteRangesHeader: Directive0 = respondWithHeader(`Accept-Ranges`(BytesUnit))\n+\n+  private def applyRanges(rangeCountLimit: Int, rangeCoalesceThreshold: Long): Directive0 = {\n+    extract(_.request.header[Range]).flatMap[HNil] {\n+      case None                \u21d2 pass\n+      case Some(Range(ranges)) \u21d2 applyMultipleRanges(rangeCountLimit, rangeCoalesceThreshold)(ranges)\n+    }\n+  }\n+\n+  private def applyMultipleRanges(rangeCountLimit: Int, rangeCoalesceThreshold: Long)(requestedRanges: Seq[ByteRangeSetEntry]): Directive0 = {\n+    mapRequestContext { ctx \u21d2\n+      ctx.withRouteResponseHandling {\n+        case HttpResponse(status, HttpEntity.NonEmpty(contentType, data), headers, _) \u21d2 {\n+          val entityLength = data.length\n+          val satisfiableRanges = requestedRanges.filter(satisfiableRange(entityLength))\n+          if (requestedRanges.length > rangeCountLimit) {\n+            ctx.reject(TooManyRangesRejection(rangeCountLimit))\n+          } else if (satisfiableRanges.isEmpty) {\n+            ctx.reject(UnsatisfiableRangeRejection(requestedRanges, entityLength))\n+          } else {\n+            val appliedRanges = satisfiableRanges.map(applyRange(entityLength))\n+\n+            if (requestedRanges.size == 1) {\n+              val appliedRange = appliedRanges(0)\n+              val contentRangeHeader: HttpHeader = `Content-Range`(ContentRange(appliedRange.firstBytePosition, appliedRange.lastBytePosition, entityLength))\n+              val partialData = data.slice(appliedRange.firstBytePosition, appliedRange.length)\n+              val partialEntity = HttpEntity(contentType, partialData)\n+              val partialResponse = HttpResponse(status = PartialContent, headers = contentRangeHeader :: headers, entity = partialEntity)\n+              ctx.complete(partialResponse)\n+            } else {\n+              val coalescedRanges = coalesceRanges(rangeCoalesceThreshold)(appliedRanges)\n+              val bodyParts = coalescedRanges.map(r \u21d2\n+                ByteRangePart(HttpEntity(contentType, data.slice(r.firstBytePosition, r.length)),\n+                  Seq(`Content-Range`(ContentRange(r.firstBytePosition, r.lastBytePosition, entityLength)))))\n+              ctx.complete(PartialContent, headers, MultipartByteRanges(bodyParts))\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+\n+  private case class AppliedByteRange(firstBytePosition: Long, lastBytePosition: Long) {\n+    lazy val length: Long = lastBytePosition - firstBytePosition + 1",
        "path": "spray-routing/src/main/scala/spray/routing/directives/RangeDirectives.scala",
        "position": null,
        "original_position": 82,
        "commit_id": "e2fce5b18b6a8f358c8b17354468e643ce29be3e",
        "original_commit_id": "bac0b505be53b5c7d3c1290463a537c9b72cd70a",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Why `lazy`?\n",
        "created_at": "2014-03-03T15:38:57Z",
        "updated_at": "2014-03-07T12:44:21Z",
        "html_url": "https://github.com/spray/spray/pull/612#discussion_r10214224",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/612",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10214224"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/612#discussion_r10214224"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/612"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10214334",
        "pull_request_review_id": null,
        "id": 10214334,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjE0MzM0",
        "diff_hunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright \u00a9 2011-2013 the spray project <http://spray.io>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.routing\n+package directives\n+\n+import spray.http.HttpHeaders.{ Range, `Accept-Ranges`, `Content-Range` }\n+import spray.http._\n+import shapeless.HNil\n+import scala.annotation.tailrec\n+import scala.Some\n+import spray.http.HttpResponse\n+import spray.routing.UnsatisfiableRangeRejection\n+import spray.http.SuffixByteRange\n+\n+trait RangeDirectives {\n+  import BasicDirectives._\n+  import MethodDirectives.get\n+  import RespondWithDirectives.respondWithHeader\n+  import StatusCodes.PartialContent\n+\n+  def supportRangedRequests()(implicit settings: RoutingSettings): Directive0 = supportRangedRequests(settings.rangeCountLimit, settings.rangeCoalesceThreshold)\n+\n+  def supportRangedRequests(rangeCountLimit: Int, rangeCoalesceThreshold: Long): Directive0 = (get & respondWithAcceptByteRangesHeader & applyRanges(rangeCountLimit, rangeCoalesceThreshold)) | pass\n+\n+  private val respondWithAcceptByteRangesHeader: Directive0 = respondWithHeader(`Accept-Ranges`(BytesUnit))\n+\n+  private def applyRanges(rangeCountLimit: Int, rangeCoalesceThreshold: Long): Directive0 = {\n+    extract(_.request.header[Range]).flatMap[HNil] {\n+      case None                \u21d2 pass\n+      case Some(Range(ranges)) \u21d2 applyMultipleRanges(rangeCountLimit, rangeCoalesceThreshold)(ranges)\n+    }\n+  }\n+\n+  private def applyMultipleRanges(rangeCountLimit: Int, rangeCoalesceThreshold: Long)(requestedRanges: Seq[ByteRangeSetEntry]): Directive0 = {\n+    mapRequestContext { ctx \u21d2\n+      ctx.withRouteResponseHandling {\n+        case HttpResponse(status, HttpEntity.NonEmpty(contentType, data), headers, _) \u21d2 {\n+          val entityLength = data.length\n+          val satisfiableRanges = requestedRanges.filter(satisfiableRange(entityLength))\n+          if (requestedRanges.length > rangeCountLimit) {\n+            ctx.reject(TooManyRangesRejection(rangeCountLimit))\n+          } else if (satisfiableRanges.isEmpty) {\n+            ctx.reject(UnsatisfiableRangeRejection(requestedRanges, entityLength))\n+          } else {\n+            val appliedRanges = satisfiableRanges.map(applyRange(entityLength))\n+\n+            if (requestedRanges.size == 1) {\n+              val appliedRange = appliedRanges(0)\n+              val contentRangeHeader: HttpHeader = `Content-Range`(ContentRange(appliedRange.firstBytePosition, appliedRange.lastBytePosition, entityLength))\n+              val partialData = data.slice(appliedRange.firstBytePosition, appliedRange.length)\n+              val partialEntity = HttpEntity(contentType, partialData)\n+              val partialResponse = HttpResponse(status = PartialContent, headers = contentRangeHeader :: headers, entity = partialEntity)\n+              ctx.complete(partialResponse)\n+            } else {\n+              val coalescedRanges = coalesceRanges(rangeCoalesceThreshold)(appliedRanges)\n+              val bodyParts = coalescedRanges.map(r \u21d2\n+                ByteRangePart(HttpEntity(contentType, data.slice(r.firstBytePosition, r.length)),\n+                  Seq(`Content-Range`(ContentRange(r.firstBytePosition, r.lastBytePosition, entityLength)))))\n+              ctx.complete(PartialContent, headers, MultipartByteRanges(bodyParts))\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+\n+  private case class AppliedByteRange(firstBytePosition: Long, lastBytePosition: Long) {\n+    lazy val length: Long = lastBytePosition - firstBytePosition + 1\n+    def shortestDistanceTo(other: AppliedByteRange): Long = {\n+      if (firstBytePosition <= other.firstBytePosition) {\n+        math.max(0, other.firstBytePosition - lastBytePosition)\n+      } else {\n+        math.max(0, firstBytePosition - other.lastBytePosition)\n+      }\n+    }\n+    def spanOverTo(other: AppliedByteRange): AppliedByteRange =\n+      AppliedByteRange(math.min(firstBytePosition, other.firstBytePosition), math.max(lastBytePosition, other.lastBytePosition))\n+  }\n+\n+  private def applyRange(entityLength: Long)(range: ByteRangeSetEntry): AppliedByteRange = {\n+    range match {\n+      case ByteRange(from, None)         \u21d2 AppliedByteRange(from, entityLength - 1L)\n+      case ByteRange(from, Some(to))     \u21d2 AppliedByteRange(from, math.min(to, entityLength - 1L))\n+      case SuffixByteRange(suffixLength) \u21d2 AppliedByteRange(math.max(0, entityLength - suffixLength), entityLength - 1L)\n+    }\n+  }\n+\n+  /**\n+   * When multiple ranges are requested, a server may coalesce any of the ranges that overlap or that are separated\n+   * by a gap that is smaller than the overhead of sending multiple parts, regardless of the order in which the\n+   * corresponding byte-range-spec appeared in the received Range header field. Since the typical overhead between\n+   * parts of a multipart/byteranges payload is around 80 bytes, depending on the selected representation's\n+   * media type and the chosen boundary parameter length, it can be less efficient to transfer many small\n+   * disjoint parts than it is to transfer the entire selected representation.\n+   */\n+  private def coalesceRanges(threshold: Long)(ranges: Seq[AppliedByteRange]): Seq[AppliedByteRange] = {\n+\n+    @tailrec def rec(processed: Seq[AppliedByteRange], work: Seq[AppliedByteRange]): Seq[AppliedByteRange] = {",
        "path": "spray-routing/src/main/scala/spray/routing/directives/RangeDirectives.scala",
        "position": null,
        "original_position": 112,
        "commit_id": "e2fce5b18b6a8f358c8b17354468e643ce29be3e",
        "original_commit_id": "bac0b505be53b5c7d3c1290463a537c9b72cd70a",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Isn't this a manual `foldLeft`?\n",
        "created_at": "2014-03-03T15:41:12Z",
        "updated_at": "2014-03-07T12:44:21Z",
        "html_url": "https://github.com/spray/spray/pull/612#discussion_r10214334",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/612",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10214334"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/612#discussion_r10214334"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/612"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10229826",
        "pull_request_review_id": null,
        "id": 10229826,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjI5ODI2",
        "diff_hunk": "@@ -44,6 +44,8 @@ private[parser] object BasicRules extends Parser {\n \n   def LWS = rule { optional(CRLF) ~ oneOrMore(anyOf(\" \\t\")) }\n \n+  def SP = rule { str(\" \") }",
        "path": "spray-http/src/main/scala/spray/http/parser/BasicRules.scala",
        "position": 4,
        "original_position": 4,
        "commit_id": "e2fce5b18b6a8f358c8b17354468e643ce29be3e",
        "original_commit_id": "bac0b505be53b5c7d3c1290463a537c9b72cd70a",
        "user": {
            "login": "danielwegener",
            "id": 2953619,
            "node_id": "MDQ6VXNlcjI5NTM2MTk=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/2953619?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/danielwegener",
            "html_url": "https://github.com/danielwegener",
            "followers_url": "https://api.github.com/users/danielwegener/followers",
            "following_url": "https://api.github.com/users/danielwegener/following{/other_user}",
            "gists_url": "https://api.github.com/users/danielwegener/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/danielwegener/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/danielwegener/subscriptions",
            "organizations_url": "https://api.github.com/users/danielwegener/orgs",
            "repos_url": "https://api.github.com/users/danielwegener/repos",
            "events_url": "https://api.github.com/users/danielwegener/events{/privacy}",
            "received_events_url": "https://api.github.com/users/danielwegener/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Seems like implicit resolution gets lost in the type maze:\n`No implicit view available from org.parboiled.matchers.Matcher => org.parboiled.scala.CharRule.\n def SP = rule { ch(' ') }` \nbut\n `def SP = rule { ch(' ').asInstanceOf[Rule0] }` does the trick.\n",
        "created_at": "2014-03-03T21:28:59Z",
        "updated_at": "2014-03-07T12:44:21Z",
        "html_url": "https://github.com/spray/spray/pull/612#discussion_r10229826",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/612",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10229826"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/612#discussion_r10229826"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/612"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10246479",
        "pull_request_review_id": null,
        "id": 10246479,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjQ2NDc5",
        "diff_hunk": "@@ -44,6 +44,8 @@ private[parser] object BasicRules extends Parser {\n \n   def LWS = rule { optional(CRLF) ~ oneOrMore(anyOf(\" \\t\")) }\n \n+  def SP = rule { str(\" \") }",
        "path": "spray-http/src/main/scala/spray/http/parser/BasicRules.scala",
        "position": 4,
        "original_position": 4,
        "commit_id": "e2fce5b18b6a8f358c8b17354468e643ce29be3e",
        "original_commit_id": "bac0b505be53b5c7d3c1290463a537c9b72cd70a",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Hmm... ok. No problem,\nThe `str(\" \")` is not a real problem anyway. Just pick, whatever working solution you like best.\n(We'll upgrade the parser to [parboiled2](http://parboiled2.org) anyway soon, which will provide all kinds of benefits and make this problem go away as well...)\n",
        "created_at": "2014-03-04T08:41:46Z",
        "updated_at": "2014-03-07T12:44:21Z",
        "html_url": "https://github.com/spray/spray/pull/612#discussion_r10246479",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/612",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10246479"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/612#discussion_r10246479"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/612"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10248121",
        "pull_request_review_id": null,
        "id": 10248121,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjQ4MTIx",
        "diff_hunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright \u00a9 2011-2013 the spray project <http://spray.io>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.routing\n+package directives\n+\n+import spray.http._\n+import spray.http.HttpHeaders._\n+import StatusCodes._\n+import scala.Predef._\n+import spray.routing.UnsatisfiableRangeRejection\n+import scala.Some\n+import MediaTypes.`multipart/byteranges`\n+\n+class RangeDirectivesSpec extends RoutingSpec {\n+\n+  def response(string: String): Route = {",
        "path": "spray-routing-tests/src/test/scala/spray/routing/RangeDirectivesSpec.scala",
        "position": null,
        "original_position": 30,
        "commit_id": "e2fce5b18b6a8f358c8b17354468e643ce29be3e",
        "original_commit_id": "bac0b505be53b5c7d3c1290463a537c9b72cd70a",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Isn't this the same as just `complete`?\n",
        "created_at": "2014-03-04T09:40:22Z",
        "updated_at": "2014-03-07T12:44:21Z",
        "html_url": "https://github.com/spray/spray/pull/612#discussion_r10248121",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/612",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10248121"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/612#discussion_r10248121"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/612"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10248152",
        "pull_request_review_id": null,
        "id": 10248152,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjQ4MTUy",
        "diff_hunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright \u00a9 2011-2013 the spray project <http://spray.io>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.routing\n+package directives\n+\n+import spray.http._\n+import spray.http.HttpHeaders._\n+import StatusCodes._\n+import scala.Predef._\n+import spray.routing.UnsatisfiableRangeRejection\n+import scala.Some\n+import MediaTypes.`multipart/byteranges`\n+\n+class RangeDirectivesSpec extends RoutingSpec {\n+\n+  def response(string: String): Route = {\n+    ctx \u21d2 ctx.complete(string)\n+  }\n+\n+  def bytes(length: Byte): Route = {\n+    ctx \u21d2 ctx.complete(0 to length - 1 map (_.toByte) toArray)",
        "path": "spray-routing-tests/src/test/scala/spray/routing/RangeDirectivesSpec.scala",
        "position": null,
        "original_position": 35,
        "commit_id": "e2fce5b18b6a8f358c8b17354468e643ce29be3e",
        "original_commit_id": "bac0b505be53b5c7d3c1290463a537c9b72cd70a",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "`Array.tabulate[Byte](length)(identity)`\n",
        "created_at": "2014-03-04T09:41:39Z",
        "updated_at": "2014-03-07T12:44:21Z",
        "html_url": "https://github.com/spray/spray/pull/612#discussion_r10248152",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/612",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10248152"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/612#discussion_r10248152"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/612"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10258906",
        "pull_request_review_id": null,
        "id": 10258906,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjU4OTA2",
        "diff_hunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright \u00a9 2011-2013 the spray project <http://spray.io>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.routing\n+package directives\n+\n+import spray.http.HttpHeaders.{ Range, `Accept-Ranges`, `Content-Range` }\n+import spray.http._\n+import shapeless.HNil\n+import scala.annotation.tailrec\n+import scala.Some\n+import spray.http.HttpResponse\n+import spray.routing.UnsatisfiableRangeRejection\n+import spray.http.SuffixByteRange\n+\n+trait RangeDirectives {\n+  import BasicDirectives._\n+  import MethodDirectives.get\n+  import RespondWithDirectives.respondWithHeader\n+  import StatusCodes.PartialContent\n+\n+  def supportRangedRequests()(implicit settings: RoutingSettings): Directive0 = supportRangedRequests(settings.rangeCountLimit, settings.rangeCoalesceThreshold)\n+\n+  def supportRangedRequests(rangeCountLimit: Int, rangeCoalesceThreshold: Long): Directive0 = (get & respondWithAcceptByteRangesHeader & applyRanges(rangeCountLimit, rangeCoalesceThreshold)) | pass\n+\n+  private val respondWithAcceptByteRangesHeader: Directive0 = respondWithHeader(`Accept-Ranges`(BytesUnit))\n+\n+  private def applyRanges(rangeCountLimit: Int, rangeCoalesceThreshold: Long): Directive0 = {\n+    extract(_.request.header[Range]).flatMap[HNil] {\n+      case None                \u21d2 pass\n+      case Some(Range(ranges)) \u21d2 applyMultipleRanges(rangeCountLimit, rangeCoalesceThreshold)(ranges)\n+    }\n+  }\n+\n+  private def applyMultipleRanges(rangeCountLimit: Int, rangeCoalesceThreshold: Long)(requestedRanges: Seq[ByteRangeSetEntry]): Directive0 = {\n+    mapRequestContext { ctx \u21d2\n+      ctx.withRouteResponseHandling {\n+        case HttpResponse(status, HttpEntity.NonEmpty(contentType, data), headers, _) \u21d2 {\n+          val entityLength = data.length\n+          val satisfiableRanges = requestedRanges.filter(satisfiableRange(entityLength))\n+          if (requestedRanges.length > rangeCountLimit) {\n+            ctx.reject(TooManyRangesRejection(rangeCountLimit))\n+          } else if (satisfiableRanges.isEmpty) {\n+            ctx.reject(UnsatisfiableRangeRejection(requestedRanges, entityLength))\n+          } else {\n+            val appliedRanges = satisfiableRanges.map(applyRange(entityLength))\n+\n+            if (requestedRanges.size == 1) {\n+              val appliedRange = appliedRanges(0)\n+              val contentRangeHeader: HttpHeader = `Content-Range`(ContentRange(appliedRange.firstBytePosition, appliedRange.lastBytePosition, entityLength))\n+              val partialData = data.slice(appliedRange.firstBytePosition, appliedRange.length)\n+              val partialEntity = HttpEntity(contentType, partialData)\n+              val partialResponse = HttpResponse(status = PartialContent, headers = contentRangeHeader :: headers, entity = partialEntity)\n+              ctx.complete(partialResponse)\n+            } else {\n+              val coalescedRanges = coalesceRanges(rangeCoalesceThreshold)(appliedRanges)\n+              val bodyParts = coalescedRanges.map(r \u21d2\n+                ByteRangePart(HttpEntity(contentType, data.slice(r.firstBytePosition, r.length)),\n+                  Seq(`Content-Range`(ContentRange(r.firstBytePosition, r.lastBytePosition, entityLength)))))\n+              ctx.complete(PartialContent, headers, MultipartByteRanges(bodyParts))\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+\n+  private case class AppliedByteRange(firstBytePosition: Long, lastBytePosition: Long) {",
        "path": "spray-routing/src/main/scala/spray/routing/directives/RangeDirectives.scala",
        "position": null,
        "original_position": 81,
        "commit_id": "e2fce5b18b6a8f358c8b17354468e643ce29be3e",
        "original_commit_id": "bac0b505be53b5c7d3c1290463a537c9b72cd70a",
        "user": {
            "login": "danielwegener",
            "id": 2953619,
            "node_id": "MDQ6VXNlcjI5NTM2MTk=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/2953619?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/danielwegener",
            "html_url": "https://github.com/danielwegener",
            "followers_url": "https://api.github.com/users/danielwegener/followers",
            "following_url": "https://api.github.com/users/danielwegener/following{/other_user}",
            "gists_url": "https://api.github.com/users/danielwegener/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/danielwegener/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/danielwegener/subscriptions",
            "organizations_url": "https://api.github.com/users/danielwegener/orgs",
            "repos_url": "https://api.github.com/users/danielwegener/repos",
            "events_url": "https://api.github.com/users/danielwegener/events{/privacy}",
            "received_events_url": "https://api.github.com/users/danielwegener/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "RFC2616 14.35.1 defines Byte-Ranges as fromPosition(incl.)-toPosition(incl.). I just tried to stick with the model. We could make a conceptual cut at AppliedByteRange (and calculate with startIndex and endIndex there) - but then we maybe should find a better name for it to avoid confusion with the similar named Range and ContentRange-Headers\n",
        "created_at": "2014-03-04T15:36:09Z",
        "updated_at": "2014-03-07T12:44:21Z",
        "html_url": "https://github.com/spray/spray/pull/612#discussion_r10258906",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/612",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10258906"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/612#discussion_r10258906"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/612"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10259810",
        "pull_request_review_id": null,
        "id": 10259810,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjU5ODEw",
        "diff_hunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright \u00a9 2011-2013 the spray project <http://spray.io>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.routing\n+package directives\n+\n+import spray.http.HttpHeaders.{ Range, `Accept-Ranges`, `Content-Range` }\n+import spray.http._\n+import shapeless.HNil\n+import scala.annotation.tailrec\n+import scala.Some\n+import spray.http.HttpResponse\n+import spray.routing.UnsatisfiableRangeRejection\n+import spray.http.SuffixByteRange\n+\n+trait RangeDirectives {\n+  import BasicDirectives._\n+  import MethodDirectives.get\n+  import RespondWithDirectives.respondWithHeader\n+  import StatusCodes.PartialContent\n+\n+  def supportRangedRequests()(implicit settings: RoutingSettings): Directive0 = supportRangedRequests(settings.rangeCountLimit, settings.rangeCoalesceThreshold)\n+\n+  def supportRangedRequests(rangeCountLimit: Int, rangeCoalesceThreshold: Long): Directive0 = (get & respondWithAcceptByteRangesHeader & applyRanges(rangeCountLimit, rangeCoalesceThreshold)) | pass\n+\n+  private val respondWithAcceptByteRangesHeader: Directive0 = respondWithHeader(`Accept-Ranges`(BytesUnit))\n+\n+  private def applyRanges(rangeCountLimit: Int, rangeCoalesceThreshold: Long): Directive0 = {\n+    extract(_.request.header[Range]).flatMap[HNil] {\n+      case None                \u21d2 pass\n+      case Some(Range(ranges)) \u21d2 applyMultipleRanges(rangeCountLimit, rangeCoalesceThreshold)(ranges)\n+    }\n+  }\n+\n+  private def applyMultipleRanges(rangeCountLimit: Int, rangeCoalesceThreshold: Long)(requestedRanges: Seq[ByteRangeSetEntry]): Directive0 = {\n+    mapRequestContext { ctx \u21d2\n+      ctx.withRouteResponseHandling {\n+        case HttpResponse(status, HttpEntity.NonEmpty(contentType, data), headers, _) \u21d2 {\n+          val entityLength = data.length\n+          val satisfiableRanges = requestedRanges.filter(satisfiableRange(entityLength))\n+          if (requestedRanges.length > rangeCountLimit) {\n+            ctx.reject(TooManyRangesRejection(rangeCountLimit))\n+          } else if (satisfiableRanges.isEmpty) {\n+            ctx.reject(UnsatisfiableRangeRejection(requestedRanges, entityLength))\n+          } else {\n+            val appliedRanges = satisfiableRanges.map(applyRange(entityLength))\n+\n+            if (requestedRanges.size == 1) {\n+              val appliedRange = appliedRanges(0)\n+              val contentRangeHeader: HttpHeader = `Content-Range`(ContentRange(appliedRange.firstBytePosition, appliedRange.lastBytePosition, entityLength))\n+              val partialData = data.slice(appliedRange.firstBytePosition, appliedRange.length)\n+              val partialEntity = HttpEntity(contentType, partialData)\n+              val partialResponse = HttpResponse(status = PartialContent, headers = contentRangeHeader :: headers, entity = partialEntity)\n+              ctx.complete(partialResponse)\n+            } else {\n+              val coalescedRanges = coalesceRanges(rangeCoalesceThreshold)(appliedRanges)\n+              val bodyParts = coalescedRanges.map(r \u21d2\n+                ByteRangePart(HttpEntity(contentType, data.slice(r.firstBytePosition, r.length)),\n+                  Seq(`Content-Range`(ContentRange(r.firstBytePosition, r.lastBytePosition, entityLength)))))\n+              ctx.complete(PartialContent, headers, MultipartByteRanges(bodyParts))\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+\n+  private case class AppliedByteRange(firstBytePosition: Long, lastBytePosition: Long) {",
        "path": "spray-routing/src/main/scala/spray/routing/directives/RangeDirectives.scala",
        "position": null,
        "original_position": 81,
        "commit_id": "e2fce5b18b6a8f358c8b17354468e643ce29be3e",
        "original_commit_id": "bac0b505be53b5c7d3c1290463a537c9b72cd70a",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ah, I see.\nI like your idea of limiting this double-inclusive range model to the least possible scope.\nHow about we simply rename `AppliedByteRange` like this?:\n\n```\ncase class AppliedIndexRange(startIndex: Long, endIndex: Long)\n```\n",
        "created_at": "2014-03-04T15:54:13Z",
        "updated_at": "2014-03-07T12:44:21Z",
        "html_url": "https://github.com/spray/spray/pull/612#discussion_r10259810",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/612",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10259810"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/612#discussion_r10259810"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/612"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10296205",
        "pull_request_review_id": null,
        "id": 10296205,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjk2MjA1",
        "diff_hunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright (C) 2011-2013 spray.io\n+ * Based on code copyright (C) 2010-2011 by the BlueEyes Web Framework Team (http://github.com/jdegoes/blueeyes)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.http\n+\n+sealed trait ContentRangeLike extends ValueRenderable {\n+  def instanceLength: Option[Long]\n+}\n+\n+case class UnsatisfiableContentRange(instanceLength: Option[Long]) extends ContentRangeLike {\n+  override def render[R <: Rendering](r: R): r.type = {\n+    r ~~ \"bytes */\"\n+    if (instanceLength.isDefined)\n+      r ~~ instanceLength.get.toString\n+    else\n+      r ~~ '*'\n+  }\n+}\n+\n+case class ContentRange(firstByte: Long, lastByte: Long, instanceLength: Option[Long]) extends ContentRangeLike {\n+  require(firstByte >= 0L, s\"firstByte must be non negative\")\n+  require(firstByte <= lastByte, s\"firstByte must be <= lastByte\")",
        "path": "spray-http/src/main/scala/spray/http/ContentRange.scala",
        "position": null,
        "original_position": 36,
        "commit_id": "e2fce5b18b6a8f358c8b17354468e643ce29be3e",
        "original_commit_id": "ecd2d0ca938d3412f2b976a247ccd12b73a876dc",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "How about we merge these two to:\n\n```\nrequire(0 <= firstByte && firstByte <= lastByte, \"firstByte must be >= 0 and <= lastByte\")\n```\n\nAnd we can drop the `s` string interpolation marker.\n",
        "created_at": "2014-03-05T11:39:44Z",
        "updated_at": "2014-03-07T12:44:21Z",
        "html_url": "https://github.com/spray/spray/pull/612#discussion_r10296205",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/612",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10296205"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/612#discussion_r10296205"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/612"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10296336",
        "pull_request_review_id": null,
        "id": 10296336,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjk2MzM2",
        "diff_hunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright (C) 2011-2013 spray.io\n+ * Based on code copyright (C) 2010-2011 by the BlueEyes Web Framework Team (http://github.com/jdegoes/blueeyes)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.http\n+\n+sealed trait ContentRangeLike extends ValueRenderable {\n+  def instanceLength: Option[Long]\n+}\n+\n+case class UnsatisfiableContentRange(instanceLength: Option[Long]) extends ContentRangeLike {\n+  override def render[R <: Rendering](r: R): r.type = {\n+    r ~~ \"bytes */\"\n+    if (instanceLength.isDefined)\n+      r ~~ instanceLength.get.toString\n+    else\n+      r ~~ '*'\n+  }\n+}\n+\n+case class ContentRange(firstByte: Long, lastByte: Long, instanceLength: Option[Long]) extends ContentRangeLike {\n+  require(firstByte >= 0L, s\"firstByte must be non negative\")\n+  require(firstByte <= lastByte, s\"firstByte must be <= lastByte\")\n+  require(instanceLength.getOrElse(0L) >= 0, s\"instanceLength must be non negative\")\n+  require(instanceLength.getOrElse(Long.MaxValue) > lastByte, s\"instanceLength must be greater than lastByte\")",
        "path": "spray-http/src/main/scala/spray/http/ContentRange.scala",
        "position": null,
        "original_position": 38,
        "commit_id": "e2fce5b18b6a8f358c8b17354468e643ce29be3e",
        "original_commit_id": "ecd2d0ca938d3412f2b976a247ccd12b73a876dc",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "These two can be merged to the more efficient:\n\n```\nrequire(instanceLength.isEmpty || instanceLength.get > lastByte, \"instanceLength must be empty or > lastByte)\n```\n\nSince `lastByte` is always >= 0 here we can drop the >= 0 check completely.\n",
        "created_at": "2014-03-05T11:45:06Z",
        "updated_at": "2014-03-07T12:44:21Z",
        "html_url": "https://github.com/spray/spray/pull/612#discussion_r10296336",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/612",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10296336"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/612#discussion_r10296336"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/612"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10341341",
        "pull_request_review_id": null,
        "id": 10341341,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzQxMzQx",
        "diff_hunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright (C) 2011-2013 spray.io\n+ * Based on code copyright (C) 2010-2011 by the BlueEyes Web Framework Team (http://github.com/jdegoes/blueeyes)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.http\n+\n+sealed trait ContentRange extends ValueRenderable {\n+  def instanceLength: Option[Long]\n+}\n+\n+// http://tools.ietf.org/html/rfc2616#section-14.16\n+object ContentRange {\n+  def apply(first: Long, last: Long): Default = apply(first, last, None)\n+  def apply(first: Long, last: Long, instanceLength: Long): Default = apply(first, last, Some(instanceLength))\n+  def apply(first: Long, last: Long, instanceLength: Option[Long]): Default = Default(first, last, instanceLength)\n+\n+  /**\n+   * Models a satisfiable HTTP content-range.\n+   * Note: contrary to its string representation in the HTTP header value this model follows the usual\n+   * \"start-index inclusive / end-index exclusive\" convention.\n+   */\n+  case class Default(first: Long, last: Long, instanceLength: Option[Long]) extends ContentRange {",
        "path": "spray-http/src/main/scala/spray/http/ContentRange.scala",
        "position": null,
        "original_position": 35,
        "commit_id": "e2fce5b18b6a8f358c8b17354468e643ce29be3e",
        "original_commit_id": "93d6d68b67aa03c18e2b6f738320d1df2e137d95",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Calling the parameters `first` and `last` doesn't match the Note above. Is `first` the \"start-index\" and `last` the `end-index`? What does \"last\" then relate to? Wouldn't rendering have to subtract one from last if the Note was correct?\n",
        "created_at": "2014-03-06T13:14:03Z",
        "updated_at": "2014-03-07T12:44:21Z",
        "html_url": "https://github.com/spray/spray/pull/612#discussion_r10341341",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/612",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10341341"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/612#discussion_r10341341"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/612"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10341387",
        "pull_request_review_id": null,
        "id": 10341387,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzQxMzg3",
        "diff_hunk": "@@ -173,6 +173,19 @@ object HttpHeaders {\n     protected def companion = Allow\n   }\n \n+  object `Accept-Ranges` extends ModeledCompanion {\n+    def apply(first: RangeUnit, more: RangeUnit*): `Accept-Ranges` = apply(first +: more)\n+    implicit val acceptRangesRenderer = Renderer.defaultSeqRenderer[RangeUnit] // cache\n+  }\n+  case class `Accept-Ranges`(acceptRanges: Seq[RangeUnit]) extends ModeledHeader {\n+    import `Accept-Ranges`.acceptRangesRenderer\n+    def renderValue[R <: Rendering](r: R): r.type = {",
        "path": "spray-http/src/main/scala/spray/http/HttpHeader.scala",
        "position": null,
        "original_position": 10,
        "commit_id": "e2fce5b18b6a8f358c8b17354468e643ce29be3e",
        "original_commit_id": "93d6d68b67aa03c18e2b6f738320d1df2e137d95",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "unnecessary braces\n",
        "created_at": "2014-03-06T13:16:21Z",
        "updated_at": "2014-03-07T12:44:21Z",
        "html_url": "https://github.com/spray/spray/pull/612#discussion_r10341387",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/612",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10341387"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/612#discussion_r10341387"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/612"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10341430",
        "pull_request_review_id": null,
        "id": 10341430,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzQxNDMw",
        "diff_hunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright (C) 2011-2013 spray.io\n+ * Based on code copyright (C) 2010-2011 by the BlueEyes Web Framework Team (http://github.com/jdegoes/blueeyes)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.http\n+\n+sealed trait ContentRange extends ValueRenderable {\n+  def instanceLength: Option[Long]\n+}\n+\n+// http://tools.ietf.org/html/rfc2616#section-14.16\n+object ContentRange {\n+  def apply(first: Long, last: Long): Default = apply(first, last, None)\n+  def apply(first: Long, last: Long, instanceLength: Long): Default = apply(first, last, Some(instanceLength))\n+  def apply(first: Long, last: Long, instanceLength: Option[Long]): Default = Default(first, last, instanceLength)\n+\n+  /**\n+   * Models a satisfiable HTTP content-range.\n+   * Note: contrary to its string representation in the HTTP header value this model follows the usual\n+   * \"start-index inclusive / end-index exclusive\" convention.\n+   */\n+  case class Default(first: Long, last: Long, instanceLength: Option[Long]) extends ContentRange {",
        "path": "spray-http/src/main/scala/spray/http/ContentRange.scala",
        "position": null,
        "original_position": 35,
        "commit_id": "e2fce5b18b6a8f358c8b17354468e643ce29be3e",
        "original_commit_id": "93d6d68b67aa03c18e2b6f738320d1df2e137d95",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "True. The scaladoc is not current anymore. Will fix.\n",
        "created_at": "2014-03-06T13:18:02Z",
        "updated_at": "2014-03-07T12:44:21Z",
        "html_url": "https://github.com/spray/spray/pull/612#discussion_r10341430",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/612",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10341430"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/612#discussion_r10341430"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/612"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10341446",
        "pull_request_review_id": null,
        "id": 10341446,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzQxNDQ2",
        "diff_hunk": "@@ -173,6 +173,19 @@ object HttpHeaders {\n     protected def companion = Allow\n   }\n \n+  object `Accept-Ranges` extends ModeledCompanion {\n+    def apply(first: RangeUnit, more: RangeUnit*): `Accept-Ranges` = apply(first +: more)\n+    implicit val acceptRangesRenderer = Renderer.defaultSeqRenderer[RangeUnit] // cache\n+  }\n+  case class `Accept-Ranges`(acceptRanges: Seq[RangeUnit]) extends ModeledHeader {\n+    import `Accept-Ranges`.acceptRangesRenderer\n+    def renderValue[R <: Rendering](r: R): r.type = {",
        "path": "spray-http/src/main/scala/spray/http/HttpHeader.scala",
        "position": null,
        "original_position": 10,
        "commit_id": "e2fce5b18b6a8f358c8b17354468e643ce29be3e",
        "original_commit_id": "93d6d68b67aa03c18e2b6f738320d1df2e137d95",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yup. Will fix.\n",
        "created_at": "2014-03-06T13:18:49Z",
        "updated_at": "2014-03-07T12:44:21Z",
        "html_url": "https://github.com/spray/spray/pull/612#discussion_r10341446",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/612",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10341446"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/612#discussion_r10341446"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/612"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10341953",
        "pull_request_review_id": null,
        "id": 10341953,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzQxOTUz",
        "diff_hunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright \u00a9 2011-2013 the spray project <http://spray.io>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.routing\n+package directives\n+\n+import shapeless.HNil\n+import spray.httpx.marshalling.Marshaller\n+import spray.http._\n+import StatusCodes._\n+import HttpHeaders._\n+\n+trait RangeDirectives {\n+  import BasicDirectives._\n+  import RouteDirectives._\n+\n+  /**\n+   * Answers GET requests with an `Accept-Ranges: bytes` header and converts HttpResponses coming back from its inner\n+   * route into partial responses if the initial request contained a valid `Range` request header. The requested\n+   * byte-ranges may be coalesced.\n+   * This directive is transparent to non-GET requests\n+   * Rejects requests with unsatisfiable ranges `UnsatisfiableRangeRejection`.\n+   * Rejects requests with too many expected ranges.\n+   * @see rfc2616 14.35.2\n+   */\n+  def withRangeSupport(m: RangeDirectives.WithRangeSupportMagnet): Directive0 = {\n+    import m._\n+\n+    class IndexRange(val start: Long, val end: Long) {\n+      def length = end - start\n+      def apply(entity: HttpEntity.NonEmpty) = HttpEntity(entity.contentType, entity.data.slice(start, length))\n+      def distance(other: IndexRange) = mergedEnd(other) - mergedStart(other) - (length + other.length)\n+      def mergeWith(other: IndexRange) = new IndexRange(mergedStart(other), mergedEnd(other))\n+      def contentRangeHeader(entity: HttpEntity.NonEmpty) = `Content-Range`(ContentRange(start, end - 1, entity.data.length))\n+      private def mergedStart(other: IndexRange) = math.min(start, other.start)\n+      private def mergedEnd(other: IndexRange) = math.max(end, other.end)\n+    }\n+\n+    def indexRange(entityLength: Long)(range: ByteRange): IndexRange =\n+      range match {\n+        case ByteRange.Slice(start, end)    \u21d2 new IndexRange(start, math.min(end + 1, entityLength))\n+        case ByteRange.FromOffset(first)    \u21d2 new IndexRange(first, entityLength)\n+        case ByteRange.Suffix(suffixLength) \u21d2 new IndexRange(math.max(0, entityLength - suffixLength), entityLength)\n+      }\n+\n+    /**\n+     * When multiple ranges are requested, a server may coalesce any of the ranges that overlap or that are separated\n+     * by a gap that is smaller than the overhead of sending multiple parts, regardless of the order in which the\n+     * corresponding byte-range-spec appeared in the received Range header field. Since the typical overhead between\n+     * parts of a multipart/byteranges payload is around 80 bytes, depending on the selected representation's\n+     * media type and the chosen boundary parameter length, it can be less efficient to transfer many small\n+     * disjoint parts than it is to transfer the entire selected representation.\n+     */\n+    def coalesceRanges(iRanges: Seq[IndexRange]): Seq[IndexRange] =\n+      iRanges.foldLeft(Seq.empty[IndexRange]) { (acc, iRange) \u21d2",
        "path": "spray-routing/src/main/scala/spray/routing/directives/RangeDirectives.scala",
        "position": 68,
        "original_position": 68,
        "commit_id": "e2fce5b18b6a8f358c8b17354468e643ce29be3e",
        "original_commit_id": "93d6d68b67aa03c18e2b6f738320d1df2e137d95",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This is an O(n^2) algorithm, right? I guess it's ok because the number of ranges is bounded.\n",
        "created_at": "2014-03-06T13:34:30Z",
        "updated_at": "2014-03-07T12:44:21Z",
        "html_url": "https://github.com/spray/spray/pull/612#discussion_r10341953",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/612",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10341953"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/612#discussion_r10341953"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/612"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10425170",
        "pull_request_review_id": null,
        "id": 10425170,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDI1MTcw",
        "diff_hunk": "@@ -233,6 +234,35 @@ class HttpHeaderSpec extends Specification {\n         \"reference, unexpected character ' ' at position 17\", \"\\nhttps://spray.io/ sec\\n                 ^\\n\")\n     }\n \n+    \"Link\" in {\n+      \"\"\"Link: </?page=2>; rel=next\"\"\" =!= Link(Uri(\"/?page=2\"), next)\n+      \"\"\"Link: <https://spray.io>; rel=next\"\"\" =!= Link(Uri(\"https://spray.io\"), next)\n+      \"\"\"Link: </>; rel=prev, </page/2>; rel=\"next\"\"\"\" =!=\n+        Link(LinkDirective(Uri(\"/\"), prev), LinkDirective(Uri(\"/page/2\"), next))\n+        .renderedTo(\"\"\"</>; rel=prev, </page/2>; rel=next\"\"\")\n+\n+      \"\"\"Link: </>; rel=\"x.y-z http://spray.io\"\"\"\" =!= Link(Uri(\"/\"), rel(\"x.y-z http://spray.io\"))\n+\n+      \"\"\"Link: </>; title=\"My Title\"\"\"\" =!= Link(Uri(\"/\"), new title(\"My Title\"))\n+      \"\"\"Link: </>; rel=next; title=\"My Title\"\"\"\" =!= Link(Uri(\"/\"), next, new title(\"My Title\"))\n+\n+      \"\"\"Link: </>; anchor=\"http://example.com\"\"\"\" =!= Link(Uri(\"/\"), anchor(Uri(\"http://example.com\")))\n+\n+      /* RFC 5988 examples */\n+      \"\"\"Link: <http://example.com/TheBook/chapter2>; rel=\"previous\"; title=\"previous chapter\"\"\"\" =!=\n+        Link(Uri(\"http://example.com/TheBook/chapter2\"), rel(\"previous\"), new title(\"previous chapter\"))\n+        .renderedTo(\"\"\"<http://example.com/TheBook/chapter2>; rel=previous; title=\"previous chapter\"\"\"\")\n+\n+      \"\"\"Link: </>; rel=\"http://example.net/foo\"\"\"\" =!= Link(Uri(\"/\"), rel(\"http://example.net/foo\"))\n+        .renderedTo(\"</>; rel=http://example.net/foo\")\n+\n+      \"\"\"Link: <http://example.org/>; rel=\"start http://example.net/relation/other\"\"\"\" =!= Link(Uri(\"http://example.org/\"),\n+        rel(\"start http://example.net/relation/other\"))\n+\n+      skipped(\"TODO: only one 'rel=' is allowed; http://tools.ietf.org/html/rfc5988#section-5.3 requires any subsequent ones to be skipped\")",
        "path": "spray-http/src/test/scala/spray/http/HttpHeaderSpec.scala",
        "position": null,
        "original_position": 37,
        "commit_id": "9138de3fd290c5436310809fa884fd2412b23854",
        "original_commit_id": "cf2bcf78ccfd9b1de718af728d2599e3b85ee82c",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Here's a commit to solve this TODO, you can just squash it into your commit (or just add it):\n\nhttps://github.com/stig/spray/pull/1\n",
        "created_at": "2014-03-10T11:07:54Z",
        "updated_at": "2014-03-10T23:28:23Z",
        "html_url": "https://github.com/spray/spray/pull/609#discussion_r10425170",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/609",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10425170"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/609#discussion_r10425170"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/609"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10425703",
        "pull_request_review_id": null,
        "id": 10425703,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDI1NzAz",
        "diff_hunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright \u00a9 2013 the spray project <http://spray.io>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray\n+package http\n+package parser\n+\n+import org.parboiled.scala._\n+import BasicRules._\n+import LinkDirectives._\n+import java.lang.{ StringBuilder \u21d2 JStringBuilder }\n+\n+// http://tools.ietf.org/html/rfc5988#section-5\n+private[parser] trait LinkHeader {\n+  this: Parser with ProtocolParameterRules \u21d2\n+\n+  def `*Link` = rule {\n+    oneOrMore(`link-value`, separator = ListSep) ~ EOI ~~> (HttpHeaders.Link(_))\n+  }\n+\n+  def `link-value` = rule {\n+    `URI-Reference-Between-Triangles` ~ OptWS ~ oneOrMore(`link-param`) ~~> (LinkDirective(_, _))\n+  }\n+\n+  def `URI-Reference-Between-Triangles` = rule {\n+    \"<\" ~ push(new JStringBuilder) ~ oneOrMore(QDText(ch('>'))) ~ \">\" ~~> (x \u21d2 Uri(x.toString))\n+  }\n+\n+  def `URI-Reference-Quoted` = rule {\n+    \"\\\"\" ~ push(new JStringBuilder) ~ oneOrMore(QDText(ch('\"'))) ~ \"\\\"\" ~~> (x \u21d2 Uri(x.toString))\n+  }\n+\n+  def `relation-types` = rule(\n+    `relation-type` ~> (x \u21d2 x.mkString)\n+      | \"\\\"\" ~ oneOrMore(`relation-type`, separator = \" \") ~> (x \u21d2 x.mkString) ~ \"\\\"\")\n+\n+  def `relation-type` = rule(\n+    `ext-rel-type`\n+      | `reg-rel-type`)\n+\n+  def `reg-rel-type` = rule {\n+    LoAlpha ~ zeroOrMore(LoAlpha | Digit | \".\" | \"-\")\n+  }\n+\n+  def `ext-rel-type` = rule(oneOrMore(`URI-Char`))\n+\n+  def `URI-Char` = rule(noneOf(\";, \\\"\")) // TODO this is too simplified",
        "path": "spray-http/src/main/scala/spray/http/parser/LinkHeader.scala",
        "position": 62,
        "original_position": 60,
        "commit_id": "9138de3fd290c5436310809fa884fd2412b23854",
        "original_commit_id": "cf2bcf78ccfd9b1de718af728d2599e3b85ee82c",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Can we solve this TODO? From section 5.3:\n\n>  Note that extension relation types are REQUIRED to be absolute URIs in Link headers, and MUST be quoted if they contain a semicolon (\";\") or comma (\",\") (as these characters are used as delimiters in the header itself).\n",
        "created_at": "2014-03-10T11:31:37Z",
        "updated_at": "2014-03-10T23:28:23Z",
        "html_url": "https://github.com/spray/spray/pull/609#discussion_r10425703",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/609",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10425703"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/609#discussion_r10425703"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/609"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10246623",
        "pull_request_review_id": null,
        "id": 10246623,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjQ2NjIz",
        "diff_hunk": "@@ -172,6 +172,11 @@ trait Rendering {\n   def ~~#(s: String): this.type =\n     if (CharPredicate.HttpToken.matchAll(s)) this ~~ s else ~~('\"').putEscaped(s) ~~ '\"'",
        "path": "spray-http/src/main/scala/spray/http/Rendering.scala",
        "position": null,
        "original_position": 2,
        "commit_id": "55f367fb9b50b55b906dbd7b41ed1860a8587545",
        "original_commit_id": "bf71024558398387fded73527afed0aebb406a10",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "We can now shorten the `else` branch here to use the new `~~#!` operator.\n",
        "created_at": "2014-03-04T08:47:14Z",
        "updated_at": "2014-03-11T12:45:48Z",
        "html_url": "https://github.com/spray/spray/pull/797#discussion_r10246623",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/797",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10246623"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/797#discussion_r10246623"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/797"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10247067",
        "pull_request_review_id": null,
        "id": 10247067,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjQ3MDY3",
        "diff_hunk": "@@ -277,6 +285,22 @@ object HttpHeaders {\n     protected def companion = Host\n   }\n \n+  object `If-Modified-Since` extends ModeledCompanion\n+  case class `If-Modified-Since`(date: DateTime) extends ModeledHeader {\n+    def renderValue[R <: Rendering](r: R): r.type = date.renderRfc1123DateTimeString(r)\n+    protected def companion = `If-Modified-Since`\n+  }\n+\n+  object `If-None-Match` extends ModeledCompanion {\n+    def `*` = `If-None-Match`(HttpEntityMatcher.`*`)\n+    def apply(first: HttpEntityTag, more: HttpEntityTag*): `If-None-Match` =\n+      `If-None-Match`(HttpEntityMatcher(first +: more))\n+  }\n+  case class `If-None-Match`(m: HttpEntityMatcher) extends ModeledHeader {",
        "path": "spray-http/src/main/scala/spray/http/HttpHeader.scala",
        "position": null,
        "original_position": 30,
        "commit_id": "55f367fb9b50b55b906dbd7b41ed1860a8587545",
        "original_commit_id": "bf71024558398387fded73527afed0aebb406a10",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Should we also add the model for the `If-Match` header?\nIt appears to be at least as important as the `If-None-Match`, no?\n",
        "created_at": "2014-03-04T09:03:40Z",
        "updated_at": "2014-03-11T12:45:48Z",
        "html_url": "https://github.com/spray/spray/pull/797#discussion_r10247067",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/797",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10247067"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/797#discussion_r10247067"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/797"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10247103",
        "pull_request_review_id": null,
        "id": 10247103,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjQ3MTAz",
        "diff_hunk": "@@ -48,4 +49,21 @@ private[parser] trait CacheControlHeader {\n       | Token ~ optional(\"=\" ~ (Token | QuotedString)) ~~> (CacheDirective.custom(_, _)))\n \n   def FieldNames = rule { oneOrMore(QuotedString, separator = ListSep) }\n+\n+  def ETagDef = rule { EntityTag ~~> ((weak, tag) \u21d2 HttpEntityTag(tag, weak)) }",
        "path": "spray-http/src/main/scala/spray/http/parser/CacheControlHeader.scala",
        "position": null,
        "original_position": 21,
        "commit_id": "55f367fb9b50b55b906dbd7b41ed1860a8587545",
        "original_commit_id": "bf71024558398387fded73527afed0aebb406a10",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You can shorten this to:\n\n```\nrule { EntityTag ~~> HttpEntityTag }\n```\n",
        "created_at": "2014-03-04T09:05:03Z",
        "updated_at": "2014-03-11T12:45:48Z",
        "html_url": "https://github.com/spray/spray/pull/797#discussion_r10247103",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/797",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10247103"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/797#discussion_r10247103"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/797"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10247127",
        "pull_request_review_id": null,
        "id": 10247127,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjQ3MTI3",
        "diff_hunk": "@@ -48,4 +49,21 @@ private[parser] trait CacheControlHeader {\n       | Token ~ optional(\"=\" ~ (Token | QuotedString)) ~~> (CacheDirective.custom(_, _)))\n \n   def FieldNames = rule { oneOrMore(QuotedString, separator = ListSep) }\n+\n+  def ETagDef = rule { EntityTag ~~> ((weak, tag) \u21d2 HttpEntityTag(tag, weak)) }",
        "path": "spray-http/src/main/scala/spray/http/parser/CacheControlHeader.scala",
        "position": null,
        "original_position": 21,
        "commit_id": "55f367fb9b50b55b906dbd7b41ed1860a8587545",
        "original_commit_id": "bf71024558398387fded73527afed0aebb406a10",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ah, no.\nOnly if the parameter order matches, which it doesn't here...\n",
        "created_at": "2014-03-04T09:05:59Z",
        "updated_at": "2014-03-11T12:45:48Z",
        "html_url": "https://github.com/spray/spray/pull/797#discussion_r10247127",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/797",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10247127"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/797#discussion_r10247127"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/797"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10247205",
        "pull_request_review_id": null,
        "id": 10247205,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjQ3MjA1",
        "diff_hunk": "@@ -277,6 +285,22 @@ object HttpHeaders {\n     protected def companion = Host\n   }\n \n+  object `If-Modified-Since` extends ModeledCompanion\n+  case class `If-Modified-Since`(date: DateTime) extends ModeledHeader {\n+    def renderValue[R <: Rendering](r: R): r.type = date.renderRfc1123DateTimeString(r)\n+    protected def companion = `If-Modified-Since`\n+  }\n+\n+  object `If-None-Match` extends ModeledCompanion {\n+    def `*` = `If-None-Match`(HttpEntityMatcher.`*`)",
        "path": "spray-http/src/main/scala/spray/http/HttpHeader.scala",
        "position": null,
        "original_position": 26,
        "commit_id": "55f367fb9b50b55b906dbd7b41ed1860a8587545",
        "original_commit_id": "bf71024558398387fded73527afed0aebb406a10",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Why not a `val`?\n",
        "created_at": "2014-03-04T09:09:10Z",
        "updated_at": "2014-03-11T12:45:48Z",
        "html_url": "https://github.com/spray/spray/pull/797#discussion_r10247205",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/797",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10247205"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/797#discussion_r10247205"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/797"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10247247",
        "pull_request_review_id": null,
        "id": 10247247,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjQ3MjQ3",
        "diff_hunk": "@@ -48,4 +49,21 @@ private[parser] trait CacheControlHeader {\n       | Token ~ optional(\"=\" ~ (Token | QuotedString)) ~~> (CacheDirective.custom(_, _)))\n \n   def FieldNames = rule { oneOrMore(QuotedString, separator = ListSep) }\n+\n+  def ETagDef = rule { EntityTag ~~> ((weak, tag) \u21d2 HttpEntityTag(tag, weak)) }\n+\n+  // http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.19\n+  def `*ETag` = rule { ETagDef ~~> (ETag(_)) ~ EOI }",
        "path": "spray-http/src/main/scala/spray/http/parser/CacheControlHeader.scala",
        "position": null,
        "original_position": 24,
        "commit_id": "55f367fb9b50b55b906dbd7b41ed1860a8587545",
        "original_commit_id": "bf71024558398387fded73527afed0aebb406a10",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It's a tiny bit better to match \"EOI\" before the `~~>` operator.\nIf that is not yet the case everywhere we should establish this convention.\n",
        "created_at": "2014-03-04T09:10:33Z",
        "updated_at": "2014-03-11T12:45:48Z",
        "html_url": "https://github.com/spray/spray/pull/797#discussion_r10247247",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/797",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10247247"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/797#discussion_r10247247"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/797"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10247322",
        "pull_request_review_id": null,
        "id": 10247322,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjQ3MzIy",
        "diff_hunk": "@@ -147,7 +147,7 @@ private[parser] trait ProtocolParameterRules {\n \n   /* 3.11 Entity Tags */\n \n-  def EntityTag = rule { optional(\"W/\") ~ OpaqueTag }\n+  def EntityTag = rule { optional(\"W/\") ~> (_.nonEmpty) ~ OpaqueTag }",
        "path": "spray-http/src/main/scala/spray/http/parser/ProtocolParameterRules.scala",
        "position": null,
        "original_position": 5,
        "commit_id": "55f367fb9b50b55b906dbd7b41ed1860a8587545",
        "original_commit_id": "bf71024558398387fded73527afed0aebb406a10",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "A bit better (because faster):\n\n```\nrule { (\"W/\" ~ push(true) | push(false)) ~ OpaqueTag }\n```\n",
        "created_at": "2014-03-04T09:13:06Z",
        "updated_at": "2014-03-11T12:45:48Z",
        "html_url": "https://github.com/spray/spray/pull/797#discussion_r10247322",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/797",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10247322"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/797#discussion_r10247322"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/797"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10247541",
        "pull_request_review_id": null,
        "id": 10247541,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjQ3NTQx",
        "diff_hunk": "@@ -84,4 +85,116 @@ class CachingDirectivesSpec extends RoutingSpec with CachingDirectives {\n     }\n   }\n \n+  \"the clientCache directive\" should {\n+    val now = DateTime.now\n+    val strongTag = HttpEntityTag(\"fresh\")\n+    val weakTag = HttpEntityTag(\"fresh\", weak = true)\n+\n+    def stronglyComparedETag = clientCache() {\n+      respondWithHeader(ETag(strongTag)) { completeOk }\n+    }\n+    def weaklyComparedETag = clientCache(weakComparison = true) {\n+      respondWithHeader(ETag(weakTag)) { completeOk }\n+    }\n+    def timestamped = clientCache() {\n+      respondWithHeader(`Last-Modified`(now)) { completeOk }\n+    }\n+    def taggedAndTimestamped = clientCache() {\n+      respondWithHeaders(ETag(strongTag), `Last-Modified`(now)) { completeOk }\n+    }\n+    def faulty = clientCache() {\n+      respondWithHeaders(ETag(strongTag), `Last-Modified`(now)) { complete(StatusCodes.NotFound) }\n+    }\n+\n+    \"return OK for new resources\" in {\n+      Get() ~> stronglyComparedETag ~> check {\n+        status === OK\n+        headers === List(ETag(strongTag))\n+      }\n+      Get() ~> weaklyComparedETag ~> check {\n+        status === OK\n+        headers === List(ETag(weakTag))\n+      }\n+      Get() ~> timestamped ~> check {\n+        status === OK\n+        headers === List(`Last-Modified`(now))\n+      }\n+    }\n+\n+    \"return OK for non-matching resources\" in {\n+      Get() ~> addHeader(`If-None-Match`(HttpEntityTag(\"old\"))) ~> stronglyComparedETag ~> check {\n+        status === OK\n+        headers === List(ETag(strongTag))\n+      }\n+      Get() ~> addHeader(`If-None-Match`(HttpEntityTag(\"old\"))) ~> weaklyComparedETag ~> check {\n+        status === OK\n+        headers === List(ETag(weakTag))\n+      }\n+      Get() ~> addHeader(`If-None-Match`(weakTag)) ~> stronglyComparedETag ~> check {\n+        status === OK\n+        headers === List(ETag(strongTag))\n+      }\n+      Get() ~> addHeader(`If-Modified-Since`(now - 1000L)) ~> timestamped ~> check {\n+        status === OK\n+        headers === List(`Last-Modified`(now))\n+      }\n+    }\n+\n+    \"return OK for weakly compared resources not requested with GET or HEAD\" in {\n+      Put() ~> addHeader(`If-None-Match`(weakTag)) ~> weaklyComparedETag ~> check {\n+        status === OK\n+        headers === List(ETag(weakTag))\n+      }\n+    }\n+\n+    \"return OK if when timestamp matches but ETag doesn't\" in {",
        "path": "spray-routing-tests/src/test/scala/spray/routing/CachingDirectivesSpec.scala",
        "position": null,
        "original_position": 77,
        "commit_id": "55f367fb9b50b55b906dbd7b41ed1860a8587545",
        "original_commit_id": "bf71024558398387fded73527afed0aebb406a10",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "s/if when/if\n",
        "created_at": "2014-03-04T09:20:36Z",
        "updated_at": "2014-03-11T12:45:48Z",
        "html_url": "https://github.com/spray/spray/pull/797#discussion_r10247541",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/797",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10247541"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/797#discussion_r10247541"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/797"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10248215",
        "pull_request_review_id": null,
        "id": 10248215,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjQ4MjE1",
        "diff_hunk": "@@ -34,6 +34,29 @@ trait CachingDirectives {\n \n   type RouteResponse = Either[Seq[Rejection], HttpResponse]\n \n+  def clientCache(weakComparison: Boolean = false): Directive0 = {",
        "path": "spray-routing/src/main/scala/spray/routing/directives/CachingDirectives.scala",
        "position": null,
        "original_position": 4,
        "commit_id": "55f367fb9b50b55b906dbd7b41ed1860a8587545",
        "original_commit_id": "bf71024558398387fded73527afed0aebb406a10",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I see a few problems with this implementation:\n1. The spec says (RFC2616 14.26) that, if the `If-None-Match` tags match, the server \"MUST NOT perform the requested method\". However, we are unconditionally calling our inner route here, which will _always_ perform the requested method. This means that we'll potentially execute PUTs (etc.) when we are not allowed to!\n2. That same spec paragraph also mandates that, in certain cases, \"the server MUST respond with a status of 412 (Precondition Failed)\", which we are not doing anywhere here.\n3. It seems to me that we are combining two only loosely connected things into one single directive: `If-Modified-Since` support and `If-None-Match` support. I think we should split them apart into two separate directives. I also like Age's idea of naming the directives similar to their headers, so maybe `withIfModifiedSinceSupport` / `withIfNoneMatchSupport`. Just calling them `ifModifiedSince` kind of implies that its inner route is only executed in some cases, which it isn't. We'll _always_ have to execute the inner route, maybe even several times.\n   With the basic directives in place we can still think about adding higher level directives which then combine the more basic ones in some form.\n\nAlso: If we add `withIfNoneMatchSupport` we should probably also add `withIfMatchSupport`, no?\n",
        "created_at": "2014-03-04T09:43:39Z",
        "updated_at": "2014-03-11T12:45:48Z",
        "html_url": "https://github.com/spray/spray/pull/797#discussion_r10248215",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/797",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10248215"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/797#discussion_r10248215"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/797"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10252225",
        "pull_request_review_id": null,
        "id": 10252225,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjUyMjI1",
        "diff_hunk": "@@ -277,6 +285,22 @@ object HttpHeaders {\n     protected def companion = Host\n   }\n \n+  object `If-Modified-Since` extends ModeledCompanion\n+  case class `If-Modified-Since`(date: DateTime) extends ModeledHeader {\n+    def renderValue[R <: Rendering](r: R): r.type = date.renderRfc1123DateTimeString(r)\n+    protected def companion = `If-Modified-Since`\n+  }\n+\n+  object `If-None-Match` extends ModeledCompanion {\n+    def `*` = `If-None-Match`(HttpEntityMatcher.`*`)",
        "path": "spray-http/src/main/scala/spray/http/HttpHeader.scala",
        "position": null,
        "original_position": 26,
        "commit_id": "55f367fb9b50b55b906dbd7b41ed1860a8587545",
        "original_commit_id": "bf71024558398387fded73527afed0aebb406a10",
        "user": {
            "login": "2beaucoup",
            "id": 243903,
            "node_id": "MDQ6VXNlcjI0MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/243903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/2beaucoup",
            "html_url": "https://github.com/2beaucoup",
            "followers_url": "https://api.github.com/users/2beaucoup/followers",
            "following_url": "https://api.github.com/users/2beaucoup/following{/other_user}",
            "gists_url": "https://api.github.com/users/2beaucoup/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/2beaucoup/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/2beaucoup/subscriptions",
            "organizations_url": "https://api.github.com/users/2beaucoup/orgs",
            "repos_url": "https://api.github.com/users/2beaucoup/repos",
            "events_url": "https://api.github.com/users/2beaucoup/events{/privacy}",
            "received_events_url": "https://api.github.com/users/2beaucoup/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "fixed\n",
        "created_at": "2014-03-04T12:15:53Z",
        "updated_at": "2014-03-11T12:45:48Z",
        "html_url": "https://github.com/spray/spray/pull/797#discussion_r10252225",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/797",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10252225"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/797#discussion_r10252225"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/797"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10252265",
        "pull_request_review_id": null,
        "id": 10252265,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjUyMjY1",
        "diff_hunk": "@@ -277,6 +285,22 @@ object HttpHeaders {\n     protected def companion = Host\n   }\n \n+  object `If-Modified-Since` extends ModeledCompanion\n+  case class `If-Modified-Since`(date: DateTime) extends ModeledHeader {\n+    def renderValue[R <: Rendering](r: R): r.type = date.renderRfc1123DateTimeString(r)\n+    protected def companion = `If-Modified-Since`\n+  }\n+\n+  object `If-None-Match` extends ModeledCompanion {\n+    def `*` = `If-None-Match`(HttpEntityMatcher.`*`)\n+    def apply(first: HttpEntityTag, more: HttpEntityTag*): `If-None-Match` =\n+      `If-None-Match`(HttpEntityMatcher(first +: more))\n+  }\n+  case class `If-None-Match`(m: HttpEntityMatcher) extends ModeledHeader {",
        "path": "spray-http/src/main/scala/spray/http/HttpHeader.scala",
        "position": null,
        "original_position": 30,
        "commit_id": "55f367fb9b50b55b906dbd7b41ed1860a8587545",
        "original_commit_id": "bf71024558398387fded73527afed0aebb406a10",
        "user": {
            "login": "2beaucoup",
            "id": 243903,
            "node_id": "MDQ6VXNlcjI0MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/243903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/2beaucoup",
            "html_url": "https://github.com/2beaucoup",
            "followers_url": "https://api.github.com/users/2beaucoup/followers",
            "following_url": "https://api.github.com/users/2beaucoup/following{/other_user}",
            "gists_url": "https://api.github.com/users/2beaucoup/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/2beaucoup/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/2beaucoup/subscriptions",
            "organizations_url": "https://api.github.com/users/2beaucoup/orgs",
            "repos_url": "https://api.github.com/users/2beaucoup/repos",
            "events_url": "https://api.github.com/users/2beaucoup/events{/privacy}",
            "received_events_url": "https://api.github.com/users/2beaucoup/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Would this also hold for `If-Not-Modified`?\n\nI wish `HttpHeaderParserSpec` wouldn't exist...\n",
        "created_at": "2014-03-04T12:18:06Z",
        "updated_at": "2014-03-11T12:45:48Z",
        "html_url": "https://github.com/spray/spray/pull/797#discussion_r10252265",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/797",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10252265"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/797#discussion_r10252265"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/797"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10252267",
        "pull_request_review_id": null,
        "id": 10252267,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjUyMjY3",
        "diff_hunk": "@@ -172,6 +172,11 @@ trait Rendering {\n   def ~~#(s: String): this.type =\n     if (CharPredicate.HttpToken.matchAll(s)) this ~~ s else ~~('\"').putEscaped(s) ~~ '\"'",
        "path": "spray-http/src/main/scala/spray/http/Rendering.scala",
        "position": null,
        "original_position": 2,
        "commit_id": "55f367fb9b50b55b906dbd7b41ed1860a8587545",
        "original_commit_id": "bf71024558398387fded73527afed0aebb406a10",
        "user": {
            "login": "2beaucoup",
            "id": 243903,
            "node_id": "MDQ6VXNlcjI0MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/243903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/2beaucoup",
            "html_url": "https://github.com/2beaucoup",
            "followers_url": "https://api.github.com/users/2beaucoup/followers",
            "following_url": "https://api.github.com/users/2beaucoup/following{/other_user}",
            "gists_url": "https://api.github.com/users/2beaucoup/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/2beaucoup/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/2beaucoup/subscriptions",
            "organizations_url": "https://api.github.com/users/2beaucoup/orgs",
            "repos_url": "https://api.github.com/users/2beaucoup/repos",
            "events_url": "https://api.github.com/users/2beaucoup/events{/privacy}",
            "received_events_url": "https://api.github.com/users/2beaucoup/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "fixed\n",
        "created_at": "2014-03-04T12:18:15Z",
        "updated_at": "2014-03-11T12:45:48Z",
        "html_url": "https://github.com/spray/spray/pull/797#discussion_r10252267",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/797",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10252267"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/797#discussion_r10252267"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/797"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10252283",
        "pull_request_review_id": null,
        "id": 10252283,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjUyMjgz",
        "diff_hunk": "@@ -48,4 +49,21 @@ private[parser] trait CacheControlHeader {\n       | Token ~ optional(\"=\" ~ (Token | QuotedString)) ~~> (CacheDirective.custom(_, _)))\n \n   def FieldNames = rule { oneOrMore(QuotedString, separator = ListSep) }\n+\n+  def ETagDef = rule { EntityTag ~~> ((weak, tag) \u21d2 HttpEntityTag(tag, weak)) }\n+\n+  // http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.19\n+  def `*ETag` = rule { ETagDef ~~> (ETag(_)) ~ EOI }",
        "path": "spray-http/src/main/scala/spray/http/parser/CacheControlHeader.scala",
        "position": null,
        "original_position": 24,
        "commit_id": "55f367fb9b50b55b906dbd7b41ed1860a8587545",
        "original_commit_id": "bf71024558398387fded73527afed0aebb406a10",
        "user": {
            "login": "2beaucoup",
            "id": 243903,
            "node_id": "MDQ6VXNlcjI0MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/243903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/2beaucoup",
            "html_url": "https://github.com/2beaucoup",
            "followers_url": "https://api.github.com/users/2beaucoup/followers",
            "following_url": "https://api.github.com/users/2beaucoup/following{/other_user}",
            "gists_url": "https://api.github.com/users/2beaucoup/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/2beaucoup/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/2beaucoup/subscriptions",
            "organizations_url": "https://api.github.com/users/2beaucoup/orgs",
            "repos_url": "https://api.github.com/users/2beaucoup/repos",
            "events_url": "https://api.github.com/users/2beaucoup/events{/privacy}",
            "received_events_url": "https://api.github.com/users/2beaucoup/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "After a quick scan this seems to be OK in other places. Fixed here.\n",
        "created_at": "2014-03-04T12:19:03Z",
        "updated_at": "2014-03-11T12:45:48Z",
        "html_url": "https://github.com/spray/spray/pull/797#discussion_r10252283",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/797",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10252283"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/797#discussion_r10252283"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/797"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10252293",
        "pull_request_review_id": null,
        "id": 10252293,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjUyMjkz",
        "diff_hunk": "@@ -147,7 +147,7 @@ private[parser] trait ProtocolParameterRules {\n \n   /* 3.11 Entity Tags */\n \n-  def EntityTag = rule { optional(\"W/\") ~ OpaqueTag }\n+  def EntityTag = rule { optional(\"W/\") ~> (_.nonEmpty) ~ OpaqueTag }",
        "path": "spray-http/src/main/scala/spray/http/parser/ProtocolParameterRules.scala",
        "position": null,
        "original_position": 5,
        "commit_id": "55f367fb9b50b55b906dbd7b41ed1860a8587545",
        "original_commit_id": "bf71024558398387fded73527afed0aebb406a10",
        "user": {
            "login": "2beaucoup",
            "id": 243903,
            "node_id": "MDQ6VXNlcjI0MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/243903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/2beaucoup",
            "html_url": "https://github.com/2beaucoup",
            "followers_url": "https://api.github.com/users/2beaucoup/followers",
            "following_url": "https://api.github.com/users/2beaucoup/following{/other_user}",
            "gists_url": "https://api.github.com/users/2beaucoup/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/2beaucoup/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/2beaucoup/subscriptions",
            "organizations_url": "https://api.github.com/users/2beaucoup/orgs",
            "repos_url": "https://api.github.com/users/2beaucoup/repos",
            "events_url": "https://api.github.com/users/2beaucoup/events{/privacy}",
            "received_events_url": "https://api.github.com/users/2beaucoup/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I knew there was a better way. ;) Fixed.\n",
        "created_at": "2014-03-04T12:19:30Z",
        "updated_at": "2014-03-11T12:45:48Z",
        "html_url": "https://github.com/spray/spray/pull/797#discussion_r10252293",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/797",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10252293"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/797#discussion_r10252293"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/797"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10252297",
        "pull_request_review_id": null,
        "id": 10252297,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjUyMjk3",
        "diff_hunk": "@@ -84,4 +85,116 @@ class CachingDirectivesSpec extends RoutingSpec with CachingDirectives {\n     }\n   }\n \n+  \"the clientCache directive\" should {\n+    val now = DateTime.now\n+    val strongTag = HttpEntityTag(\"fresh\")\n+    val weakTag = HttpEntityTag(\"fresh\", weak = true)\n+\n+    def stronglyComparedETag = clientCache() {\n+      respondWithHeader(ETag(strongTag)) { completeOk }\n+    }\n+    def weaklyComparedETag = clientCache(weakComparison = true) {\n+      respondWithHeader(ETag(weakTag)) { completeOk }\n+    }\n+    def timestamped = clientCache() {\n+      respondWithHeader(`Last-Modified`(now)) { completeOk }\n+    }\n+    def taggedAndTimestamped = clientCache() {\n+      respondWithHeaders(ETag(strongTag), `Last-Modified`(now)) { completeOk }\n+    }\n+    def faulty = clientCache() {\n+      respondWithHeaders(ETag(strongTag), `Last-Modified`(now)) { complete(StatusCodes.NotFound) }\n+    }\n+\n+    \"return OK for new resources\" in {\n+      Get() ~> stronglyComparedETag ~> check {\n+        status === OK\n+        headers === List(ETag(strongTag))\n+      }\n+      Get() ~> weaklyComparedETag ~> check {\n+        status === OK\n+        headers === List(ETag(weakTag))\n+      }\n+      Get() ~> timestamped ~> check {\n+        status === OK\n+        headers === List(`Last-Modified`(now))\n+      }\n+    }\n+\n+    \"return OK for non-matching resources\" in {\n+      Get() ~> addHeader(`If-None-Match`(HttpEntityTag(\"old\"))) ~> stronglyComparedETag ~> check {\n+        status === OK\n+        headers === List(ETag(strongTag))\n+      }\n+      Get() ~> addHeader(`If-None-Match`(HttpEntityTag(\"old\"))) ~> weaklyComparedETag ~> check {\n+        status === OK\n+        headers === List(ETag(weakTag))\n+      }\n+      Get() ~> addHeader(`If-None-Match`(weakTag)) ~> stronglyComparedETag ~> check {\n+        status === OK\n+        headers === List(ETag(strongTag))\n+      }\n+      Get() ~> addHeader(`If-Modified-Since`(now - 1000L)) ~> timestamped ~> check {\n+        status === OK\n+        headers === List(`Last-Modified`(now))\n+      }\n+    }\n+\n+    \"return OK for weakly compared resources not requested with GET or HEAD\" in {\n+      Put() ~> addHeader(`If-None-Match`(weakTag)) ~> weaklyComparedETag ~> check {\n+        status === OK\n+        headers === List(ETag(weakTag))\n+      }\n+    }\n+\n+    \"return OK if when timestamp matches but ETag doesn't\" in {",
        "path": "spray-routing-tests/src/test/scala/spray/routing/CachingDirectivesSpec.scala",
        "position": null,
        "original_position": 77,
        "commit_id": "55f367fb9b50b55b906dbd7b41ed1860a8587545",
        "original_commit_id": "bf71024558398387fded73527afed0aebb406a10",
        "user": {
            "login": "2beaucoup",
            "id": 243903,
            "node_id": "MDQ6VXNlcjI0MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/243903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/2beaucoup",
            "html_url": "https://github.com/2beaucoup",
            "followers_url": "https://api.github.com/users/2beaucoup/followers",
            "following_url": "https://api.github.com/users/2beaucoup/following{/other_user}",
            "gists_url": "https://api.github.com/users/2beaucoup/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/2beaucoup/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/2beaucoup/subscriptions",
            "organizations_url": "https://api.github.com/users/2beaucoup/orgs",
            "repos_url": "https://api.github.com/users/2beaucoup/repos",
            "events_url": "https://api.github.com/users/2beaucoup/events{/privacy}",
            "received_events_url": "https://api.github.com/users/2beaucoup/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "fixed\n",
        "created_at": "2014-03-04T12:19:39Z",
        "updated_at": "2014-03-11T12:45:48Z",
        "html_url": "https://github.com/spray/spray/pull/797#discussion_r10252297",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/797",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10252297"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/797#discussion_r10252297"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/797"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10252832",
        "pull_request_review_id": null,
        "id": 10252832,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjUyODMy",
        "diff_hunk": "@@ -277,6 +285,22 @@ object HttpHeaders {\n     protected def companion = Host\n   }\n \n+  object `If-Modified-Since` extends ModeledCompanion\n+  case class `If-Modified-Since`(date: DateTime) extends ModeledHeader {\n+    def renderValue[R <: Rendering](r: R): r.type = date.renderRfc1123DateTimeString(r)\n+    protected def companion = `If-Modified-Since`\n+  }\n+\n+  object `If-None-Match` extends ModeledCompanion {\n+    def `*` = `If-None-Match`(HttpEntityMatcher.`*`)\n+    def apply(first: HttpEntityTag, more: HttpEntityTag*): `If-None-Match` =\n+      `If-None-Match`(HttpEntityMatcher(first +: more))\n+  }\n+  case class `If-None-Match`(m: HttpEntityMatcher) extends ModeledHeader {",
        "path": "spray-http/src/main/scala/spray/http/HttpHeader.scala",
        "position": null,
        "original_position": 30,
        "commit_id": "55f367fb9b50b55b906dbd7b41ed1860a8587545",
        "original_commit_id": "bf71024558398387fded73527afed0aebb406a10",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yes, the `HttpHeaderParserSpec` is annoying when you add new headers.\nIt serves the purpose of making sure that the spray-can-level HttpHeaderParser still is properly set up and all its constrains met.\nJust disable the problematic tests for the time being if you want...\n",
        "created_at": "2014-03-04T12:42:29Z",
        "updated_at": "2014-03-11T12:45:48Z",
        "html_url": "https://github.com/spray/spray/pull/797#discussion_r10252832",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/797",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10252832"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/797#discussion_r10252832"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/797"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10253671",
        "pull_request_review_id": null,
        "id": 10253671,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjUzNjcx",
        "diff_hunk": "@@ -277,6 +285,22 @@ object HttpHeaders {\n     protected def companion = Host\n   }\n \n+  object `If-Modified-Since` extends ModeledCompanion\n+  case class `If-Modified-Since`(date: DateTime) extends ModeledHeader {\n+    def renderValue[R <: Rendering](r: R): r.type = date.renderRfc1123DateTimeString(r)\n+    protected def companion = `If-Modified-Since`\n+  }\n+\n+  object `If-None-Match` extends ModeledCompanion {\n+    def `*` = `If-None-Match`(HttpEntityMatcher.`*`)\n+    def apply(first: HttpEntityTag, more: HttpEntityTag*): `If-None-Match` =\n+      `If-None-Match`(HttpEntityMatcher(first +: more))\n+  }\n+  case class `If-None-Match`(m: HttpEntityMatcher) extends ModeledHeader {",
        "path": "spray-http/src/main/scala/spray/http/HttpHeader.scala",
        "position": null,
        "original_position": 30,
        "commit_id": "55f367fb9b50b55b906dbd7b41ed1860a8587545",
        "original_commit_id": "bf71024558398387fded73527afed0aebb406a10",
        "user": {
            "login": "2beaucoup",
            "id": 243903,
            "node_id": "MDQ6VXNlcjI0MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/243903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/2beaucoup",
            "html_url": "https://github.com/2beaucoup",
            "followers_url": "https://api.github.com/users/2beaucoup/followers",
            "following_url": "https://api.github.com/users/2beaucoup/following{/other_user}",
            "gists_url": "https://api.github.com/users/2beaucoup/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/2beaucoup/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/2beaucoup/subscriptions",
            "organizations_url": "https://api.github.com/users/2beaucoup/orgs",
            "repos_url": "https://api.github.com/users/2beaucoup/repos",
            "events_url": "https://api.github.com/users/2beaucoup/events{/privacy}",
            "received_events_url": "https://api.github.com/users/2beaucoup/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": ":+1: That would also save parallel PRs from merging.\n\nI'll disable them for now.\n",
        "created_at": "2014-03-04T13:21:54Z",
        "updated_at": "2014-03-11T12:45:48Z",
        "html_url": "https://github.com/spray/spray/pull/797#discussion_r10253671",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/797",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10253671"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/797#discussion_r10253671"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/797"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10257205",
        "pull_request_review_id": null,
        "id": 10257205,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjU3MjA1",
        "diff_hunk": "@@ -277,6 +285,22 @@ object HttpHeaders {\n     protected def companion = Host\n   }\n \n+  object `If-Modified-Since` extends ModeledCompanion\n+  case class `If-Modified-Since`(date: DateTime) extends ModeledHeader {\n+    def renderValue[R <: Rendering](r: R): r.type = date.renderRfc1123DateTimeString(r)\n+    protected def companion = `If-Modified-Since`\n+  }\n+\n+  object `If-None-Match` extends ModeledCompanion {\n+    def `*` = `If-None-Match`(HttpEntityMatcher.`*`)\n+    def apply(first: HttpEntityTag, more: HttpEntityTag*): `If-None-Match` =\n+      `If-None-Match`(HttpEntityMatcher(first +: more))\n+  }\n+  case class `If-None-Match`(m: HttpEntityMatcher) extends ModeledHeader {",
        "path": "spray-http/src/main/scala/spray/http/HttpHeader.scala",
        "position": null,
        "original_position": 30,
        "commit_id": "55f367fb9b50b55b906dbd7b41ed1860a8587545",
        "original_commit_id": "bf71024558398387fded73527afed0aebb406a10",
        "user": {
            "login": "2beaucoup",
            "id": 243903,
            "node_id": "MDQ6VXNlcjI0MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/243903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/2beaucoup",
            "html_url": "https://github.com/2beaucoup",
            "followers_url": "https://api.github.com/users/2beaucoup/followers",
            "following_url": "https://api.github.com/users/2beaucoup/following{/other_user}",
            "gists_url": "https://api.github.com/users/2beaucoup/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/2beaucoup/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/2beaucoup/subscriptions",
            "organizations_url": "https://api.github.com/users/2beaucoup/orgs",
            "repos_url": "https://api.github.com/users/2beaucoup/repos",
            "events_url": "https://api.github.com/users/2beaucoup/events{/privacy}",
            "received_events_url": "https://api.github.com/users/2beaucoup/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "`If-Match` and `If-Unmodified-Since` models added\n",
        "created_at": "2014-03-04T15:04:25Z",
        "updated_at": "2014-03-11T12:45:48Z",
        "html_url": "https://github.com/spray/spray/pull/797#discussion_r10257205",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/797",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10257205"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/797#discussion_r10257205"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/797"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10342904",
        "pull_request_review_id": null,
        "id": 10342904,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzQyOTA0",
        "diff_hunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright \u00a9 2011-2014 the spray project <http://spray.io>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.http\n+\n+case class HttpEntityTag(tag: String, weak: Boolean = false) extends ValueRenderable {",
        "path": "spray-http/src/main/scala/spray/http/HttpEntityTag.scala",
        "position": null,
        "original_position": 19,
        "commit_id": "55f367fb9b50b55b906dbd7b41ed1860a8587545",
        "original_commit_id": "f2cbab78a7a5c64fa31acd4424c634e546a49d1e",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Let's rename that to simply `EntityTag`.\nOur naming convention is to prefix the name with `Http` only if the base name itself consists of only one \"word\".\nSince \"Entity-Tag\" is two \"words\" (like `DateTime`) it doesn't need an `Http` prefix.\n",
        "created_at": "2014-03-06T14:12:00Z",
        "updated_at": "2014-03-11T12:45:48Z",
        "html_url": "https://github.com/spray/spray/pull/797#discussion_r10342904",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/797",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10342904"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/797#discussion_r10342904"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/797"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10342958",
        "pull_request_review_id": null,
        "id": 10342958,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzQyOTU4",
        "diff_hunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright \u00a9 2011-2014 the spray project <http://spray.io>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.http\n+\n+case class HttpEntityTag(tag: String, weak: Boolean = false) extends ValueRenderable {\n+  def render[R <: Rendering](r: R): r.type = if (weak) r ~~ \"W/\" ~~#! tag else r ~~#! tag\n+}\n+\n+sealed abstract class HttpEntityMatcher extends ValueRenderable {",
        "path": "spray-http/src/main/scala/spray/http/HttpEntityTag.scala",
        "position": null,
        "original_position": 23,
        "commit_id": "55f367fb9b50b55b906dbd7b41ed1860a8587545",
        "original_commit_id": "f2cbab78a7a5c64fa31acd4424c634e546a49d1e",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "For consistency with other models (`MediaType`, `ContentType`, `HttpCharset`, ...) we should name this thing `EntityTagRange`.\n",
        "created_at": "2014-03-06T14:13:38Z",
        "updated_at": "2014-03-11T12:45:48Z",
        "html_url": "https://github.com/spray/spray/pull/797#discussion_r10342958",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/797",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10342958"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/797#discussion_r10342958"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/797"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10342977",
        "pull_request_review_id": null,
        "id": 10342977,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzQyOTc3",
        "diff_hunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright \u00a9 2011-2014 the spray project <http://spray.io>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.http\n+\n+case class HttpEntityTag(tag: String, weak: Boolean = false) extends ValueRenderable {\n+  def render[R <: Rendering](r: R): r.type = if (weak) r ~~ \"W/\" ~~#! tag else r ~~#! tag\n+}\n+\n+sealed abstract class HttpEntityMatcher extends ValueRenderable {\n+  def comparison(entityTag: HttpEntityTag, weak: Boolean): Boolean",
        "path": "spray-http/src/main/scala/spray/http/HttpEntityTag.scala",
        "position": null,
        "original_position": 24,
        "commit_id": "55f367fb9b50b55b906dbd7b41ed1860a8587545",
        "original_commit_id": "f2cbab78a7a5c64fa31acd4424c634e546a49d1e",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "How about `matches` as the name for this method?\n",
        "created_at": "2014-03-06T14:14:10Z",
        "updated_at": "2014-03-11T12:45:48Z",
        "html_url": "https://github.com/spray/spray/pull/797#discussion_r10342977",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/797",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10342977"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/797#discussion_r10342977"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/797"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10343054",
        "pull_request_review_id": null,
        "id": 10343054,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzQzMDU0",
        "diff_hunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright \u00a9 2011-2014 the spray project <http://spray.io>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.http\n+\n+case class HttpEntityTag(tag: String, weak: Boolean = false) extends ValueRenderable {\n+  def render[R <: Rendering](r: R): r.type = if (weak) r ~~ \"W/\" ~~#! tag else r ~~#! tag\n+}\n+\n+sealed abstract class HttpEntityMatcher extends ValueRenderable {\n+  def comparison(entityTag: HttpEntityTag, weak: Boolean): Boolean\n+}\n+object HttpEntityMatcher {\n+  implicit val tagsRenderer = Renderer.defaultSeqRenderer[HttpEntityTag] // cache\n+  case object `*` extends HttpEntityMatcher {\n+    def render[R <: Rendering](r: R): r.type = r ~~ '*'\n+    def comparison(entityTag: HttpEntityTag, weak: Boolean) = weak || !entityTag.weak\n+  }\n+  private[http] case class Tags(tags: Seq[HttpEntityTag]) extends HttpEntityMatcher {",
        "path": "spray-http/src/main/scala/spray/http/HttpEntityTag.scala",
        "position": null,
        "original_position": 32,
        "commit_id": "55f367fb9b50b55b906dbd7b41ed1860a8587545",
        "original_commit_id": "f2cbab78a7a5c64fa31acd4424c634e546a49d1e",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'd drop the `private[http]` and name the class `Default`.\nAlso, I think we need a `require(tags.nonEmpty, \"tags must not be empty\")` in the constructor.\n",
        "created_at": "2014-03-06T14:16:27Z",
        "updated_at": "2014-03-11T12:45:48Z",
        "html_url": "https://github.com/spray/spray/pull/797#discussion_r10343054",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/797",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10343054"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/797#discussion_r10343054"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/797"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10343339",
        "pull_request_review_id": null,
        "id": 10343339,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzQzMzM5",
        "diff_hunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright \u00a9 2011-2014 the spray project <http://spray.io>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.routing\n+\n+import spray.http._\n+import spray.http.StatusCodes._\n+import spray.http.HttpHeaders._\n+import spray.routing.directives.CacheConditionDirectives\n+\n+class CacheConditionDirectivesSpec extends RoutingSpec with CacheConditionDirectives {\n+\n+  \"the conditional directive\" should {\n+    val timestamp = DateTime.now - 2000L\n+    val ifModifiedSince = `If-Modified-Since`(timestamp)\n+    val tag = HttpEntityTag(\"fresh\")\n+    val ifNoneMatch = `If-None-Match`(tag)\n+    val responseHeaders = List(ETag(tag), `Last-Modified`(timestamp))\n+\n+    def taggedAndTimestamped = conditional(tag, timestamp) { completeOk }\n+    def weak = conditional(tag.copy(weak = true), timestamp) { completeOk }\n+    def faulty = conditional(tag, timestamp) { complete(StatusCodes.NotFound) }\n+\n+    \"return OK for new resources\" in {\n+      Get() ~> taggedAndTimestamped ~> check {\n+        status === OK\n+        headers must containAllOf(responseHeaders)\n+      }\n+    }\n+\n+    \"return OK for non-matching resources\" in {\n+      Get() ~> addHeader(`If-None-Match`(HttpEntityTag(\"old\"))) ~> taggedAndTimestamped ~> check {\n+        status === OK\n+        headers must containAllOf(responseHeaders)\n+      }\n+      Get() ~> addHeader(`If-Modified-Since`(timestamp - 1000L)) ~> taggedAndTimestamped ~> check {\n+        status === OK\n+        headers must containAllOf(responseHeaders)\n+      }\n+      Get() ~> addHeaders(`If-None-Match`(HttpEntityTag(\"old\")), `If-Modified-Since`(timestamp - 1000L)) ~> taggedAndTimestamped ~> check {\n+        status === OK\n+        headers must containAllOf(responseHeaders)\n+      }\n+    }\n+\n+    \"return OK for partially matching resources\" in {\n+      Get() ~> addHeaders(ifNoneMatch, `If-Modified-Since`(timestamp - 1000L)) ~> taggedAndTimestamped ~> check {\n+        status === OK\n+        headers must containAllOf(responseHeaders)\n+      }\n+      Get() ~> addHeaders(`If-None-Match`(HttpEntityTag(\"old\")), ifModifiedSince) ~> taggedAndTimestamped ~> check {\n+        status === OK\n+        headers must containAllOf(responseHeaders)\n+      }\n+    }\n+\n+    \"return PreconditionFailed for matched but unsafe resources\" in {\n+      Put() ~> addHeaders(ifNoneMatch, ifModifiedSince) ~> taggedAndTimestamped ~> check {\n+        status === PreconditionFailed\n+        headers === Nil\n+      }\n+    }\n+\n+    \"return normally for resources that would have returned anything other than a 2xx or 304\" in {",
        "path": "spray-routing-tests/src/test/scala/spray/routing/CacheConditionDirectivesSpec.scala",
        "position": null,
        "original_position": 77,
        "commit_id": "55f367fb9b50b55b906dbd7b41ed1860a8587545",
        "original_commit_id": "f2cbab78a7a5c64fa31acd4424c634e546a49d1e",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think this test can go.\nThe semantic of the `conditional` directive is that the user has already established that the resource exists when the directive is executed. Otherwise the ETag and LastModified values would not be available.\nWe actually might want to somehow _require_ that the inner route never returns anything but a 2xx response.\nBasically the `conditional` directive is meant to be used very close to the leaf-level of the routing structure, e.g. wrapping the `complete`.\n",
        "created_at": "2014-03-06T14:24:42Z",
        "updated_at": "2014-03-11T12:45:48Z",
        "html_url": "https://github.com/spray/spray/pull/797#discussion_r10343339",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/797",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10343339"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/797#discussion_r10343339"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/797"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10343358",
        "pull_request_review_id": null,
        "id": 10343358,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzQzMzU4",
        "diff_hunk": "@@ -19,7 +19,7 @@ package spray.routing\n import spray.routing.directives.CachingDirectives\n import spray.util.SingletonException\n import spray.http._\n-import HttpHeaders.`Cache-Control`\n+import HttpHeaders._",
        "path": "spray-routing-tests/src/test/scala/spray/routing/CachingDirectivesSpec.scala",
        "position": null,
        "original_position": 5,
        "commit_id": "55f367fb9b50b55b906dbd7b41ed1860a8587545",
        "original_commit_id": "f2cbab78a7a5c64fa31acd4424c634e546a49d1e",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Unintentional edit.\n",
        "created_at": "2014-03-06T14:25:16Z",
        "updated_at": "2014-03-11T12:45:48Z",
        "html_url": "https://github.com/spray/spray/pull/797#discussion_r10343358",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/797",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10343358"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/797#discussion_r10343358"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/797"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10343363",
        "pull_request_review_id": null,
        "id": 10343363,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzQzMzYz",
        "diff_hunk": "@@ -83,5 +83,4 @@ class CachingDirectivesSpec extends RoutingSpec with CachingDirectives {\n       } ~> check { responseAs[String] === \"Good\" }\n     }\n   }\n-",
        "path": "spray-routing-tests/src/test/scala/spray/routing/CachingDirectivesSpec.scala",
        "position": null,
        "original_position": 13,
        "commit_id": "55f367fb9b50b55b906dbd7b41ed1860a8587545",
        "original_commit_id": "f2cbab78a7a5c64fa31acd4424c634e546a49d1e",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Unintentional edit.\n",
        "created_at": "2014-03-06T14:25:24Z",
        "updated_at": "2014-03-11T12:45:48Z",
        "html_url": "https://github.com/spray/spray/pull/797#discussion_r10343363",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/797",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10343363"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/797#discussion_r10343363"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/797"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10343400",
        "pull_request_review_id": null,
        "id": 10343400,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzQzNDAw",
        "diff_hunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright \u00a9 2011-2014 the spray project <http://spray.io>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.routing\n+package directives\n+\n+import spray.http._\n+import spray.http.HttpHeaders._\n+import spray.http.HttpMethods._\n+import spray.http.StatusCodes._\n+\n+trait CacheConditionDirectives {\n+  import BasicDirectives._\n+\n+  def conditional(eTag: HttpEntityTag, lastModified: DateTime): Directive0 =\n+    mapInnerRoute { route \u21d2\n+      ctx \u21d2 {\n+        def responseHeaders = List(ETag(eTag), `Last-Modified`(lastModified))\n+\n+        def isSafe = ctx.request.method == HEAD || ctx.request.method == GET",
        "path": "spray-routing/src/main/scala/spray/routing/directives/CacheConditionDirectives.scala",
        "position": null,
        "original_position": 33,
        "commit_id": "55f367fb9b50b55b906dbd7b41ed1860a8587545",
        "original_commit_id": "f2cbab78a7a5c64fa31acd4424c634e546a49d1e",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Let's rename this method to `isGetOrHead`, the `HttpMethod` already has an `isSafe` method, which doesn't quite fit the semantic we have here.\n",
        "created_at": "2014-03-06T14:26:21Z",
        "updated_at": "2014-03-11T12:45:48Z",
        "html_url": "https://github.com/spray/spray/pull/797#discussion_r10343400",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/797",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10343400"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/797#discussion_r10343400"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/797"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10343447",
        "pull_request_review_id": null,
        "id": 10343447,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzQzNDQ3",
        "diff_hunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright \u00a9 2011-2014 the spray project <http://spray.io>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.routing\n+package directives\n+\n+import spray.http._\n+import spray.http.HttpHeaders._\n+import spray.http.HttpMethods._\n+import spray.http.StatusCodes._\n+\n+trait CacheConditionDirectives {\n+  import BasicDirectives._\n+\n+  def conditional(eTag: HttpEntityTag, lastModified: DateTime): Directive0 =\n+    mapInnerRoute { route \u21d2\n+      ctx \u21d2 {\n+        def responseHeaders = List(ETag(eTag), `Last-Modified`(lastModified))\n+\n+        def isSafe = ctx.request.method == HEAD || ctx.request.method == GET\n+\n+        def weak = true // TODO: ctx.request.header[Range].isEmpty\n+\n+        def complete() =\n+          if (isSafe) ctx.complete(HttpResponse(NotModified, headers = responseHeaders))\n+          else ctx.complete(PreconditionFailed)\n+\n+        def matches(ifNoneMatch: HttpEntityMatcher) = ifNoneMatch.comparison(eTag, weak)\n+\n+        def unmodified(ifModifiedSince: DateTime) = lastModified <= ifModifiedSince && ifModifiedSince < DateTime.now",
        "path": "spray-routing/src/main/scala/spray/routing/directives/CacheConditionDirectives.scala",
        "position": null,
        "original_position": 43,
        "commit_id": "55f367fb9b50b55b906dbd7b41ed1860a8587545",
        "original_commit_id": "f2cbab78a7a5c64fa31acd4424c634e546a49d1e",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "We can avoid an intermediate `DateTime` construction with this:\n\n```\nlastModified <= ifModifiedSince && ifModifiedSince.clicks < System.currentTimeMillis()\n```\n",
        "created_at": "2014-03-06T14:27:24Z",
        "updated_at": "2014-03-11T12:45:48Z",
        "html_url": "https://github.com/spray/spray/pull/797#discussion_r10343447",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/797",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10343447"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/797#discussion_r10343447"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/797"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10343578",
        "pull_request_review_id": null,
        "id": 10343578,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzQzNTc4",
        "diff_hunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright \u00a9 2011-2014 the spray project <http://spray.io>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.routing\n+package directives\n+\n+import spray.http._\n+import spray.http.HttpHeaders._\n+import spray.http.HttpMethods._\n+import spray.http.StatusCodes._\n+\n+trait CacheConditionDirectives {\n+  import BasicDirectives._\n+\n+  def conditional(eTag: HttpEntityTag, lastModified: DateTime): Directive0 =\n+    mapInnerRoute { route \u21d2\n+      ctx \u21d2 {\n+        def responseHeaders = List(ETag(eTag), `Last-Modified`(lastModified))\n+\n+        def isSafe = ctx.request.method == HEAD || ctx.request.method == GET\n+\n+        def weak = true // TODO: ctx.request.header[Range].isEmpty\n+\n+        def complete() =\n+          if (isSafe) ctx.complete(HttpResponse(NotModified, headers = responseHeaders))\n+          else ctx.complete(PreconditionFailed)\n+\n+        def matches(ifNoneMatch: HttpEntityMatcher) = ifNoneMatch.comparison(eTag, weak)\n+\n+        def unmodified(ifModifiedSince: DateTime) = lastModified <= ifModifiedSince && ifModifiedSince < DateTime.now\n+\n+        (ctx.request.header[`If-None-Match`], ctx.request.header[`If-Modified-Since`]) match {\n+          case (Some(`If-None-Match`(inm)), Some(`If-Modified-Since`(ims))) if matches(inm) && unmodified(ims) \u21d2 complete()\n+          case (Some(`If-None-Match`(inm)), None) if matches(inm) \u21d2 complete()\n+          case (None, Some(`If-Modified-Since`(ims))) if unmodified(ims) \u21d2 complete()",
        "path": "spray-routing/src/main/scala/spray/routing/directives/CacheConditionDirectives.scala",
        "position": null,
        "original_position": 48,
        "commit_id": "55f367fb9b50b55b906dbd7b41ed1860a8587545",
        "original_commit_id": "f2cbab78a7a5c64fa31acd4424c634e546a49d1e",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think this case is incorrect.\nIf we don't have an `If-None-Match` header and the `If-Modified-Since` check shows that the resource has not been modified we need to return 304 to GET/HEAD requests (already correct) and pass on to the inner route for non-GET/HEAD requests! Responding with 416 is not right if I understand the spec correctly.\n(Apache also doesn't appear to produce a 416 in this case).\n\nWe are probably missing a test for this case I think.\n",
        "created_at": "2014-03-06T14:30:57Z",
        "updated_at": "2014-03-11T12:45:48Z",
        "html_url": "https://github.com/spray/spray/pull/797#discussion_r10343578",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/797",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10343578"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/797#discussion_r10343578"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/797"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10343638",
        "pull_request_review_id": null,
        "id": 10343638,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzQzNjM4",
        "diff_hunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright \u00a9 2011-2014 the spray project <http://spray.io>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.routing\n+package directives\n+\n+import spray.http._\n+import spray.http.HttpHeaders._\n+import spray.http.HttpMethods._\n+import spray.http.StatusCodes._\n+\n+trait CacheConditionDirectives {",
        "path": "spray-routing/src/main/scala/spray/routing/directives/CacheConditionDirectives.scala",
        "position": null,
        "original_position": 25,
        "commit_id": "55f367fb9b50b55b906dbd7b41ed1860a8587545",
        "original_commit_id": "f2cbab78a7a5c64fa31acd4424c634e546a49d1e",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "We should add the mix-in of this trait into the `Directives` trait as well.\n",
        "created_at": "2014-03-06T14:32:31Z",
        "updated_at": "2014-03-11T12:45:48Z",
        "html_url": "https://github.com/spray/spray/pull/797#discussion_r10343638",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/797",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10343638"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/797#discussion_r10343638"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/797"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10343661",
        "pull_request_review_id": null,
        "id": 10343661,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzQzNjYx",
        "diff_hunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright \u00a9 2011-2014 the spray project <http://spray.io>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.routing\n+\n+import spray.http._\n+import spray.http.StatusCodes._\n+import spray.http.HttpHeaders._\n+import spray.routing.directives.CacheConditionDirectives\n+\n+class CacheConditionDirectivesSpec extends RoutingSpec with CacheConditionDirectives {",
        "path": "spray-routing-tests/src/test/scala/spray/routing/CacheConditionDirectivesSpec.scala",
        "position": null,
        "original_position": 24,
        "commit_id": "55f367fb9b50b55b906dbd7b41ed1860a8587545",
        "original_commit_id": "f2cbab78a7a5c64fa31acd4424c634e546a49d1e",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The `with CacheConditionDirectives` can go.\n",
        "created_at": "2014-03-06T14:32:54Z",
        "updated_at": "2014-03-11T12:45:48Z",
        "html_url": "https://github.com/spray/spray/pull/797#discussion_r10343661",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/797",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10343661"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/797#discussion_r10343661"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/797"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10343805",
        "pull_request_review_id": null,
        "id": 10343805,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzQzODA1",
        "diff_hunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright \u00a9 2011-2014 the spray project <http://spray.io>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.routing\n+package directives\n+\n+import spray.http._\n+import spray.http.HttpHeaders._\n+import spray.http.HttpMethods._\n+import spray.http.StatusCodes._\n+\n+trait CacheConditionDirectives {\n+  import BasicDirectives._\n+\n+  def conditional(eTag: HttpEntityTag, lastModified: DateTime): Directive0 =\n+    mapInnerRoute { route \u21d2\n+      ctx \u21d2 {\n+        def responseHeaders = List(ETag(eTag), `Last-Modified`(lastModified))\n+\n+        def isSafe = ctx.request.method == HEAD || ctx.request.method == GET\n+\n+        def weak = true // TODO: ctx.request.header[Range].isEmpty\n+\n+        def complete() =\n+          if (isSafe) ctx.complete(HttpResponse(NotModified, headers = responseHeaders))\n+          else ctx.complete(PreconditionFailed)\n+\n+        def matches(ifNoneMatch: HttpEntityMatcher) = ifNoneMatch.comparison(eTag, weak)\n+\n+        def unmodified(ifModifiedSince: DateTime) = lastModified <= ifModifiedSince && ifModifiedSince < DateTime.now\n+\n+        (ctx.request.header[`If-None-Match`], ctx.request.header[`If-Modified-Since`]) match {\n+          case (Some(`If-None-Match`(inm)), Some(`If-Modified-Since`(ims))) if matches(inm) && unmodified(ims) \u21d2 complete()\n+          case (Some(`If-None-Match`(inm)), None) if matches(inm) \u21d2 complete()\n+          case (None, Some(`If-Modified-Since`(ims))) if unmodified(ims) \u21d2 complete()\n+          case _ \u21d2 route(ctx.withHttpResponseMapped(_.withDefaultHeaders(responseHeaders)))\n+        }\n+      }\n+    }\n+}",
        "path": "spray-routing/src/main/scala/spray/routing/directives/CacheConditionDirectives.scala",
        "position": null,
        "original_position": 53,
        "commit_id": "55f367fb9b50b55b906dbd7b41ed1860a8587545",
        "original_commit_id": "f2cbab78a7a5c64fa31acd4424c634e546a49d1e",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "We should also add\n\n```\nobject CacheConditionDirectives extends CacheConditionDirectives\n```\n",
        "created_at": "2014-03-06T14:36:39Z",
        "updated_at": "2014-03-11T12:45:48Z",
        "html_url": "https://github.com/spray/spray/pull/797#discussion_r10343805",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/797",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10343805"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/797#discussion_r10343805"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/797"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10347232",
        "pull_request_review_id": null,
        "id": 10347232,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzQ3MjMy",
        "diff_hunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright \u00a9 2011-2014 the spray project <http://spray.io>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.routing\n+\n+import spray.http._\n+import spray.http.StatusCodes._\n+import spray.http.HttpHeaders._\n+import spray.routing.directives.CacheConditionDirectives\n+\n+class CacheConditionDirectivesSpec extends RoutingSpec with CacheConditionDirectives {\n+\n+  \"the conditional directive\" should {\n+    val timestamp = DateTime.now - 2000L\n+    val ifModifiedSince = `If-Modified-Since`(timestamp)\n+    val tag = HttpEntityTag(\"fresh\")\n+    val ifNoneMatch = `If-None-Match`(tag)\n+    val responseHeaders = List(ETag(tag), `Last-Modified`(timestamp))\n+\n+    def taggedAndTimestamped = conditional(tag, timestamp) { completeOk }\n+    def weak = conditional(tag.copy(weak = true), timestamp) { completeOk }\n+    def faulty = conditional(tag, timestamp) { complete(StatusCodes.NotFound) }\n+\n+    \"return OK for new resources\" in {\n+      Get() ~> taggedAndTimestamped ~> check {\n+        status === OK\n+        headers must containAllOf(responseHeaders)\n+      }\n+    }\n+\n+    \"return OK for non-matching resources\" in {\n+      Get() ~> addHeader(`If-None-Match`(HttpEntityTag(\"old\"))) ~> taggedAndTimestamped ~> check {\n+        status === OK\n+        headers must containAllOf(responseHeaders)\n+      }\n+      Get() ~> addHeader(`If-Modified-Since`(timestamp - 1000L)) ~> taggedAndTimestamped ~> check {\n+        status === OK\n+        headers must containAllOf(responseHeaders)\n+      }\n+      Get() ~> addHeaders(`If-None-Match`(HttpEntityTag(\"old\")), `If-Modified-Since`(timestamp - 1000L)) ~> taggedAndTimestamped ~> check {\n+        status === OK\n+        headers must containAllOf(responseHeaders)\n+      }\n+    }\n+\n+    \"return OK for partially matching resources\" in {\n+      Get() ~> addHeaders(ifNoneMatch, `If-Modified-Since`(timestamp - 1000L)) ~> taggedAndTimestamped ~> check {\n+        status === OK\n+        headers must containAllOf(responseHeaders)\n+      }\n+      Get() ~> addHeaders(`If-None-Match`(HttpEntityTag(\"old\")), ifModifiedSince) ~> taggedAndTimestamped ~> check {\n+        status === OK\n+        headers must containAllOf(responseHeaders)\n+      }\n+    }\n+\n+    \"return PreconditionFailed for matched but unsafe resources\" in {\n+      Put() ~> addHeaders(ifNoneMatch, ifModifiedSince) ~> taggedAndTimestamped ~> check {\n+        status === PreconditionFailed\n+        headers === Nil\n+      }\n+    }\n+\n+    \"return normally for resources that would have returned anything other than a 2xx or 304\" in {",
        "path": "spray-routing-tests/src/test/scala/spray/routing/CacheConditionDirectivesSpec.scala",
        "position": null,
        "original_position": 77,
        "commit_id": "55f367fb9b50b55b906dbd7b41ed1860a8587545",
        "original_commit_id": "f2cbab78a7a5c64fa31acd4424c634e546a49d1e",
        "user": {
            "login": "2beaucoup",
            "id": 243903,
            "node_id": "MDQ6VXNlcjI0MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/243903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/2beaucoup",
            "html_url": "https://github.com/2beaucoup",
            "followers_url": "https://api.github.com/users/2beaucoup/followers",
            "following_url": "https://api.github.com/users/2beaucoup/following{/other_user}",
            "gists_url": "https://api.github.com/users/2beaucoup/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/2beaucoup/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/2beaucoup/subscriptions",
            "organizations_url": "https://api.github.com/users/2beaucoup/orgs",
            "repos_url": "https://api.github.com/users/2beaucoup/repos",
            "events_url": "https://api.github.com/users/2beaucoup/events{/privacy}",
            "received_events_url": "https://api.github.com/users/2beaucoup/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "> We actually might want to somehow require that the inner route never returns anything but a 2xx response.\n\nCould this be done like so:\n\n``` scala\nctx.withRouteResponseHandling {\n  case response: HttpResponse(status, _, _, _) if status.isFailure \u21d2 ctx.reject()\n  case Status.Failure(e)                                           \u21d2 ctx.failWith(e)\n}\n```\n\n?\n",
        "created_at": "2014-03-06T16:01:26Z",
        "updated_at": "2014-03-11T12:45:48Z",
        "html_url": "https://github.com/spray/spray/pull/797#discussion_r10347232",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/797",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10347232"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/797#discussion_r10347232"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/797"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10347714",
        "pull_request_review_id": null,
        "id": 10347714,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzQ3NzE0",
        "diff_hunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright \u00a9 2011-2014 the spray project <http://spray.io>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.routing\n+\n+import spray.http._\n+import spray.http.StatusCodes._\n+import spray.http.HttpHeaders._\n+import spray.routing.directives.CacheConditionDirectives\n+\n+class CacheConditionDirectivesSpec extends RoutingSpec with CacheConditionDirectives {\n+\n+  \"the conditional directive\" should {\n+    val timestamp = DateTime.now - 2000L\n+    val ifModifiedSince = `If-Modified-Since`(timestamp)\n+    val tag = HttpEntityTag(\"fresh\")\n+    val ifNoneMatch = `If-None-Match`(tag)\n+    val responseHeaders = List(ETag(tag), `Last-Modified`(timestamp))\n+\n+    def taggedAndTimestamped = conditional(tag, timestamp) { completeOk }\n+    def weak = conditional(tag.copy(weak = true), timestamp) { completeOk }\n+    def faulty = conditional(tag, timestamp) { complete(StatusCodes.NotFound) }\n+\n+    \"return OK for new resources\" in {\n+      Get() ~> taggedAndTimestamped ~> check {\n+        status === OK\n+        headers must containAllOf(responseHeaders)\n+      }\n+    }\n+\n+    \"return OK for non-matching resources\" in {\n+      Get() ~> addHeader(`If-None-Match`(HttpEntityTag(\"old\"))) ~> taggedAndTimestamped ~> check {\n+        status === OK\n+        headers must containAllOf(responseHeaders)\n+      }\n+      Get() ~> addHeader(`If-Modified-Since`(timestamp - 1000L)) ~> taggedAndTimestamped ~> check {\n+        status === OK\n+        headers must containAllOf(responseHeaders)\n+      }\n+      Get() ~> addHeaders(`If-None-Match`(HttpEntityTag(\"old\")), `If-Modified-Since`(timestamp - 1000L)) ~> taggedAndTimestamped ~> check {\n+        status === OK\n+        headers must containAllOf(responseHeaders)\n+      }\n+    }\n+\n+    \"return OK for partially matching resources\" in {\n+      Get() ~> addHeaders(ifNoneMatch, `If-Modified-Since`(timestamp - 1000L)) ~> taggedAndTimestamped ~> check {\n+        status === OK\n+        headers must containAllOf(responseHeaders)\n+      }\n+      Get() ~> addHeaders(`If-None-Match`(HttpEntityTag(\"old\")), ifModifiedSince) ~> taggedAndTimestamped ~> check {\n+        status === OK\n+        headers must containAllOf(responseHeaders)\n+      }\n+    }\n+\n+    \"return PreconditionFailed for matched but unsafe resources\" in {\n+      Put() ~> addHeaders(ifNoneMatch, ifModifiedSince) ~> taggedAndTimestamped ~> check {\n+        status === PreconditionFailed\n+        headers === Nil\n+      }\n+    }\n+\n+    \"return normally for resources that would have returned anything other than a 2xx or 304\" in {",
        "path": "spray-routing-tests/src/test/scala/spray/routing/CacheConditionDirectivesSpec.scala",
        "position": null,
        "original_position": 77,
        "commit_id": "55f367fb9b50b55b906dbd7b41ed1860a8587545",
        "original_commit_id": "f2cbab78a7a5c64fa31acd4424c634e546a49d1e",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Thinking more about it I'd probably prefer logging a warning if `!response.status.isSuccess`. However, in order to do that we'd have to add a magnet layer to get to the implicit ActorFactory so we can get to the ActorSystem and its log. Too much overhead just for logging.\nWe could also simply throw an `IllegalStateException`, which is bound to be noticed! :)\n",
        "created_at": "2014-03-06T16:11:18Z",
        "updated_at": "2014-03-11T12:45:48Z",
        "html_url": "https://github.com/spray/spray/pull/797#discussion_r10347714",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/797",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10347714"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/797#discussion_r10347714"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/797"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10348474",
        "pull_request_review_id": null,
        "id": 10348474,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzQ4NDc0",
        "diff_hunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright \u00a9 2011-2014 the spray project <http://spray.io>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.http\n+\n+case class HttpEntityTag(tag: String, weak: Boolean = false) extends ValueRenderable {",
        "path": "spray-http/src/main/scala/spray/http/HttpEntityTag.scala",
        "position": null,
        "original_position": 19,
        "commit_id": "55f367fb9b50b55b906dbd7b41ed1860a8587545",
        "original_commit_id": "f2cbab78a7a5c64fa31acd4424c634e546a49d1e",
        "user": {
            "login": "2beaucoup",
            "id": 243903,
            "node_id": "MDQ6VXNlcjI0MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/243903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/2beaucoup",
            "html_url": "https://github.com/2beaucoup",
            "followers_url": "https://api.github.com/users/2beaucoup/followers",
            "following_url": "https://api.github.com/users/2beaucoup/following{/other_user}",
            "gists_url": "https://api.github.com/users/2beaucoup/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/2beaucoup/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/2beaucoup/subscriptions",
            "organizations_url": "https://api.github.com/users/2beaucoup/orgs",
            "repos_url": "https://api.github.com/users/2beaucoup/repos",
            "events_url": "https://api.github.com/users/2beaucoup/events{/privacy}",
            "received_events_url": "https://api.github.com/users/2beaucoup/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "We already have `spray.http.parser.ProtocolParameterRules#EntityTag`. Change anyway?\n",
        "created_at": "2014-03-06T16:28:30Z",
        "updated_at": "2014-03-11T12:45:48Z",
        "html_url": "https://github.com/spray/spray/pull/797#discussion_r10348474",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/797",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10348474"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/797#discussion_r10348474"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/797"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10348774",
        "pull_request_review_id": null,
        "id": 10348774,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzQ4Nzc0",
        "diff_hunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright \u00a9 2011-2014 the spray project <http://spray.io>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.http\n+\n+case class HttpEntityTag(tag: String, weak: Boolean = false) extends ValueRenderable {",
        "path": "spray-http/src/main/scala/spray/http/HttpEntityTag.scala",
        "position": null,
        "original_position": 19,
        "commit_id": "55f367fb9b50b55b906dbd7b41ed1860a8587545",
        "original_commit_id": "f2cbab78a7a5c64fa31acd4424c634e546a49d1e",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yes. This parser rule will be renamed to\n\n```\ndef `entity-tag` = ...\n```\n\nin akka-http anyway. If you want to, you can do this rename right now already...\n",
        "created_at": "2014-03-06T16:34:55Z",
        "updated_at": "2014-03-11T12:45:48Z",
        "html_url": "https://github.com/spray/spray/pull/797#discussion_r10348774",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/797",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10348774"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/797#discussion_r10348774"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/797"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10382289",
        "pull_request_review_id": null,
        "id": 10382289,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzgyMjg5",
        "diff_hunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright \u00a9 2011-2014 the spray project <http://spray.io>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package spray.routing\n+package directives\n+\n+import spray.http._\n+import spray.http.HttpHeaders._\n+import spray.http.HttpMethods._\n+import spray.http.StatusCodes._\n+\n+trait CacheConditionDirectives {\n+  import BasicDirectives._\n+\n+  def conditional(eTag: EntityTag, lastModified: DateTime): Directive0 =\n+    mapInnerRoute { route \u21d2\n+      ctx \u21d2 {\n+        def ctxWithtHeaders =",
        "path": "spray-routing/src/main/scala/spray/routing/directives/CacheConditionDirectives.scala",
        "position": null,
        "original_position": 31,
        "commit_id": "55f367fb9b50b55b906dbd7b41ed1860a8587545",
        "original_commit_id": "dfdd2826987b05d30152a865af8125cd55d14905",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "s/`ctxWithtHeaders`/`ctxWithHeaders`\n",
        "created_at": "2014-03-07T13:12:25Z",
        "updated_at": "2014-03-11T12:45:48Z",
        "html_url": "https://github.com/spray/spray/pull/797#discussion_r10382289",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/797",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10382289"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/797#discussion_r10382289"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/797"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10432975",
        "pull_request_review_id": null,
        "id": 10432975,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDMyOTc1",
        "diff_hunk": "@@ -107,19 +118,24 @@ trait FileAndResourceDirectives {\n           theClassLoader.getResource(resourceName) match {\n             case null \u21d2 reject\n             case url \u21d2\n-              val lastModified = {\n+              val (length, lastModified) = {\n                 val conn = url.openConnection()\n                 conn.setUseCaches(false) // otherwise the JDK will keep the JAR file open when we close!\n+                val len = conn.getContentLengthLong\n                 val lm = conn.getLastModified\n                 conn.getInputStream.close()",
        "path": "spray-routing/src/main/scala/spray/routing/directives/FileAndResourceDirectives.scala",
        "position": null,
        "original_position": 51,
        "commit_id": "55f367fb9b50b55b906dbd7b41ed1860a8587545",
        "original_commit_id": "e7c5c51a8dc094a87123ff0bffed3fec338124c4",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Wrap with try/finally here?\n",
        "created_at": "2014-03-10T15:09:23Z",
        "updated_at": "2014-03-11T12:45:48Z",
        "html_url": "https://github.com/spray/spray/pull/797#discussion_r10432975",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/797",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10432975"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/797#discussion_r10432975"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/797"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10433093",
        "pull_request_review_id": null,
        "id": 10433093,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDMzMDkz",
        "diff_hunk": "@@ -107,19 +118,24 @@ trait FileAndResourceDirectives {\n           theClassLoader.getResource(resourceName) match {\n             case null \u21d2 reject\n             case url \u21d2\n-              val lastModified = {\n+              val (length, lastModified) = {\n                 val conn = url.openConnection()\n                 conn.setUseCaches(false) // otherwise the JDK will keep the JAR file open when we close!\n+                val len = conn.getContentLengthLong\n                 val lm = conn.getLastModified\n                 conn.getInputStream.close()\n-                lm\n+                len -> lm\n               }\n               implicit val bufferMarshaller = BasicMarshallers.byteArrayMarshaller(contentType)\n-              respondWithLastModifiedHeader(lastModified) {\n-                complete {\n-                  // readAllBytes closes the InputStream when done, which ends up closing the JAR file\n-                  // if caching has been disabled on the connection\n-                  FileUtils.readAllBytes(url.openStream())\n+              autoChunked.apply { // TODO: add implicit RoutingSettings to method and use here\n+                conditionalFor(length, lastModified).apply {\n+                  withRangeSupport() {\n+                    complete {\n+                      // readAllBytes closes the InputStream when done, which ends up closing the JAR file\n+                      // if caching has been disabled on the connection\n+                      FileUtils.readAllBytes(url.openStream())",
        "path": "spray-routing/src/main/scala/spray/routing/directives/FileAndResourceDirectives.scala",
        "position": null,
        "original_position": 67,
        "commit_id": "55f367fb9b50b55b906dbd7b41ed1860a8587545",
        "original_commit_id": "e7c5c51a8dc094a87123ff0bffed3fec338124c4",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Do we need try/finally here as well?\n",
        "created_at": "2014-03-10T15:12:08Z",
        "updated_at": "2014-03-11T12:45:48Z",
        "html_url": "https://github.com/spray/spray/pull/797#discussion_r10433093",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/797",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10433093"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/797#discussion_r10433093"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/797"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10433230",
        "pull_request_review_id": null,
        "id": 10433230,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDMzMjMw",
        "diff_hunk": "@@ -107,19 +118,24 @@ trait FileAndResourceDirectives {\n           theClassLoader.getResource(resourceName) match {\n             case null \u21d2 reject\n             case url \u21d2\n-              val lastModified = {\n+              val (length, lastModified) = {\n                 val conn = url.openConnection()\n                 conn.setUseCaches(false) // otherwise the JDK will keep the JAR file open when we close!\n+                val len = conn.getContentLengthLong\n                 val lm = conn.getLastModified\n                 conn.getInputStream.close()\n-                lm\n+                len -> lm\n               }\n               implicit val bufferMarshaller = BasicMarshallers.byteArrayMarshaller(contentType)\n-              respondWithLastModifiedHeader(lastModified) {\n-                complete {\n-                  // readAllBytes closes the InputStream when done, which ends up closing the JAR file\n-                  // if caching has been disabled on the connection\n-                  FileUtils.readAllBytes(url.openStream())\n+              autoChunked.apply { // TODO: add implicit RoutingSettings to method and use here\n+                conditionalFor(length, lastModified).apply {\n+                  withRangeSupport() {\n+                    complete {\n+                      // readAllBytes closes the InputStream when done, which ends up closing the JAR file\n+                      // if caching has been disabled on the connection\n+                      FileUtils.readAllBytes(url.openStream())",
        "path": "spray-routing/src/main/scala/spray/routing/directives/FileAndResourceDirectives.scala",
        "position": null,
        "original_position": 67,
        "commit_id": "55f367fb9b50b55b906dbd7b41ed1860a8587545",
        "original_commit_id": "e7c5c51a8dc094a87123ff0bffed3fec338124c4",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Looking into https://github.com/sirthias/parboiled/blob/master/parboiled-core/src/main/java/org/parboiled/common/FileUtils.java it seems so: `FileUtils.readAllBytes/copyAll` doesn't have finally blocks closing at least the input stream.\n",
        "created_at": "2014-03-10T15:14:25Z",
        "updated_at": "2014-03-11T12:45:48Z",
        "html_url": "https://github.com/spray/spray/pull/797#discussion_r10433230",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/797",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10433230"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/797#discussion_r10433230"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/797"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10466777",
        "pull_request_review_id": null,
        "id": 10466777,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDY2Nzc3",
        "diff_hunk": "@@ -214,16 +214,31 @@ object DateTime {\n \n   /**\n    * Creates a new DateTime instance from the given String,\n-   * if it adheres to the format `yyyy-mm-ddThh:mm:ss`.\n+   * if it adheres to the format `yyyy-mm-ddThh:mm:ss[.ms][Z]`.\n+   * Note that the implementation will strip of the milliseconds.",
        "path": "spray-http/src/main/scala/spray/http/DateTime.scala",
        "position": null,
        "original_position": 6,
        "commit_id": "dd89978b8838e69276747f4d0196ad90492ececa",
        "original_commit_id": "225ab192cb125806e4bef7ec1ce21cd7c52caba4",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "s/strip of/strip off\n",
        "created_at": "2014-03-11T09:52:43Z",
        "updated_at": "2014-03-11T18:05:28Z",
        "html_url": "https://github.com/spray/spray/pull/816#discussion_r10466777",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/816",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10466777"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/816#discussion_r10466777"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/816"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10467789",
        "pull_request_review_id": null,
        "id": 10467789,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDY3Nzg5",
        "diff_hunk": "@@ -214,16 +214,31 @@ object DateTime {\n \n   /**\n    * Creates a new DateTime instance from the given String,\n-   * if it adheres to the format `yyyy-mm-ddThh:mm:ss`.\n+   * if it adheres to the format `yyyy-mm-ddThh:mm:ss[.ms][Z]`.",
        "path": "spray-http/src/main/scala/spray/http/DateTime.scala",
        "position": null,
        "original_position": 5,
        "commit_id": "dd89978b8838e69276747f4d0196ad90492ececa",
        "original_commit_id": "225ab192cb125806e4bef7ec1ce21cd7c52caba4",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think we should be very specific in our format string and thus state here:\n\n```\nyyyy-mm-ddThh:mm:ss[.m[m[m]][Z]]\n```\n",
        "created_at": "2014-03-11T10:29:44Z",
        "updated_at": "2014-03-11T18:05:28Z",
        "html_url": "https://github.com/spray/spray/pull/816#discussion_r10467789",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/816",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10467789"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/816#discussion_r10467789"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/816"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10467802",
        "pull_request_review_id": null,
        "id": 10467802,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDY3ODAy",
        "diff_hunk": "@@ -61,11 +61,32 @@ class DateTimeSpec extends Specification {\n     \"properly parse a legal string\" in {\n       DateTime.fromIsoDateTimeString(\"2011-07-12T14:08:12\") must beSome(DateTime(specificClicks))\n     }\n+    \"properly parse a legal string with milliseconds\" in {\n+      DateTime.fromIsoDateTimeString(\"2011-07-12T14:08:12.001\") must beSome(DateTime(specificClicks))\n+      DateTime.fromIsoDateTimeString(\"2011-07-12T14:08:12.01\") must beSome(DateTime(specificClicks))\n+      DateTime.fromIsoDateTimeString(\"2011-07-12T14:08:12.1\") must beSome(DateTime(specificClicks))\n+      DateTime.fromIsoDateTimeString(\"2011-07-12T14:08:12.123\") must beSome(DateTime(specificClicks))\n+    }\n+    \"properly parse a legal string with Z suffix\" in {\n+      DateTime.fromIsoDateTimeString(\"2011-07-12T14:08:12.001\") must beSome(DateTime(specificClicks))\n+      DateTime.fromIsoDateTimeString(\"2011-07-12T14:08:12.01\") must beSome(DateTime(specificClicks))\n+      DateTime.fromIsoDateTimeString(\"2011-07-12T14:08:12.1\") must beSome(DateTime(specificClicks))\n+      DateTime.fromIsoDateTimeString(\"2011-07-12T14:08:12.123\") must beSome(DateTime(specificClicks))\n+      DateTime.fromIsoDateTimeString(\"2011-07-12T14:08:12.001Z\") must beSome(DateTime(specificClicks))\n+      DateTime.fromIsoDateTimeString(\"2011-07-12T14:08:12.01Z\") must beSome(DateTime(specificClicks))\n+      DateTime.fromIsoDateTimeString(\"2011-07-12T14:08:12.1Z\") must beSome(DateTime(specificClicks))\n+      DateTime.fromIsoDateTimeString(\"2011-07-12T14:08:12.123Z\") must beSome(DateTime(specificClicks))\n+      DateTime.fromIsoDateTimeString(\"2011-07-12T14:08:12.Z\") must beSome(DateTime(specificClicks))",
        "path": "spray-http/src/test/scala/spray/http/DateTimeSpec.scala",
        "position": null,
        "original_position": 19,
        "commit_id": "dd89978b8838e69276747f4d0196ad90492ececa",
        "original_commit_id": "225ab192cb125806e4bef7ec1ce21cd7c52caba4",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I don't think we want to allow this case.\n",
        "created_at": "2014-03-11T10:30:04Z",
        "updated_at": "2014-03-11T18:05:28Z",
        "html_url": "https://github.com/spray/spray/pull/816#discussion_r10467802",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/816",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10467802"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/816#discussion_r10467802"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/816"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10469958",
        "pull_request_review_id": null,
        "id": 10469958,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDY5OTU4",
        "diff_hunk": "@@ -214,16 +214,31 @@ object DateTime {\n \n   /**\n    * Creates a new DateTime instance from the given String,\n-   * if it adheres to the format `yyyy-mm-ddThh:mm:ss`.\n+   * if it adheres to the format `yyyy-mm-ddThh:mm:ss[.ms][Z]`.\n+   * Note that the implementation will strip of the milliseconds.\n    */\n   def fromIsoDateTimeString(string: String): Option[DateTime] = {\n-    def c(ix: Int) = string.charAt(ix)\n+    val l = string.length\n+\n+    def c(ix: Int) = {\n+      if (ix >= 0) string.charAt(ix)\n+      else string.charAt(l + ix)\n+    }\n     def i(ix: Int) = {\n       val x = c(ix)\n       require('0' <= x && x <= '9')\n       x - '0'\n     }\n-    if (string.length == 19 && c(4) == '-' && c(7) == '-' && c(10) == 'T' && c(13) == ':' && c(16) == ':') {\n+    def is_i(ix: Int) = {\n+      val x = c(ix)\n+      '0' <= x && x <= '9'\n+    }\n+\n+    val check1 = l >= 19 && (c(4) == '-' && c(7) == '-' && c(10) == 'T' && c(13) == ':' && c(16) == ':')\n+    val check2 = l <= 19 || (c(19) == '.' && (20 until l - 1).forall(ix \u21d2 is_i(ix)))",
        "path": "spray-http/src/main/scala/spray/http/DateTime.scala",
        "position": null,
        "original_position": 28,
        "commit_id": "dd89978b8838e69276747f4d0196ad90492ececa",
        "original_commit_id": "225ab192cb125806e4bef7ec1ce21cd7c52caba4",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The `Range` construction and the `forall` closure is overhead that we can avoid.\n",
        "created_at": "2014-03-11T12:02:57Z",
        "updated_at": "2014-03-11T18:05:28Z",
        "html_url": "https://github.com/spray/spray/pull/816#discussion_r10469958",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/816",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10469958"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/816#discussion_r10469958"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/816"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10470003",
        "pull_request_review_id": null,
        "id": 10470003,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDcwMDAz",
        "diff_hunk": "@@ -214,16 +214,31 @@ object DateTime {\n \n   /**\n    * Creates a new DateTime instance from the given String,\n-   * if it adheres to the format `yyyy-mm-ddThh:mm:ss`.\n+   * if it adheres to the format `yyyy-mm-ddThh:mm:ss[.ms][Z]`.\n+   * Note that the implementation will strip of the milliseconds.\n    */\n   def fromIsoDateTimeString(string: String): Option[DateTime] = {\n-    def c(ix: Int) = string.charAt(ix)\n+    val l = string.length\n+\n+    def c(ix: Int) = {\n+      if (ix >= 0) string.charAt(ix)\n+      else string.charAt(l + ix)\n+    }\n     def i(ix: Int) = {\n       val x = c(ix)\n       require('0' <= x && x <= '9')\n       x - '0'\n     }\n-    if (string.length == 19 && c(4) == '-' && c(7) == '-' && c(10) == 'T' && c(13) == ':' && c(16) == ':') {\n+    def is_i(ix: Int) = {\n+      val x = c(ix)\n+      '0' <= x && x <= '9'\n+    }\n+\n+    val check1 = l >= 19 && (c(4) == '-' && c(7) == '-' && c(10) == 'T' && c(13) == ':' && c(16) == ':')\n+    val check2 = l <= 19 || (c(19) == '.' && (20 until l - 1).forall(ix \u21d2 is_i(ix)))\n+    val check3 = l <= 20 || (c(-1) == 'Z' || is_i(-1))\n+\n+    if (check1 && check2 && check3) {",
        "path": "spray-http/src/main/scala/spray/http/DateTime.scala",
        "position": null,
        "original_position": 31,
        "commit_id": "dd89978b8838e69276747f4d0196ad90492ececa",
        "original_commit_id": "225ab192cb125806e4bef7ec1ce21cd7c52caba4",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "If `check1` fails the evaluation of the `check2` and `check3` was superfluous.\n",
        "created_at": "2014-03-11T12:04:41Z",
        "updated_at": "2014-03-11T18:05:28Z",
        "html_url": "https://github.com/spray/spray/pull/816#discussion_r10470003",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/816",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10470003"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/816#discussion_r10470003"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/816"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10470032",
        "pull_request_review_id": null,
        "id": 10470032,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDcwMDMy",
        "diff_hunk": "@@ -214,16 +214,31 @@ object DateTime {\n \n   /**\n    * Creates a new DateTime instance from the given String,\n-   * if it adheres to the format `yyyy-mm-ddThh:mm:ss`.\n+   * if it adheres to the format `yyyy-mm-ddThh:mm:ss[.ms][Z]`.\n+   * Note that the implementation will strip of the milliseconds.\n    */\n   def fromIsoDateTimeString(string: String): Option[DateTime] = {",
        "path": "spray-http/src/main/scala/spray/http/DateTime.scala",
        "position": null,
        "original_position": 8,
        "commit_id": "dd89978b8838e69276747f4d0196ad90492ececa",
        "original_commit_id": "225ab192cb125806e4bef7ec1ce21cd7c52caba4",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "How about this alternative implementation?:\n\n```\ndef fromIsoDateTimeString(string: String): Option[DateTime] = {\n  def c(ix: Int) = string.charAt(ix)\n  def isDigit(c: Char) = '0' <= c && c <= '9'\n  def isDigitOrZ(c: Char) = isDigit(c) || c == 'Z'\n  def i(ix: Int) = {\n    val x = c(ix)\n    require(isDigit(x))\n    x - '0'\n  }\n  def check(len: Int): Boolean =\n    len match {\n      case 19 \u21d2 c(4) == '-' && c(7) == '-' && c(10) == 'T' && c(13) == ':' && c(16) == ':'\n      case 21 \u21d2 check(19) && c(19) == '.' && isDigit(c(20))\n      case 22 \u21d2 check(21) && isDigitOrZ(c(21))\n      case 23 \u21d2 check(21) && isDigit(c(21)) && isDigitOrZ(c(22))\n      case 24 \u21d2 check(21) && isDigit(c(21)) && isDigit(c(22)) && c(23) == 'Z'\n      case _  \u21d2 false\n    }\n  if (check(string.length)) {\n    try {\n      val year = i(0) * 1000 + i(1) * 100 + i(2) * 10 + i(3)\n      val month = i(5) * 10 + i(6)\n      val day = i(8) * 10 + i(9)\n      val hour = i(11) * 10 + i(12)\n      val min = i(14) * 10 + i(15)\n      val sec = i(17) * 10 + i(18)\n      Some(DateTime(year, month, day, hour, min, sec))\n    } catch { case _: IllegalArgumentException \u21d2 None }\n  } else None\n}\n```\n",
        "created_at": "2014-03-11T12:06:11Z",
        "updated_at": "2014-03-11T18:05:28Z",
        "html_url": "https://github.com/spray/spray/pull/816#discussion_r10470032",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/816",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10470032"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/816#discussion_r10470032"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/816"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10470343",
        "pull_request_review_id": null,
        "id": 10470343,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDcwMzQz",
        "diff_hunk": "@@ -214,16 +214,31 @@ object DateTime {\n \n   /**\n    * Creates a new DateTime instance from the given String,\n-   * if it adheres to the format `yyyy-mm-ddThh:mm:ss`.\n+   * if it adheres to the format `yyyy-mm-ddThh:mm:ss[.ms][Z]`.\n+   * Note that the implementation will strip off the milliseconds.",
        "path": "spray-http/src/main/scala/spray/http/DateTime.scala",
        "position": null,
        "original_position": 6,
        "commit_id": "dd89978b8838e69276747f4d0196ad90492ececa",
        "original_commit_id": "a13e9cbaea8e605b796795d01c4a6067b98d541f",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It is an invariant of DateTime that `clicks % 1000 == 0`, right? Shouldn't that then be checked somewhere or at least be stated?\n",
        "created_at": "2014-03-11T12:21:18Z",
        "updated_at": "2014-03-11T18:05:28Z",
        "html_url": "https://github.com/spray/spray/pull/816#discussion_r10470343",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/816",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10470343"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/816#discussion_r10470343"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/816"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10470420",
        "pull_request_review_id": null,
        "id": 10470420,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDcwNDIw",
        "diff_hunk": "@@ -214,16 +214,31 @@ object DateTime {\n \n   /**\n    * Creates a new DateTime instance from the given String,\n-   * if it adheres to the format `yyyy-mm-ddThh:mm:ss`.\n+   * if it adheres to the format `yyyy-mm-ddThh:mm:ss[.ms][Z]`.\n+   * Note that the implementation will strip off the milliseconds.",
        "path": "spray-http/src/main/scala/spray/http/DateTime.scala",
        "position": null,
        "original_position": 6,
        "commit_id": "dd89978b8838e69276747f4d0196ad90492ececa",
        "original_commit_id": "a13e9cbaea8e605b796795d01c4a6067b98d541f",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yes, we should make clear in the scaladocs to the class that this implementation does not provide millisecond accuracy. All `DateTime.apply` overloads should also receive respective scaladoc extensions.\n",
        "created_at": "2014-03-11T12:24:43Z",
        "updated_at": "2014-03-11T18:05:28Z",
        "html_url": "https://github.com/spray/spray/pull/816#discussion_r10470420",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/816",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10470420"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/816#discussion_r10470420"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/816"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10471209",
        "pull_request_review_id": null,
        "id": 10471209,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDcxMjA5",
        "diff_hunk": "@@ -214,16 +214,31 @@ object DateTime {\n \n   /**\n    * Creates a new DateTime instance from the given String,\n-   * if it adheres to the format `yyyy-mm-ddThh:mm:ss`.\n+   * if it adheres to the format `yyyy-mm-ddThh:mm:ss[.ms][Z]`.\n+   * Note that the implementation will strip of the milliseconds.\n    */\n   def fromIsoDateTimeString(string: String): Option[DateTime] = {",
        "path": "spray-http/src/main/scala/spray/http/DateTime.scala",
        "position": null,
        "original_position": 8,
        "commit_id": "dd89978b8838e69276747f4d0196ad90492ececa",
        "original_commit_id": "225ab192cb125806e4bef7ec1ce21cd7c52caba4",
        "user": {
            "login": "choffmeister",
            "id": 671620,
            "node_id": "MDQ6VXNlcjY3MTYyMA==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/671620?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/choffmeister",
            "html_url": "https://github.com/choffmeister",
            "followers_url": "https://api.github.com/users/choffmeister/followers",
            "following_url": "https://api.github.com/users/choffmeister/following{/other_user}",
            "gists_url": "https://api.github.com/users/choffmeister/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/choffmeister/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/choffmeister/subscriptions",
            "organizations_url": "https://api.github.com/users/choffmeister/orgs",
            "repos_url": "https://api.github.com/users/choffmeister/repos",
            "events_url": "https://api.github.com/users/choffmeister/events{/privacy}",
            "received_events_url": "https://api.github.com/users/choffmeister/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Looks good. But there is one case missing: In your code for example `2014-03-11T08:01:02Z` would not be recognised.\n\nWill update to your solution + all cases tonight. I also found a mistake in my test cases which I will resolve.\n\n(Removed some unnecessary stuff)\n",
        "created_at": "2014-03-11T12:55:49Z",
        "updated_at": "2014-03-11T18:05:28Z",
        "html_url": "https://github.com/spray/spray/pull/816#discussion_r10471209",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/816",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10471209"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/816#discussion_r10471209"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/816"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10473482",
        "pull_request_review_id": null,
        "id": 10473482,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDczNDgy",
        "diff_hunk": "@@ -214,16 +214,31 @@ object DateTime {\n \n   /**\n    * Creates a new DateTime instance from the given String,\n-   * if it adheres to the format `yyyy-mm-ddThh:mm:ss`.\n+   * if it adheres to the format `yyyy-mm-ddThh:mm:ss[.ms][Z]`.\n+   * Note that the implementation will strip of the milliseconds.\n    */\n   def fromIsoDateTimeString(string: String): Option[DateTime] = {",
        "path": "spray-http/src/main/scala/spray/http/DateTime.scala",
        "position": null,
        "original_position": 8,
        "commit_id": "dd89978b8838e69276747f4d0196ad90492ececa",
        "original_commit_id": "225ab192cb125806e4bef7ec1ce21cd7c52caba4",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "By the way: Which spec are we following with this?\nWe really shouldn't be making up any grammar ourselves but adhere to actual RFCs / specification wherever possible!\n",
        "created_at": "2014-03-11T13:57:57Z",
        "updated_at": "2014-03-11T18:05:28Z",
        "html_url": "https://github.com/spray/spray/pull/816#discussion_r10473482",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/816",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10473482"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/816#discussion_r10473482"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/816"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10474258",
        "pull_request_review_id": null,
        "id": 10474258,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDc0MjU4",
        "diff_hunk": "@@ -214,16 +214,31 @@ object DateTime {\n \n   /**\n    * Creates a new DateTime instance from the given String,\n-   * if it adheres to the format `yyyy-mm-ddThh:mm:ss`.\n+   * if it adheres to the format `yyyy-mm-ddThh:mm:ss[.ms][Z]`.\n+   * Note that the implementation will strip of the milliseconds.\n    */\n   def fromIsoDateTimeString(string: String): Option[DateTime] = {",
        "path": "spray-http/src/main/scala/spray/http/DateTime.scala",
        "position": null,
        "original_position": 8,
        "commit_id": "dd89978b8838e69276747f4d0196ad90492ececa",
        "original_commit_id": "225ab192cb125806e4bef7ec1ce21cd7c52caba4",
        "user": {
            "login": "choffmeister",
            "id": 671620,
            "node_id": "MDQ6VXNlcjY3MTYyMA==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/671620?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/choffmeister",
            "html_url": "https://github.com/choffmeister",
            "followers_url": "https://api.github.com/users/choffmeister/followers",
            "following_url": "https://api.github.com/users/choffmeister/following{/other_user}",
            "gists_url": "https://api.github.com/users/choffmeister/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/choffmeister/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/choffmeister/subscriptions",
            "organizations_url": "https://api.github.com/users/choffmeister/orgs",
            "repos_url": "https://api.github.com/users/choffmeister/repos",
            "events_url": "https://api.github.com/users/choffmeister/events{/privacy}",
            "received_events_url": "https://api.github.com/users/choffmeister/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Just checked the [RFC](http://www.ietf.org/rfc/rfc3339.txt), but indeed I could not find anything about milliseconds. Only the `Z` suffix is part of the standard.\n\nI think parsing the widely used format `yyyy-mm-ddThh:mm:ss.SSS[Z]` should be supported anyway. The fact, that browsers use this format (as stated [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)) should be reasons enough.\n",
        "created_at": "2014-03-11T14:16:18Z",
        "updated_at": "2014-03-11T18:05:28Z",
        "html_url": "https://github.com/spray/spray/pull/816#discussion_r10474258",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/816",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10474258"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/816#discussion_r10474258"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/816"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10475255",
        "pull_request_review_id": null,
        "id": 10475255,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDc1MjU1",
        "diff_hunk": "@@ -214,16 +214,31 @@ object DateTime {\n \n   /**\n    * Creates a new DateTime instance from the given String,\n-   * if it adheres to the format `yyyy-mm-ddThh:mm:ss`.\n+   * if it adheres to the format `yyyy-mm-ddThh:mm:ss[.ms][Z]`.\n+   * Note that the implementation will strip of the milliseconds.\n    */\n   def fromIsoDateTimeString(string: String): Option[DateTime] = {",
        "path": "spray-http/src/main/scala/spray/http/DateTime.scala",
        "position": null,
        "original_position": 8,
        "commit_id": "dd89978b8838e69276747f4d0196ad90492ececa",
        "original_commit_id": "225ab192cb125806e4bef7ec1ce21cd7c52caba4",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ok, so we should support\n\n```\nyyyy-mm-ddThh:mm:ss\n```\n\nand\n\n```\nyyyy-mm-ddThh:mm:ss.SSSZ\n```\n\nWhy should we add code supporting other variants like \n\n```\nyyyy-mm-ddThh:mm:ss.SSZ\n```\n\nor\n\n```\nyyyy-mm-ddThh:mm:ss.S\n```\n\nif we know of no real use case for them?\n",
        "created_at": "2014-03-11T14:34:50Z",
        "updated_at": "2014-03-11T18:05:28Z",
        "html_url": "https://github.com/spray/spray/pull/816#discussion_r10475255",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/816",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10475255"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/816#discussion_r10475255"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/816"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10475538",
        "pull_request_review_id": null,
        "id": 10475538,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDc1NTM4",
        "diff_hunk": "@@ -214,16 +214,31 @@ object DateTime {\n \n   /**\n    * Creates a new DateTime instance from the given String,\n-   * if it adheres to the format `yyyy-mm-ddThh:mm:ss`.\n+   * if it adheres to the format `yyyy-mm-ddThh:mm:ss[.ms][Z]`.\n+   * Note that the implementation will strip of the milliseconds.\n    */\n   def fromIsoDateTimeString(string: String): Option[DateTime] = {",
        "path": "spray-http/src/main/scala/spray/http/DateTime.scala",
        "position": null,
        "original_position": 8,
        "commit_id": "dd89978b8838e69276747f4d0196ad90492ececa",
        "original_commit_id": "225ab192cb125806e4bef7ec1ce21cd7c52caba4",
        "user": {
            "login": "choffmeister",
            "id": 671620,
            "node_id": "MDQ6VXNlcjY3MTYyMA==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/671620?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/choffmeister",
            "html_url": "https://github.com/choffmeister",
            "followers_url": "https://api.github.com/users/choffmeister/followers",
            "following_url": "https://api.github.com/users/choffmeister/following{/other_user}",
            "gists_url": "https://api.github.com/users/choffmeister/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/choffmeister/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/choffmeister/subscriptions",
            "organizations_url": "https://api.github.com/users/choffmeister/orgs",
            "repos_url": "https://api.github.com/users/choffmeister/repos",
            "events_url": "https://api.github.com/users/choffmeister/events{/privacy}",
            "received_events_url": "https://api.github.com/users/choffmeister/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Valid point. The other combinations seem to come from my own mind. Less cases mean more performance.\n\nI will (hopefully) supply a merge ready PR tonight that incorporates all the needed changes.\n",
        "created_at": "2014-03-11T14:40:12Z",
        "updated_at": "2014-03-11T18:05:28Z",
        "html_url": "https://github.com/spray/spray/pull/816#discussion_r10475538",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/816",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10475538"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/816#discussion_r10475538"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/816"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10475696",
        "pull_request_review_id": null,
        "id": 10475696,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDc1Njk2",
        "diff_hunk": "@@ -214,16 +214,31 @@ object DateTime {\n \n   /**\n    * Creates a new DateTime instance from the given String,\n-   * if it adheres to the format `yyyy-mm-ddThh:mm:ss`.\n+   * if it adheres to the format `yyyy-mm-ddThh:mm:ss[.ms][Z]`.\n+   * Note that the implementation will strip of the milliseconds.\n    */\n   def fromIsoDateTimeString(string: String): Option[DateTime] = {",
        "path": "spray-http/src/main/scala/spray/http/DateTime.scala",
        "position": null,
        "original_position": 8,
        "commit_id": "dd89978b8838e69276747f4d0196ad90492ececa",
        "original_commit_id": "225ab192cb125806e4bef7ec1ce21cd7c52caba4",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Excellent! Thanks, Christian!\n",
        "created_at": "2014-03-11T14:42:56Z",
        "updated_at": "2014-03-11T18:05:28Z",
        "html_url": "https://github.com/spray/spray/pull/816#discussion_r10475696",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/816",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10475696"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/816#discussion_r10475696"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/816"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10476721",
        "pull_request_review_id": null,
        "id": 10476721,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDc2NzIx",
        "diff_hunk": "@@ -214,16 +214,31 @@ object DateTime {\n \n   /**\n    * Creates a new DateTime instance from the given String,\n-   * if it adheres to the format `yyyy-mm-ddThh:mm:ss`.\n+   * if it adheres to the format `yyyy-mm-ddThh:mm:ss[.ms][Z]`.\n+   * Note that the implementation will strip off the milliseconds.",
        "path": "spray-http/src/main/scala/spray/http/DateTime.scala",
        "position": null,
        "original_position": 6,
        "commit_id": "dd89978b8838e69276747f4d0196ad90492ececa",
        "original_commit_id": "a13e9cbaea8e605b796795d01c4a6067b98d541f",
        "user": {
            "login": "choffmeister",
            "id": 671620,
            "node_id": "MDQ6VXNlcjY3MTYyMA==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/671620?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/choffmeister",
            "html_url": "https://github.com/choffmeister",
            "followers_url": "https://api.github.com/users/choffmeister/followers",
            "following_url": "https://api.github.com/users/choffmeister/following{/other_user}",
            "gists_url": "https://api.github.com/users/choffmeister/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/choffmeister/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/choffmeister/subscriptions",
            "organizations_url": "https://api.github.com/users/choffmeister/orgs",
            "repos_url": "https://api.github.com/users/choffmeister/repos",
            "events_url": "https://api.github.com/users/choffmeister/events{/privacy}",
            "received_events_url": "https://api.github.com/users/choffmeister/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Should this be part of this PR? Or will the adoption of the scaladocs be handled in another?\n",
        "created_at": "2014-03-11T14:59:31Z",
        "updated_at": "2014-03-11T18:05:28Z",
        "html_url": "https://github.com/spray/spray/pull/816#discussion_r10476721",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/816",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10476721"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/816#discussion_r10476721"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/816"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10477024",
        "pull_request_review_id": null,
        "id": 10477024,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDc3MDI0",
        "diff_hunk": "@@ -214,16 +214,31 @@ object DateTime {\n \n   /**\n    * Creates a new DateTime instance from the given String,\n-   * if it adheres to the format `yyyy-mm-ddThh:mm:ss`.\n+   * if it adheres to the format `yyyy-mm-ddThh:mm:ss[.ms][Z]`.\n+   * Note that the implementation will strip off the milliseconds.",
        "path": "spray-http/src/main/scala/spray/http/DateTime.scala",
        "position": null,
        "original_position": 6,
        "commit_id": "dd89978b8838e69276747f4d0196ad90492ececa",
        "original_commit_id": "a13e9cbaea8e605b796795d01c4a6067b98d541f",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "If you could include it that'd be great!\n(Like akka we try to follow the [boyscout rule](http://programmer.97things.oreilly.com/wiki/index.php/The_Boy_Scout_Rule) as much as we can...)\n",
        "created_at": "2014-03-11T15:05:15Z",
        "updated_at": "2014-03-11T18:05:28Z",
        "html_url": "https://github.com/spray/spray/pull/816#discussion_r10477024",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/816",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10477024"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/816#discussion_r10477024"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/816"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10513398",
        "pull_request_review_id": null,
        "id": 10513398,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNTEzMzk4",
        "diff_hunk": "@@ -209,21 +212,31 @@ object DateTime {\n \n   /**\n    * Creates a new `DateTime` instance for the current point in time.\n+   * Note that this implementation discards milliseconds (i.e. rounds down to full seconds).\n    */\n   def now: DateTime = apply(System.currentTimeMillis)\n \n   /**\n    * Creates a new DateTime instance from the given String,\n-   * if it adheres to the format `yyyy-mm-ddThh:mm:ss`.\n+   * if it adheres to the format `yyyy-mm-ddThh:mm:ss[.SSSZ]`.\n+   * Note that this implementation discards milliseconds (i.e. rounds down to full seconds).\n    */\n   def fromIsoDateTimeString(string: String): Option[DateTime] = {\n     def c(ix: Int) = string.charAt(ix)\n+    def isDigit(c: Char) = '0' <= c && c <= '9'\n+    def isDigitOrZ(c: Char) = isDigit(c) || c == 'Z'",
        "path": "spray-http/src/main/scala/spray/http/DateTime.scala",
        "position": 41,
        "original_position": 41,
        "commit_id": "dd89978b8838e69276747f4d0196ad90492ececa",
        "original_commit_id": "dd89978b8838e69276747f4d0196ad90492ececa",
        "user": {
            "login": "2beaucoup",
            "id": 243903,
            "node_id": "MDQ6VXNlcjI0MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/243903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/2beaucoup",
            "html_url": "https://github.com/2beaucoup",
            "followers_url": "https://api.github.com/users/2beaucoup/followers",
            "following_url": "https://api.github.com/users/2beaucoup/following{/other_user}",
            "gists_url": "https://api.github.com/users/2beaucoup/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/2beaucoup/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/2beaucoup/subscriptions",
            "organizations_url": "https://api.github.com/users/2beaucoup/orgs",
            "repos_url": "https://api.github.com/users/2beaucoup/repos",
            "events_url": "https://api.github.com/users/2beaucoup/events{/privacy}",
            "received_events_url": "https://api.github.com/users/2beaucoup/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Should this be removed?\n",
        "created_at": "2014-03-12T11:27:55Z",
        "updated_at": "2014-03-12T11:27:55Z",
        "html_url": "https://github.com/spray/spray/pull/816#discussion_r10513398",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/816",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10513398"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/816#discussion_r10513398"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/816"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10513422",
        "pull_request_review_id": null,
        "id": 10513422,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNTEzNDIy",
        "diff_hunk": "@@ -209,21 +212,31 @@ object DateTime {\n \n   /**\n    * Creates a new `DateTime` instance for the current point in time.\n+   * Note that this implementation discards milliseconds (i.e. rounds down to full seconds).\n    */\n   def now: DateTime = apply(System.currentTimeMillis)\n \n   /**\n    * Creates a new DateTime instance from the given String,\n-   * if it adheres to the format `yyyy-mm-ddThh:mm:ss`.\n+   * if it adheres to the format `yyyy-mm-ddThh:mm:ss[.SSSZ]`.\n+   * Note that this implementation discards milliseconds (i.e. rounds down to full seconds).\n    */\n   def fromIsoDateTimeString(string: String): Option[DateTime] = {\n     def c(ix: Int) = string.charAt(ix)\n+    def isDigit(c: Char) = '0' <= c && c <= '9'\n+    def isDigitOrZ(c: Char) = isDigit(c) || c == 'Z'",
        "path": "spray-http/src/main/scala/spray/http/DateTime.scala",
        "position": 41,
        "original_position": 41,
        "commit_id": "dd89978b8838e69276747f4d0196ad90492ececa",
        "original_commit_id": "dd89978b8838e69276747f4d0196ad90492ececa",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yes, I just did... :)\n",
        "created_at": "2014-03-12T11:28:57Z",
        "updated_at": "2014-03-12T11:28:57Z",
        "html_url": "https://github.com/spray/spray/pull/816#discussion_r10513422",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/816",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10513422"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/816#discussion_r10513422"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/816"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10513861",
        "pull_request_review_id": null,
        "id": 10513861,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNTEzODYx",
        "diff_hunk": "@@ -209,21 +212,31 @@ object DateTime {\n \n   /**\n    * Creates a new `DateTime` instance for the current point in time.\n+   * Note that this implementation discards milliseconds (i.e. rounds down to full seconds).\n    */\n   def now: DateTime = apply(System.currentTimeMillis)\n \n   /**\n    * Creates a new DateTime instance from the given String,\n-   * if it adheres to the format `yyyy-mm-ddThh:mm:ss`.\n+   * if it adheres to the format `yyyy-mm-ddThh:mm:ss[.SSSZ]`.\n+   * Note that this implementation discards milliseconds (i.e. rounds down to full seconds).\n    */\n   def fromIsoDateTimeString(string: String): Option[DateTime] = {\n     def c(ix: Int) = string.charAt(ix)\n+    def isDigit(c: Char) = '0' <= c && c <= '9'\n+    def isDigitOrZ(c: Char) = isDigit(c) || c == 'Z'",
        "path": "spray-http/src/main/scala/spray/http/DateTime.scala",
        "position": 41,
        "original_position": 41,
        "commit_id": "dd89978b8838e69276747f4d0196ad90492ececa",
        "original_commit_id": "dd89978b8838e69276747f4d0196ad90492ececa",
        "user": {
            "login": "2beaucoup",
            "id": 243903,
            "node_id": "MDQ6VXNlcjI0MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/243903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/2beaucoup",
            "html_url": "https://github.com/2beaucoup",
            "followers_url": "https://api.github.com/users/2beaucoup/followers",
            "following_url": "https://api.github.com/users/2beaucoup/following{/other_user}",
            "gists_url": "https://api.github.com/users/2beaucoup/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/2beaucoup/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/2beaucoup/subscriptions",
            "organizations_url": "https://api.github.com/users/2beaucoup/orgs",
            "repos_url": "https://api.github.com/users/2beaucoup/repos",
            "events_url": "https://api.github.com/users/2beaucoup/events{/privacy}",
            "received_events_url": "https://api.github.com/users/2beaucoup/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": ":+1: \n",
        "created_at": "2014-03-12T11:47:30Z",
        "updated_at": "2014-03-12T11:47:30Z",
        "html_url": "https://github.com/spray/spray/pull/816#discussion_r10513861",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/816",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10513861"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/816#discussion_r10513861"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/816"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10796834",
        "pull_request_review_id": null,
        "id": 10796834,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzk2ODM0",
        "diff_hunk": "@@ -101,25 +101,41 @@ object BuildSettings {\n     unmanagedSourceDirectories in Test <<= baseDirectory { _ ** \"code\" get }\n   )\n \n-  lazy val exampleSettings = basicSettings ++ noPublishing\n+  /*\n+   * Add scala-xml dependency when needed (for Scala 2.11 and newer) in a robust way\n+   * This mechanism supports cross-version publishing\n+   */\n+  private val scalaXmlModule: Setting[Seq[sbt.ModuleID]] = libraryDependencies := {",
        "path": "project/BuildSettings.scala",
        "position": 9,
        "original_position": 9,
        "commit_id": "f42a26cc1db532632d8ad407286b983ee27cd0e5",
        "original_commit_id": "f42a26cc1db532632d8ad407286b983ee27cd0e5",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Could you move this into Dependencies.scala\n",
        "created_at": "2014-03-20T14:30:09Z",
        "updated_at": "2014-03-20T14:30:09Z",
        "html_url": "https://github.com/spray/spray/pull/834#discussion_r10796834",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/834",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10796834"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/834#discussion_r10796834"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/834"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/10802731",
        "pull_request_review_id": null,
        "id": 10802731,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODAyNzMx",
        "diff_hunk": "@@ -101,25 +101,41 @@ object BuildSettings {\n     unmanagedSourceDirectories in Test <<= baseDirectory { _ ** \"code\" get }\n   )\n \n-  lazy val exampleSettings = basicSettings ++ noPublishing\n+  /*\n+   * Add scala-xml dependency when needed (for Scala 2.11 and newer) in a robust way\n+   * This mechanism supports cross-version publishing\n+   */\n+  private val scalaXmlModule: Setting[Seq[sbt.ModuleID]] = libraryDependencies := {",
        "path": "project/BuildSettings.scala",
        "position": 9,
        "original_position": 9,
        "commit_id": "f42a26cc1db532632d8ad407286b983ee27cd0e5",
        "original_commit_id": "f42a26cc1db532632d8ad407286b983ee27cd0e5",
        "user": {
            "login": "gkossakowski",
            "id": 4217,
            "node_id": "MDQ6VXNlcjQyMTc=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/4217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gkossakowski",
            "html_url": "https://github.com/gkossakowski",
            "followers_url": "https://api.github.com/users/gkossakowski/followers",
            "following_url": "https://api.github.com/users/gkossakowski/following{/other_user}",
            "gists_url": "https://api.github.com/users/gkossakowski/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gkossakowski/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gkossakowski/subscriptions",
            "organizations_url": "https://api.github.com/users/gkossakowski/orgs",
            "repos_url": "https://api.github.com/users/gkossakowski/repos",
            "events_url": "https://api.github.com/users/gkossakowski/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gkossakowski/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yes, good point.\n",
        "created_at": "2014-03-20T16:24:42Z",
        "updated_at": "2014-03-20T16:24:42Z",
        "html_url": "https://github.com/spray/spray/pull/834#discussion_r10802731",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/834",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/10802731"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/834#discussion_r10802731"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/834"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/16535887",
        "pull_request_review_id": null,
        "id": 16535887,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTM1ODg3",
        "diff_hunk": "@@ -43,9 +43,13 @@ class BasicMarshallersSpec extends Specification {\n   }\n \n   \"The FormDataMarshaller\" should {\n+    \"Properly marshall FormData instances to application/x-www-form-urlencoded bodies with UTF-8 % URL encoding\" in {\n+      marshal(FormData(Map(\"unicode\" -> \"\u4e2d\u56fd\u626c\u58f0\u5668\u53ef\u4ee5\u9605\u8bfb\u672c\"))) ===\n+        Right(HttpEntity(ContentType(`application/x-www-form-urlencoded`, `UTF-8`), \"unicode=%E4%B8%AD%E5%9B%BD%E6%89%AC%E5%A3%B0%E5%99%A8%E5%8F%AF%E4%BB%A5%E9%98%85%E8%AF%BB%E6%9C%AC\"))\n+    }\n     \"properly marshal FormData instances to application/x-www-form-urlencoded entity bodies\" in {\n       marshal(FormData(Map(\"name\" -> \"Bob\", \"pass\" -> \"h\u00e4llo\", \"admin\" -> \"\"))) ===\n-        Right(HttpEntity(ContentType(`application/x-www-form-urlencoded`, `UTF-8`), \"name=Bob&pass=h%E4llo&admin=\"))",
        "path": "spray-httpx/src/test/scala/spray/httpx/marshalling/BasicMarshallersSpec.scala",
        "position": 10,
        "original_position": 10,
        "commit_id": "ad64600ff48f8508084f50f4538618a49ea16ed3",
        "original_commit_id": "ad64600ff48f8508084f50f4538618a49ea16ed3",
        "user": {
            "login": "rahilb",
            "id": 3636251,
            "node_id": "MDQ6VXNlcjM2MzYyNTE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/3636251?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rahilb",
            "html_url": "https://github.com/rahilb",
            "followers_url": "https://api.github.com/users/rahilb/followers",
            "following_url": "https://api.github.com/users/rahilb/following{/other_user}",
            "gists_url": "https://api.github.com/users/rahilb/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rahilb/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rahilb/subscriptions",
            "organizations_url": "https://api.github.com/users/rahilb/orgs",
            "repos_url": "https://api.github.com/users/rahilb/repos",
            "events_url": "https://api.github.com/users/rahilb/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rahilb/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Not sure this was ever valid: `h%E4llo` is not valid UTF-8 % encoding.\n",
        "created_at": "2014-08-21T12:39:05Z",
        "updated_at": "2014-08-21T12:39:05Z",
        "html_url": "https://github.com/spray/spray/pull/886#discussion_r16535887",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/886",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/16535887"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/886#discussion_r16535887"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/886"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/13093610",
        "pull_request_review_id": null,
        "id": 13093610,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDkzNjEw",
        "diff_hunk": "@@ -98,4 +96,66 @@ class SecurityDirectivesSpec extends RoutingSpec {\n         check { responseAs[String] === \"2\" }\n     }\n   }\n+\n+  \"the 'optionalAuthenticate(BasicAuth())' directive\" should {\n+    \"extract None from requests without Authorization header\" in {\n+      Get() ~> {\n+        optionalAuthenticate(dontAuth) { echoComplete }\n+      } ~> check { responseAs[String] === \"None\" }\n+    }\n+    \"extract None from requests with Authorization header using a different scheme\" in {",
        "path": "spray-routing-tests/src/test/scala/spray/routing/SecurityDirectivesSpec.scala",
        "position": 20,
        "original_position": 20,
        "commit_id": "e91e71608bb32624b950d376d560ad981ee54f79",
        "original_commit_id": "bf7277e5f5b2456f6e46f7e4be88d4efb72be22a",
        "user": {
            "login": "gregbeech",
            "id": 1895226,
            "node_id": "MDQ6VXNlcjE4OTUyMjY=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1895226?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gregbeech",
            "html_url": "https://github.com/gregbeech",
            "followers_url": "https://api.github.com/users/gregbeech/followers",
            "following_url": "https://api.github.com/users/gregbeech/following{/other_user}",
            "gists_url": "https://api.github.com/users/gregbeech/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gregbeech/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gregbeech/subscriptions",
            "organizations_url": "https://api.github.com/users/gregbeech/orgs",
            "repos_url": "https://api.github.com/users/gregbeech/repos",
            "events_url": "https://api.github.com/users/gregbeech/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gregbeech/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This test is probably the only controversial one but I believe it's the correct approach given the header doesn't have any knowledge of what the authenticator is doing, and it reports the reason as `CredentialsMissing` as they weren't provided for a supported scheme.\n",
        "created_at": "2014-05-27T18:28:43Z",
        "updated_at": "2014-10-09T10:35:47Z",
        "html_url": "https://github.com/spray/spray/pull/876#discussion_r13093610",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/876",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/13093610"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/876#discussion_r13093610"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/876"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/18334720",
        "pull_request_review_id": null,
        "id": 18334720,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzM0NzIw",
        "diff_hunk": "@@ -113,6 +113,8 @@ Directive                              Description\n                                        with the future's failure exception as an extraction of type ``Throwable``\n :ref:`-onSuccess-`                     \"Unwraps\" a ``Future[T]`` and runs its inner route after future completion with\n                                        the future's value as an extraction of type ``T``\n+:ref:`-optionalAuthenticate-`          Tries to authenticate the user with a given authenticator and either extract a\n+                                       an object representing the optional user context or rejects",
        "path": "docs/documentation/spray-routing/predefined-directives-alphabetically.rst",
        "position": null,
        "original_position": 5,
        "commit_id": "e91e71608bb32624b950d376d560ad981ee54f79",
        "original_commit_id": "096a741911d3f1fb25075addb80d32ffb9cecb53",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "s/rejects/None\n",
        "created_at": "2014-10-02T12:05:12Z",
        "updated_at": "2014-10-09T10:35:47Z",
        "html_url": "https://github.com/spray/spray/pull/876#discussion_r18334720",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/876",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/18334720"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/876#discussion_r18334720"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/876"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/18334756",
        "pull_request_review_id": null,
        "id": 18334756,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzM0NzU2",
        "diff_hunk": "@@ -0,0 +1,26 @@\n+.. _-optionalAuthenticate-:\n+\n+optionalAuthenticate\n+====================\n+\n+Authenticates a request by checking credentials supplied in the request and extracts a value\n+representing the authenticated principal.",
        "path": "docs/documentation/spray-routing/security-directives/optionalAuthenticate.rst",
        "position": null,
        "original_position": 7,
        "commit_id": "e91e71608bb32624b950d376d560ad981ee54f79",
        "original_commit_id": "096a741911d3f1fb25075addb80d32ffb9cecb53",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Maybe we should add this sentence:\n\"If authentication fails the directive extracts `None`.\"\n",
        "created_at": "2014-10-02T12:06:16Z",
        "updated_at": "2014-10-09T10:35:47Z",
        "html_url": "https://github.com/spray/spray/pull/876#discussion_r18334756",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/876",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/18334756"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/876#discussion_r18334756"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/876"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/18334828",
        "pull_request_review_id": null,
        "id": 18334828,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzM0ODI4",
        "diff_hunk": "@@ -98,4 +96,66 @@ class SecurityDirectivesSpec extends RoutingSpec {\n         check { responseAs[String] === \"2\" }\n     }\n   }\n+\n+  \"the 'optionalAuthenticate(BasicAuth())' directive\" should {\n+    \"extract None from requests without Authorization header\" in {\n+      Get() ~> {\n+        optionalAuthenticate(dontAuth) { echoComplete }\n+      } ~> check { responseAs[String] === \"None\" }\n+    }\n+    \"extract None from requests with Authorization header using a different scheme\" in {",
        "path": "spray-routing-tests/src/test/scala/spray/routing/SecurityDirectivesSpec.scala",
        "position": 20,
        "original_position": 20,
        "commit_id": "e91e71608bb32624b950d376d560ad981ee54f79",
        "original_commit_id": "bf7277e5f5b2456f6e46f7e4be88d4efb72be22a",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I don't quite understand, how this tests involved a \"different scheme\". What are you really testing here?\n",
        "created_at": "2014-10-02T12:08:42Z",
        "updated_at": "2014-10-09T10:35:47Z",
        "html_url": "https://github.com/spray/spray/pull/876#discussion_r18334828",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/876",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/18334828"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/876#discussion_r18334828"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/876"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/18511386",
        "pull_request_review_id": null,
        "id": 18511386,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTExMzg2",
        "diff_hunk": "@@ -98,4 +96,66 @@ class SecurityDirectivesSpec extends RoutingSpec {\n         check { responseAs[String] === \"2\" }\n     }\n   }\n+\n+  \"the 'optionalAuthenticate(BasicAuth())' directive\" should {\n+    \"extract None from requests without Authorization header\" in {\n+      Get() ~> {\n+        optionalAuthenticate(dontAuth) { echoComplete }\n+      } ~> check { responseAs[String] === \"None\" }\n+    }\n+    \"extract None from requests with Authorization header using a different scheme\" in {",
        "path": "spray-routing-tests/src/test/scala/spray/routing/SecurityDirectivesSpec.scala",
        "position": 20,
        "original_position": 20,
        "commit_id": "e91e71608bb32624b950d376d560ad981ee54f79",
        "original_commit_id": "bf7277e5f5b2456f6e46f7e4be88d4efb72be22a",
        "user": {
            "login": "gregbeech",
            "id": 1895226,
            "node_id": "MDQ6VXNlcjE4OTUyMjY=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1895226?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gregbeech",
            "html_url": "https://github.com/gregbeech",
            "followers_url": "https://api.github.com/users/gregbeech/followers",
            "following_url": "https://api.github.com/users/gregbeech/following{/other_user}",
            "gists_url": "https://api.github.com/users/gregbeech/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gregbeech/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gregbeech/subscriptions",
            "organizations_url": "https://api.github.com/users/gregbeech/orgs",
            "repos_url": "https://api.github.com/users/gregbeech/repos",
            "events_url": "https://api.github.com/users/gregbeech/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gregbeech/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The `BasicAuth()` authenticator reports `CredentialsMissing` in this case which is correct for it (as there were no credentials in the `Basic` scheme) but this is arguably not the correct overall result for authorisation as credentials were provided in the `Authorization` header in the `bob` scheme; `CredentialsRejected` might be what you'd expect.\n\nAs such, I believe it might be more correct for this test to result in an `AuthenticationFailedRejection(CredentialsRejected, _)` rejection rather than extracting `None`, but that would be a much more significant change to the way authenticators work, so I've just based the test on the way they currently work.\n",
        "created_at": "2014-10-07T10:48:57Z",
        "updated_at": "2014-10-09T10:35:47Z",
        "html_url": "https://github.com/spray/spray/pull/876#discussion_r18511386",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/876",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/18511386"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/876#discussion_r18511386"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/876"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/18511433",
        "pull_request_review_id": null,
        "id": 18511433,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTExNDMz",
        "diff_hunk": "@@ -0,0 +1,26 @@\n+.. _-optionalAuthenticate-:\n+\n+optionalAuthenticate\n+====================\n+\n+Authenticates a request by checking credentials supplied in the request and extracts a value\n+representing the authenticated principal.",
        "path": "docs/documentation/spray-routing/security-directives/optionalAuthenticate.rst",
        "position": null,
        "original_position": 7,
        "commit_id": "e91e71608bb32624b950d376d560ad981ee54f79",
        "original_commit_id": "096a741911d3f1fb25075addb80d32ffb9cecb53",
        "user": {
            "login": "gregbeech",
            "id": 1895226,
            "node_id": "MDQ6VXNlcjE4OTUyMjY=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1895226?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gregbeech",
            "html_url": "https://github.com/gregbeech",
            "followers_url": "https://api.github.com/users/gregbeech/followers",
            "following_url": "https://api.github.com/users/gregbeech/following{/other_user}",
            "gists_url": "https://api.github.com/users/gregbeech/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gregbeech/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gregbeech/subscriptions",
            "organizations_url": "https://api.github.com/users/gregbeech/orgs",
            "repos_url": "https://api.github.com/users/gregbeech/repos",
            "events_url": "https://api.github.com/users/gregbeech/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gregbeech/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Makes sense.\n",
        "created_at": "2014-10-07T10:50:20Z",
        "updated_at": "2014-10-09T10:35:47Z",
        "html_url": "https://github.com/spray/spray/pull/876#discussion_r18511433",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/876",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/18511433"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/876#discussion_r18511433"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/876"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/18511440",
        "pull_request_review_id": null,
        "id": 18511440,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTExNDQw",
        "diff_hunk": "@@ -113,6 +113,8 @@ Directive                              Description\n                                        with the future's failure exception as an extraction of type ``Throwable``\n :ref:`-onSuccess-`                     \"Unwraps\" a ``Future[T]`` and runs its inner route after future completion with\n                                        the future's value as an extraction of type ``T``\n+:ref:`-optionalAuthenticate-`          Tries to authenticate the user with a given authenticator and either extract a\n+                                       an object representing the optional user context or rejects",
        "path": "docs/documentation/spray-routing/predefined-directives-alphabetically.rst",
        "position": null,
        "original_position": 5,
        "commit_id": "e91e71608bb32624b950d376d560ad981ee54f79",
        "original_commit_id": "096a741911d3f1fb25075addb80d32ffb9cecb53",
        "user": {
            "login": "gregbeech",
            "id": 1895226,
            "node_id": "MDQ6VXNlcjE4OTUyMjY=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1895226?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gregbeech",
            "html_url": "https://github.com/gregbeech",
            "followers_url": "https://api.github.com/users/gregbeech/followers",
            "following_url": "https://api.github.com/users/gregbeech/following{/other_user}",
            "gists_url": "https://api.github.com/users/gregbeech/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gregbeech/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gregbeech/subscriptions",
            "organizations_url": "https://api.github.com/users/gregbeech/orgs",
            "repos_url": "https://api.github.com/users/gregbeech/repos",
            "events_url": "https://api.github.com/users/gregbeech/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gregbeech/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Oops...\n",
        "created_at": "2014-10-07T10:50:33Z",
        "updated_at": "2014-10-09T10:35:47Z",
        "html_url": "https://github.com/spray/spray/pull/876#discussion_r18511440",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/876",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/18511440"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/876#discussion_r18511440"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/876"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/18513052",
        "pull_request_review_id": null,
        "id": 18513052,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTEzMDUy",
        "diff_hunk": "@@ -98,4 +96,66 @@ class SecurityDirectivesSpec extends RoutingSpec {\n         check { responseAs[String] === \"2\" }\n     }\n   }\n+\n+  \"the 'optionalAuthenticate(BasicAuth())' directive\" should {\n+    \"extract None from requests without Authorization header\" in {\n+      Get() ~> {\n+        optionalAuthenticate(dontAuth) { echoComplete }\n+      } ~> check { responseAs[String] === \"None\" }\n+    }\n+    \"extract None from requests with Authorization header using a different scheme\" in {",
        "path": "spray-routing-tests/src/test/scala/spray/routing/SecurityDirectivesSpec.scala",
        "position": 20,
        "original_position": 20,
        "commit_id": "e91e71608bb32624b950d376d560ad981ee54f79",
        "original_commit_id": "bf7277e5f5b2456f6e46f7e4be88d4efb72be22a",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ah, ok, thanks for the explanation.\nI can see your point but agree that the current behavior (which this test verifies) is indeed the right one.\n",
        "created_at": "2014-10-07T11:38:53Z",
        "updated_at": "2014-10-09T10:35:47Z",
        "html_url": "https://github.com/spray/spray/pull/876#discussion_r18513052",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/876",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/18513052"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/876#discussion_r18513052"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/876"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/26533167",
        "pull_request_review_id": null,
        "id": 26533167,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2NTMzMTY3",
        "diff_hunk": "@@ -358,8 +366,12 @@ class UriSpec extends Specification {\n       normalize(\"Http://Localhost\") === \"http://localhost\"\n       normalize(\"hTtP://localHost\") === \"http://localhost\"\n       normalize(\"https://:443\") === \"https://\"\n+      normalize(\"https://:444\") === \"https://:444\"\n+      normalize(\"http://:80/foo\") === \"http:///foo\"\n+      normalize(\"http://:8080/foo\") === \"http://:8080/foo\"\n       normalize(\"ftp://example.com:21\") === \"ftp://example.com\"\n-      normalize(\"example.com:21\") === \"example.com:21\"\n+      normalize(\"example.com:21\") === \"example.com:21\" // example.com is parsed as the SCHEME (which is correct)",
        "path": "spray-http/src/test/scala/spray/http/UriSpec.scala",
        "position": 40,
        "original_position": 40,
        "commit_id": "9504170abdb43deb8af7f04405fce56835ca803d",
        "original_commit_id": "d19d6cd49b4d4330424de1a35773d033923c9d3b",
        "user": {
            "login": "wjur",
            "id": 924886,
            "node_id": "MDQ6VXNlcjkyNDg4Ng==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/924886?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/wjur",
            "html_url": "https://github.com/wjur",
            "followers_url": "https://api.github.com/users/wjur/followers",
            "following_url": "https://api.github.com/users/wjur/following{/other_user}",
            "gists_url": "https://api.github.com/users/wjur/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/wjur/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/wjur/subscriptions",
            "organizations_url": "https://api.github.com/users/wjur/orgs",
            "repos_url": "https://api.github.com/users/wjur/repos",
            "events_url": "https://api.github.com/users/wjur/events{/privacy}",
            "received_events_url": "https://api.github.com/users/wjur/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "In Akka, this test expects \"example.com:21\" to be normalized to example.com://21 (and the corresponding PR changes this line accordingly). I guess this case is analogous to the \"g:h\"-case so no slashes should appear here as well.\n",
        "created_at": "2015-03-16T22:15:42Z",
        "updated_at": "2015-03-17T17:09:04Z",
        "html_url": "https://github.com/spray/spray/pull/1020#discussion_r26533167",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/1020",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/26533167"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/1020#discussion_r26533167"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/1020"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/26561722",
        "pull_request_review_id": null,
        "id": 26561722,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2NTYxNzIy",
        "diff_hunk": "@@ -158,10 +158,9 @@ sealed abstract case class Uri(scheme: String, authority: Authority, path: Path,\n    */\n   def renderWithoutFragment[R <: Rendering](r: R, charset: Charset): r.type = {\n     if (isAbsolute) r ~~ scheme ~~ ':'\n-    authority.render(r, scheme, charset)\n+    authority.render(r, scheme, path.isEmpty || path.startsWithSlash, charset)",
        "path": "spray-http/src/main/scala/spray/http/Uri.scala",
        "position": null,
        "original_position": 5,
        "commit_id": "9504170abdb43deb8af7f04405fce56835ca803d",
        "original_commit_id": "d19d6cd49b4d4330424de1a35773d033923c9d3b",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Could we maybe simply pass the `path` to the render method and have the `path.isEmpty || path.startsWithSlash` condition be evaluated there?\nThis would have the benefit of keeping all the logic required for rendering inside of the `render` method, rather than moving some of it outside into argument construction.\n",
        "created_at": "2015-03-17T10:25:13Z",
        "updated_at": "2015-03-17T17:09:04Z",
        "html_url": "https://github.com/spray/spray/pull/1020#discussion_r26561722",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/1020",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/26561722"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/1020#discussion_r26561722"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/1020"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/26593417",
        "pull_request_review_id": null,
        "id": 26593417,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2NTkzNDE3",
        "diff_hunk": "@@ -330,18 +329,19 @@ object Uri {\n   def httpScheme(securedConnection: Boolean = false) = if (securedConnection) \"https\" else \"http\"\n \n   case class Authority(host: Host, port: Int = 0, userinfo: String = \"\") extends ToStringRenderable {\n-    def isEmpty = host.isEmpty\n-    def render[R <: Rendering](r: R): r.type = render(r, \"\", UTF8)\n-    def render[R <: Rendering](r: R, scheme: String, charset: Charset): r.type =\n-      if (isEmpty) r else {\n+    def isEmpty = equals(Authority.Empty)\n+    def nonEmpty = !isEmpty\n+    def render[R <: Rendering](r: R): r.type = render(r, \"\", Path.Empty, UTF8)\n+    def render[R <: Rendering](r: R, scheme: String, charset: Charset): r.type = render(r, scheme, Path.Empty, charset)",
        "path": "spray-http/src/main/scala/spray/http/Uri.scala",
        "position": 24,
        "original_position": 24,
        "commit_id": "9504170abdb43deb8af7f04405fce56835ca803d",
        "original_commit_id": "9504170abdb43deb8af7f04405fce56835ca803d",
        "user": {
            "login": "wjur",
            "id": 924886,
            "node_id": "MDQ6VXNlcjkyNDg4Ng==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/924886?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/wjur",
            "html_url": "https://github.com/wjur",
            "followers_url": "https://api.github.com/users/wjur/followers",
            "following_url": "https://api.github.com/users/wjur/following{/other_user}",
            "gists_url": "https://api.github.com/users/wjur/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/wjur/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/wjur/subscriptions",
            "organizations_url": "https://api.github.com/users/wjur/orgs",
            "repos_url": "https://api.github.com/users/wjur/repos",
            "events_url": "https://api.github.com/users/wjur/events{/privacy}",
            "received_events_url": "https://api.github.com/users/wjur/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Previously I deleted this render method (the one with 3 arguments: R, String and Charset) but now I have reverted it (for compatibility). Maybe someone is using it outside spray.\n",
        "created_at": "2015-03-17T17:13:09Z",
        "updated_at": "2015-03-17T17:13:09Z",
        "html_url": "https://github.com/spray/spray/pull/1020#discussion_r26593417",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/1020",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/26593417"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/1020#discussion_r26593417"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/1020"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/26649558",
        "pull_request_review_id": null,
        "id": 26649558,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2NjQ5NTU4",
        "diff_hunk": "@@ -330,18 +329,19 @@ object Uri {\n   def httpScheme(securedConnection: Boolean = false) = if (securedConnection) \"https\" else \"http\"\n \n   case class Authority(host: Host, port: Int = 0, userinfo: String = \"\") extends ToStringRenderable {\n-    def isEmpty = host.isEmpty\n-    def render[R <: Rendering](r: R): r.type = render(r, \"\", UTF8)\n-    def render[R <: Rendering](r: R, scheme: String, charset: Charset): r.type =\n-      if (isEmpty) r else {\n+    def isEmpty = equals(Authority.Empty)\n+    def nonEmpty = !isEmpty\n+    def render[R <: Rendering](r: R): r.type = render(r, \"\", Path.Empty, UTF8)\n+    def render[R <: Rendering](r: R, scheme: String, charset: Charset): r.type = render(r, scheme, Path.Empty, charset)",
        "path": "spray-http/src/main/scala/spray/http/Uri.scala",
        "position": 24,
        "original_position": 24,
        "commit_id": "9504170abdb43deb8af7f04405fce56835ca803d",
        "original_commit_id": "9504170abdb43deb8af7f04405fce56835ca803d",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yes, thanks. There is no reason to change anything about existing API.\n",
        "created_at": "2015-03-18T09:50:57Z",
        "updated_at": "2015-03-18T09:50:57Z",
        "html_url": "https://github.com/spray/spray/pull/1020#discussion_r26649558",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/1020",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/26649558"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/1020#discussion_r26649558"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/1020"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/32299132",
        "pull_request_review_id": null,
        "id": 32299132,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjk5MTMy",
        "diff_hunk": "@@ -45,7 +50,6 @@ object CacheDirectives {\n   case object `no-cache` extends SingletonValueRenderable with RequestDirective with ResponseDirective\n   case object `no-store` extends SingletonValueRenderable with RequestDirective with ResponseDirective\n   case object `no-transform` extends SingletonValueRenderable with RequestDirective with ResponseDirective\n-\n   case class `max-age`(deltaSeconds: Long) extends RequestDirective with ResponseDirective with ValueRenderable {",
        "path": "spray-http/src/main/scala/spray/http/CacheDirective.scala",
        "position": null,
        "original_position": 17,
        "commit_id": "028cb53f5dddb557764861ece08c993713f7825b",
        "original_commit_id": "6e6122a2171f3610f13313c888bc7c88244fc976",
        "user": {
            "login": "jrudolph",
            "id": 9868,
            "node_id": "MDQ6VXNlcjk4Njg=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrudolph",
            "html_url": "https://github.com/jrudolph",
            "followers_url": "https://api.github.com/users/jrudolph/followers",
            "following_url": "https://api.github.com/users/jrudolph/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrudolph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrudolph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrudolph/subscriptions",
            "organizations_url": "https://api.github.com/users/jrudolph/orgs",
            "repos_url": "https://api.github.com/users/jrudolph/repos",
            "events_url": "https://api.github.com/users/jrudolph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrudolph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This one would also be eligible for using `ResponseDirectiveWithDeltaSeconds` as \n\n``` scala\ncase class `max-age`(deltaSeconds: Long) extends ResponseDirectiveWithDeltaSeconds with RequestDirective\n```\n",
        "created_at": "2015-06-12T08:46:26Z",
        "updated_at": "2015-06-12T14:08:00Z",
        "html_url": "https://github.com/spray/spray/pull/1053#discussion_r32299132",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/1053",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/32299132"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/1053#discussion_r32299132"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/1053"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/66724953",
        "pull_request_review_id": null,
        "id": 66724953,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NzI0OTUz",
        "diff_hunk": "@@ -16,25 +16,26 @@\n \n package spray.can.server\n \n+import java.io.{ BufferedReader, BufferedWriter, InputStreamReader, OutputStreamWriter }\n import java.net.Socket\n-import java.io.{ InputStreamReader, BufferedReader, OutputStreamWriter, BufferedWriter }\n-import com.typesafe.config.{ ConfigFactory, Config }\n-import scala.annotation.tailrec\n-import scala.concurrent.duration._\n-import org.specs2.mutable.Specification\n-import org.specs2.time.NoTimeConversions\n-import akka.actor.{ Terminated, ActorRef, ActorSystem }\n+\n+import akka.actor.{ ActorRef, ActorSystem, Terminated }\n import akka.io.IO\n import akka.testkit.TestProbe\n+import com.typesafe.config.{ Config, ConfigFactory }\n+import org.specs2.mutable.Specification\n+import org.specs2.time.NoTimeConversions\n import spray.can.Http\n-import spray.util._\n-import spray.util.Utils.temporaryServerHostnameAndPort\n-import spray.httpx.RequestBuilding._\n-import spray.http._\n-import HttpProtocols._\n import spray.can.Http.RegisterChunkHandler\n import spray.can.client.ClientConnectionSettings\n-import spray.io.CommandWrapper\n+import spray.http.HttpProtocols._\n+import spray.http._\n+import spray.httpx.RequestBuilding._\n+import spray.util.Utils.temporaryServerHostnameAndPort\n+import spray.util._\n+\n+import scala.annotation.tailrec\n+import scala.concurrent.duration._",
        "path": "spray-can-tests/src/test/scala/spray/can/server/SprayCanServerSpec.scala",
        "position": 36,
        "original_position": 36,
        "commit_id": "271cc9711b8324af43a861e01340223da884b1ac",
        "original_commit_id": "271cc9711b8324af43a861e01340223da884b1ac",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Are all these changes to the `import` block really necessary?\n",
        "created_at": "2016-06-12T18:10:49Z",
        "updated_at": "2016-06-12T18:10:49Z",
        "html_url": "https://github.com/spray/spray/pull/1115#discussion_r66724953",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/1115",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/66724953"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/1115#discussion_r66724953"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/1115"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/66724962",
        "pull_request_review_id": null,
        "id": 66724962,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NzI0OTYy",
        "diff_hunk": "@@ -54,8 +55,9 @@ class SprayCanServerSpec extends Specification with NoTimeConversions {\n     \"properly bind and unbind an HttpListener\" in new TestSetup {\n       val commander = TestProbe()\n       commander.send(listener, Http.Unbind)\n-      commander expectMsg Http.Unbound\n+      commander.expectMsg[Http.Unbound](Http.Unbound)",
        "path": "spray-can-tests/src/test/scala/spray/can/server/SprayCanServerSpec.scala",
        "position": 45,
        "original_position": 45,
        "commit_id": "271cc9711b8324af43a861e01340223da884b1ac",
        "original_commit_id": "271cc9711b8324af43a861e01340223da884b1ac",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Does the old line compile with the new addition?\n",
        "created_at": "2016-06-12T18:11:56Z",
        "updated_at": "2016-06-12T18:11:56Z",
        "html_url": "https://github.com/spray/spray/pull/1115#discussion_r66724962",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/1115",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/66724962"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/1115#discussion_r66724962"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/1115"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/66724968",
        "pull_request_review_id": null,
        "id": 66724968,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NzI0OTY4",
        "diff_hunk": "@@ -112,7 +112,7 @@ object Http extends ExtensionKey[HttpExt] {\n \n   type Connected = Tcp.Connected; val Connected = Tcp.Connected\n   type Bound = Tcp.Bound; val Bound = Tcp.Bound\n-  val Unbound = Tcp.Unbound\n+  type Unbound = Tcp.Unbound; val Unbound = Tcp.Unbound",
        "path": "spray-can/src/main/scala/spray/can/Http.scala",
        "position": 5,
        "original_position": 5,
        "commit_id": "271cc9711b8324af43a861e01340223da884b1ac",
        "original_commit_id": "271cc9711b8324af43a861e01340223da884b1ac",
        "user": {
            "login": "sirthias",
            "id": 135347,
            "node_id": "MDQ6VXNlcjEzNTM0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/135347?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sirthias",
            "html_url": "https://github.com/sirthias",
            "followers_url": "https://api.github.com/users/sirthias/followers",
            "following_url": "https://api.github.com/users/sirthias/following{/other_user}",
            "gists_url": "https://api.github.com/users/sirthias/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sirthias/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sirthias/subscriptions",
            "organizations_url": "https://api.github.com/users/sirthias/orgs",
            "repos_url": "https://api.github.com/users/sirthias/repos",
            "events_url": "https://api.github.com/users/sirthias/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sirthias/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yes, that's probably a good idea! Thanks!\n",
        "created_at": "2016-06-12T18:12:10Z",
        "updated_at": "2016-06-12T18:12:10Z",
        "html_url": "https://github.com/spray/spray/pull/1115#discussion_r66724968",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/1115",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/66724968"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/1115#discussion_r66724968"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/1115"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/66725315",
        "pull_request_review_id": null,
        "id": 66725315,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NzI1MzE1",
        "diff_hunk": "@@ -54,8 +55,9 @@ class SprayCanServerSpec extends Specification with NoTimeConversions {\n     \"properly bind and unbind an HttpListener\" in new TestSetup {\n       val commander = TestProbe()\n       commander.send(listener, Http.Unbind)\n-      commander expectMsg Http.Unbound\n+      commander.expectMsg[Http.Unbound](Http.Unbound)",
        "path": "spray-can-tests/src/test/scala/spray/can/server/SprayCanServerSpec.scala",
        "position": 45,
        "original_position": 45,
        "commit_id": "271cc9711b8324af43a861e01340223da884b1ac",
        "original_commit_id": "271cc9711b8324af43a861e01340223da884b1ac",
        "user": {
            "login": "ehsanyou",
            "id": 5087644,
            "node_id": "MDQ6VXNlcjUwODc2NDQ=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5087644?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ehsanyou",
            "html_url": "https://github.com/ehsanyou",
            "followers_url": "https://api.github.com/users/ehsanyou/followers",
            "following_url": "https://api.github.com/users/ehsanyou/following{/other_user}",
            "gists_url": "https://api.github.com/users/ehsanyou/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ehsanyou/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ehsanyou/subscriptions",
            "organizations_url": "https://api.github.com/users/ehsanyou/orgs",
            "repos_url": "https://api.github.com/users/ehsanyou/repos",
            "events_url": "https://api.github.com/users/ehsanyou/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ehsanyou/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yes, I've tested it twice.\n",
        "created_at": "2016-06-12T18:38:59Z",
        "updated_at": "2016-06-12T18:38:59Z",
        "html_url": "https://github.com/spray/spray/pull/1115#discussion_r66725315",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/1115",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/66725315"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/1115#discussion_r66725315"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/1115"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spray/spray/pulls/comments/66725370",
        "pull_request_review_id": null,
        "id": 66725370,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NzI1Mzcw",
        "diff_hunk": "@@ -16,25 +16,26 @@\n \n package spray.can.server\n \n+import java.io.{ BufferedReader, BufferedWriter, InputStreamReader, OutputStreamWriter }\n import java.net.Socket\n-import java.io.{ InputStreamReader, BufferedReader, OutputStreamWriter, BufferedWriter }\n-import com.typesafe.config.{ ConfigFactory, Config }\n-import scala.annotation.tailrec\n-import scala.concurrent.duration._\n-import org.specs2.mutable.Specification\n-import org.specs2.time.NoTimeConversions\n-import akka.actor.{ Terminated, ActorRef, ActorSystem }\n+\n+import akka.actor.{ ActorRef, ActorSystem, Terminated }\n import akka.io.IO\n import akka.testkit.TestProbe\n+import com.typesafe.config.{ Config, ConfigFactory }\n+import org.specs2.mutable.Specification\n+import org.specs2.time.NoTimeConversions\n import spray.can.Http\n-import spray.util._\n-import spray.util.Utils.temporaryServerHostnameAndPort\n-import spray.httpx.RequestBuilding._\n-import spray.http._\n-import HttpProtocols._\n import spray.can.Http.RegisterChunkHandler\n import spray.can.client.ClientConnectionSettings\n-import spray.io.CommandWrapper\n+import spray.http.HttpProtocols._\n+import spray.http._\n+import spray.httpx.RequestBuilding._\n+import spray.util.Utils.temporaryServerHostnameAndPort\n+import spray.util._\n+\n+import scala.annotation.tailrec\n+import scala.concurrent.duration._",
        "path": "spray-can-tests/src/test/scala/spray/can/server/SprayCanServerSpec.scala",
        "position": 36,
        "original_position": 36,
        "commit_id": "271cc9711b8324af43a861e01340223da884b1ac",
        "original_commit_id": "271cc9711b8324af43a861e01340223da884b1ac",
        "user": {
            "login": "ehsanyou",
            "id": 5087644,
            "node_id": "MDQ6VXNlcjUwODc2NDQ=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5087644?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ehsanyou",
            "html_url": "https://github.com/ehsanyou",
            "followers_url": "https://api.github.com/users/ehsanyou/followers",
            "following_url": "https://api.github.com/users/ehsanyou/following{/other_user}",
            "gists_url": "https://api.github.com/users/ehsanyou/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ehsanyou/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ehsanyou/subscriptions",
            "organizations_url": "https://api.github.com/users/ehsanyou/orgs",
            "repos_url": "https://api.github.com/users/ehsanyou/repos",
            "events_url": "https://api.github.com/users/ehsanyou/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ehsanyou/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "No they aren't, it's because of using auto import feature of IntelliJ IDEA.\n",
        "created_at": "2016-06-12T18:43:11Z",
        "updated_at": "2016-06-12T18:43:11Z",
        "html_url": "https://github.com/spray/spray/pull/1115#discussion_r66725370",
        "pull_request_url": "https://api.github.com/repos/spray/spray/pulls/1115",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spray/spray/pulls/comments/66725370"
            },
            "html": {
                "href": "https://github.com/spray/spray/pull/1115#discussion_r66725370"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spray/spray/pulls/1115"
            }
        }
    }
]