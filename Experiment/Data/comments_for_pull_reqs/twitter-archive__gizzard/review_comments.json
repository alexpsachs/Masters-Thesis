[
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/3643",
        "pull_request_review_id": null,
        "id": 3643,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM=",
        "diff_hunk": "@@ -85,20 +85,20 @@ trait Scheduler {\n   var badJobQueue: Option[BadJobConsumer] = None\n   def badJobQueue_=(c: BadJobConsumer) { badJobQueue = Some(c) }\n \n-  def apply(codec: Codec[JsonJob]): gizzard.scheduler.JobScheduler[JsonJob] = {\n+  def apply(codec: Codec): gizzard.scheduler.JobScheduler = {",
        "path": "src/main/scala/com/twitter/gizzard/config/JobScheduler.scala",
        "position": null,
        "original_position": 21,
        "commit_id": "3ab26ebac3535d473d5a1951f59ab0e6348202f6",
        "original_commit_id": "914546b64fc68facc3b052dd795180c87ba41076",
        "user": {
            "login": "freels",
            "id": 1407,
            "node_id": "MDQ6VXNlcjE0MDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1407?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/freels",
            "html_url": "https://github.com/freels",
            "followers_url": "https://api.github.com/users/freels/followers",
            "following_url": "https://api.github.com/users/freels/following{/other_user}",
            "gists_url": "https://api.github.com/users/freels/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/freels/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/freels/subscriptions",
            "organizations_url": "https://api.github.com/users/freels/orgs",
            "repos_url": "https://api.github.com/users/freels/repos",
            "events_url": "https://api.github.com/users/freels/events{/privacy}",
            "received_events_url": "https://api.github.com/users/freels/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Codec should be JsonCodec, I think\n",
        "created_at": "2011-02-23T19:35:13Z",
        "updated_at": "2011-02-23T20:15:49Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/52#discussion_r3643",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/52",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/3643"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/52#discussion_r3643"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/52"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/3644",
        "pull_request_review_id": null,
        "id": 3644,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ=",
        "diff_hunk": "@@ -86,14 +86,8 @@ abstract case class CopyJob[S <: Shard](sourceId: ShardId,\n         // do this on each iteration, so it happens in the queue and can be retried if the db is busy:\n         nameServer.markShardBusy(destinationId, shards.Busy.Busy)\n \n-        val nextJob = copyPage(sourceShard, destinationShard, count)\n-        nextJob match {\n-          case Some(job) =>\n-            incrGauge\n-            scheduler.put(job)\n-          case None =>\n-            finish()\n-        }\n+        this.nextJob = copyPage(sourceShard, destinationShard, count)\n+        if (this.nextJob != None) incrGauge else finish()",
        "path": "src/main/scala/com/twitter/gizzard/scheduler/CopyJob.scala",
        "position": null,
        "original_position": 22,
        "commit_id": "3ab26ebac3535d473d5a1951f59ab0e6348202f6",
        "original_commit_id": "914546b64fc68facc3b052dd795180c87ba41076",
        "user": {
            "login": "freels",
            "id": 1407,
            "node_id": "MDQ6VXNlcjE0MDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1407?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/freels",
            "html_url": "https://github.com/freels",
            "followers_url": "https://api.github.com/users/freels/followers",
            "following_url": "https://api.github.com/users/freels/following{/other_user}",
            "gists_url": "https://api.github.com/users/freels/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/freels/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/freels/subscriptions",
            "organizations_url": "https://api.github.com/users/freels/orgs",
            "repos_url": "https://api.github.com/users/freels/repos",
            "events_url": "https://api.github.com/users/freels/events{/privacy}",
            "received_events_url": "https://api.github.com/users/freels/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "use a match here.\n",
        "created_at": "2011-02-23T19:36:24Z",
        "updated_at": "2011-02-23T20:15:49Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/52#discussion_r3644",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/52",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/3644"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/52#discussion_r3644"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/52"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/3645",
        "pull_request_review_id": null,
        "id": 3645,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU=",
        "diff_hunk": "@@ -85,20 +85,20 @@ trait Scheduler {\n   var badJobQueue: Option[BadJobConsumer] = None\n   def badJobQueue_=(c: BadJobConsumer) { badJobQueue = Some(c) }\n \n-  def apply(codec: Codec[JsonJob]): gizzard.scheduler.JobScheduler[JsonJob] = {\n+  def apply(codec: Codec): gizzard.scheduler.JobScheduler = {",
        "path": "src/main/scala/com/twitter/gizzard/config/JobScheduler.scala",
        "position": null,
        "original_position": 21,
        "commit_id": "3ab26ebac3535d473d5a1951f59ab0e6348202f6",
        "original_commit_id": "914546b64fc68facc3b052dd795180c87ba41076",
        "user": {
            "login": "freels",
            "id": 1407,
            "node_id": "MDQ6VXNlcjE0MDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1407?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/freels",
            "html_url": "https://github.com/freels",
            "followers_url": "https://api.github.com/users/freels/followers",
            "following_url": "https://api.github.com/users/freels/following{/other_user}",
            "gists_url": "https://api.github.com/users/freels/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/freels/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/freels/subscriptions",
            "organizations_url": "https://api.github.com/users/freels/orgs",
            "repos_url": "https://api.github.com/users/freels/repos",
            "events_url": "https://api.github.com/users/freels/events{/privacy}",
            "received_events_url": "https://api.github.com/users/freels/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "On second thought, can we just rename JsonJob to Job, and JsonCodec to Codec?\n",
        "created_at": "2011-02-23T19:39:14Z",
        "updated_at": "2011-02-23T20:15:49Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/52#discussion_r3645",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/52",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/3645"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/52#discussion_r3645"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/52"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/3722",
        "pull_request_review_id": null,
        "id": 3722,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI=",
        "diff_hunk": "@@ -41,9 +41,7 @@ abstract class GizzardServer[S <: Shard, J <: JsonJob](config: ServerConfig) {\n   }\n \n   lazy val jobCodec     = new ReplicatingJsonCodec(nameServer.jobRelay, logUnparsableJob)\n-  lazy val jobScheduler = new PrioritizingJobScheduler(Map(jobPriorities.map { p =>\n-    p -> config.jobQueues(p)(jobCodec)\n-  }:_*))\n+  lazy val jobScheduler = new PrioritizingJobScheduler(jobPriorities.map(p => p -> config.jobQueues(p)(jobCodec)).toMap)",
        "path": "src/main/scala/com/twitter/gizzard/GizzardServer.scala",
        "position": null,
        "original_position": 7,
        "commit_id": "85621c88f6ffcf4741372e4257021243ebf76d1b",
        "original_commit_id": "fd4659f9c57c335dbce31131d84150cc007d8144",
        "user": {
            "login": "robey",
            "id": 172,
            "node_id": "MDQ6VXNlcjE3Mg==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/172?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/robey",
            "html_url": "https://github.com/robey",
            "followers_url": "https://api.github.com/users/robey/followers",
            "following_url": "https://api.github.com/users/robey/following{/other_user}",
            "gists_url": "https://api.github.com/users/robey/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/robey/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/robey/subscriptions",
            "organizations_url": "https://api.github.com/users/robey/orgs",
            "repos_url": "https://api.github.com/users/robey/repos",
            "events_url": "https://api.github.com/users/robey/events{/privacy}",
            "received_events_url": "https://api.github.com/users/robey/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "are you sure this fits in 100 chars? ;)\n",
        "created_at": "2011-02-24T00:18:30Z",
        "updated_at": "2011-02-24T00:24:58Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/53#discussion_r3722",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/53",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/3722"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/53#discussion_r3722"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/53"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/3723",
        "pull_request_review_id": null,
        "id": 3723,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM=",
        "diff_hunk": "@@ -41,9 +41,7 @@ abstract class GizzardServer[S <: Shard, J <: JsonJob](config: ServerConfig) {\n   }\n \n   lazy val jobCodec     = new ReplicatingJsonCodec(nameServer.jobRelay, logUnparsableJob)\n-  lazy val jobScheduler = new PrioritizingJobScheduler(Map(jobPriorities.map { p =>\n-    p -> config.jobQueues(p)(jobCodec)\n-  }:_*))\n+  lazy val jobScheduler = new PrioritizingJobScheduler(jobPriorities.map(p => p -> config.jobQueues(p)(jobCodec)).toMap)",
        "path": "src/main/scala/com/twitter/gizzard/GizzardServer.scala",
        "position": null,
        "original_position": 7,
        "commit_id": "85621c88f6ffcf4741372e4257021243ebf76d1b",
        "original_commit_id": "fd4659f9c57c335dbce31131d84150cc007d8144",
        "user": {
            "login": "freels",
            "id": 1407,
            "node_id": "MDQ6VXNlcjE0MDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1407?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/freels",
            "html_url": "https://github.com/freels",
            "followers_url": "https://api.github.com/users/freels/followers",
            "following_url": "https://api.github.com/users/freels/following{/other_user}",
            "gists_url": "https://api.github.com/users/freels/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/freels/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/freels/subscriptions",
            "organizations_url": "https://api.github.com/users/freels/orgs",
            "repos_url": "https://api.github.com/users/freels/repos",
            "events_url": "https://api.github.com/users/freels/events{/privacy}",
            "received_events_url": "https://api.github.com/users/freels/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "curses! 120.\n",
        "created_at": "2011-02-24T00:21:39Z",
        "updated_at": "2011-02-24T00:24:58Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/53#discussion_r3723",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/53",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/3723"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/53#discussion_r3723"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/53"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/25424",
        "pull_request_review_id": null,
        "id": 25424,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NDI0",
        "diff_hunk": "@@ -6,10 +6,11 @@ import com.twitter.util.TimeConversions._\n import net.lag.logging.Logger\n import nameserver.{NameServer, NonExistentShard}\n import collection.mutable.ListBuffer\n-import shards.{Shard, ShardId, ShardDatabaseTimeoutException, ShardTimeoutException}\n+import shards.{Shard, ShardId, ShardDatabaseTimeoutException, ShardTimeoutException, Cursorable}\n \n trait Repairable[T] {",
        "path": "src/main/scala/com/twitter/gizzard/scheduler/RepairJob.scala",
        "position": null,
        "original_position": 7,
        "commit_id": "5dddf087e45781f4be5c0680a62d68a5a6a7bc97",
        "original_commit_id": "a8563d377a9895ca0a1c7f108cdf7f6e2b866954",
        "user": {
            "login": "freels",
            "id": 1407,
            "node_id": "MDQ6VXNlcjE0MDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1407?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/freels",
            "html_url": "https://github.com/freels",
            "followers_url": "https://api.github.com/users/freels/followers",
            "following_url": "https://api.github.com/users/freels/following{/other_user}",
            "gists_url": "https://api.github.com/users/freels/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/freels/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/freels/subscriptions",
            "organizations_url": "https://api.github.com/users/freels/orgs",
            "repos_url": "https://api.github.com/users/freels/repos",
            "events_url": "https://api.github.com/users/freels/events{/privacy}",
            "received_events_url": "https://api.github.com/users/freels/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Cursorable can just be replaced with Ordered, and minCursor and maxCursor can be part of Repairable.\n",
        "created_at": "2011-05-03T19:02:58Z",
        "updated_at": "2011-06-06T20:40:12Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/61#discussion_r25424",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/61",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/25424"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/61#discussion_r25424"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/61"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/38993",
        "pull_request_review_id": null,
        "id": 38993,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkz",
        "diff_hunk": "@@ -78,7 +79,7 @@ class JobScheduler(val name: String,\n       queue.start()\n       errorQueue.start()\n       running = true\n-      log.info(\"Starting JobScheduler: %s\", queue)\n+      log.debug(\"Starting JobScheduler: %s\", queue)",
        "path": "src/main/scala/com/twitter/gizzard/scheduler/JobScheduler.scala",
        "position": 39,
        "original_position": 31,
        "commit_id": "fec48b5195ba699970f11229bb990ee78f193b69",
        "original_commit_id": "228040a97d6e5adbdf907c8b4aebb70f13a0200e",
        "user": {
            "login": "freels",
            "id": 1407,
            "node_id": "MDQ6VXNlcjE0MDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1407?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/freels",
            "html_url": "https://github.com/freels",
            "followers_url": "https://api.github.com/users/freels/followers",
            "following_url": "https://api.github.com/users/freels/following{/other_user}",
            "gists_url": "https://api.github.com/users/freels/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/freels/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/freels/subscriptions",
            "organizations_url": "https://api.github.com/users/freels/orgs",
            "repos_url": "https://api.github.com/users/freels/repos",
            "events_url": "https://api.github.com/users/freels/events{/privacy}",
            "received_events_url": "https://api.github.com/users/freels/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "why the change in level?\n",
        "created_at": "2011-06-02T18:17:49Z",
        "updated_at": "2011-07-29T22:20:06Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/65#discussion_r38993",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/65",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/38993"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/65#discussion_r38993"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/65"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/38996",
        "pull_request_review_id": null,
        "id": 38996,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk2",
        "diff_hunk": "@@ -1,8 +1,8 @@\n-package com.twitter.gizzard.scheduler",
        "path": "src/main/scala/com/twitter/gizzard/scheduler/JsonCodec.scala",
        "position": 1,
        "original_position": 1,
        "commit_id": "fec48b5195ba699970f11229bb990ee78f193b69",
        "original_commit_id": "5c1fce0fa96b41a8d3cc69e9baae3a00f3e3ae0b",
        "user": {
            "login": "freels",
            "id": 1407,
            "node_id": "MDQ6VXNlcjE0MDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1407?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/freels",
            "html_url": "https://github.com/freels",
            "followers_url": "https://api.github.com/users/freels/followers",
            "following_url": "https://api.github.com/users/freels/following{/other_user}",
            "gists_url": "https://api.github.com/users/freels/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/freels/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/freels/subscriptions",
            "organizations_url": "https://api.github.com/users/freels/orgs",
            "repos_url": "https://api.github.com/users/freels/repos",
            "events_url": "https://api.github.com/users/freels/events{/privacy}",
            "received_events_url": "https://api.github.com/users/freels/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "we should leave be, and explicitly import what we need from the parent package. It'll help breaking up into sub-projects later.\n",
        "created_at": "2011-06-02T18:20:04Z",
        "updated_at": "2011-07-29T22:20:06Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/65#discussion_r38996",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/65",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/38996"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/65#discussion_r38996"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/65"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/38997",
        "pull_request_review_id": null,
        "id": 38997,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk3",
        "diff_hunk": "@@ -78,7 +79,7 @@ class JobScheduler(val name: String,\n       queue.start()\n       errorQueue.start()\n       running = true\n-      log.info(\"Starting JobScheduler: %s\", queue)\n+      log.debug(\"Starting JobScheduler: %s\", queue)",
        "path": "src/main/scala/com/twitter/gizzard/scheduler/JobScheduler.scala",
        "position": 39,
        "original_position": 31,
        "commit_id": "fec48b5195ba699970f11229bb990ee78f193b69",
        "original_commit_id": "228040a97d6e5adbdf907c8b4aebb70f13a0200e",
        "user": {
            "login": "eaceaser",
            "id": 157866,
            "node_id": "MDQ6VXNlcjE1Nzg2Ng==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/157866?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/eaceaser",
            "html_url": "https://github.com/eaceaser",
            "followers_url": "https://api.github.com/users/eaceaser/followers",
            "following_url": "https://api.github.com/users/eaceaser/following{/other_user}",
            "gists_url": "https://api.github.com/users/eaceaser/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/eaceaser/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/eaceaser/subscriptions",
            "organizations_url": "https://api.github.com/users/eaceaser/orgs",
            "repos_url": "https://api.github.com/users/eaceaser/repos",
            "events_url": "https://api.github.com/users/eaceaser/events{/privacy}",
            "received_events_url": "https://api.github.com/users/eaceaser/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'm trying to clean up the log to have information thats actually useful. Those Starting JobScheduler lines are once per thread, so they just spam up the log on startup, and don't actually provide any useful information that metrics and exception loglines don't provide about a service starting healthily.\n",
        "created_at": "2011-06-02T18:20:06Z",
        "updated_at": "2011-07-29T22:20:06Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/65#discussion_r38997",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/65",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/38997"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/65#discussion_r38997"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/65"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/38998",
        "pull_request_review_id": null,
        "id": 38998,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk4",
        "diff_hunk": "@@ -20,10 +20,11 @@ import scala.collection.JavaConversions._\n  *\n  * Jobs that can't be parsed by the json library are handed to 'unparsableJobHandler'.\n  */\n-class JsonCodec(unparsableJobHandler: Array[Byte] => Unit) {\n+ class JsonCodec(private[scheduler] val unparsableJobHandler: Array[Byte] => Unit) {",
        "path": "src/main/scala/com/twitter/gizzard/scheduler/JsonCodec.scala",
        "position": null,
        "original_position": 16,
        "commit_id": "fec48b5195ba699970f11229bb990ee78f193b69",
        "original_commit_id": "5c1fce0fa96b41a8d3cc69e9baae3a00f3e3ae0b",
        "user": {
            "login": "freels",
            "id": 1407,
            "node_id": "MDQ6VXNlcjE0MDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1407?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/freels",
            "html_url": "https://github.com/freels",
            "followers_url": "https://api.github.com/users/freels/followers",
            "following_url": "https://api.github.com/users/freels/following{/other_user}",
            "gists_url": "https://api.github.com/users/freels/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/freels/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/freels/subscriptions",
            "organizations_url": "https://api.github.com/users/freels/orgs",
            "repos_url": "https://api.github.com/users/freels/repos",
            "events_url": "https://api.github.com/users/freels/events{/privacy}",
            "received_events_url": "https://api.github.com/users/freels/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "??, also bs\n",
        "created_at": "2011-06-02T18:20:12Z",
        "updated_at": "2011-07-29T22:20:06Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/65#discussion_r38998",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/65",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/38998"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/65#discussion_r38998"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/65"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/38999",
        "pull_request_review_id": null,
        "id": 38999,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk5",
        "diff_hunk": "@@ -69,7 +68,7 @@ class TSelectorServer(name: String, processor: TProcessor, serverSocket: ServerS\n   val clientMap = new mutable.HashMap[SelectableChannel, Client]\n   val registerQueue = new ConcurrentLinkedQueue[SocketChannel]\n \n-  Stats.addGauge(\"thrift-\" + name + \"-connections\") { clientMap.synchronized { clientMap.size } }\n+  Stats.global.addGauge(\"thrift-\" + name + \"-connections\") { clientMap.synchronized { clientMap.size } }",
        "path": "src/main/scala/com/twitter/gizzard/thrift/TSelectorServer.scala",
        "position": null,
        "original_position": 24,
        "commit_id": "fec48b5195ba699970f11229bb990ee78f193b69",
        "original_commit_id": "5c1fce0fa96b41a8d3cc69e9baae3a00f3e3ae0b",
        "user": {
            "login": "freels",
            "id": 1407,
            "node_id": "MDQ6VXNlcjE0MDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1407?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/freels",
            "html_url": "https://github.com/freels",
            "followers_url": "https://api.github.com/users/freels/followers",
            "following_url": "https://api.github.com/users/freels/following{/other_user}",
            "gists_url": "https://api.github.com/users/freels/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/freels/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/freels/subscriptions",
            "organizations_url": "https://api.github.com/users/freels/orgs",
            "repos_url": "https://api.github.com/users/freels/repos",
            "events_url": "https://api.github.com/users/freels/events{/privacy}",
            "received_events_url": "https://api.github.com/users/freels/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "what's the diff between global and internal?\n",
        "created_at": "2011-06-02T18:21:09Z",
        "updated_at": "2011-07-29T22:20:06Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/65#discussion_r38999",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/65",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/38999"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/65#discussion_r38999"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/65"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/39000",
        "pull_request_review_id": null,
        "id": 39000,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAw",
        "diff_hunk": "@@ -20,10 +20,11 @@ import scala.collection.JavaConversions._\n  *\n  * Jobs that can't be parsed by the json library are handed to 'unparsableJobHandler'.\n  */\n-class JsonCodec(unparsableJobHandler: Array[Byte] => Unit) {\n+ class JsonCodec(private[scheduler] val unparsableJobHandler: Array[Byte] => Unit) {",
        "path": "src/main/scala/com/twitter/gizzard/scheduler/JsonCodec.scala",
        "position": null,
        "original_position": 16,
        "commit_id": "fec48b5195ba699970f11229bb990ee78f193b69",
        "original_commit_id": "5c1fce0fa96b41a8d3cc69e9baae3a00f3e3ae0b",
        "user": {
            "login": "eaceaser",
            "id": 157866,
            "node_id": "MDQ6VXNlcjE1Nzg2Ng==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/157866?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/eaceaser",
            "html_url": "https://github.com/eaceaser",
            "followers_url": "https://api.github.com/users/eaceaser/followers",
            "following_url": "https://api.github.com/users/eaceaser/following{/other_user}",
            "gists_url": "https://api.github.com/users/eaceaser/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/eaceaser/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/eaceaser/subscriptions",
            "organizations_url": "https://api.github.com/users/eaceaser/orgs",
            "repos_url": "https://api.github.com/users/eaceaser/repos",
            "events_url": "https://api.github.com/users/eaceaser/events{/privacy}",
            "received_events_url": "https://api.github.com/users/eaceaser/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "?? wrt what, the private[schheduler]? hmm im not sure why i did that\n",
        "created_at": "2011-06-02T18:21:38Z",
        "updated_at": "2011-07-29T22:20:06Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/65#discussion_r39000",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/65",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/39000"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/65#discussion_r39000"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/65"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/39005",
        "pull_request_review_id": null,
        "id": 39005,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA1",
        "diff_hunk": "@@ -20,10 +20,11 @@ import scala.collection.JavaConversions._\n  *\n  * Jobs that can't be parsed by the json library are handed to 'unparsableJobHandler'.\n  */\n-class JsonCodec(unparsableJobHandler: Array[Byte] => Unit) {\n+ class JsonCodec(private[scheduler] val unparsableJobHandler: Array[Byte] => Unit) {",
        "path": "src/main/scala/com/twitter/gizzard/scheduler/JsonCodec.scala",
        "position": null,
        "original_position": 16,
        "commit_id": "fec48b5195ba699970f11229bb990ee78f193b69",
        "original_commit_id": "5c1fce0fa96b41a8d3cc69e9baae3a00f3e3ae0b",
        "user": {
            "login": "eaceaser",
            "id": 157866,
            "node_id": "MDQ6VXNlcjE1Nzg2Ng==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/157866?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/eaceaser",
            "html_url": "https://github.com/eaceaser",
            "followers_url": "https://api.github.com/users/eaceaser/followers",
            "following_url": "https://api.github.com/users/eaceaser/following{/other_user}",
            "gists_url": "https://api.github.com/users/eaceaser/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/eaceaser/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/eaceaser/subscriptions",
            "organizations_url": "https://api.github.com/users/eaceaser/orgs",
            "repos_url": "https://api.github.com/users/eaceaser/repos",
            "events_url": "https://api.github.com/users/eaceaser/events{/privacy}",
            "received_events_url": "https://api.github.com/users/eaceaser/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "now i remember. its so LoggingJsonCodec can wire the wrapped unparsableJobHandler into its parent class. However LoggingJsonCodec delegates for everything, so I can just pass a dummy unparsableJobHandler in there.\n",
        "created_at": "2011-06-02T18:24:26Z",
        "updated_at": "2011-07-29T22:20:06Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/65#discussion_r39005",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/65",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/39005"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/65#discussion_r39005"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/65"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/39011",
        "pull_request_review_id": null,
        "id": 39011,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEx",
        "diff_hunk": "@@ -69,7 +68,7 @@ class TSelectorServer(name: String, processor: TProcessor, serverSocket: ServerS\n   val clientMap = new mutable.HashMap[SelectableChannel, Client]\n   val registerQueue = new ConcurrentLinkedQueue[SocketChannel]\n \n-  Stats.addGauge(\"thrift-\" + name + \"-connections\") { clientMap.synchronized { clientMap.size } }\n+  Stats.global.addGauge(\"thrift-\" + name + \"-connections\") { clientMap.synchronized { clientMap.size } }",
        "path": "src/main/scala/com/twitter/gizzard/thrift/TSelectorServer.scala",
        "position": null,
        "original_position": 24,
        "commit_id": "fec48b5195ba699970f11229bb990ee78f193b69",
        "original_commit_id": "5c1fce0fa96b41a8d3cc69e9baae3a00f3e3ae0b",
        "user": {
            "login": "eaceaser",
            "id": 157866,
            "node_id": "MDQ6VXNlcjE1Nzg2Ng==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/157866?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/eaceaser",
            "html_url": "https://github.com/eaceaser",
            "followers_url": "https://api.github.com/users/eaceaser/followers",
            "following_url": "https://api.github.com/users/eaceaser/following{/other_user}",
            "gists_url": "https://api.github.com/users/eaceaser/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/eaceaser/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/eaceaser/subscriptions",
            "organizations_url": "https://api.github.com/users/eaceaser/orgs",
            "repos_url": "https://api.github.com/users/eaceaser/repos",
            "events_url": "https://api.github.com/users/eaceaser/events{/privacy}",
            "received_events_url": "https://api.github.com/users/eaceaser/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Global is exported to ostrich. Internal will be exported through a per-appserver viz. For like, per shard statistics, fine grained exceptions, etc.\n",
        "created_at": "2011-06-02T18:30:10Z",
        "updated_at": "2011-07-29T22:20:06Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/65#discussion_r39011",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/65",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/39011"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/65#discussion_r39011"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/65"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/39012",
        "pull_request_review_id": null,
        "id": 39012,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEy",
        "diff_hunk": "@@ -69,7 +68,7 @@ class TSelectorServer(name: String, processor: TProcessor, serverSocket: ServerS\n   val clientMap = new mutable.HashMap[SelectableChannel, Client]\n   val registerQueue = new ConcurrentLinkedQueue[SocketChannel]\n \n-  Stats.addGauge(\"thrift-\" + name + \"-connections\") { clientMap.synchronized { clientMap.size } }\n+  Stats.global.addGauge(\"thrift-\" + name + \"-connections\") { clientMap.synchronized { clientMap.size } }",
        "path": "src/main/scala/com/twitter/gizzard/thrift/TSelectorServer.scala",
        "position": null,
        "original_position": 24,
        "commit_id": "fec48b5195ba699970f11229bb990ee78f193b69",
        "original_commit_id": "5c1fce0fa96b41a8d3cc69e9baae3a00f3e3ae0b",
        "user": {
            "login": "eaceaser",
            "id": 157866,
            "node_id": "MDQ6VXNlcjE1Nzg2Ng==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/157866?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/eaceaser",
            "html_url": "https://github.com/eaceaser",
            "followers_url": "https://api.github.com/users/eaceaser/followers",
            "following_url": "https://api.github.com/users/eaceaser/following{/other_user}",
            "gists_url": "https://api.github.com/users/eaceaser/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/eaceaser/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/eaceaser/subscriptions",
            "organizations_url": "https://api.github.com/users/eaceaser/orgs",
            "repos_url": "https://api.github.com/users/eaceaser/repos",
            "events_url": "https://api.github.com/users/eaceaser/events{/privacy}",
            "received_events_url": "https://api.github.com/users/eaceaser/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The idea is to only export things to ostrich that actually make sense in aggregate. We can hit individual servers for more detailed in formation if necessary.\n",
        "created_at": "2011-06-02T18:30:35Z",
        "updated_at": "2011-07-29T22:20:06Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/65#discussion_r39012",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/65",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/39012"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/65#discussion_r39012"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/65"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/39013",
        "pull_request_review_id": null,
        "id": 39013,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEz",
        "diff_hunk": "@@ -69,7 +68,7 @@ class TSelectorServer(name: String, processor: TProcessor, serverSocket: ServerS\n   val clientMap = new mutable.HashMap[SelectableChannel, Client]\n   val registerQueue = new ConcurrentLinkedQueue[SocketChannel]\n \n-  Stats.addGauge(\"thrift-\" + name + \"-connections\") { clientMap.synchronized { clientMap.size } }\n+  Stats.global.addGauge(\"thrift-\" + name + \"-connections\") { clientMap.synchronized { clientMap.size } }",
        "path": "src/main/scala/com/twitter/gizzard/thrift/TSelectorServer.scala",
        "position": null,
        "original_position": 24,
        "commit_id": "fec48b5195ba699970f11229bb990ee78f193b69",
        "original_commit_id": "5c1fce0fa96b41a8d3cc69e9baae3a00f3e3ae0b",
        "user": {
            "login": "eaceaser",
            "id": 157866,
            "node_id": "MDQ6VXNlcjE1Nzg2Ng==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/157866?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/eaceaser",
            "html_url": "https://github.com/eaceaser",
            "followers_url": "https://api.github.com/users/eaceaser/followers",
            "following_url": "https://api.github.com/users/eaceaser/following{/other_user}",
            "gists_url": "https://api.github.com/users/eaceaser/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/eaceaser/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/eaceaser/subscriptions",
            "organizations_url": "https://api.github.com/users/eaceaser/orgs",
            "repos_url": "https://api.github.com/users/eaceaser/repos",
            "events_url": "https://api.github.com/users/eaceaser/events{/privacy}",
            "received_events_url": "https://api.github.com/users/eaceaser/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This may not make sense in the future as viz and ostrich improve and can handle more and more stats. At that point we can merge the two stats collections.\n",
        "created_at": "2011-06-02T18:31:29Z",
        "updated_at": "2011-07-29T22:20:06Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/65#discussion_r39013",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/65",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/39013"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/65#discussion_r39013"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/65"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/39014",
        "pull_request_review_id": null,
        "id": 39014,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE0",
        "diff_hunk": "@@ -20,10 +20,11 @@ import scala.collection.JavaConversions._\n  *\n  * Jobs that can't be parsed by the json library are handed to 'unparsableJobHandler'.\n  */\n-class JsonCodec(unparsableJobHandler: Array[Byte] => Unit) {\n+ class JsonCodec(private[scheduler] val unparsableJobHandler: Array[Byte] => Unit) {",
        "path": "src/main/scala/com/twitter/gizzard/scheduler/JsonCodec.scala",
        "position": null,
        "original_position": 16,
        "commit_id": "fec48b5195ba699970f11229bb990ee78f193b69",
        "original_commit_id": "5c1fce0fa96b41a8d3cc69e9baae3a00f3e3ae0b",
        "user": {
            "login": "eaceaser",
            "id": 157866,
            "node_id": "MDQ6VXNlcjE1Nzg2Ng==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/157866?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/eaceaser",
            "html_url": "https://github.com/eaceaser",
            "followers_url": "https://api.github.com/users/eaceaser/followers",
            "following_url": "https://api.github.com/users/eaceaser/following{/other_user}",
            "gists_url": "https://api.github.com/users/eaceaser/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/eaceaser/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/eaceaser/subscriptions",
            "organizations_url": "https://api.github.com/users/eaceaser/orgs",
            "repos_url": "https://api.github.com/users/eaceaser/repos",
            "events_url": "https://api.github.com/users/eaceaser/events{/privacy}",
            "received_events_url": "https://api.github.com/users/eaceaser/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "fixed.\n",
        "created_at": "2011-06-02T18:35:16Z",
        "updated_at": "2011-07-29T22:20:06Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/65#discussion_r39014",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/65",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/39014"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/65#discussion_r39014"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/65"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/109076",
        "pull_request_review_id": null,
        "id": 109076,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTA3Ng==",
        "diff_hunk": "@@ -3,7 +3,7 @@ package com.twitter.gizzard.proxy\n import java.sql.SQLException\n import scala.reflect.Manifest\n import com.mysql.jdbc.exceptions.MySQLTransientException\n-import com.twitter.querulous.database.SqlDatabaseTimeoutException\n+import com.twitter.querulous.database.{PoolTimeoutException, PoolEmptyException, SqlDatabaseTimeoutException}",
        "path": "src/main/scala/com/twitter/gizzard/proxy/SqlExceptionWrappingProxy.scala",
        "position": 5,
        "original_position": 5,
        "commit_id": "e4dc689e82cccf64aec8a8cabc5c99b805344985",
        "original_commit_id": "ace5a61cd2a4875ccda05df4167afb667077cc4f",
        "user": {
            "login": "freels",
            "id": 1407,
            "node_id": "MDQ6VXNlcjE0MDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1407?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/freels",
            "html_url": "https://github.com/freels",
            "followers_url": "https://api.github.com/users/freels/followers",
            "following_url": "https://api.github.com/users/freels/following{/other_user}",
            "gists_url": "https://api.github.com/users/freels/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/freels/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/freels/subscriptions",
            "organizations_url": "https://api.github.com/users/freels/orgs",
            "repos_url": "https://api.github.com/users/freels/repos",
            "events_url": "https://api.github.com/users/freels/events{/privacy}",
            "received_events_url": "https://api.github.com/users/freels/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "didn't yongsheng add a common superclass for some of these?\n",
        "created_at": "2011-08-31T21:45:25Z",
        "updated_at": "2011-08-31T21:49:36Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/70#discussion_r109076",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/70",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/109076"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/70#discussion_r109076"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/70"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/109078",
        "pull_request_review_id": null,
        "id": 109078,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTA3OA==",
        "diff_hunk": "@@ -52,8 +52,8 @@ class LeafRoutingNode[T](private[shards] val factory: ShardFactory[T], val shard\n   val children = Nil\n \n   // only one of these will usually be called.",
        "path": "src/main/scala/com/twitter/gizzard/shards/LeafRoutingNode.scala",
        "position": null,
        "original_position": 3,
        "commit_id": "e4dc689e82cccf64aec8a8cabc5c99b805344985",
        "original_commit_id": "ace5a61cd2a4875ccda05df4167afb667077cc4f",
        "user": {
            "login": "freels",
            "id": 1407,
            "node_id": "MDQ6VXNlcjE0MDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1407?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/freels",
            "html_url": "https://github.com/freels",
            "followers_url": "https://api.github.com/users/freels/followers",
            "following_url": "https://api.github.com/users/freels/following{/other_user}",
            "gists_url": "https://api.github.com/users/freels/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/freels/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/freels/subscriptions",
            "organizations_url": "https://api.github.com/users/freels/orgs",
            "repos_url": "https://api.github.com/users/freels/repos",
            "events_url": "https://api.github.com/users/freels/events{/privacy}",
            "received_events_url": "https://api.github.com/users/freels/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "guess this comment does not apply.\n",
        "created_at": "2011-08-31T21:45:48Z",
        "updated_at": "2011-08-31T21:49:36Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/70#discussion_r109078",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/70",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/109078"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/70#discussion_r109078"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/70"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/109086",
        "pull_request_review_id": null,
        "id": 109086,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTA4Ng==",
        "diff_hunk": "@@ -3,7 +3,7 @@ package com.twitter.gizzard.proxy\n import java.sql.SQLException\n import scala.reflect.Manifest\n import com.mysql.jdbc.exceptions.MySQLTransientException\n-import com.twitter.querulous.database.SqlDatabaseTimeoutException\n+import com.twitter.querulous.database.{PoolTimeoutException, PoolEmptyException, SqlDatabaseTimeoutException}",
        "path": "src/main/scala/com/twitter/gizzard/proxy/SqlExceptionWrappingProxy.scala",
        "position": 5,
        "original_position": 5,
        "commit_id": "e4dc689e82cccf64aec8a8cabc5c99b805344985",
        "original_commit_id": "ace5a61cd2a4875ccda05df4167afb667077cc4f",
        "user": {
            "login": "eaceaser",
            "id": 157866,
            "node_id": "MDQ6VXNlcjE1Nzg2Ng==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/157866?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/eaceaser",
            "html_url": "https://github.com/eaceaser",
            "followers_url": "https://api.github.com/users/eaceaser/followers",
            "following_url": "https://api.github.com/users/eaceaser/following{/other_user}",
            "gists_url": "https://api.github.com/users/eaceaser/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/eaceaser/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/eaceaser/subscriptions",
            "organizations_url": "https://api.github.com/users/eaceaser/orgs",
            "repos_url": "https://api.github.com/users/eaceaser/repos",
            "events_url": "https://api.github.com/users/eaceaser/events{/privacy}",
            "received_events_url": "https://api.github.com/users/eaceaser/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "the superclass is SQLException, which we have that weird switching behavior on. I think this is fine for now, we need to get rid of this entire exception wrapping crap entirely.\n",
        "created_at": "2011-08-31T21:48:07Z",
        "updated_at": "2011-08-31T21:49:36Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/70#discussion_r109086",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/70",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/109086"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/70#discussion_r109086"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/70"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/109088",
        "pull_request_review_id": null,
        "id": 109088,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTA4OA==",
        "diff_hunk": "@@ -52,8 +52,8 @@ class LeafRoutingNode[T](private[shards] val factory: ShardFactory[T], val shard\n   val children = Nil\n \n   // only one of these will usually be called.",
        "path": "src/main/scala/com/twitter/gizzard/shards/LeafRoutingNode.scala",
        "position": null,
        "original_position": 3,
        "commit_id": "e4dc689e82cccf64aec8a8cabc5c99b805344985",
        "original_commit_id": "ace5a61cd2a4875ccda05df4167afb667077cc4f",
        "user": {
            "login": "eaceaser",
            "id": 157866,
            "node_id": "MDQ6VXNlcjE1Nzg2Ng==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/157866?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/eaceaser",
            "html_url": "https://github.com/eaceaser",
            "followers_url": "https://api.github.com/users/eaceaser/followers",
            "following_url": "https://api.github.com/users/eaceaser/following{/other_user}",
            "gists_url": "https://api.github.com/users/eaceaser/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/eaceaser/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/eaceaser/subscriptions",
            "organizations_url": "https://api.github.com/users/eaceaser/orgs",
            "repos_url": "https://api.github.com/users/eaceaser/repos",
            "events_url": "https://api.github.com/users/eaceaser/events{/privacy}",
            "received_events_url": "https://api.github.com/users/eaceaser/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "heh yeah\n",
        "created_at": "2011-08-31T21:48:16Z",
        "updated_at": "2011-08-31T21:49:36Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/70#discussion_r109088",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/70",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/109088"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/70#discussion_r109088"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/70"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/109091",
        "pull_request_review_id": null,
        "id": 109091,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTA5MQ==",
        "diff_hunk": "@@ -32,15 +32,26 @@ object NameServerSpec extends ConfiguredSpecification with JMocker with ClassMoc\n \n     val shard        = mock[AnyRef]\n     var shardFactory = mock[ShardFactory[AnyRef]]\n-    val nodes        = shardInfos map { new LeafRoutingNode(shardFactory, _, 1) }\n-    val replNode     = ReplicatingShard(replicatingInfo, 1, Seq(nodes(3)))\n+    var nodes: Seq[LeafRoutingNode[AnyRef]]        = null\n+    var replNode: ReplicatingShard[AnyRef]         = null\n \n     doBefore {\n       expect {\n         one(nameServerShard).reload()\n         one(nameServerShard).currentState()    willReturn Seq(nameServerState)\n+        2.of(shardFactory).instantiateReadOnly(shardInfos(0), 1) willReturn shard",
        "path": "src/test/scala/com/twitter/gizzard/nameserver/NameServerSpec.scala",
        "position": 13,
        "original_position": 13,
        "commit_id": "ace5a61cd2a4875ccda05df4167afb667077cc4f",
        "original_commit_id": "ace5a61cd2a4875ccda05df4167afb667077cc4f",
        "user": {
            "login": "freels",
            "id": 1407,
            "node_id": "MDQ6VXNlcjE0MDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1407?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/freels",
            "html_url": "https://github.com/freels",
            "followers_url": "https://api.github.com/users/freels/followers",
            "following_url": "https://api.github.com/users/freels/following{/other_user}",
            "gists_url": "https://api.github.com/users/freels/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/freels/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/freels/subscriptions",
            "organizations_url": "https://api.github.com/users/freels/orgs",
            "repos_url": "https://api.github.com/users/freels/repos",
            "events_url": "https://api.github.com/users/freels/events{/privacy}",
            "received_events_url": "https://api.github.com/users/freels/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "this test looks borked. why 2 calls I wonder? we should also remove some of the instantiate expectations in the tests themselves since this is not lazy\n",
        "created_at": "2011-08-31T21:49:41Z",
        "updated_at": "2011-08-31T21:49:41Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/70#discussion_r109091",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/70",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/109091"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/70#discussion_r109091"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/70"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/109101",
        "pull_request_review_id": null,
        "id": 109101,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTEwMQ==",
        "diff_hunk": "@@ -32,15 +32,26 @@ object NameServerSpec extends ConfiguredSpecification with JMocker with ClassMoc\n \n     val shard        = mock[AnyRef]\n     var shardFactory = mock[ShardFactory[AnyRef]]\n-    val nodes        = shardInfos map { new LeafRoutingNode(shardFactory, _, 1) }\n-    val replNode     = ReplicatingShard(replicatingInfo, 1, Seq(nodes(3)))\n+    var nodes: Seq[LeafRoutingNode[AnyRef]]        = null\n+    var replNode: ReplicatingShard[AnyRef]         = null\n \n     doBefore {\n       expect {\n         one(nameServerShard).reload()\n         one(nameServerShard).currentState()    willReturn Seq(nameServerState)\n+        2.of(shardFactory).instantiateReadOnly(shardInfos(0), 1) willReturn shard",
        "path": "src/test/scala/com/twitter/gizzard/nameserver/NameServerSpec.scala",
        "position": 13,
        "original_position": 13,
        "commit_id": "ace5a61cd2a4875ccda05df4167afb667077cc4f",
        "original_commit_id": "ace5a61cd2a4875ccda05df4167afb667077cc4f",
        "user": {
            "login": "eaceaser",
            "id": 157866,
            "node_id": "MDQ6VXNlcjE1Nzg2Ng==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/157866?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/eaceaser",
            "html_url": "https://github.com/eaceaser",
            "followers_url": "https://api.github.com/users/eaceaser/followers",
            "following_url": "https://api.github.com/users/eaceaser/following{/other_user}",
            "gists_url": "https://api.github.com/users/eaceaser/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/eaceaser/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/eaceaser/subscriptions",
            "organizations_url": "https://api.github.com/users/eaceaser/orgs",
            "repos_url": "https://api.github.com/users/eaceaser/repos",
            "events_url": "https://api.github.com/users/eaceaser/events{/privacy}",
            "received_events_url": "https://api.github.com/users/eaceaser/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "hmmmmmm.... i assumed due to having two replicas in teh test but now i look and realize that doesn't make sense. let me dig into this a bit further.\n",
        "created_at": "2011-08-31T21:51:55Z",
        "updated_at": "2011-08-31T21:51:55Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/70#discussion_r109101",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/70",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/109101"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/70#discussion_r109101"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/70"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/109140",
        "pull_request_review_id": null,
        "id": 109140,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTE0MA==",
        "diff_hunk": "@@ -32,15 +32,26 @@ object NameServerSpec extends ConfiguredSpecification with JMocker with ClassMoc\n \n     val shard        = mock[AnyRef]\n     var shardFactory = mock[ShardFactory[AnyRef]]\n-    val nodes        = shardInfos map { new LeafRoutingNode(shardFactory, _, 1) }\n-    val replNode     = ReplicatingShard(replicatingInfo, 1, Seq(nodes(3)))\n+    var nodes: Seq[LeafRoutingNode[AnyRef]]        = null\n+    var replNode: ReplicatingShard[AnyRef]         = null\n \n     doBefore {\n       expect {\n         one(nameServerShard).reload()\n         one(nameServerShard).currentState()    willReturn Seq(nameServerState)\n+        2.of(shardFactory).instantiateReadOnly(shardInfos(0), 1) willReturn shard",
        "path": "src/test/scala/com/twitter/gizzard/nameserver/NameServerSpec.scala",
        "position": 13,
        "original_position": 13,
        "commit_id": "ace5a61cd2a4875ccda05df4167afb667077cc4f",
        "original_commit_id": "ace5a61cd2a4875ccda05df4167afb667077cc4f",
        "user": {
            "login": "eaceaser",
            "id": 157866,
            "node_id": "MDQ6VXNlcjE1Nzg2Ng==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/157866?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/eaceaser",
            "html_url": "https://github.com/eaceaser",
            "followers_url": "https://api.github.com/users/eaceaser/followers",
            "following_url": "https://api.github.com/users/eaceaser/following{/other_user}",
            "gists_url": "https://api.github.com/users/eaceaser/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/eaceaser/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/eaceaser/subscriptions",
            "organizations_url": "https://api.github.com/users/eaceaser/orgs",
            "repos_url": "https://api.github.com/users/eaceaser/repos",
            "events_url": "https://api.github.com/users/eaceaser/events{/privacy}",
            "received_events_url": "https://api.github.com/users/eaceaser/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "OK this is fine.\n\nWe create the routing structure twice: one when populating the 'nodes' value, and once when reloading the nameserver. We use the nodes value as our gold standard to compare the nameserver's replication structure with. This requires two expectation calls though because both routing structures share the same mock.\n",
        "created_at": "2011-08-31T22:04:27Z",
        "updated_at": "2011-08-31T22:04:27Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/70#discussion_r109140",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/70",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/109140"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/70#discussion_r109140"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/70"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/481849",
        "pull_request_review_id": null,
        "id": 481849,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg0OQ==",
        "diff_hunk": "@@ -167,6 +167,7 @@ extends Process with JobConsumer {\n             job.errorMessage = e.toString\n             if (job.errorCount > errorLimit) {\n               badJobQueue.put(job)\n+              Stats.incr(\"bad-job-count\")",
        "path": "src/main/scala/com/twitter/gizzard/scheduler/JobScheduler.scala",
        "position": null,
        "original_position": 4,
        "commit_id": "ed807b165c91af1f8353ef2c307c921ede18fee3",
        "original_commit_id": "9dd8ea1d35ee163783c88cdca013393705f1e0c4",
        "user": {
            "login": "rvpgithub",
            "id": 585641,
            "node_id": "MDQ6VXNlcjU4NTY0MQ==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/585641?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rvpgithub",
            "html_url": "https://github.com/rvpgithub",
            "followers_url": "https://api.github.com/users/rvpgithub/followers",
            "following_url": "https://api.github.com/users/rvpgithub/following{/other_user}",
            "gists_url": "https://api.github.com/users/rvpgithub/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rvpgithub/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rvpgithub/subscriptions",
            "organizations_url": "https://api.github.com/users/rvpgithub/orgs",
            "repos_url": "https://api.github.com/users/rvpgithub/repos",
            "events_url": "https://api.github.com/users/rvpgithub/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rvpgithub/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Maybe call it job-bad-count for consistency. That way, all the job-\\* will be clustered together.\n",
        "created_at": "2012-02-23T19:21:14Z",
        "updated_at": "2012-02-23T19:26:18Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/85#discussion_r481849",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/85",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/481849"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/85#discussion_r481849"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/85"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/481375",
        "pull_request_review_id": null,
        "id": 481375,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM3NQ==",
        "diff_hunk": "@@ -16,10 +16,40 @@ abstract class NestedJob(val jobs: Iterable[JsonJob]) extends JsonJob {\n   }\n \n   def apply() {\n+    val failedTasks = mutable.Buffer[JsonJob]()\n+    var lastNormalException: Throwable = null\n+    var lastOfflineException: ShardOfflineException = null\n+    var lastBlackHoleException: ShardBlackHoleException = null\n+\n     while (!taskQueue.isEmpty) {\n-      taskQueue.head.apply()\n+      val task: JsonJob = taskQueue.head\n+      try {\n+        task.apply()\n+      } catch {\n+        case e: ShardBlackHoleException =>\n+          lastBlackHoleException = e\n+        case e: ShardOfflineException =>\n+          failedTasks += task\n+          lastOfflineException = e\n+        case e =>\n+          failedTasks += task\n+          lastNormalException = e\n+      }\n       taskQueue.dequeue()\n     }\n+\n+    if (!failedTasks.isEmpty) {\n+      taskQueue ++= failedTasks\n+    }\n+\n+    if (lastOfflineException != null) {",
        "path": "src/main/scala/com/twitter/gizzard/scheduler/NestedJob.scala",
        "position": null,
        "original_position": 48,
        "commit_id": "85e5b5f0c417abb8d2c87eb8e30a76528ba57274",
        "original_commit_id": "8af7cdd1a39e41a016b351c52f9f4c53844e5690",
        "user": {
            "login": "jcorwin",
            "id": 223253,
            "node_id": "MDQ6VXNlcjIyMzI1Mw==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/223253?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jcorwin",
            "html_url": "https://github.com/jcorwin",
            "followers_url": "https://api.github.com/users/jcorwin/followers",
            "following_url": "https://api.github.com/users/jcorwin/following{/other_user}",
            "gists_url": "https://api.github.com/users/jcorwin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jcorwin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jcorwin/subscriptions",
            "organizations_url": "https://api.github.com/users/jcorwin/orgs",
            "repos_url": "https://api.github.com/users/jcorwin/repos",
            "events_url": "https://api.github.com/users/jcorwin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jcorwin/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Since you don't treat the different exception types specially when re-throwing, you can probably simplify this and just keep a list of thrown exceptions, then re-throw the exception at the head of the list if present.\n",
        "created_at": "2012-02-23T18:08:04Z",
        "updated_at": "2012-02-23T19:33:51Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/84#discussion_r481375",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/84",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/481375"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/84#discussion_r481375"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/84"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/481429",
        "pull_request_review_id": null,
        "id": 481429,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQyOQ==",
        "diff_hunk": "@@ -16,10 +16,40 @@ abstract class NestedJob(val jobs: Iterable[JsonJob]) extends JsonJob {\n   }\n \n   def apply() {\n+    val failedTasks = mutable.Buffer[JsonJob]()\n+    var lastNormalException: Throwable = null\n+    var lastOfflineException: ShardOfflineException = null\n+    var lastBlackHoleException: ShardBlackHoleException = null\n+\n     while (!taskQueue.isEmpty) {\n-      taskQueue.head.apply()\n+      val task: JsonJob = taskQueue.head\n+      try {\n+        task.apply()\n+      } catch {\n+        case e: ShardBlackHoleException =>\n+          lastBlackHoleException = e\n+        case e: ShardOfflineException =>\n+          failedTasks += task\n+          lastOfflineException = e\n+        case e =>\n+          failedTasks += task\n+          lastNormalException = e\n+      }\n       taskQueue.dequeue()\n     }\n+\n+    if (!failedTasks.isEmpty) {\n+      taskQueue ++= failedTasks\n+    }\n+\n+    if (lastOfflineException != null) {",
        "path": "src/main/scala/com/twitter/gizzard/scheduler/NestedJob.scala",
        "position": null,
        "original_position": 48,
        "commit_id": "85e5b5f0c417abb8d2c87eb8e30a76528ba57274",
        "original_commit_id": "8af7cdd1a39e41a016b351c52f9f4c53844e5690",
        "user": {
            "login": "freels",
            "id": 1407,
            "node_id": "MDQ6VXNlcjE0MDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1407?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/freels",
            "html_url": "https://github.com/freels",
            "followers_url": "https://api.github.com/users/freels/followers",
            "following_url": "https://api.github.com/users/freels/following{/other_user}",
            "gists_url": "https://api.github.com/users/freels/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/freels/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/freels/subscriptions",
            "organizations_url": "https://api.github.com/users/freels/orgs",
            "repos_url": "https://api.github.com/users/freels/repos",
            "events_url": "https://api.github.com/users/freels/events{/privacy}",
            "received_events_url": "https://api.github.com/users/freels/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "There is a priority, actually: ShardOfflineExeption, Throwable, ShardBlackHoleException. The execution logic in the job processor handles ShardOfflineException and ShardBlackHoleException specially.\n",
        "created_at": "2012-02-23T18:15:28Z",
        "updated_at": "2012-02-23T19:33:51Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/84#discussion_r481429",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/84",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/481429"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/84#discussion_r481429"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/84"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/481531",
        "pull_request_review_id": null,
        "id": 481531,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUzMQ==",
        "diff_hunk": "@@ -16,10 +16,40 @@ abstract class NestedJob(val jobs: Iterable[JsonJob]) extends JsonJob {\n   }\n \n   def apply() {\n+    val failedTasks = mutable.Buffer[JsonJob]()\n+    var lastNormalException: Throwable = null\n+    var lastOfflineException: ShardOfflineException = null\n+    var lastBlackHoleException: ShardBlackHoleException = null\n+\n     while (!taskQueue.isEmpty) {\n-      taskQueue.head.apply()\n+      val task: JsonJob = taskQueue.head\n+      try {\n+        task.apply()\n+      } catch {\n+        case e: ShardBlackHoleException =>\n+          lastBlackHoleException = e\n+        case e: ShardOfflineException =>\n+          failedTasks += task\n+          lastOfflineException = e\n+        case e =>\n+          failedTasks += task\n+          lastNormalException = e\n+      }\n       taskQueue.dequeue()\n     }\n+\n+    if (!failedTasks.isEmpty) {\n+      taskQueue ++= failedTasks\n+    }\n+\n+    if (lastOfflineException != null) {",
        "path": "src/main/scala/com/twitter/gizzard/scheduler/NestedJob.scala",
        "position": null,
        "original_position": 48,
        "commit_id": "85e5b5f0c417abb8d2c87eb8e30a76528ba57274",
        "original_commit_id": "8af7cdd1a39e41a016b351c52f9f4c53844e5690",
        "user": {
            "login": "jcorwin",
            "id": 223253,
            "node_id": "MDQ6VXNlcjIyMzI1Mw==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/223253?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jcorwin",
            "html_url": "https://github.com/jcorwin",
            "followers_url": "https://api.github.com/users/jcorwin/followers",
            "following_url": "https://api.github.com/users/jcorwin/following{/other_user}",
            "gists_url": "https://api.github.com/users/jcorwin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jcorwin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jcorwin/subscriptions",
            "organizations_url": "https://api.github.com/users/jcorwin/orgs",
            "repos_url": "https://api.github.com/users/jcorwin/repos",
            "events_url": "https://api.github.com/users/jcorwin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jcorwin/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "OK, looks good, then.\n",
        "created_at": "2012-02-23T18:28:41Z",
        "updated_at": "2012-02-23T19:33:51Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/84#discussion_r481531",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/84",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/481531"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/84#discussion_r481531"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/84"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/481675",
        "pull_request_review_id": null,
        "id": 481675,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTY3NQ==",
        "diff_hunk": "@@ -16,10 +16,40 @@ abstract class NestedJob(val jobs: Iterable[JsonJob]) extends JsonJob {\n   }\n \n   def apply() {\n+    val failedTasks = mutable.Buffer[JsonJob]()\n+    var lastNormalException: Throwable = null",
        "path": "src/main/scala/com/twitter/gizzard/scheduler/NestedJob.scala",
        "position": null,
        "original_position": 22,
        "commit_id": "85e5b5f0c417abb8d2c87eb8e30a76528ba57274",
        "original_commit_id": "8af7cdd1a39e41a016b351c52f9f4c53844e5690",
        "user": {
            "login": "rvpgithub",
            "id": 585641,
            "node_id": "MDQ6VXNlcjU4NTY0MQ==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/585641?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rvpgithub",
            "html_url": "https://github.com/rvpgithub",
            "followers_url": "https://api.github.com/users/rvpgithub/followers",
            "following_url": "https://api.github.com/users/rvpgithub/following{/other_user}",
            "gists_url": "https://api.github.com/users/rvpgithub/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rvpgithub/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rvpgithub/subscriptions",
            "organizations_url": "https://api.github.com/users/rvpgithub/orgs",
            "repos_url": "https://api.github.com/users/rvpgithub/repos",
            "events_url": "https://api.github.com/users/rvpgithub/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rvpgithub/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think the scala practice is to use Option in such cases. Stu/Matt would be able to show you how.\n",
        "created_at": "2012-02-23T18:54:34Z",
        "updated_at": "2012-02-23T19:33:51Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/84#discussion_r481675",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/84",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/481675"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/84#discussion_r481675"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/84"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/481681",
        "pull_request_review_id": null,
        "id": 481681,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTY4MQ==",
        "diff_hunk": "@@ -16,10 +16,40 @@ abstract class NestedJob(val jobs: Iterable[JsonJob]) extends JsonJob {\n   }\n \n   def apply() {\n+    val failedTasks = mutable.Buffer[JsonJob]()\n+    var lastNormalException: Throwable = null\n+    var lastOfflineException: ShardOfflineException = null\n+    var lastBlackHoleException: ShardBlackHoleException = null\n+\n     while (!taskQueue.isEmpty) {\n-      taskQueue.head.apply()\n+      val task: JsonJob = taskQueue.head\n+      try {\n+        task.apply()\n+      } catch {\n+        case e: ShardBlackHoleException =>\n+          lastBlackHoleException = e\n+        case e: ShardOfflineException =>\n+          failedTasks += task\n+          lastOfflineException = e\n+        case e =>\n+          failedTasks += task\n+          lastNormalException = e\n+      }\n       taskQueue.dequeue()\n     }\n+\n+    if (!failedTasks.isEmpty) {\n+      taskQueue ++= failedTasks\n+    }\n+\n+    if (lastOfflineException != null) {",
        "path": "src/main/scala/com/twitter/gizzard/scheduler/NestedJob.scala",
        "position": null,
        "original_position": 48,
        "commit_id": "85e5b5f0c417abb8d2c87eb8e30a76528ba57274",
        "original_commit_id": "8af7cdd1a39e41a016b351c52f9f4c53844e5690",
        "user": {
            "login": "rvpgithub",
            "id": 585641,
            "node_id": "MDQ6VXNlcjU4NTY0MQ==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/585641?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rvpgithub",
            "html_url": "https://github.com/rvpgithub",
            "followers_url": "https://api.github.com/users/rvpgithub/followers",
            "following_url": "https://api.github.com/users/rvpgithub/following{/other_user}",
            "gists_url": "https://api.github.com/users/rvpgithub/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rvpgithub/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rvpgithub/subscriptions",
            "organizations_url": "https://api.github.com/users/rvpgithub/orgs",
            "repos_url": "https://api.github.com/users/rvpgithub/repos",
            "events_url": "https://api.github.com/users/rvpgithub/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rvpgithub/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Can you add a comment mentioning the reason for doing it this way?\n",
        "created_at": "2012-02-23T18:55:15Z",
        "updated_at": "2012-02-23T19:33:51Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/84#discussion_r481681",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/84",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/481681"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/84#discussion_r481681"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/84"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/481912",
        "pull_request_review_id": null,
        "id": 481912,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkxMg==",
        "diff_hunk": "@@ -16,10 +16,40 @@ abstract class NestedJob(val jobs: Iterable[JsonJob]) extends JsonJob {\n   }\n \n   def apply() {\n+    val failedTasks = mutable.Buffer[JsonJob]()\n+    var lastNormalException: Throwable = null\n+    var lastOfflineException: ShardOfflineException = null\n+    var lastBlackHoleException: ShardBlackHoleException = null\n+\n     while (!taskQueue.isEmpty) {\n-      taskQueue.head.apply()\n+      val task: JsonJob = taskQueue.head\n+      try {\n+        task.apply()\n+      } catch {\n+        case e: ShardBlackHoleException =>\n+          lastBlackHoleException = e\n+        case e: ShardOfflineException =>\n+          failedTasks += task\n+          lastOfflineException = e\n+        case e =>\n+          failedTasks += task\n+          lastNormalException = e\n+      }\n       taskQueue.dequeue()\n     }\n+\n+    if (!failedTasks.isEmpty) {\n+      taskQueue ++= failedTasks\n+    }\n+\n+    if (lastOfflineException != null) {",
        "path": "src/main/scala/com/twitter/gizzard/scheduler/NestedJob.scala",
        "position": null,
        "original_position": 48,
        "commit_id": "85e5b5f0c417abb8d2c87eb8e30a76528ba57274",
        "original_commit_id": "8af7cdd1a39e41a016b351c52f9f4c53844e5690",
        "user": {
            "login": "hyungoo",
            "id": 1463608,
            "node_id": "MDQ6VXNlcjE0NjM2MDg=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1463608?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hyungoo",
            "html_url": "https://github.com/hyungoo",
            "followers_url": "https://api.github.com/users/hyungoo/followers",
            "following_url": "https://api.github.com/users/hyungoo/following{/other_user}",
            "gists_url": "https://api.github.com/users/hyungoo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hyungoo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hyungoo/subscriptions",
            "organizations_url": "https://api.github.com/users/hyungoo/orgs",
            "repos_url": "https://api.github.com/users/hyungoo/repos",
            "events_url": "https://api.github.com/users/hyungoo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hyungoo/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Done.\n",
        "created_at": "2012-02-23T19:35:29Z",
        "updated_at": "2012-02-23T19:35:29Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/84#discussion_r481912",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/84",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/481912"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/84#discussion_r481912"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/84"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/481913",
        "pull_request_review_id": null,
        "id": 481913,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkxMw==",
        "diff_hunk": "@@ -16,10 +16,40 @@ abstract class NestedJob(val jobs: Iterable[JsonJob]) extends JsonJob {\n   }\n \n   def apply() {\n+    val failedTasks = mutable.Buffer[JsonJob]()\n+    var lastNormalException: Throwable = null",
        "path": "src/main/scala/com/twitter/gizzard/scheduler/NestedJob.scala",
        "position": null,
        "original_position": 22,
        "commit_id": "85e5b5f0c417abb8d2c87eb8e30a76528ba57274",
        "original_commit_id": "8af7cdd1a39e41a016b351c52f9f4c53844e5690",
        "user": {
            "login": "hyungoo",
            "id": 1463608,
            "node_id": "MDQ6VXNlcjE0NjM2MDg=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1463608?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hyungoo",
            "html_url": "https://github.com/hyungoo",
            "followers_url": "https://api.github.com/users/hyungoo/followers",
            "following_url": "https://api.github.com/users/hyungoo/following{/other_user}",
            "gists_url": "https://api.github.com/users/hyungoo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hyungoo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hyungoo/subscriptions",
            "organizations_url": "https://api.github.com/users/hyungoo/orgs",
            "repos_url": "https://api.github.com/users/hyungoo/repos",
            "events_url": "https://api.github.com/users/hyungoo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hyungoo/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Done. I used Matt's example. Thanks!\n",
        "created_at": "2012-02-23T19:35:58Z",
        "updated_at": "2012-02-23T19:35:58Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/84#discussion_r481913",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/84",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/481913"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/84#discussion_r481913"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/84"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/537102",
        "pull_request_review_id": null,
        "id": 537102,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEwMg==",
        "diff_hunk": "@@ -152,6 +154,8 @@ extends Process with JobConsumer {\n       try {\n         val job = ticket.job\n         try {\n+          if (isReplicated && job.shouldReplicate) jobAsyncReplicator.enqueue(job.toJsonBytes)\n+          // TODO(Abhi Khune): job.shouldReplicate = false",
        "path": "src/main/scala/com/twitter/gizzard/scheduler/JobScheduler.scala",
        "position": null,
        "original_position": 14,
        "commit_id": "ede468271e231569555a4c609247abe3f82be7fc",
        "original_commit_id": "5c190813d14ed1ac10562f54c7209dbb84b31e07",
        "user": {
            "login": "alanliang",
            "id": 198559,
            "node_id": "MDQ6VXNlcjE5ODU1OQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/198559?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alanliang",
            "html_url": "https://github.com/alanliang",
            "followers_url": "https://api.github.com/users/alanliang/followers",
            "following_url": "https://api.github.com/users/alanliang/following{/other_user}",
            "gists_url": "https://api.github.com/users/alanliang/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/alanliang/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alanliang/subscriptions",
            "organizations_url": "https://api.github.com/users/alanliang/orgs",
            "repos_url": "https://api.github.com/users/alanliang/repos",
            "events_url": "https://api.github.com/users/alanliang/events{/privacy}",
            "received_events_url": "https://api.github.com/users/alanliang/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "what does abhi plan to do here?\n",
        "created_at": "2012-03-09T00:43:33Z",
        "updated_at": "2012-03-09T03:12:12Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/88#discussion_r537102",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/88",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/537102"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/88#discussion_r537102"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/88"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/536702",
        "pull_request_review_id": null,
        "id": 536702,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjcwMg==",
        "diff_hunk": "@@ -167,6 +171,7 @@ extends Process with JobConsumer {\n             job.errorMessage = e.toString\n             if (job.errorCount > errorLimit) {\n               badJobQueue.put(job)\n+              Logger.get(\"bad_jobs\").error(job.toString)",
        "path": "src/main/scala/com/twitter/gizzard/scheduler/JobScheduler.scala",
        "position": 59,
        "original_position": 45,
        "commit_id": "8ee20c2bc4c93848a59973eb10387d17c6bd72f3",
        "original_commit_id": "4c995718ea9458dec797868b9d6b917555548d49",
        "user": {
            "login": "jcorwin",
            "id": 223253,
            "node_id": "MDQ6VXNlcjIyMzI1Mw==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/223253?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jcorwin",
            "html_url": "https://github.com/jcorwin",
            "followers_url": "https://api.github.com/users/jcorwin/followers",
            "following_url": "https://api.github.com/users/jcorwin/following{/other_user}",
            "gists_url": "https://api.github.com/users/jcorwin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jcorwin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jcorwin/subscriptions",
            "organizations_url": "https://api.github.com/users/jcorwin/orgs",
            "repos_url": "https://api.github.com/users/jcorwin/repos",
            "events_url": "https://api.github.com/users/jcorwin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jcorwin/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "If you want to preserve the old behavior, I don't think that job.toString gives you the json representation of the job. You'll need to pass that through the codec.\n",
        "created_at": "2012-03-08T23:26:59Z",
        "updated_at": "2012-03-09T05:22:43Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/89#discussion_r536702",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/89",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/536702"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/89#discussion_r536702"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/89"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/536714",
        "pull_request_review_id": null,
        "id": 536714,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjcxNA==",
        "diff_hunk": "@@ -129,28 +114,35 @@ trait Scheduler {\n   var _errorQueueName: Option[String] = None\n   def errorQueueName_=(s: String) { _errorQueueName = Some(s) }\n   def errorQueueName: String = _errorQueueName.getOrElse(name + \"_errors\")\n+  var _badJobQueueName: Option[String] = None\n+  def badJobQueueName_=(s: String) { _badJobQueueName = Some(s) }\n+  def badJobQueueName: String = _badJobQueueName.getOrElse(name + \"_bad_jobs\")\n \n   def apply(codec: JsonCodec): gizzard.scheduler.JobScheduler = {\n-    val (jobQueue, errorQueue) = schedulerType match {\n+    val (jobQueue, errorQueue, badJobQueue) = schedulerType match {",
        "path": "src/main/scala/com/twitter/gizzard/config/JobScheduler.scala",
        "position": null,
        "original_position": 39,
        "commit_id": "8ee20c2bc4c93848a59973eb10387d17c6bd72f3",
        "original_commit_id": "4c995718ea9458dec797868b9d6b917555548d49",
        "user": {
            "login": "jcorwin",
            "id": 223253,
            "node_id": "MDQ6VXNlcjIyMzI1Mw==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/223253?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jcorwin",
            "html_url": "https://github.com/jcorwin",
            "followers_url": "https://api.github.com/users/jcorwin/followers",
            "following_url": "https://api.github.com/users/jcorwin/following{/other_user}",
            "gists_url": "https://api.github.com/users/jcorwin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jcorwin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jcorwin/subscriptions",
            "organizations_url": "https://api.github.com/users/jcorwin/orgs",
            "repos_url": "https://api.github.com/users/jcorwin/repos",
            "events_url": "https://api.github.com/users/jcorwin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jcorwin/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Want to add a filteredJobQueue as well? :)\n",
        "created_at": "2012-03-08T23:30:33Z",
        "updated_at": "2012-03-09T05:22:43Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/89#discussion_r536714",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/89",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/536714"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/89#discussion_r536714"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/89"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/536780",
        "pull_request_review_id": null,
        "id": 536780,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc4MA==",
        "diff_hunk": "@@ -12,7 +12,7 @@ class JobSchedulerSpec extends ConfiguredSpecification with JMocker with ClassMo\n   \"JobScheduler\" should {\n     val queue = mock[JobQueue]\n     val errorQueue = mock[JobQueue]",
        "path": "src/test/scala/com/twitter/gizzard/scheduler_new/JobSchedulerSpec.scala",
        "position": null,
        "original_position": 3,
        "commit_id": "8ee20c2bc4c93848a59973eb10387d17c6bd72f3",
        "original_commit_id": "4c995718ea9458dec797868b9d6b917555548d49",
        "user": {
            "login": "stuhood",
            "id": 46740,
            "node_id": "MDQ6VXNlcjQ2NzQw",
            "avatar_url": "https://avatars1.githubusercontent.com/u/46740?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/stuhood",
            "html_url": "https://github.com/stuhood",
            "followers_url": "https://api.github.com/users/stuhood/followers",
            "following_url": "https://api.github.com/users/stuhood/following{/other_user}",
            "gists_url": "https://api.github.com/users/stuhood/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/stuhood/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/stuhood/subscriptions",
            "organizations_url": "https://api.github.com/users/stuhood/orgs",
            "repos_url": "https://api.github.com/users/stuhood/repos",
            "events_url": "https://api.github.com/users/stuhood/events{/privacy}",
            "received_events_url": "https://api.github.com/users/stuhood/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "3 of [anything] is probably the time to switch to a List of [anything]s.\n",
        "created_at": "2012-03-08T23:42:08Z",
        "updated_at": "2012-03-09T05:22:43Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/89#discussion_r536780",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/89",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/536780"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/89#discussion_r536780"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/89"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/536785",
        "pull_request_review_id": null,
        "id": 536785,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc4NQ==",
        "diff_hunk": "@@ -129,28 +114,35 @@ trait Scheduler {\n   var _errorQueueName: Option[String] = None\n   def errorQueueName_=(s: String) { _errorQueueName = Some(s) }\n   def errorQueueName: String = _errorQueueName.getOrElse(name + \"_errors\")\n+  var _badJobQueueName: Option[String] = None\n+  def badJobQueueName_=(s: String) { _badJobQueueName = Some(s) }\n+  def badJobQueueName: String = _badJobQueueName.getOrElse(name + \"_bad_jobs\")\n \n   def apply(codec: JsonCodec): gizzard.scheduler.JobScheduler = {\n-    val (jobQueue, errorQueue) = schedulerType match {\n+    val (jobQueue, errorQueue, badJobQueue) = schedulerType match {",
        "path": "src/main/scala/com/twitter/gizzard/config/JobScheduler.scala",
        "position": null,
        "original_position": 39,
        "commit_id": "8ee20c2bc4c93848a59973eb10387d17c6bd72f3",
        "original_commit_id": "4c995718ea9458dec797868b9d6b917555548d49",
        "user": {
            "login": "alanliang",
            "id": 198559,
            "node_id": "MDQ6VXNlcjE5ODU1OQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/198559?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alanliang",
            "html_url": "https://github.com/alanliang",
            "followers_url": "https://api.github.com/users/alanliang/followers",
            "following_url": "https://api.github.com/users/alanliang/following{/other_user}",
            "gists_url": "https://api.github.com/users/alanliang/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/alanliang/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alanliang/subscriptions",
            "organizations_url": "https://api.github.com/users/alanliang/orgs",
            "repos_url": "https://api.github.com/users/alanliang/repos",
            "events_url": "https://api.github.com/users/alanliang/events{/privacy}",
            "received_events_url": "https://api.github.com/users/alanliang/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Let's make this a separate patch!\n",
        "created_at": "2012-03-08T23:42:45Z",
        "updated_at": "2012-03-09T05:22:43Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/89#discussion_r536785",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/89",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/536785"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/89#discussion_r536785"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/89"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/536823",
        "pull_request_review_id": null,
        "id": 536823,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjgyMw==",
        "diff_hunk": "@@ -167,6 +171,7 @@ extends Process with JobConsumer {\n             job.errorMessage = e.toString\n             if (job.errorCount > errorLimit) {\n               badJobQueue.put(job)\n+              Logger.get(\"bad_jobs\").error(job.toString)",
        "path": "src/main/scala/com/twitter/gizzard/scheduler/JobScheduler.scala",
        "position": 59,
        "original_position": 45,
        "commit_id": "8ee20c2bc4c93848a59973eb10387d17c6bd72f3",
        "original_commit_id": "4c995718ea9458dec797868b9d6b917555548d49",
        "user": {
            "login": "alanliang",
            "id": 198559,
            "node_id": "MDQ6VXNlcjE5ODU1OQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/198559?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alanliang",
            "html_url": "https://github.com/alanliang",
            "followers_url": "https://api.github.com/users/alanliang/followers",
            "following_url": "https://api.github.com/users/alanliang/following{/other_user}",
            "gists_url": "https://api.github.com/users/alanliang/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/alanliang/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alanliang/subscriptions",
            "organizations_url": "https://api.github.com/users/alanliang/orgs",
            "repos_url": "https://api.github.com/users/alanliang/repos",
            "events_url": "https://api.github.com/users/alanliang/events{/privacy}",
            "received_events_url": "https://api.github.com/users/alanliang/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'm preserving the same behaviour as before and in my tests, it seems to show the bad jobs properly in the logs.\n\nAlso, I realize that i need to remove some vestigal classes due to the removal of a few classes in this commit.\n",
        "created_at": "2012-03-08T23:48:48Z",
        "updated_at": "2012-03-09T05:22:43Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/89#discussion_r536823",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/89",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/536823"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/89#discussion_r536823"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/89"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/536967",
        "pull_request_review_id": null,
        "id": 536967,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjk2Nw==",
        "diff_hunk": "@@ -12,7 +12,7 @@ class JobSchedulerSpec extends ConfiguredSpecification with JMocker with ClassMo\n   \"JobScheduler\" should {\n     val queue = mock[JobQueue]\n     val errorQueue = mock[JobQueue]",
        "path": "src/test/scala/com/twitter/gizzard/scheduler_new/JobSchedulerSpec.scala",
        "position": null,
        "original_position": 3,
        "commit_id": "8ee20c2bc4c93848a59973eb10387d17c6bd72f3",
        "original_commit_id": "4c995718ea9458dec797868b9d6b917555548d49",
        "user": {
            "login": "alanliang",
            "id": 198559,
            "node_id": "MDQ6VXNlcjE5ODU1OQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/198559?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alanliang",
            "html_url": "https://github.com/alanliang",
            "followers_url": "https://api.github.com/users/alanliang/followers",
            "following_url": "https://api.github.com/users/alanliang/following{/other_user}",
            "gists_url": "https://api.github.com/users/alanliang/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/alanliang/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alanliang/subscriptions",
            "organizations_url": "https://api.github.com/users/alanliang/orgs",
            "repos_url": "https://api.github.com/users/alanliang/repos",
            "events_url": "https://api.github.com/users/alanliang/events{/privacy}",
            "received_events_url": "https://api.github.com/users/alanliang/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "fixed\n",
        "created_at": "2012-03-09T00:11:16Z",
        "updated_at": "2012-03-09T05:22:43Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/89#discussion_r536967",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/89",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/536967"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/89#discussion_r536967"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/89"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/556099",
        "pull_request_review_id": null,
        "id": 556099,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjA5OQ==",
        "diff_hunk": "@@ -32,7 +32,11 @@ class MemoryShardManagerSource extends ShardManagerSource {\n \n   def currentState() = {",
        "path": "src/main/scala/com/twitter/gizzard/nameserver/MemoryShard.scala",
        "position": 2,
        "original_position": 2,
        "commit_id": "c9938d4786761a7ccdb27a965140d7ec7a284678",
        "original_commit_id": "51dc1c20eda3143f98433cbfc115018b912baadd",
        "user": {
            "login": "stuhood",
            "id": 46740,
            "node_id": "MDQ6VXNlcjQ2NzQw",
            "avatar_url": "https://avatars1.githubusercontent.com/u/46740?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/stuhood",
            "html_url": "https://github.com/stuhood",
            "followers_url": "https://api.github.com/users/stuhood/followers",
            "following_url": "https://api.github.com/users/stuhood/following{/other_user}",
            "gists_url": "https://api.github.com/users/stuhood/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/stuhood/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/stuhood/subscriptions",
            "organizations_url": "https://api.github.com/users/stuhood/orgs",
            "repos_url": "https://api.github.com/users/stuhood/repos",
            "events_url": "https://api.github.com/users/stuhood/events{/privacy}",
            "received_events_url": "https://api.github.com/users/stuhood/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I was noticing in another branch that this class is essentially unused, even in unit tests. Until we decide to remove it we should probably not implement new features like diffState for it (aka, throw 'NotImplemented').\n\nEDIT: Well, I mean that we shouldn't implement them half-assedly by always returning 0: prefer 'NotImplemented' to 'NotWorkingAsExpected'\n",
        "created_at": "2012-03-14T08:10:14Z",
        "updated_at": "2012-03-15T05:25:14Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/92#discussion_r556099",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/92",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/556099"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/92#discussion_r556099"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/92"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/556105",
        "pull_request_review_id": null,
        "id": 556105,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjEwNQ==",
        "diff_hunk": "@@ -80,38 +83,68 @@ class NameServer(val shard: RoutingNode[ShardManagerSource], val mappingFunction\n     forwarder\n   }\n \n-  private def recreateInternalShardState() {\n-    val infos       = mutable.ArrayBuffer[ShardInfo]()\n-    val links       = mutable.ArrayBuffer[LinkInfo]()\n-    val forwardings = mutable.ArrayBuffer[Forwarding]()\n+  def reload() {\n+    log.info(\"Loading name server configuration...\")\n+    synchronized {\n+      shardManager.prepareReload()\n+\n+      val infos       = mutable.ArrayBuffer[ShardInfo]()\n+      val links       = mutable.ArrayBuffer[LinkInfo]()\n+      val forwardings = mutable.ArrayBuffer[Forwarding]()\n+      val (states, updatedSeq) = shardManager.currentState()\n+\n+      states foreach { state =>\n+        infos       ++= state.shards\n+        links       ++= state.links\n+        forwardings ++= state.forwardings\n+      }\n \n-    shardManager.currentState() foreach { state =>\n-      infos       ++= state.shards\n-      links       ++= state.links\n-      forwardings ++= state.forwardings\n-    }\n+      val routes = new RoutingState(\n+        shardRepository.instantiateNode,\n+        infos,\n+        links,\n+        forwardings\n+      )\n \n-    val routes = new RoutingState(\n-      shardRepository.instantiateNode,\n-      infos,\n-      links,\n-      forwardings\n-    )\n+      forwardingTree = routes.buildForwardingTree()\n+      lastUpdatedSeq = updatedSeq\n+    }\n+    log.info(\"Loading name server configuration is done.\")\n+  }\n \n-    forwardingTree = routes.buildForwardingTree()\n+  private def constructRoutingNode(shardId: ShardId, weight: Int = 1) : RoutingNode[Any] = {\n+    val shardInfo = shardManager.getShard(shardId)\n+    val children = shardManager.listDownwardLinks(shardId).map { link => constructRoutingNode(link.downId, link.weight) }\n+    shardRepository.instantiateNode(shardInfo, weight, children)\n   }\n \n   def reloadUpdatedForwardings() {\n     log.info(\"Loading updated name server configuration...\")\n-    recreateInternalShardState()\n-    log.info(\"Loading updated name server configuration is done.\")\n-  }\n+    synchronized {\n+      if (forwardingTree == null) throw new NameserverUninitialized\n+\n+      val changes: NameServerChanges = shardManager.diffState(lastUpdatedSeq)\n+      val updatedForwardingsByTableId = changes.updatedForwardings.groupBy(_.tableId)\n+      val deletedForwardingsByTableId = changes.deletedForwardings.groupBy(_.tableId)\n+      val tableIds = updatedForwardingsByTableId.keySet ++ deletedForwardingsByTableId.keySet\n+\n+      tableIds foreach { tableId =>",
        "path": "src/main/scala/com/twitter/gizzard/nameserver/NameServer.scala",
        "position": 102,
        "original_position": 102,
        "commit_id": "c9938d4786761a7ccdb27a965140d7ec7a284678",
        "original_commit_id": "51dc1c20eda3143f98433cbfc115018b912baadd",
        "user": {
            "login": "stuhood",
            "id": 46740,
            "node_id": "MDQ6VXNlcjQ2NzQw",
            "avatar_url": "https://avatars1.githubusercontent.com/u/46740?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/stuhood",
            "html_url": "https://github.com/stuhood",
            "followers_url": "https://api.github.com/users/stuhood/followers",
            "following_url": "https://api.github.com/users/stuhood/following{/other_user}",
            "gists_url": "https://api.github.com/users/stuhood/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/stuhood/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/stuhood/subscriptions",
            "organizations_url": "https://api.github.com/users/stuhood/orgs",
            "repos_url": "https://api.github.com/users/stuhood/repos",
            "events_url": "https://api.github.com/users/stuhood/events{/privacy}",
            "received_events_url": "https://api.github.com/users/stuhood/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Since the initial build of the forwardingTree is implemented inside the RoutingState class, this update logic should probably be in there as well for symmetry.\n",
        "created_at": "2012-03-14T08:15:12Z",
        "updated_at": "2012-03-15T05:25:14Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/92#discussion_r556105",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/92",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/556105"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/92#discussion_r556105"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/92"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/556107",
        "pull_request_review_id": null,
        "id": 556107,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjEwNw==",
        "diff_hunk": "@@ -80,38 +83,68 @@ class NameServer(val shard: RoutingNode[ShardManagerSource], val mappingFunction\n     forwarder\n   }\n \n-  private def recreateInternalShardState() {\n-    val infos       = mutable.ArrayBuffer[ShardInfo]()\n-    val links       = mutable.ArrayBuffer[LinkInfo]()\n-    val forwardings = mutable.ArrayBuffer[Forwarding]()\n+  def reload() {\n+    log.info(\"Loading name server configuration...\")\n+    synchronized {\n+      shardManager.prepareReload()\n+\n+      val infos       = mutable.ArrayBuffer[ShardInfo]()\n+      val links       = mutable.ArrayBuffer[LinkInfo]()\n+      val forwardings = mutable.ArrayBuffer[Forwarding]()\n+      val (states, updatedSeq) = shardManager.currentState()\n+\n+      states foreach { state =>\n+        infos       ++= state.shards\n+        links       ++= state.links\n+        forwardings ++= state.forwardings\n+      }\n \n-    shardManager.currentState() foreach { state =>\n-      infos       ++= state.shards\n-      links       ++= state.links\n-      forwardings ++= state.forwardings\n-    }\n+      val routes = new RoutingState(\n+        shardRepository.instantiateNode,\n+        infos,\n+        links,\n+        forwardings\n+      )\n \n-    val routes = new RoutingState(\n-      shardRepository.instantiateNode,\n-      infos,\n-      links,\n-      forwardings\n-    )\n+      forwardingTree = routes.buildForwardingTree()\n+      lastUpdatedSeq = updatedSeq\n+    }\n+    log.info(\"Loading name server configuration is done.\")\n+  }\n \n-    forwardingTree = routes.buildForwardingTree()\n+  private def constructRoutingNode(shardId: ShardId, weight: Int = 1) : RoutingNode[Any] = {\n+    val shardInfo = shardManager.getShard(shardId)\n+    val children = shardManager.listDownwardLinks(shardId).map { link => constructRoutingNode(link.downId, link.weight) }\n+    shardRepository.instantiateNode(shardInfo, weight, children)\n   }\n \n   def reloadUpdatedForwardings() {\n     log.info(\"Loading updated name server configuration...\")\n-    recreateInternalShardState()\n-    log.info(\"Loading updated name server configuration is done.\")\n-  }\n+    synchronized {\n+      if (forwardingTree == null) throw new NameserverUninitialized\n+\n+      val changes: NameServerChanges = shardManager.diffState(lastUpdatedSeq)\n+      val updatedForwardingsByTableId = changes.updatedForwardings.groupBy(_.tableId)\n+      val deletedForwardingsByTableId = changes.deletedForwardings.groupBy(_.tableId)\n+      val tableIds = updatedForwardingsByTableId.keySet ++ deletedForwardingsByTableId.keySet\n+\n+      tableIds foreach { tableId =>\n+        val newTreeMap = forwardingTree.get(tableId) match {\n+          case null => new TreeMap[Long, RoutingNode[Any]]()\n+          case treeMap => new TreeMap[Long, RoutingNode[Any]](treeMap)  // create a shallow copy\n+        }\n+\n+        deletedForwardingsByTableId.get(tableId).getOrElse(Nil) foreach { f => newTreeMap.remove(f.baseId) }\n+        updatedForwardingsByTableId.get(tableId).getOrElse(Nil) foreach { f =>\n+          newTreeMap.put(f.baseId, constructRoutingNode(f.shardId))\n+        }\n+\n+        forwardingTree.put(tableId, newTreeMap)\n+      }\n \n-  def reload() {\n-    log.info(\"Loading name server configuration...\")\n-    shardManager.reload()\n-    recreateInternalShardState()\n-    log.info(\"Loading name server configuration is done.\")\n+      lastUpdatedSeq = changes.updatedSeq",
        "path": "src/main/scala/com/twitter/gizzard/nameserver/NameServer.scala",
        "position": 121,
        "original_position": 121,
        "commit_id": "c9938d4786761a7ccdb27a965140d7ec7a284678",
        "original_commit_id": "51dc1c20eda3143f98433cbfc115018b912baadd",
        "user": {
            "login": "stuhood",
            "id": 46740,
            "node_id": "MDQ6VXNlcjQ2NzQw",
            "avatar_url": "https://avatars1.githubusercontent.com/u/46740?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/stuhood",
            "html_url": "https://github.com/stuhood",
            "followers_url": "https://api.github.com/users/stuhood/followers",
            "following_url": "https://api.github.com/users/stuhood/following{/other_user}",
            "gists_url": "https://api.github.com/users/stuhood/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/stuhood/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/stuhood/subscriptions",
            "organizations_url": "https://api.github.com/users/stuhood/orgs",
            "repos_url": "https://api.github.com/users/stuhood/repos",
            "events_url": "https://api.github.com/users/stuhood/events{/privacy}",
            "received_events_url": "https://api.github.com/users/stuhood/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Are diffs idempotent, or does this need to be done atomically with the forwardingTree puts?\n",
        "created_at": "2012-03-14T08:18:22Z",
        "updated_at": "2012-03-15T05:25:14Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/92#discussion_r556107",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/92",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/556107"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/92#discussion_r556107"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/92"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/556114",
        "pull_request_review_id": null,
        "id": 556114,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjExNA==",
        "diff_hunk": "@@ -0,0 +1,12 @@\n+package com.twitter.gizzard.nameserver\n+\n+/**\n+ * Changes to NameServer State\n+ *\n+ * @param updatedForwardings Forwarding entries that has been added or updated",
        "path": "src/main/scala/com/twitter/gizzard/nameserver/NameServerChanges.scala",
        "position": null,
        "original_position": 6,
        "commit_id": "c9938d4786761a7ccdb27a965140d7ec7a284678",
        "original_commit_id": "51dc1c20eda3143f98433cbfc115018b912baadd",
        "user": {
            "login": "stuhood",
            "id": 46740,
            "node_id": "MDQ6VXNlcjQ2NzQw",
            "avatar_url": "https://avatars1.githubusercontent.com/u/46740?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/stuhood",
            "html_url": "https://github.com/stuhood",
            "followers_url": "https://api.github.com/users/stuhood/followers",
            "following_url": "https://api.github.com/users/stuhood/following{/other_user}",
            "gists_url": "https://api.github.com/users/stuhood/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/stuhood/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/stuhood/subscriptions",
            "organizations_url": "https://api.github.com/users/stuhood/orgs",
            "repos_url": "https://api.github.com/users/stuhood/repos",
            "events_url": "https://api.github.com/users/stuhood/events{/privacy}",
            "received_events_url": "https://api.github.com/users/stuhood/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\"that have been\"\n",
        "created_at": "2012-03-14T08:21:03Z",
        "updated_at": "2012-03-15T05:25:14Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/92#discussion_r556114",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/92",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/556114"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/92#discussion_r556114"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/92"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/556116",
        "pull_request_review_id": null,
        "id": 556116,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjExNg==",
        "diff_hunk": "@@ -0,0 +1,12 @@\n+package com.twitter.gizzard.nameserver\n+\n+/**\n+ * Changes to NameServer State\n+ *\n+ * @param updatedForwardings Forwarding entries that has been added or updated\n+ * @param deletedForwardings Forwarding entries that has been marked \"deleted\"\n+ * @param updatedSeq         This class contains all the changes up to this updatedSeq and possibly more",
        "path": "src/main/scala/com/twitter/gizzard/nameserver/NameServerChanges.scala",
        "position": null,
        "original_position": 8,
        "commit_id": "c9938d4786761a7ccdb27a965140d7ec7a284678",
        "original_commit_id": "51dc1c20eda3143f98433cbfc115018b912baadd",
        "user": {
            "login": "stuhood",
            "id": 46740,
            "node_id": "MDQ6VXNlcjQ2NzQw",
            "avatar_url": "https://avatars1.githubusercontent.com/u/46740?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/stuhood",
            "html_url": "https://github.com/stuhood",
            "followers_url": "https://api.github.com/users/stuhood/followers",
            "following_url": "https://api.github.com/users/stuhood/following{/other_user}",
            "gists_url": "https://api.github.com/users/stuhood/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/stuhood/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/stuhood/subscriptions",
            "organizations_url": "https://api.github.com/users/stuhood/orgs",
            "repos_url": "https://api.github.com/users/stuhood/repos",
            "events_url": "https://api.github.com/users/stuhood/events{/privacy}",
            "received_events_url": "https://api.github.com/users/stuhood/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\"and possibly more\" deserves some more explanation.\n",
        "created_at": "2012-03-14T08:21:44Z",
        "updated_at": "2012-03-15T05:25:14Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/92#discussion_r556116",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/92",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/556116"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/92#discussion_r556116"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/92"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/556134",
        "pull_request_review_id": null,
        "id": 556134,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjEzNA==",
        "diff_hunk": "@@ -194,71 +194,28 @@ class SqlShardManagerSource(queryEvaluator: QueryEvaluator) extends ShardManager\n \n   // Forwardings/Shard Management Read Methods\n \n-  private def loadState() = dumpStructure(listTables)\n-\n-  private def updateState(state: Seq[NameServerState], updatedSequence: Long) = {\n-    import TreeUtils._\n-\n-    val oldForwardings = state.flatMap(_.forwardings).map(f => (f.tableId, f.baseId) -> f).toMap\n-    val oldLinks       = state.flatMap(_.links).toSet\n-    val oldLinksByUpId = mapOfSets(oldLinks)(_.upId)\n-    val oldShards      = state.flatMap(_.shards).map(s => s.id -> s).toMap\n-    val oldShardIds    = oldShards.keySet\n-\n-    val newForwardings     = mutable.Map[(Int,Long), Forwarding]()\n-    val deletedForwardings = mutable.Map[(Int,Long), Forwarding]()\n-\n-    queryEvaluator.select(\"SELECT * FROM forwardings WHERE updated_seq > ?\", updatedSequence) { row =>\n-      val f  = rowToForwarding(row)\n-      val fs = if (row.getBoolean(\"deleted\")) deletedForwardings else newForwardings\n-\n-      fs += (f.tableId, f.baseId) -> f\n-    }\n-\n-    val newRootIds  = newForwardings.map(_._2.shardId).toSet\n-    val newLinks    = descendantLinks(newRootIds)(listDownwardLinks)\n-    val newShardIds = newRootIds ++ newLinks.map(_.downId)\n-    val newShards   = newShardIds.toList.map(id => id -> getShard(id)).toMap\n-\n-    val purgeableRootIds  = newRootIds ++ deletedForwardings.map(_._2.shardId)\n-    val purgeableLinks    = descendantLinks(purgeableRootIds)(oldLinksByUpId)\n-    val purgeableShardIds = purgeableRootIds ++ purgeableLinks.map(_.downId)\n-\n-    val updatedForwardings = (oldForwardings -- deletedForwardings.keys) ++ newForwardings\n-    val updatedLinks       = (oldLinks -- purgeableLinks) ++ newLinks\n-    val updatedShards      = (oldShards -- purgeableShardIds) ++ newShards\n-\n-    val forwardingsByTableId = mapOfSets(updatedForwardings.map(_._2))(_.tableId)\n-    val linksByUpId          = mapOfSets(updatedLinks)(_.upId)\n-    val tableIds             = forwardingsByTableId.keySet\n-\n-    def extractor(id: Int) = NameServerState.extractTable(id)(forwardingsByTableId)(linksByUpId)(updatedShards)\n-\n-    tableIds.map(t => extractor(t)).toSeq\n-  }\n-\n-  @volatile private var _forwardingUpdatedSeq = 0L\n-  @volatile private var _currentState: Seq[NameServerState] = null\n-\n   private def latestUpdatedSeq() = {\n     val query = \"SELECT counter FROM update_counters WHERE id = 'forwardings'\"\n     queryEvaluator.selectOne(query)(_.getLong(\"counter\")).getOrElse(0L)\n   }\n \n-  def currentState() = {\n-    synchronized {\n-      val nextUpdatedSeq = latestUpdatedSeq()\n-\n-      if (_currentState eq null) {\n-        _currentState = loadState()\n-      } else {\n-        _currentState = updateState(_currentState, _forwardingUpdatedSeq)\n-      }\n+  def currentState() : (Seq[NameServerState], Long) = {\n+    val updatedSeq = latestUpdatedSeq()\n+    (dumpStructure(listTables), updatedSeq)\n+  }\n \n-      _forwardingUpdatedSeq = nextUpdatedSeq\n+  def diffState(lastUpdatedSeq: Long) : NameServerChanges = {\n+    val updatedForwardings = mutable.Buffer[Forwarding]()\n+    val deletedForwardings = mutable.Buffer[Forwarding]()\n+    val newUpdatedSeq = latestUpdatedSeq()\n \n-      _currentState\n+    queryEvaluator.select(\"SELECT * FROM forwardings WHERE updated_seq > ?\", lastUpdatedSeq) { row =>\n+      val f  = rowToForwarding(row)\n+      val buffer = if (row.getBoolean(\"deleted\")) deletedForwardings else updatedForwardings",
        "path": "src/main/scala/com/twitter/gizzard/nameserver/SqlShard.scala",
        "position": null,
        "original_position": 78,
        "commit_id": "c9938d4786761a7ccdb27a965140d7ec7a284678",
        "original_commit_id": "51dc1c20eda3143f98433cbfc115018b912baadd",
        "user": {
            "login": "stuhood",
            "id": 46740,
            "node_id": "MDQ6VXNlcjQ2NzQw",
            "avatar_url": "https://avatars1.githubusercontent.com/u/46740?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/stuhood",
            "html_url": "https://github.com/stuhood",
            "followers_url": "https://api.github.com/users/stuhood/followers",
            "following_url": "https://api.github.com/users/stuhood/following{/other_user}",
            "gists_url": "https://api.github.com/users/stuhood/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/stuhood/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/stuhood/subscriptions",
            "organizations_url": "https://api.github.com/users/stuhood/orgs",
            "repos_url": "https://api.github.com/users/stuhood/repos",
            "events_url": "https://api.github.com/users/stuhood/events{/privacy}",
            "received_events_url": "https://api.github.com/users/stuhood/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It seems like ordering matters here, unless I'm misunderstanding the table structure... what happens when a forwarding is updated and then later deleted, vs when it happens the other way around? Or will there be exactly one row per forwarding?\n",
        "created_at": "2012-03-14T08:27:15Z",
        "updated_at": "2012-03-15T05:25:14Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/92#discussion_r556134",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/92",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/556134"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/92#discussion_r556134"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/92"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/556143",
        "pull_request_review_id": null,
        "id": 556143,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjE0Mw==",
        "diff_hunk": "@@ -128,5 +130,60 @@ object NameServerSpec extends ConfiguredSpecification with JMocker with ClassMoc\n       }\n       nameServer.shardManager.createAndMaterializeShard(shardInfos(0)) mustNot throwA[InvalidShard]\n     }\n+\n+    \"reload nameserver configuration\" in {",
        "path": "src/test/scala/com/twitter/gizzard/nameserver/NameServerSpec.scala",
        "position": 40,
        "original_position": 40,
        "commit_id": "c9938d4786761a7ccdb27a965140d7ec7a284678",
        "original_commit_id": "51dc1c20eda3143f98433cbfc115018b912baadd",
        "user": {
            "login": "stuhood",
            "id": 46740,
            "node_id": "MDQ6VXNlcjQ2NzQw",
            "avatar_url": "https://avatars1.githubusercontent.com/u/46740?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/stuhood",
            "html_url": "https://github.com/stuhood",
            "followers_url": "https://api.github.com/users/stuhood/followers",
            "following_url": "https://api.github.com/users/stuhood/following{/other_user}",
            "gists_url": "https://api.github.com/users/stuhood/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/stuhood/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/stuhood/subscriptions",
            "organizations_url": "https://api.github.com/users/stuhood/orgs",
            "repos_url": "https://api.github.com/users/stuhood/repos",
            "events_url": "https://api.github.com/users/stuhood/events{/privacy}",
            "received_events_url": "https://api.github.com/users/stuhood/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Could you add some comments here to indicate what you're doing? The mocking is pretty inscrutable.\n",
        "created_at": "2012-03-14T08:32:16Z",
        "updated_at": "2012-03-15T05:25:14Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/92#discussion_r556143",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/92",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/556143"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/92#discussion_r556143"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/92"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/559862",
        "pull_request_review_id": null,
        "id": 559862,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg2Mg==",
        "diff_hunk": "@@ -32,7 +32,11 @@ class MemoryShardManagerSource extends ShardManagerSource {\n \n   def currentState() = {",
        "path": "src/main/scala/com/twitter/gizzard/nameserver/MemoryShard.scala",
        "position": 2,
        "original_position": 2,
        "commit_id": "c9938d4786761a7ccdb27a965140d7ec7a284678",
        "original_commit_id": "51dc1c20eda3143f98433cbfc115018b912baadd",
        "user": {
            "login": "hyungoo",
            "id": 1463608,
            "node_id": "MDQ6VXNlcjE0NjM2MDg=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1463608?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hyungoo",
            "html_url": "https://github.com/hyungoo",
            "followers_url": "https://api.github.com/users/hyungoo/followers",
            "following_url": "https://api.github.com/users/hyungoo/following{/other_user}",
            "gists_url": "https://api.github.com/users/hyungoo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hyungoo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hyungoo/subscriptions",
            "organizations_url": "https://api.github.com/users/hyungoo/orgs",
            "repos_url": "https://api.github.com/users/hyungoo/repos",
            "events_url": "https://api.github.com/users/hyungoo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hyungoo/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Agreed. I made diffState() throw UnsupportedOperationException. Let me know if Scala has its own kind of such exception.\n",
        "created_at": "2012-03-14T20:44:56Z",
        "updated_at": "2012-03-15T05:25:14Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/92#discussion_r559862",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/92",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/559862"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/92#discussion_r559862"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/92"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/559898",
        "pull_request_review_id": null,
        "id": 559898,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg5OA==",
        "diff_hunk": "@@ -80,38 +83,68 @@ class NameServer(val shard: RoutingNode[ShardManagerSource], val mappingFunction\n     forwarder\n   }\n \n-  private def recreateInternalShardState() {\n-    val infos       = mutable.ArrayBuffer[ShardInfo]()\n-    val links       = mutable.ArrayBuffer[LinkInfo]()\n-    val forwardings = mutable.ArrayBuffer[Forwarding]()\n+  def reload() {\n+    log.info(\"Loading name server configuration...\")\n+    synchronized {\n+      shardManager.prepareReload()\n+\n+      val infos       = mutable.ArrayBuffer[ShardInfo]()\n+      val links       = mutable.ArrayBuffer[LinkInfo]()\n+      val forwardings = mutable.ArrayBuffer[Forwarding]()\n+      val (states, updatedSeq) = shardManager.currentState()\n+\n+      states foreach { state =>\n+        infos       ++= state.shards\n+        links       ++= state.links\n+        forwardings ++= state.forwardings\n+      }\n \n-    shardManager.currentState() foreach { state =>\n-      infos       ++= state.shards\n-      links       ++= state.links\n-      forwardings ++= state.forwardings\n-    }\n+      val routes = new RoutingState(\n+        shardRepository.instantiateNode,\n+        infos,\n+        links,\n+        forwardings\n+      )\n \n-    val routes = new RoutingState(\n-      shardRepository.instantiateNode,\n-      infos,\n-      links,\n-      forwardings\n-    )\n+      forwardingTree = routes.buildForwardingTree()\n+      lastUpdatedSeq = updatedSeq\n+    }\n+    log.info(\"Loading name server configuration is done.\")\n+  }\n \n-    forwardingTree = routes.buildForwardingTree()\n+  private def constructRoutingNode(shardId: ShardId, weight: Int = 1) : RoutingNode[Any] = {\n+    val shardInfo = shardManager.getShard(shardId)\n+    val children = shardManager.listDownwardLinks(shardId).map { link => constructRoutingNode(link.downId, link.weight) }\n+    shardRepository.instantiateNode(shardInfo, weight, children)\n   }\n \n   def reloadUpdatedForwardings() {\n     log.info(\"Loading updated name server configuration...\")\n-    recreateInternalShardState()\n-    log.info(\"Loading updated name server configuration is done.\")\n-  }\n+    synchronized {\n+      if (forwardingTree == null) throw new NameserverUninitialized\n+\n+      val changes: NameServerChanges = shardManager.diffState(lastUpdatedSeq)\n+      val updatedForwardingsByTableId = changes.updatedForwardings.groupBy(_.tableId)\n+      val deletedForwardingsByTableId = changes.deletedForwardings.groupBy(_.tableId)\n+      val tableIds = updatedForwardingsByTableId.keySet ++ deletedForwardingsByTableId.keySet\n+\n+      tableIds foreach { tableId =>",
        "path": "src/main/scala/com/twitter/gizzard/nameserver/NameServer.scala",
        "position": 102,
        "original_position": 102,
        "commit_id": "c9938d4786761a7ccdb27a965140d7ec7a284678",
        "original_commit_id": "51dc1c20eda3143f98433cbfc115018b912baadd",
        "user": {
            "login": "hyungoo",
            "id": 1463608,
            "node_id": "MDQ6VXNlcjE0NjM2MDg=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1463608?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hyungoo",
            "html_url": "https://github.com/hyungoo",
            "followers_url": "https://api.github.com/users/hyungoo/followers",
            "following_url": "https://api.github.com/users/hyungoo/following{/other_user}",
            "gists_url": "https://api.github.com/users/hyungoo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hyungoo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hyungoo/subscriptions",
            "organizations_url": "https://api.github.com/users/hyungoo/orgs",
            "repos_url": "https://api.github.com/users/hyungoo/repos",
            "events_url": "https://api.github.com/users/hyungoo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hyungoo/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Good point. Unfortunately, how RoutingState and reloadUpdatedForwardings work are significantly different: RoutingState builds a tree from already fetched Shard/Link/Forwardings data while reloadUpdatedForwardings access nameserver db for shard/link data as needed. I don't think those two would fit into a single class very well.\n\nI considered making another class for tree construction, but I think its logic is quite simple enough. I'll keep it as it is.\n",
        "created_at": "2012-03-14T20:52:05Z",
        "updated_at": "2012-03-15T05:25:14Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/92#discussion_r559898",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/92",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/559898"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/92#discussion_r559898"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/92"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/559947",
        "pull_request_review_id": null,
        "id": 559947,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTk0Nw==",
        "diff_hunk": "@@ -80,38 +83,68 @@ class NameServer(val shard: RoutingNode[ShardManagerSource], val mappingFunction\n     forwarder\n   }\n \n-  private def recreateInternalShardState() {\n-    val infos       = mutable.ArrayBuffer[ShardInfo]()\n-    val links       = mutable.ArrayBuffer[LinkInfo]()\n-    val forwardings = mutable.ArrayBuffer[Forwarding]()\n+  def reload() {\n+    log.info(\"Loading name server configuration...\")\n+    synchronized {\n+      shardManager.prepareReload()\n+\n+      val infos       = mutable.ArrayBuffer[ShardInfo]()\n+      val links       = mutable.ArrayBuffer[LinkInfo]()\n+      val forwardings = mutable.ArrayBuffer[Forwarding]()\n+      val (states, updatedSeq) = shardManager.currentState()\n+\n+      states foreach { state =>\n+        infos       ++= state.shards\n+        links       ++= state.links\n+        forwardings ++= state.forwardings\n+      }\n \n-    shardManager.currentState() foreach { state =>\n-      infos       ++= state.shards\n-      links       ++= state.links\n-      forwardings ++= state.forwardings\n-    }\n+      val routes = new RoutingState(\n+        shardRepository.instantiateNode,\n+        infos,\n+        links,\n+        forwardings\n+      )\n \n-    val routes = new RoutingState(\n-      shardRepository.instantiateNode,\n-      infos,\n-      links,\n-      forwardings\n-    )\n+      forwardingTree = routes.buildForwardingTree()\n+      lastUpdatedSeq = updatedSeq\n+    }\n+    log.info(\"Loading name server configuration is done.\")\n+  }\n \n-    forwardingTree = routes.buildForwardingTree()\n+  private def constructRoutingNode(shardId: ShardId, weight: Int = 1) : RoutingNode[Any] = {\n+    val shardInfo = shardManager.getShard(shardId)\n+    val children = shardManager.listDownwardLinks(shardId).map { link => constructRoutingNode(link.downId, link.weight) }\n+    shardRepository.instantiateNode(shardInfo, weight, children)\n   }\n \n   def reloadUpdatedForwardings() {\n     log.info(\"Loading updated name server configuration...\")\n-    recreateInternalShardState()\n-    log.info(\"Loading updated name server configuration is done.\")\n-  }\n+    synchronized {\n+      if (forwardingTree == null) throw new NameserverUninitialized\n+\n+      val changes: NameServerChanges = shardManager.diffState(lastUpdatedSeq)\n+      val updatedForwardingsByTableId = changes.updatedForwardings.groupBy(_.tableId)\n+      val deletedForwardingsByTableId = changes.deletedForwardings.groupBy(_.tableId)\n+      val tableIds = updatedForwardingsByTableId.keySet ++ deletedForwardingsByTableId.keySet\n+\n+      tableIds foreach { tableId =>\n+        val newTreeMap = forwardingTree.get(tableId) match {\n+          case null => new TreeMap[Long, RoutingNode[Any]]()\n+          case treeMap => new TreeMap[Long, RoutingNode[Any]](treeMap)  // create a shallow copy\n+        }\n+\n+        deletedForwardingsByTableId.get(tableId).getOrElse(Nil) foreach { f => newTreeMap.remove(f.baseId) }\n+        updatedForwardingsByTableId.get(tableId).getOrElse(Nil) foreach { f =>\n+          newTreeMap.put(f.baseId, constructRoutingNode(f.shardId))\n+        }\n+\n+        forwardingTree.put(tableId, newTreeMap)\n+      }\n \n-  def reload() {\n-    log.info(\"Loading name server configuration...\")\n-    shardManager.reload()\n-    recreateInternalShardState()\n-    log.info(\"Loading name server configuration is done.\")\n+      lastUpdatedSeq = changes.updatedSeq",
        "path": "src/main/scala/com/twitter/gizzard/nameserver/NameServer.scala",
        "position": 121,
        "original_position": 121,
        "commit_id": "c9938d4786761a7ccdb27a965140d7ec7a284678",
        "original_commit_id": "51dc1c20eda3143f98433cbfc115018b912baadd",
        "user": {
            "login": "hyungoo",
            "id": 1463608,
            "node_id": "MDQ6VXNlcjE0NjM2MDg=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1463608?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hyungoo",
            "html_url": "https://github.com/hyungoo",
            "followers_url": "https://api.github.com/users/hyungoo/followers",
            "following_url": "https://api.github.com/users/hyungoo/following{/other_user}",
            "gists_url": "https://api.github.com/users/hyungoo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hyungoo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hyungoo/subscriptions",
            "organizations_url": "https://api.github.com/users/hyungoo/orgs",
            "repos_url": "https://api.github.com/users/hyungoo/repos",
            "events_url": "https://api.github.com/users/hyungoo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hyungoo/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Diffs are not idempotent given the current implementation. If two diffs race with each other and if the one that started later (which should have newer data) finishes updating certain branches earlier, the one that started earlier (with relatively stale data) would overwrite the data.\n\nMaybe this could be made idempotent and/or thread-safe, but I don't think concurrency would be a big gain for the reload operations. I simply put synchronized blocks around the reload/reloadUpdatedForwardings methods to update them atomically.\n",
        "created_at": "2012-03-14T21:01:25Z",
        "updated_at": "2012-03-15T05:25:14Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/92#discussion_r559947",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/92",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/559947"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/92#discussion_r559947"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/92"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/559963",
        "pull_request_review_id": null,
        "id": 559963,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTk2Mw==",
        "diff_hunk": "@@ -0,0 +1,12 @@\n+package com.twitter.gizzard.nameserver\n+\n+/**\n+ * Changes to NameServer State\n+ *\n+ * @param updatedForwardings Forwarding entries that has been added or updated",
        "path": "src/main/scala/com/twitter/gizzard/nameserver/NameServerChanges.scala",
        "position": null,
        "original_position": 6,
        "commit_id": "c9938d4786761a7ccdb27a965140d7ec7a284678",
        "original_commit_id": "51dc1c20eda3143f98433cbfc115018b912baadd",
        "user": {
            "login": "hyungoo",
            "id": 1463608,
            "node_id": "MDQ6VXNlcjE0NjM2MDg=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1463608?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hyungoo",
            "html_url": "https://github.com/hyungoo",
            "followers_url": "https://api.github.com/users/hyungoo/followers",
            "following_url": "https://api.github.com/users/hyungoo/following{/other_user}",
            "gists_url": "https://api.github.com/users/hyungoo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hyungoo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hyungoo/subscriptions",
            "organizations_url": "https://api.github.com/users/hyungoo/orgs",
            "repos_url": "https://api.github.com/users/hyungoo/repos",
            "events_url": "https://api.github.com/users/hyungoo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hyungoo/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Done :)\n",
        "created_at": "2012-03-14T21:04:38Z",
        "updated_at": "2012-03-15T05:25:14Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/92#discussion_r559963",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/92",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/559963"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/92#discussion_r559963"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/92"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/560004",
        "pull_request_review_id": null,
        "id": 560004,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDAwNA==",
        "diff_hunk": "@@ -194,71 +194,28 @@ class SqlShardManagerSource(queryEvaluator: QueryEvaluator) extends ShardManager\n \n   // Forwardings/Shard Management Read Methods\n \n-  private def loadState() = dumpStructure(listTables)\n-\n-  private def updateState(state: Seq[NameServerState], updatedSequence: Long) = {\n-    import TreeUtils._\n-\n-    val oldForwardings = state.flatMap(_.forwardings).map(f => (f.tableId, f.baseId) -> f).toMap\n-    val oldLinks       = state.flatMap(_.links).toSet\n-    val oldLinksByUpId = mapOfSets(oldLinks)(_.upId)\n-    val oldShards      = state.flatMap(_.shards).map(s => s.id -> s).toMap\n-    val oldShardIds    = oldShards.keySet\n-\n-    val newForwardings     = mutable.Map[(Int,Long), Forwarding]()\n-    val deletedForwardings = mutable.Map[(Int,Long), Forwarding]()\n-\n-    queryEvaluator.select(\"SELECT * FROM forwardings WHERE updated_seq > ?\", updatedSequence) { row =>\n-      val f  = rowToForwarding(row)\n-      val fs = if (row.getBoolean(\"deleted\")) deletedForwardings else newForwardings\n-\n-      fs += (f.tableId, f.baseId) -> f\n-    }\n-\n-    val newRootIds  = newForwardings.map(_._2.shardId).toSet\n-    val newLinks    = descendantLinks(newRootIds)(listDownwardLinks)\n-    val newShardIds = newRootIds ++ newLinks.map(_.downId)\n-    val newShards   = newShardIds.toList.map(id => id -> getShard(id)).toMap\n-\n-    val purgeableRootIds  = newRootIds ++ deletedForwardings.map(_._2.shardId)\n-    val purgeableLinks    = descendantLinks(purgeableRootIds)(oldLinksByUpId)\n-    val purgeableShardIds = purgeableRootIds ++ purgeableLinks.map(_.downId)\n-\n-    val updatedForwardings = (oldForwardings -- deletedForwardings.keys) ++ newForwardings\n-    val updatedLinks       = (oldLinks -- purgeableLinks) ++ newLinks\n-    val updatedShards      = (oldShards -- purgeableShardIds) ++ newShards\n-\n-    val forwardingsByTableId = mapOfSets(updatedForwardings.map(_._2))(_.tableId)\n-    val linksByUpId          = mapOfSets(updatedLinks)(_.upId)\n-    val tableIds             = forwardingsByTableId.keySet\n-\n-    def extractor(id: Int) = NameServerState.extractTable(id)(forwardingsByTableId)(linksByUpId)(updatedShards)\n-\n-    tableIds.map(t => extractor(t)).toSeq\n-  }\n-\n-  @volatile private var _forwardingUpdatedSeq = 0L\n-  @volatile private var _currentState: Seq[NameServerState] = null\n-\n   private def latestUpdatedSeq() = {\n     val query = \"SELECT counter FROM update_counters WHERE id = 'forwardings'\"\n     queryEvaluator.selectOne(query)(_.getLong(\"counter\")).getOrElse(0L)\n   }\n \n-  def currentState() = {\n-    synchronized {\n-      val nextUpdatedSeq = latestUpdatedSeq()\n-\n-      if (_currentState eq null) {\n-        _currentState = loadState()\n-      } else {\n-        _currentState = updateState(_currentState, _forwardingUpdatedSeq)\n-      }\n+  def currentState() : (Seq[NameServerState], Long) = {\n+    val updatedSeq = latestUpdatedSeq()\n+    (dumpStructure(listTables), updatedSeq)\n+  }\n \n-      _forwardingUpdatedSeq = nextUpdatedSeq\n+  def diffState(lastUpdatedSeq: Long) : NameServerChanges = {\n+    val updatedForwardings = mutable.Buffer[Forwarding]()\n+    val deletedForwardings = mutable.Buffer[Forwarding]()\n+    val newUpdatedSeq = latestUpdatedSeq()\n \n-      _currentState\n+    queryEvaluator.select(\"SELECT * FROM forwardings WHERE updated_seq > ?\", lastUpdatedSeq) { row =>\n+      val f  = rowToForwarding(row)\n+      val buffer = if (row.getBoolean(\"deleted\")) deletedForwardings else updatedForwardings",
        "path": "src/main/scala/com/twitter/gizzard/nameserver/SqlShard.scala",
        "position": null,
        "original_position": 78,
        "commit_id": "c9938d4786761a7ccdb27a965140d7ec7a284678",
        "original_commit_id": "51dc1c20eda3143f98433cbfc115018b912baadd",
        "user": {
            "login": "hyungoo",
            "id": 1463608,
            "node_id": "MDQ6VXNlcjE0NjM2MDg=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1463608?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hyungoo",
            "html_url": "https://github.com/hyungoo",
            "followers_url": "https://api.github.com/users/hyungoo/followers",
            "following_url": "https://api.github.com/users/hyungoo/following{/other_user}",
            "gists_url": "https://api.github.com/users/hyungoo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hyungoo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hyungoo/subscriptions",
            "organizations_url": "https://api.github.com/users/hyungoo/orgs",
            "repos_url": "https://api.github.com/users/hyungoo/repos",
            "events_url": "https://api.github.com/users/hyungoo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hyungoo/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Great point. I had to check this earlier too and forwardings table uses (table_id, base_source_id)  as its primary key so there will be at most one row per each forwarding. I'll add some comments to clarify it.\n",
        "created_at": "2012-03-14T21:10:35Z",
        "updated_at": "2012-03-15T05:25:14Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/92#discussion_r560004",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/92",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/560004"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/92#discussion_r560004"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/92"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/560054",
        "pull_request_review_id": null,
        "id": 560054,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDA1NA==",
        "diff_hunk": "@@ -80,38 +83,68 @@ class NameServer(val shard: RoutingNode[ShardManagerSource], val mappingFunction\n     forwarder\n   }\n \n-  private def recreateInternalShardState() {\n-    val infos       = mutable.ArrayBuffer[ShardInfo]()\n-    val links       = mutable.ArrayBuffer[LinkInfo]()\n-    val forwardings = mutable.ArrayBuffer[Forwarding]()\n+  def reload() {\n+    log.info(\"Loading name server configuration...\")\n+    synchronized {\n+      shardManager.prepareReload()\n+\n+      val infos       = mutable.ArrayBuffer[ShardInfo]()\n+      val links       = mutable.ArrayBuffer[LinkInfo]()\n+      val forwardings = mutable.ArrayBuffer[Forwarding]()\n+      val (states, updatedSeq) = shardManager.currentState()\n+\n+      states foreach { state =>\n+        infos       ++= state.shards\n+        links       ++= state.links\n+        forwardings ++= state.forwardings\n+      }\n \n-    shardManager.currentState() foreach { state =>\n-      infos       ++= state.shards\n-      links       ++= state.links\n-      forwardings ++= state.forwardings\n-    }\n+      val routes = new RoutingState(\n+        shardRepository.instantiateNode,\n+        infos,\n+        links,\n+        forwardings\n+      )\n \n-    val routes = new RoutingState(\n-      shardRepository.instantiateNode,\n-      infos,\n-      links,\n-      forwardings\n-    )\n+      forwardingTree = routes.buildForwardingTree()\n+      lastUpdatedSeq = updatedSeq\n+    }\n+    log.info(\"Loading name server configuration is done.\")\n+  }\n \n-    forwardingTree = routes.buildForwardingTree()\n+  private def constructRoutingNode(shardId: ShardId, weight: Int = 1) : RoutingNode[Any] = {\n+    val shardInfo = shardManager.getShard(shardId)\n+    val children = shardManager.listDownwardLinks(shardId).map { link => constructRoutingNode(link.downId, link.weight) }\n+    shardRepository.instantiateNode(shardInfo, weight, children)\n   }\n \n   def reloadUpdatedForwardings() {\n     log.info(\"Loading updated name server configuration...\")\n-    recreateInternalShardState()\n-    log.info(\"Loading updated name server configuration is done.\")\n-  }\n+    synchronized {\n+      if (forwardingTree == null) throw new NameserverUninitialized\n+\n+      val changes: NameServerChanges = shardManager.diffState(lastUpdatedSeq)\n+      val updatedForwardingsByTableId = changes.updatedForwardings.groupBy(_.tableId)\n+      val deletedForwardingsByTableId = changes.deletedForwardings.groupBy(_.tableId)\n+      val tableIds = updatedForwardingsByTableId.keySet ++ deletedForwardingsByTableId.keySet\n+\n+      tableIds foreach { tableId =>",
        "path": "src/main/scala/com/twitter/gizzard/nameserver/NameServer.scala",
        "position": 102,
        "original_position": 102,
        "commit_id": "c9938d4786761a7ccdb27a965140d7ec7a284678",
        "original_commit_id": "51dc1c20eda3143f98433cbfc115018b912baadd",
        "user": {
            "login": "stuhood",
            "id": 46740,
            "node_id": "MDQ6VXNlcjQ2NzQw",
            "avatar_url": "https://avatars1.githubusercontent.com/u/46740?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/stuhood",
            "html_url": "https://github.com/stuhood",
            "followers_url": "https://api.github.com/users/stuhood/followers",
            "following_url": "https://api.github.com/users/stuhood/following{/other_user}",
            "gists_url": "https://api.github.com/users/stuhood/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/stuhood/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/stuhood/subscriptions",
            "organizations_url": "https://api.github.com/users/stuhood/orgs",
            "repos_url": "https://api.github.com/users/stuhood/repos",
            "events_url": "https://api.github.com/users/stuhood/events{/privacy}",
            "received_events_url": "https://api.github.com/users/stuhood/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Well, the boundary could be that you give a 'NameServerChanges' object and the current tree to a RoutingState method, and get back a new tree. Either way is fine I guess.\n",
        "created_at": "2012-03-14T21:20:32Z",
        "updated_at": "2012-03-15T05:25:14Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/92#discussion_r560054",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/92",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/560054"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/92#discussion_r560054"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/92"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/560061",
        "pull_request_review_id": null,
        "id": 560061,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDA2MQ==",
        "diff_hunk": "@@ -194,71 +194,28 @@ class SqlShardManagerSource(queryEvaluator: QueryEvaluator) extends ShardManager\n \n   // Forwardings/Shard Management Read Methods\n \n-  private def loadState() = dumpStructure(listTables)\n-\n-  private def updateState(state: Seq[NameServerState], updatedSequence: Long) = {\n-    import TreeUtils._\n-\n-    val oldForwardings = state.flatMap(_.forwardings).map(f => (f.tableId, f.baseId) -> f).toMap\n-    val oldLinks       = state.flatMap(_.links).toSet\n-    val oldLinksByUpId = mapOfSets(oldLinks)(_.upId)\n-    val oldShards      = state.flatMap(_.shards).map(s => s.id -> s).toMap\n-    val oldShardIds    = oldShards.keySet\n-\n-    val newForwardings     = mutable.Map[(Int,Long), Forwarding]()\n-    val deletedForwardings = mutable.Map[(Int,Long), Forwarding]()\n-\n-    queryEvaluator.select(\"SELECT * FROM forwardings WHERE updated_seq > ?\", updatedSequence) { row =>\n-      val f  = rowToForwarding(row)\n-      val fs = if (row.getBoolean(\"deleted\")) deletedForwardings else newForwardings\n-\n-      fs += (f.tableId, f.baseId) -> f\n-    }\n-\n-    val newRootIds  = newForwardings.map(_._2.shardId).toSet\n-    val newLinks    = descendantLinks(newRootIds)(listDownwardLinks)\n-    val newShardIds = newRootIds ++ newLinks.map(_.downId)\n-    val newShards   = newShardIds.toList.map(id => id -> getShard(id)).toMap\n-\n-    val purgeableRootIds  = newRootIds ++ deletedForwardings.map(_._2.shardId)\n-    val purgeableLinks    = descendantLinks(purgeableRootIds)(oldLinksByUpId)\n-    val purgeableShardIds = purgeableRootIds ++ purgeableLinks.map(_.downId)\n-\n-    val updatedForwardings = (oldForwardings -- deletedForwardings.keys) ++ newForwardings\n-    val updatedLinks       = (oldLinks -- purgeableLinks) ++ newLinks\n-    val updatedShards      = (oldShards -- purgeableShardIds) ++ newShards\n-\n-    val forwardingsByTableId = mapOfSets(updatedForwardings.map(_._2))(_.tableId)\n-    val linksByUpId          = mapOfSets(updatedLinks)(_.upId)\n-    val tableIds             = forwardingsByTableId.keySet\n-\n-    def extractor(id: Int) = NameServerState.extractTable(id)(forwardingsByTableId)(linksByUpId)(updatedShards)\n-\n-    tableIds.map(t => extractor(t)).toSeq\n-  }\n-\n-  @volatile private var _forwardingUpdatedSeq = 0L\n-  @volatile private var _currentState: Seq[NameServerState] = null\n-\n   private def latestUpdatedSeq() = {\n     val query = \"SELECT counter FROM update_counters WHERE id = 'forwardings'\"\n     queryEvaluator.selectOne(query)(_.getLong(\"counter\")).getOrElse(0L)\n   }\n \n-  def currentState() = {\n-    synchronized {\n-      val nextUpdatedSeq = latestUpdatedSeq()\n-\n-      if (_currentState eq null) {\n-        _currentState = loadState()\n-      } else {\n-        _currentState = updateState(_currentState, _forwardingUpdatedSeq)\n-      }\n+  def currentState() : (Seq[NameServerState], Long) = {\n+    val updatedSeq = latestUpdatedSeq()\n+    (dumpStructure(listTables), updatedSeq)\n+  }\n \n-      _forwardingUpdatedSeq = nextUpdatedSeq\n+  def diffState(lastUpdatedSeq: Long) : NameServerChanges = {\n+    val updatedForwardings = mutable.Buffer[Forwarding]()\n+    val deletedForwardings = mutable.Buffer[Forwarding]()\n+    val newUpdatedSeq = latestUpdatedSeq()\n \n-      _currentState\n+    queryEvaluator.select(\"SELECT * FROM forwardings WHERE updated_seq > ?\", lastUpdatedSeq) { row =>\n+      val f  = rowToForwarding(row)\n+      val buffer = if (row.getBoolean(\"deleted\")) deletedForwardings else updatedForwardings",
        "path": "src/main/scala/com/twitter/gizzard/nameserver/SqlShard.scala",
        "position": null,
        "original_position": 78,
        "commit_id": "c9938d4786761a7ccdb27a965140d7ec7a284678",
        "original_commit_id": "51dc1c20eda3143f98433cbfc115018b912baadd",
        "user": {
            "login": "stuhood",
            "id": 46740,
            "node_id": "MDQ6VXNlcjQ2NzQw",
            "avatar_url": "https://avatars1.githubusercontent.com/u/46740?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/stuhood",
            "html_url": "https://github.com/stuhood",
            "followers_url": "https://api.github.com/users/stuhood/followers",
            "following_url": "https://api.github.com/users/stuhood/following{/other_user}",
            "gists_url": "https://api.github.com/users/stuhood/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/stuhood/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/stuhood/subscriptions",
            "organizations_url": "https://api.github.com/users/stuhood/orgs",
            "repos_url": "https://api.github.com/users/stuhood/repos",
            "events_url": "https://api.github.com/users/stuhood/events{/privacy}",
            "received_events_url": "https://api.github.com/users/stuhood/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Excellent.\n",
        "created_at": "2012-03-14T21:21:34Z",
        "updated_at": "2012-03-15T05:25:14Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/92#discussion_r560061",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/92",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/560061"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/92#discussion_r560061"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/92"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/560120",
        "pull_request_review_id": null,
        "id": 560120,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDEyMA==",
        "diff_hunk": "@@ -128,5 +130,60 @@ object NameServerSpec extends ConfiguredSpecification with JMocker with ClassMoc\n       }\n       nameServer.shardManager.createAndMaterializeShard(shardInfos(0)) mustNot throwA[InvalidShard]\n     }\n+\n+    \"reload nameserver configuration\" in {",
        "path": "src/test/scala/com/twitter/gizzard/nameserver/NameServerSpec.scala",
        "position": 40,
        "original_position": 40,
        "commit_id": "c9938d4786761a7ccdb27a965140d7ec7a284678",
        "original_commit_id": "51dc1c20eda3143f98433cbfc115018b912baadd",
        "user": {
            "login": "hyungoo",
            "id": 1463608,
            "node_id": "MDQ6VXNlcjE0NjM2MDg=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1463608?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hyungoo",
            "html_url": "https://github.com/hyungoo",
            "followers_url": "https://api.github.com/users/hyungoo/followers",
            "following_url": "https://api.github.com/users/hyungoo/following{/other_user}",
            "gists_url": "https://api.github.com/users/hyungoo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hyungoo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hyungoo/subscriptions",
            "organizations_url": "https://api.github.com/users/hyungoo/orgs",
            "repos_url": "https://api.github.com/users/hyungoo/repos",
            "events_url": "https://api.github.com/users/hyungoo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hyungoo/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Done!\n",
        "created_at": "2012-03-14T21:30:19Z",
        "updated_at": "2012-03-15T05:25:14Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/92#discussion_r560120",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/92",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/560120"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/92#discussion_r560120"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/92"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/560182",
        "pull_request_review_id": null,
        "id": 560182,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDE4Mg==",
        "diff_hunk": "@@ -0,0 +1,12 @@\n+package com.twitter.gizzard.nameserver\n+\n+/**\n+ * Changes to NameServer State\n+ *\n+ * @param updatedForwardings Forwarding entries that has been added or updated\n+ * @param deletedForwardings Forwarding entries that has been marked \"deleted\"\n+ * @param updatedSeq         This class contains all the changes up to this updatedSeq and possibly more",
        "path": "src/main/scala/com/twitter/gizzard/nameserver/NameServerChanges.scala",
        "position": null,
        "original_position": 8,
        "commit_id": "c9938d4786761a7ccdb27a965140d7ec7a284678",
        "original_commit_id": "51dc1c20eda3143f98433cbfc115018b912baadd",
        "user": {
            "login": "hyungoo",
            "id": 1463608,
            "node_id": "MDQ6VXNlcjE0NjM2MDg=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1463608?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hyungoo",
            "html_url": "https://github.com/hyungoo",
            "followers_url": "https://api.github.com/users/hyungoo/followers",
            "following_url": "https://api.github.com/users/hyungoo/following{/other_user}",
            "gists_url": "https://api.github.com/users/hyungoo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hyungoo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hyungoo/subscriptions",
            "organizations_url": "https://api.github.com/users/hyungoo/orgs",
            "repos_url": "https://api.github.com/users/hyungoo/repos",
            "events_url": "https://api.github.com/users/hyungoo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hyungoo/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Done.\n",
        "created_at": "2012-03-14T21:37:27Z",
        "updated_at": "2012-03-15T05:25:14Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/92#discussion_r560182",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/92",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/560182"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/92#discussion_r560182"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/92"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/587282",
        "pull_request_review_id": null,
        "id": 587282,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzI4Mg==",
        "diff_hunk": "@@ -57,9 +57,23 @@ object Stats extends FilteredStatsProvider(OStats) {\n     (rv, t)\n   }\n \n-  private val tl = new ThreadLocal[mutable.Stack[TransactionalStatsProvider]] {\n-    override def initialValue() = new mutable.Stack[TransactionalStatsProvider]()\n+  // We use a com.twitter.util.Local instead of a ThreadLocal to hold our transaction\n+  // stack so it can be threaded through a Future-based execution context.\n+  private val localTransStack = new Local[mutable.Stack[TransactionalStatsProvider]]\n+\n+  // Initialize our transaction stack on the current thread if it hasn't already been.\n+  private def transStack = {\n+    val stackOpt = localTransStack()",
        "path": "src/main/scala/com/twitter/gizzard/Stats.scala",
        "position": null,
        "original_position": 46,
        "commit_id": "e6259e55fb8de1191ab421768afd6bd0e6414790",
        "original_commit_id": "aeca99f704978f1d6fcff4b5fead12c3e1929b2a",
        "user": {
            "login": "stuhood",
            "id": 46740,
            "node_id": "MDQ6VXNlcjQ2NzQw",
            "avatar_url": "https://avatars1.githubusercontent.com/u/46740?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/stuhood",
            "html_url": "https://github.com/stuhood",
            "followers_url": "https://api.github.com/users/stuhood/followers",
            "following_url": "https://api.github.com/users/stuhood/following{/other_user}",
            "gists_url": "https://api.github.com/users/stuhood/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/stuhood/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/stuhood/subscriptions",
            "organizations_url": "https://api.github.com/users/stuhood/orgs",
            "repos_url": "https://api.github.com/users/stuhood/repos",
            "events_url": "https://api.github.com/users/stuhood/events{/privacy}",
            "received_events_url": "https://api.github.com/users/stuhood/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This is a good time for 'getOrElse { ...None-block... }'.\n",
        "created_at": "2012-03-21T19:38:00Z",
        "updated_at": "2012-03-21T20:26:40Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/95#discussion_r587282",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/95",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/587282"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/95#discussion_r587282"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/95"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/587518",
        "pull_request_review_id": null,
        "id": 587518,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzUxOA==",
        "diff_hunk": "@@ -57,9 +57,23 @@ object Stats extends FilteredStatsProvider(OStats) {\n     (rv, t)\n   }\n \n-  private val tl = new ThreadLocal[mutable.Stack[TransactionalStatsProvider]] {\n-    override def initialValue() = new mutable.Stack[TransactionalStatsProvider]()\n+  // We use a com.twitter.util.Local instead of a ThreadLocal to hold our transaction\n+  // stack so it can be threaded through a Future-based execution context.\n+  private val localTransStack = new Local[mutable.Stack[TransactionalStatsProvider]]\n+\n+  // Initialize our transaction stack on the current thread if it hasn't already been.\n+  private def transStack = {\n+    val stackOpt = localTransStack()",
        "path": "src/main/scala/com/twitter/gizzard/Stats.scala",
        "position": null,
        "original_position": 46,
        "commit_id": "e6259e55fb8de1191ab421768afd6bd0e6414790",
        "original_commit_id": "aeca99f704978f1d6fcff4b5fead12c3e1929b2a",
        "user": {
            "login": "rvpgithub",
            "id": 585641,
            "node_id": "MDQ6VXNlcjU4NTY0MQ==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/585641?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rvpgithub",
            "html_url": "https://github.com/rvpgithub",
            "followers_url": "https://api.github.com/users/rvpgithub/followers",
            "following_url": "https://api.github.com/users/rvpgithub/following{/other_user}",
            "gists_url": "https://api.github.com/users/rvpgithub/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rvpgithub/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rvpgithub/subscriptions",
            "organizations_url": "https://api.github.com/users/rvpgithub/orgs",
            "repos_url": "https://api.github.com/users/rvpgithub/repos",
            "events_url": "https://api.github.com/users/rvpgithub/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rvpgithub/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Done.\n",
        "created_at": "2012-03-21T20:26:46Z",
        "updated_at": "2012-03-21T20:26:46Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/95#discussion_r587518",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/95",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/587518"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/95#discussion_r587518"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/95"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/593790",
        "pull_request_review_id": null,
        "id": 593790,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Mzc5MA==",
        "diff_hunk": "@@ -142,50 +142,56 @@ extends Process with JobConsumer {\n \n   // hook to let unit tests stub out threads.\n   protected def processWork() {\n-    process()\n+      process()\n   }\n \n   def process() {\n-    queue.get.foreach { ticket =>\n-      _activeThreads.incrementAndGet()\n-      try {\n-        val job = ticket.job\n+    try {\n+      queue.get.foreach { ticket =>\n+        _activeThreads.incrementAndGet()\n         try {\n-          if (isReplicated && job.shouldReplicate && !job.wasReplicated) {\n-            jobAsyncReplicator.enqueue(job.toJsonBytes)\n-            job.setReplicated()\n-          }\n-          job()\n-          Stats.incr(\"job-success-count\")\n-        } catch {\n-          case e: ShardBlackHoleException => Stats.incr(\"job-blackholed-count\")\n-          case e: ShardOfflineException =>\n-            Stats.incr(\"job-blocked-count\")\n-            errorQueue.put(job)\n-          case e: BadJsonJobException =>\n-            badJobQueue.put(job)\n-            Logger.get(\"bad_jobs\").error(job.toString)\n-            Stats.incr(\"job-bad-count\")\n-          case e =>\n-            Stats.incr(\"job-error-count\")\n-            exceptionLog.error(e, \"Job: %s\", job)\n-            job.errorCount += 1\n-            job.errorMessage = e.toString\n-            if (job.errorCount > errorLimit) {\n+          val job = ticket.job\n+          try {\n+            if (isReplicated && job.shouldReplicate && !job.wasReplicated) {\n+              jobAsyncReplicator.enqueue(job.toJsonBytes)\n+              job.setReplicated()\n+            }\n+            job()\n+            Stats.incr(\"job-success-count\")\n+          } catch {\n+            case e: ShardBlackHoleException => Stats.incr(\"job-blackholed-count\")\n+            case e: ShardOfflineException =>\n+              Stats.incr(\"job-blocked-count\")\n+              errorQueue.put(job)\n+            case e: BadJsonJobException =>\n               badJobQueue.put(job)\n               Logger.get(\"bad_jobs\").error(job.toString)\n               Stats.incr(\"job-bad-count\")\n-            } else {\n-              errorQueue.put(job)\n-            }\n-        }\n-        job.nextJob match {\n-          case None => ticket.ack()\n-          case _    => ticket.continue(job.nextJob.get)\n+            case e =>\n+              Stats.incr(\"job-error-count\")\n+              exceptionLog.error(e, \"Job: %s\", job)\n+              job.errorCount += 1\n+              job.errorMessage = e.toString\n+              if (job.errorCount > errorLimit) {\n+                badJobQueue.put(job)\n+                Logger.get(\"bad_jobs\").error(job.toString)\n+                Stats.incr(\"job-bad-count\")\n+              } else {\n+                errorQueue.put(job)\n+              }\n+          }\n+          job.nextJob match {\n+            case None => ticket.ack()\n+            case _    => ticket.continue(job.nextJob.get)\n+          }\n+        } finally {\n+          _activeThreads.decrementAndGet()\n         }\n-      } finally {\n-        _activeThreads.decrementAndGet()\n       }\n+    } catch {\n+      case e =>\n+        log.error(e, \"Uncaught exception in gizzard worker thread\")\n+        Stats.incr(\"uncaught-exceptions\")",
        "path": "src/main/scala/com/twitter/gizzard/scheduler/JobScheduler.scala",
        "position": null,
        "original_position": 88,
        "commit_id": "b2bf11b1f808201631834d63f1a2034d388a0260",
        "original_commit_id": "dd690db4c9d4b8b39418b1638be9019c96da432e",
        "user": {
            "login": "rvpgithub",
            "id": 585641,
            "node_id": "MDQ6VXNlcjU4NTY0MQ==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/585641?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rvpgithub",
            "html_url": "https://github.com/rvpgithub",
            "followers_url": "https://api.github.com/users/rvpgithub/followers",
            "following_url": "https://api.github.com/users/rvpgithub/following{/other_user}",
            "gists_url": "https://api.github.com/users/rvpgithub/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rvpgithub/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rvpgithub/subscriptions",
            "organizations_url": "https://api.github.com/users/rvpgithub/orgs",
            "repos_url": "https://api.github.com/users/rvpgithub/repos",
            "events_url": "https://api.github.com/users/rvpgithub/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rvpgithub/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Maybe job-scheduler-uncaught-exceptions?\n",
        "created_at": "2012-03-22T22:16:43Z",
        "updated_at": "2012-03-22T22:23:16Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/96#discussion_r593790",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/96",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/593790"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/96#discussion_r593790"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/96"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/593812",
        "pull_request_review_id": null,
        "id": 593812,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MzgxMg==",
        "diff_hunk": "@@ -142,50 +142,56 @@ extends Process with JobConsumer {\n \n   // hook to let unit tests stub out threads.\n   protected def processWork() {\n-    process()\n+      process()\n   }\n \n   def process() {\n-    queue.get.foreach { ticket =>\n-      _activeThreads.incrementAndGet()\n-      try {\n-        val job = ticket.job\n+    try {\n+      queue.get.foreach { ticket =>\n+        _activeThreads.incrementAndGet()\n         try {\n-          if (isReplicated && job.shouldReplicate && !job.wasReplicated) {\n-            jobAsyncReplicator.enqueue(job.toJsonBytes)\n-            job.setReplicated()\n-          }\n-          job()\n-          Stats.incr(\"job-success-count\")\n-        } catch {\n-          case e: ShardBlackHoleException => Stats.incr(\"job-blackholed-count\")\n-          case e: ShardOfflineException =>\n-            Stats.incr(\"job-blocked-count\")\n-            errorQueue.put(job)\n-          case e: BadJsonJobException =>\n-            badJobQueue.put(job)\n-            Logger.get(\"bad_jobs\").error(job.toString)\n-            Stats.incr(\"job-bad-count\")\n-          case e =>\n-            Stats.incr(\"job-error-count\")\n-            exceptionLog.error(e, \"Job: %s\", job)\n-            job.errorCount += 1\n-            job.errorMessage = e.toString\n-            if (job.errorCount > errorLimit) {\n+          val job = ticket.job\n+          try {\n+            if (isReplicated && job.shouldReplicate && !job.wasReplicated) {\n+              jobAsyncReplicator.enqueue(job.toJsonBytes)\n+              job.setReplicated()\n+            }\n+            job()\n+            Stats.incr(\"job-success-count\")\n+          } catch {\n+            case e: ShardBlackHoleException => Stats.incr(\"job-blackholed-count\")\n+            case e: ShardOfflineException =>\n+              Stats.incr(\"job-blocked-count\")\n+              errorQueue.put(job)\n+            case e: BadJsonJobException =>\n               badJobQueue.put(job)\n               Logger.get(\"bad_jobs\").error(job.toString)\n               Stats.incr(\"job-bad-count\")\n-            } else {\n-              errorQueue.put(job)\n-            }\n-        }\n-        job.nextJob match {\n-          case None => ticket.ack()\n-          case _    => ticket.continue(job.nextJob.get)\n+            case e =>\n+              Stats.incr(\"job-error-count\")\n+              exceptionLog.error(e, \"Job: %s\", job)\n+              job.errorCount += 1\n+              job.errorMessage = e.toString\n+              if (job.errorCount > errorLimit) {\n+                badJobQueue.put(job)\n+                Logger.get(\"bad_jobs\").error(job.toString)\n+                Stats.incr(\"job-bad-count\")\n+              } else {\n+                errorQueue.put(job)\n+              }\n+          }\n+          job.nextJob match {\n+            case None => ticket.ack()\n+            case _    => ticket.continue(job.nextJob.get)\n+          }\n+        } finally {\n+          _activeThreads.decrementAndGet()\n         }\n-      } finally {\n-        _activeThreads.decrementAndGet()\n       }\n+    } catch {\n+      case e =>\n+        log.error(e, \"Uncaught exception in gizzard worker thread\")\n+        Stats.incr(\"uncaught-exceptions\")",
        "path": "src/main/scala/com/twitter/gizzard/scheduler/JobScheduler.scala",
        "position": null,
        "original_position": 88,
        "commit_id": "b2bf11b1f808201631834d63f1a2034d388a0260",
        "original_commit_id": "dd690db4c9d4b8b39418b1638be9019c96da432e",
        "user": {
            "login": "jcorwin",
            "id": 223253,
            "node_id": "MDQ6VXNlcjIyMzI1Mw==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/223253?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jcorwin",
            "html_url": "https://github.com/jcorwin",
            "followers_url": "https://api.github.com/users/jcorwin/followers",
            "following_url": "https://api.github.com/users/jcorwin/following{/other_user}",
            "gists_url": "https://api.github.com/users/jcorwin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jcorwin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jcorwin/subscriptions",
            "organizations_url": "https://api.github.com/users/jcorwin/orgs",
            "repos_url": "https://api.github.com/users/jcorwin/repos",
            "events_url": "https://api.github.com/users/jcorwin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jcorwin/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yeah, that would be more informative.\n",
        "created_at": "2012-03-22T22:20:59Z",
        "updated_at": "2012-03-22T22:23:16Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/96#discussion_r593812",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/96",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/593812"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/96#discussion_r593812"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/96"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/606660",
        "pull_request_review_id": null,
        "id": 606660,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjY2MA==",
        "diff_hunk": "@@ -82,6 +88,7 @@ class JobAsyncReplicator(jobRelay: => JobRelay, queueConfig: QueueConfig, queueR\n       qs.values foreach { _.setup }\n \n       for (c <- qs.keys; i <- 0 until threadsPerCluster) {\n+        log.info(\"Starting processor [%d/%d] for cluster %s\", i + 1, threadsPerCluster, c)",
        "path": "src/main/scala/com/twitter/gizzard/scheduler/JobAsyncReplicator.scala",
        "position": 36,
        "original_position": 36,
        "commit_id": "0e0b2a1217f2bcfd1859110ab24dcab0109db75f",
        "original_commit_id": "00a27859bcd0d9d5a14f95dd43f4b43dee2a9910",
        "user": {
            "login": "stuhood",
            "id": 46740,
            "node_id": "MDQ6VXNlcjQ2NzQw",
            "avatar_url": "https://avatars1.githubusercontent.com/u/46740?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/stuhood",
            "html_url": "https://github.com/stuhood",
            "followers_url": "https://api.github.com/users/stuhood/followers",
            "following_url": "https://api.github.com/users/stuhood/following{/other_user}",
            "gists_url": "https://api.github.com/users/stuhood/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/stuhood/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/stuhood/subscriptions",
            "organizations_url": "https://api.github.com/users/stuhood/orgs",
            "repos_url": "https://api.github.com/users/stuhood/repos",
            "events_url": "https://api.github.com/users/stuhood/events{/privacy}",
            "received_events_url": "https://api.github.com/users/stuhood/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Is there something bulletproof protecting a thread in this pool from ever dieing?\n",
        "created_at": "2012-03-27T00:32:23Z",
        "updated_at": "2012-03-27T00:46:42Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/97#discussion_r606660",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/97",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/606660"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/97#discussion_r606660"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/97"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/606689",
        "pull_request_review_id": null,
        "id": 606689,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjY4OQ==",
        "diff_hunk": "@@ -82,6 +88,7 @@ class JobAsyncReplicator(jobRelay: => JobRelay, queueConfig: QueueConfig, queueR\n       qs.values foreach { _.setup }\n \n       for (c <- qs.keys; i <- 0 until threadsPerCluster) {\n+        log.info(\"Starting processor [%d/%d] for cluster %s\", i + 1, threadsPerCluster, c)",
        "path": "src/main/scala/com/twitter/gizzard/scheduler/JobAsyncReplicator.scala",
        "position": 36,
        "original_position": 36,
        "commit_id": "0e0b2a1217f2bcfd1859110ab24dcab0109db75f",
        "original_commit_id": "00a27859bcd0d9d5a14f95dd43f4b43dee2a9910",
        "user": {
            "login": "stuhood",
            "id": 46740,
            "node_id": "MDQ6VXNlcjQ2NzQw",
            "avatar_url": "https://avatars1.githubusercontent.com/u/46740?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/stuhood",
            "html_url": "https://github.com/stuhood",
            "followers_url": "https://api.github.com/users/stuhood/followers",
            "following_url": "https://api.github.com/users/stuhood/following{/other_user}",
            "gists_url": "https://api.github.com/users/stuhood/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/stuhood/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/stuhood/subscriptions",
            "organizations_url": "https://api.github.com/users/stuhood/orgs",
            "repos_url": "https://api.github.com/users/stuhood/repos",
            "events_url": "https://api.github.com/users/stuhood/events{/privacy}",
            "received_events_url": "https://api.github.com/users/stuhood/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "...yes, there is.\n",
        "created_at": "2012-03-27T00:40:04Z",
        "updated_at": "2012-03-27T00:46:43Z",
        "html_url": "https://github.com/twitter-archive/gizzard/pull/97#discussion_r606689",
        "pull_request_url": "https://api.github.com/repos/twitter-archive/gizzard/pulls/97",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/comments/606689"
            },
            "html": {
                "href": "https://github.com/twitter-archive/gizzard/pull/97#discussion_r606689"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/twitter-archive/gizzard/pulls/97"
            }
        }
    }
]