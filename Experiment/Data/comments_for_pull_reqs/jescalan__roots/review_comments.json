[
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/2955894",
        "pull_request_review_id": null,
        "id": 2955894,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5NTU4OTQ=",
        "diff_hunk": "@@ -1,15 +1,13 @@\n var fs = require('fs'),\n     readdirp = require('readdirp'),\n     _ = require('underscore'),\n-    lastChange = Math.floor((new Date).getTime()), // sam: is this variable used anywhere?\n+    lastChange = Math.floor((new Date()).getTime()), // sam: is this variable used anywhere?",
        "path": "lib/watcher.js",
        "position": 5,
        "original_position": 5,
        "commit_id": "34cedc90b9de3ac1e145a46e66d435be16ce9d8e",
        "original_commit_id": "dd2944bee5b71ac97da051360c4815ccd94f8026",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "this is redundant.... no need for () since you are using new\n",
        "created_at": "2013-02-10T19:58:29Z",
        "updated_at": "2013-02-10T23:09:57Z",
        "html_url": "https://github.com/jescalan/roots/pull/94#discussion_r2955894",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/94",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/2955894"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/94#discussion_r2955894"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/94"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/2955897",
        "pull_request_review_id": null,
        "id": 2955897,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5NTU4OTc=",
        "diff_hunk": "@@ -20,12 +18,15 @@ function watch_directory(dir, cb, partial) {\n   });\n \n   // sam: what is `partial`? would it ever be present? i don't think we're using it...\n-  !partial && setInterval(function(){ check_directories(cb) }, check_dir_pause);\n+  !partial && setInterval(",
        "path": "lib/watcher.js",
        "position": 22,
        "original_position": 22,
        "commit_id": "34cedc90b9de3ac1e145a46e66d435be16ce9d8e",
        "original_commit_id": "dd2944bee5b71ac97da051360c4815ccd94f8026",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "yuck i do not like like the return here\n",
        "created_at": "2013-02-10T19:58:56Z",
        "updated_at": "2013-02-10T23:09:57Z",
        "html_url": "https://github.com/jescalan/roots/pull/94#discussion_r2955897",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/94",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/2955897"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/94#discussion_r2955897"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/94"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/3405041",
        "pull_request_review_id": null,
        "id": 3405041,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MDUwNDE=",
        "diff_hunk": "@@ -0,0 +1,40 @@\n+var path = require('path'),\n+    fs = require('fs'),\n+    colors = require('colors'),\n+    run = require('child_process').exec,\n+    shell = require('shelljs');\n+\n+var ghpages = module.exports = {};\n+\n+var gh_helper = {}\n+\n+gh_helper.find_repo = function(repo_name) {\n+\n+}\n+\n+ghpages.create_project = function(cb){\n+  // if there's a gh-pages branch, we're ready to rawk\n+  if (shell.exec('git branch -r | grep gh-pages').output === ''){\n+    console.log('creating gh-pages banch...'.grey);\n+    var cmd = shell.exec('git checkout --orphan gh-pages');",
        "path": "lib/deploy_recipes/gh-pages.js",
        "position": null,
        "original_position": 19,
        "commit_id": "9cfba72caa5719d2054d1c76b10e765baa8f56a1",
        "original_commit_id": "82649fb88fa1b25a7174dafd85b99655287e4894",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "this is going to checkout whatever branch you were on before you did the deploy\n",
        "created_at": "2013-03-17T08:22:39Z",
        "updated_at": "2013-03-21T02:53:04Z",
        "html_url": "https://github.com/jescalan/roots/pull/116#discussion_r3405041",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/116",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/3405041"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/116#discussion_r3405041"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/116"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/3405042",
        "pull_request_review_id": null,
        "id": 3405042,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MDUwNDI=",
        "diff_hunk": "@@ -0,0 +1,40 @@\n+var path = require('path'),\n+    fs = require('fs'),\n+    colors = require('colors'),\n+    run = require('child_process').exec,\n+    shell = require('shelljs');\n+\n+var ghpages = module.exports = {};\n+\n+var gh_helper = {}\n+\n+gh_helper.find_repo = function(repo_name) {\n+\n+}\n+\n+ghpages.create_project = function(cb){\n+  // if there's a gh-pages branch, we're ready to rawk\n+  if (shell.exec('git branch -r | grep gh-pages').output === ''){\n+    console.log('creating gh-pages banch...'.grey);",
        "path": "lib/deploy_recipes/gh-pages.js",
        "position": null,
        "original_position": 18,
        "commit_id": "9cfba72caa5719d2054d1c76b10e765baa8f56a1",
        "original_commit_id": "82649fb88fa1b25a7174dafd85b99655287e4894",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "banch === branch\n",
        "created_at": "2013-03-17T08:22:48Z",
        "updated_at": "2013-03-21T02:53:04Z",
        "html_url": "https://github.com/jescalan/roots/pull/116#discussion_r3405042",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/116",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/3405042"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/116#discussion_r3405042"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/116"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/3405583",
        "pull_request_review_id": null,
        "id": 3405583,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MDU1ODM=",
        "diff_hunk": "@@ -0,0 +1,40 @@\n+var path = require('path'),\n+    fs = require('fs'),\n+    colors = require('colors'),\n+    run = require('child_process').exec,\n+    shell = require('shelljs');\n+\n+var ghpages = module.exports = {};\n+\n+var gh_helper = {}\n+\n+gh_helper.find_repo = function(repo_name) {\n+\n+}\n+\n+ghpages.create_project = function(cb){\n+  // if there's a gh-pages branch, we're ready to rawk\n+  if (shell.exec('git branch -r | grep gh-pages').output === ''){\n+    console.log('creating gh-pages banch...'.grey);\n+    var cmd = shell.exec('git checkout --orphan gh-pages');",
        "path": "lib/deploy_recipes/gh-pages.js",
        "position": null,
        "original_position": 19,
        "commit_id": "9cfba72caa5719d2054d1c76b10e765baa8f56a1",
        "original_commit_id": "82649fb88fa1b25a7174dafd85b99655287e4894",
        "user": {
            "login": "randallagordon",
            "id": 635388,
            "node_id": "MDQ6VXNlcjYzNTM4OA==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/635388?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/randallagordon",
            "html_url": "https://github.com/randallagordon",
            "followers_url": "https://api.github.com/users/randallagordon/followers",
            "following_url": "https://api.github.com/users/randallagordon/following{/other_user}",
            "gists_url": "https://api.github.com/users/randallagordon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/randallagordon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/randallagordon/subscriptions",
            "organizations_url": "https://api.github.com/users/randallagordon/orgs",
            "repos_url": "https://api.github.com/users/randallagordon/repos",
            "events_url": "https://api.github.com/users/randallagordon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/randallagordon/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Roger that. The states I've identified so far that I figure should be covered:\n- Fresh project, no commits yet at all (more or less what I've hashed out so far)\n- Existing project, first gh-pages deploy\n- All following deploys\n\nAny other cases that should be handled? Any caveats I should be aware of with those identified?\n",
        "created_at": "2013-03-17T15:12:52Z",
        "updated_at": "2013-03-21T02:53:04Z",
        "html_url": "https://github.com/jescalan/roots/pull/116#discussion_r3405583",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/116",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/3405583"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/116#discussion_r3405583"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/116"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/3405770",
        "pull_request_review_id": null,
        "id": 3405770,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MDU3NzA=",
        "diff_hunk": "@@ -0,0 +1,40 @@\n+var path = require('path'),\n+    fs = require('fs'),\n+    colors = require('colors'),\n+    run = require('child_process').exec,\n+    shell = require('shelljs');\n+\n+var ghpages = module.exports = {};\n+\n+var gh_helper = {}\n+\n+gh_helper.find_repo = function(repo_name) {\n+\n+}\n+\n+ghpages.create_project = function(cb){\n+  // if there's a gh-pages branch, we're ready to rawk\n+  if (shell.exec('git branch -r | grep gh-pages').output === ''){\n+    console.log('creating gh-pages banch...'.grey);",
        "path": "lib/deploy_recipes/gh-pages.js",
        "position": null,
        "original_position": 18,
        "commit_id": "9cfba72caa5719d2054d1c76b10e765baa8f56a1",
        "original_commit_id": "82649fb88fa1b25a7174dafd85b99655287e4894",
        "user": {
            "login": "randallagordon",
            "id": 635388,
            "node_id": "MDQ6VXNlcjYzNTM4OA==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/635388?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/randallagordon",
            "html_url": "https://github.com/randallagordon",
            "followers_url": "https://api.github.com/users/randallagordon/followers",
            "following_url": "https://api.github.com/users/randallagordon/following{/other_user}",
            "gists_url": "https://api.github.com/users/randallagordon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/randallagordon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/randallagordon/subscriptions",
            "organizations_url": "https://api.github.com/users/randallagordon/orgs",
            "repos_url": "https://api.github.com/users/randallagordon/repos",
            "events_url": "https://api.github.com/users/randallagordon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/randallagordon/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Been meaning to setup a Vim mapping to toggle spell checking of string literals...this pushed me to make it happen! ;)\n",
        "created_at": "2013-03-17T17:12:02Z",
        "updated_at": "2013-03-21T02:53:04Z",
        "html_url": "https://github.com/jescalan/roots/pull/116#discussion_r3405770",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/116",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/3405770"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/116#discussion_r3405770"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/116"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/3406121",
        "pull_request_review_id": null,
        "id": 3406121,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MDYxMjE=",
        "diff_hunk": "@@ -0,0 +1,40 @@\n+var path = require('path'),\n+    fs = require('fs'),\n+    colors = require('colors'),\n+    run = require('child_process').exec,\n+    shell = require('shelljs');\n+\n+var ghpages = module.exports = {};\n+\n+var gh_helper = {}\n+\n+gh_helper.find_repo = function(repo_name) {\n+\n+}\n+\n+ghpages.create_project = function(cb){\n+  // if there's a gh-pages branch, we're ready to rawk\n+  if (shell.exec('git branch -r | grep gh-pages').output === ''){\n+    console.log('creating gh-pages banch...'.grey);\n+    var cmd = shell.exec('git checkout --orphan gh-pages');\n+    if (cmd.code > 0) { return false; }\n+    cmd = shell.exec('/bin/ls | grep -v public | xargs git rm -rf');\n+    cmd = shell.exec('git mv public/* .');\n+    cmd = shell.exec('rmdir public');\n+    cmd = shell.exec('git add .; git commit -am \"compress and deploy\"');\n+    // Create GH repo\n+    console.log('creating GitHub repo...'.grey);\n+    cmd = shell.exec('curl -s -u \"' + this.username + '\" https://api.github.com/user/repos -d \\'{\"name\":\"' + this.name + '\"}\\' 2>/dev/null');",
        "path": "lib/deploy_recipes/gh-pages.js",
        "position": null,
        "original_position": 27,
        "commit_id": "9cfba72caa5719d2054d1c76b10e765baa8f56a1",
        "original_commit_id": "82649fb88fa1b25a7174dafd85b99655287e4894",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "wondering if you might want to use request to handle this, instead of curl\n\nthat way you can know if the command worked via the response from github\n",
        "created_at": "2013-03-17T20:25:56Z",
        "updated_at": "2013-03-21T02:53:04Z",
        "html_url": "https://github.com/jescalan/roots/pull/116#discussion_r3406121",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/116",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/3406121"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/116#discussion_r3406121"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/116"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/3406122",
        "pull_request_review_id": null,
        "id": 3406122,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MDYxMjI=",
        "diff_hunk": "@@ -0,0 +1,40 @@\n+var path = require('path'),\n+    fs = require('fs'),\n+    colors = require('colors'),\n+    run = require('child_process').exec,\n+    shell = require('shelljs');\n+\n+var ghpages = module.exports = {};\n+\n+var gh_helper = {}\n+\n+gh_helper.find_repo = function(repo_name) {\n+\n+}\n+\n+ghpages.create_project = function(cb){\n+  // if there's a gh-pages branch, we're ready to rawk\n+  if (shell.exec('git branch -r | grep gh-pages').output === ''){\n+    console.log('creating gh-pages banch...'.grey);\n+    var cmd = shell.exec('git checkout --orphan gh-pages');\n+    if (cmd.code > 0) { return false; }\n+    cmd = shell.exec('/bin/ls | grep -v public | xargs git rm -rf');",
        "path": "lib/deploy_recipes/gh-pages.js",
        "position": null,
        "original_position": 21,
        "commit_id": "9cfba72caa5719d2054d1c76b10e765baa8f56a1",
        "original_commit_id": "82649fb88fa1b25a7174dafd85b99655287e4894",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "oh man git rm -rf ... dangerous \n",
        "created_at": "2013-03-17T20:26:54Z",
        "updated_at": "2013-03-21T02:53:04Z",
        "html_url": "https://github.com/jescalan/roots/pull/116#discussion_r3406122",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/116",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/3406122"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/116#discussion_r3406122"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/116"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/3406333",
        "pull_request_review_id": null,
        "id": 3406333,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MDYzMzM=",
        "diff_hunk": "@@ -0,0 +1,40 @@\n+var path = require('path'),\n+    fs = require('fs'),\n+    colors = require('colors'),\n+    run = require('child_process').exec,\n+    shell = require('shelljs');\n+\n+var ghpages = module.exports = {};\n+\n+var gh_helper = {}\n+\n+gh_helper.find_repo = function(repo_name) {\n+\n+}\n+\n+ghpages.create_project = function(cb){\n+  // if there's a gh-pages branch, we're ready to rawk\n+  if (shell.exec('git branch -r | grep gh-pages').output === ''){\n+    console.log('creating gh-pages banch...'.grey);\n+    var cmd = shell.exec('git checkout --orphan gh-pages');\n+    if (cmd.code > 0) { return false; }\n+    cmd = shell.exec('/bin/ls | grep -v public | xargs git rm -rf');\n+    cmd = shell.exec('git mv public/* .');\n+    cmd = shell.exec('rmdir public');\n+    cmd = shell.exec('git add .; git commit -am \"compress and deploy\"');\n+    // Create GH repo\n+    console.log('creating GitHub repo...'.grey);\n+    cmd = shell.exec('curl -s -u \"' + this.username + '\" https://api.github.com/user/repos -d \\'{\"name\":\"' + this.name + '\"}\\' 2>/dev/null');",
        "path": "lib/deploy_recipes/gh-pages.js",
        "position": null,
        "original_position": 27,
        "commit_id": "9cfba72caa5719d2054d1c76b10e765baa8f56a1",
        "original_commit_id": "82649fb88fa1b25a7174dafd85b99655287e4894",
        "user": {
            "login": "randallagordon",
            "id": 635388,
            "node_id": "MDQ6VXNlcjYzNTM4OA==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/635388?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/randallagordon",
            "html_url": "https://github.com/randallagordon",
            "followers_url": "https://api.github.com/users/randallagordon/followers",
            "following_url": "https://api.github.com/users/randallagordon/following{/other_user}",
            "gists_url": "https://api.github.com/users/randallagordon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/randallagordon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/randallagordon/subscriptions",
            "organizations_url": "https://api.github.com/users/randallagordon/orgs",
            "repos_url": "https://api.github.com/users/randallagordon/repos",
            "events_url": "https://api.github.com/users/randallagordon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/randallagordon/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Cool, will do.\n\nI actually had my eye on the [GitHub library](https://github.com/ajaxorg/node-github) that the Cloud9 project uses, but didn't want to just go adding extra dependencies to the project willy nilly. Probably overkill until there's a significant number of calls to GH though.\n",
        "created_at": "2013-03-17T22:11:58Z",
        "updated_at": "2013-03-21T02:53:04Z",
        "html_url": "https://github.com/jescalan/roots/pull/116#discussion_r3406333",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/116",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/3406333"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/116#discussion_r3406333"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/116"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/3406346",
        "pull_request_review_id": null,
        "id": 3406346,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MDYzNDY=",
        "diff_hunk": "@@ -0,0 +1,40 @@\n+var path = require('path'),\n+    fs = require('fs'),\n+    colors = require('colors'),\n+    run = require('child_process').exec,\n+    shell = require('shelljs');\n+\n+var ghpages = module.exports = {};\n+\n+var gh_helper = {}\n+\n+gh_helper.find_repo = function(repo_name) {\n+\n+}\n+\n+ghpages.create_project = function(cb){\n+  // if there's a gh-pages branch, we're ready to rawk\n+  if (shell.exec('git branch -r | grep gh-pages').output === ''){\n+    console.log('creating gh-pages banch...'.grey);\n+    var cmd = shell.exec('git checkout --orphan gh-pages');\n+    if (cmd.code > 0) { return false; }\n+    cmd = shell.exec('/bin/ls | grep -v public | xargs git rm -rf');\n+    cmd = shell.exec('git mv public/* .');\n+    cmd = shell.exec('rmdir public');\n+    cmd = shell.exec('git add .; git commit -am \"compress and deploy\"');\n+    // Create GH repo\n+    console.log('creating GitHub repo...'.grey);\n+    cmd = shell.exec('curl -s -u \"' + this.username + '\" https://api.github.com/user/repos -d \\'{\"name\":\"' + this.name + '\"}\\' 2>/dev/null');",
        "path": "lib/deploy_recipes/gh-pages.js",
        "position": null,
        "original_position": 27,
        "commit_id": "9cfba72caa5719d2054d1c76b10e765baa8f56a1",
        "original_commit_id": "82649fb88fa1b25a7174dafd85b99655287e4894",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "see here\n\nhttps://github.com/mojotech/pullr/blob/master/lib/pull-request.js\n",
        "created_at": "2013-03-17T22:19:04Z",
        "updated_at": "2013-03-21T02:53:04Z",
        "html_url": "https://github.com/jescalan/roots/pull/116#discussion_r3406346",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/116",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/3406346"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/116#discussion_r3406346"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/116"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/3406389",
        "pull_request_review_id": null,
        "id": 3406389,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MDYzODk=",
        "diff_hunk": "@@ -0,0 +1,40 @@\n+var path = require('path'),\n+    fs = require('fs'),\n+    colors = require('colors'),\n+    run = require('child_process').exec,\n+    shell = require('shelljs');\n+\n+var ghpages = module.exports = {};\n+\n+var gh_helper = {}\n+\n+gh_helper.find_repo = function(repo_name) {\n+\n+}\n+\n+ghpages.create_project = function(cb){\n+  // if there's a gh-pages branch, we're ready to rawk\n+  if (shell.exec('git branch -r | grep gh-pages').output === ''){\n+    console.log('creating gh-pages banch...'.grey);\n+    var cmd = shell.exec('git checkout --orphan gh-pages');\n+    if (cmd.code > 0) { return false; }\n+    cmd = shell.exec('/bin/ls | grep -v public | xargs git rm -rf');\n+    cmd = shell.exec('git mv public/* .');\n+    cmd = shell.exec('rmdir public');\n+    cmd = shell.exec('git add .; git commit -am \"compress and deploy\"');\n+    // Create GH repo\n+    console.log('creating GitHub repo...'.grey);\n+    cmd = shell.exec('curl -s -u \"' + this.username + '\" https://api.github.com/user/repos -d \\'{\"name\":\"' + this.name + '\"}\\' 2>/dev/null');",
        "path": "lib/deploy_recipes/gh-pages.js",
        "position": null,
        "original_position": 27,
        "commit_id": "9cfba72caa5719d2054d1c76b10e765baa8f56a1",
        "original_commit_id": "82649fb88fa1b25a7174dafd85b99655287e4894",
        "user": {
            "login": "randallagordon",
            "id": 635388,
            "node_id": "MDQ6VXNlcjYzNTM4OA==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/635388?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/randallagordon",
            "html_url": "https://github.com/randallagordon",
            "followers_url": "https://api.github.com/users/randallagordon/followers",
            "following_url": "https://api.github.com/users/randallagordon/following{/other_user}",
            "gists_url": "https://api.github.com/users/randallagordon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/randallagordon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/randallagordon/subscriptions",
            "organizations_url": "https://api.github.com/users/randallagordon/orgs",
            "repos_url": "https://api.github.com/users/randallagordon/repos",
            "events_url": "https://api.github.com/users/randallagordon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/randallagordon/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Awesome, thanks!\n",
        "created_at": "2013-03-17T22:41:22Z",
        "updated_at": "2013-03-21T02:53:04Z",
        "html_url": "https://github.com/jescalan/roots/pull/116#discussion_r3406389",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/116",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/3406389"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/116#discussion_r3406389"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/116"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/3406695",
        "pull_request_review_id": null,
        "id": 3406695,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MDY2OTU=",
        "diff_hunk": "@@ -0,0 +1,40 @@\n+var path = require('path'),\n+    fs = require('fs'),\n+    colors = require('colors'),\n+    run = require('child_process').exec,\n+    shell = require('shelljs');\n+\n+var ghpages = module.exports = {};\n+\n+var gh_helper = {}\n+\n+gh_helper.find_repo = function(repo_name) {\n+\n+}\n+\n+ghpages.create_project = function(cb){\n+  // if there's a gh-pages branch, we're ready to rawk\n+  if (shell.exec('git branch -r | grep gh-pages').output === ''){\n+    console.log('creating gh-pages banch...'.grey);\n+    var cmd = shell.exec('git checkout --orphan gh-pages');\n+    if (cmd.code > 0) { return false; }\n+    cmd = shell.exec('/bin/ls | grep -v public | xargs git rm -rf');",
        "path": "lib/deploy_recipes/gh-pages.js",
        "position": null,
        "original_position": 21,
        "commit_id": "9cfba72caa5719d2054d1c76b10e765baa8f56a1",
        "original_commit_id": "82649fb88fa1b25a7174dafd85b99655287e4894",
        "user": {
            "login": "randallagordon",
            "id": 635388,
            "node_id": "MDQ6VXNlcjYzNTM4OA==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/635388?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/randallagordon",
            "html_url": "https://github.com/randallagordon",
            "followers_url": "https://api.github.com/users/randallagordon/followers",
            "following_url": "https://api.github.com/users/randallagordon/following{/other_user}",
            "gists_url": "https://api.github.com/users/randallagordon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/randallagordon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/randallagordon/subscriptions",
            "organizations_url": "https://api.github.com/users/randallagordon/orgs",
            "repos_url": "https://api.github.com/users/randallagordon/repos",
            "events_url": "https://api.github.com/users/randallagordon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/randallagordon/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "That'd be one of the bits ready to give some attitude! ;)\n\nI'm considering going with a normal branch rather than an orphan and then:\n\n `git ls-files | grep -v public/ | xargs git rm -r`\n\nI believe that'll ensure no files with changes are in danger of removal? And a non-orphan branch provides the added benefit of useful history, as mentioned here: http://rafeca.com/2012/01/17/automate-your-release-flow/\n",
        "created_at": "2013-03-18T00:14:56Z",
        "updated_at": "2013-03-21T02:53:04Z",
        "html_url": "https://github.com/jescalan/roots/pull/116#discussion_r3406695",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/116",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/3406695"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/116#discussion_r3406695"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/116"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/3853919",
        "pull_request_review_id": null,
        "id": 3853919,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM5MTk=",
        "diff_hunk": "@@ -0,0 +1 @@\n+undefined",
        "path": "test/sandbox/errors/.public/foo/public/test.css",
        "position": 1,
        "original_position": 1,
        "commit_id": "8e179390261b7fe76759f6e649d0c79a5435896e",
        "original_commit_id": "8e179390261b7fe76759f6e649d0c79a5435896e",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "ah crap these need to be killed\n",
        "created_at": "2013-04-18T14:00:50Z",
        "updated_at": "2013-04-18T14:00:50Z",
        "html_url": "https://github.com/jescalan/roots/pull/123#discussion_r3853919",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/123",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/3853919"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/123#discussion_r3853919"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/123"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/4737916",
        "pull_request_review_id": null,
        "id": 4737916,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc5MTY=",
        "diff_hunk": "@@ -0,0 +1,74 @@\n+var path = require('path'),\n+    fs = require('fs'),\n+    colors = require('colors'),\n+    run = require('child_process').exec,",
        "path": "lib/deploy_recipes/gh-pages.js",
        "position": null,
        "original_position": 4,
        "commit_id": "77f90dda8084f4419dc99987a36b5fc75907bdf6",
        "original_commit_id": "012e92b48c50e360446de4f4e320b4ce457af07b",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "no need for this since you already have shell.\n",
        "created_at": "2013-06-17T23:29:50Z",
        "updated_at": "2013-06-18T00:12:40Z",
        "html_url": "https://github.com/jescalan/roots/pull/176#discussion_r4737916",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/176",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/4737916"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/176#discussion_r4737916"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/176"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/4737963",
        "pull_request_review_id": null,
        "id": 4737963,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc5NjM=",
        "diff_hunk": "@@ -0,0 +1,74 @@\n+var path = require('path'),\n+    fs = require('fs'),\n+    colors = require('colors'),\n+    run = require('child_process').exec,\n+    readdirp = require('readdirp'),\n+    shell = require('shelljs');\n+\n+var github_pages = module.exports = {};",
        "path": "lib/deploy_recipes/gh-pages.js",
        "position": null,
        "original_position": 8,
        "commit_id": "77f90dda8084f4419dc99987a36b5fc75907bdf6",
        "original_commit_id": "012e92b48c50e360446de4f4e320b4ce457af07b",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "this is an interesting pattern. What is the motivation here? If it is to make a fake namespace within this file then that makes some sense.\n\nHowever a cleaner pattern maybe to just have all of your functions be names an then at the end of the file do something like\n\n``` js\nmodule.exports = {\n  foo: bar\n}\n```\n",
        "created_at": "2013-06-17T23:32:07Z",
        "updated_at": "2013-06-18T00:12:40Z",
        "html_url": "https://github.com/jescalan/roots/pull/176#discussion_r4737963",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/176",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/4737963"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/176#discussion_r4737963"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/176"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/4737996",
        "pull_request_review_id": null,
        "id": 4737996,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc5OTY=",
        "diff_hunk": "@@ -0,0 +1,74 @@\n+var path = require('path'),\n+    fs = require('fs'),\n+    colors = require('colors'),\n+    run = require('child_process').exec,\n+    readdirp = require('readdirp'),\n+    shell = require('shelljs');\n+\n+var github_pages = module.exports = {};\n+\n+github_pages.check_install_status = function(cb){\n+\n+  // Verifying the user has Git installed\n+  if (!shell.which('git')){",
        "path": "lib/deploy_recipes/gh-pages.js",
        "position": null,
        "original_position": 13,
        "commit_id": "77f90dda8084f4419dc99987a36b5fc75907bdf6",
        "original_commit_id": "012e92b48c50e360446de4f4e320b4ce457af07b",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "hmm interfacing directly with git seems a touch ugly. We are already doing quite a bit of this in this project, and each method is handling catching git not installed and other errors in their own way, which makes things quite a bit harder to debug.\n\nI would propose abstracting the git interface into a module that we can call to dry up this file and the others.\n",
        "created_at": "2013-06-17T23:34:12Z",
        "updated_at": "2013-06-18T00:12:40Z",
        "html_url": "https://github.com/jescalan/roots/pull/176#discussion_r4737996",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/176",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/4737996"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/176#discussion_r4737996"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/176"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/4738554",
        "pull_request_review_id": null,
        "id": 4738554,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg1NTQ=",
        "diff_hunk": "@@ -0,0 +1,74 @@\n+var path = require('path'),\n+    fs = require('fs'),\n+    colors = require('colors'),\n+    run = require('child_process').exec,\n+    readdirp = require('readdirp'),\n+    shell = require('shelljs');\n+\n+var github_pages = module.exports = {};",
        "path": "lib/deploy_recipes/gh-pages.js",
        "position": null,
        "original_position": 8,
        "commit_id": "77f90dda8084f4419dc99987a36b5fc75907bdf6",
        "original_commit_id": "012e92b48c50e360446de4f4e320b4ce457af07b",
        "user": {
            "login": "jescalan",
            "id": 556932,
            "node_id": "MDQ6VXNlcjU1NjkzMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/556932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jescalan",
            "html_url": "https://github.com/jescalan",
            "followers_url": "https://api.github.com/users/jescalan/followers",
            "following_url": "https://api.github.com/users/jescalan/following{/other_user}",
            "gists_url": "https://api.github.com/users/jescalan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jescalan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jescalan/subscriptions",
            "organizations_url": "https://api.github.com/users/jescalan/orgs",
            "repos_url": "https://api.github.com/users/jescalan/repos",
            "events_url": "https://api.github.com/users/jescalan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jescalan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think it's because this is the way I did it in the heroku deployer, but I actually have no idea why I did it that way. Converting it back to a more normal way in a moment.\n\nLooking back, I think it was actually for a cleaner interface. Although it's a strange pattern, it's very clear what everything is. Using functions and mapping them introduces duplication as such:\n\n```\nmodule.exports = {\n  foo: foo\n}\n\nfunction foo(){}\n```\n\n...here you are writing foo three times. With the pattern used here, you write it once. Something about it seemed cleaner to me (honestly, still does now that I look at it again)\n",
        "created_at": "2013-06-18T00:05:18Z",
        "updated_at": "2013-06-18T00:12:40Z",
        "html_url": "https://github.com/jescalan/roots/pull/176#discussion_r4738554",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/176",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/4738554"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/176#discussion_r4738554"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/176"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/4738611",
        "pull_request_review_id": null,
        "id": 4738611,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg2MTE=",
        "diff_hunk": "@@ -0,0 +1,74 @@\n+var path = require('path'),\n+    fs = require('fs'),\n+    colors = require('colors'),\n+    run = require('child_process').exec,\n+    readdirp = require('readdirp'),\n+    shell = require('shelljs');\n+\n+var github_pages = module.exports = {};\n+\n+github_pages.check_install_status = function(cb){\n+\n+  // Verifying the user has Git installed\n+  if (!shell.which('git')){",
        "path": "lib/deploy_recipes/gh-pages.js",
        "position": null,
        "original_position": 13,
        "commit_id": "77f90dda8084f4419dc99987a36b5fc75907bdf6",
        "original_commit_id": "012e92b48c50e360446de4f4e320b4ce457af07b",
        "user": {
            "login": "jescalan",
            "id": 556932,
            "node_id": "MDQ6VXNlcjU1NjkzMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/556932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jescalan",
            "html_url": "https://github.com/jescalan",
            "followers_url": "https://api.github.com/users/jescalan/followers",
            "following_url": "https://api.github.com/users/jescalan/following{/other_user}",
            "gists_url": "https://api.github.com/users/jescalan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jescalan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jescalan/subscriptions",
            "organizations_url": "https://api.github.com/users/jescalan/orgs",
            "repos_url": "https://api.github.com/users/jescalan/repos",
            "events_url": "https://api.github.com/users/jescalan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jescalan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "So this is actually not interfacing with git, this is interfacing with the `which` command, something that could not be done through a git interface. There are a ton of places in this file where that comment would have been accurate though, so point taken.\n\nI actually have not been able to find a solid git interface that supports `clone`, for some reason. But I have been looking through a bunch, and getting a direct git interface is on my to-do list.\n",
        "created_at": "2013-06-18T00:09:55Z",
        "updated_at": "2013-06-18T00:12:40Z",
        "html_url": "https://github.com/jescalan/roots/pull/176#discussion_r4738611",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/176",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/4738611"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/176#discussion_r4738611"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/176"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/4739549",
        "pull_request_review_id": null,
        "id": 4739549,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk1NDk=",
        "diff_hunk": "@@ -0,0 +1,74 @@\n+var path = require('path'),\n+    fs = require('fs'),\n+    colors = require('colors'),\n+    run = require('child_process').exec,\n+    readdirp = require('readdirp'),\n+    shell = require('shelljs');\n+\n+var github_pages = module.exports = {};\n+\n+github_pages.check_install_status = function(cb){\n+\n+  // Verifying the user has Git installed\n+  if (!shell.which('git')){",
        "path": "lib/deploy_recipes/gh-pages.js",
        "position": null,
        "original_position": 13,
        "commit_id": "77f90dda8084f4419dc99987a36b5fc75907bdf6",
        "original_commit_id": "012e92b48c50e360446de4f4e320b4ce457af07b",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "ah i just mean in general, we do a bunch of do i have git installed checks and then can i push checks scattered throughout several files. this seems like it would be prime to be abstracted. \n",
        "created_at": "2013-06-18T01:30:30Z",
        "updated_at": "2013-06-18T01:30:30Z",
        "html_url": "https://github.com/jescalan/roots/pull/176#discussion_r4739549",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/176",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/4739549"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/176#discussion_r4739549"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/176"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/4739724",
        "pull_request_review_id": null,
        "id": 4739724,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk3MjQ=",
        "diff_hunk": "@@ -0,0 +1,74 @@\n+var path = require('path'),\n+    fs = require('fs'),\n+    colors = require('colors'),\n+    run = require('child_process').exec,\n+    readdirp = require('readdirp'),\n+    shell = require('shelljs');\n+\n+var github_pages = module.exports = {};\n+\n+github_pages.check_install_status = function(cb){\n+\n+  // Verifying the user has Git installed\n+  if (!shell.which('git')){",
        "path": "lib/deploy_recipes/gh-pages.js",
        "position": null,
        "original_position": 13,
        "commit_id": "77f90dda8084f4419dc99987a36b5fc75907bdf6",
        "original_commit_id": "012e92b48c50e360446de4f4e320b4ce457af07b",
        "user": {
            "login": "jescalan",
            "id": 556932,
            "node_id": "MDQ6VXNlcjU1NjkzMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/556932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jescalan",
            "html_url": "https://github.com/jescalan",
            "followers_url": "https://api.github.com/users/jescalan/followers",
            "following_url": "https://api.github.com/users/jescalan/following{/other_user}",
            "gists_url": "https://api.github.com/users/jescalan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jescalan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jescalan/subscriptions",
            "organizations_url": "https://api.github.com/users/jescalan/orgs",
            "repos_url": "https://api.github.com/users/jescalan/repos",
            "events_url": "https://api.github.com/users/jescalan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jescalan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ok I see what you're after now. Makes sense - just abstract out all git functionality whether or not it's node native bindings or command line\n",
        "created_at": "2013-06-18T01:47:25Z",
        "updated_at": "2013-06-18T01:47:25Z",
        "html_url": "https://github.com/jescalan/roots/pull/176#discussion_r4739724",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/176",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/4739724"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/176#discussion_r4739724"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/176"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/4741186",
        "pull_request_review_id": null,
        "id": 4741186,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDExODY=",
        "diff_hunk": "@@ -0,0 +1,74 @@\n+var path = require('path'),\n+    fs = require('fs'),\n+    colors = require('colors'),\n+    readdirp = require('readdirp'),\n+    shell = require('shelljs');\n+\n+var gh_pages = module.exports = {};\n+\n+gh_pages.check_install_status = function(cb){\n+  // Verifying the user has Git installed\n+  if (!shell.which('git')){\n+    console.error(\"You must install git. We recommend using homebrew\".red);\n+    return false\n+  }\n+\n+  // Make sure there is a remote origin\n+  if (shell.exec('git remote | grep origin').output === ''){\n+    console.error(\"Make sure you have a remote origin branch for github\".red);\n+    return false\n+  }\n+\n+  cb();\n+\n+};\n+\n+gh_pages.create_project = function(cb){\n+  if (shell.exec('git branch | grep gh-pages').output === ''){\n+    create_gh_pages_branch(cb);\n+  } else {\n+    shell.exec('git checkout gh-pages'); cb();\n+  }\n+};\n+\n+gh_pages.push_code = function(cb){\n+  // Move contents of public folder to the project root\n+  var public_folder = options.output_folder;\n+  var target = path.join(public_folder, '*');\n+\n+  console.log('moving the compiled roots project to the project root'.grey);\n+  var cmd = shell.mv('-f', path.resolve(target), process.cwd());\n+  shell.rm('-rf', 'public');",
        "path": "lib/deploy_recipes/gh-pages.js",
        "position": 41,
        "original_position": 41,
        "commit_id": "77f90dda8084f4419dc99987a36b5fc75907bdf6",
        "original_commit_id": "77f90dda8084f4419dc99987a36b5fc75907bdf6",
        "user": {
            "login": "slang800",
            "id": 1049204,
            "node_id": "MDQ6VXNlcjEwNDkyMDQ=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1049204?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/slang800",
            "html_url": "https://github.com/slang800",
            "followers_url": "https://api.github.com/users/slang800/followers",
            "following_url": "https://api.github.com/users/slang800/following{/other_user}",
            "gists_url": "https://api.github.com/users/slang800/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/slang800/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/slang800/subscriptions",
            "organizations_url": "https://api.github.com/users/slang800/orgs",
            "repos_url": "https://api.github.com/users/slang800/repos",
            "events_url": "https://api.github.com/users/slang800/events{/privacy}",
            "received_events_url": "https://api.github.com/users/slang800/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "use https://github.com/isaacs/rimraf here... much more portable than relying on shell\n",
        "created_at": "2013-06-18T05:10:38Z",
        "updated_at": "2013-06-18T05:10:38Z",
        "html_url": "https://github.com/jescalan/roots/pull/176#discussion_r4741186",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/176",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/4741186"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/176#discussion_r4741186"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/176"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/4743344",
        "pull_request_review_id": null,
        "id": 4743344,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMzNDQ=",
        "diff_hunk": "@@ -0,0 +1,74 @@\n+var path = require('path'),\n+    fs = require('fs'),\n+    colors = require('colors'),\n+    readdirp = require('readdirp'),\n+    shell = require('shelljs');\n+\n+var gh_pages = module.exports = {};\n+\n+gh_pages.check_install_status = function(cb){\n+  // Verifying the user has Git installed\n+  if (!shell.which('git')){\n+    console.error(\"You must install git. We recommend using homebrew\".red);\n+    return false\n+  }\n+\n+  // Make sure there is a remote origin\n+  if (shell.exec('git remote | grep origin').output === ''){\n+    console.error(\"Make sure you have a remote origin branch for github\".red);\n+    return false\n+  }\n+\n+  cb();\n+\n+};\n+\n+gh_pages.create_project = function(cb){\n+  if (shell.exec('git branch | grep gh-pages').output === ''){\n+    create_gh_pages_branch(cb);\n+  } else {\n+    shell.exec('git checkout gh-pages'); cb();\n+  }\n+};\n+\n+gh_pages.push_code = function(cb){\n+  // Move contents of public folder to the project root\n+  var public_folder = options.output_folder;\n+  var target = path.join(public_folder, '*');\n+\n+  console.log('moving the compiled roots project to the project root'.grey);\n+  var cmd = shell.mv('-f', path.resolve(target), process.cwd());\n+  shell.rm('-rf', 'public');",
        "path": "lib/deploy_recipes/gh-pages.js",
        "position": 41,
        "original_position": 41,
        "commit_id": "77f90dda8084f4419dc99987a36b5fc75907bdf6",
        "original_commit_id": "77f90dda8084f4419dc99987a36b5fc75907bdf6",
        "user": {
            "login": "slang800",
            "id": 1049204,
            "node_id": "MDQ6VXNlcjEwNDkyMDQ=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1049204?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/slang800",
            "html_url": "https://github.com/slang800",
            "followers_url": "https://api.github.com/users/slang800/followers",
            "following_url": "https://api.github.com/users/slang800/following{/other_user}",
            "gists_url": "https://api.github.com/users/slang800/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/slang800/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/slang800/subscriptions",
            "organizations_url": "https://api.github.com/users/slang800/orgs",
            "repos_url": "https://api.github.com/users/slang800/repos",
            "events_url": "https://api.github.com/users/slang800/events{/privacy}",
            "received_events_url": "https://api.github.com/users/slang800/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "actually, maybe we should just switch to https://npmjs.org/package/fs.extra for this and a few other scripts\n",
        "created_at": "2013-06-18T08:33:36Z",
        "updated_at": "2013-06-18T08:33:36Z",
        "html_url": "https://github.com/jescalan/roots/pull/176#discussion_r4743344",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/176",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/4743344"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/176#discussion_r4743344"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/176"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/4748253",
        "pull_request_review_id": null,
        "id": 4748253,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyNTM=",
        "diff_hunk": "@@ -0,0 +1,74 @@\n+var path = require('path'),\n+    fs = require('fs'),\n+    colors = require('colors'),\n+    readdirp = require('readdirp'),\n+    shell = require('shelljs');\n+\n+var gh_pages = module.exports = {};\n+\n+gh_pages.check_install_status = function(cb){\n+  // Verifying the user has Git installed\n+  if (!shell.which('git')){\n+    console.error(\"You must install git. We recommend using homebrew\".red);\n+    return false\n+  }\n+\n+  // Make sure there is a remote origin\n+  if (shell.exec('git remote | grep origin').output === ''){\n+    console.error(\"Make sure you have a remote origin branch for github\".red);\n+    return false\n+  }\n+\n+  cb();\n+\n+};\n+\n+gh_pages.create_project = function(cb){\n+  if (shell.exec('git branch | grep gh-pages').output === ''){\n+    create_gh_pages_branch(cb);\n+  } else {\n+    shell.exec('git checkout gh-pages'); cb();\n+  }\n+};\n+\n+gh_pages.push_code = function(cb){\n+  // Move contents of public folder to the project root\n+  var public_folder = options.output_folder;\n+  var target = path.join(public_folder, '*');\n+\n+  console.log('moving the compiled roots project to the project root'.grey);\n+  var cmd = shell.mv('-f', path.resolve(target), process.cwd());\n+  shell.rm('-rf', 'public');",
        "path": "lib/deploy_recipes/gh-pages.js",
        "position": 41,
        "original_position": 41,
        "commit_id": "77f90dda8084f4419dc99987a36b5fc75907bdf6",
        "original_commit_id": "77f90dda8084f4419dc99987a36b5fc75907bdf6",
        "user": {
            "login": "jescalan",
            "id": 556932,
            "node_id": "MDQ6VXNlcjU1NjkzMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/556932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jescalan",
            "html_url": "https://github.com/jescalan",
            "followers_url": "https://api.github.com/users/jescalan/followers",
            "following_url": "https://api.github.com/users/jescalan/following{/other_user}",
            "gists_url": "https://api.github.com/users/jescalan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jescalan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jescalan/subscriptions",
            "organizations_url": "https://api.github.com/users/jescalan/orgs",
            "repos_url": "https://api.github.com/users/jescalan/repos",
            "events_url": "https://api.github.com/users/jescalan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jescalan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I actually had been using fs.extra before but found it quite questionable and ended up removing it for a few specific utilities and shelljs. Shelljs is portable across systems though - is there any other advantage rimraf provides?\n",
        "created_at": "2013-06-18T14:03:54Z",
        "updated_at": "2013-06-18T14:03:54Z",
        "html_url": "https://github.com/jescalan/roots/pull/176#discussion_r4748253",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/176",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/4748253"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/176#discussion_r4748253"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/176"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/4715145",
        "pull_request_review_id": null,
        "id": 4715145,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTUxNDU=",
        "diff_hunk": "@@ -30,32 +32,74 @@ var _new = function(commands){\n     }\n   });\n \n-  switch (commands[1]){\n-    case '--basic':\n-      var source = path.join(__dirname, '../../templates/new_basic');\n-      break;\n-    case '--express':\n-      var source = path.join(__dirname, '../../templates/new_express');\n-      break;\n-    case '--ejs':\n-      var source = path.join(__dirname, '../../templates/new_ejs');\n-      break;\n-    case '--blog':\n-      var source = path.join(__dirname, '../../templates/new_blog');\n-      break;\n-    case '--min':\n-      var source = path.join(__dirname, '../../templates/new_min');\n-      break;\n-    // case '--backbone':\n-    //   var source = path.join(__dirname, '../../templates/new_backbone');\n-    //   break;\n-    default:\n-      var source = path.join(__dirname, '../../templates/new');\n+  //\n+  // get the correct template\n+  //\n+\n+  var source = get_template(commands[1]);\n+  if (source.error) { return console.error(source.error) }\n+\n+  function get_template(cmd){",
        "path": "lib/commands/new.js",
        "position": null,
        "original_position": 55,
        "commit_id": "96b893220522518ac610bb899863a0e6edee542d",
        "original_commit_id": "9ec423fd7e00cdb3352a6792bf602768acad75e4",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "this function seems like it does quite a few things. \n\nI propose splitting out this file into its own helper, so that you could break the complexity of this function down quite a bit.\n\nSuch as \n\n```\nfetchGitUrl\ngenerateTemplateError\nlookupTemplatePath\n```\n\nThis will make debugging this much easier and will also maintain small single intent functions that will improve readability and maintainability.\n",
        "created_at": "2013-06-15T23:56:27Z",
        "updated_at": "2013-06-18T15:09:28Z",
        "html_url": "https://github.com/jescalan/roots/pull/166#discussion_r4715145",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/166",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/4715145"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/166#discussion_r4715145"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/166"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/4715150",
        "pull_request_review_id": null,
        "id": 4715150,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTUxNTA=",
        "diff_hunk": "@@ -30,32 +32,74 @@ var _new = function(commands){\n     }\n   });\n \n-  switch (commands[1]){\n-    case '--basic':\n-      var source = path.join(__dirname, '../../templates/new_basic');\n-      break;\n-    case '--express':\n-      var source = path.join(__dirname, '../../templates/new_express');\n-      break;\n-    case '--ejs':\n-      var source = path.join(__dirname, '../../templates/new_ejs');\n-      break;\n-    case '--blog':\n-      var source = path.join(__dirname, '../../templates/new_blog');\n-      break;\n-    case '--min':\n-      var source = path.join(__dirname, '../../templates/new_min');\n-      break;\n-    // case '--backbone':\n-    //   var source = path.join(__dirname, '../../templates/new_backbone');\n-    //   break;\n-    default:\n-      var source = path.join(__dirname, '../../templates/new');\n+  //\n+  // get the correct template\n+  //\n+\n+  var source = get_template(commands[1]);\n+  if (source.error) { return console.error(source.error) }\n+\n+  function get_template(cmd){\n+    var templates = config.get().templates;\n+    var name = cmd ? cmd.slice(2) : templates['default'];\n+    var tmpl = cmd ? templates[name] : name;\n+    var tmpl_path = path.join(__dirname, '../../templates/new', name);\n+    var exists = fs.existsSync(tmpl_path);\n+\n+    // if it's not in the global config, we don't have it\n+    if (!tmpl) { return { error: 'template not found' } }\n+\n+    // if we have a git url, download/update it\n+    if (tmpl.match(/^(https:|git@)/)) {\n+\n+      // if git is not installed, no good\n+      if (!shell.which('git')) {\n+        return { error: 'please install git - check out http://git-scm.com' }\n+      }\n+\n+      // if it has already been downloaded, update the repo\n+      if (exists) {\n+        var pull_command = shell.exec('cd ' + tmpl_path + '; git pull', { silent: true });\n+\n+        if (pull_command.code === 0) {\n+          return tmpl_path\n+        } else {\n+          return { error: pull_command }\n+        }\n+      }\n+\n+      // if not, clone it down\n+      var clone_command = shell.exec('git clone ' + tmpl + ' ' + tmpl_path, { silent: true });\n+\n+      if (clone_command.code === 0) {\n+        return tmpl_path\n+      } else {\n+        return { error: clone_command }\n+      }\n+\n+    }\n+\n+    // if it's already been downloaded, we're good\n+    if (exists) { return tmpl_path }\n+\n+    // if all else fails...\n+    return { error: 'misconfigured template path' }\n+\n   }\n \n+  // copy the template into the current directory\n   var destination = path.join(current_directory, commands[0]);\n-\n   shell.cp('-r', source + '/*', destination);\n+\n+  // add current roots version to app.coffee\n+  var app_config_path = path.join(destination, 'app.coffee')\n+  if (fs.existsSync(app_config_path)){",
        "path": "lib/commands/new.js",
        "position": null,
        "original_position": 110,
        "commit_id": "96b893220522518ac610bb899863a0e6edee542d",
        "original_commit_id": "9ec423fd7e00cdb3352a6792bf602768acad75e4",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I again propose breaking this into a helper function.\n\nHaving all of this logic inline in this function seems to limit the modularity of this code. and thus its use is limited to the linear flow of this function alone.\n",
        "created_at": "2013-06-15T23:59:55Z",
        "updated_at": "2013-06-18T15:09:28Z",
        "html_url": "https://github.com/jescalan/roots/pull/166#discussion_r4715150",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/166",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/4715150"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/166#discussion_r4715150"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/166"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/4715154",
        "pull_request_review_id": null,
        "id": 4715154,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTUxNTQ=",
        "diff_hunk": "@@ -30,32 +32,74 @@ var _new = function(commands){\n     }\n   });\n \n-  switch (commands[1]){\n-    case '--basic':\n-      var source = path.join(__dirname, '../../templates/new_basic');\n-      break;\n-    case '--express':\n-      var source = path.join(__dirname, '../../templates/new_express');\n-      break;\n-    case '--ejs':\n-      var source = path.join(__dirname, '../../templates/new_ejs');\n-      break;\n-    case '--blog':\n-      var source = path.join(__dirname, '../../templates/new_blog');\n-      break;\n-    case '--min':\n-      var source = path.join(__dirname, '../../templates/new_min');\n-      break;\n-    // case '--backbone':\n-    //   var source = path.join(__dirname, '../../templates/new_backbone');\n-    //   break;\n-    default:\n-      var source = path.join(__dirname, '../../templates/new');\n+  //\n+  // get the correct template\n+  //\n+\n+  var source = get_template(commands[1]);\n+  if (source.error) { return console.error(source.error) }\n+\n+  function get_template(cmd){",
        "path": "lib/commands/new.js",
        "position": null,
        "original_position": 55,
        "commit_id": "96b893220522518ac610bb899863a0e6edee542d",
        "original_commit_id": "9ec423fd7e00cdb3352a6792bf602768acad75e4",
        "user": {
            "login": "jescalan",
            "id": 556932,
            "node_id": "MDQ6VXNlcjU1NjkzMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/556932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jescalan",
            "html_url": "https://github.com/jescalan",
            "followers_url": "https://api.github.com/users/jescalan/followers",
            "following_url": "https://api.github.com/users/jescalan/following{/other_user}",
            "gists_url": "https://api.github.com/users/jescalan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jescalan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jescalan/subscriptions",
            "organizations_url": "https://api.github.com/users/jescalan/orgs",
            "repos_url": "https://api.github.com/users/jescalan/repos",
            "events_url": "https://api.github.com/users/jescalan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jescalan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Good call - will certainly do this\n",
        "created_at": "2013-06-16T00:02:35Z",
        "updated_at": "2013-06-18T15:09:29Z",
        "html_url": "https://github.com/jescalan/roots/pull/166#discussion_r4715154",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/166",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/4715154"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/166#discussion_r4715154"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/166"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/4715161",
        "pull_request_review_id": null,
        "id": 4715161,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTUxNjE=",
        "diff_hunk": "@@ -32,6 +38,30 @@ module.exports = function(cb){\n   if (!opts.locals) { opts.locals = {}; }\n   opts.locals.livereload = \"\";\n \n+  // add order function to locals\n+  opts.locals.sort = function(ary, opts) {\n+    if (!opts)    { opts = {} }",
        "path": "lib/config_parser.js",
        "position": null,
        "original_position": 42,
        "commit_id": "96b893220522518ac610bb899863a0e6edee542d",
        "original_commit_id": "f48ec041176a0b58444663d9de3f244ab76c3bc3",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "`opts = opts || {}`\n\nwould work the same and might be similar so that you do not have to have another block of conditional code execution. \n",
        "created_at": "2013-06-16T00:09:40Z",
        "updated_at": "2013-06-18T15:09:29Z",
        "html_url": "https://github.com/jescalan/roots/pull/166#discussion_r4715161",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/166",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/4715161"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/166#discussion_r4715161"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/166"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/4715166",
        "pull_request_review_id": null,
        "id": 4715166,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTUxNjY=",
        "diff_hunk": "@@ -32,6 +38,30 @@ module.exports = function(cb){\n   if (!opts.locals) { opts.locals = {}; }\n   opts.locals.livereload = \"\";\n \n+  // add order function to locals\n+  opts.locals.sort = function(ary, opts) {\n+    if (!opts)    { opts = {} }\n+    if (opts.fn)  { return ary.sort(opts.fn) }\n+    if (!opts.by) { opts.by = 'order' }\n+\n+    if (opts.by === 'date') {\n+      return ary.sort(function(a, b){\n+        if (new Date(a[opts.by]) > new Date(b[opts.by])) { return -1 } else { return 1 }",
        "path": "lib/config_parser.js",
        "position": null,
        "original_position": 48,
        "commit_id": "96b893220522518ac610bb899863a0e6edee542d",
        "original_commit_id": "f48ec041176a0b58444663d9de3f244ab76c3bc3",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "this can be substantially simplified, to take advantage of javascript's type coercion\n\n``` js\nreturn Number(new Date(a[opts.by]) > new Date(b[opts.by]))\n```\n\nsince \nNumber(false) === 0 and Number(true) === 1\n",
        "created_at": "2013-06-16T00:12:13Z",
        "updated_at": "2013-06-18T15:09:29Z",
        "html_url": "https://github.com/jescalan/roots/pull/166#discussion_r4715166",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/166",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/4715166"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/166#discussion_r4715166"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/166"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/4715168",
        "pull_request_review_id": null,
        "id": 4715168,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTUxNjg=",
        "diff_hunk": "@@ -32,6 +38,30 @@ module.exports = function(cb){\n   if (!opts.locals) { opts.locals = {}; }\n   opts.locals.livereload = \"\";\n \n+  // add order function to locals\n+  opts.locals.sort = function(ary, opts) {\n+    if (!opts)    { opts = {} }",
        "path": "lib/config_parser.js",
        "position": null,
        "original_position": 42,
        "commit_id": "96b893220522518ac610bb899863a0e6edee542d",
        "original_commit_id": "f48ec041176a0b58444663d9de3f244ab76c3bc3",
        "user": {
            "login": "jescalan",
            "id": 556932,
            "node_id": "MDQ6VXNlcjU1NjkzMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/556932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jescalan",
            "html_url": "https://github.com/jescalan",
            "followers_url": "https://api.github.com/users/jescalan/followers",
            "following_url": "https://api.github.com/users/jescalan/following{/other_user}",
            "gists_url": "https://api.github.com/users/jescalan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jescalan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jescalan/subscriptions",
            "organizations_url": "https://api.github.com/users/jescalan/orgs",
            "repos_url": "https://api.github.com/users/jescalan/repos",
            "events_url": "https://api.github.com/users/jescalan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jescalan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "good call, must have just blanked on this one. Can you PR that slash any other little syntax things I missed?\n",
        "created_at": "2013-06-16T00:12:30Z",
        "updated_at": "2013-06-18T15:09:29Z",
        "html_url": "https://github.com/jescalan/roots/pull/166#discussion_r4715168",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/166",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/4715168"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/166#discussion_r4715168"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/166"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/4715170",
        "pull_request_review_id": null,
        "id": 4715170,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTUxNzA=",
        "diff_hunk": "@@ -32,6 +38,30 @@ module.exports = function(cb){\n   if (!opts.locals) { opts.locals = {}; }\n   opts.locals.livereload = \"\";\n \n+  // add order function to locals\n+  opts.locals.sort = function(ary, opts) {\n+    if (!opts)    { opts = {} }\n+    if (opts.fn)  { return ary.sort(opts.fn) }\n+    if (!opts.by) { opts.by = 'order' }\n+\n+    if (opts.by === 'date') {\n+      return ary.sort(function(a, b){\n+        if (new Date(a[opts.by]) > new Date(b[opts.by])) { return -1 } else { return 1 }\n+      });\n+    }\n+\n+    if (opts.order === 'asc') {\n+      return ary.sort(function(a, b){\n+        if (a[opts.by] > b[opts.by]) { return -1 } else { return 1 }",
        "path": "lib/config_parser.js",
        "position": 60,
        "original_position": 54,
        "commit_id": "96b893220522518ac610bb899863a0e6edee542d",
        "original_commit_id": "f48ec041176a0b58444663d9de3f244ab76c3bc3",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "see above\n",
        "created_at": "2013-06-16T00:13:13Z",
        "updated_at": "2013-06-18T15:09:29Z",
        "html_url": "https://github.com/jescalan/roots/pull/166#discussion_r4715170",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/166",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/4715170"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/166#discussion_r4715170"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/166"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/4715171",
        "pull_request_review_id": null,
        "id": 4715171,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTUxNzE=",
        "diff_hunk": "@@ -32,6 +38,30 @@ module.exports = function(cb){\n   if (!opts.locals) { opts.locals = {}; }\n   opts.locals.livereload = \"\";\n \n+  // add order function to locals\n+  opts.locals.sort = function(ary, opts) {\n+    if (!opts)    { opts = {} }\n+    if (opts.fn)  { return ary.sort(opts.fn) }\n+    if (!opts.by) { opts.by = 'order' }\n+\n+    if (opts.by === 'date') {\n+      return ary.sort(function(a, b){\n+        if (new Date(a[opts.by]) > new Date(b[opts.by])) { return -1 } else { return 1 }\n+      });\n+    }\n+\n+    if (opts.order === 'asc') {\n+      return ary.sort(function(a, b){\n+        if (a[opts.by] > b[opts.by]) { return -1 } else { return 1 }\n+      });\n+    } else {\n+      return ary.sort(function(a, b){\n+        if (a[opts.by] < b[opts.by]) { return -1 } else { return 1 }",
        "path": "lib/config_parser.js",
        "position": 64,
        "original_position": 58,
        "commit_id": "96b893220522518ac610bb899863a0e6edee542d",
        "original_commit_id": "f48ec041176a0b58444663d9de3f244ab76c3bc3",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "see above\n",
        "created_at": "2013-06-16T00:13:19Z",
        "updated_at": "2013-06-18T15:09:29Z",
        "html_url": "https://github.com/jescalan/roots/pull/166#discussion_r4715171",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/166",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/4715171"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/166#discussion_r4715171"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/166"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/4715177",
        "pull_request_review_id": null,
        "id": 4715177,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTUxNzc=",
        "diff_hunk": "@@ -0,0 +1,95 @@\n+\n+//\n+// an interface to the roots global configuration file\n+//\n+\n+var fs = require('fs'),\n+    path = require('path'),\n+    yaml = require('js-yaml');\n+\n+var home_dir = process.env.HOME || process.env.HOMEPATH || process.env.USERPROFILE;\n+var config_path = exports.path = path.join(home_dir, '.rootsrc');\n+\n+// based on the data type passed, modifies the config appropriately.\n+// strings, integers, and functions have their values overridden, arrays\n+// and objects are appended to.\n+// ex. modify('package_manager', 'cdnjs')\n+// ex: modify('templates', { test: 'https://github.com/test/test' })\n+\n+exports.modify = function(key, val){\n+  var config = read_or_create();\n+\n+  // make sure the type of the value being modified matches\n+  var type = get_type(val);\n+  if (get_type(config[key]) !== type) { return false }\n+\n+  // each of these types need to be modified differently\n+  if (type === 'string' || type === 'integer' || type === 'function') {\n+    config[key] = val; // value: set value\n+  } else if (type === 'array') {\n+    config[key].push(val); // array: add to array\n+  } else if (type === 'object') {\n+    for (k in val){ config[key][k] = val[k] } // object: add/set object(s)\n+  } else {\n+    console.log('error: type not recognized');\n+    return false;\n+  }\n+\n+  write(config);\n+  return config\n+}\n+\n+// be careful!\n+\n+exports.remove = function(base, prop){\n+  var config = read_or_create();\n+\n+  if (!prop){\n+    delete config[base];\n+  } else {\n+    delete config[base][prop];\n+  }\n+\n+  write(config);\n+  return config\n+}\n+\n+exports.get = read_or_create;\n+\n+//\n+// @api private\n+//\n+\n+// read the config file and return an object\n+function read(){\n+  return yaml.safeLoad(fs.readFileSync(config_path, 'utf8'))\n+}\n+\n+// creates a new global config file based on a template\n+function create(){\n+  var tmpl_path = path.join(__dirname, '../templates/global_config/default.yml');\n+  var tmpl_contents = fs.readFileSync(tmpl_path, 'utf8');\n+  fs.writeFileSync(config_path, tmpl_contents);\n+  return read()\n+}\n+\n+// reads/creates and returns the global config as an object\n+function read_or_create(){\n+  if (fs.existsSync(config_path)) { return read() } else { return create() }\n+}\n+\n+// write a javascript object to the config file as yaml\n+function write(content){\n+  var to_yaml = yaml.safeDump(content);\n+  fs.writeFileSync(config_path, to_yaml);\n+  return content\n+}\n+\n+// because javascript's type checking is terrible\n+function get_type(x){\n+  if (typeof x !== 'object'){\n+    return typeof x;\n+  } else {\n+    if (x instanceof Array) { return 'array' } else { return 'object' }\n+  }\n+}",
        "path": "lib/global_config.js",
        "position": null,
        "original_position": 95,
        "commit_id": "96b893220522518ac610bb899863a0e6edee542d",
        "original_commit_id": "f48ec041176a0b58444663d9de3f244ab76c3bc3",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "on several of these files there is no new line at the end of the file. (github warns you about this with the red icon)\n\nSo you may be wondering why do i need a new line at the end of my file? \n\nA complete line on Unix is delimited by a newline character, and that is the indicator that any further content should go on a new line.\n\nSo thus without a newline character some tools will not know that the given line is actually terminated. For instance cat and more.\n\nWithout this newline a tool like more will simply run the lines into each other which is undesirable. \n\nyou can add this line to your preferences in sublime to do this automatically \n\n``` json\n\"ensure_newline_at_eof_on_save\": true\n```\n",
        "created_at": "2013-06-16T00:16:18Z",
        "updated_at": "2013-06-18T15:09:29Z",
        "html_url": "https://github.com/jescalan/roots/pull/166#discussion_r4715177",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/166",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/4715177"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/166#discussion_r4715177"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/166"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/4715178",
        "pull_request_review_id": null,
        "id": 4715178,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTUxNzg=",
        "diff_hunk": "@@ -0,0 +1,95 @@\n+\n+//\n+// an interface to the roots global configuration file\n+//\n+\n+var fs = require('fs'),\n+    path = require('path'),\n+    yaml = require('js-yaml');\n+\n+var home_dir = process.env.HOME || process.env.HOMEPATH || process.env.USERPROFILE;\n+var config_path = exports.path = path.join(home_dir, '.rootsrc');\n+\n+// based on the data type passed, modifies the config appropriately.\n+// strings, integers, and functions have their values overridden, arrays\n+// and objects are appended to.\n+// ex. modify('package_manager', 'cdnjs')\n+// ex: modify('templates', { test: 'https://github.com/test/test' })\n+\n+exports.modify = function(key, val){\n+  var config = read_or_create();\n+\n+  // make sure the type of the value being modified matches\n+  var type = get_type(val);\n+  if (get_type(config[key]) !== type) { return false }\n+\n+  // each of these types need to be modified differently\n+  if (type === 'string' || type === 'integer' || type === 'function') {\n+    config[key] = val; // value: set value\n+  } else if (type === 'array') {\n+    config[key].push(val); // array: add to array\n+  } else if (type === 'object') {\n+    for (k in val){ config[key][k] = val[k] } // object: add/set object(s)\n+  } else {\n+    console.log('error: type not recognized');\n+    return false;\n+  }\n+\n+  write(config);\n+  return config\n+}\n+\n+// be careful!\n+\n+exports.remove = function(base, prop){\n+  var config = read_or_create();\n+\n+  if (!prop){\n+    delete config[base];\n+  } else {\n+    delete config[base][prop];\n+  }\n+\n+  write(config);\n+  return config\n+}\n+\n+exports.get = read_or_create;\n+\n+//\n+// @api private\n+//\n+\n+// read the config file and return an object\n+function read(){\n+  return yaml.safeLoad(fs.readFileSync(config_path, 'utf8'))\n+}\n+\n+// creates a new global config file based on a template\n+function create(){\n+  var tmpl_path = path.join(__dirname, '../templates/global_config/default.yml');\n+  var tmpl_contents = fs.readFileSync(tmpl_path, 'utf8');\n+  fs.writeFileSync(config_path, tmpl_contents);\n+  return read()\n+}\n+\n+// reads/creates and returns the global config as an object\n+function read_or_create(){\n+  if (fs.existsSync(config_path)) { return read() } else { return create() }\n+}\n+\n+// write a javascript object to the config file as yaml\n+function write(content){\n+  var to_yaml = yaml.safeDump(content);\n+  fs.writeFileSync(config_path, to_yaml);\n+  return content\n+}\n+\n+// because javascript's type checking is terrible\n+function get_type(x){\n+  if (typeof x !== 'object'){\n+    return typeof x;\n+  } else {\n+    if (x instanceof Array) { return 'array' } else { return 'object' }",
        "path": "lib/global_config.js",
        "position": null,
        "original_position": 93,
        "commit_id": "96b893220522518ac610bb899863a0e6edee542d",
        "original_commit_id": "f48ec041176a0b58444663d9de3f244ab76c3bc3",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Array.isArray is the built in javascript way to do this.\n",
        "created_at": "2013-06-16T00:16:53Z",
        "updated_at": "2013-06-18T15:09:29Z",
        "html_url": "https://github.com/jescalan/roots/pull/166#discussion_r4715178",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/166",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/4715178"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/166#discussion_r4715178"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/166"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/4715182",
        "pull_request_review_id": null,
        "id": 4715182,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTUxODI=",
        "diff_hunk": "@@ -12,10 +13,17 @@ module.exports = ->\n   global.options.debug.log 'precompiling templates', 'yellow'\n   return false if not global.options.templates?\n   template_dir = path.join process.cwd(), global.options.templates\n+  files = fs.readdirSync(template_dir)\n+\n+  # make sure to skip ignored files\n+  ignores = []\n+  files.map (f) ->\n+    options.ignore_files.forEach (i) ->",
        "path": "lib/precompiler.coffee",
        "position": null,
        "original_position": 17,
        "commit_id": "96b893220522518ac610bb899863a0e6edee542d",
        "original_commit_id": "f48ec041176a0b58444663d9de3f244ab76c3bc3",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "since we have _ in this module you can do this\n\n`ignores = _.compact(_.map(files, <logic>))`\n",
        "created_at": "2013-06-16T00:21:28Z",
        "updated_at": "2013-06-18T15:09:29Z",
        "html_url": "https://github.com/jescalan/roots/pull/166#discussion_r4715182",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/166",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/4715182"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/166#discussion_r4715182"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/166"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/4715185",
        "pull_request_review_id": null,
        "id": 4715185,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTUxODU=",
        "diff_hunk": "@@ -0,0 +1,20 @@\n+#",
        "path": "templates/global_config/default.yml",
        "position": null,
        "original_position": 1,
        "commit_id": "96b893220522518ac610bb899863a0e6edee542d",
        "original_commit_id": "f48ec041176a0b58444663d9de3f244ab76c3bc3",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "yml seems like an interesting choice for a settings language. being that this is a JS utility, would json not make more sense?\n",
        "created_at": "2013-06-16T00:22:31Z",
        "updated_at": "2013-06-18T15:09:29Z",
        "html_url": "https://github.com/jescalan/roots/pull/166#discussion_r4715185",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/166",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/4715185"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/166#discussion_r4715185"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/166"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/4715212",
        "pull_request_review_id": null,
        "id": 4715212,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTUyMTI=",
        "diff_hunk": "@@ -0,0 +1,20 @@\n+#",
        "path": "templates/global_config/default.yml",
        "position": null,
        "original_position": 1,
        "commit_id": "96b893220522518ac610bb899863a0e6edee542d",
        "original_commit_id": "f48ec041176a0b58444663d9de3f244ab76c3bc3",
        "user": {
            "login": "slang800",
            "id": 1049204,
            "node_id": "MDQ6VXNlcjEwNDkyMDQ=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1049204?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/slang800",
            "html_url": "https://github.com/slang800",
            "followers_url": "https://api.github.com/users/slang800/followers",
            "following_url": "https://api.github.com/users/slang800/following{/other_user}",
            "gists_url": "https://api.github.com/users/slang800/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/slang800/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/slang800/subscriptions",
            "organizations_url": "https://api.github.com/users/slang800/orgs",
            "repos_url": "https://api.github.com/users/slang800/repos",
            "events_url": "https://api.github.com/users/slang800/events{/privacy}",
            "received_events_url": "https://api.github.com/users/slang800/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "+1 for json (or maybe [CSON](https://github.com/bevry/cson) if you want something cleaner)\n",
        "created_at": "2013-06-16T00:44:51Z",
        "updated_at": "2013-06-18T15:09:29Z",
        "html_url": "https://github.com/jescalan/roots/pull/166#discussion_r4715212",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/166",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/4715212"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/166#discussion_r4715212"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/166"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/4715401",
        "pull_request_review_id": null,
        "id": 4715401,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU0MDE=",
        "diff_hunk": "@@ -0,0 +1,95 @@\n+\n+//\n+// an interface to the roots global configuration file\n+//\n+\n+var fs = require('fs'),\n+    path = require('path'),\n+    yaml = require('js-yaml');\n+\n+var home_dir = process.env.HOME || process.env.HOMEPATH || process.env.USERPROFILE;\n+var config_path = exports.path = path.join(home_dir, '.rootsrc');\n+\n+// based on the data type passed, modifies the config appropriately.\n+// strings, integers, and functions have their values overridden, arrays\n+// and objects are appended to.\n+// ex. modify('package_manager', 'cdnjs')\n+// ex: modify('templates', { test: 'https://github.com/test/test' })\n+\n+exports.modify = function(key, val){\n+  var config = read_or_create();\n+\n+  // make sure the type of the value being modified matches\n+  var type = get_type(val);\n+  if (get_type(config[key]) !== type) { return false }\n+\n+  // each of these types need to be modified differently\n+  if (type === 'string' || type === 'integer' || type === 'function') {\n+    config[key] = val; // value: set value\n+  } else if (type === 'array') {\n+    config[key].push(val); // array: add to array\n+  } else if (type === 'object') {\n+    for (k in val){ config[key][k] = val[k] } // object: add/set object(s)\n+  } else {\n+    console.log('error: type not recognized');\n+    return false;\n+  }\n+\n+  write(config);\n+  return config\n+}\n+\n+// be careful!\n+\n+exports.remove = function(base, prop){\n+  var config = read_or_create();\n+\n+  if (!prop){\n+    delete config[base];\n+  } else {\n+    delete config[base][prop];\n+  }\n+\n+  write(config);\n+  return config\n+}\n+\n+exports.get = read_or_create;\n+\n+//\n+// @api private\n+//\n+\n+// read the config file and return an object\n+function read(){\n+  return yaml.safeLoad(fs.readFileSync(config_path, 'utf8'))\n+}\n+\n+// creates a new global config file based on a template\n+function create(){\n+  var tmpl_path = path.join(__dirname, '../templates/global_config/default.yml');\n+  var tmpl_contents = fs.readFileSync(tmpl_path, 'utf8');\n+  fs.writeFileSync(config_path, tmpl_contents);\n+  return read()\n+}\n+\n+// reads/creates and returns the global config as an object\n+function read_or_create(){\n+  if (fs.existsSync(config_path)) { return read() } else { return create() }\n+}\n+\n+// write a javascript object to the config file as yaml\n+function write(content){\n+  var to_yaml = yaml.safeDump(content);\n+  fs.writeFileSync(config_path, to_yaml);\n+  return content\n+}\n+\n+// because javascript's type checking is terrible\n+function get_type(x){\n+  if (typeof x !== 'object'){\n+    return typeof x;\n+  } else {\n+    if (x instanceof Array) { return 'array' } else { return 'object' }",
        "path": "lib/global_config.js",
        "position": null,
        "original_position": 93,
        "commit_id": "96b893220522518ac610bb899863a0e6edee542d",
        "original_commit_id": "f48ec041176a0b58444663d9de3f244ab76c3bc3",
        "user": {
            "login": "jescalan",
            "id": 556932,
            "node_id": "MDQ6VXNlcjU1NjkzMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/556932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jescalan",
            "html_url": "https://github.com/jescalan",
            "followers_url": "https://api.github.com/users/jescalan/followers",
            "following_url": "https://api.github.com/users/jescalan/following{/other_user}",
            "gists_url": "https://api.github.com/users/jescalan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jescalan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jescalan/subscriptions",
            "organizations_url": "https://api.github.com/users/jescalan/orgs",
            "repos_url": "https://api.github.com/users/jescalan/repos",
            "events_url": "https://api.github.com/users/jescalan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jescalan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I don't see why this is any better. Is it faster? Doesn't seem much cleaner...\n",
        "created_at": "2013-06-16T04:20:22Z",
        "updated_at": "2013-06-18T15:09:29Z",
        "html_url": "https://github.com/jescalan/roots/pull/166#discussion_r4715401",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/166",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/4715401"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/166#discussion_r4715401"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/166"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/4715405",
        "pull_request_review_id": null,
        "id": 4715405,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU0MDU=",
        "diff_hunk": "@@ -0,0 +1,20 @@\n+#",
        "path": "templates/global_config/default.yml",
        "position": null,
        "original_position": 1,
        "commit_id": "96b893220522518ac610bb899863a0e6edee542d",
        "original_commit_id": "f48ec041176a0b58444663d9de3f244ab76c3bc3",
        "user": {
            "login": "jescalan",
            "id": 556932,
            "node_id": "MDQ6VXNlcjU1NjkzMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/556932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jescalan",
            "html_url": "https://github.com/jescalan",
            "followers_url": "https://api.github.com/users/jescalan/followers",
            "following_url": "https://api.github.com/users/jescalan/following{/other_user}",
            "gists_url": "https://api.github.com/users/jescalan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jescalan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jescalan/subscriptions",
            "organizations_url": "https://api.github.com/users/jescalan/orgs",
            "repos_url": "https://api.github.com/users/jescalan/repos",
            "events_url": "https://api.github.com/users/jescalan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jescalan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Cleanliness was the only thing that inspired this, i really don't like writing json because of all the ridiculous amounts of extra syntax, and yaml cuts all that very effectively (much like jade to html or stylus to css). If you guys both think json would be better though happy to convert this, it's not a big difference either way. It ends up as json internally anyway, just using yaml load and dump for conversions.\n",
        "created_at": "2013-06-16T04:23:29Z",
        "updated_at": "2013-06-18T15:09:29Z",
        "html_url": "https://github.com/jescalan/roots/pull/166#discussion_r4715405",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/166",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/4715405"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/166#discussion_r4715405"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/166"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/4715429",
        "pull_request_review_id": null,
        "id": 4715429,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU0Mjk=",
        "diff_hunk": "@@ -0,0 +1,95 @@\n+\n+//\n+// an interface to the roots global configuration file\n+//\n+\n+var fs = require('fs'),\n+    path = require('path'),\n+    yaml = require('js-yaml');\n+\n+var home_dir = process.env.HOME || process.env.HOMEPATH || process.env.USERPROFILE;\n+var config_path = exports.path = path.join(home_dir, '.rootsrc');\n+\n+// based on the data type passed, modifies the config appropriately.\n+// strings, integers, and functions have their values overridden, arrays\n+// and objects are appended to.\n+// ex. modify('package_manager', 'cdnjs')\n+// ex: modify('templates', { test: 'https://github.com/test/test' })\n+\n+exports.modify = function(key, val){\n+  var config = read_or_create();\n+\n+  // make sure the type of the value being modified matches\n+  var type = get_type(val);\n+  if (get_type(config[key]) !== type) { return false }\n+\n+  // each of these types need to be modified differently\n+  if (type === 'string' || type === 'integer' || type === 'function') {\n+    config[key] = val; // value: set value\n+  } else if (type === 'array') {\n+    config[key].push(val); // array: add to array\n+  } else if (type === 'object') {\n+    for (k in val){ config[key][k] = val[k] } // object: add/set object(s)\n+  } else {\n+    console.log('error: type not recognized');\n+    return false;\n+  }\n+\n+  write(config);\n+  return config\n+}\n+\n+// be careful!\n+\n+exports.remove = function(base, prop){\n+  var config = read_or_create();\n+\n+  if (!prop){\n+    delete config[base];\n+  } else {\n+    delete config[base][prop];\n+  }\n+\n+  write(config);\n+  return config\n+}\n+\n+exports.get = read_or_create;\n+\n+//\n+// @api private\n+//\n+\n+// read the config file and return an object\n+function read(){\n+  return yaml.safeLoad(fs.readFileSync(config_path, 'utf8'))\n+}\n+\n+// creates a new global config file based on a template\n+function create(){\n+  var tmpl_path = path.join(__dirname, '../templates/global_config/default.yml');\n+  var tmpl_contents = fs.readFileSync(tmpl_path, 'utf8');\n+  fs.writeFileSync(config_path, tmpl_contents);\n+  return read()\n+}\n+\n+// reads/creates and returns the global config as an object\n+function read_or_create(){\n+  if (fs.existsSync(config_path)) { return read() } else { return create() }\n+}\n+\n+// write a javascript object to the config file as yaml\n+function write(content){\n+  var to_yaml = yaml.safeDump(content);\n+  fs.writeFileSync(config_path, to_yaml);\n+  return content\n+}\n+\n+// because javascript's type checking is terrible\n+function get_type(x){\n+  if (typeof x !== 'object'){\n+    return typeof x;\n+  } else {\n+    if (x instanceof Array) { return 'array' } else { return 'object' }",
        "path": "lib/global_config.js",
        "position": null,
        "original_position": 93,
        "commit_id": "96b893220522518ac610bb899863a0e6edee542d",
        "original_commit_id": "f48ec041176a0b58444663d9de3f244ab76c3bc3",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Array.isArray\nnative V8 function. It's fast, it's always correct. This is part of ES5.\n\narr instanceof Array\nChecks whether the object was made with the array constructor.\n\ni think the first one speaks for itself .. use V8 :kiss: \n",
        "created_at": "2013-06-16T04:50:22Z",
        "updated_at": "2013-06-18T15:09:29Z",
        "html_url": "https://github.com/jescalan/roots/pull/166#discussion_r4715429",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/166",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/4715429"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/166#discussion_r4715429"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/166"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/4715431",
        "pull_request_review_id": null,
        "id": 4715431,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU0MzE=",
        "diff_hunk": "@@ -0,0 +1,20 @@\n+#",
        "path": "templates/global_config/default.yml",
        "position": null,
        "original_position": 1,
        "commit_id": "96b893220522518ac610bb899863a0e6edee542d",
        "original_commit_id": "f48ec041176a0b58444663d9de3f244ab76c3bc3",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "if this is not yaml that means 1 less lib tho to parse it \n",
        "created_at": "2013-06-16T04:50:47Z",
        "updated_at": "2013-06-18T15:09:29Z",
        "html_url": "https://github.com/jescalan/roots/pull/166#discussion_r4715431",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/166",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/4715431"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/166#discussion_r4715431"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/166"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/4715444",
        "pull_request_review_id": null,
        "id": 4715444,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU0NDQ=",
        "diff_hunk": "@@ -0,0 +1,20 @@\n+#",
        "path": "templates/global_config/default.yml",
        "position": null,
        "original_position": 1,
        "commit_id": "96b893220522518ac610bb899863a0e6edee542d",
        "original_commit_id": "f48ec041176a0b58444663d9de3f244ab76c3bc3",
        "user": {
            "login": "slang800",
            "id": 1049204,
            "node_id": "MDQ6VXNlcjEwNDkyMDQ=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1049204?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/slang800",
            "html_url": "https://github.com/slang800",
            "followers_url": "https://api.github.com/users/slang800/followers",
            "following_url": "https://api.github.com/users/slang800/following{/other_user}",
            "gists_url": "https://api.github.com/users/slang800/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/slang800/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/slang800/subscriptions",
            "organizations_url": "https://api.github.com/users/slang800/orgs",
            "repos_url": "https://api.github.com/users/slang800/repos",
            "events_url": "https://api.github.com/users/slang800/events{/privacy}",
            "received_events_url": "https://api.github.com/users/slang800/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "and anyone who is using roots should know how to write in JSON because they use `(Coffee|Java)Script`... in fact, I am much more comfortable writing JSON than YAML. Also, if you want something cleaner, use CSON!\n",
        "created_at": "2013-06-16T05:02:01Z",
        "updated_at": "2013-06-18T15:09:29Z",
        "html_url": "https://github.com/jescalan/roots/pull/166#discussion_r4715444",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/166",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/4715444"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/166#discussion_r4715444"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/166"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/4715450",
        "pull_request_review_id": null,
        "id": 4715450,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU0NTA=",
        "diff_hunk": "@@ -0,0 +1,95 @@\n+\n+//\n+// an interface to the roots global configuration file\n+//\n+\n+var fs = require('fs'),\n+    path = require('path'),\n+    yaml = require('js-yaml');\n+\n+var home_dir = process.env.HOME || process.env.HOMEPATH || process.env.USERPROFILE;\n+var config_path = exports.path = path.join(home_dir, '.rootsrc');\n+\n+// based on the data type passed, modifies the config appropriately.\n+// strings, integers, and functions have their values overridden, arrays\n+// and objects are appended to.\n+// ex. modify('package_manager', 'cdnjs')\n+// ex: modify('templates', { test: 'https://github.com/test/test' })\n+\n+exports.modify = function(key, val){\n+  var config = read_or_create();\n+\n+  // make sure the type of the value being modified matches\n+  var type = get_type(val);\n+  if (get_type(config[key]) !== type) { return false }\n+\n+  // each of these types need to be modified differently\n+  if (type === 'string' || type === 'integer' || type === 'function') {\n+    config[key] = val; // value: set value\n+  } else if (type === 'array') {\n+    config[key].push(val); // array: add to array\n+  } else if (type === 'object') {\n+    for (k in val){ config[key][k] = val[k] } // object: add/set object(s)\n+  } else {\n+    console.log('error: type not recognized');\n+    return false;\n+  }\n+\n+  write(config);\n+  return config\n+}\n+\n+// be careful!\n+\n+exports.remove = function(base, prop){\n+  var config = read_or_create();\n+\n+  if (!prop){\n+    delete config[base];\n+  } else {\n+    delete config[base][prop];\n+  }\n+\n+  write(config);\n+  return config\n+}\n+\n+exports.get = read_or_create;\n+\n+//\n+// @api private\n+//\n+\n+// read the config file and return an object\n+function read(){\n+  return yaml.safeLoad(fs.readFileSync(config_path, 'utf8'))\n+}\n+\n+// creates a new global config file based on a template\n+function create(){\n+  var tmpl_path = path.join(__dirname, '../templates/global_config/default.yml');\n+  var tmpl_contents = fs.readFileSync(tmpl_path, 'utf8');\n+  fs.writeFileSync(config_path, tmpl_contents);\n+  return read()\n+}\n+\n+// reads/creates and returns the global config as an object\n+function read_or_create(){\n+  if (fs.existsSync(config_path)) { return read() } else { return create() }\n+}\n+\n+// write a javascript object to the config file as yaml\n+function write(content){\n+  var to_yaml = yaml.safeDump(content);\n+  fs.writeFileSync(config_path, to_yaml);\n+  return content\n+}\n+\n+// because javascript's type checking is terrible\n+function get_type(x){\n+  if (typeof x !== 'object'){\n+    return typeof x;\n+  } else {\n+    if (x instanceof Array) { return 'array' } else { return 'object' }",
        "path": "lib/global_config.js",
        "position": null,
        "original_position": 93,
        "commit_id": "96b893220522518ac610bb899863a0e6edee542d",
        "original_commit_id": "f48ec041176a0b58444663d9de3f244ab76c3bc3",
        "user": {
            "login": "slang800",
            "id": 1049204,
            "node_id": "MDQ6VXNlcjEwNDkyMDQ=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1049204?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/slang800",
            "html_url": "https://github.com/slang800",
            "followers_url": "https://api.github.com/users/slang800/followers",
            "following_url": "https://api.github.com/users/slang800/following{/other_user}",
            "gists_url": "https://api.github.com/users/slang800/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/slang800/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/slang800/subscriptions",
            "organizations_url": "https://api.github.com/users/slang800/orgs",
            "repos_url": "https://api.github.com/users/slang800/repos",
            "events_url": "https://api.github.com/users/slang800/events{/privacy}",
            "received_events_url": "https://api.github.com/users/slang800/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You probably won't notice the increase in speed, but it's just kinda the\n\"standard\" way of checking for Arrays... and, more importantly, it won't be\nwrong\n\nOn Sat, Jun 15, 2013 at 11:20 PM, Jeff Escalante\nnotifications@github.comwrote:\n\n> In lib/global_config.js:\n> \n> > -  if (fs.existsSync(config_path)) { return read() } else { return create() }\n> >   +}\n> >   +\n> >   +// write a javascript object to the config file as yaml\n> >   +function write(content){\n> > -  var to_yaml = yaml.safeDump(content);\n> > -  fs.writeFileSync(config_path, to_yaml);\n> > -  return content\n> >   +}\n> >   +\n> >   +// because javascript's type checking is terrible\n> >   +function get_type(x){\n> > -  if (typeof x !== 'object'){\n> > -    return typeof x;\n> > -  } else {\n> > -    if (x instanceof Array) { return 'array' } else { return 'object' }\n> \n> I don't see why this is any better. Is it faster? Doesn't seem much\n> cleaner...\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/jenius/roots/pull/166/files#r4715401\n> .\n",
        "created_at": "2013-06-16T05:06:59Z",
        "updated_at": "2013-06-18T15:09:29Z",
        "html_url": "https://github.com/jescalan/roots/pull/166#discussion_r4715450",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/166",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/4715450"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/166#discussion_r4715450"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/166"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/4715454",
        "pull_request_review_id": null,
        "id": 4715454,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU0NTQ=",
        "diff_hunk": "@@ -0,0 +1,95 @@\n+\n+//\n+// an interface to the roots global configuration file\n+//\n+\n+var fs = require('fs'),\n+    path = require('path'),\n+    yaml = require('js-yaml');\n+\n+var home_dir = process.env.HOME || process.env.HOMEPATH || process.env.USERPROFILE;\n+var config_path = exports.path = path.join(home_dir, '.rootsrc');\n+\n+// based on the data type passed, modifies the config appropriately.\n+// strings, integers, and functions have their values overridden, arrays\n+// and objects are appended to.\n+// ex. modify('package_manager', 'cdnjs')\n+// ex: modify('templates', { test: 'https://github.com/test/test' })\n+\n+exports.modify = function(key, val){\n+  var config = read_or_create();\n+\n+  // make sure the type of the value being modified matches\n+  var type = get_type(val);\n+  if (get_type(config[key]) !== type) { return false }\n+\n+  // each of these types need to be modified differently\n+  if (type === 'string' || type === 'integer' || type === 'function') {\n+    config[key] = val; // value: set value\n+  } else if (type === 'array') {\n+    config[key].push(val); // array: add to array\n+  } else if (type === 'object') {\n+    for (k in val){ config[key][k] = val[k] } // object: add/set object(s)\n+  } else {\n+    console.log('error: type not recognized');\n+    return false;\n+  }\n+\n+  write(config);\n+  return config\n+}\n+\n+// be careful!\n+\n+exports.remove = function(base, prop){\n+  var config = read_or_create();\n+\n+  if (!prop){\n+    delete config[base];\n+  } else {\n+    delete config[base][prop];\n+  }\n+\n+  write(config);\n+  return config\n+}\n+\n+exports.get = read_or_create;\n+\n+//\n+// @api private\n+//\n+\n+// read the config file and return an object\n+function read(){\n+  return yaml.safeLoad(fs.readFileSync(config_path, 'utf8'))\n+}\n+\n+// creates a new global config file based on a template\n+function create(){\n+  var tmpl_path = path.join(__dirname, '../templates/global_config/default.yml');\n+  var tmpl_contents = fs.readFileSync(tmpl_path, 'utf8');\n+  fs.writeFileSync(config_path, tmpl_contents);\n+  return read()\n+}\n+\n+// reads/creates and returns the global config as an object\n+function read_or_create(){\n+  if (fs.existsSync(config_path)) { return read() } else { return create() }\n+}\n+\n+// write a javascript object to the config file as yaml\n+function write(content){\n+  var to_yaml = yaml.safeDump(content);\n+  fs.writeFileSync(config_path, to_yaml);\n+  return content\n+}\n+\n+// because javascript's type checking is terrible\n+function get_type(x){\n+  if (typeof x !== 'object'){\n+    return typeof x;\n+  } else {\n+    if (x instanceof Array) { return 'array' } else { return 'object' }",
        "path": "lib/global_config.js",
        "position": null,
        "original_position": 93,
        "commit_id": "96b893220522518ac610bb899863a0e6edee542d",
        "original_commit_id": "f48ec041176a0b58444663d9de3f244ab76c3bc3",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "agree'd\n\njust for some more interesting options and perf\n\nhttp://jsperf.com/isarray-comparison/2\n",
        "created_at": "2013-06-16T05:11:43Z",
        "updated_at": "2013-06-18T15:09:29Z",
        "html_url": "https://github.com/jescalan/roots/pull/166#discussion_r4715454",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/166",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/4715454"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/166#discussion_r4715454"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/166"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/4715971",
        "pull_request_review_id": null,
        "id": 4715971,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU5NzE=",
        "diff_hunk": "@@ -0,0 +1,20 @@\n+#",
        "path": "templates/global_config/default.yml",
        "position": null,
        "original_position": 1,
        "commit_id": "96b893220522518ac610bb899863a0e6edee542d",
        "original_commit_id": "f48ec041176a0b58444663d9de3f244ab76c3bc3",
        "user": {
            "login": "declandewet",
            "id": 1918632,
            "node_id": "MDQ6VXNlcjE5MTg2MzI=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1918632?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/declandewet",
            "html_url": "https://github.com/declandewet",
            "followers_url": "https://api.github.com/users/declandewet/followers",
            "following_url": "https://api.github.com/users/declandewet/following{/other_user}",
            "gists_url": "https://api.github.com/users/declandewet/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/declandewet/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/declandewet/subscriptions",
            "organizations_url": "https://api.github.com/users/declandewet/orgs",
            "repos_url": "https://api.github.com/users/declandewet/repos",
            "events_url": "https://api.github.com/users/declandewet/events{/privacy}",
            "received_events_url": "https://api.github.com/users/declandewet/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "+1 to JSON/CSON. CSON would be much cleaner - It's just JSON as CoffeeScript.\n\n```\nkey: value\nkey2:\n  key: value\n  key2: value\n```\n",
        "created_at": "2013-06-16T12:16:01Z",
        "updated_at": "2013-06-18T15:09:29Z",
        "html_url": "https://github.com/jescalan/roots/pull/166#discussion_r4715971",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/166",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/4715971"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/166#discussion_r4715971"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/166"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/4716237",
        "pull_request_review_id": null,
        "id": 4716237,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYyMzc=",
        "diff_hunk": "@@ -0,0 +1,20 @@\n+#",
        "path": "templates/global_config/default.yml",
        "position": null,
        "original_position": 1,
        "commit_id": "96b893220522518ac610bb899863a0e6edee542d",
        "original_commit_id": "f48ec041176a0b58444663d9de3f244ab76c3bc3",
        "user": {
            "login": "jescalan",
            "id": 556932,
            "node_id": "MDQ6VXNlcjU1NjkzMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/556932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jescalan",
            "html_url": "https://github.com/jescalan",
            "followers_url": "https://api.github.com/users/jescalan/followers",
            "following_url": "https://api.github.com/users/jescalan/following{/other_user}",
            "gists_url": "https://api.github.com/users/jescalan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jescalan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jescalan/subscriptions",
            "organizations_url": "https://api.github.com/users/jescalan/orgs",
            "repos_url": "https://api.github.com/users/jescalan/repos",
            "events_url": "https://api.github.com/users/jescalan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jescalan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I actually already have the yaml parser loaded (it parses front matter in dynamic content), so in this case it would be adding an extra library if we went with cson. But I'm totally fine with this change - is there a majority in favor or either json or cson in particular here?\n",
        "created_at": "2013-06-16T16:18:26Z",
        "updated_at": "2013-06-18T15:09:29Z",
        "html_url": "https://github.com/jescalan/roots/pull/166#discussion_r4716237",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/166",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/4716237"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/166#discussion_r4716237"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/166"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/4716520",
        "pull_request_review_id": null,
        "id": 4716520,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY1MjA=",
        "diff_hunk": "@@ -0,0 +1,20 @@\n+#",
        "path": "templates/global_config/default.yml",
        "position": null,
        "original_position": 1,
        "commit_id": "96b893220522518ac610bb899863a0e6edee542d",
        "original_commit_id": "f48ec041176a0b58444663d9de3f244ab76c3bc3",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "either is fine, JSON would be more familiar to everyone\n\nI still think there are a lot of front end devs that do not use coffeescript \n",
        "created_at": "2013-06-16T19:28:03Z",
        "updated_at": "2013-06-18T15:09:29Z",
        "html_url": "https://github.com/jescalan/roots/pull/166#discussion_r4716520",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/166",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/4716520"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/166#discussion_r4716520"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/166"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/4716544",
        "pull_request_review_id": null,
        "id": 4716544,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY1NDQ=",
        "diff_hunk": "@@ -0,0 +1,20 @@\n+#",
        "path": "templates/global_config/default.yml",
        "position": null,
        "original_position": 1,
        "commit_id": "96b893220522518ac610bb899863a0e6edee542d",
        "original_commit_id": "f48ec041176a0b58444663d9de3f244ab76c3bc3",
        "user": {
            "login": "jescalan",
            "id": 556932,
            "node_id": "MDQ6VXNlcjU1NjkzMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/556932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jescalan",
            "html_url": "https://github.com/jescalan",
            "followers_url": "https://api.github.com/users/jescalan/followers",
            "following_url": "https://api.github.com/users/jescalan/following{/other_user}",
            "gists_url": "https://api.github.com/users/jescalan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jescalan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jescalan/subscriptions",
            "organizations_url": "https://api.github.com/users/jescalan/orgs",
            "repos_url": "https://api.github.com/users/jescalan/repos",
            "events_url": "https://api.github.com/users/jescalan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jescalan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ok let's stick with json then. I'll push a fix for that in a minute\n",
        "created_at": "2013-06-16T19:42:13Z",
        "updated_at": "2013-06-18T15:09:29Z",
        "html_url": "https://github.com/jescalan/roots/pull/166#discussion_r4716544",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/166",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/4716544"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/166#discussion_r4716544"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/166"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/4716569",
        "pull_request_review_id": null,
        "id": 4716569,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY1Njk=",
        "diff_hunk": "@@ -32,6 +38,30 @@ module.exports = function(cb){\n   if (!opts.locals) { opts.locals = {}; }\n   opts.locals.livereload = \"\";\n \n+  // add order function to locals\n+  opts.locals.sort = function(ary, opts) {\n+    if (!opts)    { opts = {} }\n+    if (opts.fn)  { return ary.sort(opts.fn) }\n+    if (!opts.by) { opts.by = 'order' }\n+\n+    if (opts.by === 'date') {\n+      return ary.sort(function(a, b){\n+        if (new Date(a[opts.by]) > new Date(b[opts.by])) { return -1 } else { return 1 }",
        "path": "lib/config_parser.js",
        "position": null,
        "original_position": 48,
        "commit_id": "96b893220522518ac610bb899863a0e6edee542d",
        "original_commit_id": "f48ec041176a0b58444663d9de3f244ab76c3bc3",
        "user": {
            "login": "jescalan",
            "id": 556932,
            "node_id": "MDQ6VXNlcjU1NjkzMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/556932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jescalan",
            "html_url": "https://github.com/jescalan",
            "followers_url": "https://api.github.com/users/jescalan/followers",
            "following_url": "https://api.github.com/users/jescalan/following{/other_user}",
            "gists_url": "https://api.github.com/users/jescalan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jescalan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jescalan/subscriptions",
            "organizations_url": "https://api.github.com/users/jescalan/orgs",
            "repos_url": "https://api.github.com/users/jescalan/repos",
            "events_url": "https://api.github.com/users/jescalan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jescalan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It actually has to be `-1` here for the sort function to work : /\n\nIf you know any clever ways to convert true to 1 and false to -1 would absolutely do this. The sort function strangely enough determines order by testing for greater than or less than zero.\n\nping @samccone \n",
        "created_at": "2013-06-16T19:56:23Z",
        "updated_at": "2013-06-18T15:09:29Z",
        "html_url": "https://github.com/jescalan/roots/pull/166#discussion_r4716569",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/166",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/4716569"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/166#discussion_r4716569"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/166"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/5042466",
        "pull_request_review_id": null,
        "id": 5042466,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI0NjY=",
        "diff_hunk": "@@ -89,7 +89,7 @@ Compiler.prototype.copy = function(file, cb){\n     fs.writeFileSync(destination, write_content);\n   } else {\n     // symlink in development mode\n-    if (this.mode() === 'dev') {\n+    if (this.mode() === 'dev' && process.platform !== 'win32') {",
        "path": "lib/compiler.js",
        "position": 5,
        "original_position": 5,
        "commit_id": "004984ffc5ea89393451a676c280f8f5cfd7a1ed",
        "original_commit_id": "004984ffc5ea89393451a676c280f8f5cfd7a1ed",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I would like to see a test for this. Before we merge.\n",
        "created_at": "2013-07-05T13:06:40Z",
        "updated_at": "2013-07-05T13:06:40Z",
        "html_url": "https://github.com/jescalan/roots/pull/194#discussion_r5042466",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/194",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/5042466"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/194#discussion_r5042466"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/194"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/5044521",
        "pull_request_review_id": null,
        "id": 5044521,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ1MjE=",
        "diff_hunk": "@@ -89,7 +89,7 @@ Compiler.prototype.copy = function(file, cb){\n     fs.writeFileSync(destination, write_content);\n   } else {\n     // symlink in development mode\n-    if (this.mode() === 'dev') {\n+    if (this.mode() === 'dev' && process.platform !== 'win32') {",
        "path": "lib/compiler.js",
        "position": 5,
        "original_position": 5,
        "commit_id": "004984ffc5ea89393451a676c280f8f5cfd7a1ed",
        "original_commit_id": "004984ffc5ea89393451a676c280f8f5cfd7a1ed",
        "user": {
            "login": "cspotcode",
            "id": 376504,
            "node_id": "MDQ6VXNlcjM3NjUwNA==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/376504?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cspotcode",
            "html_url": "https://github.com/cspotcode",
            "followers_url": "https://api.github.com/users/cspotcode/followers",
            "following_url": "https://api.github.com/users/cspotcode/following{/other_user}",
            "gists_url": "https://api.github.com/users/cspotcode/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cspotcode/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cspotcode/subscriptions",
            "organizations_url": "https://api.github.com/users/cspotcode/orgs",
            "repos_url": "https://api.github.com/users/cspotcode/repos",
            "events_url": "https://api.github.com/users/cspotcode/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cspotcode/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ok.  I'm not seeing a pre-existing test for the symlinking feature, and TravisCI won't be able to test this until it supports Windows.\n",
        "created_at": "2013-07-05T14:55:03Z",
        "updated_at": "2013-07-05T14:55:03Z",
        "html_url": "https://github.com/jescalan/roots/pull/194#discussion_r5044521",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/194",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/5044521"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/194#discussion_r5044521"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/194"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/5045243",
        "pull_request_review_id": null,
        "id": 5045243,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUyNDM=",
        "diff_hunk": "@@ -89,7 +89,7 @@ Compiler.prototype.copy = function(file, cb){\n     fs.writeFileSync(destination, write_content);\n   } else {\n     // symlink in development mode\n-    if (this.mode() === 'dev') {\n+    if (this.mode() === 'dev' && process.platform !== 'win32') {",
        "path": "lib/compiler.js",
        "position": 5,
        "original_position": 5,
        "commit_id": "004984ffc5ea89393451a676c280f8f5cfd7a1ed",
        "original_commit_id": "004984ffc5ea89393451a676c280f8f5cfd7a1ed",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@cspotcode more reason to add a test.\n\nSo what I have done in the past is actually override the process.platform value to be win32 within my test setup.\n\nLet me know if this makes sense or if you have questions. \n",
        "created_at": "2013-07-05T15:33:17Z",
        "updated_at": "2013-07-05T15:33:17Z",
        "html_url": "https://github.com/jescalan/roots/pull/194#discussion_r5045243",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/194",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/5045243"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/194#discussion_r5045243"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/194"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/5838125",
        "pull_request_review_id": null,
        "id": 5838125,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MzgxMjU=",
        "diff_hunk": "@@ -0,0 +1,14 @@\n+roots = require '../index'\n+path = require 'path'\n+shell = require 'shelljs'\n+\n+_clean = (args) ->\n+\tglobal.options.compress = true if args['clean'] is undefined\n+\t\n+\tshell.rm '-fr', roots.project.path './public'",
        "path": "lib/commands/clean.coffee",
        "position": null,
        "original_position": 8,
        "commit_id": "1a8359f9df0a5aaa1aa63cd1222a00041615917c",
        "original_commit_id": "8d9955ffb7863bda7a6bfd22009e64717186d25b",
        "user": {
            "login": "slang800",
            "id": 1049204,
            "node_id": "MDQ6VXNlcjEwNDkyMDQ=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1049204?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/slang800",
            "html_url": "https://github.com/slang800",
            "followers_url": "https://api.github.com/users/slang800/followers",
            "following_url": "https://api.github.com/users/slang800/following{/other_user}",
            "gists_url": "https://api.github.com/users/slang800/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/slang800/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/slang800/subscriptions",
            "organizations_url": "https://api.github.com/users/slang800/orgs",
            "repos_url": "https://api.github.com/users/slang800/repos",
            "events_url": "https://api.github.com/users/slang800/events{/privacy}",
            "received_events_url": "https://api.github.com/users/slang800/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "`roots.project.path 'public'` ... `public` is just the name of the config variable, it's not resolved like a path\n",
        "created_at": "2013-08-19T09:46:29Z",
        "updated_at": "2013-08-22T22:45:07Z",
        "html_url": "https://github.com/jescalan/roots/pull/219#discussion_r5838125",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/219",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/5838125"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/219#discussion_r5838125"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/219"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/5838166",
        "pull_request_review_id": null,
        "id": 5838166,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MzgxNjY=",
        "diff_hunk": "@@ -10,5 +10,6 @@ module.exports = {\n   'help':     require('./help'),\n   'version':  require('./version'),\n   'template': require('./template'),\n-  'serve': require('./serve')",
        "path": "lib/commands/index.js",
        "position": null,
        "original_position": 4,
        "commit_id": "1a8359f9df0a5aaa1aa63cd1222a00041615917c",
        "original_commit_id": "8d9955ffb7863bda7a6bfd22009e64717186d25b",
        "user": {
            "login": "slang800",
            "id": 1049204,
            "node_id": "MDQ6VXNlcjEwNDkyMDQ=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1049204?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/slang800",
            "html_url": "https://github.com/slang800",
            "followers_url": "https://api.github.com/users/slang800/followers",
            "following_url": "https://api.github.com/users/slang800/following{/other_user}",
            "gists_url": "https://api.github.com/users/slang800/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/slang800/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/slang800/subscriptions",
            "organizations_url": "https://api.github.com/users/slang800/orgs",
            "repos_url": "https://api.github.com/users/slang800/repos",
            "events_url": "https://api.github.com/users/slang800/events{/privacy}",
            "received_events_url": "https://api.github.com/users/slang800/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "you could reduce the total number of changes by just adding it to the top of the ~~dict~~ object\n",
        "created_at": "2013-08-19T09:49:05Z",
        "updated_at": "2013-08-22T22:45:07Z",
        "html_url": "https://github.com/jescalan/roots/pull/219#discussion_r5838166",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/219",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/5838166"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/219#discussion_r5838166"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/219"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/5838200",
        "pull_request_review_id": null,
        "id": 5838200,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MzgyMDA=",
        "diff_hunk": "@@ -0,0 +1,14 @@\n+roots = require '../index'\n+path = require 'path'\n+shell = require 'shelljs'\n+\n+_clean = (args) ->\n+\tglobal.options.compress = true if args['clean'] is undefined\n+\t\n+\tshell.rm '-fr', roots.project.path './public'\n+\n+\targs['clean'] is undefined and roots.print.log '\\ncleaning...', 'grey'",
        "path": "lib/commands/clean.coffee",
        "position": null,
        "original_position": 10,
        "commit_id": "1a8359f9df0a5aaa1aa63cd1222a00041615917c",
        "original_commit_id": "8d9955ffb7863bda7a6bfd22009e64717186d25b",
        "user": {
            "login": "slang800",
            "id": 1049204,
            "node_id": "MDQ6VXNlcjEwNDkyMDQ=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1049204?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/slang800",
            "html_url": "https://github.com/slang800",
            "followers_url": "https://api.github.com/users/slang800/followers",
            "following_url": "https://api.github.com/users/slang800/following{/other_user}",
            "gists_url": "https://api.github.com/users/slang800/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/slang800/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/slang800/subscriptions",
            "organizations_url": "https://api.github.com/users/slang800/orgs",
            "repos_url": "https://api.github.com/users/slang800/repos",
            "events_url": "https://api.github.com/users/slang800/events{/privacy}",
            "received_events_url": "https://api.github.com/users/slang800/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "you shouldn't need a `\\n` here... that kind of formatting should be taken care of by the printer\n",
        "created_at": "2013-08-19T09:50:53Z",
        "updated_at": "2013-08-22T22:45:07Z",
        "html_url": "https://github.com/jescalan/roots/pull/219#discussion_r5838200",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/219",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/5838200"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/219#discussion_r5838200"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/219"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/5838222",
        "pull_request_review_id": null,
        "id": 5838222,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MzgyMjI=",
        "diff_hunk": "@@ -0,0 +1,14 @@\n+roots = require '../index'\n+path = require 'path'\n+shell = require 'shelljs'\n+\n+_clean = (args) ->\n+\tglobal.options.compress = true if args['clean'] is undefined\n+\t\n+\tshell.rm '-fr', roots.project.path './public'\n+\n+\targs['clean'] is undefined and roots.print.log '\\ncleaning...', 'grey'",
        "path": "lib/commands/clean.coffee",
        "position": null,
        "original_position": 10,
        "commit_id": "1a8359f9df0a5aaa1aa63cd1222a00041615917c",
        "original_commit_id": "8d9955ffb7863bda7a6bfd22009e64717186d25b",
        "user": {
            "login": "slang800",
            "id": 1049204,
            "node_id": "MDQ6VXNlcjEwNDkyMDQ=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1049204?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/slang800",
            "html_url": "https://github.com/slang800",
            "followers_url": "https://api.github.com/users/slang800/followers",
            "following_url": "https://api.github.com/users/slang800/following{/other_user}",
            "gists_url": "https://api.github.com/users/slang800/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/slang800/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/slang800/subscriptions",
            "organizations_url": "https://api.github.com/users/slang800/orgs",
            "repos_url": "https://api.github.com/users/slang800/repos",
            "events_url": "https://api.github.com/users/slang800/events{/privacy}",
            "received_events_url": "https://api.github.com/users/slang800/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "also what is the `args['clean'] is undefined and` part for?\n",
        "created_at": "2013-08-19T09:51:57Z",
        "updated_at": "2013-08-22T22:45:07Z",
        "html_url": "https://github.com/jescalan/roots/pull/219#discussion_r5838222",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/219",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/5838222"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/219#discussion_r5838222"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/219"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/5841411",
        "pull_request_review_id": null,
        "id": 5841411,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDE0MTE=",
        "diff_hunk": "@@ -0,0 +1,76 @@\n+console.log('roots browser thing loaded');\n+\n+if(!window.jQuery){\n+  var script = document.createElement('script');\n+  script.type = \"text/javascript\";\n+  script.src = \"/__roots__/jquery.min.js\";\n+  document.getElementsByTagName('head')[0].appendChild(script);\n+} else {\n+  jQuery_loaded();\n+}\n+\n+// jQuery loaded gets called at the end of the jquery file\n+jQuery_loaded = function (){\n+  socket_mgs_handlers = {\n+    error: function (data){\n+      if (!document.getElementById('roots-error')){\n+        $('body').append(\n+          '<div id=\"roots-error\">' +\n+            '<pre>' +\n+              '<span>compile error</span>' +\n+              data.replace(/(\\r\\n|\\n|\\r)/gm, '<br>') +\n+            '</pre>' +\n+          '</div>'\n+        );\n+      }\n+    }\n+  };\n+\n+  $.ajax({\n+    url: \"/__roots__/cfg.json\",\n+    dataType: 'json'\n+  }).done(function(data){\n+    if(data['livereloadEnabled']){\n+      socket_mgs_handlers['reload'] = function (){\n+        window.location.reload();\n+      };\n+      socket_mgs_handlers['compiling'] = function (){\n+        if (!document.getElementById('roots-load-container')){\n+          $('body').append(\n+            '<div id=\"roots-load-container\">' +\n+              '<div id=\"roots-compile-loader\">' +\n+                '<div id=\"l1\"></div>' +\n+                '<div id=\"l2\"></div>' +\n+                '<div id=\"l3\"></div>' +\n+                '<div id=\"l4\"></div>' +\n+                '<div id=\"l5\"></div>' +\n+                '<div id=\"l6\"></div>' +\n+                '<div id=\"l7\"></div>' +\n+                '<div id=\"l8\"></div>' +\n+              '</div>' +\n+            '</div>'\n+          );\n+        }\n+      };\n+    }\n+  });\n+\n+  protocol = window.location.protocol === 'http:' ? 'ws://' : 'wss://';\n+  address = protocol + window.location.host + window.location.pathname + '/ws';\n+  socket = new WebSocket(address);\n+  socket.onmessage = function(msg) {\n+    console.log(msg);",
        "path": "lib/browser_assets/main.js",
        "position": null,
        "original_position": 62,
        "commit_id": "9a6e51c42adcc8cb09f48f76fb813eff607be214",
        "original_commit_id": "7ad49abea4590762a03969ed486e0a203eb5e4ca",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "do we want this log here?\n",
        "created_at": "2013-08-19T13:12:50Z",
        "updated_at": "2013-09-09T23:50:26Z",
        "html_url": "https://github.com/jescalan/roots/pull/221#discussion_r5841411",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/221",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/5841411"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/221#discussion_r5841411"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/221"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/5841438",
        "pull_request_review_id": null,
        "id": 5841438,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDE0Mzg=",
        "diff_hunk": "@@ -0,0 +1,76 @@\n+console.log('roots browser thing loaded');\n+\n+if(!window.jQuery){\n+  var script = document.createElement('script');\n+  script.type = \"text/javascript\";\n+  script.src = \"/__roots__/jquery.min.js\";\n+  document.getElementsByTagName('head')[0].appendChild(script);\n+} else {\n+  jQuery_loaded();\n+}\n+\n+// jQuery loaded gets called at the end of the jquery file\n+jQuery_loaded = function (){\n+  socket_mgs_handlers = {\n+    error: function (data){\n+      if (!document.getElementById('roots-error')){\n+        $('body').append(\n+          '<div id=\"roots-error\">' +\n+            '<pre>' +\n+              '<span>compile error</span>' +\n+              data.replace(/(\\r\\n|\\n|\\r)/gm, '<br>') +\n+            '</pre>' +\n+          '</div>'\n+        );\n+      }\n+    }\n+  };\n+\n+  $.ajax({\n+    url: \"/__roots__/cfg.json\",\n+    dataType: 'json'\n+  }).done(function(data){\n+    if(data['livereloadEnabled']){\n+      socket_mgs_handlers['reload'] = function (){\n+        window.location.reload();\n+      };\n+      socket_mgs_handlers['compiling'] = function (){\n+        if (!document.getElementById('roots-load-container')){\n+          $('body').append(\n+            '<div id=\"roots-load-container\">' +\n+              '<div id=\"roots-compile-loader\">' +\n+                '<div id=\"l1\"></div>' +\n+                '<div id=\"l2\"></div>' +\n+                '<div id=\"l3\"></div>' +\n+                '<div id=\"l4\"></div>' +\n+                '<div id=\"l5\"></div>' +\n+                '<div id=\"l6\"></div>' +\n+                '<div id=\"l7\"></div>' +\n+                '<div id=\"l8\"></div>' +\n+              '</div>' +\n+            '</div>'\n+          );\n+        }\n+      };\n+    }\n+  });\n+\n+  protocol = window.location.protocol === 'http:' ? 'ws://' : 'wss://';\n+  address = protocol + window.location.host + window.location.pathname + '/ws';\n+  socket = new WebSocket(address);\n+  socket.onmessage = function(msg) {\n+    console.log(msg);",
        "path": "lib/browser_assets/main.js",
        "position": null,
        "original_position": 62,
        "commit_id": "9a6e51c42adcc8cb09f48f76fb813eff607be214",
        "original_commit_id": "7ad49abea4590762a03969ed486e0a203eb5e4ca",
        "user": {
            "login": "slang800",
            "id": 1049204,
            "node_id": "MDQ6VXNlcjEwNDkyMDQ=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1049204?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/slang800",
            "html_url": "https://github.com/slang800",
            "followers_url": "https://api.github.com/users/slang800/followers",
            "following_url": "https://api.github.com/users/slang800/following{/other_user}",
            "gists_url": "https://api.github.com/users/slang800/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/slang800/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/slang800/subscriptions",
            "organizations_url": "https://api.github.com/users/slang800/orgs",
            "repos_url": "https://api.github.com/users/slang800/repos",
            "events_url": "https://api.github.com/users/slang800/events{/privacy}",
            "received_events_url": "https://api.github.com/users/slang800/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "nope! ... that was just left over from debugging. good catch\n",
        "created_at": "2013-08-19T13:14:12Z",
        "updated_at": "2013-09-09T23:50:26Z",
        "html_url": "https://github.com/jescalan/roots/pull/221#discussion_r5841438",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/221",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/5841438"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/221#discussion_r5841438"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/221"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/6193780",
        "pull_request_review_id": null,
        "id": 6193780,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTM3ODA=",
        "diff_hunk": "@@ -32,7 +32,7 @@ Deployer.prototype.compile_project = function(cb){\n Deployer.prototype.commit_files = function(cb){\n   console.log('committing to git'.grey);\n   var cmd = shell.exec(\"git add .; git commit -am 'compress and deploy'\", { silent: true });\n-  if (cmd.code > 0) { throw cmd }\n+  // if (cmd.code > 0) { return console.error(cmd) }",
        "path": "lib/deployer.js",
        "position": null,
        "original_position": 5,
        "commit_id": "85d10bdd62c9abe97fcb09f0f0b665ee723e7e00",
        "original_commit_id": "b3fb5d15acf31c3acb14372f17ea927810794617",
        "user": {
            "login": "joshrowley",
            "id": 1937303,
            "node_id": "MDQ6VXNlcjE5MzczMDM=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1937303?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/joshrowley",
            "html_url": "https://github.com/joshrowley",
            "followers_url": "https://api.github.com/users/joshrowley/followers",
            "following_url": "https://api.github.com/users/joshrowley/following{/other_user}",
            "gists_url": "https://api.github.com/users/joshrowley/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/joshrowley/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/joshrowley/subscriptions",
            "organizations_url": "https://api.github.com/users/joshrowley/orgs",
            "repos_url": "https://api.github.com/users/joshrowley/repos",
            "events_url": "https://api.github.com/users/joshrowley/events{/privacy}",
            "received_events_url": "https://api.github.com/users/joshrowley/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I wasn't sure how to deal with this. I think all the other recipes rearrange files, and create a commit called 'compress & deploy'. However, I have nothing to commit at this point because I haven't changed any files, so the recipe breaks here with this line uncommented.\n",
        "created_at": "2013-09-05T20:51:19Z",
        "updated_at": "2013-10-04T23:52:32Z",
        "html_url": "https://github.com/jescalan/roots/pull/227#discussion_r6193780",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/227",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/6193780"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/227#discussion_r6193780"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/227"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/6194151",
        "pull_request_review_id": null,
        "id": 6194151,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTQxNTE=",
        "diff_hunk": "@@ -32,7 +32,7 @@ Deployer.prototype.compile_project = function(cb){\n Deployer.prototype.commit_files = function(cb){\n   console.log('committing to git'.grey);\n   var cmd = shell.exec(\"git add .; git commit -am 'compress and deploy'\", { silent: true });\n-  if (cmd.code > 0) { throw cmd }\n+  // if (cmd.code > 0) { return console.error(cmd) }",
        "path": "lib/deployer.js",
        "position": null,
        "original_position": 5,
        "commit_id": "85d10bdd62c9abe97fcb09f0f0b665ee723e7e00",
        "original_commit_id": "b3fb5d15acf31c3acb14372f17ea927810794617",
        "user": {
            "login": "jescalan",
            "id": 556932,
            "node_id": "MDQ6VXNlcjU1NjkzMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/556932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jescalan",
            "html_url": "https://github.com/jescalan",
            "followers_url": "https://api.github.com/users/jescalan/followers",
            "following_url": "https://api.github.com/users/jescalan/following{/other_user}",
            "gists_url": "https://api.github.com/users/jescalan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jescalan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jescalan/subscriptions",
            "organizations_url": "https://api.github.com/users/jescalan/orgs",
            "repos_url": "https://api.github.com/users/jescalan/repos",
            "events_url": "https://api.github.com/users/jescalan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jescalan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Good point. It should be the case that if you override this method in your deployer with a blank one it will work, if that's not the case I should make it so.\n",
        "created_at": "2013-09-05T21:00:58Z",
        "updated_at": "2013-10-04T23:52:32Z",
        "html_url": "https://github.com/jescalan/roots/pull/227#discussion_r6194151",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/227",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/6194151"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/227#discussion_r6194151"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/227"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/7061203",
        "pull_request_review_id": null,
        "id": 7061203,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNjEyMDM=",
        "diff_hunk": "@@ -0,0 +1,34 @@\n+fs      = require 'fs'\n+ncp     = require('ncp').ncp\n+run     = require('child_process').exec\n+path    = require 'path'\n+rimraf  = require 'rimraf'\n+assert  = require 'assert'\n+dir     = 'watch-scratch'\n+\n+run_in_dir_async = (dir, cmd, cb) ->\n+  run \"cd \\\"#{dir}\\\"; #{path.join(path.relative(dir, __dirname), '../bin/roots')} #{cmd}\"",
        "path": "test/watcher-tests.coffee",
        "position": 10,
        "original_position": 10,
        "commit_id": "8f6acb3afaaabfc3d72361841211e9261aaee674",
        "original_commit_id": "8f6acb3afaaabfc3d72361841211e9261aaee674",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "i am going to use spawn here so that i can listen for the output content and integrate those into the tests instead of using timeouts \n",
        "created_at": "2013-10-18T13:17:55Z",
        "updated_at": "2013-10-18T13:17:55Z",
        "html_url": "https://github.com/jescalan/roots/pull/251#discussion_r7061203",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/251",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/7061203"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/251#discussion_r7061203"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/251"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/7061225",
        "pull_request_review_id": null,
        "id": 7061225,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNjEyMjU=",
        "diff_hunk": "@@ -0,0 +1,34 @@\n+fs      = require 'fs'\n+ncp     = require('ncp').ncp\n+run     = require('child_process').exec\n+path    = require 'path'\n+rimraf  = require 'rimraf'\n+assert  = require 'assert'\n+dir     = 'watch-scratch'\n+\n+run_in_dir_async = (dir, cmd, cb) ->\n+  run \"cd \\\"#{dir}\\\"; #{path.join(path.relative(dir, __dirname), '../bin/roots')} #{cmd}\"\n+  cb()\n+\n+describe 'watch', ->\n+  beforeEach (done) ->\n+    ncp path.join(__dirname, 'basic'), path.join(__dirname, dir), ->\n+      done()\n+\n+  afterEach (done) ->\n+    rimraf path.join(__dirname, dir), ->\n+      done()\n+\n+  it 'should reload on content change', (done) ->\n+    run_in_dir_async path.join(__dirname, dir), 'watch', ->\n+      # this is so ghetto\n+      # if i was in a neighborood this ghetto\n+      # they would steal my socks\n+      this.setTimeout =>\n+        fs.appendFileSync path.join(__dirname, dir, 'views/index.jade'), 'h2 hi!'\n+        this.setTimeout ->\n+          content = fs.readFileSync path.join(__dirname, dir, 'public/index.html'), 'utf8'\n+          assert.equal true, !!~content.indexOf(\"<h2>hi!</h2>\"), \"contains content\"",
        "path": "test/watcher-tests.coffee",
        "position": 31,
        "original_position": 31,
        "commit_id": "8f6acb3afaaabfc3d72361841211e9261aaee674",
        "original_commit_id": "8f6acb3afaaabfc3d72361841211e9261aaee674",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Also I might use selenium here to actually go to the live preview page and ensure the content on the page has been reloaded.\n",
        "created_at": "2013-10-18T13:18:47Z",
        "updated_at": "2013-10-18T13:18:47Z",
        "html_url": "https://github.com/jescalan/roots/pull/251#discussion_r7061225",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/251",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/7061225"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/251#discussion_r7061225"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/251"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/7062367",
        "pull_request_review_id": null,
        "id": 7062367,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNjIzNjc=",
        "diff_hunk": "@@ -0,0 +1,34 @@\n+fs      = require 'fs'\n+ncp     = require('ncp').ncp\n+run     = require('child_process').exec\n+path    = require 'path'\n+rimraf  = require 'rimraf'\n+assert  = require 'assert'\n+dir     = 'watch-scratch'\n+\n+run_in_dir_async = (dir, cmd, cb) ->\n+  run \"cd \\\"#{dir}\\\"; #{path.join(path.relative(dir, __dirname), '../bin/roots')} #{cmd}\"\n+  cb()\n+\n+describe 'watch', ->\n+  beforeEach (done) ->\n+    ncp path.join(__dirname, 'basic'), path.join(__dirname, dir), ->\n+      done()\n+\n+  afterEach (done) ->\n+    rimraf path.join(__dirname, dir), ->\n+      done()\n+\n+  it 'should reload on content change', (done) ->\n+    run_in_dir_async path.join(__dirname, dir), 'watch', ->\n+      # this is so ghetto\n+      # if i was in a neighborood this ghetto\n+      # they would steal my socks\n+      this.setTimeout =>\n+        fs.appendFileSync path.join(__dirname, dir, 'views/index.jade'), 'h2 hi!'\n+        this.setTimeout ->\n+          content = fs.readFileSync path.join(__dirname, dir, 'public/index.html'), 'utf8'\n+          assert.equal true, !!~content.indexOf(\"<h2>hi!</h2>\"), \"contains content\"",
        "path": "test/watcher-tests.coffee",
        "position": 31,
        "original_position": 31,
        "commit_id": "8f6acb3afaaabfc3d72361841211e9261aaee674",
        "original_commit_id": "8f6acb3afaaabfc3d72361841211e9261aaee674",
        "user": {
            "login": "jescalan",
            "id": 556932,
            "node_id": "MDQ6VXNlcjU1NjkzMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/556932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jescalan",
            "html_url": "https://github.com/jescalan",
            "followers_url": "https://api.github.com/users/jescalan/followers",
            "following_url": "https://api.github.com/users/jescalan/following{/other_user}",
            "gists_url": "https://api.github.com/users/jescalan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jescalan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jescalan/subscriptions",
            "organizations_url": "https://api.github.com/users/jescalan/orgs",
            "repos_url": "https://api.github.com/users/jescalan/repos",
            "events_url": "https://api.github.com/users/jescalan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jescalan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You can use zombie.js for this to make it quicker : )\n",
        "created_at": "2013-10-18T14:03:29Z",
        "updated_at": "2013-10-18T14:03:29Z",
        "html_url": "https://github.com/jescalan/roots/pull/251#discussion_r7062367",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/251",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/7062367"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/251#discussion_r7062367"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/251"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/7146067",
        "pull_request_review_id": null,
        "id": 7146067,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcxNDYwNjc=",
        "diff_hunk": "@@ -11,9 +11,9 @@ var path = require('path'),\n roots.server = require('../server');\n _.bindAll(roots.print, 'reload');\n \n-var _watch = function(){\n-\n+var _watch = function(args){\n   roots.print.compiling();\n+  if (args.open == false) roots.project.open = false",
        "path": "lib/commands/watch.js",
        "position": null,
        "original_position": 8,
        "commit_id": "cd9accc208ed518bfb9a838a788088642952c11e",
        "original_commit_id": "52ad6136216074b08bab8ebb013335c423099398",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "add in { } for consistency \n",
        "created_at": "2013-10-23T01:44:03Z",
        "updated_at": "2013-10-23T02:07:23Z",
        "html_url": "https://github.com/jescalan/roots/pull/256#discussion_r7146067",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/256",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/7146067"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/256#discussion_r7146067"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/256"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/7146178",
        "pull_request_review_id": null,
        "id": 7146178,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcxNDYxNzg=",
        "diff_hunk": "@@ -11,9 +11,9 @@ var path = require('path'),\n roots.server = require('../server');\n _.bindAll(roots.print, 'reload');\n \n-var _watch = function(){\n-\n+var _watch = function(args){\n   roots.print.compiling();\n+  if (args.open == false) roots.project.open = false",
        "path": "lib/commands/watch.js",
        "position": null,
        "original_position": 8,
        "commit_id": "cd9accc208ed518bfb9a838a788088642952c11e",
        "original_commit_id": "52ad6136216074b08bab8ebb013335c423099398",
        "user": {
            "login": "kylemac",
            "id": 49507,
            "node_id": "MDQ6VXNlcjQ5NTA3",
            "avatar_url": "https://avatars2.githubusercontent.com/u/49507?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kylemac",
            "html_url": "https://github.com/kylemac",
            "followers_url": "https://api.github.com/users/kylemac/followers",
            "following_url": "https://api.github.com/users/kylemac/following{/other_user}",
            "gists_url": "https://api.github.com/users/kylemac/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kylemac/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kylemac/subscriptions",
            "organizations_url": "https://api.github.com/users/kylemac/orgs",
            "repos_url": "https://api.github.com/users/kylemac/repos",
            "events_url": "https://api.github.com/users/kylemac/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kylemac/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I noticed brackets weren't used in the [compile command](https://github.com/jenius/roots/blob/transformers/lib/commands/compile.js#L8) too \n",
        "created_at": "2013-10-23T01:54:05Z",
        "updated_at": "2013-10-23T02:07:23Z",
        "html_url": "https://github.com/jescalan/roots/pull/256#discussion_r7146178",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/256",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/7146178"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/256#discussion_r7146178"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/256"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/7146296",
        "pull_request_review_id": null,
        "id": 7146296,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcxNDYyOTY=",
        "diff_hunk": "@@ -11,9 +11,9 @@ var path = require('path'),\n roots.server = require('../server');\n _.bindAll(roots.print, 'reload');\n \n-var _watch = function(){\n-\n+var _watch = function(args){\n   roots.print.compiling();\n+  if (args.open == false) roots.project.open = false",
        "path": "lib/commands/watch.js",
        "position": null,
        "original_position": 8,
        "commit_id": "cd9accc208ed518bfb9a838a788088642952c11e",
        "original_commit_id": "52ad6136216074b08bab8ebb013335c423099398",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I guess this is up to @jenius \n\nMy pref and best practice IMHO is to use { } even for single line if statements \n",
        "created_at": "2013-10-23T02:04:50Z",
        "updated_at": "2013-10-23T02:07:23Z",
        "html_url": "https://github.com/jescalan/roots/pull/256#discussion_r7146296",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/256",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/7146296"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/256#discussion_r7146296"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/256"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/7146365",
        "pull_request_review_id": null,
        "id": 7146365,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcxNDYzNjU=",
        "diff_hunk": "@@ -11,9 +11,9 @@ var path = require('path'),\n roots.server = require('../server');\n _.bindAll(roots.print, 'reload');\n \n-var _watch = function(){\n-\n+var _watch = function(args){\n   roots.print.compiling();\n+  if (args.open == false) roots.project.open = false",
        "path": "lib/commands/watch.js",
        "position": null,
        "original_position": 8,
        "commit_id": "cd9accc208ed518bfb9a838a788088642952c11e",
        "original_commit_id": "52ad6136216074b08bab8ebb013335c423099398",
        "user": {
            "login": "kylemac",
            "id": 49507,
            "node_id": "MDQ6VXNlcjQ5NTA3",
            "avatar_url": "https://avatars2.githubusercontent.com/u/49507?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kylemac",
            "html_url": "https://github.com/kylemac",
            "followers_url": "https://api.github.com/users/kylemac/followers",
            "following_url": "https://api.github.com/users/kylemac/following{/other_user}",
            "gists_url": "https://api.github.com/users/kylemac/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kylemac/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kylemac/subscriptions",
            "organizations_url": "https://api.github.com/users/kylemac/orgs",
            "repos_url": "https://api.github.com/users/kylemac/repos",
            "events_url": "https://api.github.com/users/kylemac/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kylemac/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ah gotcha, I went to multi-line in my most recent commit. I'll just wait for a ruling by @jenius \n",
        "created_at": "2013-10-23T02:10:46Z",
        "updated_at": "2013-10-23T02:10:46Z",
        "html_url": "https://github.com/jescalan/roots/pull/256#discussion_r7146365",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/256",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/7146365"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/256#discussion_r7146365"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/256"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/7144134",
        "pull_request_review_id": null,
        "id": 7144134,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcxNDQxMzQ=",
        "diff_hunk": "@@ -8,7 +8,7 @@ var path = require('path'),\n \n module.exports = function(file){\n   var dirs = roots.project.dirs;\n-  var extension = path.basename(file).split('.')[1]; // this should take the *first* extension only\n+  var extensions = path.basename(file).split('.'); // this should take the *first* extension only",
        "path": "lib/utils/output_path.js",
        "position": null,
        "original_position": 5,
        "commit_id": "1a2714536edea8972cfe8026061197924d7f2c5b",
        "original_commit_id": "8081769010a03c78f3bf290b0cf41c020ce5fc06",
        "user": {
            "login": "declandewet",
            "id": 1918632,
            "node_id": "MDQ6VXNlcjE5MTg2MzI=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1918632?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/declandewet",
            "html_url": "https://github.com/declandewet",
            "followers_url": "https://api.github.com/users/declandewet/followers",
            "following_url": "https://api.github.com/users/declandewet/following{/other_user}",
            "gists_url": "https://api.github.com/users/declandewet/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/declandewet/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/declandewet/subscriptions",
            "organizations_url": "https://api.github.com/users/declandewet/orgs",
            "repos_url": "https://api.github.com/users/declandewet/repos",
            "events_url": "https://api.github.com/users/declandewet/events{/privacy}",
            "received_events_url": "https://api.github.com/users/declandewet/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think it'd be a good idea to change the comment here too, since this no longer takes \"the _first_ extension only\". Could be confusing if this is left in.\n",
        "created_at": "2013-10-22T23:28:29Z",
        "updated_at": "2013-10-24T16:54:47Z",
        "html_url": "https://github.com/jescalan/roots/pull/255#discussion_r7144134",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/255",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/7144134"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/255#discussion_r7144134"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/255"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/7144739",
        "pull_request_review_id": null,
        "id": 7144739,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcxNDQ3Mzk=",
        "diff_hunk": "@@ -8,7 +8,7 @@ var path = require('path'),\n \n module.exports = function(file){\n   var dirs = roots.project.dirs;\n-  var extension = path.basename(file).split('.')[1]; // this should take the *first* extension only\n+  var extensions = path.basename(file).split('.'); // this should take the *first* extension only",
        "path": "lib/utils/output_path.js",
        "position": null,
        "original_position": 5,
        "commit_id": "1a2714536edea8972cfe8026061197924d7f2c5b",
        "original_commit_id": "8081769010a03c78f3bf290b0cf41c020ce5fc06",
        "user": {
            "login": "kylemac",
            "id": 49507,
            "node_id": "MDQ6VXNlcjQ5NTA3",
            "avatar_url": "https://avatars2.githubusercontent.com/u/49507?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kylemac",
            "html_url": "https://github.com/kylemac",
            "followers_url": "https://api.github.com/users/kylemac/followers",
            "following_url": "https://api.github.com/users/kylemac/following{/other_user}",
            "gists_url": "https://api.github.com/users/kylemac/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kylemac/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kylemac/subscriptions",
            "organizations_url": "https://api.github.com/users/kylemac/orgs",
            "repos_url": "https://api.github.com/users/kylemac/repos",
            "events_url": "https://api.github.com/users/kylemac/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kylemac/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Thanks @declandewet, meant to pull that out. \n",
        "created_at": "2013-10-23T00:02:09Z",
        "updated_at": "2013-10-24T16:54:47Z",
        "html_url": "https://github.com/jescalan/roots/pull/255#discussion_r7144739",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/255",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/7144739"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/255#discussion_r7144739"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/255"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/7163944",
        "pull_request_review_id": null,
        "id": 7163944,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcxNjM5NDQ=",
        "diff_hunk": "@@ -18,10 +18,13 @@ module.exports = function(file){\n   base_folder.unshift(dirs['public']);\n   result = base_folder.join(path.sep);\n \n-  // swap extension if needed\n-  if (adapters[extension]) {\n-    result = result.replace(new RegExp('\\\\.' + extension + '.*'), '.' + adapters[extension].settings.target);\n+  // iterate through extensions (starting with index #1) to find an adapter\n+  for (var i = 1; i < extensions.length; i++) {\n+    if ( adapters[extensions[i]] ) {\n+      result = result.replace(new RegExp('\\\\.' + extensions[i] + '.*'), '.' + adapters[extensions[i]].settings.target);",
        "path": "lib/utils/output_path.js",
        "position": 19,
        "original_position": 19,
        "commit_id": "1a2714536edea8972cfe8026061197924d7f2c5b",
        "original_commit_id": "1f21c2aeefb5dd0a11c450d84b5830624581d05b",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "gosh this regex makes me sad (it being inline)\n\nCan we abstract this to a named function?\n",
        "created_at": "2013-10-23T17:14:01Z",
        "updated_at": "2013-10-24T16:54:47Z",
        "html_url": "https://github.com/jescalan/roots/pull/255#discussion_r7163944",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/255",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/7163944"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/255#discussion_r7163944"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/255"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/7845509",
        "pull_request_review_id": null,
        "id": 7845509,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc4NDU1MDk=",
        "diff_hunk": "@@ -9,6 +10,17 @@ exports.settings =\n   file_type: 'coffee'\n   target: 'js'\n \n+error_formatter = (error, file) ->\n+  return error unless error\n+\n+  new Error \"\n+  \\n\\nFile: #{file.relative_path}\n+  \\nLine\\n\n+  #{error.location.first_line}| #{error.message} \\n\n+  \\n\n+  #{fs.readFileSync(file.path, 'utf8').split(\"\\n\")[error.location.first_line]}\\n\n+  #{new Array(error.location.first_column).join(' ') + '^'}\\n\\n\"",
        "path": "lib/adapters/coffee.coffee",
        "position": 21,
        "original_position": 21,
        "commit_id": "0c0655fef794822914a59d8b2936ce0961fa1e27",
        "original_commit_id": "0c0655fef794822914a59d8b2936ce0961fa1e27",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "i felt like @slang800 here\n",
        "created_at": "2013-11-22T01:13:16Z",
        "updated_at": "2013-11-22T01:13:16Z",
        "html_url": "https://github.com/jescalan/roots/pull/312#discussion_r7845509",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/312",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/7845509"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/312#discussion_r7845509"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/312"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/7846537",
        "pull_request_review_id": null,
        "id": 7846537,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc4NDY1Mzc=",
        "diff_hunk": "@@ -9,6 +10,17 @@ exports.settings =\n   file_type: 'coffee'\n   target: 'js'\n \n+error_formatter = (error, file) ->\n+  return error unless error\n+\n+  new Error \"\n+  \\n\\nFile: #{file.relative_path}\n+  \\nLine\\n\n+  #{error.location.first_line}| #{error.message} \\n\n+  \\n\n+  #{fs.readFileSync(file.path, 'utf8').split(\"\\n\")[error.location.first_line]}\\n\n+  #{new Array(error.location.first_column).join(' ') + '^'}\\n\\n\"",
        "path": "lib/adapters/coffee.coffee",
        "position": 21,
        "original_position": 21,
        "commit_id": "0c0655fef794822914a59d8b2936ce0961fa1e27",
        "original_commit_id": "0c0655fef794822914a59d8b2936ce0961fa1e27",
        "user": {
            "login": "adamjgrant",
            "id": 320494,
            "node_id": "MDQ6VXNlcjMyMDQ5NA==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/320494?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/adamjgrant",
            "html_url": "https://github.com/adamjgrant",
            "followers_url": "https://api.github.com/users/adamjgrant/followers",
            "following_url": "https://api.github.com/users/adamjgrant/following{/other_user}",
            "gists_url": "https://api.github.com/users/adamjgrant/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/adamjgrant/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/adamjgrant/subscriptions",
            "organizations_url": "https://api.github.com/users/adamjgrant/orgs",
            "repos_url": "https://api.github.com/users/adamjgrant/repos",
            "events_url": "https://api.github.com/users/adamjgrant/events{/privacy}",
            "received_events_url": "https://api.github.com/users/adamjgrant/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Thanks. Can you also implement a shout out to me there? Something like, \"I\nwanna send a shout out to my homie Adam. You keep it real, brother.\" will\ndo just fine.\n\nAdam Kochanowicz\n\n2013/11/21 Sam Saccone notifications@github.com\n\n> In lib/adapters/coffee.coffee:\n> \n> > @@ -9,6 +10,17 @@ exports.settings =\n> >    file_type: 'coffee'\n> >    target: 'js'\n> > \n> > +error_formatter = (error, file) ->\n> > -  return error unless error\n> >   +\n> > -  new Error \"\n> > -  \\n\\nFile: #{file.relative_path}\n> > -  \\nLine\\n\n> > -  #{error.location.first_line}| #{error.message} \\n\n> > -  \\n\n> > -  #{fs.readFileSync(file.path, 'utf8').split(\"\\n\")[error.location.first_line]}\\n\n> > -  #{new Array(error.location.first_column).join(' ') + '^'}\\n\\n\"\n> \n> i felt like @slang800 https://github.com/slang800 here\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/jenius/roots/pull/312/files#r7845509\n> .\n",
        "created_at": "2013-11-22T02:16:16Z",
        "updated_at": "2013-11-22T02:16:16Z",
        "html_url": "https://github.com/jescalan/roots/pull/312#discussion_r7846537",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/312",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/7846537"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/312#discussion_r7846537"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/312"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/7857780",
        "pull_request_review_id": null,
        "id": 7857780,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc4NTc3ODA=",
        "diff_hunk": "@@ -9,6 +10,17 @@ exports.settings =\n   file_type: 'coffee'\n   target: 'js'\n \n+error_formatter = (error, file) ->\n+  return error unless error\n+\n+  new Error \"\n+  \\n\\nFile: #{file.relative_path}\n+  \\nLine\\n\n+  #{error.location.first_line}| #{error.message} \\n\n+  \\n\n+  #{fs.readFileSync(file.path, 'utf8').split(\"\\n\")[error.location.first_line]}\\n\n+  #{new Array(error.location.first_column).join(' ') + '^'}\\n\\n\"",
        "path": "lib/adapters/coffee.coffee",
        "position": 21,
        "original_position": 21,
        "commit_id": "0c0655fef794822914a59d8b2936ce0961fa1e27",
        "original_commit_id": "0c0655fef794822914a59d8b2936ce0961fa1e27",
        "user": {
            "login": "jescalan",
            "id": 556932,
            "node_id": "MDQ6VXNlcjU1NjkzMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/556932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jescalan",
            "html_url": "https://github.com/jescalan",
            "followers_url": "https://api.github.com/users/jescalan/followers",
            "following_url": "https://api.github.com/users/jescalan/following{/other_user}",
            "gists_url": "https://api.github.com/users/jescalan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jescalan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jescalan/subscriptions",
            "organizations_url": "https://api.github.com/users/jescalan/orgs",
            "repos_url": "https://api.github.com/users/jescalan/repos",
            "events_url": "https://api.github.com/users/jescalan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jescalan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "haha wat? we gotta get this handling into snockets...\n",
        "created_at": "2013-11-22T14:58:26Z",
        "updated_at": "2013-11-22T14:58:26Z",
        "html_url": "https://github.com/jescalan/roots/pull/312#discussion_r7857780",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/312",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/7857780"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/312#discussion_r7857780"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/312"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/7942702",
        "pull_request_review_id": null,
        "id": 7942702,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc5NDI3MDI=",
        "diff_hunk": "@@ -14,6 +14,10 @@ var argv = process.argv.slice(2),\n     configure_options = require('../lib/config_parser'),\n     commands = require('../lib/commands');\n \n+var errback = function(err){\n+  process.exit(1);\n+}\n+",
        "path": "bin/roots",
        "position": 7,
        "original_position": 7,
        "commit_id": "c3d1c1257dc4c343fced84640a54d79d567d55d7",
        "original_commit_id": "c3d1c1257dc4c343fced84640a54d79d567d55d7",
        "user": {
            "login": "aawilson",
            "id": 57950,
            "node_id": "MDQ6VXNlcjU3OTUw",
            "avatar_url": "https://avatars0.githubusercontent.com/u/57950?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aawilson",
            "html_url": "https://github.com/aawilson",
            "followers_url": "https://api.github.com/users/aawilson/followers",
            "following_url": "https://api.github.com/users/aawilson/following{/other_user}",
            "gists_url": "https://api.github.com/users/aawilson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/aawilson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/aawilson/subscriptions",
            "organizations_url": "https://api.github.com/users/aawilson/orgs",
            "repos_url": "https://api.github.com/users/aawilson/repos",
            "events_url": "https://api.github.com/users/aawilson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/aawilson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "One note about this--I don't deal with the err stream object here, relying on the compiler itself to handle it, because compiler already prints error output on its own error handler. It's kind of weird to depend on that, so it might make sense to move the print functionality out of index.js and into its callers (this, and the roots watch command).\n",
        "created_at": "2013-11-26T22:42:19Z",
        "updated_at": "2013-11-26T22:42:19Z",
        "html_url": "https://github.com/jescalan/roots/pull/321#discussion_r7942702",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/321",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/7942702"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/321#discussion_r7942702"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/321"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/7970715",
        "pull_request_review_id": null,
        "id": 7970715,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc5NzA3MTU=",
        "diff_hunk": "@@ -9,6 +10,17 @@ exports.settings =\n   file_type: 'coffee'\n   target: 'js'\n \n+error_formatter = (error, file) ->\n+  return error unless error\n+\n+  new Error \"\n+  \\n\\nFile: #{file.relative_path}\n+  \\nLine\\n\n+  #{error.location.first_line}| #{error.message} \\n\n+  \\n\n+  #{fs.readFileSync(file.path, 'utf8').split(\"\\n\")[error.location.first_line]}\\n\n+  #{new Array(error.location.first_column).join(' ') + '^'}\\n\\n\"",
        "path": "lib/adapters/coffee.coffee",
        "position": 21,
        "original_position": 21,
        "commit_id": "0c0655fef794822914a59d8b2936ce0961fa1e27",
        "original_commit_id": "0c0655fef794822914a59d8b2936ce0961fa1e27",
        "user": {
            "login": "slang800",
            "id": 1049204,
            "node_id": "MDQ6VXNlcjEwNDkyMDQ=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1049204?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/slang800",
            "html_url": "https://github.com/slang800",
            "followers_url": "https://api.github.com/users/slang800/followers",
            "following_url": "https://api.github.com/users/slang800/following{/other_user}",
            "gists_url": "https://api.github.com/users/slang800/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/slang800/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/slang800/subscriptions",
            "organizations_url": "https://api.github.com/users/slang800/orgs",
            "repos_url": "https://api.github.com/users/slang800/repos",
            "events_url": "https://api.github.com/users/slang800/events{/privacy}",
            "received_events_url": "https://api.github.com/users/slang800/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "lol, what? ... i feel like i'm missing some context here.\n",
        "created_at": "2013-11-27T21:44:52Z",
        "updated_at": "2013-11-27T21:44:52Z",
        "html_url": "https://github.com/jescalan/roots/pull/312#discussion_r7970715",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/312",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/7970715"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/312#discussion_r7970715"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/312"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/8452100",
        "pull_request_review_id": null,
        "id": 8452100,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0NTIxMDA=",
        "diff_hunk": "@@ -0,0 +1,16 @@\n+require 'colors'\n+Roots = require '../'\n+\n+exports.execute = (args) ->\n+  args = args._\n+  if args.length < 2 then return console.log 'help'\n+  \n+  promise = switch args[1]\n+    when 'add' then Roots.template.add(name: args[2], url: args[3])",
        "path": "lib/commands/tpl.coffee",
        "position": 9,
        "original_position": 9,
        "commit_id": "468b835c711083b76e5498a887ba585dddc7981f",
        "original_commit_id": "af64a8326c70ecf7da7a783a641ad9f3bafd72ec",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\u00ba_\u00ba arg parsing\n",
        "created_at": "2013-12-18T21:36:10Z",
        "updated_at": "2013-12-20T20:14:14Z",
        "html_url": "https://github.com/jescalan/roots/pull/352#discussion_r8452100",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/352",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/8452100"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/352#discussion_r8452100"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/352"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/8452137",
        "pull_request_review_id": null,
        "id": 8452137,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0NTIxMzc=",
        "diff_hunk": "@@ -0,0 +1,16 @@\n+require 'colors'\n+Roots = require '../'\n+\n+exports.execute = (args) ->\n+  args = args._\n+  if args.length < 2 then return console.log 'help'\n+  \n+  promise = switch args[1]\n+    when 'add' then Roots.template.add(name: args[2], url: args[3])",
        "path": "lib/commands/tpl.coffee",
        "position": 9,
        "original_position": 9,
        "commit_id": "468b835c711083b76e5498a887ba585dddc7981f",
        "original_commit_id": "af64a8326c70ecf7da7a783a641ad9f3bafd72ec",
        "user": {
            "login": "jescalan",
            "id": 556932,
            "node_id": "MDQ6VXNlcjU1NjkzMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/556932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jescalan",
            "html_url": "https://github.com/jescalan",
            "followers_url": "https://api.github.com/users/jescalan/followers",
            "following_url": "https://api.github.com/users/jescalan/following{/other_user}",
            "gists_url": "https://api.github.com/users/jescalan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jescalan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jescalan/subscriptions",
            "organizations_url": "https://api.github.com/users/jescalan/orgs",
            "repos_url": "https://api.github.com/users/jescalan/repos",
            "events_url": "https://api.github.com/users/jescalan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jescalan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "?\n",
        "created_at": "2013-12-18T21:36:52Z",
        "updated_at": "2013-12-20T20:14:14Z",
        "html_url": "https://github.com/jescalan/roots/pull/352#discussion_r8452137",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/352",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/8452137"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/352#discussion_r8452137"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/352"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/8452148",
        "pull_request_review_id": null,
        "id": 8452148,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0NTIxNDg=",
        "diff_hunk": "@@ -13,17 +14,17 @@ describe 'new', ->\n   it 'should throw if not given a path', ->\n     (-> Roots.new()).should.throw\n \n-  it 'should create a project with the base template, emit all events, and return a roots instance from the callback', (done) ->\n+  it 'should create a project with the base tpl, emit all events, and return a roots instance from the callback', (done) ->\n     p = path.join(test_path, 'testing')\n \n     events = 0\n     increment = -> ++events\n \n     finish = (err) ->\n+      if err then return done(err)\n       events.should.be.above(2)\n       rimraf.sync(p)\n-      # roots.template.remove('sprout', -> done(err))\n-      done(err)\n+      Roots.template.remove('base').done((-> done()), done)",
        "path": "test/new_test.coffee",
        "position": 25,
        "original_position": 25,
        "commit_id": "468b835c711083b76e5498a887ba585dddc7981f",
        "original_commit_id": "af64a8326c70ecf7da7a783a641ad9f3bafd72ec",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Roots.template.remove('base').done(done, done) ?\n",
        "created_at": "2013-12-18T21:37:14Z",
        "updated_at": "2013-12-20T20:14:14Z",
        "html_url": "https://github.com/jescalan/roots/pull/352#discussion_r8452148",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/352",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/8452148"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/352#discussion_r8452148"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/352"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/8452197",
        "pull_request_review_id": null,
        "id": 8452197,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0NTIxOTc=",
        "diff_hunk": "@@ -13,17 +14,17 @@ describe 'new', ->\n   it 'should throw if not given a path', ->\n     (-> Roots.new()).should.throw\n \n-  it 'should create a project with the base template, emit all events, and return a roots instance from the callback', (done) ->\n+  it 'should create a project with the base tpl, emit all events, and return a roots instance from the callback', (done) ->\n     p = path.join(test_path, 'testing')\n \n     events = 0\n     increment = -> ++events\n \n     finish = (err) ->\n+      if err then return done(err)\n       events.should.be.above(2)\n       rimraf.sync(p)\n-      # roots.template.remove('sprout', -> done(err))\n-      done(err)\n+      Roots.template.remove('base').done((-> done()), done)",
        "path": "test/new_test.coffee",
        "position": 25,
        "original_position": 25,
        "commit_id": "468b835c711083b76e5498a887ba585dddc7981f",
        "original_commit_id": "af64a8326c70ecf7da7a783a641ad9f3bafd72ec",
        "user": {
            "login": "jescalan",
            "id": 556932,
            "node_id": "MDQ6VXNlcjU1NjkzMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/556932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jescalan",
            "html_url": "https://github.com/jescalan",
            "followers_url": "https://api.github.com/users/jescalan/followers",
            "following_url": "https://api.github.com/users/jescalan/following{/other_user}",
            "gists_url": "https://api.github.com/users/jescalan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jescalan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jescalan/subscriptions",
            "organizations_url": "https://api.github.com/users/jescalan/orgs",
            "repos_url": "https://api.github.com/users/jescalan/repos",
            "events_url": "https://api.github.com/users/jescalan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jescalan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "remove actually passes a status string through to the success function, so it reports a failure if its called like that\n",
        "created_at": "2013-12-18T21:38:15Z",
        "updated_at": "2013-12-20T20:14:14Z",
        "html_url": "https://github.com/jescalan/roots/pull/352#discussion_r8452197",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/352",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/8452197"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/352#discussion_r8452197"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/352"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/8452424",
        "pull_request_review_id": null,
        "id": 8452424,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0NTI0MjQ=",
        "diff_hunk": "@@ -13,17 +14,17 @@ describe 'new', ->\n   it 'should throw if not given a path', ->\n     (-> Roots.new()).should.throw\n \n-  it 'should create a project with the base template, emit all events, and return a roots instance from the callback', (done) ->\n+  it 'should create a project with the base tpl, emit all events, and return a roots instance from the callback', (done) ->\n     p = path.join(test_path, 'testing')\n \n     events = 0\n     increment = -> ++events\n \n     finish = (err) ->\n+      if err then return done(err)\n       events.should.be.above(2)\n       rimraf.sync(p)\n-      # roots.template.remove('sprout', -> done(err))\n-      done(err)\n+      Roots.template.remove('base').done((-> done()), done)",
        "path": "test/new_test.coffee",
        "position": 25,
        "original_position": 25,
        "commit_id": "468b835c711083b76e5498a887ba585dddc7981f",
        "original_commit_id": "af64a8326c70ecf7da7a783a641ad9f3bafd72ec",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "why does it not follow the (err, d) pattern?\n",
        "created_at": "2013-12-18T21:43:14Z",
        "updated_at": "2013-12-20T20:14:14Z",
        "html_url": "https://github.com/jescalan/roots/pull/352#discussion_r8452424",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/352",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/8452424"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/352#discussion_r8452424"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/352"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/8452441",
        "pull_request_review_id": null,
        "id": 8452441,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0NTI0NDE=",
        "diff_hunk": "@@ -0,0 +1,16 @@\n+require 'colors'\n+Roots = require '../'\n+\n+exports.execute = (args) ->\n+  args = args._\n+  if args.length < 2 then return console.log 'help'\n+  \n+  promise = switch args[1]\n+    when 'add' then Roots.template.add(name: args[2], url: args[3])",
        "path": "lib/commands/tpl.coffee",
        "position": 9,
        "original_position": 9,
        "commit_id": "468b835c711083b76e5498a887ba585dddc7981f",
        "original_commit_id": "af64a8326c70ecf7da7a783a641ad9f3bafd72ec",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "why not use a tool like commander\n\nno need to reinvent the wheel\n",
        "created_at": "2013-12-18T21:43:39Z",
        "updated_at": "2013-12-20T20:14:14Z",
        "html_url": "https://github.com/jescalan/roots/pull/352#discussion_r8452441",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/352",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/8452441"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/352#discussion_r8452441"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/352"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/8452476",
        "pull_request_review_id": null,
        "id": 8452476,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0NTI0NzY=",
        "diff_hunk": "@@ -13,17 +14,17 @@ describe 'new', ->\n   it 'should throw if not given a path', ->\n     (-> Roots.new()).should.throw\n \n-  it 'should create a project with the base template, emit all events, and return a roots instance from the callback', (done) ->\n+  it 'should create a project with the base tpl, emit all events, and return a roots instance from the callback', (done) ->\n     p = path.join(test_path, 'testing')\n \n     events = 0\n     increment = -> ++events\n \n     finish = (err) ->\n+      if err then return done(err)\n       events.should.be.above(2)\n       rimraf.sync(p)\n-      # roots.template.remove('sprout', -> done(err))\n-      done(err)\n+      Roots.template.remove('base').done((-> done()), done)",
        "path": "test/new_test.coffee",
        "position": 25,
        "original_position": 25,
        "commit_id": "468b835c711083b76e5498a887ba585dddc7981f",
        "original_commit_id": "af64a8326c70ecf7da7a783a641ad9f3bafd72ec",
        "user": {
            "login": "jescalan",
            "id": 556932,
            "node_id": "MDQ6VXNlcjU1NjkzMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/556932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jescalan",
            "html_url": "https://github.com/jescalan",
            "followers_url": "https://api.github.com/users/jescalan/followers",
            "following_url": "https://api.github.com/users/jescalan/following{/other_user}",
            "gists_url": "https://api.github.com/users/jescalan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jescalan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jescalan/subscriptions",
            "organizations_url": "https://api.github.com/users/jescalan/orgs",
            "repos_url": "https://api.github.com/users/jescalan/repos",
            "events_url": "https://api.github.com/users/jescalan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jescalan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This is a promise, so the err is the second function, the first one only handles success.\n",
        "created_at": "2013-12-18T21:44:38Z",
        "updated_at": "2013-12-20T20:14:14Z",
        "html_url": "https://github.com/jescalan/roots/pull/352#discussion_r8452476",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/352",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/8452476"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/352#discussion_r8452476"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/352"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/8452526",
        "pull_request_review_id": null,
        "id": 8452526,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0NTI1MjY=",
        "diff_hunk": "@@ -13,17 +14,17 @@ describe 'new', ->\n   it 'should throw if not given a path', ->\n     (-> Roots.new()).should.throw\n \n-  it 'should create a project with the base template, emit all events, and return a roots instance from the callback', (done) ->\n+  it 'should create a project with the base tpl, emit all events, and return a roots instance from the callback', (done) ->\n     p = path.join(test_path, 'testing')\n \n     events = 0\n     increment = -> ++events\n \n     finish = (err) ->\n+      if err then return done(err)\n       events.should.be.above(2)\n       rimraf.sync(p)\n-      # roots.template.remove('sprout', -> done(err))\n-      done(err)\n+      Roots.template.remove('base').done((-> done()), done)",
        "path": "test/new_test.coffee",
        "position": 25,
        "original_position": 25,
        "commit_id": "468b835c711083b76e5498a887ba585dddc7981f",
        "original_commit_id": "af64a8326c70ecf7da7a783a641ad9f3bafd72ec",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "oh frick ok :+1: \n",
        "created_at": "2013-12-18T21:46:04Z",
        "updated_at": "2013-12-20T20:14:14Z",
        "html_url": "https://github.com/jescalan/roots/pull/352#discussion_r8452526",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/352",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/8452526"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/352#discussion_r8452526"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/352"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/8452580",
        "pull_request_review_id": null,
        "id": 8452580,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0NTI1ODA=",
        "diff_hunk": "@@ -13,17 +14,17 @@ describe 'new', ->\n   it 'should throw if not given a path', ->\n     (-> Roots.new()).should.throw\n \n-  it 'should create a project with the base template, emit all events, and return a roots instance from the callback', (done) ->\n+  it 'should create a project with the base tpl, emit all events, and return a roots instance from the callback', (done) ->\n     p = path.join(test_path, 'testing')\n \n     events = 0\n     increment = -> ++events\n \n     finish = (err) ->\n+      if err then return done(err)\n       events.should.be.above(2)\n       rimraf.sync(p)\n-      # roots.template.remove('sprout', -> done(err))\n-      done(err)\n+      Roots.template.remove('base').done((-> done()), done)",
        "path": "test/new_test.coffee",
        "position": 25,
        "original_position": 25,
        "commit_id": "468b835c711083b76e5498a887ba585dddc7981f",
        "original_commit_id": "af64a8326c70ecf7da7a783a641ad9f3bafd72ec",
        "user": {
            "login": "jescalan",
            "id": 556932,
            "node_id": "MDQ6VXNlcjU1NjkzMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/556932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jescalan",
            "html_url": "https://github.com/jescalan",
            "followers_url": "https://api.github.com/users/jescalan/followers",
            "following_url": "https://api.github.com/users/jescalan/following{/other_user}",
            "gists_url": "https://api.github.com/users/jescalan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jescalan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jescalan/subscriptions",
            "organizations_url": "https://api.github.com/users/jescalan/orgs",
            "repos_url": "https://api.github.com/users/jescalan/repos",
            "events_url": "https://api.github.com/users/jescalan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jescalan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": ":sunglasses:  It is a little of a weird pattern though wrapping another closure just to strip the args so I can see why you called this out\n",
        "created_at": "2013-12-18T21:47:31Z",
        "updated_at": "2013-12-20T20:14:14Z",
        "html_url": "https://github.com/jescalan/roots/pull/352#discussion_r8452580",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/352",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/8452580"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/352#discussion_r8452580"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/352"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/8512562",
        "pull_request_review_id": null,
        "id": 8512562,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1MTI1NjI=",
        "diff_hunk": "@@ -0,0 +1,16 @@\n+require 'colors'\n+Roots = require '../'\n+\n+exports.execute = (args) ->\n+  args = args._\n+  if args.length < 2 then return console.log 'help'\n+  \n+  promise = switch args[1]\n+    when 'add' then Roots.template.add(name: args[2], url: args[3])",
        "path": "lib/commands/tpl.coffee",
        "position": 9,
        "original_position": 9,
        "commit_id": "468b835c711083b76e5498a887ba585dddc7981f",
        "original_commit_id": "af64a8326c70ecf7da7a783a641ad9f3bafd72ec",
        "user": {
            "login": "jescalan",
            "id": 556932,
            "node_id": "MDQ6VXNlcjU1NjkzMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/556932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jescalan",
            "html_url": "https://github.com/jescalan",
            "followers_url": "https://api.github.com/users/jescalan/followers",
            "following_url": "https://api.github.com/users/jescalan/following{/other_user}",
            "gists_url": "https://api.github.com/users/jescalan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jescalan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jescalan/subscriptions",
            "organizations_url": "https://api.github.com/users/jescalan/orgs",
            "repos_url": "https://api.github.com/users/jescalan/repos",
            "events_url": "https://api.github.com/users/jescalan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jescalan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "commander doesnt support args that are not flags\n",
        "created_at": "2013-12-20T22:10:21Z",
        "updated_at": "2013-12-20T22:10:21Z",
        "html_url": "https://github.com/jescalan/roots/pull/352#discussion_r8512562",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/352",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/8512562"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/352#discussion_r8512562"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/352"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/8538063",
        "pull_request_review_id": null,
        "id": 8538063,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1MzgwNjM=",
        "diff_hunk": "@@ -0,0 +1,50 @@\n+!(function(){\n+  var loc = window.location;\n+  var protocol = loc.protocol === 'http:' ? 'ws://' : 'wss://';\n+  var address = protocol + loc.host + loc.pathname + '/ws';\n+  (new WebSocket(address)).onmessage = handle_msg;\n+\n+  var handlers = {\n+    error: show_error,\n+    compiling: show_compiling,\n+    reload: function(){ loc.reload() }\n+  }\n+\n+  insert_css();\n+  load_config();\n+\n+  function handle_msg(msg){\n+    var msg = JSON.parse(msg.data);\n+    console.log(msg)",
        "path": "lib/browser/main.js",
        "position": null,
        "original_position": 18,
        "commit_id": "48868ea7e1d5c0be6f36c541cf5553d2a63e81ae",
        "original_commit_id": "48232c2aa61c5e6e3eb219b1fa469569cd83f872",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "kill\n",
        "created_at": "2013-12-24T01:57:16Z",
        "updated_at": "2013-12-31T20:07:21Z",
        "html_url": "https://github.com/jescalan/roots/pull/356#discussion_r8538063",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/356",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/8538063"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/356#discussion_r8538063"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/356"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/8538072",
        "pull_request_review_id": null,
        "id": 8538072,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1MzgwNzI=",
        "diff_hunk": "@@ -1,54 +1,64 @@\n-nodefn  = require 'when/node/function'\n-http    = require 'http'\n-connect = require 'connect'\n+path      = require 'path'\n+nodefn    = require 'when/node/function'\n+http      = require 'http'\n+connect   = require 'connect'\n+injector  = require 'injector_js'",
        "path": "lib/local_server.coffee",
        "position": null,
        "original_position": 8,
        "commit_id": "48868ea7e1d5c0be6f36c541cf5553d2a63e81ae",
        "original_commit_id": "48232c2aa61c5e6e3eb219b1fa469569cd83f872",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "infector now\n",
        "created_at": "2013-12-24T01:57:45Z",
        "updated_at": "2013-12-31T20:07:21Z",
        "html_url": "https://github.com/jescalan/roots/pull/356#discussion_r8538072",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/356",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/8538072"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/356#discussion_r8538072"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/356"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/8538082",
        "pull_request_review_id": null,
        "id": 8538082,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1MzgwODI=",
        "diff_hunk": "@@ -35,7 +35,9 @@\n     \"open\": \"0.0.4\",\n     \"connect\": \"2.x.x\",\n     \"sprout\": \"0.0.x\",\n-    \"configstore\": \"0.1.x\"\n+    \"configstore\": \"0.1.x\",\n+    \"injector_js\": \"0.1.x\",",
        "path": "package.json",
        "position": null,
        "original_position": 6,
        "commit_id": "48868ea7e1d5c0be6f36c541cf5553d2a63e81ae",
        "original_commit_id": "48232c2aa61c5e6e3eb219b1fa469569cd83f872",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "infector now\n",
        "created_at": "2013-12-24T01:58:27Z",
        "updated_at": "2013-12-31T20:07:21Z",
        "html_url": "https://github.com/jescalan/roots/pull/356#discussion_r8538082",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/356",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/8538082"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/356#discussion_r8538082"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/356"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/10319758",
        "pull_request_review_id": null,
        "id": 10319758,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzE5NzU4",
        "diff_hunk": "@@ -106,6 +106,7 @@ class Config\n   out: (f, ext) ->\n     res = f.relative.split(path.sep)\n     if _.contains(@dump_dirs, res[0]) then res.shift()\n+    res = res.map(encodeURIComponent)",
        "path": "lib/config.coffee",
        "position": 31,
        "original_position": 22,
        "commit_id": "2c83d481fc213dcd5b26963dc4a0b83484c3fd55",
        "original_commit_id": "3c87210a9e06690451930283b9fb43f01930e801",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "what is this for?\n",
        "created_at": "2014-03-05T21:37:51Z",
        "updated_at": "2014-03-05T22:25:15Z",
        "html_url": "https://github.com/jescalan/roots/pull/406#discussion_r10319758",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/406",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/10319758"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/406#discussion_r10319758"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/406"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/10319865",
        "pull_request_review_id": null,
        "id": 10319865,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzE5ODY1",
        "diff_hunk": "@@ -106,6 +106,7 @@ class Config\n   out: (f, ext) ->\n     res = f.relative.split(path.sep)\n     if _.contains(@dump_dirs, res[0]) then res.shift()\n+    res = res.map(encodeURIComponent)",
        "path": "lib/config.coffee",
        "position": 31,
        "original_position": 22,
        "commit_id": "2c83d481fc213dcd5b26963dc4a0b83484c3fd55",
        "original_commit_id": "3c87210a9e06690451930283b9fb43f01930e801",
        "user": {
            "login": "jescalan",
            "id": 556932,
            "node_id": "MDQ6VXNlcjU1NjkzMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/556932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jescalan",
            "html_url": "https://github.com/jescalan",
            "followers_url": "https://api.github.com/users/jescalan/followers",
            "following_url": "https://api.github.com/users/jescalan/following{/other_user}",
            "gists_url": "https://api.github.com/users/jescalan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jescalan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jescalan/subscriptions",
            "organizations_url": "https://api.github.com/users/jescalan/orgs",
            "repos_url": "https://api.github.com/users/jescalan/repos",
            "events_url": "https://api.github.com/users/jescalan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jescalan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It's for encoding the uri component dawg\n",
        "created_at": "2014-03-05T21:39:50Z",
        "updated_at": "2014-03-05T22:25:15Z",
        "html_url": "https://github.com/jescalan/roots/pull/406#discussion_r10319865",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/406",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/10319865"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/406#discussion_r10319865"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/406"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/10319971",
        "pull_request_review_id": null,
        "id": 10319971,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzE5OTcx",
        "diff_hunk": "@@ -106,6 +106,7 @@ class Config\n   out: (f, ext) ->\n     res = f.relative.split(path.sep)\n     if _.contains(@dump_dirs, res[0]) then res.shift()\n+    res = res.map(encodeURIComponent)",
        "path": "lib/config.coffee",
        "position": 31,
        "original_position": 22,
        "commit_id": "2c83d481fc213dcd5b26963dc4a0b83484c3fd55",
        "original_commit_id": "3c87210a9e06690451930283b9fb43f01930e801",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "can we leave a note because it is a WAT\n",
        "created_at": "2014-03-05T21:42:04Z",
        "updated_at": "2014-03-05T22:25:15Z",
        "html_url": "https://github.com/jescalan/roots/pull/406#discussion_r10319971",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/406",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/10319971"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/406#discussion_r10319971"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/406"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/10320227",
        "pull_request_review_id": null,
        "id": 10320227,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzIwMjI3",
        "diff_hunk": "@@ -106,6 +106,7 @@ class Config\n   out: (f, ext) ->\n     res = f.relative.split(path.sep)\n     if _.contains(@dump_dirs, res[0]) then res.shift()\n+    res = res.map(encodeURIComponent)",
        "path": "lib/config.coffee",
        "position": 31,
        "original_position": 22,
        "commit_id": "2c83d481fc213dcd5b26963dc4a0b83484c3fd55",
        "original_commit_id": "3c87210a9e06690451930283b9fb43f01930e801",
        "user": {
            "login": "jescalan",
            "id": 556932,
            "node_id": "MDQ6VXNlcjU1NjkzMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/556932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jescalan",
            "html_url": "https://github.com/jescalan",
            "followers_url": "https://api.github.com/users/jescalan/followers",
            "following_url": "https://api.github.com/users/jescalan/following{/other_user}",
            "gists_url": "https://api.github.com/users/jescalan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jescalan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jescalan/subscriptions",
            "organizations_url": "https://api.github.com/users/jescalan/orgs",
            "repos_url": "https://api.github.com/users/jescalan/repos",
            "events_url": "https://api.github.com/users/jescalan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jescalan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yeah probably i should add something about it to the docs above 1 sec\n",
        "created_at": "2014-03-05T21:47:21Z",
        "updated_at": "2014-03-05T22:25:15Z",
        "html_url": "https://github.com/jescalan/roots/pull/406#discussion_r10320227",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/406",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/10320227"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/406#discussion_r10320227"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/406"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/10320601",
        "pull_request_review_id": null,
        "id": 10320601,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzIwNjAx",
        "diff_hunk": "@@ -106,6 +106,7 @@ class Config\n   out: (f, ext) ->\n     res = f.relative.split(path.sep)\n     if _.contains(@dump_dirs, res[0]) then res.shift()\n+    res = res.map(encodeURIComponent)",
        "path": "lib/config.coffee",
        "position": 31,
        "original_position": 22,
        "commit_id": "2c83d481fc213dcd5b26963dc4a0b83484c3fd55",
        "original_commit_id": "3c87210a9e06690451930283b9fb43f01930e801",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "![](http://images1.wikia.nocookie.net/__cb20130502191034/spongebob/images/8/8f/Five_Minutes_Later.PNG)\n",
        "created_at": "2014-03-05T21:54:13Z",
        "updated_at": "2014-03-05T22:25:15Z",
        "html_url": "https://github.com/jescalan/roots/pull/406#discussion_r10320601",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/406",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/10320601"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/406#discussion_r10320601"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/406"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/10838557",
        "pull_request_review_id": null,
        "id": 10838557,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODM4NTU3",
        "diff_hunk": "@@ -72,18 +75,21 @@ class Config\n   ###\n \n   load_config = ->\n-    config_path = path.join(@roots.root, 'app')\n-    if not fs.existsSync(\"#{config_path}.coffee\") then return\n+    basename = if @env is 'development' then \"app\" else \"app.#{@env}\"\n+    config_path = path.join(@roots.root, basename)\n+    config_exists = fs.existsSync(\"#{config_path}.coffee\")\n+\n+    if not config_exists",
        "path": "lib/config.coffee",
        "position": 44,
        "original_position": 44,
        "commit_id": "ed6b6d48b7b387da084ccd3897778caf9deeabfd",
        "original_commit_id": "ed6b6d48b7b387da084ccd3897778caf9deeabfd",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "`unless === if not`\n",
        "created_at": "2014-03-21T14:55:43Z",
        "updated_at": "2014-03-21T14:55:43Z",
        "html_url": "https://github.com/jescalan/roots/pull/424#discussion_r10838557",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/424",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/10838557"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/424#discussion_r10838557"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/424"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/10838605",
        "pull_request_review_id": null,
        "id": 10838605,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODM4NjA1",
        "diff_hunk": "@@ -72,18 +75,21 @@ class Config\n   ###\n \n   load_config = ->\n-    config_path = path.join(@roots.root, 'app')\n-    if not fs.existsSync(\"#{config_path}.coffee\") then return\n+    basename = if @env is 'development' then \"app\" else \"app.#{@env}\"\n+    config_path = path.join(@roots.root, basename)\n+    config_exists = fs.existsSync(\"#{config_path}.coffee\")\n+\n+    if not config_exists",
        "path": "lib/config.coffee",
        "position": 44,
        "original_position": 44,
        "commit_id": "ed6b6d48b7b387da084ccd3897778caf9deeabfd",
        "original_commit_id": "ed6b6d48b7b387da084ccd3897778caf9deeabfd",
        "user": {
            "login": "jescalan",
            "id": 556932,
            "node_id": "MDQ6VXNlcjU1NjkzMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/556932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jescalan",
            "html_url": "https://github.com/jescalan",
            "followers_url": "https://api.github.com/users/jescalan/followers",
            "following_url": "https://api.github.com/users/jescalan/following{/other_user}",
            "gists_url": "https://api.github.com/users/jescalan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jescalan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jescalan/subscriptions",
            "organizations_url": "https://api.github.com/users/jescalan/orgs",
            "repos_url": "https://api.github.com/users/jescalan/repos",
            "events_url": "https://api.github.com/users/jescalan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jescalan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I prefer `if not` to `unless` for readability, but yep you are correct\n",
        "created_at": "2014-03-21T14:56:46Z",
        "updated_at": "2014-03-21T14:56:46Z",
        "html_url": "https://github.com/jescalan/roots/pull/424#discussion_r10838605",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/424",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/10838605"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/424#discussion_r10838605"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/424"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/10838629",
        "pull_request_review_id": null,
        "id": 10838629,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODM4NjI5",
        "diff_hunk": "@@ -0,0 +1,29 @@\n+Environments\n+============\n+\n+Often times, you have different environments that your project can live in which require at least slightly different settings. For example, usually a development/local, staging, and production setup is good for most sites. Roots supports environments by allowing different `app.coffee` files to be used for different environments.",
        "path": "docs/environments.rst",
        "position": 4,
        "original_position": 4,
        "commit_id": "ed6b6d48b7b387da084ccd3897778caf9deeabfd",
        "original_commit_id": "ed6b6d48b7b387da084ccd3897778caf9deeabfd",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Often times, you have different environments that your project can live in **,** ...\n",
        "created_at": "2014-03-21T14:57:21Z",
        "updated_at": "2014-03-21T14:57:25Z",
        "html_url": "https://github.com/jescalan/roots/pull/424#discussion_r10838629",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/424",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/10838629"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/424#discussion_r10838629"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/424"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/10859600",
        "pull_request_review_id": null,
        "id": 10859600,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODU5NjAw",
        "diff_hunk": "@@ -0,0 +1,29 @@\n+Environments\n+============\n+\n+Often times, you have different environments that your project can live in which require at least slightly different settings. For example, usually a development/local, staging, and production setup is good for most sites. Roots supports environments by allowing different `app.coffee` files to be used for different environments.",
        "path": "docs/environments.rst",
        "position": 4,
        "original_position": 4,
        "commit_id": "ed6b6d48b7b387da084ccd3897778caf9deeabfd",
        "original_commit_id": "ed6b6d48b7b387da084ccd3897778caf9deeabfd",
        "user": {
            "login": "declandewet",
            "id": 1918632,
            "node_id": "MDQ6VXNlcjE5MTg2MzI=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1918632?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/declandewet",
            "html_url": "https://github.com/declandewet",
            "followers_url": "https://api.github.com/users/declandewet/followers",
            "following_url": "https://api.github.com/users/declandewet/following{/other_user}",
            "gists_url": "https://api.github.com/users/declandewet/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/declandewet/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/declandewet/subscriptions",
            "organizations_url": "https://api.github.com/users/declandewet/orgs",
            "repos_url": "https://api.github.com/users/declandewet/repos",
            "events_url": "https://api.github.com/users/declandewet/events{/privacy}",
            "received_events_url": "https://api.github.com/users/declandewet/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This text is pretty confusing and hard to read... Might I suggest a change to the grammar here? Something like this is more understandable:\n\n> Roots supports different environments by allowing different `app.<environment>.coffee` files. This feature allows you to configure environment settings for your Roots project. Use it to change how your project runs on development, staging, production or other environments. \n",
        "created_at": "2014-03-22T00:48:40Z",
        "updated_at": "2014-03-22T00:48:40Z",
        "html_url": "https://github.com/jescalan/roots/pull/424#discussion_r10859600",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/424",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/10859600"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/424#discussion_r10859600"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/424"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/10863692",
        "pull_request_review_id": null,
        "id": 10863692,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODYzNjky",
        "diff_hunk": "@@ -0,0 +1,29 @@\n+Environments\n+============\n+\n+Often times, you have different environments that your project can live in which require at least slightly different settings. For example, usually a development/local, staging, and production setup is good for most sites. Roots supports environments by allowing different `app.coffee` files to be used for different environments.",
        "path": "docs/environments.rst",
        "position": 4,
        "original_position": 4,
        "commit_id": "ed6b6d48b7b387da084ccd3897778caf9deeabfd",
        "original_commit_id": "ed6b6d48b7b387da084ccd3897778caf9deeabfd",
        "user": {
            "login": "jescalan",
            "id": 556932,
            "node_id": "MDQ6VXNlcjU1NjkzMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/556932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jescalan",
            "html_url": "https://github.com/jescalan",
            "followers_url": "https://api.github.com/users/jescalan/followers",
            "following_url": "https://api.github.com/users/jescalan/following{/other_user}",
            "gists_url": "https://api.github.com/users/jescalan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jescalan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jescalan/subscriptions",
            "organizations_url": "https://api.github.com/users/jescalan/orgs",
            "repos_url": "https://api.github.com/users/jescalan/repos",
            "events_url": "https://api.github.com/users/jescalan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jescalan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Sounds good to me, PR it in?\n",
        "created_at": "2014-03-22T18:58:48Z",
        "updated_at": "2014-03-22T18:58:48Z",
        "html_url": "https://github.com/jescalan/roots/pull/424#discussion_r10863692",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/424",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/10863692"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/424#discussion_r10863692"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/424"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/11328999",
        "pull_request_review_id": null,
        "id": 11328999,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzI4OTk5",
        "diff_hunk": "@@ -127,6 +128,10 @@ class CompileFile\n       .then(process_write_hook_results.bind(@))\n       .then(W.all)\n \n+  setup_extensions = ->\n+    req_setup = @extensions.filter((ext) -> !!ext.setup)",
        "path": "lib/compiler.coffee",
        "position": null,
        "original_position": 13,
        "commit_id": "5567bab4ee534a4bbd8f419adda0f2527db55d29",
        "original_commit_id": "65960e56794bc079af74f520a3a854e939a5d64a",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "what is req_setup?\n\nalso why not just do\n\n`ext.setup?`\n",
        "created_at": "2014-04-07T00:26:13Z",
        "updated_at": "2014-04-07T22:20:38Z",
        "html_url": "https://github.com/jescalan/roots/pull/435#discussion_r11328999",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/435",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/11328999"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/435#discussion_r11328999"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/435"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/11329013",
        "pull_request_review_id": null,
        "id": 11329013,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzI5MDEz",
        "diff_hunk": "@@ -127,6 +128,10 @@ class CompileFile\n       .then(process_write_hook_results.bind(@))\n       .then(W.all)\n \n+  setup_extensions = ->\n+    req_setup = @extensions.filter((ext) -> !!ext.setup)\n+    W.map(req_setup, ((ext) -> ext.setup()))",
        "path": "lib/compiler.coffee",
        "position": null,
        "original_position": 14,
        "commit_id": "5567bab4ee534a4bbd8f419adda0f2527db55d29",
        "original_commit_id": "65960e56794bc079af74f520a3a854e939a5d64a",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "dang it would be nice if there was a when.invoke for this\n",
        "created_at": "2014-04-07T00:28:28Z",
        "updated_at": "2014-04-07T22:20:38Z",
        "html_url": "https://github.com/jescalan/roots/pull/435#discussion_r11329013",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/435",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/11329013"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/435#discussion_r11329013"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/435"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/11329035",
        "pull_request_review_id": null,
        "id": 11329035,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzI5MDM1",
        "diff_hunk": "@@ -53,6 +53,23 @@ With that out of the way, let's lay down the skeleton for a sample extension tha\n \n Notice that an instance of the roots class is passed into the constructor. This instance will give you access to literally any and all information that roots is hanging on to. You can grab things out of the app.coffee file, you can access compile adapters, etc. And this is not a clone of the instance, this is *the* instance, so modifying values could screw things up. Weild this repsonsibility carefully if you choose to at all. Since we don't need it for this extension, the constructor will be omitted from the rest of the example code in this guide.\n \n+Async Setup\n+-----------\n+\n+It's possible that you might need to make some asynchronous calls to set up your extension. For example, the [roots-records](https://github.com/carrot/roots-records) extension accepts a url from which it can fetch content and include as locals, and the [roots-browserify](https://github.com/carrot/roots-browserify) extension uses browserify to build a dependency tree so all files browserify is compiling are removed from roots' pipeline. If you do need this, it can be done in a `setup` function, which can return a promise. Let's look at an example:",
        "path": "docs/extensions.rst",
        "position": null,
        "original_position": 7,
        "commit_id": "5567bab4ee534a4bbd8f419adda0f2527db55d29",
        "original_commit_id": "65960e56794bc079af74f520a3a854e939a5d64a",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "perhaps reword this\n~~If you do need this, it can be done in a `setup` function, which can return a promise. Let's look at an example:~~\n\n**to**\n\nIf you need to perform an async task, this can be accomplished by using a `setup` function which returns a value or promise.\n",
        "created_at": "2014-04-07T00:30:28Z",
        "updated_at": "2014-04-07T22:20:38Z",
        "html_url": "https://github.com/jescalan/roots/pull/435#discussion_r11329035",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/435",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/11329035"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/435#discussion_r11329035"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/435"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/11330414",
        "pull_request_review_id": null,
        "id": 11330414,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzMwNDE0",
        "diff_hunk": "@@ -53,6 +53,23 @@ With that out of the way, let's lay down the skeleton for a sample extension tha\n \n Notice that an instance of the roots class is passed into the constructor. This instance will give you access to literally any and all information that roots is hanging on to. You can grab things out of the app.coffee file, you can access compile adapters, etc. And this is not a clone of the instance, this is *the* instance, so modifying values could screw things up. Weild this repsonsibility carefully if you choose to at all. Since we don't need it for this extension, the constructor will be omitted from the rest of the example code in this guide.\n \n+Async Setup\n+-----------\n+\n+It's possible that you might need to make some asynchronous calls to set up your extension. For example, the [roots-records](https://github.com/carrot/roots-records) extension accepts a url from which it can fetch content and include as locals, and the [roots-browserify](https://github.com/carrot/roots-browserify) extension uses browserify to build a dependency tree so all files browserify is compiling are removed from roots' pipeline. If you do need this, it can be done in a `setup` function, which can return a promise. Let's look at an example:",
        "path": "docs/extensions.rst",
        "position": null,
        "original_position": 7,
        "commit_id": "5567bab4ee534a4bbd8f419adda0f2527db55d29",
        "original_commit_id": "65960e56794bc079af74f520a3a854e939a5d64a",
        "user": {
            "login": "jescalan",
            "id": 556932,
            "node_id": "MDQ6VXNlcjU1NjkzMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/556932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jescalan",
            "html_url": "https://github.com/jescalan",
            "followers_url": "https://api.github.com/users/jescalan/followers",
            "following_url": "https://api.github.com/users/jescalan/following{/other_user}",
            "gists_url": "https://api.github.com/users/jescalan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jescalan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jescalan/subscriptions",
            "organizations_url": "https://api.github.com/users/jescalan/orgs",
            "repos_url": "https://api.github.com/users/jescalan/repos",
            "events_url": "https://api.github.com/users/jescalan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jescalan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": ":+1: on this change - wanna PR dat?\n",
        "created_at": "2014-04-07T03:21:15Z",
        "updated_at": "2014-04-07T22:20:38Z",
        "html_url": "https://github.com/jescalan/roots/pull/435#discussion_r11330414",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/435",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/11330414"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/435#discussion_r11330414"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/435"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/11342852",
        "pull_request_review_id": null,
        "id": 11342852,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzQyODUy",
        "diff_hunk": "@@ -53,6 +53,23 @@ With that out of the way, let's lay down the skeleton for a sample extension tha\n \n Notice that an instance of the roots class is passed into the constructor. This instance will give you access to literally any and all information that roots is hanging on to. You can grab things out of the app.coffee file, you can access compile adapters, etc. And this is not a clone of the instance, this is *the* instance, so modifying values could screw things up. Weild this repsonsibility carefully if you choose to at all. Since we don't need it for this extension, the constructor will be omitted from the rest of the example code in this guide.\n \n+Async Setup\n+-----------\n+\n+It's possible that you might need to make some asynchronous calls to set up your extension. For example, the [roots-records](https://github.com/carrot/roots-records) extension accepts a url from which it can fetch content and include as locals, and the [roots-browserify](https://github.com/carrot/roots-browserify) extension uses browserify to build a dependency tree so all files browserify is compiling are removed from roots' pipeline. If you do need this, it can be done in a `setup` function, which can return a promise. Let's look at an example:",
        "path": "docs/extensions.rst",
        "position": null,
        "original_position": 7,
        "commit_id": "5567bab4ee534a4bbd8f419adda0f2527db55d29",
        "original_commit_id": "65960e56794bc079af74f520a3a854e939a5d64a",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "hahaha your PR is still open just fix it here\n",
        "created_at": "2014-04-07T13:23:38Z",
        "updated_at": "2014-04-07T22:20:38Z",
        "html_url": "https://github.com/jescalan/roots/pull/435#discussion_r11342852",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/435",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/11342852"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/435#discussion_r11342852"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/435"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/11345354",
        "pull_request_review_id": null,
        "id": 11345354,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzQ1MzU0",
        "diff_hunk": "@@ -53,6 +53,23 @@ With that out of the way, let's lay down the skeleton for a sample extension tha\n \n Notice that an instance of the roots class is passed into the constructor. This instance will give you access to literally any and all information that roots is hanging on to. You can grab things out of the app.coffee file, you can access compile adapters, etc. And this is not a clone of the instance, this is *the* instance, so modifying values could screw things up. Weild this repsonsibility carefully if you choose to at all. Since we don't need it for this extension, the constructor will be omitted from the rest of the example code in this guide.\n \n+Async Setup\n+-----------\n+\n+It's possible that you might need to make some asynchronous calls to set up your extension. For example, the [roots-records](https://github.com/carrot/roots-records) extension accepts a url from which it can fetch content and include as locals, and the [roots-browserify](https://github.com/carrot/roots-browserify) extension uses browserify to build a dependency tree so all files browserify is compiling are removed from roots' pipeline. If you do need this, it can be done in a `setup` function, which can return a promise. Let's look at an example:",
        "path": "docs/extensions.rst",
        "position": null,
        "original_position": 7,
        "commit_id": "5567bab4ee534a4bbd8f419adda0f2527db55d29",
        "original_commit_id": "65960e56794bc079af74f520a3a854e939a5d64a",
        "user": {
            "login": "jescalan",
            "id": 556932,
            "node_id": "MDQ6VXNlcjU1NjkzMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/556932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jescalan",
            "html_url": "https://github.com/jescalan",
            "followers_url": "https://api.github.com/users/jescalan/followers",
            "following_url": "https://api.github.com/users/jescalan/following{/other_user}",
            "gists_url": "https://api.github.com/users/jescalan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jescalan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jescalan/subscriptions",
            "organizations_url": "https://api.github.com/users/jescalan/orgs",
            "repos_url": "https://api.github.com/users/jescalan/repos",
            "events_url": "https://api.github.com/users/jescalan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jescalan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Hah well you know what, WHY DONT YOU PUSH IT TO MY PR GOD IM LAZY OK\n",
        "created_at": "2014-04-07T14:24:53Z",
        "updated_at": "2014-04-07T22:20:38Z",
        "html_url": "https://github.com/jescalan/roots/pull/435#discussion_r11345354",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/435",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/11345354"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/435#discussion_r11345354"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/435"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/11345695",
        "pull_request_review_id": null,
        "id": 11345695,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzQ1Njk1",
        "diff_hunk": "@@ -53,6 +53,23 @@ With that out of the way, let's lay down the skeleton for a sample extension tha\n \n Notice that an instance of the roots class is passed into the constructor. This instance will give you access to literally any and all information that roots is hanging on to. You can grab things out of the app.coffee file, you can access compile adapters, etc. And this is not a clone of the instance, this is *the* instance, so modifying values could screw things up. Weild this repsonsibility carefully if you choose to at all. Since we don't need it for this extension, the constructor will be omitted from the rest of the example code in this guide.\n \n+Async Setup\n+-----------\n+\n+It's possible that you might need to make some asynchronous calls to set up your extension. For example, the [roots-records](https://github.com/carrot/roots-records) extension accepts a url from which it can fetch content and include as locals, and the [roots-browserify](https://github.com/carrot/roots-browserify) extension uses browserify to build a dependency tree so all files browserify is compiling are removed from roots' pipeline. If you do need this, it can be done in a `setup` function, which can return a promise. Let's look at an example:",
        "path": "docs/extensions.rst",
        "position": null,
        "original_position": 7,
        "commit_id": "5567bab4ee534a4bbd8f419adda0f2527db55d29",
        "original_commit_id": "65960e56794bc079af74f520a3a854e939a5d64a",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": ":doge:\n",
        "created_at": "2014-04-07T14:31:53Z",
        "updated_at": "2014-04-07T22:20:38Z",
        "html_url": "https://github.com/jescalan/roots/pull/435#discussion_r11345695",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/435",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/11345695"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/435#discussion_r11345695"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/435"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/11815430",
        "pull_request_review_id": null,
        "id": 11815430,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODE1NDMw",
        "diff_hunk": "@@ -1,31 +1,17 @@\n #!/usr/bin/env node\n \n require('coffee-script/register');\n-require('colors');\n-\n-var cli = require('../lib/cli'),\n-    notifier = require('update-notifier')({ packagePath: '../package.json' }),\n-    args = require('minimist')(process.argv.slice(2), {\n-      alias: {\n-        v: 'version',\n-        e: 'env',\n-        q: 'quiet'\n-      }\n-    });\n+var cli = new (require('../lib/cli')),\n+    notifier = require('update-notifier')({ packagePath: '../package.json' });\n \n // new version notification\n notifier.update && notifier.notify();\n \n-// log data and errors to the console\n-if (!args.quiet) {\n-  cli.on('data', console.log.bind(console))\n-     .on('inline', process.stdout.write.bind(process.stdout))\n-     .on('err', function(err){\n-          console.error(\"\\n\\nERROR\\n-----\\n\".red);\n-          console.error(err);\n-        });\n-}\n+// log out data\n+cli.on('info', function(m){ console.log((\"\u25b8 \" + m).grey) });\n+cli.on('success', function(m){ console.log((\"\u2713 \" + m).green) });\n+cli.on('err', function(err){ console.error(\"\u2718 \".red + err); process.exit(1); });\n+cli.on('data', console.log.bind(console));\n+cli.on('inline', process.stdout.write.bind(process.stdout))",
        "path": "bin/roots",
        "position": 35,
        "original_position": 35,
        "commit_id": "72fdf95a6c9811b46a0a990c3cc5815628ad6206",
        "original_commit_id": "6ecd57b5a1acb40480907df7671bc416e0a6232a",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "so there is no difference between console.log and process.stdout.write\n\nI say stick with console.log\n\nhttp://stackoverflow.com/questions/4976466/difference-between-process-stdout-write-and-console-log-in-node-js\n",
        "created_at": "2014-04-21T17:14:45Z",
        "updated_at": "2014-04-21T22:57:20Z",
        "html_url": "https://github.com/jescalan/roots/pull/448#discussion_r11815430",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/448",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/11815430"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/448#discussion_r11815430"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/448"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/11815476",
        "pull_request_review_id": null,
        "id": 11815476,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODE1NDc2",
        "diff_hunk": "@@ -1,82 +1,64 @@\n-path           = require 'path'\n-fs             = require 'fs'\n-{EventEmitter} = require('events')\n-exec           = require('child_process').exec\n-nodefn         = require 'when/node'\n-sprout         = require 'sprout'\n-global_config  = require '../global_config'\n-_              = require 'lodash'\n-npm            = require 'npm'\n+path          = require 'path'\n+fs            = require 'fs'\n+W             = require 'when'\n+nodefn        = require 'when/node'\n+sprout        = require 'sprout'\n+global_config = require '../global_config'\n+_             = require 'lodash'\n+npm           = require 'npm'\n+\n+base_tpl_name = 'roots-base'\n+base_tpl_url      = 'https://github.com/roots-dev/base.git'",
        "path": "lib/api/new.coffee",
        "position": null,
        "original_position": 20,
        "commit_id": "72fdf95a6c9811b46a0a990c3cc5815628ad6206",
        "original_commit_id": "6ecd57b5a1acb40480907df7671bc416e0a6232a",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "= indentation \n",
        "created_at": "2014-04-21T17:15:51Z",
        "updated_at": "2014-04-21T22:57:20Z",
        "html_url": "https://github.com/jescalan/roots/pull/448#discussion_r11815476",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/448",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/11815476"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/448#discussion_r11815476"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/448"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/11815563",
        "pull_request_review_id": null,
        "id": 11815563,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODE1NTYz",
        "diff_hunk": "@@ -1,82 +1,64 @@\n-path           = require 'path'\n-fs             = require 'fs'\n-{EventEmitter} = require('events')\n-exec           = require('child_process').exec\n-nodefn         = require 'when/node'\n-sprout         = require 'sprout'\n-global_config  = require '../global_config'\n-_              = require 'lodash'\n-npm            = require 'npm'\n+path          = require 'path'\n+fs            = require 'fs'\n+W             = require 'when'\n+nodefn        = require 'when/node'\n+sprout        = require 'sprout'\n+global_config = require '../global_config'\n+_             = require 'lodash'\n+npm           = require 'npm'\n+\n+base_tpl_name = 'roots-base'\n+base_tpl_url      = 'https://github.com/roots-dev/base.git'\n \n ###*\n- * @class New\n- * @classdesc Uses sprout to create new roots projects\n+ * Creates a new roots project using a template. If a template is not provided,\n+ * the roots-base template is used. If the roots-base template has not been\n+ * installed, that is installed first. Once the template has been created, if it\n+ * contains a package.json file with dependencies, they are installed. To review\n+ * the promise chain:\n+ *\n+ * - check to see if roots-base is installed\n+ * - if not, install it, emitting 'template:base_added' when finished\n+ * - initialize the template with sprout\n+ * - when finished, emit 'template:created'\n+ * - check to see if deps are present\n+ * - if so install them, emit 'deps:installing' before and 'deps:finished' after\n+ * - at the end, emit 'done' or 'error events', and return a promise\n+ *\n+ * @param  {Roots} roots - roots instance\n+ * @param  {Object} opts - options object\n+ * @return {Promise} promise for completed new template\n ###\n \n-class New extends EventEmitter\n+class New\n+  constructor: (@Roots) ->\n \n-  constructor: (@roots) ->\n-    @base_url = 'https://github.com/roots-dev/base.git'\n+  exec: (opts = {}) ->\n+    d = W.defer()\n \n-  ###*\n-   * Main method, given a path to where the project should be and some (optional)\n-   * additional options, creates a new project template. If no template is provided,\n-   * uses the roots default template, which is installed if not present. Once the\n-   * template is created, installs dependencies if a package.json is present.\n-   *\n-   * @param  {Object} opts - Arguments object, takes the following:\n-   *                       - path: path to nonexistant folder where project should be\n-   *                       - template: name of the template to use for the project\n-   *                       - options: overrides for template config\n-   *                       - defaults: default values for template config\n-  ###\n-\n-  exec: (opts) ->\n-    @path      = opts.path     || throw new Error('missing path')\n-    @template  = opts.template || global_config().get('default_template')\n-    @overrides = opts.options  || {}\n-    @defaults  = opts.defaults || {}\n-\n-    @pkg = path.join(@path, 'package.json')\n-    @defaults.name = opts.name\n-\n-    if not _.contains(sprout.list(), 'roots-base')\n-      sprout.add(name: 'roots-base', uri: @base_url)\n-        .catch((err) => @emit('error', err))\n-        .tap(=> @emit('template:base_added'))\n-        .then(=> init.call(@))\n-    else\n-      init.call(@)\n-\n-    return @\n+    if not opts.path\n+      d.reject(new Error('missing path'))\n+      return d.promise",
        "path": "lib/api/new.coffee",
        "position": null,
        "original_position": 86,
        "commit_id": "72fdf95a6c9811b46a0a990c3cc5815628ad6206",
        "original_commit_id": "6ecd57b5a1acb40480907df7671bc416e0a6232a",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "why not just return false here?\n",
        "created_at": "2014-04-21T17:18:02Z",
        "updated_at": "2014-04-21T22:57:20Z",
        "html_url": "https://github.com/jescalan/roots/pull/448#discussion_r11815563",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/448",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/11815563"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/448#discussion_r11815563"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/448"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/11815573",
        "pull_request_review_id": null,
        "id": 11815573,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODE1NTcz",
        "diff_hunk": "@@ -1,82 +1,64 @@\n-path           = require 'path'\n-fs             = require 'fs'\n-{EventEmitter} = require('events')\n-exec           = require('child_process').exec\n-nodefn         = require 'when/node'\n-sprout         = require 'sprout'\n-global_config  = require '../global_config'\n-_              = require 'lodash'\n-npm            = require 'npm'\n+path          = require 'path'\n+fs            = require 'fs'\n+W             = require 'when'\n+nodefn        = require 'when/node'\n+sprout        = require 'sprout'\n+global_config = require '../global_config'\n+_             = require 'lodash'\n+npm           = require 'npm'\n+\n+base_tpl_name = 'roots-base'\n+base_tpl_url      = 'https://github.com/roots-dev/base.git'\n \n ###*\n- * @class New\n- * @classdesc Uses sprout to create new roots projects\n+ * Creates a new roots project using a template. If a template is not provided,\n+ * the roots-base template is used. If the roots-base template has not been\n+ * installed, that is installed first. Once the template has been created, if it\n+ * contains a package.json file with dependencies, they are installed. To review\n+ * the promise chain:\n+ *\n+ * - check to see if roots-base is installed\n+ * - if not, install it, emitting 'template:base_added' when finished\n+ * - initialize the template with sprout\n+ * - when finished, emit 'template:created'\n+ * - check to see if deps are present\n+ * - if so install them, emit 'deps:installing' before and 'deps:finished' after\n+ * - at the end, emit 'done' or 'error events', and return a promise\n+ *\n+ * @param  {Roots} roots - roots instance\n+ * @param  {Object} opts - options object\n+ * @return {Promise} promise for completed new template\n ###\n \n-class New extends EventEmitter\n+class New\n+  constructor: (@Roots) ->\n \n-  constructor: (@roots) ->\n-    @base_url = 'https://github.com/roots-dev/base.git'\n+  exec: (opts = {}) ->\n+    d = W.defer()\n \n-  ###*\n-   * Main method, given a path to where the project should be and some (optional)\n-   * additional options, creates a new project template. If no template is provided,\n-   * uses the roots default template, which is installed if not present. Once the\n-   * template is created, installs dependencies if a package.json is present.\n-   *\n-   * @param  {Object} opts - Arguments object, takes the following:\n-   *                       - path: path to nonexistant folder where project should be\n-   *                       - template: name of the template to use for the project\n-   *                       - options: overrides for template config\n-   *                       - defaults: default values for template config\n-  ###\n-\n-  exec: (opts) ->\n-    @path      = opts.path     || throw new Error('missing path')\n-    @template  = opts.template || global_config().get('default_template')\n-    @overrides = opts.options  || {}\n-    @defaults  = opts.defaults || {}\n-\n-    @pkg = path.join(@path, 'package.json')\n-    @defaults.name = opts.name\n-\n-    if not _.contains(sprout.list(), 'roots-base')\n-      sprout.add(name: 'roots-base', uri: @base_url)\n-        .catch((err) => @emit('error', err))\n-        .tap(=> @emit('template:base_added'))\n-        .then(=> init.call(@))\n-    else\n-      init.call(@)\n-\n-    return @\n+    if not opts.path\n+      d.reject(new Error('missing path'))\n+      return d.promise\n \n-  ###*\n-   * Uses sprout.init to create a project template, emits events, and installs\n-   * dependencies if necessary.\n-   * \n-   * @private\n-  ###\n+    opts =\n+      path: path.resolve(opts.path)\n+      name: opts.template           || global_config().get('default_template')\n+      overrides: opts.overrides     || {}\n+      defaults: opts.defaults       || { name: path.basename(opts.path) }\n \n-  init = ->\n-    sprout.init\n-      name: @template\n-      path: @path\n-      overrides: @overrides\n-      defaults: @defaults\n-    .tap(=> @emit('template:created'))\n-    .then(=> if has_deps.call(@) then install_deps.call(@))\n-    .done((=> @emit('done', @path)), ((err) => @emit('error', err)))\n+    pkg = path.join(opts.path, 'package.json')\n \n-  ###*\n-   * Tests whether a project has a package.json file and therefore needs to have\n-   * dependencies installed.\n-   *\n-   * @private\n-   * @return {Boolean} whether a package.json file exists in the template\n-  ###\n+    W.resolve(_.contains(sprout.list(), base_tpl_name))\n+      .then (res) ->\n+        if not res",
        "path": "lib/api/new.coffee",
        "position": 119,
        "original_position": 120,
        "commit_id": "72fdf95a6c9811b46a0a990c3cc5815628ad6206",
        "original_commit_id": "6ecd57b5a1acb40480907df7671bc416e0a6232a",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "if not === unless\n",
        "created_at": "2014-04-21T17:18:17Z",
        "updated_at": "2014-04-21T22:57:20Z",
        "html_url": "https://github.com/jescalan/roots/pull/448#discussion_r11815573",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/448",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/11815573"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/448#discussion_r11815573"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/448"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/11815584",
        "pull_request_review_id": null,
        "id": 11815584,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODE1NTg0",
        "diff_hunk": "@@ -1,27 +1,64 @@\n-sprout        = require 'sprout'\n+fs = require 'fs'",
        "path": "lib/api/template.coffee",
        "position": null,
        "original_position": 2,
        "commit_id": "72fdf95a6c9811b46a0a990c3cc5815628ad6206",
        "original_commit_id": "6ecd57b5a1acb40480907df7671bc416e0a6232a",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "indentation \n",
        "created_at": "2014-04-21T17:18:32Z",
        "updated_at": "2014-04-21T22:57:20Z",
        "html_url": "https://github.com/jescalan/roots/pull/448#discussion_r11815584",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/448",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/11815584"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/448#discussion_r11815584"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/448"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/11815618",
        "pull_request_review_id": null,
        "id": 11815618,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODE1NjE4",
        "diff_hunk": "@@ -1,27 +1,64 @@\n-sprout        = require 'sprout'\n+fs = require 'fs'\n _             = require 'lodash'\n W             = require 'when'\n+sprout        = require 'sprout'\n global_config = require '../global_config'\n-fs            = require 'fs'\n \n-exports.add = sprout.add.bind(sprout) # TODO: prepend all templates with \"roots-\"\n-exports.remove = sprout.remove\n-exports.list = sprout.list\n+###*\n+ * Adds a template to sprout. Delegates directly to sprout's API.\n+ *\n+ * @todo  prepend templates with 'roots-''\n+ * @param {Object} args - can contain keys 'name', 'uri'\n+ * @return {Promise} a promise for the added template\n+###\n+\n+exports.add = sprout.add.bind(sprout)\n+\n+###*\n+ * Removes a template from sprout. Delegates directly to sprout's API.\n+ *\n+ * @param {Object} args - must contain key 'name'\n+ * @return {Promise} promise for removed template\n+###\n+\n+exports.remove = sprout.remove.bind(sprout)\n+\n+###*\n+ * List all templates. Delegates directly to sprout's API.\n+ * @return {String} a string colored and formatted for the terminal\n+###\n+\n+exports.list = sprout.list.bind(sprout)\n \n-exports.default = (name) ->\n-  if not name then return W.reject('please provide a template name')\n-  if not _.contains(sprout.list(), name) then return W.reject(\"you do not have this template installed\\n=> try `roots tpl add #{name} <url>`\")\n+###*\n+ * Set the default template used with roots new when one isn't supplied.\n+ *\n+ * @param  {Object} args - must contain key 'name'\n+ * @return {Promise} a promise that your template is the default\n+###\n+\n+exports.default = (args = {}) ->\n+  if not args.name then return W.reject('please provide a template name')",
        "path": "lib/api/template.coffee",
        "position": null,
        "original_position": 49,
        "commit_id": "72fdf95a6c9811b46a0a990c3cc5815628ad6206",
        "original_commit_id": "6ecd57b5a1acb40480907df7671bc416e0a6232a",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "unless ... i know you hate it but it is there...\n",
        "created_at": "2014-04-21T17:19:14Z",
        "updated_at": "2014-04-21T22:57:20Z",
        "html_url": "https://github.com/jescalan/roots/pull/448#discussion_r11815618",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/448",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/11815618"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/448#discussion_r11815618"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/448"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/11815642",
        "pull_request_review_id": null,
        "id": 11815642,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODE1NjQy",
        "diff_hunk": "@@ -1,9 +1,15 @@\n-path  = require 'path'\n-Roots = require '../'\n+Roots = require '../../index'\n rimraf = require 'rimraf'\n \n-module.exports = (args, cli) ->\n-  project = new Roots(path.normalize(args._[1] or process.cwd()))\n-  output_path = project.config.output_path()\n-  rimraf.sync(output_path)\n-  cli.emit('data', \"\\nRemoved #{output_path}\\n\".green)\n+###*\n+ * Simple wrapper for Roots.clean, emits events and data to the cli.\n+ *\n+ * @param  {EventEmitter} cli - event emitter for data to be piped to the cli",
        "path": "lib/cli/clean.coffee",
        "position": null,
        "original_position": 14,
        "commit_id": "72fdf95a6c9811b46a0a990c3cc5815628ad6206",
        "original_commit_id": "6ecd57b5a1acb40480907df7671bc416e0a6232a",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "eventEmitter one word?\n",
        "created_at": "2014-04-21T17:19:57Z",
        "updated_at": "2014-04-21T22:57:20Z",
        "html_url": "https://github.com/jescalan/roots/pull/448#discussion_r11815642",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/448",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/11815642"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/448#discussion_r11815642"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/448"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/11815773",
        "pull_request_review_id": null,
        "id": 11815773,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODE1Nzcz",
        "diff_hunk": "@@ -1,18 +1,19 @@\n-path  = require('path')\n-Roots = require('../')\n+Roots = require '../../index'\n \n-module.exports = (args, cli)->\n-  dir = if args._[1] then path.resolve(args._[1]) else process.cwd()\n-  opts = { env: args.env || 'development' }\n+###*\n+ * Simple wrapper for Roots.compile, emits events and data to the cli.\n+ *\n+ * @param  {EventEmitter} cli - event emitter for data to be piped to the cli\n+ * @param  {Object} args arguments object to be passed to roots fn\n+ * @return {Promise} a promise for the compiled project\n+###\n \n-  cli.emit('inline', 'compiling... '.grey)\n-\n-  project = new Roots(dir, opts)\n+module.exports = (cli, args)->\n+  project = new Roots(args.path, { env: args.environment })\n \n-  project\n-    .on('done', -> cli.emit('data', 'done!'.green))\n-    .on 'error', (err) ->\n-      cli.emit('err', Error(err).stack)\n-      process.nextTick -> process.exit(1)\n+  cli.emit('inline', 'compiling... '.grey)\n \n-  project.compile()\n+  project.compile().then ->",
        "path": "lib/cli/compile.coffee",
        "position": null,
        "original_position": 30,
        "commit_id": "72fdf95a6c9811b46a0a990c3cc5815628ad6206",
        "original_commit_id": "6ecd57b5a1acb40480907df7671bc416e0a6232a",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "anti pattern :warning: \n\n``` coffeescript\nproject.compile()\n.then -> emit ...\n.catch -> emitt\n```\n",
        "created_at": "2014-04-21T17:20:58Z",
        "updated_at": "2014-04-21T22:57:20Z",
        "html_url": "https://github.com/jescalan/roots/pull/448#discussion_r11815773",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/448",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/11815773"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/448#discussion_r11815773"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/448"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/11815837",
        "pull_request_review_id": null,
        "id": 11815837,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODE1ODM3",
        "diff_hunk": "@@ -1,25 +1,192 @@\n-help = require './help'\n-fs = require 'fs'\n-path = require 'path'\n+require('colors')\n+\n+path         = require 'path'\n+pkg          = require '../../package.json'\n+ArgParse     = require('argparse').ArgumentParser\n EventEmitter = require('events').EventEmitter\n \n-module.exports = cli = new EventEmitter\n+###*\n+ * @class  CLI\n+ * @classdesc command line interface to sprout\n+###\n+\n+class CLI extends EventEmitter\n+\n+  ###*\n+   * Creates and sets up the argument parser, makes the event emitter through",
        "path": "lib/cli/index.coffee",
        "position": null,
        "original_position": 20,
        "commit_id": "72fdf95a6c9811b46a0a990c3cc5815628ad6206",
        "original_commit_id": "6ecd57b5a1acb40480907df7671bc416e0a6232a",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "make active voice\n\nCreate and set up the argument parser. \n\n`makes the event emitter through????` <- not clear\n",
        "created_at": "2014-04-21T17:22:28Z",
        "updated_at": "2014-04-21T22:57:20Z",
        "html_url": "https://github.com/jescalan/roots/pull/448#discussion_r11815837",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/448",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/11815837"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/448#discussion_r11815837"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/448"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/11815846",
        "pull_request_review_id": null,
        "id": 11815846,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODE1ODQ2",
        "diff_hunk": "@@ -1,25 +1,192 @@\n-help = require './help'\n-fs = require 'fs'\n-path = require 'path'\n+require('colors')\n+\n+path         = require 'path'\n+pkg          = require '../../package.json'\n+ArgParse     = require('argparse').ArgumentParser\n EventEmitter = require('events').EventEmitter\n \n-module.exports = cli = new EventEmitter\n+###*\n+ * @class  CLI\n+ * @classdesc command line interface to sprout\n+###\n+\n+class CLI extends EventEmitter\n+\n+  ###*\n+   * Creates and sets up the argument parser, makes the event emitter through\n+   * which it returns all information publicy available.",
        "path": "lib/cli/index.coffee",
        "position": null,
        "original_position": 21,
        "commit_id": "72fdf95a6c9811b46a0a990c3cc5815628ad6206",
        "original_commit_id": "6ecd57b5a1acb40480907df7671bc416e0a6232a",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "which it returns all information ~~publicy~~ available.\n\npublicly :space_invader: \n",
        "created_at": "2014-04-21T17:22:44Z",
        "updated_at": "2014-04-21T22:57:20Z",
        "html_url": "https://github.com/jescalan/roots/pull/448#discussion_r11815846",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/448",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/11815846"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/448#discussion_r11815846"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/448"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/11815983",
        "pull_request_review_id": null,
        "id": 11815983,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODE1OTgz",
        "diff_hunk": "@@ -1,40 +1,77 @@\n open   = require 'open'\n-path   = require 'path'\n-Roots  = require '../'\n+Roots  = require '../../index'\n Server = require '../local_server'\n \n-default_port = 1111\n+###*\n+ * Wrapper for the roots watch function, and implementation of the local server",
        "path": "lib/cli/watch.coffee",
        "position": null,
        "original_position": 9,
        "commit_id": "72fdf95a6c9811b46a0a990c3cc5815628ad6206",
        "original_commit_id": "6ecd57b5a1acb40480907df7671bc416e0a6232a",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "run on sentence.\n",
        "created_at": "2014-04-21T17:25:27Z",
        "updated_at": "2014-04-21T22:57:20Z",
        "html_url": "https://github.com/jescalan/roots/pull/448#discussion_r11815983",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/448",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/11815983"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/448#discussion_r11815983"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/448"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/11816016",
        "pull_request_review_id": null,
        "id": 11816016,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODE2MDE2",
        "diff_hunk": "@@ -1,40 +1,77 @@\n open   = require 'open'\n-path   = require 'path'\n-Roots  = require '../'\n+Roots  = require '../../index'\n Server = require '../local_server'\n \n-default_port = 1111\n+###*\n+ * Wrapper for the roots watch function, and implementation of the local server\n+ * and compile/reload/error events that are sent to it. The gist:\n+ *\n+ * - Starts the server at the given (or default) port\n+ * - Binds start, done, and error events to functions that emit to the cli and\n+ *   trigger browser actions through the server\n+ * - Bind an event such that the first time it finishes compiling, it opens the\n+ *   server in your browser (unless prevented with options)\n+ * - Returns the server and watcher objects so they can be closed.\n+ *\n+ * @param  {CLI} cli - event emitter for data to be piped to the cli\n+ * @param  {Object} args arguments object to be passed to roots fn\n+ * @return {Object} contains 'server' and 'watcher' keys\n+###\n \n-module.exports = (args, cli) ->\n-  dir = if args._[1] then path.resolve(args._[1]) else process.cwd()\n-  opts = { env: args.env || 'development' }\n-  project = new Roots(dir, opts)\n-  args.open ?= true\n+module.exports = (cli, args) ->\n+  project = new Roots(args.path, { env: args.environment })",
        "path": "lib/cli/watch.coffee",
        "position": 30,
        "original_position": 30,
        "commit_id": "72fdf95a6c9811b46a0a990c3cc5815628ad6206",
        "original_commit_id": "6ecd57b5a1acb40480907df7671bc416e0a6232a",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "this is interesting... i would think we would use something like\n\nNODE_ENV as compared to an argument based ENV\n",
        "created_at": "2014-04-21T17:26:13Z",
        "updated_at": "2014-04-21T22:57:20Z",
        "html_url": "https://github.com/jescalan/roots/pull/448#discussion_r11816016",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/448",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/11816016"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/448#discussion_r11816016"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/448"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/11816050",
        "pull_request_review_id": null,
        "id": 11816050,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODE2MDUw",
        "diff_hunk": "@@ -1,40 +1,77 @@\n open   = require 'open'\n-path   = require 'path'\n-Roots  = require '../'\n+Roots  = require '../../index'\n Server = require '../local_server'\n \n-default_port = 1111\n+###*\n+ * Wrapper for the roots watch function, and implementation of the local server\n+ * and compile/reload/error events that are sent to it. The gist:\n+ *\n+ * - Starts the server at the given (or default) port\n+ * - Binds start, done, and error events to functions that emit to the cli and\n+ *   trigger browser actions through the server\n+ * - Bind an event such that the first time it finishes compiling, it opens the\n+ *   server in your browser (unless prevented with options)\n+ * - Returns the server and watcher objects so they can be closed.\n+ *\n+ * @param  {CLI} cli - event emitter for data to be piped to the cli\n+ * @param  {Object} args arguments object to be passed to roots fn\n+ * @return {Object} contains 'server' and 'watcher' keys\n+###\n \n-module.exports = (args, cli) ->\n-  dir = if args._[1] then path.resolve(args._[1]) else process.cwd()\n-  opts = { env: args.env || 'development' }\n-  project = new Roots(dir, opts)\n-  args.open ?= true\n+module.exports = (cli, args) ->\n+  project = new Roots(args.path, { env: args.environment })\n+  server  = new Server(project, project.root)\n+  port    = process.env.port or args.port\n \n   cli.emit('inline', 'compiling... '.grey)\n+  server.start(port)\n \n-  server = new Server(project, dir)\n-  server.start(process.env.port || default_port)\n+  watcher = project.watch()\n \n-  w = project.watch()\n+  watcher.on('start', on_start.bind(null, cli, server))\n+  watcher.on('error', on_error.bind(null, cli, server))\n+  watcher.on('done', on_done.bind(null, cli, server))\n \n-  w.on 'start', -> on_start(cli, server)\n-  w.on 'error', (err) -> on_error(cli, server, err)\n-  w.on 'done', -> on_done(cli, server)\n-  w.once 'done', ->\n-    if project.config.open_browser and args.open\n-      open(\"http://localhost:#{process.env.port || default_port}/\")\n+  watcher.once 'done', ->\n+    if project.config.open_browser and not args.no_open\n+      open(\"http://localhost:#{port}/\")",
        "path": "lib/cli/watch.coffee",
        "position": 54,
        "original_position": 54,
        "commit_id": "72fdf95a6c9811b46a0a990c3cc5815628ad6206",
        "original_commit_id": "6ecd57b5a1acb40480907df7671bc416e0a6232a",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "``` coffee\nif port\n  open(\"http://localhost:#{port}/\")\nelse\n  open(\"http://localhost\")\n```\n",
        "created_at": "2014-04-21T17:26:52Z",
        "updated_at": "2014-04-21T22:57:20Z",
        "html_url": "https://github.com/jescalan/roots/pull/448#discussion_r11816050",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/448",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/11816050"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/448#discussion_r11816050"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/448"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/11818845",
        "pull_request_review_id": null,
        "id": 11818845,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODE4ODQ1",
        "diff_hunk": "@@ -1,31 +1,17 @@\n #!/usr/bin/env node\n \n require('coffee-script/register');\n-require('colors');\n-\n-var cli = require('../lib/cli'),\n-    notifier = require('update-notifier')({ packagePath: '../package.json' }),\n-    args = require('minimist')(process.argv.slice(2), {\n-      alias: {\n-        v: 'version',\n-        e: 'env',\n-        q: 'quiet'\n-      }\n-    });\n+var cli = new (require('../lib/cli')),\n+    notifier = require('update-notifier')({ packagePath: '../package.json' });\n \n // new version notification\n notifier.update && notifier.notify();\n \n-// log data and errors to the console\n-if (!args.quiet) {\n-  cli.on('data', console.log.bind(console))\n-     .on('inline', process.stdout.write.bind(process.stdout))\n-     .on('err', function(err){\n-          console.error(\"\\n\\nERROR\\n-----\\n\".red);\n-          console.error(err);\n-        });\n-}\n+// log out data\n+cli.on('info', function(m){ console.log((\"\u25b8 \" + m).grey) });\n+cli.on('success', function(m){ console.log((\"\u2713 \" + m).green) });\n+cli.on('err', function(err){ console.error(\"\u2718 \".red + err); process.exit(1); });\n+cli.on('data', console.log.bind(console));\n+cli.on('inline', process.stdout.write.bind(process.stdout))",
        "path": "bin/roots",
        "position": 35,
        "original_position": 35,
        "commit_id": "72fdf95a6c9811b46a0a990c3cc5815628ad6206",
        "original_commit_id": "6ecd57b5a1acb40480907df7671bc416e0a6232a",
        "user": {
            "login": "jescalan",
            "id": 556932,
            "node_id": "MDQ6VXNlcjU1NjkzMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/556932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jescalan",
            "html_url": "https://github.com/jescalan",
            "followers_url": "https://api.github.com/users/jescalan/followers",
            "following_url": "https://api.github.com/users/jescalan/following{/other_user}",
            "gists_url": "https://api.github.com/users/jescalan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jescalan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jescalan/subscriptions",
            "organizations_url": "https://api.github.com/users/jescalan/orgs",
            "repos_url": "https://api.github.com/users/jescalan/repos",
            "events_url": "https://api.github.com/users/jescalan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jescalan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Actually there is. As you can see in the answer, console.log adds a `\\n` to every line. In this case it needs to be inline, as this is used mostly for `processing... done!` types of logs. This is also why it's called `inline` :grinning: \n",
        "created_at": "2014-04-21T18:22:23Z",
        "updated_at": "2014-04-21T22:57:20Z",
        "html_url": "https://github.com/jescalan/roots/pull/448#discussion_r11818845",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/448",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/11818845"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/448#discussion_r11818845"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/448"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/11818865",
        "pull_request_review_id": null,
        "id": 11818865,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODE4ODY1",
        "diff_hunk": "@@ -1,82 +1,64 @@\n-path           = require 'path'\n-fs             = require 'fs'\n-{EventEmitter} = require('events')\n-exec           = require('child_process').exec\n-nodefn         = require 'when/node'\n-sprout         = require 'sprout'\n-global_config  = require '../global_config'\n-_              = require 'lodash'\n-npm            = require 'npm'\n+path          = require 'path'\n+fs            = require 'fs'\n+W             = require 'when'\n+nodefn        = require 'when/node'\n+sprout        = require 'sprout'\n+global_config = require '../global_config'\n+_             = require 'lodash'\n+npm           = require 'npm'\n+\n+base_tpl_name = 'roots-base'\n+base_tpl_url      = 'https://github.com/roots-dev/base.git'",
        "path": "lib/api/new.coffee",
        "position": null,
        "original_position": 20,
        "commit_id": "72fdf95a6c9811b46a0a990c3cc5815628ad6206",
        "original_commit_id": "6ecd57b5a1acb40480907df7671bc416e0a6232a",
        "user": {
            "login": "jescalan",
            "id": 556932,
            "node_id": "MDQ6VXNlcjU1NjkzMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/556932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jescalan",
            "html_url": "https://github.com/jescalan",
            "followers_url": "https://api.github.com/users/jescalan/followers",
            "following_url": "https://api.github.com/users/jescalan/following{/other_user}",
            "gists_url": "https://api.github.com/users/jescalan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jescalan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jescalan/subscriptions",
            "organizations_url": "https://api.github.com/users/jescalan/orgs",
            "repos_url": "https://api.github.com/users/jescalan/repos",
            "events_url": "https://api.github.com/users/jescalan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jescalan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ah good catch, thank you!\n",
        "created_at": "2014-04-21T18:22:42Z",
        "updated_at": "2014-04-21T22:57:20Z",
        "html_url": "https://github.com/jescalan/roots/pull/448#discussion_r11818865",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/448",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/11818865"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/448#discussion_r11818865"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/448"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/11818942",
        "pull_request_review_id": null,
        "id": 11818942,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODE4OTQy",
        "diff_hunk": "@@ -1,82 +1,64 @@\n-path           = require 'path'\n-fs             = require 'fs'\n-{EventEmitter} = require('events')\n-exec           = require('child_process').exec\n-nodefn         = require 'when/node'\n-sprout         = require 'sprout'\n-global_config  = require '../global_config'\n-_              = require 'lodash'\n-npm            = require 'npm'\n+path          = require 'path'\n+fs            = require 'fs'\n+W             = require 'when'\n+nodefn        = require 'when/node'\n+sprout        = require 'sprout'\n+global_config = require '../global_config'\n+_             = require 'lodash'\n+npm           = require 'npm'\n+\n+base_tpl_name = 'roots-base'\n+base_tpl_url      = 'https://github.com/roots-dev/base.git'\n \n ###*\n- * @class New\n- * @classdesc Uses sprout to create new roots projects\n+ * Creates a new roots project using a template. If a template is not provided,\n+ * the roots-base template is used. If the roots-base template has not been\n+ * installed, that is installed first. Once the template has been created, if it\n+ * contains a package.json file with dependencies, they are installed. To review\n+ * the promise chain:\n+ *\n+ * - check to see if roots-base is installed\n+ * - if not, install it, emitting 'template:base_added' when finished\n+ * - initialize the template with sprout\n+ * - when finished, emit 'template:created'\n+ * - check to see if deps are present\n+ * - if so install them, emit 'deps:installing' before and 'deps:finished' after\n+ * - at the end, emit 'done' or 'error events', and return a promise\n+ *\n+ * @param  {Roots} roots - roots instance\n+ * @param  {Object} opts - options object\n+ * @return {Promise} promise for completed new template\n ###\n \n-class New extends EventEmitter\n+class New\n+  constructor: (@Roots) ->\n \n-  constructor: (@roots) ->\n-    @base_url = 'https://github.com/roots-dev/base.git'\n+  exec: (opts = {}) ->\n+    d = W.defer()\n \n-  ###*\n-   * Main method, given a path to where the project should be and some (optional)\n-   * additional options, creates a new project template. If no template is provided,\n-   * uses the roots default template, which is installed if not present. Once the\n-   * template is created, installs dependencies if a package.json is present.\n-   *\n-   * @param  {Object} opts - Arguments object, takes the following:\n-   *                       - path: path to nonexistant folder where project should be\n-   *                       - template: name of the template to use for the project\n-   *                       - options: overrides for template config\n-   *                       - defaults: default values for template config\n-  ###\n-\n-  exec: (opts) ->\n-    @path      = opts.path     || throw new Error('missing path')\n-    @template  = opts.template || global_config().get('default_template')\n-    @overrides = opts.options  || {}\n-    @defaults  = opts.defaults || {}\n-\n-    @pkg = path.join(@path, 'package.json')\n-    @defaults.name = opts.name\n-\n-    if not _.contains(sprout.list(), 'roots-base')\n-      sprout.add(name: 'roots-base', uri: @base_url)\n-        .catch((err) => @emit('error', err))\n-        .tap(=> @emit('template:base_added'))\n-        .then(=> init.call(@))\n-    else\n-      init.call(@)\n-\n-    return @\n+    if not opts.path\n+      d.reject(new Error('missing path'))\n+      return d.promise",
        "path": "lib/api/new.coffee",
        "position": null,
        "original_position": 86,
        "commit_id": "72fdf95a6c9811b46a0a990c3cc5815628ad6206",
        "original_commit_id": "6ecd57b5a1acb40480907df7671bc416e0a6232a",
        "user": {
            "login": "jescalan",
            "id": 556932,
            "node_id": "MDQ6VXNlcjU1NjkzMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/556932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jescalan",
            "html_url": "https://github.com/jescalan",
            "followers_url": "https://api.github.com/users/jescalan/followers",
            "following_url": "https://api.github.com/users/jescalan/following{/other_user}",
            "gists_url": "https://api.github.com/users/jescalan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jescalan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jescalan/subscriptions",
            "organizations_url": "https://api.github.com/users/jescalan/orgs",
            "repos_url": "https://api.github.com/users/jescalan/repos",
            "events_url": "https://api.github.com/users/jescalan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jescalan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Consistent interface. It's async on success, so it should also be async on failure, which means it needs to return a promise.\n",
        "created_at": "2014-04-21T18:24:20Z",
        "updated_at": "2014-04-21T22:57:20Z",
        "html_url": "https://github.com/jescalan/roots/pull/448#discussion_r11818942",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/448",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/11818942"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/448#discussion_r11818942"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/448"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/11818967",
        "pull_request_review_id": null,
        "id": 11818967,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODE4OTY3",
        "diff_hunk": "@@ -1,27 +1,64 @@\n-sprout        = require 'sprout'\n+fs = require 'fs'",
        "path": "lib/api/template.coffee",
        "position": null,
        "original_position": 2,
        "commit_id": "72fdf95a6c9811b46a0a990c3cc5815628ad6206",
        "original_commit_id": "6ecd57b5a1acb40480907df7671bc416e0a6232a",
        "user": {
            "login": "jescalan",
            "id": 556932,
            "node_id": "MDQ6VXNlcjU1NjkzMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/556932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jescalan",
            "html_url": "https://github.com/jescalan",
            "followers_url": "https://api.github.com/users/jescalan/followers",
            "following_url": "https://api.github.com/users/jescalan/following{/other_user}",
            "gists_url": "https://api.github.com/users/jescalan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jescalan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jescalan/subscriptions",
            "organizations_url": "https://api.github.com/users/jescalan/orgs",
            "repos_url": "https://api.github.com/users/jescalan/repos",
            "events_url": "https://api.github.com/users/jescalan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jescalan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": ":+1: \n",
        "created_at": "2014-04-21T18:24:46Z",
        "updated_at": "2014-04-21T22:57:20Z",
        "html_url": "https://github.com/jescalan/roots/pull/448#discussion_r11818967",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/448",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/11818967"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/448#discussion_r11818967"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/448"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/11819171",
        "pull_request_review_id": null,
        "id": 11819171,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODE5MTcx",
        "diff_hunk": "@@ -1,18 +1,19 @@\n-path  = require('path')\n-Roots = require('../')\n+Roots = require '../../index'\n \n-module.exports = (args, cli)->\n-  dir = if args._[1] then path.resolve(args._[1]) else process.cwd()\n-  opts = { env: args.env || 'development' }\n+###*\n+ * Simple wrapper for Roots.compile, emits events and data to the cli.\n+ *\n+ * @param  {EventEmitter} cli - event emitter for data to be piped to the cli\n+ * @param  {Object} args arguments object to be passed to roots fn\n+ * @return {Promise} a promise for the compiled project\n+###\n \n-  cli.emit('inline', 'compiling... '.grey)\n-\n-  project = new Roots(dir, opts)\n+module.exports = (cli, args)->\n+  project = new Roots(args.path, { env: args.environment })\n \n-  project\n-    .on('done', -> cli.emit('data', 'done!'.green))\n-    .on 'error', (err) ->\n-      cli.emit('err', Error(err).stack)\n-      process.nextTick -> process.exit(1)\n+  cli.emit('inline', 'compiling... '.grey)\n \n-  project.compile()\n+  project.compile().then ->",
        "path": "lib/cli/compile.coffee",
        "position": null,
        "original_position": 30,
        "commit_id": "72fdf95a6c9811b46a0a990c3cc5815628ad6206",
        "original_commit_id": "6ecd57b5a1acb40480907df7671bc416e0a6232a",
        "user": {
            "login": "jescalan",
            "id": 556932,
            "node_id": "MDQ6VXNlcjU1NjkzMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/556932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jescalan",
            "html_url": "https://github.com/jescalan",
            "followers_url": "https://api.github.com/users/jescalan/followers",
            "following_url": "https://api.github.com/users/jescalan/following{/other_user}",
            "gists_url": "https://api.github.com/users/jescalan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jescalan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jescalan/subscriptions",
            "organizations_url": "https://api.github.com/users/jescalan/orgs",
            "repos_url": "https://api.github.com/users/jescalan/repos",
            "events_url": "https://api.github.com/users/jescalan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jescalan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yeah what this really needs is to be tapped, because if it was caught, the error would need to be re-thrown. It probably needs to be re-thrown here anyway actually, and probably a test is needed for that.\n\nI wouldn't say this is an anti-pattern though, this is how promises work in the spec. The catch piece is actually just sugar added by when.js.\n",
        "created_at": "2014-04-21T18:28:10Z",
        "updated_at": "2014-04-21T22:57:20Z",
        "html_url": "https://github.com/jescalan/roots/pull/448#discussion_r11819171",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/448",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/11819171"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/448#discussion_r11819171"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/448"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/11819212",
        "pull_request_review_id": null,
        "id": 11819212,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODE5MjEy",
        "diff_hunk": "@@ -1,18 +1,19 @@\n-path  = require('path')\n-Roots = require('../')\n+Roots = require '../../index'\n \n-module.exports = (args, cli)->\n-  dir = if args._[1] then path.resolve(args._[1]) else process.cwd()\n-  opts = { env: args.env || 'development' }\n+###*\n+ * Simple wrapper for Roots.compile, emits events and data to the cli.\n+ *\n+ * @param  {EventEmitter} cli - event emitter for data to be piped to the cli\n+ * @param  {Object} args arguments object to be passed to roots fn\n+ * @return {Promise} a promise for the compiled project\n+###\n \n-  cli.emit('inline', 'compiling... '.grey)\n-\n-  project = new Roots(dir, opts)\n+module.exports = (cli, args)->\n+  project = new Roots(args.path, { env: args.environment })\n \n-  project\n-    .on('done', -> cli.emit('data', 'done!'.green))\n-    .on 'error', (err) ->\n-      cli.emit('err', Error(err).stack)\n-      process.nextTick -> process.exit(1)\n+  cli.emit('inline', 'compiling... '.grey)\n \n-  project.compile()\n+  project.compile().then ->",
        "path": "lib/cli/compile.coffee",
        "position": null,
        "original_position": 30,
        "commit_id": "72fdf95a6c9811b46a0a990c3cc5815628ad6206",
        "original_commit_id": "6ecd57b5a1acb40480907df7671bc416e0a6232a",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": " https://github.com/petkaantonov/bluebird/wiki/Promise-anti-patterns#the-thensuccess-fail-anti-pattern\n",
        "created_at": "2014-04-21T18:28:52Z",
        "updated_at": "2014-04-21T22:57:20Z",
        "html_url": "https://github.com/jescalan/roots/pull/448#discussion_r11819212",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/448",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/11819212"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/448#discussion_r11819212"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/448"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/11819293",
        "pull_request_review_id": null,
        "id": 11819293,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODE5Mjkz",
        "diff_hunk": "@@ -1,82 +1,64 @@\n-path           = require 'path'\n-fs             = require 'fs'\n-{EventEmitter} = require('events')\n-exec           = require('child_process').exec\n-nodefn         = require 'when/node'\n-sprout         = require 'sprout'\n-global_config  = require '../global_config'\n-_              = require 'lodash'\n-npm            = require 'npm'\n+path          = require 'path'\n+fs            = require 'fs'\n+W             = require 'when'\n+nodefn        = require 'when/node'\n+sprout        = require 'sprout'\n+global_config = require '../global_config'\n+_             = require 'lodash'\n+npm           = require 'npm'\n+\n+base_tpl_name = 'roots-base'\n+base_tpl_url      = 'https://github.com/roots-dev/base.git'\n \n ###*\n- * @class New\n- * @classdesc Uses sprout to create new roots projects\n+ * Creates a new roots project using a template. If a template is not provided,\n+ * the roots-base template is used. If the roots-base template has not been\n+ * installed, that is installed first. Once the template has been created, if it\n+ * contains a package.json file with dependencies, they are installed. To review\n+ * the promise chain:\n+ *\n+ * - check to see if roots-base is installed\n+ * - if not, install it, emitting 'template:base_added' when finished\n+ * - initialize the template with sprout\n+ * - when finished, emit 'template:created'\n+ * - check to see if deps are present\n+ * - if so install them, emit 'deps:installing' before and 'deps:finished' after\n+ * - at the end, emit 'done' or 'error events', and return a promise\n+ *\n+ * @param  {Roots} roots - roots instance\n+ * @param  {Object} opts - options object\n+ * @return {Promise} promise for completed new template\n ###\n \n-class New extends EventEmitter\n+class New\n+  constructor: (@Roots) ->\n \n-  constructor: (@roots) ->\n-    @base_url = 'https://github.com/roots-dev/base.git'\n+  exec: (opts = {}) ->\n+    d = W.defer()\n \n-  ###*\n-   * Main method, given a path to where the project should be and some (optional)\n-   * additional options, creates a new project template. If no template is provided,\n-   * uses the roots default template, which is installed if not present. Once the\n-   * template is created, installs dependencies if a package.json is present.\n-   *\n-   * @param  {Object} opts - Arguments object, takes the following:\n-   *                       - path: path to nonexistant folder where project should be\n-   *                       - template: name of the template to use for the project\n-   *                       - options: overrides for template config\n-   *                       - defaults: default values for template config\n-  ###\n-\n-  exec: (opts) ->\n-    @path      = opts.path     || throw new Error('missing path')\n-    @template  = opts.template || global_config().get('default_template')\n-    @overrides = opts.options  || {}\n-    @defaults  = opts.defaults || {}\n-\n-    @pkg = path.join(@path, 'package.json')\n-    @defaults.name = opts.name\n-\n-    if not _.contains(sprout.list(), 'roots-base')\n-      sprout.add(name: 'roots-base', uri: @base_url)\n-        .catch((err) => @emit('error', err))\n-        .tap(=> @emit('template:base_added'))\n-        .then(=> init.call(@))\n-    else\n-      init.call(@)\n-\n-    return @\n+    if not opts.path\n+      d.reject(new Error('missing path'))\n+      return d.promise",
        "path": "lib/api/new.coffee",
        "position": null,
        "original_position": 86,
        "commit_id": "72fdf95a6c9811b46a0a990c3cc5815628ad6206",
        "original_commit_id": "6ecd57b5a1acb40480907df7671bc416e0a6232a",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "but........ it is a rejection i think you can just return the rejection\n",
        "created_at": "2014-04-21T18:30:32Z",
        "updated_at": "2014-04-21T22:57:20Z",
        "html_url": "https://github.com/jescalan/roots/pull/448#discussion_r11819293",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/448",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/11819293"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/448#discussion_r11819293"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/448"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/11819341",
        "pull_request_review_id": null,
        "id": 11819341,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODE5MzQx",
        "diff_hunk": "@@ -1,31 +1,17 @@\n #!/usr/bin/env node\n \n require('coffee-script/register');\n-require('colors');\n-\n-var cli = require('../lib/cli'),\n-    notifier = require('update-notifier')({ packagePath: '../package.json' }),\n-    args = require('minimist')(process.argv.slice(2), {\n-      alias: {\n-        v: 'version',\n-        e: 'env',\n-        q: 'quiet'\n-      }\n-    });\n+var cli = new (require('../lib/cli')),\n+    notifier = require('update-notifier')({ packagePath: '../package.json' });\n \n // new version notification\n notifier.update && notifier.notify();\n \n-// log data and errors to the console\n-if (!args.quiet) {\n-  cli.on('data', console.log.bind(console))\n-     .on('inline', process.stdout.write.bind(process.stdout))\n-     .on('err', function(err){\n-          console.error(\"\\n\\nERROR\\n-----\\n\".red);\n-          console.error(err);\n-        });\n-}\n+// log out data\n+cli.on('info', function(m){ console.log((\"\u25b8 \" + m).grey) });\n+cli.on('success', function(m){ console.log((\"\u2713 \" + m).green) });\n+cli.on('err', function(err){ console.error(\"\u2718 \".red + err); process.exit(1); });\n+cli.on('data', console.log.bind(console));\n+cli.on('inline', process.stdout.write.bind(process.stdout))",
        "path": "bin/roots",
        "position": 35,
        "original_position": 35,
        "commit_id": "72fdf95a6c9811b46a0a990c3cc5815628ad6206",
        "original_commit_id": "6ecd57b5a1acb40480907df7671bc416e0a6232a",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "herpa derpa :+1: :tanabata_tree: \n",
        "created_at": "2014-04-21T18:31:35Z",
        "updated_at": "2014-04-21T22:57:20Z",
        "html_url": "https://github.com/jescalan/roots/pull/448#discussion_r11819341",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/448",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/11819341"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/448#discussion_r11819341"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/448"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/11819428",
        "pull_request_review_id": null,
        "id": 11819428,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODE5NDI4",
        "diff_hunk": "@@ -1,40 +1,77 @@\n open   = require 'open'\n-path   = require 'path'\n-Roots  = require '../'\n+Roots  = require '../../index'\n Server = require '../local_server'\n \n-default_port = 1111\n+###*\n+ * Wrapper for the roots watch function, and implementation of the local server\n+ * and compile/reload/error events that are sent to it. The gist:\n+ *\n+ * - Starts the server at the given (or default) port\n+ * - Binds start, done, and error events to functions that emit to the cli and\n+ *   trigger browser actions through the server\n+ * - Bind an event such that the first time it finishes compiling, it opens the\n+ *   server in your browser (unless prevented with options)\n+ * - Returns the server and watcher objects so they can be closed.\n+ *\n+ * @param  {CLI} cli - event emitter for data to be piped to the cli\n+ * @param  {Object} args arguments object to be passed to roots fn\n+ * @return {Object} contains 'server' and 'watcher' keys\n+###\n \n-module.exports = (args, cli) ->\n-  dir = if args._[1] then path.resolve(args._[1]) else process.cwd()\n-  opts = { env: args.env || 'development' }\n-  project = new Roots(dir, opts)\n-  args.open ?= true\n+module.exports = (cli, args) ->\n+  project = new Roots(args.path, { env: args.environment })",
        "path": "lib/cli/watch.coffee",
        "position": 30,
        "original_position": 30,
        "commit_id": "72fdf95a6c9811b46a0a990c3cc5815628ad6206",
        "original_commit_id": "6ecd57b5a1acb40480907df7671bc416e0a6232a",
        "user": {
            "login": "jescalan",
            "id": 556932,
            "node_id": "MDQ6VXNlcjU1NjkzMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/556932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jescalan",
            "html_url": "https://github.com/jescalan",
            "followers_url": "https://api.github.com/users/jescalan/followers",
            "following_url": "https://api.github.com/users/jescalan/following{/other_user}",
            "gists_url": "https://api.github.com/users/jescalan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jescalan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jescalan/subscriptions",
            "organizations_url": "https://api.github.com/users/jescalan/orgs",
            "repos_url": "https://api.github.com/users/jescalan/repos",
            "events_url": "https://api.github.com/users/jescalan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jescalan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I feel like using command line args like setting a flag is much easier than typing them in all caps before the command which is what you need to do in order to set an env variable\n",
        "created_at": "2014-04-21T18:33:15Z",
        "updated_at": "2014-04-21T22:57:20Z",
        "html_url": "https://github.com/jescalan/roots/pull/448#discussion_r11819428",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/448",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/11819428"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/448#discussion_r11819428"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/448"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/11819466",
        "pull_request_review_id": null,
        "id": 11819466,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODE5NDY2",
        "diff_hunk": "@@ -1,40 +1,77 @@\n open   = require 'open'\n-path   = require 'path'\n-Roots  = require '../'\n+Roots  = require '../../index'\n Server = require '../local_server'\n \n-default_port = 1111\n+###*\n+ * Wrapper for the roots watch function, and implementation of the local server\n+ * and compile/reload/error events that are sent to it. The gist:\n+ *\n+ * - Starts the server at the given (or default) port\n+ * - Binds start, done, and error events to functions that emit to the cli and\n+ *   trigger browser actions through the server\n+ * - Bind an event such that the first time it finishes compiling, it opens the\n+ *   server in your browser (unless prevented with options)\n+ * - Returns the server and watcher objects so they can be closed.\n+ *\n+ * @param  {CLI} cli - event emitter for data to be piped to the cli\n+ * @param  {Object} args arguments object to be passed to roots fn\n+ * @return {Object} contains 'server' and 'watcher' keys\n+###\n \n-module.exports = (args, cli) ->\n-  dir = if args._[1] then path.resolve(args._[1]) else process.cwd()\n-  opts = { env: args.env || 'development' }\n-  project = new Roots(dir, opts)\n-  args.open ?= true\n+module.exports = (cli, args) ->\n+  project = new Roots(args.path, { env: args.environment })\n+  server  = new Server(project, project.root)\n+  port    = process.env.port or args.port\n \n   cli.emit('inline', 'compiling... '.grey)\n+  server.start(port)\n \n-  server = new Server(project, dir)\n-  server.start(process.env.port || default_port)\n+  watcher = project.watch()\n \n-  w = project.watch()\n+  watcher.on('start', on_start.bind(null, cli, server))\n+  watcher.on('error', on_error.bind(null, cli, server))\n+  watcher.on('done', on_done.bind(null, cli, server))\n \n-  w.on 'start', -> on_start(cli, server)\n-  w.on 'error', (err) -> on_error(cli, server, err)\n-  w.on 'done', -> on_done(cli, server)\n-  w.once 'done', ->\n-    if project.config.open_browser and args.open\n-      open(\"http://localhost:#{process.env.port || default_port}/\")\n+  watcher.once 'done', ->\n+    if project.config.open_browser and not args.no_open\n+      open(\"http://localhost:#{port}/\")",
        "path": "lib/cli/watch.coffee",
        "position": 54,
        "original_position": 54,
        "commit_id": "72fdf95a6c9811b46a0a990c3cc5815628ad6206",
        "original_commit_id": "6ecd57b5a1acb40480907df7671bc416e0a6232a",
        "user": {
            "login": "jescalan",
            "id": 556932,
            "node_id": "MDQ6VXNlcjU1NjkzMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/556932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jescalan",
            "html_url": "https://github.com/jescalan",
            "followers_url": "https://api.github.com/users/jescalan/followers",
            "following_url": "https://api.github.com/users/jescalan/following{/other_user}",
            "gists_url": "https://api.github.com/users/jescalan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jescalan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jescalan/subscriptions",
            "organizations_url": "https://api.github.com/users/jescalan/orgs",
            "repos_url": "https://api.github.com/users/jescalan/repos",
            "events_url": "https://api.github.com/users/jescalan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jescalan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "There is always a port (it's a default argument)\n",
        "created_at": "2014-04-21T18:33:58Z",
        "updated_at": "2014-04-21T22:57:20Z",
        "html_url": "https://github.com/jescalan/roots/pull/448#discussion_r11819466",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/448",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/11819466"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/448#discussion_r11819466"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/448"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/11819487",
        "pull_request_review_id": null,
        "id": 11819487,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODE5NDg3",
        "diff_hunk": "@@ -1,40 +1,77 @@\n open   = require 'open'\n-path   = require 'path'\n-Roots  = require '../'\n+Roots  = require '../../index'\n Server = require '../local_server'\n \n-default_port = 1111\n+###*\n+ * Wrapper for the roots watch function, and implementation of the local server\n+ * and compile/reload/error events that are sent to it. The gist:\n+ *\n+ * - Starts the server at the given (or default) port\n+ * - Binds start, done, and error events to functions that emit to the cli and\n+ *   trigger browser actions through the server\n+ * - Bind an event such that the first time it finishes compiling, it opens the\n+ *   server in your browser (unless prevented with options)\n+ * - Returns the server and watcher objects so they can be closed.\n+ *\n+ * @param  {CLI} cli - event emitter for data to be piped to the cli\n+ * @param  {Object} args arguments object to be passed to roots fn\n+ * @return {Object} contains 'server' and 'watcher' keys\n+###\n \n-module.exports = (args, cli) ->\n-  dir = if args._[1] then path.resolve(args._[1]) else process.cwd()\n-  opts = { env: args.env || 'development' }\n-  project = new Roots(dir, opts)\n-  args.open ?= true\n+module.exports = (cli, args) ->\n+  project = new Roots(args.path, { env: args.environment })",
        "path": "lib/cli/watch.coffee",
        "position": 30,
        "original_position": 30,
        "commit_id": "72fdf95a6c9811b46a0a990c3cc5815628ad6206",
        "original_commit_id": "6ecd57b5a1acb40480907df7671bc416e0a6232a",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "yes that is fair, how about this tho\n\nenv = process.env || args.env\n\ntons and tons of software uses the process.env... so that is why\n",
        "created_at": "2014-04-21T18:34:26Z",
        "updated_at": "2014-04-21T22:57:20Z",
        "html_url": "https://github.com/jescalan/roots/pull/448#discussion_r11819487",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/448",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/11819487"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/448#discussion_r11819487"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/448"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/11819538",
        "pull_request_review_id": null,
        "id": 11819538,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODE5NTM4",
        "diff_hunk": "@@ -1,40 +1,77 @@\n open   = require 'open'\n-path   = require 'path'\n-Roots  = require '../'\n+Roots  = require '../../index'\n Server = require '../local_server'\n \n-default_port = 1111\n+###*\n+ * Wrapper for the roots watch function, and implementation of the local server\n+ * and compile/reload/error events that are sent to it. The gist:\n+ *\n+ * - Starts the server at the given (or default) port\n+ * - Binds start, done, and error events to functions that emit to the cli and\n+ *   trigger browser actions through the server\n+ * - Bind an event such that the first time it finishes compiling, it opens the\n+ *   server in your browser (unless prevented with options)\n+ * - Returns the server and watcher objects so they can be closed.\n+ *\n+ * @param  {CLI} cli - event emitter for data to be piped to the cli\n+ * @param  {Object} args arguments object to be passed to roots fn\n+ * @return {Object} contains 'server' and 'watcher' keys\n+###\n \n-module.exports = (args, cli) ->\n-  dir = if args._[1] then path.resolve(args._[1]) else process.cwd()\n-  opts = { env: args.env || 'development' }\n-  project = new Roots(dir, opts)\n-  args.open ?= true\n+module.exports = (cli, args) ->\n+  project = new Roots(args.path, { env: args.environment })",
        "path": "lib/cli/watch.coffee",
        "position": 30,
        "original_position": 30,
        "commit_id": "72fdf95a6c9811b46a0a990c3cc5815628ad6206",
        "original_commit_id": "6ecd57b5a1acb40480907df7671bc416e0a6232a",
        "user": {
            "login": "jescalan",
            "id": 556932,
            "node_id": "MDQ6VXNlcjU1NjkzMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/556932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jescalan",
            "html_url": "https://github.com/jescalan",
            "followers_url": "https://api.github.com/users/jescalan/followers",
            "following_url": "https://api.github.com/users/jescalan/following{/other_user}",
            "gists_url": "https://api.github.com/users/jescalan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jescalan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jescalan/subscriptions",
            "organizations_url": "https://api.github.com/users/jescalan/orgs",
            "repos_url": "https://api.github.com/users/jescalan/repos",
            "events_url": "https://api.github.com/users/jescalan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jescalan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You think other software will use process.env and try to control roots remotely through the command line rather than the javascript api?\n\nIf there's a use case I'd be happy to, it just seems like a questionable idea...\n",
        "created_at": "2014-04-21T18:35:43Z",
        "updated_at": "2014-04-21T22:57:20Z",
        "html_url": "https://github.com/jescalan/roots/pull/448#discussion_r11819538",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/448",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/11819538"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/448#discussion_r11819538"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/448"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/11819560",
        "pull_request_review_id": null,
        "id": 11819560,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODE5NTYw",
        "diff_hunk": "@@ -1,82 +1,64 @@\n-path           = require 'path'\n-fs             = require 'fs'\n-{EventEmitter} = require('events')\n-exec           = require('child_process').exec\n-nodefn         = require 'when/node'\n-sprout         = require 'sprout'\n-global_config  = require '../global_config'\n-_              = require 'lodash'\n-npm            = require 'npm'\n+path          = require 'path'\n+fs            = require 'fs'\n+W             = require 'when'\n+nodefn        = require 'when/node'\n+sprout        = require 'sprout'\n+global_config = require '../global_config'\n+_             = require 'lodash'\n+npm           = require 'npm'\n+\n+base_tpl_name = 'roots-base'\n+base_tpl_url      = 'https://github.com/roots-dev/base.git'\n \n ###*\n- * @class New\n- * @classdesc Uses sprout to create new roots projects\n+ * Creates a new roots project using a template. If a template is not provided,\n+ * the roots-base template is used. If the roots-base template has not been\n+ * installed, that is installed first. Once the template has been created, if it\n+ * contains a package.json file with dependencies, they are installed. To review\n+ * the promise chain:\n+ *\n+ * - check to see if roots-base is installed\n+ * - if not, install it, emitting 'template:base_added' when finished\n+ * - initialize the template with sprout\n+ * - when finished, emit 'template:created'\n+ * - check to see if deps are present\n+ * - if so install them, emit 'deps:installing' before and 'deps:finished' after\n+ * - at the end, emit 'done' or 'error events', and return a promise\n+ *\n+ * @param  {Roots} roots - roots instance\n+ * @param  {Object} opts - options object\n+ * @return {Promise} promise for completed new template\n ###\n \n-class New extends EventEmitter\n+class New\n+  constructor: (@Roots) ->\n \n-  constructor: (@roots) ->\n-    @base_url = 'https://github.com/roots-dev/base.git'\n+  exec: (opts = {}) ->\n+    d = W.defer()\n \n-  ###*\n-   * Main method, given a path to where the project should be and some (optional)\n-   * additional options, creates a new project template. If no template is provided,\n-   * uses the roots default template, which is installed if not present. Once the\n-   * template is created, installs dependencies if a package.json is present.\n-   *\n-   * @param  {Object} opts - Arguments object, takes the following:\n-   *                       - path: path to nonexistant folder where project should be\n-   *                       - template: name of the template to use for the project\n-   *                       - options: overrides for template config\n-   *                       - defaults: default values for template config\n-  ###\n-\n-  exec: (opts) ->\n-    @path      = opts.path     || throw new Error('missing path')\n-    @template  = opts.template || global_config().get('default_template')\n-    @overrides = opts.options  || {}\n-    @defaults  = opts.defaults || {}\n-\n-    @pkg = path.join(@path, 'package.json')\n-    @defaults.name = opts.name\n-\n-    if not _.contains(sprout.list(), 'roots-base')\n-      sprout.add(name: 'roots-base', uri: @base_url)\n-        .catch((err) => @emit('error', err))\n-        .tap(=> @emit('template:base_added'))\n-        .then(=> init.call(@))\n-    else\n-      init.call(@)\n-\n-    return @\n+    if not opts.path\n+      d.reject(new Error('missing path'))\n+      return d.promise",
        "path": "lib/api/new.coffee",
        "position": null,
        "original_position": 86,
        "commit_id": "72fdf95a6c9811b46a0a990c3cc5815628ad6206",
        "original_commit_id": "6ecd57b5a1acb40480907df7671bc416e0a6232a",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "yes i think you can \nhttps://github.com/cujojs/when/blob/master/docs/api.md#whenreject\n\n> Create a rejected promise with the supplied error as the rejection reason.\n",
        "created_at": "2014-04-21T18:36:07Z",
        "updated_at": "2014-04-21T22:57:20Z",
        "html_url": "https://github.com/jescalan/roots/pull/448#discussion_r11819560",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/448",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/11819560"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/448#discussion_r11819560"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/448"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/11819586",
        "pull_request_review_id": null,
        "id": 11819586,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODE5NTg2",
        "diff_hunk": "@@ -1,40 +1,77 @@\n open   = require 'open'\n-path   = require 'path'\n-Roots  = require '../'\n+Roots  = require '../../index'\n Server = require '../local_server'\n \n-default_port = 1111\n+###*\n+ * Wrapper for the roots watch function, and implementation of the local server\n+ * and compile/reload/error events that are sent to it. The gist:\n+ *\n+ * - Starts the server at the given (or default) port\n+ * - Binds start, done, and error events to functions that emit to the cli and\n+ *   trigger browser actions through the server\n+ * - Bind an event such that the first time it finishes compiling, it opens the\n+ *   server in your browser (unless prevented with options)\n+ * - Returns the server and watcher objects so they can be closed.\n+ *\n+ * @param  {CLI} cli - event emitter for data to be piped to the cli\n+ * @param  {Object} args arguments object to be passed to roots fn\n+ * @return {Object} contains 'server' and 'watcher' keys\n+###\n \n-module.exports = (args, cli) ->\n-  dir = if args._[1] then path.resolve(args._[1]) else process.cwd()\n-  opts = { env: args.env || 'development' }\n-  project = new Roots(dir, opts)\n-  args.open ?= true\n+module.exports = (cli, args) ->\n+  project = new Roots(args.path, { env: args.environment })\n+  server  = new Server(project, project.root)\n+  port    = process.env.port or args.port\n \n   cli.emit('inline', 'compiling... '.grey)\n+  server.start(port)\n \n-  server = new Server(project, dir)\n-  server.start(process.env.port || default_port)\n+  watcher = project.watch()\n \n-  w = project.watch()\n+  watcher.on('start', on_start.bind(null, cli, server))\n+  watcher.on('error', on_error.bind(null, cli, server))\n+  watcher.on('done', on_done.bind(null, cli, server))\n \n-  w.on 'start', -> on_start(cli, server)\n-  w.on 'error', (err) -> on_error(cli, server, err)\n-  w.on 'done', -> on_done(cli, server)\n-  w.once 'done', ->\n-    if project.config.open_browser and args.open\n-      open(\"http://localhost:#{process.env.port || default_port}/\")\n+  watcher.once 'done', ->\n+    if project.config.open_browser and not args.no_open\n+      open(\"http://localhost:#{port}/\")",
        "path": "lib/cli/watch.coffee",
        "position": 54,
        "original_position": 54,
        "commit_id": "72fdf95a6c9811b46a0a990c3cc5815628ad6206",
        "original_commit_id": "6ecd57b5a1acb40480907df7671bc416e0a6232a",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "have ran into the need in v2 to not have a port but heh I can just add that at a later date\n",
        "created_at": "2014-04-21T18:36:41Z",
        "updated_at": "2014-04-21T22:57:20Z",
        "html_url": "https://github.com/jescalan/roots/pull/448#discussion_r11819586",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/448",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/11819586"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/448#discussion_r11819586"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/448"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/11819604",
        "pull_request_review_id": null,
        "id": 11819604,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODE5NjA0",
        "diff_hunk": "@@ -1,82 +1,64 @@\n-path           = require 'path'\n-fs             = require 'fs'\n-{EventEmitter} = require('events')\n-exec           = require('child_process').exec\n-nodefn         = require 'when/node'\n-sprout         = require 'sprout'\n-global_config  = require '../global_config'\n-_              = require 'lodash'\n-npm            = require 'npm'\n+path          = require 'path'\n+fs            = require 'fs'\n+W             = require 'when'\n+nodefn        = require 'when/node'\n+sprout        = require 'sprout'\n+global_config = require '../global_config'\n+_             = require 'lodash'\n+npm           = require 'npm'\n+\n+base_tpl_name = 'roots-base'\n+base_tpl_url      = 'https://github.com/roots-dev/base.git'\n \n ###*\n- * @class New\n- * @classdesc Uses sprout to create new roots projects\n+ * Creates a new roots project using a template. If a template is not provided,\n+ * the roots-base template is used. If the roots-base template has not been\n+ * installed, that is installed first. Once the template has been created, if it\n+ * contains a package.json file with dependencies, they are installed. To review\n+ * the promise chain:\n+ *\n+ * - check to see if roots-base is installed\n+ * - if not, install it, emitting 'template:base_added' when finished\n+ * - initialize the template with sprout\n+ * - when finished, emit 'template:created'\n+ * - check to see if deps are present\n+ * - if so install them, emit 'deps:installing' before and 'deps:finished' after\n+ * - at the end, emit 'done' or 'error events', and return a promise\n+ *\n+ * @param  {Roots} roots - roots instance\n+ * @param  {Object} opts - options object\n+ * @return {Promise} promise for completed new template\n ###\n \n-class New extends EventEmitter\n+class New\n+  constructor: (@Roots) ->\n \n-  constructor: (@roots) ->\n-    @base_url = 'https://github.com/roots-dev/base.git'\n+  exec: (opts = {}) ->\n+    d = W.defer()\n \n-  ###*\n-   * Main method, given a path to where the project should be and some (optional)\n-   * additional options, creates a new project template. If no template is provided,\n-   * uses the roots default template, which is installed if not present. Once the\n-   * template is created, installs dependencies if a package.json is present.\n-   *\n-   * @param  {Object} opts - Arguments object, takes the following:\n-   *                       - path: path to nonexistant folder where project should be\n-   *                       - template: name of the template to use for the project\n-   *                       - options: overrides for template config\n-   *                       - defaults: default values for template config\n-  ###\n-\n-  exec: (opts) ->\n-    @path      = opts.path     || throw new Error('missing path')\n-    @template  = opts.template || global_config().get('default_template')\n-    @overrides = opts.options  || {}\n-    @defaults  = opts.defaults || {}\n-\n-    @pkg = path.join(@path, 'package.json')\n-    @defaults.name = opts.name\n-\n-    if not _.contains(sprout.list(), 'roots-base')\n-      sprout.add(name: 'roots-base', uri: @base_url)\n-        .catch((err) => @emit('error', err))\n-        .tap(=> @emit('template:base_added'))\n-        .then(=> init.call(@))\n-    else\n-      init.call(@)\n-\n-    return @\n+    if not opts.path\n+      d.reject(new Error('missing path'))\n+      return d.promise",
        "path": "lib/api/new.coffee",
        "position": null,
        "original_position": 86,
        "commit_id": "72fdf95a6c9811b46a0a990c3cc5815628ad6206",
        "original_commit_id": "6ecd57b5a1acb40480907df7671bc416e0a6232a",
        "user": {
            "login": "jescalan",
            "id": 556932,
            "node_id": "MDQ6VXNlcjU1NjkzMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/556932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jescalan",
            "html_url": "https://github.com/jescalan",
            "followers_url": "https://api.github.com/users/jescalan/followers",
            "following_url": "https://api.github.com/users/jescalan/following{/other_user}",
            "gists_url": "https://api.github.com/users/jescalan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jescalan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jescalan/subscriptions",
            "organizations_url": "https://api.github.com/users/jescalan/orgs",
            "repos_url": "https://api.github.com/users/jescalan/repos",
            "events_url": "https://api.github.com/users/jescalan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jescalan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Oh yeah I could return a `W.reject` - i'll change it to that :grinning: \n",
        "created_at": "2014-04-21T18:36:59Z",
        "updated_at": "2014-04-21T22:57:20Z",
        "html_url": "https://github.com/jescalan/roots/pull/448#discussion_r11819604",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/448",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/11819604"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/448#discussion_r11819604"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/448"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/11819645",
        "pull_request_review_id": null,
        "id": 11819645,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODE5NjQ1",
        "diff_hunk": "@@ -1,40 +1,77 @@\n open   = require 'open'\n-path   = require 'path'\n-Roots  = require '../'\n+Roots  = require '../../index'\n Server = require '../local_server'\n \n-default_port = 1111\n+###*\n+ * Wrapper for the roots watch function, and implementation of the local server\n+ * and compile/reload/error events that are sent to it. The gist:\n+ *\n+ * - Starts the server at the given (or default) port\n+ * - Binds start, done, and error events to functions that emit to the cli and\n+ *   trigger browser actions through the server\n+ * - Bind an event such that the first time it finishes compiling, it opens the\n+ *   server in your browser (unless prevented with options)\n+ * - Returns the server and watcher objects so they can be closed.\n+ *\n+ * @param  {CLI} cli - event emitter for data to be piped to the cli\n+ * @param  {Object} args arguments object to be passed to roots fn\n+ * @return {Object} contains 'server' and 'watcher' keys\n+###\n \n-module.exports = (args, cli) ->\n-  dir = if args._[1] then path.resolve(args._[1]) else process.cwd()\n-  opts = { env: args.env || 'development' }\n-  project = new Roots(dir, opts)\n-  args.open ?= true\n+module.exports = (cli, args) ->\n+  project = new Roots(args.path, { env: args.environment })",
        "path": "lib/cli/watch.coffee",
        "position": 30,
        "original_position": 30,
        "commit_id": "72fdf95a6c9811b46a0a990c3cc5815628ad6206",
        "original_commit_id": "6ecd57b5a1acb40480907df7671bc416e0a6232a",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "so if I have a server and the server does a roots compile for me on deploy (which I actually do on several roots 2 projects) It is nice to set my ENV on that server, so that all I have to do is run roots compile.\n",
        "created_at": "2014-04-21T18:37:54Z",
        "updated_at": "2014-04-21T22:57:20Z",
        "html_url": "https://github.com/jescalan/roots/pull/448#discussion_r11819645",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/448",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/11819645"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/448#discussion_r11819645"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/448"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/11819708",
        "pull_request_review_id": null,
        "id": 11819708,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODE5NzA4",
        "diff_hunk": "@@ -1,18 +1,19 @@\n-path  = require('path')\n-Roots = require('../')\n+Roots = require '../../index'\n \n-module.exports = (args, cli)->\n-  dir = if args._[1] then path.resolve(args._[1]) else process.cwd()\n-  opts = { env: args.env || 'development' }\n+###*\n+ * Simple wrapper for Roots.compile, emits events and data to the cli.\n+ *\n+ * @param  {EventEmitter} cli - event emitter for data to be piped to the cli\n+ * @param  {Object} args arguments object to be passed to roots fn\n+ * @return {Promise} a promise for the compiled project\n+###\n \n-  cli.emit('inline', 'compiling... '.grey)\n-\n-  project = new Roots(dir, opts)\n+module.exports = (cli, args)->\n+  project = new Roots(args.path, { env: args.environment })\n \n-  project\n-    .on('done', -> cli.emit('data', 'done!'.green))\n-    .on 'error', (err) ->\n-      cli.emit('err', Error(err).stack)\n-      process.nextTick -> process.exit(1)\n+  cli.emit('inline', 'compiling... '.grey)\n \n-  project.compile()\n+  project.compile().then ->",
        "path": "lib/cli/compile.coffee",
        "position": null,
        "original_position": 30,
        "commit_id": "72fdf95a6c9811b46a0a990c3cc5815628ad6206",
        "original_commit_id": "6ecd57b5a1acb40480907df7671bc416e0a6232a",
        "user": {
            "login": "jescalan",
            "id": 556932,
            "node_id": "MDQ6VXNlcjU1NjkzMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/556932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jescalan",
            "html_url": "https://github.com/jescalan",
            "followers_url": "https://api.github.com/users/jescalan/followers",
            "following_url": "https://api.github.com/users/jescalan/following{/other_user}",
            "gists_url": "https://api.github.com/users/jescalan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jescalan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jescalan/subscriptions",
            "organizations_url": "https://api.github.com/users/jescalan/orgs",
            "repos_url": "https://api.github.com/users/jescalan/repos",
            "events_url": "https://api.github.com/users/jescalan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jescalan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I still don't see what's bad about using then errback here, but I'll change it just for you since it's the same functionality anyway : )\n",
        "created_at": "2014-04-21T18:39:07Z",
        "updated_at": "2014-04-21T22:57:20Z",
        "html_url": "https://github.com/jescalan/roots/pull/448#discussion_r11819708",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/448",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/11819708"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/448#discussion_r11819708"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/448"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/11819983",
        "pull_request_review_id": null,
        "id": 11819983,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODE5OTgz",
        "diff_hunk": "@@ -1,40 +1,77 @@\n open   = require 'open'\n-path   = require 'path'\n-Roots  = require '../'\n+Roots  = require '../../index'\n Server = require '../local_server'\n \n-default_port = 1111\n+###*\n+ * Wrapper for the roots watch function, and implementation of the local server\n+ * and compile/reload/error events that are sent to it. The gist:\n+ *\n+ * - Starts the server at the given (or default) port\n+ * - Binds start, done, and error events to functions that emit to the cli and\n+ *   trigger browser actions through the server\n+ * - Bind an event such that the first time it finishes compiling, it opens the\n+ *   server in your browser (unless prevented with options)\n+ * - Returns the server and watcher objects so they can be closed.\n+ *\n+ * @param  {CLI} cli - event emitter for data to be piped to the cli\n+ * @param  {Object} args arguments object to be passed to roots fn\n+ * @return {Object} contains 'server' and 'watcher' keys\n+###\n \n-module.exports = (args, cli) ->\n-  dir = if args._[1] then path.resolve(args._[1]) else process.cwd()\n-  opts = { env: args.env || 'development' }\n-  project = new Roots(dir, opts)\n-  args.open ?= true\n+module.exports = (cli, args) ->\n+  project = new Roots(args.path, { env: args.environment })",
        "path": "lib/cli/watch.coffee",
        "position": 30,
        "original_position": 30,
        "commit_id": "72fdf95a6c9811b46a0a990c3cc5815628ad6206",
        "original_commit_id": "6ecd57b5a1acb40480907df7671bc416e0a6232a",
        "user": {
            "login": "jescalan",
            "id": 556932,
            "node_id": "MDQ6VXNlcjU1NjkzMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/556932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jescalan",
            "html_url": "https://github.com/jescalan",
            "followers_url": "https://api.github.com/users/jescalan/followers",
            "following_url": "https://api.github.com/users/jescalan/following{/other_user}",
            "gists_url": "https://api.github.com/users/jescalan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jescalan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jescalan/subscriptions",
            "organizations_url": "https://api.github.com/users/jescalan/orgs",
            "repos_url": "https://api.github.com/users/jescalan/repos",
            "events_url": "https://api.github.com/users/jescalan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jescalan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You just have it run `roots compile -e production` though right?\n",
        "created_at": "2014-04-21T18:44:40Z",
        "updated_at": "2014-04-21T22:57:20Z",
        "html_url": "https://github.com/jescalan/roots/pull/448#discussion_r11819983",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/448",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/11819983"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/448#discussion_r11819983"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/448"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/11820058",
        "pull_request_review_id": null,
        "id": 11820058,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODIwMDU4",
        "diff_hunk": "@@ -1,40 +1,77 @@\n open   = require 'open'\n-path   = require 'path'\n-Roots  = require '../'\n+Roots  = require '../../index'\n Server = require '../local_server'\n \n-default_port = 1111\n+###*\n+ * Wrapper for the roots watch function, and implementation of the local server\n+ * and compile/reload/error events that are sent to it. The gist:\n+ *\n+ * - Starts the server at the given (or default) port\n+ * - Binds start, done, and error events to functions that emit to the cli and\n+ *   trigger browser actions through the server\n+ * - Bind an event such that the first time it finishes compiling, it opens the\n+ *   server in your browser (unless prevented with options)\n+ * - Returns the server and watcher objects so they can be closed.\n+ *\n+ * @param  {CLI} cli - event emitter for data to be piped to the cli\n+ * @param  {Object} args arguments object to be passed to roots fn\n+ * @return {Object} contains 'server' and 'watcher' keys\n+###\n \n-module.exports = (args, cli) ->\n-  dir = if args._[1] then path.resolve(args._[1]) else process.cwd()\n-  opts = { env: args.env || 'development' }\n-  project = new Roots(dir, opts)\n-  args.open ?= true\n+module.exports = (cli, args) ->\n+  project = new Roots(args.path, { env: args.environment })",
        "path": "lib/cli/watch.coffee",
        "position": 30,
        "original_position": 30,
        "commit_id": "72fdf95a6c9811b46a0a990c3cc5815628ad6206",
        "original_commit_id": "6ecd57b5a1acb40480907df7671bc416e0a6232a",
        "user": {
            "login": "samccone",
            "id": 883126,
            "node_id": "MDQ6VXNlcjg4MzEyNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/883126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samccone",
            "html_url": "https://github.com/samccone",
            "followers_url": "https://api.github.com/users/samccone/followers",
            "following_url": "https://api.github.com/users/samccone/following{/other_user}",
            "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
            "organizations_url": "https://api.github.com/users/samccone/orgs",
            "repos_url": "https://api.github.com/users/samccone/repos",
            "events_url": "https://api.github.com/users/samccone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samccone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "then my env has to be hard coded into the compile command as compared to just being set in\nprofile of the env\n",
        "created_at": "2014-04-21T18:46:08Z",
        "updated_at": "2014-04-21T22:57:20Z",
        "html_url": "https://github.com/jescalan/roots/pull/448#discussion_r11820058",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/448",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/11820058"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/448#discussion_r11820058"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/448"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/11820141",
        "pull_request_review_id": null,
        "id": 11820141,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODIwMTQx",
        "diff_hunk": "@@ -1,40 +1,77 @@\n open   = require 'open'\n-path   = require 'path'\n-Roots  = require '../'\n+Roots  = require '../../index'\n Server = require '../local_server'\n \n-default_port = 1111\n+###*\n+ * Wrapper for the roots watch function, and implementation of the local server\n+ * and compile/reload/error events that are sent to it. The gist:\n+ *\n+ * - Starts the server at the given (or default) port\n+ * - Binds start, done, and error events to functions that emit to the cli and\n+ *   trigger browser actions through the server\n+ * - Bind an event such that the first time it finishes compiling, it opens the\n+ *   server in your browser (unless prevented with options)\n+ * - Returns the server and watcher objects so they can be closed.\n+ *\n+ * @param  {CLI} cli - event emitter for data to be piped to the cli\n+ * @param  {Object} args arguments object to be passed to roots fn\n+ * @return {Object} contains 'server' and 'watcher' keys\n+###\n \n-module.exports = (args, cli) ->\n-  dir = if args._[1] then path.resolve(args._[1]) else process.cwd()\n-  opts = { env: args.env || 'development' }\n-  project = new Roots(dir, opts)\n-  args.open ?= true\n+module.exports = (cli, args) ->\n+  project = new Roots(args.path, { env: args.environment })",
        "path": "lib/cli/watch.coffee",
        "position": 30,
        "original_position": 30,
        "commit_id": "72fdf95a6c9811b46a0a990c3cc5815628ad6206",
        "original_commit_id": "6ecd57b5a1acb40480907df7671bc416e0a6232a",
        "user": {
            "login": "jescalan",
            "id": 556932,
            "node_id": "MDQ6VXNlcjU1NjkzMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/556932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jescalan",
            "html_url": "https://github.com/jescalan",
            "followers_url": "https://api.github.com/users/jescalan/followers",
            "following_url": "https://api.github.com/users/jescalan/following{/other_user}",
            "gists_url": "https://api.github.com/users/jescalan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jescalan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jescalan/subscriptions",
            "organizations_url": "https://api.github.com/users/jescalan/orgs",
            "repos_url": "https://api.github.com/users/jescalan/repos",
            "events_url": "https://api.github.com/users/jescalan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jescalan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Eh, ok I'll take it as a use case. Will update this in a few.\n",
        "created_at": "2014-04-21T18:47:31Z",
        "updated_at": "2014-04-21T22:57:20Z",
        "html_url": "https://github.com/jescalan/roots/pull/448#discussion_r11820141",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/448",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/11820141"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/448#discussion_r11820141"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/448"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/11830163",
        "pull_request_review_id": null,
        "id": 11830163,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODMwMTYz",
        "diff_hunk": "@@ -1,40 +1,77 @@\n open   = require 'open'\n-path   = require 'path'\n-Roots  = require '../'\n+Roots  = require '../../index'\n Server = require '../local_server'\n \n-default_port = 1111\n+###*\n+ * Wrapper for the roots watch function, and implementation of the local server\n+ * and compile/reload/error events that are sent to it. The gist:\n+ *\n+ * - Starts the server at the given (or default) port\n+ * - Binds start, done, and error events to functions that emit to the cli and\n+ *   trigger browser actions through the server\n+ * - Bind an event such that the first time it finishes compiling, it opens the\n+ *   server in your browser (unless prevented with options)\n+ * - Returns the server and watcher objects so they can be closed.\n+ *\n+ * @param  {CLI} cli - event emitter for data to be piped to the cli\n+ * @param  {Object} args arguments object to be passed to roots fn\n+ * @return {Object} contains 'server' and 'watcher' keys\n+###\n \n-module.exports = (args, cli) ->\n-  dir = if args._[1] then path.resolve(args._[1]) else process.cwd()\n-  opts = { env: args.env || 'development' }\n-  project = new Roots(dir, opts)\n-  args.open ?= true\n+module.exports = (cli, args) ->\n+  project = new Roots(args.path, { env: args.environment })",
        "path": "lib/cli/watch.coffee",
        "position": 30,
        "original_position": 30,
        "commit_id": "72fdf95a6c9811b46a0a990c3cc5815628ad6206",
        "original_commit_id": "6ecd57b5a1acb40480907df7671bc416e0a6232a",
        "user": {
            "login": "jescalan",
            "id": 556932,
            "node_id": "MDQ6VXNlcjU1NjkzMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/556932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jescalan",
            "html_url": "https://github.com/jescalan",
            "followers_url": "https://api.github.com/users/jescalan/followers",
            "following_url": "https://api.github.com/users/jescalan/following{/other_user}",
            "gists_url": "https://api.github.com/users/jescalan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jescalan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jescalan/subscriptions",
            "organizations_url": "https://api.github.com/users/jescalan/orgs",
            "repos_url": "https://api.github.com/users/jescalan/repos",
            "events_url": "https://api.github.com/users/jescalan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jescalan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ok this was fixed [here](https://github.com/jenius/roots/commit/5c8cd0d66b3d31b554d78ea701a33f2c11359fe2#diff-e45296d9338eea32d5bdfa141a50cef1R82)\n",
        "created_at": "2014-04-21T22:45:22Z",
        "updated_at": "2014-04-21T22:57:20Z",
        "html_url": "https://github.com/jescalan/roots/pull/448#discussion_r11830163",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/448",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/11830163"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/448#discussion_r11830163"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/448"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/27254926",
        "pull_request_review_id": null,
        "id": 27254926,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MjU0OTI2",
        "diff_hunk": "@@ -85,32 +85,38 @@ class Config\n    * If the file does export anything, this means it's being used as a node\n    * file, so it is required and processed as a node file.\n    *\n+   * If an environment specific conf file is loaded, the locals and extensions\n+   * from the environment specific file are then merged into the default ",
        "path": "lib/config.coffee",
        "position": null,
        "original_position": 5,
        "commit_id": "ca0ddf31eff27520ac8819b5f2599bf47bd9f81e",
        "original_commit_id": "6dffef4f392ec3aa5a51b3b2373d16ed82323557",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Line ends with trailing whitespace\n",
        "created_at": "2015-03-26T20:54:24Z",
        "updated_at": "2015-03-31T18:54:58Z",
        "html_url": "https://github.com/jescalan/roots/pull/625#discussion_r27254926",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/625",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/27254926"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/625#discussion_r27254926"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/625"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/27254934",
        "pull_request_review_id": null,
        "id": 27254934,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MjU0OTM0",
        "diff_hunk": "@@ -1 +1,24 @@\n-ignores: ['doge_file.html']\n+test_extension    = require './test_extension'\n+another_extension = require './another_extension'\n+\n+module.exports = ",
        "path": "test/fixtures/compile/environments/app.coffee",
        "position": 5,
        "original_position": 5,
        "commit_id": "ca0ddf31eff27520ac8819b5f2599bf47bd9f81e",
        "original_commit_id": "6dffef4f392ec3aa5a51b3b2373d16ed82323557",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Line ends with trailing whitespace\n",
        "created_at": "2015-03-26T20:54:26Z",
        "updated_at": "2015-03-31T18:54:58Z",
        "html_url": "https://github.com/jescalan/roots/pull/625#discussion_r27254934",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/625",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/27254934"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/625#discussion_r27254934"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/625"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/27508870",
        "pull_request_review_id": null,
        "id": 27508870,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NTA4ODcw",
        "diff_hunk": "@@ -85,32 +85,38 @@ class Config\n    * If the file does export anything, this means it's being used as a node\n    * file, so it is required and processed as a node file.\n    *\n+   * If an environment specific conf file is loaded, the locals and extensions\n+   * from the environment specific file are then merged into the default\n+   * app.coffee config to allow DRY reuse of locals and extensions between\n+   * environments.\n+   *\n    * Each of the values that are exported are attached directly to the config\n    * object, overwriting the defaults if this applies. Finally, extensions are\n    * all registered with roots if they are provided.\n   ###\n \n   load_config = ->\n-    basename = if @env is 'development' then \"app\" else \"app.#{@env}\"\n-    config_path = path.join(@roots.root, basename)\n-    config_exists = fs.existsSync(\"#{config_path}.coffee\")\n+    conf = read_config.call(@, \"app\")",
        "path": "lib/config.coffee",
        "position": 18,
        "original_position": 18,
        "commit_id": "ca0ddf31eff27520ac8819b5f2599bf47bd9f81e",
        "original_commit_id": "e7ba3c5ff1f4e8ade4829a826de168c2cd00bf2f",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@ must not be used stand alone\n",
        "created_at": "2015-03-31T18:36:00Z",
        "updated_at": "2015-03-31T18:54:58Z",
        "html_url": "https://github.com/jescalan/roots/pull/625#discussion_r27508870",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/625",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/27508870"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/625#discussion_r27508870"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/625"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/27508872",
        "pull_request_review_id": null,
        "id": 27508872,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NTA4ODcy",
        "diff_hunk": "@@ -85,32 +85,38 @@ class Config\n    * If the file does export anything, this means it's being used as a node\n    * file, so it is required and processed as a node file.\n    *\n+   * If an environment specific conf file is loaded, the locals and extensions\n+   * from the environment specific file are then merged into the default\n+   * app.coffee config to allow DRY reuse of locals and extensions between\n+   * environments.\n+   *\n    * Each of the values that are exported are attached directly to the config\n    * object, overwriting the defaults if this applies. Finally, extensions are\n    * all registered with roots if they are provided.\n   ###\n \n   load_config = ->\n-    basename = if @env is 'development' then \"app\" else \"app.#{@env}\"\n-    config_path = path.join(@roots.root, basename)\n-    config_exists = fs.existsSync(\"#{config_path}.coffee\")\n+    conf = read_config.call(@, \"app\")\n \n-    if not config_exists\n-      if @env isnt 'development'\n-        console.warn \"\\nEnvironment config file not found. Make sure\n-        'app.#{@env}.coffee' is present at the root of your project.\\n\".yellow\n-      return\n+    if @env isnt 'development'\n+      env_conf        = read_config.call(@, \"app.#{@env}\")",
        "path": "lib/config.coffee",
        "position": null,
        "original_position": 26,
        "commit_id": "ca0ddf31eff27520ac8819b5f2599bf47bd9f81e",
        "original_commit_id": "e7ba3c5ff1f4e8ade4829a826de168c2cd00bf2f",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@ must not be used stand alone\n",
        "created_at": "2015-03-31T18:36:00Z",
        "updated_at": "2015-03-31T18:54:58Z",
        "html_url": "https://github.com/jescalan/roots/pull/625#discussion_r27508872",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/625",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/27508872"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/625#discussion_r27508872"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/625"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/27508873",
        "pull_request_review_id": null,
        "id": 27508873,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NTA4ODcz",
        "diff_hunk": "@@ -144,15 +144,26 @@ describe 'compile', ->\n       p.should.have.content('/path_helper.html')\n       done()\n \n-  it 'should work with different environments', (done) ->\n-    p = path.join(test_path, 'environments')\n-    output = path.join(p, 'public')\n+  describe 'environments', ->\n+\n+    before (done) ->\n+      p        = path.join(test_path, 'environments')\n+      @output  = path.join(p, 'public')\n+      @project = (new Roots(p, { env: 'doge' }))\n+      @project.compile().done((-> done()), done)\n+\n+    it 'should ignore files based off the correct environment', ->\n+      path.join(@output, 'doge_file.html').should.be.a.file()\n+      path.join(@output, 'dev_file.html').should.not.be.a.path()\n+\n+    it 'it should merge locals from the environment w the default locals from app.coffee', ->",
        "path": "test/compile.coffee",
        "position": 19,
        "original_position": 19,
        "commit_id": "ca0ddf31eff27520ac8819b5f2599bf47bd9f81e",
        "original_commit_id": "e7ba3c5ff1f4e8ade4829a826de168c2cd00bf2f",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Line exceeds maximum allowed length\n",
        "created_at": "2015-03-31T18:36:00Z",
        "updated_at": "2015-03-31T18:54:58Z",
        "html_url": "https://github.com/jescalan/roots/pull/625#discussion_r27508873",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/625",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/27508873"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/625#discussion_r27508873"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/625"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/27508874",
        "pull_request_review_id": null,
        "id": 27508874,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NTA4ODc0",
        "diff_hunk": "@@ -144,15 +144,26 @@ describe 'compile', ->\n       p.should.have.content('/path_helper.html')\n       done()\n \n-  it 'should work with different environments', (done) ->\n-    p = path.join(test_path, 'environments')\n-    output = path.join(p, 'public')\n+  describe 'environments', ->\n+\n+    before (done) ->\n+      p        = path.join(test_path, 'environments')\n+      @output  = path.join(p, 'public')\n+      @project = (new Roots(p, { env: 'doge' }))\n+      @project.compile().done((-> done()), done)\n+\n+    it 'should ignore files based off the correct environment', ->\n+      path.join(@output, 'doge_file.html').should.be.a.file()\n+      path.join(@output, 'dev_file.html').should.not.be.a.path()\n+\n+    it 'it should merge locals from the environment w the default locals from app.coffee', ->\n+      @project.config.locals.data.user.name.should.eq('alfred')\n+      @project.config.locals.data.user.age.should.eq(45)\n+\n+    it 'should replace extensions from the default app.coffee w environment specific ones', ->",
        "path": "test/compile.coffee",
        "position": 23,
        "original_position": 23,
        "commit_id": "ca0ddf31eff27520ac8819b5f2599bf47bd9f81e",
        "original_commit_id": "e7ba3c5ff1f4e8ade4829a826de168c2cd00bf2f",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Line exceeds maximum allowed length\n",
        "created_at": "2015-03-31T18:36:01Z",
        "updated_at": "2015-03-31T18:54:58Z",
        "html_url": "https://github.com/jescalan/roots/pull/625#discussion_r27508874",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/625",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/27508874"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/625#discussion_r27508874"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/625"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/27508876",
        "pull_request_review_id": null,
        "id": 27508876,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NTA4ODc2",
        "diff_hunk": "@@ -144,15 +144,26 @@ describe 'compile', ->\n       p.should.have.content('/path_helper.html')\n       done()\n \n-  it 'should work with different environments', (done) ->\n-    p = path.join(test_path, 'environments')\n-    output = path.join(p, 'public')\n+  describe 'environments', ->\n+\n+    before (done) ->\n+      p        = path.join(test_path, 'environments')\n+      @output  = path.join(p, 'public')\n+      @project = (new Roots(p, { env: 'doge' }))\n+      @project.compile().done((-> done()), done)\n+\n+    it 'should ignore files based off the correct environment', ->\n+      path.join(@output, 'doge_file.html').should.be.a.file()\n+      path.join(@output, 'dev_file.html').should.not.be.a.path()\n+\n+    it 'it should merge locals from the environment w the default locals from app.coffee', ->\n+      @project.config.locals.data.user.name.should.eq('alfred')\n+      @project.config.locals.data.user.age.should.eq(45)\n+\n+    it 'should replace extensions from the default app.coffee w environment specific ones', ->\n+      @project.config.locals.test_extension.test.should.eq('app.doge.coffee')\n+      @project.config.locals.another_extension.test.should.eq('another extension')",
        "path": "test/compile.coffee",
        "position": 25,
        "original_position": 25,
        "commit_id": "ca0ddf31eff27520ac8819b5f2599bf47bd9f81e",
        "original_commit_id": "e7ba3c5ff1f4e8ade4829a826de168c2cd00bf2f",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Line exceeds maximum allowed length\n",
        "created_at": "2015-03-31T18:36:01Z",
        "updated_at": "2015-03-31T18:54:58Z",
        "html_url": "https://github.com/jescalan/roots/pull/625#discussion_r27508876",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/625",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/27508876"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/625#discussion_r27508876"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/625"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/28980969",
        "pull_request_review_id": null,
        "id": 28980969,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4OTgwOTY5",
        "diff_hunk": "@@ -0,0 +1,22 @@\n+Sprout        = require 'sprout'\n+path          = require 'path'\n+osenv         = require 'osenv'\n+os            = require 'os'\n+crypto        = require 'crypto'\n+mkdirp        = require 'mkdirp'\n+fs            = require 'fs'\n+\n+module.exports = (p = sprout_user_path()) ->\n+  if p == sprout_user_path() and not fs.existsSync(p) then mkdirp(p)\n+  new Sprout(p)\n+\n+sprout_user_path = ->\n+  user = (osenv.user() || generate_fake_user()).replace(/\\\\/g, '-')\n+  tmp = path.join((if os.tmpdir then os.tmpdir() else os.tmpDir()), user)\n+  path.join((osenv.home() || tmp), '.config', 'roots', 'templates');",
        "path": "lib/sprout.coffee",
        "position": null,
        "original_position": 16,
        "commit_id": "fe4b218deac33aab9825f786f3717f52260aef3a",
        "original_commit_id": "e8517c59d7e1f24c35947a0f0419fa371425cba5",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Line contains a trailing semicolon\n",
        "created_at": "2015-04-23T16:53:01Z",
        "updated_at": "2015-04-29T14:48:04Z",
        "html_url": "https://github.com/jescalan/roots/pull/632#discussion_r28980969",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/632",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/28980969"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/632#discussion_r28980969"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/632"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/28980970",
        "pull_request_review_id": null,
        "id": 28980970,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4OTgwOTcw",
        "diff_hunk": "@@ -0,0 +1,22 @@\n+Sprout        = require 'sprout'\n+path          = require 'path'\n+osenv         = require 'osenv'\n+os            = require 'os'\n+crypto        = require 'crypto'\n+mkdirp        = require 'mkdirp'\n+fs            = require 'fs'\n+\n+module.exports = (p = sprout_user_path()) ->\n+  if p == sprout_user_path() and not fs.existsSync(p) then mkdirp(p)\n+  new Sprout(p)\n+\n+sprout_user_path = ->\n+  user = (osenv.user() || generate_fake_user()).replace(/\\\\/g, '-')\n+  tmp = path.join((if os.tmpdir then os.tmpdir() else os.tmpDir()), user)\n+  path.join((osenv.home() || tmp), '.config', 'roots', 'templates');\n+\n+generate_fake_user = ->\n+  uid = [process.pid, Date.now(), Math.floor(Math.random()*10000000)].join('-');",
        "path": "lib/sprout.coffee",
        "position": null,
        "original_position": 19,
        "commit_id": "fe4b218deac33aab9825f786f3717f52260aef3a",
        "original_commit_id": "e8517c59d7e1f24c35947a0f0419fa371425cba5",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Line contains a trailing semicolon\n",
        "created_at": "2015-04-23T16:53:01Z",
        "updated_at": "2015-04-29T14:48:04Z",
        "html_url": "https://github.com/jescalan/roots/pull/632#discussion_r28980970",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/632",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/28980970"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/632#discussion_r28980970"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/632"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/28980971",
        "pull_request_review_id": null,
        "id": 28980971,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4OTgwOTcx",
        "diff_hunk": "@@ -30,9 +34,9 @@ describe 'new', ->\n   it 'should create a project with another template if provided', (done) ->\n     Roots.template.add(name: 'foobar', uri: test_tpl_path)\n       .then ->\n-        Roots.new(path: new_path, overrides: { foo: 'bar' }, template: 'foobar')\n+        Roots.new(path: new_path, overrides: { name: 'foo', description: 'bar' }, template: 'foobar')",
        "path": "test/new.coffee",
        "position": null,
        "original_position": 22,
        "commit_id": "fe4b218deac33aab9825f786f3717f52260aef3a",
        "original_commit_id": "e8517c59d7e1f24c35947a0f0419fa371425cba5",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Line exceeds maximum allowed length\n",
        "created_at": "2015-04-23T16:53:02Z",
        "updated_at": "2015-04-29T14:48:04Z",
        "html_url": "https://github.com/jescalan/roots/pull/632#discussion_r28980971",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/632",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/28980971"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/632#discussion_r28980971"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/632"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/29118612",
        "pull_request_review_id": null,
        "id": 29118612,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MTE4NjEy",
        "diff_hunk": "@@ -30,9 +34,12 @@ describe 'new', ->\n   it 'should create a project with another template if provided', (done) ->\n     Roots.template.add(name: 'foobar', uri: test_tpl_path)\n       .then ->\n-        Roots.new(path: new_path, overrides: { foo: 'bar' }, template: 'foobar')\n+        Roots.new(path: new_path, overrides: {\n+          name: 'foo',\n+          description: 'bar' },\n+        template: 'foobar')\n       .then ->\n-        util.file.exists('new/testing/index.html').should.be.true\n+        util.file.exists('new/testing/app.coffee').should.be.true",
        "path": "test/new.coffee",
        "position": null,
        "original_position": 28,
        "commit_id": "fe4b218deac33aab9825f786f3717f52260aef3a",
        "original_commit_id": "c77781feed8ab6147e5fa69821c88a3366b87f41",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Line contains inconsistent indentation\n",
        "created_at": "2015-04-27T02:56:23Z",
        "updated_at": "2015-04-29T14:48:04Z",
        "html_url": "https://github.com/jescalan/roots/pull/632#discussion_r29118612",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/632",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/29118612"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/632#discussion_r29118612"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/632"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/29118642",
        "pull_request_review_id": null,
        "id": 29118642,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MTE4NjQy",
        "diff_hunk": "@@ -30,9 +34,13 @@ describe 'new', ->\n   it 'should create a project with another template if provided', (done) ->\n     Roots.template.add(name: 'foobar', uri: test_tpl_path)\n       .then ->\n-        Roots.new(path: new_path, overrides: { foo: 'bar' }, template: 'foobar')\n+        overrides = {\n+          name: 'foo',\n+          description: 'bar'\n+        }\n+        Roots.new(path: new_path, overrides: overrides, template: 'foobar')\n       .then ->\n-        util.file.exists('new/testing/index.html').should.be.true\n+        util.file.exists('new/testing/app.coffee').should.be.true",
        "path": "test/new.coffee",
        "position": null,
        "original_position": 29,
        "commit_id": "fe4b218deac33aab9825f786f3717f52260aef3a",
        "original_commit_id": "11b6df4e2830923ee0a0e3aa210483ba848062a6",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Line contains inconsistent indentation\n",
        "created_at": "2015-04-27T02:57:45Z",
        "updated_at": "2015-04-29T14:48:04Z",
        "html_url": "https://github.com/jescalan/roots/pull/632#discussion_r29118642",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/632",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/29118642"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/632#discussion_r29118642"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/632"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/32447950",
        "pull_request_review_id": null,
        "id": 32447950,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNDQ3OTUw",
        "diff_hunk": "@@ -46,6 +46,12 @@ class New\n \n     opts =\n       locals: opts.overrides ? {}\n+      questionnaire: (questions, skip) ->\n+        W.promise (resolve, reject) ->\n+          qs = []\n+          for question in questions\n+            qs.push(question) unless !_.contains(skip, question.name)",
        "path": "lib/api/new.coffee",
        "position": null,
        "original_position": 8,
        "commit_id": "b5b7d9610e9adc3368813cb3a3dd167d67f3c3b3",
        "original_commit_id": "f4c3f7ba3b21270d3562c9259e4881ce63b62966",
        "user": {
            "login": "kylemac",
            "id": 49507,
            "node_id": "MDQ6VXNlcjQ5NTA3",
            "avatar_url": "https://avatars2.githubusercontent.com/u/49507?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kylemac",
            "html_url": "https://github.com/kylemac",
            "followers_url": "https://api.github.com/users/kylemac/followers",
            "following_url": "https://api.github.com/users/kylemac/following{/other_user}",
            "gists_url": "https://api.github.com/users/kylemac/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kylemac/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kylemac/subscriptions",
            "organizations_url": "https://api.github.com/users/kylemac/orgs",
            "repos_url": "https://api.github.com/users/kylemac/repos",
            "events_url": "https://api.github.com/users/kylemac/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kylemac/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think you mean `qs.push(question) unless _.contains(skip, question.name)`  (gets rid of the double negative)\n",
        "created_at": "2015-06-15T17:58:27Z",
        "updated_at": "2015-06-15T18:00:17Z",
        "html_url": "https://github.com/jescalan/roots/pull/646#discussion_r32447950",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/646",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/32447950"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/646#discussion_r32447950"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/646"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/32448049",
        "pull_request_review_id": null,
        "id": 32448049,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNDQ4MDQ5",
        "diff_hunk": "@@ -46,6 +46,12 @@ class New\n \n     opts =\n       locals: opts.overrides ? {}\n+      questionnaire: (questions, skip) ->\n+        W.promise (resolve, reject) ->\n+          qs = []\n+          for question in questions\n+            qs.push(question) unless !_.contains(skip, question.name)",
        "path": "lib/api/new.coffee",
        "position": null,
        "original_position": 8,
        "commit_id": "b5b7d9610e9adc3368813cb3a3dd167d67f3c3b3",
        "original_commit_id": "f4c3f7ba3b21270d3562c9259e4881ce63b62966",
        "user": {
            "login": "nporteschaikin",
            "id": 1634280,
            "node_id": "MDQ6VXNlcjE2MzQyODA=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1634280?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nporteschaikin",
            "html_url": "https://github.com/nporteschaikin",
            "followers_url": "https://api.github.com/users/nporteschaikin/followers",
            "following_url": "https://api.github.com/users/nporteschaikin/following{/other_user}",
            "gists_url": "https://api.github.com/users/nporteschaikin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nporteschaikin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nporteschaikin/subscriptions",
            "organizations_url": "https://api.github.com/users/nporteschaikin/orgs",
            "repos_url": "https://api.github.com/users/nporteschaikin/repos",
            "events_url": "https://api.github.com/users/nporteschaikin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nporteschaikin/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@kylemac correct.  fixing + rebasing now.\n",
        "created_at": "2015-06-15T17:59:24Z",
        "updated_at": "2015-06-15T18:00:17Z",
        "html_url": "https://github.com/jescalan/roots/pull/646#discussion_r32448049",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/646",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/32448049"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/646#discussion_r32448049"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/646"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/31635828",
        "pull_request_review_id": null,
        "id": 31635828,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNjM1ODI4",
        "diff_hunk": "@@ -0,0 +1,10 @@\n+Sprout        = require 'sprout'\n+path          = require 'path'\n+osenv         = require 'osenv'\n+mkdirp        = require 'mkdirp'\n+fs            = require 'fs'\n+\n+module.exports = () ->",
        "path": "lib/sprout.coffee",
        "position": null,
        "original_position": 7,
        "commit_id": "efce555d3cb88ea5023a510d3e4b937f31c21ddf",
        "original_commit_id": "f7828d6f3c882259b5431738d21f9b16a94db43d",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Empty parameter list is forbidden\n",
        "created_at": "2015-06-03T15:32:09Z",
        "updated_at": "2015-07-12T18:46:13Z",
        "html_url": "https://github.com/jescalan/roots/pull/644#discussion_r31635828",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/644",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/31635828"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/644#discussion_r31635828"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/644"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/31637448",
        "pull_request_review_id": null,
        "id": 31637448,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNjM3NDQ4",
        "diff_hunk": "@@ -35,7 +39,8 @@ exports.remove = (args) ->\n \n exports.list = (args) ->\n   __track('api', { name: 'template-list' })\n-  sprout.list(args)\n+  _.keys(sprout.templates)",
        "path": "lib/api/template.coffee",
        "position": null,
        "original_position": 38,
        "commit_id": "efce555d3cb88ea5023a510d3e4b937f31c21ddf",
        "original_commit_id": "c94a780f462781ca765daa083e7d65622e495773",
        "user": {
            "login": "kylemac",
            "id": 49507,
            "node_id": "MDQ6VXNlcjQ5NTA3",
            "avatar_url": "https://avatars2.githubusercontent.com/u/49507?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kylemac",
            "html_url": "https://github.com/kylemac",
            "followers_url": "https://api.github.com/users/kylemac/followers",
            "following_url": "https://api.github.com/users/kylemac/following{/other_user}",
            "gists_url": "https://api.github.com/users/kylemac/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kylemac/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kylemac/subscriptions",
            "organizations_url": "https://api.github.com/users/kylemac/orgs",
            "repos_url": "https://api.github.com/users/kylemac/repos",
            "events_url": "https://api.github.com/users/kylemac/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kylemac/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "this is returning an Array. I'm not sure if that's what you're meaning to do\n\n![screen shot 2015-06-03 at 11 43 28 am](https://cloud.githubusercontent.com/assets/49507/7964506/159d7740-09e6-11e5-9fe1-648fe4d2622a.png)\n",
        "created_at": "2015-06-03T15:45:59Z",
        "updated_at": "2015-07-12T18:46:13Z",
        "html_url": "https://github.com/jescalan/roots/pull/644#discussion_r31637448",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/644",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/31637448"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/644#discussion_r31637448"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/644"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/31638861",
        "pull_request_review_id": null,
        "id": 31638861,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNjM4ODYx",
        "diff_hunk": "@@ -35,7 +39,8 @@ exports.remove = (args) ->\n \n exports.list = (args) ->\n   __track('api', { name: 'template-list' })\n-  sprout.list(args)\n+  _.keys(sprout.templates)",
        "path": "lib/api/template.coffee",
        "position": null,
        "original_position": 38,
        "commit_id": "efce555d3cb88ea5023a510d3e4b937f31c21ddf",
        "original_commit_id": "c94a780f462781ca765daa083e7d65622e495773",
        "user": {
            "login": "jescalan",
            "id": 556932,
            "node_id": "MDQ6VXNlcjU1NjkzMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/556932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jescalan",
            "html_url": "https://github.com/jescalan",
            "followers_url": "https://api.github.com/users/jescalan/followers",
            "following_url": "https://api.github.com/users/jescalan/following{/other_user}",
            "gists_url": "https://api.github.com/users/jescalan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jescalan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jescalan/subscriptions",
            "organizations_url": "https://api.github.com/users/jescalan/orgs",
            "repos_url": "https://api.github.com/users/jescalan/repos",
            "events_url": "https://api.github.com/users/jescalan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jescalan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Hah, definitely not. I'll fix that up, good catch\n",
        "created_at": "2015-06-03T15:59:43Z",
        "updated_at": "2015-07-12T18:46:13Z",
        "html_url": "https://github.com/jescalan/roots/pull/644#discussion_r31638861",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/644",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/31638861"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/644#discussion_r31638861"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/644"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/31638865",
        "pull_request_review_id": null,
        "id": 31638865,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNjM4ODY1",
        "diff_hunk": "@@ -41,23 +41,23 @@ class New\n     if not opts.path\n       return W.reject(new Error('missing path'))\n \n-    opts =\n-      path: path.resolve(opts.path)\n-      name: opts.template           ? global_config().get('default_template')\n-      overrides: opts.overrides     ? {}\n-      defaults: opts.defaults       ? { name: path.basename(opts.path) }\n+    sprout = Sprout()\n+    p = path.resolve(opts.path)\n \n-    pkg = path.join(opts.path, 'package.json')\n+    opts =\n+      locals: opts.overrides ? {}\n+      \n+    pkg = path.join(p, 'package.json')\n \n-    W.resolve(_.contains(sprout.list(), base_tpl_name))\n+    W.resolve(_.contains(sprout.templates, base_tpl_name))",
        "path": "lib/api/new.coffee",
        "position": null,
        "original_position": 28,
        "commit_id": "efce555d3cb88ea5023a510d3e4b937f31c21ddf",
        "original_commit_id": "c94a780f462781ca765daa083e7d65622e495773",
        "user": {
            "login": "kylemac",
            "id": 49507,
            "node_id": "MDQ6VXNlcjQ5NTA3",
            "avatar_url": "https://avatars2.githubusercontent.com/u/49507?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kylemac",
            "html_url": "https://github.com/kylemac",
            "followers_url": "https://api.github.com/users/kylemac/followers",
            "following_url": "https://api.github.com/users/kylemac/following{/other_user}",
            "gists_url": "https://api.github.com/users/kylemac/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kylemac/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kylemac/subscriptions",
            "organizations_url": "https://api.github.com/users/kylemac/orgs",
            "repos_url": "https://api.github.com/users/kylemac/repos",
            "events_url": "https://api.github.com/users/kylemac/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kylemac/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@jenius this logic isn't working properly because `sprout.templates` output is different than what the old `sprout.list()` used to return \n",
        "created_at": "2015-06-03T15:59:44Z",
        "updated_at": "2015-07-12T18:46:13Z",
        "html_url": "https://github.com/jescalan/roots/pull/644#discussion_r31638865",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/644",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/31638865"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/644#discussion_r31638865"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/644"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/31641074",
        "pull_request_review_id": null,
        "id": 31641074,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNjQxMDc0",
        "diff_hunk": "@@ -41,23 +41,23 @@ class New\n     if not opts.path\n       return W.reject(new Error('missing path'))\n \n-    opts =\n-      path: path.resolve(opts.path)\n-      name: opts.template           ? global_config().get('default_template')\n-      overrides: opts.overrides     ? {}\n-      defaults: opts.defaults       ? { name: path.basename(opts.path) }\n+    sprout = Sprout()\n+    p = path.resolve(opts.path)\n \n-    pkg = path.join(opts.path, 'package.json')\n+    opts =\n+      locals: opts.overrides ? {}\n+      \n+    pkg = path.join(p, 'package.json')\n \n-    W.resolve(_.contains(sprout.list(), base_tpl_name))\n+    W.resolve(_.contains(sprout.templates, base_tpl_name))",
        "path": "lib/api/new.coffee",
        "position": null,
        "original_position": 28,
        "commit_id": "efce555d3cb88ea5023a510d3e4b937f31c21ddf",
        "original_commit_id": "c94a780f462781ca765daa083e7d65622e495773",
        "user": {
            "login": "jescalan",
            "id": 556932,
            "node_id": "MDQ6VXNlcjU1NjkzMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/556932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jescalan",
            "html_url": "https://github.com/jescalan",
            "followers_url": "https://api.github.com/users/jescalan/followers",
            "following_url": "https://api.github.com/users/jescalan/following{/other_user}",
            "gists_url": "https://api.github.com/users/jescalan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jescalan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jescalan/subscriptions",
            "organizations_url": "https://api.github.com/users/jescalan/orgs",
            "repos_url": "https://api.github.com/users/jescalan/repos",
            "events_url": "https://api.github.com/users/jescalan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jescalan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Hmmm yeah this is a rather large oversight, I'm concerned that the tests are still passing...\n",
        "created_at": "2015-06-03T16:21:45Z",
        "updated_at": "2015-07-12T18:46:13Z",
        "html_url": "https://github.com/jescalan/roots/pull/644#discussion_r31641074",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/644",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/31641074"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/644#discussion_r31641074"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/644"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/41984015",
        "pull_request_review_id": null,
        "id": 41984015,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg0MDE1",
        "diff_hunk": "@@ -26,52 +29,74 @@ class Server\n   ###\n \n   start: (port, cb) ->\n-    opts = @project.config.server ? {}\n-    opts.log = false\n-\n-    if @project.config.env is 'development'\n-      opts.write = content:\n-        \"<!-- roots development configuration -->\n-        <script>var __livereload = #{@project.config.live_reload};</script>\n-        <script src='/__roots__/main.js'></script>\"\n-      opts.cache_control = {'**': 'max-age=0, no-cache, no-store'}\n-\n-    app = charge(@project.config.output_path(), opts)\n-\n-    if @project.config.env is 'development'\n-      app.stack.splice app.stack.length - 2, 0,\n-        route: '/__roots__'\n-        handle: serve_static(path.resolve(__dirname, 'browser'))\n-\n-    @server = app.start(port, cb)\n+    # opts = @project.config.server ? {}\n+\n+    bs_options =\n+      port: port\n+      logLevel: 'silent'\n+      server:\n+        baseDir: @project.config.output_path()\n+\n+    if @project.config.browser then _.merge(bs_options, @project.config.browser)\n+\n+    # add charge middleware after merge to prevent errors\n+    opts = @project.config.server or {}\n+    middlewares = []\n+\n+    if opts.clean_urls\n+      middlewares.push(charge.hygienist(@project.config.output_path()))\n+    if opts.exclude\n+      middlewares.push(charge.escapist(opts.exclude))\n+    if opts.auth\n+      middlewares.push(charge.publicist(opts.auth))\n+    if opts.cache_control\n+      middlewares.push(charge.archivist(opts.cache_control))\n+    if opts.gzip\n+      middlewares.push(charge.minimist(opts.gzip))\n+    if opts.log\n+      middlewares.push(charge.journalist(opts.log))\n+    if opts.error_page\n+      middlewares.push(charge.apologist(opts.error_page))\n+\n+    bs_options.server.middleware = middlewares\n+\n+    @bs.init(bs_options, cb)\n \n   ###*\n    * Close the server and remove it.\n   ###\n \n   stop: (cb) ->\n-    @server.close(cb)\n-    delete @server\n+    @bs.exit()\n \n   ###*\n-   * Send a message through websockets to the browser.\n-   *\n-   * @param  {String} k - message key\n-   * @param  {*} v - message value\n+   * Reload the browser\n   ###\n \n-  send_msg: (k, v) ->\n-    @server.send(type: k, data: v)\n+  reload: ->\n+    @bs.reload()\n+\n+  ###*\n+   * Inject loading spinner while compiling\n+  ###\n+  compiling: ->\n+    @bs.notify('<div id=\"roots-load-container\"><div id=\"roots-compile-loader\">\n+    <div id=\"l1\"></div><div id=\"l2\"></div><div id=\"l3\"></div><div id=\"l4\"></div>\n+    <div id=\"l5\"></div><div id=\"l6\"></div><div id=\"l7\"></div><div id=\"l8\"></div>\n+    </div></div>')",
        "path": "lib/local_server.coffee",
        "position": null,
        "original_position": 101,
        "commit_id": "1f3a685aeef33974ba424e2f42b5d7ccf91d67be",
        "original_commit_id": "c35956a2a69d5de3f2611e22323e522a724023f7",
        "user": {
            "login": "declandewet",
            "id": 1918632,
            "node_id": "MDQ6VXNlcjE5MTg2MzI=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1918632?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/declandewet",
            "html_url": "https://github.com/declandewet",
            "followers_url": "https://api.github.com/users/declandewet/followers",
            "following_url": "https://api.github.com/users/declandewet/following{/other_user}",
            "gists_url": "https://api.github.com/users/declandewet/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/declandewet/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/declandewet/subscriptions",
            "organizations_url": "https://api.github.com/users/declandewet/orgs",
            "repos_url": "https://api.github.com/users/declandewet/repos",
            "events_url": "https://api.github.com/users/declandewet/events{/privacy}",
            "received_events_url": "https://api.github.com/users/declandewet/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Just a formatting preference thing, but any reason you're not using CoffeeScript's awesome multiline strings for embedded HTML snippets?\n\n``` coffee\n@bs.notify \"\"\"\n  <div id=\"roots-load-container\">\n    <div id=\"roots-compile-loader\">\n      <div id=\"l1\"></div>\n      <div id=\"l2\"></div>\n      <div id=\"l3\"></div>\n      <div id=\"l4\"></div>\n      <div id=\"l5\"></div>\n      <div id=\"l6\"></div>\n      <div id=\"l7\"></div>\n      <div id=\"l8\"></div>\n    </div>\n  </div>\n\"\"\"\n```\n",
        "created_at": "2015-10-14T11:53:05Z",
        "updated_at": "2016-02-01T07:51:55Z",
        "html_url": "https://github.com/jescalan/roots/pull/681#discussion_r41984015",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/681",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/41984015"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/681#discussion_r41984015"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/681"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/53957251",
        "pull_request_review_id": null,
        "id": 53957251,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU3MjUx",
        "diff_hunk": "@@ -44,7 +44,7 @@ class Server\n     middlewares = []\n \n     if opts.clean_urls\n-      middlewares.push(charge.hygienist(@project.config.output_path()))\n+      middlewares.push(charge.hygienist(@project.config.output_path(), opts.clean_urls))",
        "path": "lib/local_server.coffee",
        "position": null,
        "original_position": 5,
        "commit_id": "1151dab18f5dde6bbbc3fc19b550e26b50b3d7c1",
        "original_commit_id": "f7563d11771a9d9a24b8ecc39e4c5bb0474492a6",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Line exceeds maximum allowed length\n",
        "created_at": "2016-02-24T15:44:52Z",
        "updated_at": "2016-02-24T16:02:57Z",
        "html_url": "https://github.com/jescalan/roots/pull/704#discussion_r53957251",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/704",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/53957251"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/704#discussion_r53957251"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/704"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/62778456",
        "pull_request_review_id": null,
        "id": 62778456,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzc4NDU2",
        "diff_hunk": "@@ -5,7 +5,7 @@ nodefn        = require 'when/node'\n Sprout        = require '../sprout'\n global_config = require '../global_config'",
        "path": "lib/api/template.coffee",
        "position": 2,
        "original_position": 2,
        "commit_id": "71cf7d35d326178283cd0ed0f9b4259c1a8b1244",
        "original_commit_id": "092962a0222a9360d2ca2905d27cd1a78b9a8633",
        "user": {
            "login": "kylemac",
            "id": 49507,
            "node_id": "MDQ6VXNlcjQ5NTA3",
            "avatar_url": "https://avatars2.githubusercontent.com/u/49507?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kylemac",
            "html_url": "https://github.com/kylemac",
            "followers_url": "https://api.github.com/users/kylemac/followers",
            "following_url": "https://api.github.com/users/kylemac/following{/other_user}",
            "gists_url": "https://api.github.com/users/kylemac/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kylemac/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kylemac/subscriptions",
            "organizations_url": "https://api.github.com/users/kylemac/orgs",
            "repos_url": "https://api.github.com/users/kylemac/repos",
            "events_url": "https://api.github.com/users/kylemac/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kylemac/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "i think you can remove this now, right?\n",
        "created_at": "2016-05-11T00:53:02Z",
        "updated_at": "2016-05-11T00:53:02Z",
        "html_url": "https://github.com/jescalan/roots/pull/713#discussion_r62778456",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/713",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/62778456"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/713#discussion_r62778456"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/713"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/62862744",
        "pull_request_review_id": null,
        "id": 62862744,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyODYyNzQ0",
        "diff_hunk": "@@ -5,7 +5,7 @@ nodefn        = require 'when/node'\n Sprout        = require '../sprout'\n global_config = require '../global_config'",
        "path": "lib/api/template.coffee",
        "position": 2,
        "original_position": 2,
        "commit_id": "71cf7d35d326178283cd0ed0f9b4259c1a8b1244",
        "original_commit_id": "092962a0222a9360d2ca2905d27cd1a78b9a8633",
        "user": {
            "login": "jescalan",
            "id": 556932,
            "node_id": "MDQ6VXNlcjU1NjkzMg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/556932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jescalan",
            "html_url": "https://github.com/jescalan",
            "followers_url": "https://api.github.com/users/jescalan/followers",
            "following_url": "https://api.github.com/users/jescalan/following{/other_user}",
            "gists_url": "https://api.github.com/users/jescalan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jescalan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jescalan/subscriptions",
            "organizations_url": "https://api.github.com/users/jescalan/orgs",
            "repos_url": "https://api.github.com/users/jescalan/repos",
            "events_url": "https://api.github.com/users/jescalan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jescalan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I don't think so, it's used in multiple places in this file\n",
        "created_at": "2016-05-11T14:51:54Z",
        "updated_at": "2016-05-11T14:51:54Z",
        "html_url": "https://github.com/jescalan/roots/pull/713#discussion_r62862744",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/713",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/62862744"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/713#discussion_r62862744"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/713"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jescalan/roots/pulls/comments/62870052",
        "pull_request_review_id": null,
        "id": 62870052,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyODcwMDUy",
        "diff_hunk": "@@ -5,7 +5,7 @@ nodefn        = require 'when/node'\n Sprout        = require '../sprout'\n global_config = require '../global_config'",
        "path": "lib/api/template.coffee",
        "position": 2,
        "original_position": 2,
        "commit_id": "71cf7d35d326178283cd0ed0f9b4259c1a8b1244",
        "original_commit_id": "092962a0222a9360d2ca2905d27cd1a78b9a8633",
        "user": {
            "login": "kylemac",
            "id": 49507,
            "node_id": "MDQ6VXNlcjQ5NTA3",
            "avatar_url": "https://avatars2.githubusercontent.com/u/49507?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kylemac",
            "html_url": "https://github.com/kylemac",
            "followers_url": "https://api.github.com/users/kylemac/followers",
            "following_url": "https://api.github.com/users/kylemac/following{/other_user}",
            "gists_url": "https://api.github.com/users/kylemac/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kylemac/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kylemac/subscriptions",
            "organizations_url": "https://api.github.com/users/kylemac/orgs",
            "repos_url": "https://api.github.com/users/kylemac/repos",
            "events_url": "https://api.github.com/users/kylemac/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kylemac/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "so it is...\n",
        "created_at": "2016-05-11T15:29:16Z",
        "updated_at": "2016-05-11T15:29:16Z",
        "html_url": "https://github.com/jescalan/roots/pull/713#discussion_r62870052",
        "pull_request_url": "https://api.github.com/repos/jescalan/roots/pulls/713",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/comments/62870052"
            },
            "html": {
                "href": "https://github.com/jescalan/roots/pull/713#discussion_r62870052"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jescalan/roots/pulls/713"
            }
        }
    }
]