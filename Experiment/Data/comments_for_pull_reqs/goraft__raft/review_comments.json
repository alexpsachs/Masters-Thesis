[
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/4539495",
        "pull_request_review_id": null,
        "id": 4539495,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk0OTU=",
        "diff_hunk": "@@ -19,9 +19,12 @@ import (\n type Log struct {\n \tApplyFunc   func(Command) error\n \tfile        *os.File\n+\tpath\t\tstring",
        "path": "log.go",
        "position": null,
        "original_position": 4,
        "commit_id": "86bff03c08d5e3e95b72ef3f9c6fba3953baeac2",
        "original_commit_id": "c0e1613eaad4ed6a2254ed55b6d592a9aba2320f",
        "user": {
            "login": "philips",
            "id": 33544,
            "node_id": "MDQ6VXNlcjMzNTQ0",
            "avatar_url": "https://avatars1.githubusercontent.com/u/33544?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/philips",
            "html_url": "https://github.com/philips",
            "followers_url": "https://api.github.com/users/philips/followers",
            "following_url": "https://api.github.com/users/philips/following{/other_user}",
            "gists_url": "https://api.github.com/users/philips/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/philips/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/philips/subscriptions",
            "organizations_url": "https://api.github.com/users/philips/orgs",
            "repos_url": "https://api.github.com/users/philips/repos",
            "events_url": "https://api.github.com/users/philips/events{/privacy}",
            "received_events_url": "https://api.github.com/users/philips/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "go fmt will clean this up.\n",
        "created_at": "2013-06-05T06:07:40Z",
        "updated_at": "2013-06-06T20:54:41Z",
        "html_url": "https://github.com/goraft/raft/pull/19#discussion_r4539495",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/19",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/4539495"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/19#discussion_r4539495"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/19"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/4547894",
        "pull_request_review_id": null,
        "id": 4547894,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc4OTQ=",
        "diff_hunk": "@@ -205,22 +227,21 @@ func (l *Log) ContainsEntry(index uint64, term uint64) bool {\n // Retrieves a list of entries after a given index. This function also returns\n // the term of the index provided.\n func (l *Log) GetEntriesAfter(index uint64) ([]*LogEntry, uint64) {\n-\tl.mutex.Lock()\n-\tdefer l.mutex.Unlock()\n+\t// l.mutex.Lock()\n+\t// defer l.mutex.Unlock()",
        "path": "log.go",
        "position": 83,
        "original_position": 82,
        "commit_id": "86bff03c08d5e3e95b72ef3f9c6fba3953baeac2",
        "original_commit_id": "c0e1613eaad4ed6a2254ed55b6d592a9aba2320f",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Why is the lock removed?\n",
        "created_at": "2013-06-05T15:32:20Z",
        "updated_at": "2013-06-06T20:54:41Z",
        "html_url": "https://github.com/goraft/raft/pull/19#discussion_r4547894",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/19",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/4547894"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/19#discussion_r4547894"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/19"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/4547987",
        "pull_request_review_id": null,
        "id": 4547987,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc5ODc=",
        "diff_hunk": "@@ -0,0 +1,104 @@\n+package raft\n+\n+import (\n+\t\"hash/crc32\"\n+\t\"fmt\"\n+\t\"syscall\"\n+\t\"bytes\"\n+\t\"os\"\n+\t)\n+\n+//------------------------------------------------------------------------------\n+//\n+// Typedefs\n+//\n+//------------------------------------------------------------------------------\n+\n+// the in memory SnapShot struct \n+// TODO add cluster configuration\n+type Snapshot struct {\n+\tlastIndex uint64\n+\tlastTerm uint64\n+\t// cluster configuration. \n+\tmachineState int\n+\tpath string\n+}\n+\n+// The request sent to a server to start from the snapshot.\n+type SnapshotRequest struct {\n+\tLeaderName   string      `json:\"leaderName\"`\n+\tLastIndex    uint64 \t `json:\"lastTerm\"`\n+\tLastTerm\t uint64\t\t `json:\"lastIndex\"`\n+\tMachineState int \t\t `json:\"machineState\"`\n+}\n+\n+// The response returned from a server appending entries to the log.\n+type SnapshotResponse struct {\n+\tTerm        uint64 `json:\"term\"`\n+\tSuccess     bool   `json:\"success\"`\n+\tCommitIndex uint64 `json:\"commitIndex\"`\n+}\n+\n+//------------------------------------------------------------------------------\n+//\n+// Constructors\n+//\n+//------------------------------------------------------------------------------\n+\n+// Creates a new Snapshot request.\n+func NewSnapshotRequest(leaderName string, snapshot *Snapshot) *SnapshotRequest {\n+\treturn &SnapshotRequest{\n+\t\tLeaderName:   leaderName,\n+\t\tLastIndex:    snapshot.lastIndex,\n+\t\tLastTerm:\t  snapshot.lastTerm,\n+\t\tMachineState: snapshot.machineState,\n+\t}\n+}\n+\n+// Creates a new Snapshot response.\n+func NewSnapshotResponse(term uint64, success bool, commitIndex uint64) *SnapshotResponse {\n+\treturn &SnapshotResponse{\n+\t\tTerm:        term,\n+\t\tSuccess:     success,\n+\t\tCommitIndex: commitIndex,\n+\t}\n+}",
        "path": "snapshot.go",
        "position": null,
        "original_position": 65,
        "commit_id": "86bff03c08d5e3e95b72ef3f9c6fba3953baeac2",
        "original_commit_id": "c0e1613eaad4ed6a2254ed55b6d592a9aba2320f",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Can you split off the `SnapshotRequest` and `SnapshotResponse` into a `snapshot_request.go` file and then leave the `Snapshot` in the `snapshot.go` file? I'd like to keep the snapshot object separate from the transport structures.\n",
        "created_at": "2013-06-05T15:36:18Z",
        "updated_at": "2013-06-06T20:54:41Z",
        "html_url": "https://github.com/goraft/raft/pull/19#discussion_r4547987",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/19",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/4547987"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/19#discussion_r4547987"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/19"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/4548009",
        "pull_request_review_id": null,
        "id": 4548009,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDgwMDk=",
        "diff_hunk": "@@ -370,3 +404,54 @@ func (l *Log) appendEntry(entry *LogEntry) error {\n \n \treturn nil\n }\n+\n+\n+\n+//--------------------------------------\n+// Log compaction\n+//--------------------------------------\n+\n+// compaction the log before index\n+func (l *Log) Compaction(index uint64, term uint64) error {",
        "path": "log.go",
        "position": null,
        "original_position": 188,
        "commit_id": "86bff03c08d5e3e95b72ef3f9c6fba3953baeac2",
        "original_commit_id": "c0e1613eaad4ed6a2254ed55b6d592a9aba2320f",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Can you change the name of the method from `Compaction()` (noun) to `Compact()` (verb)?\n",
        "created_at": "2013-06-05T15:37:16Z",
        "updated_at": "2013-06-06T20:54:41Z",
        "html_url": "https://github.com/goraft/raft/pull/19#discussion_r4548009",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/19",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/4548009"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/19#discussion_r4548009"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/19"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/4548092",
        "pull_request_review_id": null,
        "id": 4548092,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDgwOTI=",
        "diff_hunk": "@@ -370,3 +404,54 @@ func (l *Log) appendEntry(entry *LogEntry) error {\n \n \treturn nil\n }\n+\n+\n+\n+//--------------------------------------\n+// Log compaction\n+//--------------------------------------\n+\n+// compaction the log before index\n+func (l *Log) Compaction(index uint64, term uint64) error {\n+\tvar entries []*LogEntry\n+\n+\tl.mutex.Lock()\n+\tdefer l.mutex.Unlock()\n+\n+\t// nothing to compaction\n+\t// the index may be greater than the current index if \n+\t// we just recovery from on snapshot\n+\tif index >= l.internalCurrentIndex() {\n+\t\tentries = make([]*LogEntry, 0)\n+\t} else {\n+\n+\t\t// get all log entries after index\n+\t\tentries = l.entries[index - l.startIndex:]\n+\t}\n+\n+\t// create a new log file and add all the entries\n+\tfile, err := os.OpenFile(l.path + \".new\", os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0600)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\tfor _, entry := range entries {\n+        err = entry.Encode(file)\n+        if err != nil {\n+        \treturn err\n+        }\n+    }\n+\t// close the current log file\n+\tl.file.Close()\n+\n+\t// remove the current log file to .bak\n+\tos.Remove(l.path)",
        "path": "log.go",
        "position": null,
        "original_position": 220,
        "commit_id": "86bff03c08d5e3e95b72ef3f9c6fba3953baeac2",
        "original_commit_id": "c0e1613eaad4ed6a2254ed55b6d592a9aba2320f",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu The `os.Remove()` and `os.Rename()` functions have errors returned that need to be dealt with.\n",
        "created_at": "2013-06-05T15:41:11Z",
        "updated_at": "2013-06-06T20:54:41Z",
        "html_url": "https://github.com/goraft/raft/pull/19#discussion_r4548092",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/19",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/4548092"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/19#discussion_r4548092"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/19"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/4548211",
        "pull_request_review_id": null,
        "id": 4548211,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDgyMTE=",
        "diff_hunk": "@@ -720,7 +745,162 @@ func (s *Server) AddPeer(name string) error {\n \t\t\tpeer.resume()\n \t\t}\n \t\ts.peers[peer.name] = peer\n+\t\tpeer.resume()\n+\n \t}\n+\treturn nil\n+}\n+\n+\n+//--------------------------------------\n+// Log compaction\n+//--------------------------------------\n+\n+// Creates a snapshot request.\n+func (s *Server) createSnapshotRequest() *SnapshotRequest {\n+\ts.mutex.Lock()\n+\tdefer s.mutex.Unlock()\n+\treturn NewSnapshotRequest(s.name, s.lastSnapshot)\n+}\n+\n+// The background snapshot function\n+func (s *Server) Snapshot() {\n+\tfor {\n+\t\ts.takeSnapshot()\n+\n+\t\t// TODO: change this... to something reasonable\n+\t\ttime.Sleep(5000 * time.Millisecond)\n+\t}\n+}",
        "path": "server.go",
        "position": 175,
        "original_position": 153,
        "commit_id": "86bff03c08d5e3e95b72ef3f9c6fba3953baeac2",
        "original_commit_id": "c0e1613eaad4ed6a2254ed55b6d592a9aba2320f",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Does `Log.Snapshot()` get called? Also, if there is going to be a timer for the snapshotting then it should exist at the application level (instead of in the library).\n",
        "created_at": "2013-06-05T15:46:18Z",
        "updated_at": "2013-06-06T20:54:41Z",
        "html_url": "https://github.com/goraft/raft/pull/19#discussion_r4548211",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/19",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/4548211"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/19#discussion_r4548211"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/19"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/4548384",
        "pull_request_review_id": null,
        "id": 4548384,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDgzODQ=",
        "diff_hunk": "@@ -720,7 +745,162 @@ func (s *Server) AddPeer(name string) error {\n \t\t\tpeer.resume()\n \t\t}\n \t\ts.peers[peer.name] = peer\n+\t\tpeer.resume()\n+\n \t}\n+\treturn nil\n+}\n+\n+\n+//--------------------------------------\n+// Log compaction\n+//--------------------------------------\n+\n+// Creates a snapshot request.\n+func (s *Server) createSnapshotRequest() *SnapshotRequest {\n+\ts.mutex.Lock()\n+\tdefer s.mutex.Unlock()\n+\treturn NewSnapshotRequest(s.name, s.lastSnapshot)\n+}\n+\n+// The background snapshot function\n+func (s *Server) Snapshot() {\n+\tfor {\n+\t\ts.takeSnapshot()\n+\n+\t\t// TODO: change this... to something reasonable\n+\t\ttime.Sleep(5000 * time.Millisecond)\n+\t}\n+}",
        "path": "server.go",
        "position": 175,
        "original_position": 153,
        "commit_id": "86bff03c08d5e3e95b72ef3f9c6fba3953baeac2",
        "original_commit_id": "c0e1613eaad4ed6a2254ed55b6d592a9aba2320f",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The Server.Snapshot is called outside.\nThe library may know more than the application when to do snapshot. i have not thought through this yet.\nI just create this function for testing, since i test the log compaction as a whole from raftd.\n",
        "created_at": "2013-06-05T15:52:58Z",
        "updated_at": "2013-06-06T20:54:41Z",
        "html_url": "https://github.com/goraft/raft/pull/19#discussion_r4548384",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/19",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/4548384"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/19#discussion_r4548384"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/19"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/4548437",
        "pull_request_review_id": null,
        "id": 4548437,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg0Mzc=",
        "diff_hunk": "@@ -720,7 +745,162 @@ func (s *Server) AddPeer(name string) error {\n \t\t\tpeer.resume()\n \t\t}\n \t\ts.peers[peer.name] = peer\n+\t\tpeer.resume()\n+\n \t}\n+\treturn nil\n+}\n+\n+\n+//--------------------------------------\n+// Log compaction\n+//--------------------------------------\n+\n+// Creates a snapshot request.\n+func (s *Server) createSnapshotRequest() *SnapshotRequest {\n+\ts.mutex.Lock()\n+\tdefer s.mutex.Unlock()\n+\treturn NewSnapshotRequest(s.name, s.lastSnapshot)\n+}\n+\n+// The background snapshot function\n+func (s *Server) Snapshot() {\n+\tfor {\n+\t\ts.takeSnapshot()\n+\n+\t\t// TODO: change this... to something reasonable\n+\t\ttime.Sleep(5000 * time.Millisecond)\n+\t}\n+}\n+\n+func (s *Server) takeSnapshot() error {\n+\t//TODO put a snapshot mutex\n+\tif s.currentSnapshot != nil {\n+\t\treturn errors.New(\"handling snapshot\")\n+\t}\n+\n+\tlastIndex, lastTerm := s.log.CommitInfo()\n+\n+\tif lastIndex == 0 || lastTerm == 0 {\n+\t\treturn errors.New(\"No logs\")\n+\t}\n+\n+\tpath := s.SnapshotPath(lastIndex, lastTerm)\n+\n+\ts.currentSnapshot = &Snapshot{lastIndex, lastTerm, s.machineState , path}\n+\n+\ts.saveSnapshot()\n+\n+\ts.log.Compaction(lastIndex, lastTerm)\n \n \treturn nil\n }\n+\n+// Retrieves the log path for the server.\n+func (s *Server) saveSnapshot() error {\n+\n+\tif s.currentSnapshot == nil {\n+\t\treturn errors.New(\"no snapshot to save\")\n+\t}\n+\n+\terr := s.currentSnapshot.Save()\n+\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+ \t\n+\ttmp := s.lastSnapshot\n+\ts.lastSnapshot = s.currentSnapshot\n+\n+\t// delete the previous snapshot if there is any change\n+\tif tmp != nil && !(tmp.lastIndex == s.lastSnapshot.lastIndex && tmp.lastTerm == s.lastSnapshot.lastTerm) {\n+\t\ttmp.Remove()\n+\t}\n+\ts.currentSnapshot = nil\n+\treturn nil\n+}\n+\n+// Retrieves the log path for the server.\n+func (s *Server) SnapshotPath(lastIndex uint64, lastTerm uint64) string {\n+\treturn fmt.Sprintf(\"%s/snapshot/%v_%v.ss\", s.path, lastTerm, lastIndex)\n+}\n+\n+\n+func (s *Server) SnapshotRecovery(index uint64, term uint64, machineState int) (*SnapshotResponse, error){\n+\t//\n+\ts.mutex.Lock()\n+\tdefer s.mutex.Unlock()\n+\n+\t//recovery machine state\n+\ts.machineState = machineState\n+\n+\t//update term and index\n+\ts.currentTerm = term\n+\ts.log.UpdateCommitIndex(index)\n+\tsnapshotPath := s.SnapshotPath(index, term)\n+\ts.currentSnapshot = &Snapshot{index, term, machineState, snapshotPath}\n+\ts.saveSnapshot() \n+\ts.log.Compaction(index, term)\n+\n+\n+\treturn NewSnapshotResponse(term, true, index), nil\n+\n+}\n+\n+// Load a snapshot at restart\n+func (s *Server) LoadSnapshot() error {\n+\tdir, err := os.OpenFile(s.path + \"/snapshot\", os.O_RDONLY, 0)\n+\tif err != nil {\n+\t\tdir.Close()\n+\t\tpanic(err)\n+\t}\n+\n+\tfilenames, err := dir.Readdirnames(-1)\n+\n+\tif err != nil {\n+\t\tdir.Close()\n+\t\tpanic(err)\n+\t}\n+\n+\tdir.Close()\n+\tif len(filenames) == 0 {\n+\t\treturn errors.New(\"no snapshot\")\n+\t}\n+\n+\t// not sure how many snapshot we should keep\n+\tsort.Strings(filenames)\n+\tsnapshotPath := s.path + \"/snapshot/\" + filenames[len(filenames) - 1] ",
        "path": "server.go",
        "position": null,
        "original_position": 251,
        "commit_id": "86bff03c08d5e3e95b72ef3f9c6fba3953baeac2",
        "original_commit_id": "c0e1613eaad4ed6a2254ed55b6d592a9aba2320f",
        "user": {
            "login": "philips",
            "id": 33544,
            "node_id": "MDQ6VXNlcjMzNTQ0",
            "avatar_url": "https://avatars1.githubusercontent.com/u/33544?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/philips",
            "html_url": "https://github.com/philips",
            "followers_url": "https://api.github.com/users/philips/followers",
            "following_url": "https://api.github.com/users/philips/following{/other_user}",
            "gists_url": "https://api.github.com/users/philips/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/philips/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/philips/subscriptions",
            "organizations_url": "https://api.github.com/users/philips/orgs",
            "repos_url": "https://api.github.com/users/philips/repos",
            "events_url": "https://api.github.com/users/philips/events{/privacy}",
            "received_events_url": "https://api.github.com/users/philips/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "this should probably use path.Join()\n",
        "created_at": "2013-06-05T15:55:21Z",
        "updated_at": "2013-06-06T20:54:41Z",
        "html_url": "https://github.com/goraft/raft/pull/19#discussion_r4548437",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/19",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/4548437"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/19#discussion_r4548437"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/19"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/4548457",
        "pull_request_review_id": null,
        "id": 4548457,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg0NTc=",
        "diff_hunk": "@@ -720,7 +745,162 @@ func (s *Server) AddPeer(name string) error {\n \t\t\tpeer.resume()\n \t\t}\n \t\ts.peers[peer.name] = peer\n+\t\tpeer.resume()\n+\n \t}\n+\treturn nil\n+}\n+\n+\n+//--------------------------------------\n+// Log compaction\n+//--------------------------------------\n+\n+// Creates a snapshot request.\n+func (s *Server) createSnapshotRequest() *SnapshotRequest {\n+\ts.mutex.Lock()\n+\tdefer s.mutex.Unlock()\n+\treturn NewSnapshotRequest(s.name, s.lastSnapshot)\n+}\n+\n+// The background snapshot function\n+func (s *Server) Snapshot() {\n+\tfor {\n+\t\ts.takeSnapshot()\n+\n+\t\t// TODO: change this... to something reasonable\n+\t\ttime.Sleep(5000 * time.Millisecond)\n+\t}\n+}\n+\n+func (s *Server) takeSnapshot() error {\n+\t//TODO put a snapshot mutex\n+\tif s.currentSnapshot != nil {\n+\t\treturn errors.New(\"handling snapshot\")\n+\t}\n+\n+\tlastIndex, lastTerm := s.log.CommitInfo()\n+\n+\tif lastIndex == 0 || lastTerm == 0 {\n+\t\treturn errors.New(\"No logs\")\n+\t}\n+\n+\tpath := s.SnapshotPath(lastIndex, lastTerm)\n+\n+\ts.currentSnapshot = &Snapshot{lastIndex, lastTerm, s.machineState , path}\n+\n+\ts.saveSnapshot()\n+\n+\ts.log.Compaction(lastIndex, lastTerm)\n \n \treturn nil\n }\n+\n+// Retrieves the log path for the server.\n+func (s *Server) saveSnapshot() error {\n+\n+\tif s.currentSnapshot == nil {\n+\t\treturn errors.New(\"no snapshot to save\")\n+\t}\n+\n+\terr := s.currentSnapshot.Save()\n+\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+ \t\n+\ttmp := s.lastSnapshot\n+\ts.lastSnapshot = s.currentSnapshot\n+\n+\t// delete the previous snapshot if there is any change\n+\tif tmp != nil && !(tmp.lastIndex == s.lastSnapshot.lastIndex && tmp.lastTerm == s.lastSnapshot.lastTerm) {\n+\t\ttmp.Remove()\n+\t}\n+\ts.currentSnapshot = nil\n+\treturn nil\n+}\n+\n+// Retrieves the log path for the server.\n+func (s *Server) SnapshotPath(lastIndex uint64, lastTerm uint64) string {\n+\treturn fmt.Sprintf(\"%s/snapshot/%v_%v.ss\", s.path, lastTerm, lastIndex)\n+}\n+\n+\n+func (s *Server) SnapshotRecovery(index uint64, term uint64, machineState int) (*SnapshotResponse, error){\n+\t//\n+\ts.mutex.Lock()\n+\tdefer s.mutex.Unlock()\n+\n+\t//recovery machine state\n+\ts.machineState = machineState\n+\n+\t//update term and index\n+\ts.currentTerm = term\n+\ts.log.UpdateCommitIndex(index)\n+\tsnapshotPath := s.SnapshotPath(index, term)\n+\ts.currentSnapshot = &Snapshot{index, term, machineState, snapshotPath}\n+\ts.saveSnapshot() \n+\ts.log.Compaction(index, term)\n+\n+\n+\treturn NewSnapshotResponse(term, true, index), nil\n+\n+}\n+\n+// Load a snapshot at restart\n+func (s *Server) LoadSnapshot() error {\n+\tdir, err := os.OpenFile(s.path + \"/snapshot\", os.O_RDONLY, 0)",
        "path": "server.go",
        "position": null,
        "original_position": 231,
        "commit_id": "86bff03c08d5e3e95b72ef3f9c6fba3953baeac2",
        "original_commit_id": "c0e1613eaad4ed6a2254ed55b6d592a9aba2320f",
        "user": {
            "login": "philips",
            "id": 33544,
            "node_id": "MDQ6VXNlcjMzNTQ0",
            "avatar_url": "https://avatars1.githubusercontent.com/u/33544?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/philips",
            "html_url": "https://github.com/philips",
            "followers_url": "https://api.github.com/users/philips/followers",
            "following_url": "https://api.github.com/users/philips/following{/other_user}",
            "gists_url": "https://api.github.com/users/philips/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/philips/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/philips/subscriptions",
            "organizations_url": "https://api.github.com/users/philips/orgs",
            "repos_url": "https://api.github.com/users/philips/repos",
            "events_url": "https://api.github.com/users/philips/events{/privacy}",
            "received_events_url": "https://api.github.com/users/philips/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "path.Join() here too\n",
        "created_at": "2013-06-05T15:56:10Z",
        "updated_at": "2013-06-06T20:54:41Z",
        "html_url": "https://github.com/goraft/raft/pull/19#discussion_r4548457",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/19",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/4548457"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/19#discussion_r4548457"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/19"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/4548486",
        "pull_request_review_id": null,
        "id": 4548486,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg0ODY=",
        "diff_hunk": "@@ -720,7 +745,162 @@ func (s *Server) AddPeer(name string) error {\n \t\t\tpeer.resume()\n \t\t}\n \t\ts.peers[peer.name] = peer\n+\t\tpeer.resume()\n+\n \t}\n+\treturn nil\n+}\n+\n+\n+//--------------------------------------\n+// Log compaction\n+//--------------------------------------\n+\n+// Creates a snapshot request.\n+func (s *Server) createSnapshotRequest() *SnapshotRequest {\n+\ts.mutex.Lock()\n+\tdefer s.mutex.Unlock()\n+\treturn NewSnapshotRequest(s.name, s.lastSnapshot)\n+}\n+\n+// The background snapshot function\n+func (s *Server) Snapshot() {\n+\tfor {\n+\t\ts.takeSnapshot()\n+\n+\t\t// TODO: change this... to something reasonable\n+\t\ttime.Sleep(5000 * time.Millisecond)\n+\t}\n+}\n+\n+func (s *Server) takeSnapshot() error {\n+\t//TODO put a snapshot mutex\n+\tif s.currentSnapshot != nil {\n+\t\treturn errors.New(\"handling snapshot\")\n+\t}\n+\n+\tlastIndex, lastTerm := s.log.CommitInfo()\n+\n+\tif lastIndex == 0 || lastTerm == 0 {\n+\t\treturn errors.New(\"No logs\")\n+\t}\n+\n+\tpath := s.SnapshotPath(lastIndex, lastTerm)\n+\n+\ts.currentSnapshot = &Snapshot{lastIndex, lastTerm, s.machineState , path}\n+\n+\ts.saveSnapshot()\n+\n+\ts.log.Compaction(lastIndex, lastTerm)\n \n \treturn nil\n }\n+\n+// Retrieves the log path for the server.\n+func (s *Server) saveSnapshot() error {\n+\n+\tif s.currentSnapshot == nil {\n+\t\treturn errors.New(\"no snapshot to save\")\n+\t}\n+\n+\terr := s.currentSnapshot.Save()\n+\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+ \t\n+\ttmp := s.lastSnapshot\n+\ts.lastSnapshot = s.currentSnapshot\n+\n+\t// delete the previous snapshot if there is any change\n+\tif tmp != nil && !(tmp.lastIndex == s.lastSnapshot.lastIndex && tmp.lastTerm == s.lastSnapshot.lastTerm) {\n+\t\ttmp.Remove()\n+\t}\n+\ts.currentSnapshot = nil\n+\treturn nil\n+}\n+\n+// Retrieves the log path for the server.\n+func (s *Server) SnapshotPath(lastIndex uint64, lastTerm uint64) string {\n+\treturn fmt.Sprintf(\"%s/snapshot/%v_%v.ss\", s.path, lastTerm, lastIndex)",
        "path": "server.go",
        "position": null,
        "original_position": 204,
        "commit_id": "86bff03c08d5e3e95b72ef3f9c6fba3953baeac2",
        "original_commit_id": "c0e1613eaad4ed6a2254ed55b6d592a9aba2320f",
        "user": {
            "login": "philips",
            "id": 33544,
            "node_id": "MDQ6VXNlcjMzNTQ0",
            "avatar_url": "https://avatars1.githubusercontent.com/u/33544?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/philips",
            "html_url": "https://github.com/philips",
            "followers_url": "https://api.github.com/users/philips/followers",
            "following_url": "https://api.github.com/users/philips/following{/other_user}",
            "gists_url": "https://api.github.com/users/philips/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/philips/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/philips/subscriptions",
            "organizations_url": "https://api.github.com/users/philips/orgs",
            "repos_url": "https://api.github.com/users/philips/repos",
            "events_url": "https://api.github.com/users/philips/events{/privacy}",
            "received_events_url": "https://api.github.com/users/philips/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "path.Join()\n",
        "created_at": "2013-06-05T15:57:23Z",
        "updated_at": "2013-06-06T20:54:41Z",
        "html_url": "https://github.com/goraft/raft/pull/19#discussion_r4548486",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/19",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/4548486"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/19#discussion_r4548486"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/19"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/4548772",
        "pull_request_review_id": null,
        "id": 4548772,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg3NzI=",
        "diff_hunk": "@@ -177,13 +213,27 @@ func (p *Peer) heartbeatTimeoutFunc(startChannel chan bool) {\n \t\t\tp.mutex.Lock()\n \t\t\tserver, prevLogIndex := p.server, p.prevLogIndex\n \t\t\tp.mutex.Unlock()\n-\n-\t\t\t// Lock the server to create a request.\n-\t\t\treq := server.createAppendEntriesRequest(prevLogIndex)\n-\n-\t\t\tp.mutex.Lock()\n-\t\t\tp.sendFlushRequest(req)\n-\t\t\tp.mutex.Unlock()\n+\t\t\t\n+\t\t\tserver.log.mutex.Lock()\n+\t\t\tif prevLogIndex < server.log.StartIndex() {\n+\n+\t\t\t\t// request the log before the latest snapshot\n+\t\t\t\t// send out the snapshot\n+\t\t\t\tserver.log.mutex.Unlock()\n+\t\t\t\treq := server.createSnapshotRequest()",
        "path": "peer.go",
        "position": null,
        "original_position": 84,
        "commit_id": "86bff03c08d5e3e95b72ef3f9c6fba3953baeac2",
        "original_commit_id": "c0e1613eaad4ed6a2254ed55b6d592a9aba2320f",
        "user": {
            "login": "philips",
            "id": 33544,
            "node_id": "MDQ6VXNlcjMzNTQ0",
            "avatar_url": "https://avatars1.githubusercontent.com/u/33544?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/philips",
            "html_url": "https://github.com/philips",
            "followers_url": "https://api.github.com/users/philips/followers",
            "following_url": "https://api.github.com/users/philips/following{/other_user}",
            "gists_url": "https://api.github.com/users/philips/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/philips/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/philips/subscriptions",
            "organizations_url": "https://api.github.com/users/philips/orgs",
            "repos_url": "https://api.github.com/users/philips/repos",
            "events_url": "https://api.github.com/users/philips/events{/privacy}",
            "received_events_url": "https://api.github.com/users/philips/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This critical section is a bit confusing with the Unlock being straddled over the else statement. Perhaps this might be better:\n\n```\nsnapShotNeeded := true\nserver.log.mutex.Lock()\nif prevLogIndex >= server.log.StartIndex() {\n  req := server.createAppendEntriesRequest(prevLogIndex)\n  snapShotNeeded = false\n}\nserver.log.mutex.Unlock()\n\np.mutex.Lock()\nif snapShotNeeded {\n  p.sendSnapshotRequest(req)\n} else {\n  p.sendFlushRequest(req)\n}\np.mutex.Unlock()\n```\n",
        "created_at": "2013-06-05T16:09:48Z",
        "updated_at": "2013-06-06T20:54:41Z",
        "html_url": "https://github.com/goraft/raft/pull/19#discussion_r4548772",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/19",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/4548772"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/19#discussion_r4548772"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/19"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/4548829",
        "pull_request_review_id": null,
        "id": 4548829,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg4Mjk=",
        "diff_hunk": "@@ -104,10 +104,44 @@ func (p *Peer) stop() {\n func (p *Peer) internalFlush() (uint64, bool, error) {\n \tp.mutex.Lock()\n \tdefer p.mutex.Unlock()\n+\n+\tif p.prevLogIndex < p.server.log.StartIndex() {\n+\t\treq := p.server.createSnapshotRequest()\n+\t\treturn p.sendSnapshotRequest(req)\n+\t}\n \treq := p.server.createInternalAppendEntriesRequest(p.prevLogIndex)\n \treturn p.sendFlushRequest(req)\n }\n \n+// send Snapshot Request\n+func (p *Peer) sendSnapshotRequest(req *SnapshotRequest) (uint64, bool, error){\n+\t// Ignore any null requests.\n+\tif req == nil {\n+\t\treturn 0, false, errors.New(\"raft.Peer: Request required\")\n+\t}\n+\n+\t// Generate an snapshot request based on the state of the server and\n+\t// log. Send the request through the user-provided handler and process the\n+\t// result.\n+\tresp, err := p.server.transporter.SendSnapshotRequest(p.server, p, req)\n+\tp.heartbeatTimer.Reset()\n+\tif resp == nil {\n+\t\treturn 0, false, err\n+\t}\n+\n+\t// If successful then update the previous log index. If it was\n+\t// unsuccessful then decrement the previous log index and we'll try again\n+\t// next time.\n+\tif resp.Success {\n+\t\tp.prevLogIndex = req.LastIndex\n+\n+\t} else {\n+\t\tpanic(resp)",
        "path": "peer.go",
        "position": 70,
        "original_position": 36,
        "commit_id": "86bff03c08d5e3e95b72ef3f9c6fba3953baeac2",
        "original_commit_id": "c0e1613eaad4ed6a2254ed55b6d592a9aba2320f",
        "user": {
            "login": "philips",
            "id": 33544,
            "node_id": "MDQ6VXNlcjMzNTQ0",
            "avatar_url": "https://avatars1.githubusercontent.com/u/33544?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/philips",
            "html_url": "https://github.com/philips",
            "followers_url": "https://api.github.com/users/philips/followers",
            "following_url": "https://api.github.com/users/philips/following{/other_user}",
            "gists_url": "https://api.github.com/users/philips/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/philips/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/philips/subscriptions",
            "organizations_url": "https://api.github.com/users/philips/orgs",
            "repos_url": "https://api.github.com/users/philips/repos",
            "events_url": "https://api.github.com/users/philips/events{/privacy}",
            "received_events_url": "https://api.github.com/users/philips/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This behavior doesn't match the comment above.\n",
        "created_at": "2013-06-05T16:12:02Z",
        "updated_at": "2013-06-06T20:54:41Z",
        "html_url": "https://github.com/goraft/raft/pull/19#discussion_r4548829",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/19",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/4548829"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/19#discussion_r4548829"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/19"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/4560785",
        "pull_request_review_id": null,
        "id": 4560785,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA3ODU=",
        "diff_hunk": "@@ -205,22 +227,21 @@ func (l *Log) ContainsEntry(index uint64, term uint64) bool {\n // Retrieves a list of entries after a given index. This function also returns\n // the term of the index provided.\n func (l *Log) GetEntriesAfter(index uint64) ([]*LogEntry, uint64) {\n-\tl.mutex.Lock()\n-\tdefer l.mutex.Unlock()\n+\t// l.mutex.Lock()\n+\t// defer l.mutex.Unlock()",
        "path": "log.go",
        "position": 83,
        "original_position": 82,
        "commit_id": "86bff03c08d5e3e95b72ef3f9c6fba3953baeac2",
        "original_commit_id": "c0e1613eaad4ed6a2254ed55b6d592a9aba2320f",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I changed the flush function a little bit.\nI grab the lock outside.\n",
        "created_at": "2013-06-06T03:34:25Z",
        "updated_at": "2013-06-06T20:54:41Z",
        "html_url": "https://github.com/goraft/raft/pull/19#discussion_r4560785",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/19",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/4560785"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/19#discussion_r4560785"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/19"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/4875342",
        "pull_request_review_id": null,
        "id": 4875342,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzUzNDI=",
        "diff_hunk": "@@ -19,9 +19,11 @@ import (\n // A log entry stores a single item in the log.\n type LogEntry struct {\n \tlog     *Log\n-\tIndex   uint64  `json:\"index\"`\n-\tTerm    uint64  `json:\"term\"`\n-\tCommand Command `json:\"command\"`\n+\tIndex   uint64    `json:\"index\"`\n+\tTerm    uint64    `json:\"term\"`\n+\tCommand Command   `json:\"command\"`\n+\tresult  []byte    `json:\"-\"`",
        "path": "log_entry.go",
        "position": 10,
        "original_position": 10,
        "commit_id": "00fb080e7c7c80aade01f769568085a8a304254a",
        "original_commit_id": "00fb080e7c7c80aade01f769568085a8a304254a",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Two questions on the `result` field:\n1. Why use `[]byte` instead of interface{}?\n2. Does the reference to the result get released anywhere?\n",
        "created_at": "2013-06-25T19:35:20Z",
        "updated_at": "2013-06-25T19:35:20Z",
        "html_url": "https://github.com/goraft/raft/pull/21#discussion_r4875342",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/21",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/4875342"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/21#discussion_r4875342"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/21"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/4875745",
        "pull_request_review_id": null,
        "id": 4875745,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU3NDU=",
        "diff_hunk": "@@ -45,6 +47,7 @@ func NewLogEntry(log *Log, index uint64, term uint64, command Command) *LogEntry\n \t\tIndex:   index,\n \t\tTerm:    term,\n \t\tCommand: command,\n+\t\tcommit:  make(chan bool, 3),",
        "path": "log_entry.go",
        "position": 19,
        "original_position": 19,
        "commit_id": "00fb080e7c7c80aade01f769568085a8a304254a",
        "original_commit_id": "00fb080e7c7c80aade01f769568085a8a304254a",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Why did you use a size of 3 for the commit channel?\n",
        "created_at": "2013-06-25T19:52:35Z",
        "updated_at": "2013-06-25T19:52:35Z",
        "html_url": "https://github.com/goraft/raft/pull/21#discussion_r4875745",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/21",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/4875745"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/21#discussion_r4875745"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/21"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/4876032",
        "pull_request_review_id": null,
        "id": 4876032,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYwMzI=",
        "diff_hunk": "@@ -45,6 +47,7 @@ func NewLogEntry(log *Log, index uint64, term uint64, command Command) *LogEntry\n \t\tIndex:   index,\n \t\tTerm:    term,\n \t\tCommand: command,\n+\t\tcommit:  make(chan bool, 3),",
        "path": "log_entry.go",
        "position": 19,
        "original_position": 19,
        "commit_id": "00fb080e7c7c80aade01f769568085a8a304254a",
        "original_commit_id": "00fb080e7c7c80aade01f769568085a8a304254a",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I do not want to block the sender. \nYou can change it to two.\n",
        "created_at": "2013-06-25T20:04:53Z",
        "updated_at": "2013-06-25T20:04:53Z",
        "html_url": "https://github.com/goraft/raft/pull/21#discussion_r4876032",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/21",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/4876032"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/21#discussion_r4876032"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/21"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/4876262",
        "pull_request_review_id": null,
        "id": 4876262,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYyNjI=",
        "diff_hunk": "@@ -19,9 +19,11 @@ import (\n // A log entry stores a single item in the log.\n type LogEntry struct {\n \tlog     *Log\n-\tIndex   uint64  `json:\"index\"`\n-\tTerm    uint64  `json:\"term\"`\n-\tCommand Command `json:\"command\"`\n+\tIndex   uint64    `json:\"index\"`\n+\tTerm    uint64    `json:\"term\"`\n+\tCommand Command   `json:\"command\"`\n+\tresult  []byte    `json:\"-\"`",
        "path": "log_entry.go",
        "position": 10,
        "original_position": 10,
        "commit_id": "00fb080e7c7c80aade01f769568085a8a304254a",
        "original_commit_id": "00fb080e7c7c80aade01f769568085a8a304254a",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I use a callback mechanism to apply the command and then notify the client. \nSo I need to keep the result of the command and then return it to the client.\nI use []byte because I think the byte stream is the most fundamental type.\n",
        "created_at": "2013-06-25T20:11:42Z",
        "updated_at": "2013-06-25T20:11:42Z",
        "html_url": "https://github.com/goraft/raft/pull/21#discussion_r4876262",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/21",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/4876262"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/21#discussion_r4876262"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/21"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/4876399",
        "pull_request_review_id": null,
        "id": 4876399,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYzOTk=",
        "diff_hunk": "@@ -19,9 +19,11 @@ import (\n // A log entry stores a single item in the log.\n type LogEntry struct {\n \tlog     *Log\n-\tIndex   uint64  `json:\"index\"`\n-\tTerm    uint64  `json:\"term\"`\n-\tCommand Command `json:\"command\"`\n+\tIndex   uint64    `json:\"index\"`\n+\tTerm    uint64    `json:\"term\"`\n+\tCommand Command   `json:\"command\"`\n+\tresult  []byte    `json:\"-\"`",
        "path": "log_entry.go",
        "position": 10,
        "original_position": 10,
        "commit_id": "00fb080e7c7c80aade01f769568085a8a304254a",
        "original_commit_id": "00fb080e7c7c80aade01f769568085a8a304254a",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think `[]byte` is good if you need to serialize it to disk but for in-memory data structures then I think that `interface{}` will work better. It seems like once the result is returned to the client then we can set the entry's `result` to `nil`. It seems like it could bloat memory pretty fast by holding references to all the result objects.\n",
        "created_at": "2013-06-25T20:16:38Z",
        "updated_at": "2013-06-25T20:16:38Z",
        "html_url": "https://github.com/goraft/raft/pull/21#discussion_r4876399",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/21",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/4876399"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/21#discussion_r4876399"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/21"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/4876563",
        "pull_request_review_id": null,
        "id": 4876563,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY1NjM=",
        "diff_hunk": "@@ -19,9 +19,11 @@ import (\n // A log entry stores a single item in the log.\n type LogEntry struct {\n \tlog     *Log\n-\tIndex   uint64  `json:\"index\"`\n-\tTerm    uint64  `json:\"term\"`\n-\tCommand Command `json:\"command\"`\n+\tIndex   uint64    `json:\"index\"`\n+\tTerm    uint64    `json:\"term\"`\n+\tCommand Command   `json:\"command\"`\n+\tresult  []byte    `json:\"-\"`",
        "path": "log_entry.go",
        "position": 10,
        "original_position": 10,
        "commit_id": "00fb080e7c7c80aade01f769568085a8a304254a",
        "original_commit_id": "00fb080e7c7c80aade01f769568085a8a304254a",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yes. After the result returned to the client, the result should be set to nil. \nI do not quite understand what do you mean by changing it to interface{}. \nYou want to change it to a interface has a GetResult() Function?\n",
        "created_at": "2013-06-25T20:22:52Z",
        "updated_at": "2013-06-25T20:22:52Z",
        "html_url": "https://github.com/goraft/raft/pull/21#discussion_r4876563",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/21",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/4876563"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/21#discussion_r4876563"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/21"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/4897895",
        "pull_request_review_id": null,
        "id": 4897895,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4OTU=",
        "diff_hunk": "@@ -127,11 +134,22 @@ func (s *Server) Leader() string {\n \treturn s.leader\n }\n \n+// Retrieves the peers of the server\n+func (s *Server) Peers() map[string]*Peer {\n+\ts.mutex.Lock()\n+\tdefer s.mutex.Unlock()\n+\treturn s.peers\n+}\n+",
        "path": "server.go",
        "position": 90,
        "original_position": 90,
        "commit_id": "00fb080e7c7c80aade01f769568085a8a304254a",
        "original_commit_id": "00fb080e7c7c80aade01f769568085a8a304254a",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu This seems dangerous. The returned `peers` map will be outside the server lock after it's returned. What did you want to use this for? We'd either have to copy the whole state of the peers or maybe just copy out the names (e.g. `s.PeerNames()`).\n",
        "created_at": "2013-06-26T18:08:25Z",
        "updated_at": "2013-06-26T18:08:25Z",
        "html_url": "https://github.com/goraft/raft/pull/21#discussion_r4897895",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/21",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/4897895"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/21#discussion_r4897895"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/21"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/4897959",
        "pull_request_review_id": null,
        "id": 4897959,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc5NTk=",
        "diff_hunk": "@@ -127,11 +134,22 @@ func (s *Server) Leader() string {\n \treturn s.leader\n }\n \n+// Retrieves the peers of the server\n+func (s *Server) Peers() map[string]*Peer {\n+\ts.mutex.Lock()\n+\tdefer s.mutex.Unlock()\n+\treturn s.peers\n+}\n+\n // Retrieves the object that transports requests.\n func (s *Server) Transporter() Transporter {\n \treturn s.transporter\n }\n \n+func (s *Server) SetTransporter(t Transporter) {\n+\ts.transporter = t\n+}\n+",
        "path": "server.go",
        "position": 99,
        "original_position": 99,
        "commit_id": "00fb080e7c7c80aade01f769568085a8a304254a",
        "original_commit_id": "00fb080e7c7c80aade01f769568085a8a304254a",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu The transporter isn't something that needs to change (typically). Adding a `SetTransporter()` means that we'll need to require locks around the `s.transporter` whenever it's used since it's mutable now.\n",
        "created_at": "2013-06-26T18:10:29Z",
        "updated_at": "2013-06-26T18:10:29Z",
        "html_url": "https://github.com/goraft/raft/pull/21#discussion_r4897959",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/21",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/4897959"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/21#discussion_r4897959"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/21"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/4897992",
        "pull_request_review_id": null,
        "id": 4897992,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc5OTI=",
        "diff_hunk": "@@ -127,11 +134,22 @@ func (s *Server) Leader() string {\n \treturn s.leader\n }\n \n+// Retrieves the peers of the server\n+func (s *Server) Peers() map[string]*Peer {\n+\ts.mutex.Lock()\n+\tdefer s.mutex.Unlock()\n+\treturn s.peers\n+}\n+",
        "path": "server.go",
        "position": 90,
        "original_position": 90,
        "commit_id": "00fb080e7c7c80aade01f769568085a8a304254a",
        "original_commit_id": "00fb080e7c7c80aade01f769568085a8a304254a",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Save conf of the cluster. We should copy the peer info within the mutex and return the copy.\n",
        "created_at": "2013-06-26T18:11:08Z",
        "updated_at": "2013-06-26T18:11:08Z",
        "html_url": "https://github.com/goraft/raft/pull/21#discussion_r4897992",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/21",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/4897992"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/21#discussion_r4897992"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/21"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/4898127",
        "pull_request_review_id": null,
        "id": 4898127,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgxMjc=",
        "diff_hunk": "@@ -127,11 +134,22 @@ func (s *Server) Leader() string {\n \treturn s.leader\n }\n \n+// Retrieves the peers of the server\n+func (s *Server) Peers() map[string]*Peer {\n+\ts.mutex.Lock()\n+\tdefer s.mutex.Unlock()\n+\treturn s.peers\n+}\n+\n // Retrieves the object that transports requests.\n func (s *Server) Transporter() Transporter {\n \treturn s.transporter\n }\n \n+func (s *Server) SetTransporter(t Transporter) {\n+\ts.transporter = t\n+}\n+",
        "path": "server.go",
        "position": 99,
        "original_position": 99,
        "commit_id": "00fb080e7c7c80aade01f769568085a8a304254a",
        "original_commit_id": "00fb080e7c7c80aade01f769568085a8a304254a",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I use it for testing. So I can easily disable connection, drop packages when I want to.\n",
        "created_at": "2013-06-26T18:14:44Z",
        "updated_at": "2013-06-26T18:14:44Z",
        "html_url": "https://github.com/goraft/raft/pull/21#discussion_r4898127",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/21",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/4898127"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/21#discussion_r4898127"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/21"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/4898249",
        "pull_request_review_id": null,
        "id": 4898249,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgyNDk=",
        "diff_hunk": "@@ -127,11 +134,22 @@ func (s *Server) Leader() string {\n \treturn s.leader\n }\n \n+// Retrieves the peers of the server\n+func (s *Server) Peers() map[string]*Peer {\n+\ts.mutex.Lock()\n+\tdefer s.mutex.Unlock()\n+\treturn s.peers\n+}\n+\n // Retrieves the object that transports requests.\n func (s *Server) Transporter() Transporter {\n \treturn s.transporter\n }\n \n+func (s *Server) SetTransporter(t Transporter) {\n+\ts.transporter = t\n+}\n+",
        "path": "server.go",
        "position": 99,
        "original_position": 99,
        "commit_id": "00fb080e7c7c80aade01f769568085a8a304254a",
        "original_commit_id": "00fb080e7c7c80aade01f769568085a8a304254a",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You do not need to put a mutex to protect that. We can control the transport before disable it or to let it drop packages. \n",
        "created_at": "2013-06-26T18:18:18Z",
        "updated_at": "2013-06-26T18:18:18Z",
        "html_url": "https://github.com/goraft/raft/pull/21#discussion_r4898249",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/21",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/4898249"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/21#discussion_r4898249"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/21"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/4898370",
        "pull_request_review_id": null,
        "id": 4898370,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgzNzA=",
        "diff_hunk": "@@ -127,11 +134,22 @@ func (s *Server) Leader() string {\n \treturn s.leader\n }\n \n+// Retrieves the peers of the server\n+func (s *Server) Peers() map[string]*Peer {\n+\ts.mutex.Lock()\n+\tdefer s.mutex.Unlock()\n+\treturn s.peers\n+}\n+\n // Retrieves the object that transports requests.\n func (s *Server) Transporter() Transporter {\n \treturn s.transporter\n }\n \n+func (s *Server) SetTransporter(t Transporter) {\n+\ts.transporter = t\n+}\n+",
        "path": "server.go",
        "position": 99,
        "original_position": 99,
        "commit_id": "00fb080e7c7c80aade01f769568085a8a304254a",
        "original_commit_id": "00fb080e7c7c80aade01f769568085a8a304254a",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu If it can be set to `nil` then we'll need a mutex. Can't you control the disablement and dropping through your test transporter itself instead of swapping out transporters?\n",
        "created_at": "2013-06-26T18:21:52Z",
        "updated_at": "2013-06-26T18:21:52Z",
        "html_url": "https://github.com/goraft/raft/pull/21#discussion_r4898370",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/21",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/4898370"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/21#discussion_r4898370"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/21"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/4898479",
        "pull_request_review_id": null,
        "id": 4898479,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg0Nzk=",
        "diff_hunk": "@@ -127,11 +134,22 @@ func (s *Server) Leader() string {\n \treturn s.leader\n }\n \n+// Retrieves the peers of the server\n+func (s *Server) Peers() map[string]*Peer {\n+\ts.mutex.Lock()\n+\tdefer s.mutex.Unlock()\n+\treturn s.peers\n+}\n+\n // Retrieves the object that transports requests.\n func (s *Server) Transporter() Transporter {\n \treturn s.transporter\n }\n \n+func (s *Server) SetTransporter(t Transporter) {\n+\ts.transporter = t\n+}\n+",
        "path": "server.go",
        "position": 99,
        "original_position": 99,
        "commit_id": "00fb080e7c7c80aade01f769568085a8a304254a",
        "original_commit_id": "00fb080e7c7c80aade01f769568085a8a304254a",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yes. I just used the easiest way. \n",
        "created_at": "2013-06-26T18:25:32Z",
        "updated_at": "2013-06-26T18:25:32Z",
        "html_url": "https://github.com/goraft/raft/pull/21#discussion_r4898479",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/21",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/4898479"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/21#discussion_r4898479"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/21"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/4898798",
        "pull_request_review_id": null,
        "id": 4898798,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg3OTg=",
        "diff_hunk": "@@ -216,6 +237,16 @@ func (s *Server) SetElectionTimeout(duration time.Duration) {\n \ts.electionTimer.SetMaxDuration(duration * 2)\n }\n \n+func (s *Server) StartElectionTimeout() {\n+\ts.electionTimer.Reset()\n+}\n+\n+func (s *Server) StartHeartbeatTimeout() {\n+\tfor _, peer := range s.peers {\n+\t\tpeer.StartHeartbeatTimeout()\n+\t}\n+}\n+",
        "path": "server.go",
        "position": 147,
        "original_position": 147,
        "commit_id": "00fb080e7c7c80aade01f769568085a8a304254a",
        "original_commit_id": "00fb080e7c7c80aade01f769568085a8a304254a",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu What are the `StartElectionTimeout()` and `StartHeartbeatTimeout()` functions for? I don't see them referenced in the library.\n",
        "created_at": "2013-06-26T18:35:57Z",
        "updated_at": "2013-06-26T18:35:57Z",
        "html_url": "https://github.com/goraft/raft/pull/21#discussion_r4898798",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/21",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/4898798"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/21#discussion_r4898798"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/21"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/4898814",
        "pull_request_review_id": null,
        "id": 4898814,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg4MTQ=",
        "diff_hunk": "@@ -127,11 +134,22 @@ func (s *Server) Leader() string {\n \treturn s.leader\n }\n \n+// Retrieves the peers of the server\n+func (s *Server) Peers() map[string]*Peer {\n+\ts.mutex.Lock()\n+\tdefer s.mutex.Unlock()\n+\treturn s.peers\n+}\n+\n // Retrieves the object that transports requests.\n func (s *Server) Transporter() Transporter {\n \treturn s.transporter\n }\n \n+func (s *Server) SetTransporter(t Transporter) {\n+\ts.transporter = t\n+}\n+",
        "path": "server.go",
        "position": 99,
        "original_position": 99,
        "commit_id": "00fb080e7c7c80aade01f769568085a8a304254a",
        "original_commit_id": "00fb080e7c7c80aade01f769568085a8a304254a",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ok. I don't feel like refactoring the test right now but I'll probably pull this out in the future.\n",
        "created_at": "2013-06-26T18:36:34Z",
        "updated_at": "2013-06-26T18:36:34Z",
        "html_url": "https://github.com/goraft/raft/pull/21#discussion_r4898814",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/21",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/4898814"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/21#discussion_r4898814"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/21"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/4898828",
        "pull_request_review_id": null,
        "id": 4898828,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg4Mjg=",
        "diff_hunk": "@@ -216,6 +237,16 @@ func (s *Server) SetElectionTimeout(duration time.Duration) {\n \ts.electionTimer.SetMaxDuration(duration * 2)\n }\n \n+func (s *Server) StartElectionTimeout() {\n+\ts.electionTimer.Reset()\n+}\n+\n+func (s *Server) StartHeartbeatTimeout() {\n+\tfor _, peer := range s.peers {\n+\t\tpeer.StartHeartbeatTimeout()\n+\t}\n+}\n+",
        "path": "server.go",
        "position": 147,
        "original_position": 147,
        "commit_id": "00fb080e7c7c80aade01f769568085a8a304254a",
        "original_commit_id": "00fb080e7c7c80aade01f769568085a8a304254a",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "For the new timer. I have not finished that part.\n",
        "created_at": "2013-06-26T18:37:11Z",
        "updated_at": "2013-06-26T18:37:11Z",
        "html_url": "https://github.com/goraft/raft/pull/21#discussion_r4898828",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/21",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/4898828"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/21#discussion_r4898828"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/21"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/4899521",
        "pull_request_review_id": null,
        "id": 4899521,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTk1MjE=",
        "diff_hunk": "@@ -321,138 +465,39 @@ func (s *Server) Running() bool {\n }\n \n //--------------------------------------\n-// Initialization\n-//--------------------------------------\n-\n-// Initializes the server to become leader of a new cluster. This function\n-// will fail if there is an existing log or the server is already a member in\n-// an existing cluster.\n-func (s *Server) Initialize() error {\n-\ts.mutex.Lock()\n-\tdefer s.mutex.Unlock()\n-\n-\t// Exit if the server is not running.\n-\tif !s.Running() {\n-\t\treturn errors.New(\"raft.Server: Cannot initialize while stopped\")\n-\t} else if s.MemberCount() > 1 {\n-\t\treturn errors.New(\"raft.Server: Cannot initialize; already in membership\")\n-\t}\n-\n-\t// Promote to leader.\n-\ts.currentTerm++\n-\ts.state = Leader\n-\ts.leader = s.name\n-\ts.electionTimer.Pause()\n-\n-\treturn nil\n-}\n-\n-//--------------------------------------\n // Commands\n //--------------------------------------\n \n // Attempts to execute a command and replicate it. The function will return\n // when the command has been successfully committed or an error has occurred.\n-func (s *Server) Do(command Command) error {\n-\ts.mutex.Lock()\n-\tdefer s.mutex.Unlock()\n-\terr := s.do(command)\n-\treturn err\n-}\n \n-// This function is the low-level interface to execute commands. This function\n-// does not obtain a lock so one must be obtained before executing.\n-func (s *Server) do(command Command) error {\n+func (s *Server) Do(command Command) ([]byte, error) {\n \tif s.state != Leader {\n-\t\treturn NotLeaderError\n+\t\treturn nil, NotLeaderError\n \t}\n \n-\t// Capture the term that this command is executing within.\n-\tcurrentTerm := s.currentTerm\n-\n-\t// // TEMP to solve the issue 18\n-\t// for _, peer := range s.peers {\n-\t// \tpeer.pause()\n-\t// }\n-\n-\t// Add a new entry to the log.\n \tentry := s.log.CreateEntry(s.currentTerm, command)\n \tif err := s.log.AppendEntry(entry); err != nil {\n-\t\treturn err\n+\t\treturn nil, err\n \t}\n \n-\t// Flush the entries to the peers.\n-\tc := make(chan bool, len(s.peers))\n-\tfor _, _peer := range s.peers {\n-\t\tpeer := _peer\n-\t\tgo func() {\n-\n-\t\t\tterm, success, err := peer.flush(true)\n-\n-\t\t\t// Demote if we encounter a higher term.\n-\t\t\tif err != nil {\n-\n-\t\t\t\treturn\n-\t\t\t} else if term > currentTerm {\n-\t\t\t\ts.mutex.Lock()\n-\t\t\t\ts.setCurrentTerm(term)\n-\n-\t\t\t\tif s.electionTimer != nil {\n-\t\t\t\t\ts.electionTimer.Reset()\n-\t\t\t\t}\n-\t\t\t\ts.mutex.Unlock()\n-\n-\t\t\t\treturn\n-\t\t\t}\n-\n-\t\t\t// If we successfully replicated the log then send a success to the channel.\n-\t\t\tif success {\n-\t\t\t\tc <- true\n-\t\t\t}\n-\t\t}()\n-\t}\n+\ts.response <- FlushResponse{s.currentTerm, true, nil, nil}\n \n-\t// Wait for a quorum to confirm and commit entry.\n-\tresponseCount := 1\n-\tcommitted := false\n-loop:\n-\tfor {\n-\t\t// If we received enough votes then stop waiting for more votes.\n-\t\tif responseCount >= s.QuorumSize() {\n-\t\t\tcommitted = true\n-\t\t\t// for _, peer := range s.peers {\n-\t\t\t// \tpeer.resume()\n-\t\t\t// }\n-\t\t\tbreak\n-\t\t}\n-\n-\t\t// Collect votes from peers.\n-\t\tselect {\n-\t\tcase <-c:\n-\t\t\t// Exit if our term has changed.\n-\t\t\tif s.currentTerm > currentTerm {\n-\t\t\t\treturn fmt.Errorf(\"raft.Server: Higher term discovered, stepping down: (%v > %v)\", s.currentTerm, currentTerm)\n-\t\t\t}\n-\t\t\tresponseCount++\n-\t\tcase <-afterBetween(s.ElectionTimeout(), s.ElectionTimeout()*2):\n-\t\t\t// for _, peer := range s.peers {\n-\t\t\t// \tpeer.resume()\n-\t\t\t// }\n-\t\t\tbreak loop\n-\t\t}\n+\t// to speed up the response time\n+\tfor _, peer := range s.peers {\n+\t\tpeer.heartbeatTimer.fire()\n \t}\n-\n-\t// Commit to log and flush to peers again.\n-\tif committed {\n-\t\tif err := s.log.SetCommitIndex(entry.Index); err != nil {\n-\t\t\treturn err\n-\t\t}\n-\t\treturn s.log.GetEntryError(entry)\n+\tfmt.Println(\"[Do] join!\")\n+\n+\t// timeout here\n+\tselect {\n+\tcase <-entry.commit:\n+\t\tfmt.Println(\"[Do] finish!\")\n+\t\treturn entry.result, nil\n+\tcase <-time.After(time.Second):\n+\t\tfmt.Println(\"[Do] fail!\")\n+\t\treturn nil, errors.New(\"Command commit fails\")\n \t}",
        "path": "server.go",
        "position": 476,
        "original_position": 476,
        "commit_id": "00fb080e7c7c80aade01f769568085a8a304254a",
        "original_commit_id": "00fb080e7c7c80aade01f769568085a8a304254a",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu It seems like the `Do()` function should wait until the entry is committed or rolled back. It seems like the only cases for the function would be:\n1. The entry commits and the function returns successfully.\n2. Another server gets elected that contains the entry and the entry would be committed.\n3. Another server gets elected that doesn't contain the entry and this server later rejoins and the entry would be rejected.\n4. The server crashes and no response is returned.\n\nThat's a more involved fix. We can do that after the pull request merge.\n",
        "created_at": "2013-06-26T19:03:39Z",
        "updated_at": "2013-06-26T19:03:39Z",
        "html_url": "https://github.com/goraft/raft/pull/21#discussion_r4899521",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/21",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/4899521"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/21#discussion_r4899521"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/21"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/4899635",
        "pull_request_review_id": null,
        "id": 4899635,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTk2MzU=",
        "diff_hunk": "@@ -1,184 +0,0 @@\n-package raft\n-\n-import (\n-\t\"bytes\"\n-\t\"sync\"\n-\t\"testing\"\n-\t\"time\"\n-)\n-\n-// test take and send snapshot\n-func TestTakeAndSendSnapshot(t *testing.T) {\n-\tvar mutex sync.Mutex\n-\tnames := []string{\"1\", \"2\", \"3\"}\n-\tservers := map[string]*Server{}\n-\ttransporter := &testTransporter{}\n-\ttransporter.sendVoteRequestFunc = func(server *Server, peer *Peer, req *RequestVoteRequest) (*RequestVoteResponse, error) {\n-\t\tmutex.Lock()\n-\t\ts := servers[peer.name]\n-\t\tmutex.Unlock()\n-\t\tresp, err := s.RequestVote(req)\n-\t\treturn resp, err\n-\t}\n-\ttransporter.sendAppendEntriesRequestFunc = func(server *Server, peer *Peer, req *AppendEntriesRequest) (*AppendEntriesResponse, error) {\n-\t\tmutex.Lock()\n-\t\ts := servers[peer.name]\n-\t\tmutex.Unlock()\n-\t\tresp, err := s.AppendEntries(req)\n-\t\treturn resp, err\n-\t}\n-\n-\ttransporter.sendSnapshotRequestFunc = func(server *Server, peer *Peer, req *SnapshotRequest) (*SnapshotResponse, error) {\n-\t\tmutex.Lock()\n-\t\ts := servers[peer.name]\n-\t\tmutex.Unlock()\n-\t\tresp, err := s.SnapshotRecovery(req)\n-\t\treturn resp, err\n-\t}\n-\n-\tstateMachine := &testStateMachine{}\n-\n-\tstateMachine.saveFunc = func() ([]byte, error) {\n-\t\treturn []byte{0x8}, nil\n-\t}\n-\n-\tstateMachine.recoveryFunc = func(state []byte) error {\n-\t\treturn nil\n-\t}\n-\n-\tvar leader *Server\n-\tfor _, name := range names {\n-\t\tserver := newTestServer(name, transporter)\n-\t\tserver.stateMachine = stateMachine\n-\t\tserver.SetElectionTimeout(testElectionTimeout)\n-\t\tserver.SetHeartbeatTimeout(testHeartbeatTimeout)\n-\t\tif err := server.Start(); err != nil {\n-\t\t\tt.Fatalf(\"Unable to start server[%s]: %v\", name, err)\n-\t\t}\n-\t\tdefer server.Stop()\n-\t\tif name == \"1\" {\n-\t\t\tleader = server\n-\t\t\tif err := server.Initialize(); err != nil {\n-\t\t\t\tt.Fatalf(\"Unable to initialize server[%s]: %v\", name, err)\n-\t\t\t}\n-\t\t}\n-\t\tif err := leader.Do(&joinCommand{Name: name}); err != nil {\n-\t\t\tt.Fatalf(\"Unable to join server[%s]: %v\", name, err)\n-\t\t}\n-\n-\t\tmutex.Lock()\n-\t\tservers[name] = server\n-\t\tmutex.Unlock()\n-\t}\n-\ttime.Sleep(100 * time.Millisecond)\n-\n-\t// Commit single entry.\n-\tif err := leader.Do(&TestCommand1{\"foo\", 10}); err != nil {\n-\t\tt.Fatal(err)\n-\t}\n-\n-\t// Take a snapshot.\n-\tleader.takeSnapshot()\n-\n-\tif count := len(leader.log.entries); count != 0 {\n-\t\tt.Fatalf(\"Invalid logLen [Len=%v]\", count)\n-\t}\n-\tif leader.log.startIndex != 4 || leader.log.startTerm != 1 {\n-\t\tt.Fatalf(\"Invalid log info [StartIndex=%v, StartTERM=%v]\", leader.log.startIndex, leader.log.startTerm)\n-\t}\n-\n-\t// Send snapshot to a new node\n-\tnewServer := newTestServer(\"4\", transporter)\n-\tnewServer.stateMachine = stateMachine\n-\tif err := newServer.Start(); err != nil {\n-\t\tt.Fatalf(\"Unable to start server[4]: %v\", err)\n-\t}\n-\tdefer newServer.Stop()\n-\tif err := leader.Do(&joinCommand{Name: \"4\"}); err != nil {\n-\t\tt.Fatalf(\"Unable to join server[4]: %v\", err)\n-\t}\n-\tmutex.Lock()\n-\tservers[\"4\"] = newServer\n-\tmutex.Unlock()\n-\n-\t// wait for heartbeat :P\n-\ttime.Sleep(100 * time.Millisecond)\n-\n-\tif leader.log.startIndex != 4 || leader.log.startTerm != 1 {\n-\t\tt.Fatalf(\"Invalid log info [StartIndex=%v, StartTERM=%v]\", leader.log.startIndex, leader.log.startTerm)\n-\t}\n-\ttime.Sleep(100 * time.Millisecond)\n-}\n-\n-func TestStartFormSnapshot(t *testing.T) {\n-\tserver := newTestServer(\"1\", &testTransporter{})\n-\n-\tstateMachine := &testStateMachine{}\n-\tstateMachine.saveFunc = func() ([]byte, error) {\n-\t\treturn []byte{0x60, 0x61, 0x62, 0x63, 0x64, 0x65}, nil\n-\t}\n-\n-\tstateMachine.recoveryFunc = func(state []byte) error {\n-\t\texpect := []byte{0x60, 0x61, 0x62, 0x63, 0x64, 0x65}\n-\t\tif !(bytes.Equal(state, expect)) {\n-\t\t\tt.Fatalf(\"Invalid State [Expcet=%v, Actual=%v]\", expect, state)\n-\t\t}\n-\t\treturn nil\n-\t}\n-\tserver.stateMachine = stateMachine\n-\toldPath := server.path\n-\tserver.Start()\n-\n-\tserver.Initialize()\n-\n-\t// commit single entry.\n-\terr := server.Do(&TestCommand1{\"foo\", 10})\n-\n-\tif err != nil {\n-\t\tt.Fatal(err)\n-\t}\n-\n-\tserver.takeSnapshot()\n-\n-\tlogLen := len(server.log.entries)\n-\n-\tif logLen != 0 {\n-\t\tt.Fatalf(\"Invalid logLen [Len=%v]\", logLen)\n-\t}\n-\n-\tif server.log.startIndex != 1 || server.log.startTerm != 1 {\n-\t\tt.Fatalf(\"Invalid log info [StartIndex=%v, StartTERM=%v]\",\n-\t\t\tserver.log.startIndex, server.log.startTerm)\n-\t}\n-\n-\tserver.Stop()\n-\n-\tserver = newTestServer(\"1\", &testTransporter{})\n-\tserver.stateMachine = stateMachine\n-\t// reset the oldPath\n-\tserver.path = oldPath\n-\n-\tserver.Start()\n-\n-\tlogLen = len(server.log.entries)\n-\n-\tif logLen != 0 {\n-\t\tt.Fatalf(\"Invalid logLen [Len=%v]\", logLen)\n-\t}\n-\n-\tif index, term := server.log.CommitInfo(); !(index == 0 && term == 0) {\n-\t\tt.Fatalf(\"Invalid commit info [IDX=%v, TERM=%v]\", index, term)\n-\t}\n-\n-\tif server.log.startIndex != 0 || server.log.startTerm != 0 {\n-\t\tt.Fatalf(\"Invalid log info [StartIndex=%v, StartTERM=%v]\",\n-\t\t\tserver.log.startIndex, server.log.startTerm)\n-\t}\n-\n-\tserver.LoadSnapshot()\n-\tif server.log.startIndex != 1 || server.log.startTerm != 1 {\n-\t\tt.Fatalf(\"Invalid log info [StartIndex=%v, StartTERM=%v]\",\n-\t\t\tserver.log.startIndex, server.log.startTerm)\n-\t}\n-\n-}",
        "path": "snapshot_test.go",
        "position": 184,
        "original_position": 184,
        "commit_id": "00fb080e7c7c80aade01f769568085a8a304254a",
        "original_commit_id": "00fb080e7c7c80aade01f769568085a8a304254a",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Why did you delete the whole `snapshot_test.go` file?\n",
        "created_at": "2013-06-26T19:08:36Z",
        "updated_at": "2013-06-26T19:08:36Z",
        "html_url": "https://github.com/goraft/raft/pull/21#discussion_r4899635",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/21",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/4899635"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/21#discussion_r4899635"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/21"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/4899650",
        "pull_request_review_id": null,
        "id": 4899650,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTk2NTA=",
        "diff_hunk": "@@ -321,138 +465,39 @@ func (s *Server) Running() bool {\n }\n \n //--------------------------------------\n-// Initialization\n-//--------------------------------------\n-\n-// Initializes the server to become leader of a new cluster. This function\n-// will fail if there is an existing log or the server is already a member in\n-// an existing cluster.\n-func (s *Server) Initialize() error {\n-\ts.mutex.Lock()\n-\tdefer s.mutex.Unlock()\n-\n-\t// Exit if the server is not running.\n-\tif !s.Running() {\n-\t\treturn errors.New(\"raft.Server: Cannot initialize while stopped\")\n-\t} else if s.MemberCount() > 1 {\n-\t\treturn errors.New(\"raft.Server: Cannot initialize; already in membership\")\n-\t}\n-\n-\t// Promote to leader.\n-\ts.currentTerm++\n-\ts.state = Leader\n-\ts.leader = s.name\n-\ts.electionTimer.Pause()\n-\n-\treturn nil\n-}\n-\n-//--------------------------------------\n // Commands\n //--------------------------------------\n \n // Attempts to execute a command and replicate it. The function will return\n // when the command has been successfully committed or an error has occurred.\n-func (s *Server) Do(command Command) error {\n-\ts.mutex.Lock()\n-\tdefer s.mutex.Unlock()\n-\terr := s.do(command)\n-\treturn err\n-}\n \n-// This function is the low-level interface to execute commands. This function\n-// does not obtain a lock so one must be obtained before executing.\n-func (s *Server) do(command Command) error {\n+func (s *Server) Do(command Command) ([]byte, error) {\n \tif s.state != Leader {\n-\t\treturn NotLeaderError\n+\t\treturn nil, NotLeaderError\n \t}\n \n-\t// Capture the term that this command is executing within.\n-\tcurrentTerm := s.currentTerm\n-\n-\t// // TEMP to solve the issue 18\n-\t// for _, peer := range s.peers {\n-\t// \tpeer.pause()\n-\t// }\n-\n-\t// Add a new entry to the log.\n \tentry := s.log.CreateEntry(s.currentTerm, command)\n \tif err := s.log.AppendEntry(entry); err != nil {\n-\t\treturn err\n+\t\treturn nil, err\n \t}\n \n-\t// Flush the entries to the peers.\n-\tc := make(chan bool, len(s.peers))\n-\tfor _, _peer := range s.peers {\n-\t\tpeer := _peer\n-\t\tgo func() {\n-\n-\t\t\tterm, success, err := peer.flush(true)\n-\n-\t\t\t// Demote if we encounter a higher term.\n-\t\t\tif err != nil {\n-\n-\t\t\t\treturn\n-\t\t\t} else if term > currentTerm {\n-\t\t\t\ts.mutex.Lock()\n-\t\t\t\ts.setCurrentTerm(term)\n-\n-\t\t\t\tif s.electionTimer != nil {\n-\t\t\t\t\ts.electionTimer.Reset()\n-\t\t\t\t}\n-\t\t\t\ts.mutex.Unlock()\n-\n-\t\t\t\treturn\n-\t\t\t}\n-\n-\t\t\t// If we successfully replicated the log then send a success to the channel.\n-\t\t\tif success {\n-\t\t\t\tc <- true\n-\t\t\t}\n-\t\t}()\n-\t}\n+\ts.response <- FlushResponse{s.currentTerm, true, nil, nil}\n \n-\t// Wait for a quorum to confirm and commit entry.\n-\tresponseCount := 1\n-\tcommitted := false\n-loop:\n-\tfor {\n-\t\t// If we received enough votes then stop waiting for more votes.\n-\t\tif responseCount >= s.QuorumSize() {\n-\t\t\tcommitted = true\n-\t\t\t// for _, peer := range s.peers {\n-\t\t\t// \tpeer.resume()\n-\t\t\t// }\n-\t\t\tbreak\n-\t\t}\n-\n-\t\t// Collect votes from peers.\n-\t\tselect {\n-\t\tcase <-c:\n-\t\t\t// Exit if our term has changed.\n-\t\t\tif s.currentTerm > currentTerm {\n-\t\t\t\treturn fmt.Errorf(\"raft.Server: Higher term discovered, stepping down: (%v > %v)\", s.currentTerm, currentTerm)\n-\t\t\t}\n-\t\t\tresponseCount++\n-\t\tcase <-afterBetween(s.ElectionTimeout(), s.ElectionTimeout()*2):\n-\t\t\t// for _, peer := range s.peers {\n-\t\t\t// \tpeer.resume()\n-\t\t\t// }\n-\t\t\tbreak loop\n-\t\t}\n+\t// to speed up the response time\n+\tfor _, peer := range s.peers {\n+\t\tpeer.heartbeatTimer.fire()\n \t}\n-\n-\t// Commit to log and flush to peers again.\n-\tif committed {\n-\t\tif err := s.log.SetCommitIndex(entry.Index); err != nil {\n-\t\t\treturn err\n-\t\t}\n-\t\treturn s.log.GetEntryError(entry)\n+\tfmt.Println(\"[Do] join!\")\n+\n+\t// timeout here\n+\tselect {\n+\tcase <-entry.commit:\n+\t\tfmt.Println(\"[Do] finish!\")\n+\t\treturn entry.result, nil\n+\tcase <-time.After(time.Second):\n+\t\tfmt.Println(\"[Do] fail!\")\n+\t\treturn nil, errors.New(\"Command commit fails\")\n \t}",
        "path": "server.go",
        "position": 476,
        "original_position": 476,
        "commit_id": "00fb080e7c7c80aade01f769568085a8a304254a",
        "original_commit_id": "00fb080e7c7c80aade01f769568085a8a304254a",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I used a timeout, since if the leader is dead the connection between the leader and client will be dead.\nEven if the command is committed by other new leader, we cannot notify the client.\n\nI am thinking to queue the committed but not notified command in some way. When the client get back to us, we will try to notify\n",
        "created_at": "2013-06-26T19:09:07Z",
        "updated_at": "2013-06-26T19:09:07Z",
        "html_url": "https://github.com/goraft/raft/pull/21#discussion_r4899650",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/21",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/4899650"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/21#discussion_r4899650"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/21"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/4921121",
        "pull_request_review_id": null,
        "id": 4921121,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjExMjE=",
        "diff_hunk": "@@ -335,6 +351,7 @@ func (l *Log) SetCommitIndex(index uint64) error {\n \n \t\t// Write to storage.\n \t\tif err := entry.Encode(l.file); err != nil {\n+\t\t\tpanic(err)",
        "path": "log.go",
        "position": null,
        "original_position": 48,
        "commit_id": "0ff7040047cc4972c03cc035ab653b6e4734f1cb",
        "original_commit_id": "9597f808571f52b4a8fa83a474dd5512b9047447",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu I'm a little worried that `panic()` is a little drastic. If it returns an error then it seems like it should get attempted again in the future (if it's a follower) or it'll return an error to the client (if it's the leader). It could be a temporary file system issue that gets resolved by the next time it's attempted.\n",
        "created_at": "2013-06-27T17:33:20Z",
        "updated_at": "2013-06-27T17:42:08Z",
        "html_url": "https://github.com/goraft/raft/pull/25#discussion_r4921121",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/25",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/4921121"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/25#discussion_r4921121"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/25"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/4921281",
        "pull_request_review_id": null,
        "id": 4921281,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEyODE=",
        "diff_hunk": "@@ -335,6 +351,7 @@ func (l *Log) SetCommitIndex(index uint64) error {\n \n \t\t// Write to storage.\n \t\tif err := entry.Encode(l.file); err != nil {\n+\t\t\tpanic(err)",
        "path": "log.go",
        "position": null,
        "original_position": 48,
        "commit_id": "0ff7040047cc4972c03cc035ab653b6e4734f1cb",
        "original_commit_id": "9597f808571f52b4a8fa83a474dd5512b9047447",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Sorry. This should be deleted. I am debugging and try to trace down the problem, so I add the panic(). \nCould you look at the previous comments to help me make sure my understanding is correct.\n",
        "created_at": "2013-06-27T17:38:27Z",
        "updated_at": "2013-06-27T17:42:08Z",
        "html_url": "https://github.com/goraft/raft/pull/25#discussion_r4921281",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/25",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/4921281"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/25#discussion_r4921281"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/25"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/4927353",
        "pull_request_review_id": null,
        "id": 4927353,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjczNTM=",
        "diff_hunk": "@@ -352,37 +365,42 @@ func (s *Server) commitCenter() {\n \t\t\tdebugln(\"[CommitCenter] Receive response from \", response.peer.Name(), response.success)\n \t\t}\n \n-\t\t// Determine the committed index that a majority has.\n-\t\tvar indices []uint64\n-\t\tindices = append(indices, s.log.CurrentIndex())\n-\t\tfor _, peer := range s.peers {\n-\t\t\tindices = append(indices, peer.prevLogIndex)\n-\t\t}\n-\t\tsort.Sort(Uint64Slice(indices))\n-\n-\t\t// We can commit upto the index which the mojarity\n-\t\t// of the members have appended.\n-\t\tcommitIndex := indices[s.QuorumSize()-1]\n-\t\tcommittedIndex := s.log.CommitIndex()\n+\t\t// At least one entry from the leader's current term must also be stored on\n+\t\t// a majority of servers\n+\t\tif count >= (s.QuorumSize() - 1) {",
        "path": "server.go",
        "position": null,
        "original_position": 45,
        "commit_id": "52f97d0c3a092e42d18d144300a3f894fb213338",
        "original_commit_id": "4f9995291f2dfc3e06f9c10441780554ab42b144",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Can you change the `count` to initialize to `1` instead of `0` above and then change this line to:\n\n``` go\nif count >= s.QuorumSize() {\n```\n\nThat seems like it would make more intuitive sense since the leader should add 1 to the count initially.\n",
        "created_at": "2013-06-27T21:36:24Z",
        "updated_at": "2013-06-27T21:48:20Z",
        "html_url": "https://github.com/goraft/raft/pull/27#discussion_r4927353",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/27",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/4927353"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/27#discussion_r4927353"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/27"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/4955310",
        "pull_request_review_id": null,
        "id": 4955310,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUzMTA=",
        "diff_hunk": "@@ -1060,17 +1062,36 @@ func (s *Server) LoadSnapshot() error {\n \t\treturn errors.New(\"Bad snapshot file\")\n \t}\n \n+\tchecksum, err := strconv.ParseUint(string(checksumByte), 10, 32)\n+\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\n \tsnapshotBytes, _ = ioutil.ReadAll(file)\n \tdebugln(string(snapshotBytes))\n \n+\t// Generate checksum.\n+\tbyteChecksum := crc32.ChecksumIEEE(snapshotBytes)\n+\n+\tif uint32(checksum) != byteChecksum {\n+\t\tfmt.Println(checksum, \" \", byteChecksum)\n+\t\treturn errors.New(\"bad snapshot file\")\n+\t}\n+\n \terr = json.Unmarshal(snapshotBytes, &s.lastSnapshot)\n \n \tif err != nil {\n+\t\tfmt.Println(\"unmarshal error\")",
        "path": "server.go",
        "position": null,
        "original_position": 49,
        "commit_id": "a3e02e81ae58147224b96bea7d85e306faa631a1",
        "original_commit_id": "521e3d7852adbbeb6b39b24c0a7d503e80926232",
        "user": {
            "login": "philips",
            "id": 33544,
            "node_id": "MDQ6VXNlcjMzNTQ0",
            "avatar_url": "https://avatars1.githubusercontent.com/u/33544?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/philips",
            "html_url": "https://github.com/philips",
            "followers_url": "https://api.github.com/users/philips/followers",
            "following_url": "https://api.github.com/users/philips/following{/other_user}",
            "gists_url": "https://api.github.com/users/philips/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/philips/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/philips/subscriptions",
            "organizations_url": "https://api.github.com/users/philips/orgs",
            "repos_url": "https://api.github.com/users/philips/repos",
            "events_url": "https://api.github.com/users/philips/events{/privacy}",
            "received_events_url": "https://api.github.com/users/philips/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "aside: we should use some sort of logging library since most people won't like a library printing randomly to stdout.\n",
        "created_at": "2013-07-01T00:58:54Z",
        "updated_at": "2013-07-01T02:50:54Z",
        "html_url": "https://github.com/goraft/raft/pull/33#discussion_r4955310",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/33",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/4955310"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/33#discussion_r4955310"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/33"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/4955556",
        "pull_request_review_id": null,
        "id": 4955556,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU1NTY=",
        "diff_hunk": "@@ -1048,9 +1050,9 @@ func (s *Server) LoadSnapshot() error {\n \t// TODO check checksum first\n \n \tvar snapshotBytes []byte\n-\tvar checksum []byte\n+\tvar checksumByte []byte\n \n-\tn, err := fmt.Fscanf(file, \"%08x\\n\", &checksum)\n+\tn, err := fmt.Fscanf(file, \"%v\\n\", &checksumByte)",
        "path": "server.go",
        "position": null,
        "original_position": 21,
        "commit_id": "a3e02e81ae58147224b96bea7d85e306faa631a1",
        "original_commit_id": "521e3d7852adbbeb6b39b24c0a7d503e80926232",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Why did you switch this to read to a `[]byte` and then convert to a `uint` later? It seems like less code just to read the hex in.\n",
        "created_at": "2013-07-01T02:00:07Z",
        "updated_at": "2013-07-01T02:50:54Z",
        "html_url": "https://github.com/goraft/raft/pull/33#discussion_r4955556",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/33",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/4955556"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/33#discussion_r4955556"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/33"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/4955561",
        "pull_request_review_id": null,
        "id": 4955561,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU1NjE=",
        "diff_hunk": "@@ -1060,17 +1062,36 @@ func (s *Server) LoadSnapshot() error {\n \t\treturn errors.New(\"Bad snapshot file\")\n \t}\n \n+\tchecksum, err := strconv.ParseUint(string(checksumByte), 10, 32)\n+\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\n \tsnapshotBytes, _ = ioutil.ReadAll(file)\n \tdebugln(string(snapshotBytes))\n \n+\t// Generate checksum.\n+\tbyteChecksum := crc32.ChecksumIEEE(snapshotBytes)\n+\n+\tif uint32(checksum) != byteChecksum {\n+\t\tfmt.Println(checksum, \" \", byteChecksum)\n+\t\treturn errors.New(\"bad snapshot file\")\n+\t}\n+\n \terr = json.Unmarshal(snapshotBytes, &s.lastSnapshot)\n \n \tif err != nil {\n+\t\tfmt.Println(\"unmarshal error\")",
        "path": "server.go",
        "position": null,
        "original_position": 49,
        "commit_id": "a3e02e81ae58147224b96bea7d85e306faa631a1",
        "original_commit_id": "521e3d7852adbbeb6b39b24c0a7d503e80926232",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Can you change all the `fmt.Println()` calls to use `debugln()` instead? I'd like to keep minimal dependencies on `go-raft`. I think that just having a debug mode or not is good enough. Most people won't want to see any raft logging unless they're debugging (in which case they'll want to see all the debug info they can get).\n",
        "created_at": "2013-07-01T02:02:24Z",
        "updated_at": "2013-07-01T02:50:54Z",
        "html_url": "https://github.com/goraft/raft/pull/33#discussion_r4955561",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/33",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/4955561"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/33#discussion_r4955561"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/33"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/4955569",
        "pull_request_review_id": null,
        "id": 4955569,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU1Njk=",
        "diff_hunk": "@@ -1060,17 +1062,36 @@ func (s *Server) LoadSnapshot() error {\n \t\treturn errors.New(\"Bad snapshot file\")\n \t}\n \n+\tchecksum, err := strconv.ParseUint(string(checksumByte), 10, 32)\n+\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\n \tsnapshotBytes, _ = ioutil.ReadAll(file)\n \tdebugln(string(snapshotBytes))\n \n+\t// Generate checksum.\n+\tbyteChecksum := crc32.ChecksumIEEE(snapshotBytes)\n+\n+\tif uint32(checksum) != byteChecksum {\n+\t\tfmt.Println(checksum, \" \", byteChecksum)\n+\t\treturn errors.New(\"bad snapshot file\")\n+\t}\n+\n \terr = json.Unmarshal(snapshotBytes, &s.lastSnapshot)\n \n \tif err != nil {\n+\t\tfmt.Println(\"unmarshal error\")\n \t\treturn err\n \t}\n \n \terr = s.stateMachine.Recovery(s.lastSnapshot.State)\n \n+\tif err != nil {\n+\t\tfmt.Println(\"recovery error\")\n+\t}\n+",
        "path": "server.go",
        "position": null,
        "original_position": 58,
        "commit_id": "a3e02e81ae58147224b96bea7d85e306faa631a1",
        "original_commit_id": "521e3d7852adbbeb6b39b24c0a7d503e80926232",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu If you are going to log out the error then add the actual content of the error:\n\n``` go\ndebugln(\"recovery error: \", err)\n```\n",
        "created_at": "2013-07-01T02:03:24Z",
        "updated_at": "2013-07-01T02:50:54Z",
        "html_url": "https://github.com/goraft/raft/pull/33#discussion_r4955569",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/33",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/4955569"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/33#discussion_r4955569"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/33"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/4955618",
        "pull_request_review_id": null,
        "id": 4955618,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU2MTg=",
        "diff_hunk": "@@ -1060,17 +1062,36 @@ func (s *Server) LoadSnapshot() error {\n \t\treturn errors.New(\"Bad snapshot file\")\n \t}\n \n+\tchecksum, err := strconv.ParseUint(string(checksumByte), 10, 32)\n+\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\n \tsnapshotBytes, _ = ioutil.ReadAll(file)\n \tdebugln(string(snapshotBytes))\n \n+\t// Generate checksum.\n+\tbyteChecksum := crc32.ChecksumIEEE(snapshotBytes)\n+\n+\tif uint32(checksum) != byteChecksum {\n+\t\tfmt.Println(checksum, \" \", byteChecksum)\n+\t\treturn errors.New(\"bad snapshot file\")\n+\t}\n+\n \terr = json.Unmarshal(snapshotBytes, &s.lastSnapshot)\n \n \tif err != nil {\n+\t\tfmt.Println(\"unmarshal error\")",
        "path": "server.go",
        "position": null,
        "original_position": 49,
        "commit_id": "a3e02e81ae58147224b96bea7d85e306faa631a1",
        "original_commit_id": "521e3d7852adbbeb6b39b24c0a7d503e80926232",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "We need to add more debugging level. \nWhen I am developing, I would like to close debug and use fmt.Println() instand. \nBecause if I open debug, there will be too much debugging info.\n",
        "created_at": "2013-07-01T02:17:46Z",
        "updated_at": "2013-07-01T02:50:54Z",
        "html_url": "https://github.com/goraft/raft/pull/33#discussion_r4955618",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/33",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/4955618"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/33#discussion_r4955618"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/33"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/4955634",
        "pull_request_review_id": null,
        "id": 4955634,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU2MzQ=",
        "diff_hunk": "@@ -1048,9 +1050,9 @@ func (s *Server) LoadSnapshot() error {\n \t// TODO check checksum first\n \n \tvar snapshotBytes []byte\n-\tvar checksum []byte\n+\tvar checksumByte []byte\n \n-\tn, err := fmt.Fscanf(file, \"%08x\\n\", &checksum)\n+\tn, err := fmt.Fscanf(file, \"%v\\n\", &checksumByte)",
        "path": "server.go",
        "position": null,
        "original_position": 21,
        "commit_id": "a3e02e81ae58147224b96bea7d85e306faa631a1",
        "original_commit_id": "521e3d7852adbbeb6b39b24c0a7d503e80926232",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I dont know what I was thinking. \n",
        "created_at": "2013-07-01T02:21:45Z",
        "updated_at": "2013-07-01T02:50:54Z",
        "html_url": "https://github.com/goraft/raft/pull/33#discussion_r4955634",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/33",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/4955634"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/33#discussion_r4955634"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/33"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/4955732",
        "pull_request_review_id": null,
        "id": 4955732,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU3MzI=",
        "diff_hunk": "@@ -1048,9 +1049,9 @@ func (s *Server) LoadSnapshot() error {\n \t// TODO check checksum first\n \n \tvar snapshotBytes []byte\n-\tvar checksum []byte\n+\tvar checksum uint32\n \n-\tn, err := fmt.Fscanf(file, \"%08x\\n\", &checksum)\n+\tn, err := fmt.Fscanf(file, \"%v\\n\", &checksum)",
        "path": "server.go",
        "position": null,
        "original_position": 25,
        "commit_id": "a3e02e81ae58147224b96bea7d85e306faa631a1",
        "original_commit_id": "a48505bd9528ec8ee63357fb7aaa5a6511e5c5fc",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Can you change this back to the `%08x` so it's consistent with the format of the checksum that's in the log?\n",
        "created_at": "2013-07-01T02:40:08Z",
        "updated_at": "2013-07-01T02:50:54Z",
        "html_url": "https://github.com/goraft/raft/pull/33#discussion_r4955732",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/33",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/4955732"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/33#discussion_r4955732"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/33"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/4965080",
        "pull_request_review_id": null,
        "id": 4965080,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUwODA=",
        "diff_hunk": "@@ -20,6 +20,7 @@ import (\n \n // Ensure that we can request a vote from a server that has not voted.\n func TestServerRequestVote(t *testing.T) {\n+\tdebugln(\"---TestServerRequestVote---\")",
        "path": "server_test.go",
        "position": null,
        "original_position": 4,
        "commit_id": "24fe106efe74c2f3a1f86c26e41bcc73fc693dca",
        "original_commit_id": "dac781172ed5fe313cc76dfc7305caad25c2288a",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Can you remove these lines? Go provides a nice way of seeing the start and end (and timing) of each test if you use the `-v` flag:\n\n``` sh\n$ go test -v\n```\n",
        "created_at": "2013-07-01T15:58:35Z",
        "updated_at": "2013-07-01T16:14:25Z",
        "html_url": "https://github.com/goraft/raft/pull/34#discussion_r4965080",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/34",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/4965080"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/34#discussion_r4965080"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/34"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/4965229",
        "pull_request_review_id": null,
        "id": 4965229,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUyMjk=",
        "diff_hunk": "@@ -583,70 +622,32 @@ func (s *Server) promote() (bool, error) {\n \n \t\t// Request votes from each of our peers.\n \t\tc := make(chan *RequestVoteResponse, len(s.peers))\n-\t\tfor _, _peer := range s.peers {\n-\t\t\tpeer := _peer\n-\t\t\tgo func() {\n-\t\t\t\treq := NewRequestVoteRequest(term, s.name, lastLogIndex, lastLogTerm)\n-\t\t\t\treq.peer = peer\n-\t\t\t\tdebugln(s.Name(), \"Send Vote Request to \", peer.Name())\n-\t\t\t\tif resp, _ := s.transporter.SendVoteRequest(s, peer, req); resp != nil {\n-\t\t\t\t\tresp.peer = peer\n-\t\t\t\t\tc <- resp\n-\t\t\t\t}\n-\t\t\t}()\n-\t\t}\n-\n-\t\t// Collect votes until we have a quorum.\n-\t\tvotes := map[string]bool{}\n-\n-\t\telected := false\n-\t\ttimeout := false\n-\n-\t\tfor {\n-\t\t\t// if timeout happened, restart the promotion\n-\t\t\tif timeout {\n-\t\t\t\tbreak\n-\t\t\t}\n-\n-\t\t\t// Add up all our votes.\n-\t\t\tvotesGranted := 1\n-\t\t\tfor _, value := range votes {\n-\t\t\t\tif value {\n-\t\t\t\t\tvotesGranted++\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\t// If we received enough votes then stop waiting for more votes.\n-\t\t\tif votesGranted >= s.QuorumSize() {\n-\t\t\t\telected = true\n-\t\t\t\tbreak\n-\t\t\t}\n+\t\treq := NewRequestVoteRequest(term, s.name, lastLogIndex, lastLogTerm)\n \n-\t\t\t// Collect votes from peers.\n-\t\t\tselect {\n-\t\t\tcase resp := <-c:\n-\t\t\t\tif resp != nil {\n-\t\t\t\t\t// Step down if we discover a higher term.\n-\t\t\t\t\tif resp.Term > term {\n-\t\t\t\t\t\ts.mutex.Lock()\n+\t\tfor _, peer := range s.peers {\n+\t\t\tgo peer.sendVoteRequest(req, c)\n+\t\t}\n \n-\t\t\t\t\t\ts.setCurrentTerm(term)\n+\t\telected, timeout := s.collectVotes(c)\n \n-\t\t\t\t\t\ts.mutex.Unlock()\n-\t\t\t\t\t\treturn false, fmt.Errorf(\"raft.Server: Higher term discovered, stepping down: (%v > %v)\", resp.Term, term)\n-\t\t\t\t\t}\n-\t\t\t\t\tvotes[resp.peer.Name()] = resp.VoteGranted\n-\t\t\t\t}\n-\t\t\tcase <-afterBetween(s.ElectionTimeout(), s.ElectionTimeout()*2):\n-\t\t\t\ttimeout = true\n+\t\t// If we received enough votes then promote to leader and stop this election.\n+\t\tif elected {\n+\t\t\tif s.promoteToLeader(term, lastLogIndex, lastLogTerm) {\n+\t\t\t\tdebugln(s.Name(), \" became leader\")\n+\t\t\t\treturn true, nil\n \t\t\t}\n \t\t}\n \n-\t\t// If we received enough votes then promote to leader and stop this election.\n-\t\tif elected && s.promoteToLeader(term, lastLogIndex, lastLogTerm) {\n-\t\t\tbreak\n+\t\tif timeout {\n+\t\t\tdebugln(s.Name(), \" election timeout\")\n+\t\t\t// restart promotion\n+\t\t\tcontinue\n \t\t}\n \n+\t\t// must be stepdown\n+\t\treturn false, fmt.Errorf(\"raft.Server: Term changed during election, stepping down: (%v > %v)\", s.currentTerm, term)\n+\n+\t\t// TODO: is this still needed? ",
        "path": "server.go",
        "position": 131,
        "original_position": 131,
        "commit_id": "24fe106efe74c2f3a1f86c26e41bcc73fc693dca",
        "original_commit_id": "dac781172ed5fe313cc76dfc7305caad25c2288a",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu I think you still need this since you could not receive any responses from clients and then it would just be stuck in a loop (since timeout does a `continue`). There's probably some refactoring that could be done in `collectVotes()` to consolidate the \"step down\" but this works for now.\n",
        "created_at": "2013-07-01T16:04:54Z",
        "updated_at": "2013-07-01T16:14:25Z",
        "html_url": "https://github.com/goraft/raft/pull/34#discussion_r4965229",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/34",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/4965229"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/34#discussion_r4965229"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/34"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/4965500",
        "pull_request_review_id": null,
        "id": 4965500,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU1MDA=",
        "diff_hunk": "@@ -20,6 +20,7 @@ import (\n \n // Ensure that we can request a vote from a server that has not voted.\n func TestServerRequestVote(t *testing.T) {\n+\tdebugln(\"---TestServerRequestVote---\")",
        "path": "server_test.go",
        "position": null,
        "original_position": 4,
        "commit_id": "24fe106efe74c2f3a1f86c26e41bcc73fc693dca",
        "original_commit_id": "dac781172ed5fe313cc76dfc7305caad25c2288a",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Thanks for pointing this out.\n",
        "created_at": "2013-07-01T16:14:46Z",
        "updated_at": "2013-07-01T16:14:46Z",
        "html_url": "https://github.com/goraft/raft/pull/34#discussion_r4965500",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/34",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/4965500"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/34#discussion_r4965500"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/34"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5014071",
        "pull_request_review_id": null,
        "id": 5014071,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQwNzE=",
        "diff_hunk": "@@ -174,16 +174,24 @@ func (p *Peer) sendFlushRequest(req *AppendEntriesRequest) (uint64, bool, error)\n \t//debugln(\"flush to \", p.Name())\n \tdebugln(\"[HeartBeat] Leader \", p.server.Name(), \" to \", p.Name(), \" \", len(req.Entries), \" \", time.Now())\n \n-\tif p.server.State() != Leader {\n-\t\treturn 0, false, errors.New(\"Not leader anymore\")\n-\t}\n+\trespChan := make(chan *AppendEntriesResponse, 2)\n+\n+\tgo func() {\n+\t\ttranResp, _ := p.server.transporter.SendAppendEntriesRequest(p.server, p, req)\n+\t\trespChan <- tranResp\n+\t}()\n \n-\tresp, err := p.server.transporter.SendAppendEntriesRequest(p.server, p, req)\n+\tgo func() {\n+\t\t<-time.After(p.server.heartbeatTimeout)\n+\t\trespChan <- nil\n+\t}()",
        "path": "peer.go",
        "position": null,
        "original_position": 27,
        "commit_id": "fe55d8764038cfab4315f611031ef002cd18a617",
        "original_commit_id": "d3f5d2b7fccc5659983d0c1b96863ded3c629e9c",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Do you need to spawn a new goroutine for this? Can you do a `select` on the `respChan` and `<-time.After()` instead?\n",
        "created_at": "2013-07-03T16:53:19Z",
        "updated_at": "2013-07-03T17:10:51Z",
        "html_url": "https://github.com/goraft/raft/pull/41#discussion_r5014071",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/41",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5014071"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/41#discussion_r5014071"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/41"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5014118",
        "pull_request_review_id": null,
        "id": 5014118,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQxMTg=",
        "diff_hunk": "@@ -174,16 +174,24 @@ func (p *Peer) sendFlushRequest(req *AppendEntriesRequest) (uint64, bool, error)\n \t//debugln(\"flush to \", p.Name())\n \tdebugln(\"[HeartBeat] Leader \", p.server.Name(), \" to \", p.Name(), \" \", len(req.Entries), \" \", time.Now())\n \n-\tif p.server.State() != Leader {\n-\t\treturn 0, false, errors.New(\"Not leader anymore\")\n-\t}\n+\trespChan := make(chan *AppendEntriesResponse, 2)\n+\n+\tgo func() {\n+\t\ttranResp, _ := p.server.transporter.SendAppendEntriesRequest(p.server, p, req)\n+\t\trespChan <- tranResp\n+\t}()\n \n-\tresp, err := p.server.transporter.SendAppendEntriesRequest(p.server, p, req)\n+\tgo func() {\n+\t\t<-time.After(p.server.heartbeatTimeout)\n+\t\trespChan <- nil\n+\t}()\n \n-\t//debugln(\"receive flush response from \", p.Name())\n+\tresp := <-respChan\n+\n+\tdebugln(\"receive flush response from \", p.Name())\n \n \tif resp == nil {\n-\t\treturn 0, false, err\n+\t\treturn 0, false, errors.New(\"Network problem\")",
        "path": "peer.go",
        "position": null,
        "original_position": 36,
        "commit_id": "fe55d8764038cfab4315f611031ef002cd18a617",
        "original_commit_id": "d3f5d2b7fccc5659983d0c1b96863ded3c629e9c",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu `Network problem` might be too specific. It could just be a slow machine. Can you change the error to be:\n\n``` go\nfmt.Errorf(\"AppendEntries timeout: %s\", p.Name())\n```\n",
        "created_at": "2013-07-03T16:55:19Z",
        "updated_at": "2013-07-03T17:10:51Z",
        "html_url": "https://github.com/goraft/raft/pull/41#discussion_r5014118",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/41",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5014118"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/41#discussion_r5014118"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/41"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5014324",
        "pull_request_review_id": null,
        "id": 5014324,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQzMjQ=",
        "diff_hunk": "@@ -174,16 +174,24 @@ func (p *Peer) sendFlushRequest(req *AppendEntriesRequest) (uint64, bool, error)\n \t//debugln(\"flush to \", p.Name())\n \tdebugln(\"[HeartBeat] Leader \", p.server.Name(), \" to \", p.Name(), \" \", len(req.Entries), \" \", time.Now())\n \n-\tif p.server.State() != Leader {\n-\t\treturn 0, false, errors.New(\"Not leader anymore\")\n-\t}\n+\trespChan := make(chan *AppendEntriesResponse, 2)\n+\n+\tgo func() {\n+\t\ttranResp, _ := p.server.transporter.SendAppendEntriesRequest(p.server, p, req)\n+\t\trespChan <- tranResp\n+\t}()\n \n-\tresp, err := p.server.transporter.SendAppendEntriesRequest(p.server, p, req)\n+\tgo func() {\n+\t\t<-time.After(p.server.heartbeatTimeout)\n+\t\trespChan <- nil\n+\t}()",
        "path": "peer.go",
        "position": null,
        "original_position": 27,
        "commit_id": "fe55d8764038cfab4315f611031ef002cd18a617",
        "original_commit_id": "d3f5d2b7fccc5659983d0c1b96863ded3c629e9c",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yes\n",
        "created_at": "2013-07-03T17:04:11Z",
        "updated_at": "2013-07-03T17:10:51Z",
        "html_url": "https://github.com/goraft/raft/pull/41#discussion_r5014324",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/41",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5014324"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/41#discussion_r5014324"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/41"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5014326",
        "pull_request_review_id": null,
        "id": 5014326,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQzMjY=",
        "diff_hunk": "@@ -174,16 +174,24 @@ func (p *Peer) sendFlushRequest(req *AppendEntriesRequest) (uint64, bool, error)\n \t//debugln(\"flush to \", p.Name())\n \tdebugln(\"[HeartBeat] Leader \", p.server.Name(), \" to \", p.Name(), \" \", len(req.Entries), \" \", time.Now())\n \n-\tif p.server.State() != Leader {\n-\t\treturn 0, false, errors.New(\"Not leader anymore\")\n-\t}\n+\trespChan := make(chan *AppendEntriesResponse, 2)\n+\n+\tgo func() {\n+\t\ttranResp, _ := p.server.transporter.SendAppendEntriesRequest(p.server, p, req)\n+\t\trespChan <- tranResp\n+\t}()\n \n-\tresp, err := p.server.transporter.SendAppendEntriesRequest(p.server, p, req)\n+\tgo func() {\n+\t\t<-time.After(p.server.heartbeatTimeout)\n+\t\trespChan <- nil\n+\t}()\n \n-\t//debugln(\"receive flush response from \", p.Name())\n+\tresp := <-respChan\n+\n+\tdebugln(\"receive flush response from \", p.Name())\n \n \tif resp == nil {\n-\t\treturn 0, false, err\n+\t\treturn 0, false, errors.New(\"Network problem\")",
        "path": "peer.go",
        "position": null,
        "original_position": 36,
        "commit_id": "fe55d8764038cfab4315f611031ef002cd18a617",
        "original_commit_id": "d3f5d2b7fccc5659983d0c1b96863ded3c629e9c",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yes.\n",
        "created_at": "2013-07-03T17:04:19Z",
        "updated_at": "2013-07-03T17:10:51Z",
        "html_url": "https://github.com/goraft/raft/pull/41#discussion_r5014326",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/41",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5014326"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/41#discussion_r5014326"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/41"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5021840",
        "pull_request_review_id": null,
        "id": 5021840,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4NDA=",
        "diff_hunk": "@@ -321,34 +320,248 @@ func (s *Server) Initialize() error {\n \treturn nil\n }\n \n+//                          timeout\n+//                          ______\n+//                         |      |\n+//                         |      |\n+//                         v      |     recv majority votes\n+//  --------    timeout    -----------                        -----------\n+// |Follower| ----------> | Candidate |--------------------> |  Leader   |\n+//  --------               -----------                        -----------\n+//     ^              stepDown |                       stepDown      |\n+//     |_______________________|____________________________________ |\n+//\n+// The main Loop for the server\n+func (s *Server) StartServerLoop(role string) {\n+\tstop := false\n+\tleader := false\n+\n+\tdefer debugln(\"server stopped!\")\n+\n+\tfor {\n+\t\tswitch role {\n+\n+\t\tcase Follower:\n+\t\t\tstop = s.startFollowerLoop()\n+\n+\t\t\tif stop {\n+\t\t\t\treturn\n+\t\t\t}\n+\n+\t\t\trole = Candidate\n+\n+\t\tcase Candidate:\n+\t\t\tstop, leader = s.startCandidateLoop()\n+\n+\t\t\ts.votedFor = \"\"\n+\n+\t\t\tif stop {\n+\t\t\t\treturn\n+\t\t\t}\n+\n+\t\t\tif leader {\n+\t\t\t\trole = Leader\n+\n+\t\t\t} else {\n+\n+\t\t\t\trole = Follower\n+\t\t\t}\n+\n+\t\tcase Leader:\n+\t\t\tstop = s.startLeaderLoop()\n+\t\t\tif stop {\n+\t\t\t\treturn\n+\t\t\t}\n+\n+\t\t\trole = Follower\n+\t\t}\n+\t}\n+}\n+\n // Start the sever as a follower\n func (s *Server) StartFollower() {",
        "path": "server.go",
        "position": 91,
        "original_position": 91,
        "commit_id": "fe55d8764038cfab4315f611031ef002cd18a617",
        "original_commit_id": "fe55d8764038cfab4315f611031ef002cd18a617",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Are you separating out the `StartFollower()` vs `StartLeader()` primarily for testing?\n",
        "created_at": "2013-07-03T22:30:44Z",
        "updated_at": "2013-07-03T22:30:44Z",
        "html_url": "https://github.com/goraft/raft/pull/42#discussion_r5021840",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/42",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5021840"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/42#discussion_r5021840"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/42"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5022077",
        "pull_request_review_id": null,
        "id": 5022077,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjIwNzc=",
        "diff_hunk": "@@ -321,34 +320,248 @@ func (s *Server) Initialize() error {\n \treturn nil\n }\n \n+//                          timeout\n+//                          ______\n+//                         |      |\n+//                         |      |\n+//                         v      |     recv majority votes\n+//  --------    timeout    -----------                        -----------\n+// |Follower| ----------> | Candidate |--------------------> |  Leader   |\n+//  --------               -----------                        -----------\n+//     ^              stepDown |                       stepDown      |\n+//     |_______________________|____________________________________ |\n+//\n+// The main Loop for the server\n+func (s *Server) StartServerLoop(role string) {\n+\tstop := false\n+\tleader := false\n+\n+\tdefer debugln(\"server stopped!\")\n+\n+\tfor {\n+\t\tswitch role {\n+\n+\t\tcase Follower:\n+\t\t\tstop = s.startFollowerLoop()\n+\n+\t\t\tif stop {\n+\t\t\t\treturn\n+\t\t\t}\n+\n+\t\t\trole = Candidate\n+\n+\t\tcase Candidate:\n+\t\t\tstop, leader = s.startCandidateLoop()\n+\n+\t\t\ts.votedFor = \"\"\n+\n+\t\t\tif stop {\n+\t\t\t\treturn\n+\t\t\t}\n+\n+\t\t\tif leader {\n+\t\t\t\trole = Leader\n+\n+\t\t\t} else {\n+\n+\t\t\t\trole = Follower\n+\t\t\t}\n+\n+\t\tcase Leader:\n+\t\t\tstop = s.startLeaderLoop()\n+\t\t\tif stop {\n+\t\t\t\treturn\n+\t\t\t}\n+\n+\t\t\trole = Follower\n+\t\t}\n+\t}\n+}\n+\n // Start the sever as a follower\n func (s *Server) StartFollower() {\n-\t// Update the state.\n-\ts.state = Follower\n-\n-\t// Start the election timeout.\n-\ts.StartElectionTimeout()\n+\tgo s.StartServerLoop(Follower)\n \n }\n \n // Start the sever as a leader\n-func (s *Server) StartLeader() error {\n+func (s *Server) StartLeader() {\n+\ts.state = Candidate\n+\tgo s.StartServerLoop(Leader)\n+}\n+\n+// Shuts down the server.\n+func (s *Server) Stop() {\n \ts.mutex.Lock()\n-\tdefer s.mutex.Unlock()\n+\t\n+\tif s.state == Follower {\n+\t\ts.electionTimer.Stop()\n+\t} else {\n+\t\ts.mutex.Unlock()\n+\t\ts.stop <- true\n+\t}\n+\ts.unload()\n+}\n+\n+// Unloads the server.\n+func (s *Server) unload() {\n+\t// Kill the election timer.\n+\ts.state = Stopped\n+\n+\t// wait for all previous flush ends\n+\ttime.Sleep(100 * time.Millisecond)\n \n-\t// Start as leader.\n-\ts.currentTerm++\n+\t// Close the log.\n+\tif s.log != nil {\n+\t\ts.log.Close()\n+\t\ts.log = nil\n+\t}\n+\n+}\n+\n+// Checks if the server is currently running.\n+func (s *Server) Running() bool {\n+\treturn s.state != Stopped\n+}\n+\n+// Respond to RPCs from candidates and leaders.\n+// Convert to candidate if election timeout elapses without\n+// either:\n+// \t1.Receiving valid AppendEntries RPC, or\n+//\t2.Granting vote to candidate\n+func (s *Server) startFollowerLoop() (stop bool) {\n+\ts.state = Follower\n+\n+\t// (1) Timeout: promote and return\n+\t// (2) Stopped: due to receive heartbeat, continue\n+\tfor {\n+\t\tif s.State() == Stopped {\n+\t\t\treturn true\n+\t\t}\n+\n+\t\tif s.electionTimer.Start() {",
        "path": "server.go",
        "position": 160,
        "original_position": 160,
        "commit_id": "fe55d8764038cfab4315f611031ef002cd18a617",
        "original_commit_id": "fe55d8764038cfab4315f611031ef002cd18a617",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu I'm finding the `Timer.Start()` verbiage weird. `Start()` implies to me that it kicks off the timer but doesn't wait for it to complete. It's not the biggest deal but I might refactor this in the future to something like `Start()`/`Wait()` or just `Run()`.\n",
        "created_at": "2013-07-03T22:45:20Z",
        "updated_at": "2013-07-03T22:45:20Z",
        "html_url": "https://github.com/goraft/raft/pull/42#discussion_r5022077",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/42",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5022077"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/42#discussion_r5022077"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/42"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5022347",
        "pull_request_review_id": null,
        "id": 5022347,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjIzNDc=",
        "diff_hunk": "@@ -321,34 +320,248 @@ func (s *Server) Initialize() error {\n \treturn nil\n }\n \n+//                          timeout\n+//                          ______\n+//                         |      |\n+//                         |      |\n+//                         v      |     recv majority votes\n+//  --------    timeout    -----------                        -----------\n+// |Follower| ----------> | Candidate |--------------------> |  Leader   |\n+//  --------               -----------                        -----------\n+//     ^              stepDown |                       stepDown      |\n+//     |_______________________|____________________________________ |\n+//\n+// The main Loop for the server\n+func (s *Server) StartServerLoop(role string) {\n+\tstop := false\n+\tleader := false\n+\n+\tdefer debugln(\"server stopped!\")\n+\n+\tfor {\n+\t\tswitch role {\n+\n+\t\tcase Follower:\n+\t\t\tstop = s.startFollowerLoop()\n+\n+\t\t\tif stop {\n+\t\t\t\treturn\n+\t\t\t}\n+\n+\t\t\trole = Candidate\n+\n+\t\tcase Candidate:\n+\t\t\tstop, leader = s.startCandidateLoop()\n+\n+\t\t\ts.votedFor = \"\"\n+\n+\t\t\tif stop {\n+\t\t\t\treturn\n+\t\t\t}\n+\n+\t\t\tif leader {\n+\t\t\t\trole = Leader\n+\n+\t\t\t} else {\n+\n+\t\t\t\trole = Follower\n+\t\t\t}\n+\n+\t\tcase Leader:\n+\t\t\tstop = s.startLeaderLoop()\n+\t\t\tif stop {\n+\t\t\t\treturn\n+\t\t\t}\n+\n+\t\t\trole = Follower\n+\t\t}\n+\t}\n+}\n+\n // Start the sever as a follower\n func (s *Server) StartFollower() {\n-\t// Update the state.\n-\ts.state = Follower\n-\n-\t// Start the election timeout.\n-\ts.StartElectionTimeout()\n+\tgo s.StartServerLoop(Follower)\n \n }\n \n // Start the sever as a leader\n-func (s *Server) StartLeader() error {\n+func (s *Server) StartLeader() {\n+\ts.state = Candidate\n+\tgo s.StartServerLoop(Leader)\n+}\n+\n+// Shuts down the server.\n+func (s *Server) Stop() {\n \ts.mutex.Lock()\n-\tdefer s.mutex.Unlock()\n+\t\n+\tif s.state == Follower {\n+\t\ts.electionTimer.Stop()\n+\t} else {\n+\t\ts.mutex.Unlock()\n+\t\ts.stop <- true\n+\t}\n+\ts.unload()\n+}\n+\n+// Unloads the server.\n+func (s *Server) unload() {\n+\t// Kill the election timer.\n+\ts.state = Stopped\n+\n+\t// wait for all previous flush ends\n+\ttime.Sleep(100 * time.Millisecond)\n \n-\t// Start as leader.\n-\ts.currentTerm++\n+\t// Close the log.\n+\tif s.log != nil {\n+\t\ts.log.Close()\n+\t\ts.log = nil\n+\t}\n+\n+}\n+\n+// Checks if the server is currently running.\n+func (s *Server) Running() bool {\n+\treturn s.state != Stopped\n+}\n+\n+// Respond to RPCs from candidates and leaders.\n+// Convert to candidate if election timeout elapses without\n+// either:\n+// \t1.Receiving valid AppendEntries RPC, or\n+//\t2.Granting vote to candidate\n+func (s *Server) startFollowerLoop() (stop bool) {\n+\ts.state = Follower\n+\n+\t// (1) Timeout: promote and return\n+\t// (2) Stopped: due to receive heartbeat, continue\n+\tfor {\n+\t\tif s.State() == Stopped {\n+\t\t\treturn true\n+\t\t}\n+\n+\t\tif s.electionTimer.Start() {\n+\t\t\treturn false\n+\n+\t\t} else {\n+\t\t\ts.electionTimer.Ready()\n+\t\t\tcontinue\n+\t\t}\n+\t}\n+}\n+\n+// Increment currentTerm, vote for self\n+// Reset election timeout\n+// Send RequestVote RPCs to all other servers, wait for either:\n+// Votes received from majority of servers: become leader\n+// AppendEntries RPC received from new leader: step\n+// down\n+// Election timeout elapses without election resolution:\n+// increment term, start new election\n+// Discover higher term: step down\n+\n+func (s *Server) startCandidateLoop() (stop bool, leader bool) {\n+\n+\tif s.state != Follower && s.state != Stopped {\n+\t\tpanic(\"startCandidateLoop\")\n+\t}\n+\n+\ts.state = Candidate\n+\ts.leader = \"\"\n+\ts.votedFor = s.Name()\n+\n+\tlastLogIndex, lastLogTerm := s.log.LastInfo()\n+\n+\tfor {\n+\n+\t\t// increase term\n+\t\ts.currentTerm++\n+\n+\t\t// Request votes from each of our peers.\n+\t\tc := make(chan *RequestVoteResponse, len(s.peers))\n+\t\treq := NewRequestVoteRequest(s.currentTerm, s.name, lastLogIndex, lastLogTerm)\n+\n+\t\tfor _, peer := range s.peers {\n+\t\t\tgo peer.sendVoteRequest(req, c)\n+\t\t}\n+\n+\t\t// collectVotes\n+\t\telected, timeout, stop := s.startCandidateSelect(c)\n+\n+\t\t// If we received enough votes then promote to leader and stop this election.\n+\t\tif elected {\n+\t\t\treturn false, true\n+\t\t}\n+\n+\t\tif timeout {\n+\t\t\tdebugln(s.Name(), \" election timeout, restart\")\n+\t\t\t// restart promotion\n+\t\t\tcontinue\n+\t\t}\n+\n+\t\tif stop {\n+\t\t\treturn true, false\n+\t\t}\n+\n+\t\treturn false, false\n+\t}\n+}\n+\n+// Initialize nextIndex for each to last log index + 1\n+// Send initial empty AppendEntries RPCs (heartbeat) to each\n+// follower; repeat during idle periods to prevent election\n+// timeouts (\u00a75.2)\n+// Accept commands from clients, append new entries to local\n+// log (\u00a75.3)\n+// Whenever last log index ! nextIndex for a follower, send\n+// AppendEntries RPC with log entries starting at nextIndex,\n+// update nextIndex if successful (\u00a75.3)\n+// If AppendEntries fails because of log inconsistency,\n+// decrement nextIndex and retry (\u00a75.3)\n+// Mark entries committed if stored on a majority of servers\n+// and some entry from current term is stored on a majority of\n+// servers. Apply newly committed entries to state machine.\n+// Step down if currentTerm changes (\u00a75.5)\n+func (s *Server) startLeaderLoop() bool {\n+\n+\tif s.state != Candidate && s.state != Stopped {\n+\t\tpanic(s.Name() + \" promote to leader but not candidate \" + s.state)\n+\t}\n+\n+\ts.state = Leader\n+\n+\tlogIndex, _ := s.log.LastInfo()\n+\n+\t// Move server to become a leader and begin peer heartbeats.\n \ts.state = Leader\n \ts.leader = s.name\n \n-\t// Leader need to collect appendLog response\n-\tgo s.commitCenter()\n+\t// Update the peers prevLogIndex to leader's lastLogIndex\n+\t// Start heartbeat\n+\tfor _, peer := range s.peers {\n \n-\treturn nil\n-}\n+\t\tdebugln(\"[Leader] Set \", peer.Name(), \"Prev to\", logIndex)\n \n+\t\tpeer.prevLogIndex = logIndex\n+\t\tpeer.heartbeatTimer.Ready()\n+\t\tpeer.StartHeartbeat()\n+\t}\n \n-func (s *Server) collectVotes(c chan *RequestVoteResponse) (bool, bool) {\n+\t// Begin to collect response from followers\n+\tstop := s.startLeaderSelect()\n+\n+\t{",
        "path": "server.go",
        "position": 275,
        "original_position": 275,
        "commit_id": "fe55d8764038cfab4315f611031ef002cd18a617",
        "original_commit_id": "fe55d8764038cfab4315f611031ef002cd18a617",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Why is the `for` loop in an anonymous block?\n",
        "created_at": "2013-07-03T23:06:24Z",
        "updated_at": "2013-07-03T23:06:24Z",
        "html_url": "https://github.com/goraft/raft/pull/42#discussion_r5022347",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/42",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5022347"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/42#discussion_r5022347"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/42"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5052038",
        "pull_request_review_id": null,
        "id": 5052038,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTIwMzg=",
        "diff_hunk": "@@ -257,13 +260,20 @@ func (p *Peer) heartbeat() {\n \t\t\t} else {\n \t\t\t\t// shutdown the heartbeat\n \t\t\t\tif f.term > p.server.currentTerm {\n-\t\t\t\t\tdebugln(\"[Heartbeat] SetpDown!\")\n-\t\t\t\t\tselect {\n-\t\t\t\t\tcase p.server.stepDown <- f.term:\n-\t\t\t\t\t\treturn\n-\t\t\t\t\tdefault:\n-\t\t\t\t\t\treturn\n+\t\t\t\t\tp.server.stateMutex.Lock()\n+\n+\t\t\t\t\tif p.server.state == Leader {\n+\t\t\t\t\t\tp.server.state = Follower\n+\t\t\t\t\t\tselect {\n+\t\t\t\t\t\tcase p.server.stepDown <- f.term:\n+\t\t\t\t\t\t\tp.server.currentTerm = f.term\n+\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\tpanic(\"heartbeat cannot step down\")\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n+\n+\t\t\t\t\tp.server.stateMutex.Unlock()\n+\t\t\t\t\treturn",
        "path": "peer.go",
        "position": 80,
        "original_position": 80,
        "commit_id": "5f64d1577661464f340e7bb65010c0af1d9a08a8",
        "original_commit_id": "5f64d1577661464f340e7bb65010c0af1d9a08a8",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu The peer shouldn't be messing around with the server's mutex. Any locking on the server should be done in `server.go`. Otherwise it's going to be impossible to track what's locking who.\n",
        "created_at": "2013-07-06T03:04:37Z",
        "updated_at": "2013-07-06T03:04:37Z",
        "html_url": "https://github.com/goraft/raft/pull/45#discussion_r5052038",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/45",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5052038"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/45#discussion_r5052038"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/45"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5052039",
        "pull_request_review_id": null,
        "id": 5052039,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTIwMzk=",
        "diff_hunk": "@@ -56,11 +56,12 @@ type Server struct {\n \tcontext     interface{}\n \tcurrentTerm uint64\n \n-\tvotedFor string\n-\tlog      *Log\n-\tleader   string\n-\tpeers    map[string]*Peer\n-\tmutex    sync.Mutex\n+\tvotedFor   string\n+\tlog        *Log\n+\tleader     string\n+\tpeers      map[string]*Peer\n+\tmutex      sync.Mutex\n+\tstateMutex sync.Mutex",
        "path": "server.go",
        "position": 14,
        "original_position": 14,
        "commit_id": "5f64d1577661464f340e7bb65010c0af1d9a08a8",
        "original_commit_id": "5f64d1577661464f340e7bb65010c0af1d9a08a8",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Why is there a `stateMutex`? What's the race condition that's trying to be avoided? It seems like a single lock would be fine.\n",
        "created_at": "2013-07-06T03:05:19Z",
        "updated_at": "2013-07-06T03:05:19Z",
        "html_url": "https://github.com/goraft/raft/pull/45#discussion_r5052039",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/45",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5052039"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/45#discussion_r5052039"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/45"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5052041",
        "pull_request_review_id": null,
        "id": 5052041,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTIwNDE=",
        "diff_hunk": "@@ -257,13 +260,20 @@ func (p *Peer) heartbeat() {\n \t\t\t} else {\n \t\t\t\t// shutdown the heartbeat\n \t\t\t\tif f.term > p.server.currentTerm {\n-\t\t\t\t\tdebugln(\"[Heartbeat] SetpDown!\")\n-\t\t\t\t\tselect {\n-\t\t\t\t\tcase p.server.stepDown <- f.term:\n-\t\t\t\t\t\treturn\n-\t\t\t\t\tdefault:\n-\t\t\t\t\t\treturn\n+\t\t\t\t\tp.server.stateMutex.Lock()\n+\n+\t\t\t\t\tif p.server.state == Leader {\n+\t\t\t\t\t\tp.server.state = Follower\n+\t\t\t\t\t\tselect {\n+\t\t\t\t\t\tcase p.server.stepDown <- f.term:\n+\t\t\t\t\t\t\tp.server.currentTerm = f.term\n+\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\tpanic(\"heartbeat cannot step down\")\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n+\n+\t\t\t\t\tp.server.stateMutex.Unlock()\n+\t\t\t\t\treturn",
        "path": "peer.go",
        "position": 80,
        "original_position": 80,
        "commit_id": "5f64d1577661464f340e7bb65010c0af1d9a08a8",
        "original_commit_id": "5f64d1577661464f340e7bb65010c0af1d9a08a8",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Actually, it seems like the peer should just send the term on the `stepDown` channel to the server and the server can handle its state and stopping the heartbeat.\n",
        "created_at": "2013-07-06T03:07:43Z",
        "updated_at": "2013-07-06T03:07:43Z",
        "html_url": "https://github.com/goraft/raft/pull/45#discussion_r5052041",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/45",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5052041"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/45#discussion_r5052041"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/45"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5052106",
        "pull_request_review_id": null,
        "id": 5052106,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTIxMDY=",
        "diff_hunk": "@@ -56,11 +56,12 @@ type Server struct {\n \tcontext     interface{}\n \tcurrentTerm uint64\n \n-\tvotedFor string\n-\tlog      *Log\n-\tleader   string\n-\tpeers    map[string]*Peer\n-\tmutex    sync.Mutex\n+\tvotedFor   string\n+\tlog        *Log\n+\tleader     string\n+\tpeers      map[string]*Peer\n+\tmutex      sync.Mutex\n+\tstateMutex sync.Mutex",
        "path": "server.go",
        "position": 14,
        "original_position": 14,
        "commit_id": "5f64d1577661464f340e7bb65010c0af1d9a08a8",
        "original_commit_id": "5f64d1577661464f340e7bb65010c0af1d9a08a8",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "We need to make sure \" the change state and send step down channel \" is atomic.\n",
        "created_at": "2013-07-06T03:55:43Z",
        "updated_at": "2013-07-06T03:55:43Z",
        "html_url": "https://github.com/goraft/raft/pull/45#discussion_r5052106",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/45",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5052106"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/45#discussion_r5052106"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/45"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5052109",
        "pull_request_review_id": null,
        "id": 5052109,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTIxMDk=",
        "diff_hunk": "@@ -257,13 +260,20 @@ func (p *Peer) heartbeat() {\n \t\t\t} else {\n \t\t\t\t// shutdown the heartbeat\n \t\t\t\tif f.term > p.server.currentTerm {\n-\t\t\t\t\tdebugln(\"[Heartbeat] SetpDown!\")\n-\t\t\t\t\tselect {\n-\t\t\t\t\tcase p.server.stepDown <- f.term:\n-\t\t\t\t\t\treturn\n-\t\t\t\t\tdefault:\n-\t\t\t\t\t\treturn\n+\t\t\t\t\tp.server.stateMutex.Lock()\n+\n+\t\t\t\t\tif p.server.state == Leader {\n+\t\t\t\t\t\tp.server.state = Follower\n+\t\t\t\t\t\tselect {\n+\t\t\t\t\t\tcase p.server.stepDown <- f.term:\n+\t\t\t\t\t\t\tp.server.currentTerm = f.term\n+\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\tpanic(\"heartbeat cannot step down\")\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n+\n+\t\t\t\t\tp.server.stateMutex.Unlock()\n+\t\t\t\t\treturn",
        "path": "peer.go",
        "position": 80,
        "original_position": 80,
        "commit_id": "5f64d1577661464f340e7bb65010c0af1d9a08a8",
        "original_commit_id": "5f64d1577661464f340e7bb65010c0af1d9a08a8",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Any one who wants to change the server's state and send signal.\nIt is not for sync, but make the checking and sending atomic.\n",
        "created_at": "2013-07-06T04:00:26Z",
        "updated_at": "2013-07-06T04:00:26Z",
        "html_url": "https://github.com/goraft/raft/pull/45#discussion_r5052109",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/45",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5052109"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/45#discussion_r5052109"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/45"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5055639",
        "pull_request_review_id": null,
        "id": 5055639,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU2Mzk=",
        "diff_hunk": "@@ -330,393 +363,197 @@ func (s *Server) Initialize() error {\n //     ^              stepDown |                       stepDown      |",
        "path": "server.go",
        "position": null,
        "original_position": 214,
        "commit_id": "00d109823e28868859abe2c67b0349da7c083507",
        "original_commit_id": "08e2d519ae28b9f4f9750b0da73433e68a5de3e9",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "stepDown/Discover new Leader\n",
        "created_at": "2013-07-07T21:25:46Z",
        "updated_at": "2013-07-07T22:19:09Z",
        "html_url": "https://github.com/goraft/raft/pull/52#discussion_r5055639",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/52",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5055639"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/52#discussion_r5055639"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/52"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5055642",
        "pull_request_review_id": null,
        "id": 5055642,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU2NDI=",
        "diff_hunk": "@@ -330,393 +363,197 @@ func (s *Server) Initialize() error {\n //     ^              stepDown |                       stepDown      |",
        "path": "server.go",
        "position": null,
        "original_position": 214,
        "commit_id": "00d109823e28868859abe2c67b0349da7c083507",
        "original_commit_id": "08e2d519ae28b9f4f9750b0da73433e68a5de3e9",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu I'll update the ASCII art.\n",
        "created_at": "2013-07-07T21:26:49Z",
        "updated_at": "2013-07-07T22:19:09Z",
        "html_url": "https://github.com/goraft/raft/pull/52#discussion_r5055642",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/52",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5055642"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/52#discussion_r5055642"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/52"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5055643",
        "pull_request_review_id": null,
        "id": 5055643,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU2NDM=",
        "diff_hunk": "@@ -330,393 +363,197 @@ func (s *Server) Initialize() error {\n //     ^              stepDown |                       stepDown      |",
        "path": "server.go",
        "position": null,
        "original_position": 214,
        "commit_id": "00d109823e28868859abe2c67b0349da7c083507",
        "original_commit_id": "08e2d519ae28b9f4f9750b0da73433e68a5de3e9",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Actually, it seems like \"step down\" and \"discover new leader\" are the same thing.\n",
        "created_at": "2013-07-07T21:27:37Z",
        "updated_at": "2013-07-07T22:19:09Z",
        "html_url": "https://github.com/goraft/raft/pull/52#discussion_r5055643",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/52",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5055643"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/52#discussion_r5055643"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/52"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5055647",
        "pull_request_review_id": null,
        "id": 5055647,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU2NDc=",
        "diff_hunk": "@@ -319,6 +307,51 @@ func (s *Server) Initialize() error {\n \treturn nil\n }\n \n+// Start the sever as a follower\n+func (s *Server) StartFollower() {\n+\ts.state = Follower\n+\tgo s.loop()\n+\n+}\n+\n+// Start the sever as a leader\n+func (s *Server) StartLeader() {\n+\ts.state = Leader\n+\ts.currentTerm++\n+\tgo s.loop()\n+}\n+\n+// Shuts down the server.\n+func (s *Server) Stop() {\n+\ts.send(&stopValue)\n+\ts.log.close()\n+}",
        "path": "server.go",
        "position": null,
        "original_position": 183,
        "commit_id": "00d109823e28868859abe2c67b0349da7c083507",
        "original_commit_id": "08e2d519ae28b9f4f9750b0da73433e68a5de3e9",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Since we change all the request to blocking signal, we need to consume all the sync func before stop the server.\n",
        "created_at": "2013-07-07T21:29:10Z",
        "updated_at": "2013-07-07T22:19:09Z",
        "html_url": "https://github.com/goraft/raft/pull/52#discussion_r5055647",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/52",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5055647"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/52#discussion_r5055647"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/52"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5055649",
        "pull_request_review_id": null,
        "id": 5055649,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU2NDk=",
        "diff_hunk": "@@ -319,6 +307,51 @@ func (s *Server) Initialize() error {\n \treturn nil\n }\n \n+// Start the sever as a follower\n+func (s *Server) StartFollower() {\n+\ts.state = Follower\n+\tgo s.loop()\n+\n+}\n+\n+// Start the sever as a leader\n+func (s *Server) StartLeader() {\n+\ts.state = Leader\n+\ts.currentTerm++\n+\tgo s.loop()\n+}\n+\n+// Shuts down the server.\n+func (s *Server) Stop() {\n+\ts.send(&stopValue)\n+\ts.log.close()\n+}\n+\n+// Checks if the server is currently running.\n+func (s *Server) Running() bool {\n+\treturn s.state != Stopped\n+}\n+\n+//--------------------------------------\n+// Term\n+//--------------------------------------\n+\n+// Sets the current term for the server. This is only used when an external\n+// current term is found.\n+func (s *Server) setCurrentTerm(term uint64, leaderName string) {\n+\tif term > s.currentTerm {\n+\t\ts.state = Follower\n+\t\ts.currentTerm = term\n+\t\ts.leader = leaderName\n+\t\ts.votedFor = \"\"\n+\t}",
        "path": "server.go",
        "position": null,
        "original_position": 202,
        "commit_id": "00d109823e28868859abe2c67b0349da7c083507",
        "original_commit_id": "08e2d519ae28b9f4f9750b0da73433e68a5de3e9",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "When the server is a candidate, even if the term is equal to s.currentTerm it still need to change to follower.\n",
        "created_at": "2013-07-07T21:29:59Z",
        "updated_at": "2013-07-07T22:19:09Z",
        "html_url": "https://github.com/goraft/raft/pull/52#discussion_r5055649",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/52",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5055649"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/52#discussion_r5055649"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/52"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5055650",
        "pull_request_review_id": null,
        "id": 5055650,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU2NTA=",
        "diff_hunk": "@@ -99,182 +92,110 @@ func (p *Peer) clone() *Peer {\n }\n \n //--------------------------------------\n-// Flush\n+// Heartbeat\n //--------------------------------------\n \n-// Sends an AppendEntries RPC but does not obtain a lock\n-// on the server.\n-func (p *Peer) flush() (uint64, bool, error) {\n-\t// We need to hold the log lock to create AppendEntriesRequest\n-\t// avoid snapshot to delete the desired entries before AEQ()\n-\treq := p.server.createAppendEntriesRequest(p.prevLogIndex)\n-\n-\tif req != nil {\n-\t\treturn p.sendFlushRequest(req)\n-\t} else {\n-\t\treq := p.server.createSnapshotRequest()\n-\t\treturn p.sendSnapshotRequest(req)\n-\t}\n-\n-}\n+// Listens to the heartbeat timeout and flushes an AppendEntries RPC.\n+func (p *Peer) heartbeat(c chan bool) {\n+\tc <- true\n \n-// send VoteRequest Request\n-func (p *Peer) sendVoteRequest(req *RequestVoteRequest, c chan *RequestVoteResponse) {\n-\treq.peer = p\n-\tdebugln(p.server.Name(), \"Send Vote Request to \", p.Name())\n-\tif resp, _ := p.server.transporter.SendVoteRequest(p.server, p, req); resp != nil {\n-\t\tresp.peer = p\n-\t\tc <- resp\n+\tfor {\n+\t\tselect {\n+\t\tcase <-p.stopChan:\n+\t\t\treturn\n+\t\t\t",
        "path": "peer.go",
        "position": null,
        "original_position": 121,
        "commit_id": "00d109823e28868859abe2c67b0349da7c083507",
        "original_commit_id": "08e2d519ae28b9f4f9750b0da73433e68a5de3e9",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Notice that, we may not stop the heartbeat as soon as the leader step down to a follower. That is to say, even if the leader has became to a follower, it will still have chance to send out one more heartbeat. \n",
        "created_at": "2013-07-07T21:32:32Z",
        "updated_at": "2013-07-07T22:19:09Z",
        "html_url": "https://github.com/goraft/raft/pull/52#discussion_r5055650",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/52",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5055650"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/52#discussion_r5055650"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/52"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5055655",
        "pull_request_review_id": null,
        "id": 5055655,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU2NTU=",
        "diff_hunk": "@@ -319,6 +307,51 @@ func (s *Server) Initialize() error {\n \treturn nil\n }\n \n+// Start the sever as a follower\n+func (s *Server) StartFollower() {\n+\ts.state = Follower\n+\tgo s.loop()\n+\n+}\n+\n+// Start the sever as a leader\n+func (s *Server) StartLeader() {\n+\ts.state = Leader\n+\ts.currentTerm++\n+\tgo s.loop()\n+}\n+\n+// Shuts down the server.\n+func (s *Server) Stop() {\n+\ts.send(&stopValue)\n+\ts.log.close()\n+}",
        "path": "server.go",
        "position": null,
        "original_position": 183,
        "commit_id": "00d109823e28868859abe2c67b0349da7c083507",
        "original_commit_id": "08e2d519ae28b9f4f9750b0da73433e68a5de3e9",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Are you saying to just flush the `s.c` channel before stopping?\n",
        "created_at": "2013-07-07T21:35:16Z",
        "updated_at": "2013-07-07T22:19:09Z",
        "html_url": "https://github.com/goraft/raft/pull/52#discussion_r5055655",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/52",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5055655"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/52#discussion_r5055655"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/52"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5055662",
        "pull_request_review_id": null,
        "id": 5055662,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU2NjI=",
        "diff_hunk": "@@ -99,182 +92,110 @@ func (p *Peer) clone() *Peer {\n }\n \n //--------------------------------------\n-// Flush\n+// Heartbeat\n //--------------------------------------\n \n-// Sends an AppendEntries RPC but does not obtain a lock\n-// on the server.\n-func (p *Peer) flush() (uint64, bool, error) {\n-\t// We need to hold the log lock to create AppendEntriesRequest\n-\t// avoid snapshot to delete the desired entries before AEQ()\n-\treq := p.server.createAppendEntriesRequest(p.prevLogIndex)\n-\n-\tif req != nil {\n-\t\treturn p.sendFlushRequest(req)\n-\t} else {\n-\t\treq := p.server.createSnapshotRequest()\n-\t\treturn p.sendSnapshotRequest(req)\n-\t}\n-\n-}\n+// Listens to the heartbeat timeout and flushes an AppendEntries RPC.\n+func (p *Peer) heartbeat(c chan bool) {\n+\tc <- true\n \n-// send VoteRequest Request\n-func (p *Peer) sendVoteRequest(req *RequestVoteRequest, c chan *RequestVoteResponse) {\n-\treq.peer = p\n-\tdebugln(p.server.Name(), \"Send Vote Request to \", p.Name())\n-\tif resp, _ := p.server.transporter.SendVoteRequest(p.server, p, req); resp != nil {\n-\t\tresp.peer = p\n-\t\tc <- resp\n+\tfor {\n+\t\tselect {\n+\t\tcase <-p.stopChan:\n+\t\t\treturn\n+\t\t\t\n+\t\tcase <-time.After(p.heartbeatTimeout):\n+\t\t\tp.flush()\n+\t\t}\n \t}\n }\n \n-// send Snapshot Request\n-func (p *Peer) sendSnapshotRequest(req *SnapshotRequest) (uint64, bool, error) {\n-\t// Ignore any null requests.\n-\tif req == nil {\n-\t\treturn 0, false, errors.New(\"raft.Peer: Request required\")\n-\t}\n-\n-\t// Generate an snapshot request based on the state of the server and\n-\t// log. Send the request through the user-provided handler and process the\n-\t// result.\n-\tresp, err := p.server.transporter.SendSnapshotRequest(p.server, p, req)\n-\n-\tif resp == nil {\n-\t\treturn 0, false, err\n-\t}\n-\n-\t// If successful then update the previous log index. If it was\n-\t// unsuccessful then decrement the previous log index and we'll try again\n-\t// next time.\n-\tif resp.Success {\n-\t\tp.prevLogIndex = req.LastIndex\n+//--------------------------------------\n+// Append Entries\n+//--------------------------------------\n \n+// Sends an AppendEntries RPC.\n+func (p *Peer) flush() {\n+\tentries, prevLogTerm := p.server.log.getEntriesAfter(p.prevLogIndex)",
        "path": "peer.go",
        "position": null,
        "original_position": 155,
        "commit_id": "00d109823e28868859abe2c67b0349da7c083507",
        "original_commit_id": "08e2d519ae28b9f4f9750b0da73433e68a5de3e9",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "As I have stated above, here is what a bad thing can happen. The leader has stepdown to a follower and increase its term.\nThen the follower still have chance to entry this func and try to append log to other peers using the newest term.\n\nWhich will lead to other peer with old term stepdown and think this follower server is the new leader.\n\nWhat we need to do is to add a lock to make check status and get currentTerm atomic.\n",
        "created_at": "2013-07-07T21:37:49Z",
        "updated_at": "2013-07-07T22:19:09Z",
        "html_url": "https://github.com/goraft/raft/pull/52#discussion_r5055662",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/52",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5055662"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/52#discussion_r5055662"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/52"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5055665",
        "pull_request_review_id": null,
        "id": 5055665,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU2NjU=",
        "diff_hunk": "@@ -319,6 +307,51 @@ func (s *Server) Initialize() error {\n \treturn nil\n }\n \n+// Start the sever as a follower\n+func (s *Server) StartFollower() {\n+\ts.state = Follower\n+\tgo s.loop()\n+\n+}\n+\n+// Start the sever as a leader\n+func (s *Server) StartLeader() {\n+\ts.state = Leader\n+\ts.currentTerm++\n+\tgo s.loop()\n+}\n+\n+// Shuts down the server.\n+func (s *Server) Stop() {\n+\ts.send(&stopValue)\n+\ts.log.close()\n+}\n+\n+// Checks if the server is currently running.\n+func (s *Server) Running() bool {\n+\treturn s.state != Stopped\n+}\n+\n+//--------------------------------------\n+// Term\n+//--------------------------------------\n+\n+// Sets the current term for the server. This is only used when an external\n+// current term is found.\n+func (s *Server) setCurrentTerm(term uint64, leaderName string) {\n+\tif term > s.currentTerm {\n+\t\ts.state = Follower\n+\t\ts.currentTerm = term\n+\t\ts.leader = leaderName\n+\t\ts.votedFor = \"\"\n+\t}",
        "path": "server.go",
        "position": null,
        "original_position": 202,
        "commit_id": "00d109823e28868859abe2c67b0349da7c083507",
        "original_commit_id": "08e2d519ae28b9f4f9750b0da73433e68a5de3e9",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu That's only for AER though, right? Candidate that receives an RVR shouldn't step down if it seems the same term though.\n",
        "created_at": "2013-07-07T21:38:21Z",
        "updated_at": "2013-07-07T22:19:09Z",
        "html_url": "https://github.com/goraft/raft/pull/52#discussion_r5055665",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/52",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5055665"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/52#discussion_r5055665"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/52"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5055668",
        "pull_request_review_id": null,
        "id": 5055668,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU2Njg=",
        "diff_hunk": "@@ -99,182 +92,110 @@ func (p *Peer) clone() *Peer {\n }\n \n //--------------------------------------\n-// Flush\n+// Heartbeat\n //--------------------------------------\n \n-// Sends an AppendEntries RPC but does not obtain a lock\n-// on the server.\n-func (p *Peer) flush() (uint64, bool, error) {\n-\t// We need to hold the log lock to create AppendEntriesRequest\n-\t// avoid snapshot to delete the desired entries before AEQ()\n-\treq := p.server.createAppendEntriesRequest(p.prevLogIndex)\n-\n-\tif req != nil {\n-\t\treturn p.sendFlushRequest(req)\n-\t} else {\n-\t\treq := p.server.createSnapshotRequest()\n-\t\treturn p.sendSnapshotRequest(req)\n-\t}\n-\n-}\n+// Listens to the heartbeat timeout and flushes an AppendEntries RPC.\n+func (p *Peer) heartbeat(c chan bool) {\n+\tc <- true\n \n-// send VoteRequest Request\n-func (p *Peer) sendVoteRequest(req *RequestVoteRequest, c chan *RequestVoteResponse) {\n-\treq.peer = p\n-\tdebugln(p.server.Name(), \"Send Vote Request to \", p.Name())\n-\tif resp, _ := p.server.transporter.SendVoteRequest(p.server, p, req); resp != nil {\n-\t\tresp.peer = p\n-\t\tc <- resp\n+\tfor {\n+\t\tselect {\n+\t\tcase <-p.stopChan:\n+\t\t\treturn\n+\t\t\t",
        "path": "peer.go",
        "position": null,
        "original_position": 121,
        "commit_id": "00d109823e28868859abe2c67b0349da7c083507",
        "original_commit_id": "08e2d519ae28b9f4f9750b0da73433e68a5de3e9",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu I'll add a check for server state to make sure the server is still the leader before sending out a heartbeat (in addition to the `p.stopChan` select).\n",
        "created_at": "2013-07-07T21:39:30Z",
        "updated_at": "2013-07-07T22:19:09Z",
        "html_url": "https://github.com/goraft/raft/pull/52#discussion_r5055668",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/52",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5055668"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/52#discussion_r5055668"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/52"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5055669",
        "pull_request_review_id": null,
        "id": 5055669,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU2Njk=",
        "diff_hunk": "@@ -319,6 +307,51 @@ func (s *Server) Initialize() error {\n \treturn nil\n }\n \n+// Start the sever as a follower\n+func (s *Server) StartFollower() {\n+\ts.state = Follower\n+\tgo s.loop()\n+\n+}\n+\n+// Start the sever as a leader\n+func (s *Server) StartLeader() {\n+\ts.state = Leader\n+\ts.currentTerm++\n+\tgo s.loop()\n+}\n+\n+// Shuts down the server.\n+func (s *Server) Stop() {\n+\ts.send(&stopValue)\n+\ts.log.close()\n+}",
        "path": "server.go",
        "position": null,
        "original_position": 183,
        "commit_id": "00d109823e28868859abe2c67b0349da7c083507",
        "original_commit_id": "08e2d519ae28b9f4f9750b0da73433e68a5de3e9",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Some other go routine may be blocking at send signals to this channel. We need to close the channel (if this operation will unblocking all the waiting go routine) or eat up all the pending signals.\n",
        "created_at": "2013-07-07T21:39:44Z",
        "updated_at": "2013-07-07T22:19:09Z",
        "html_url": "https://github.com/goraft/raft/pull/52#discussion_r5055669",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/52",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5055669"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/52#discussion_r5055669"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/52"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5055671",
        "pull_request_review_id": null,
        "id": 5055671,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU2NzE=",
        "diff_hunk": "@@ -330,393 +363,197 @@ func (s *Server) Initialize() error {\n //     ^              stepDown |                       stepDown      |",
        "path": "server.go",
        "position": null,
        "original_position": 214,
        "commit_id": "00d109823e28868859abe2c67b0349da7c083507",
        "original_commit_id": "08e2d519ae28b9f4f9750b0da73433e68a5de3e9",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@benbjohnson To make it clear, stepdown is caused by receiving a newer term, discovery leader is caused by receiving a appendEntriesRequest from a leader with a same term\n",
        "created_at": "2013-07-07T21:40:10Z",
        "updated_at": "2013-07-07T22:19:09Z",
        "html_url": "https://github.com/goraft/raft/pull/52#discussion_r5055671",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/52",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5055671"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/52#discussion_r5055671"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/52"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5055676",
        "pull_request_review_id": null,
        "id": 5055676,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU2NzY=",
        "diff_hunk": "@@ -319,6 +307,51 @@ func (s *Server) Initialize() error {\n \treturn nil\n }\n \n+// Start the sever as a follower\n+func (s *Server) StartFollower() {\n+\ts.state = Follower\n+\tgo s.loop()\n+\n+}\n+\n+// Start the sever as a leader\n+func (s *Server) StartLeader() {\n+\ts.state = Leader\n+\ts.currentTerm++\n+\tgo s.loop()\n+}\n+\n+// Shuts down the server.\n+func (s *Server) Stop() {\n+\ts.send(&stopValue)\n+\ts.log.close()\n+}\n+\n+// Checks if the server is currently running.\n+func (s *Server) Running() bool {\n+\treturn s.state != Stopped\n+}\n+\n+//--------------------------------------\n+// Term\n+//--------------------------------------\n+\n+// Sets the current term for the server. This is only used when an external\n+// current term is found.\n+func (s *Server) setCurrentTerm(term uint64, leaderName string) {\n+\tif term > s.currentTerm {\n+\t\ts.state = Follower\n+\t\ts.currentTerm = term\n+\t\ts.leader = leaderName\n+\t\ts.votedFor = \"\"\n+\t}",
        "path": "server.go",
        "position": null,
        "original_position": 202,
        "commit_id": "00d109823e28868859abe2c67b0349da7c083507",
        "original_commit_id": "08e2d519ae28b9f4f9750b0da73433e68a5de3e9",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Candidate that receive RVR should deny or accept, since RVR also comes from a candidate.\nOnly for the AER to discovery new leader.\n",
        "created_at": "2013-07-07T21:42:47Z",
        "updated_at": "2013-07-07T22:19:09Z",
        "html_url": "https://github.com/goraft/raft/pull/52#discussion_r5055676",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/52",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5055676"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/52#discussion_r5055676"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/52"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5055679",
        "pull_request_review_id": null,
        "id": 5055679,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU2Nzk=",
        "diff_hunk": "@@ -99,182 +92,110 @@ func (p *Peer) clone() *Peer {\n }\n \n //--------------------------------------\n-// Flush\n+// Heartbeat\n //--------------------------------------\n \n-// Sends an AppendEntries RPC but does not obtain a lock\n-// on the server.\n-func (p *Peer) flush() (uint64, bool, error) {\n-\t// We need to hold the log lock to create AppendEntriesRequest\n-\t// avoid snapshot to delete the desired entries before AEQ()\n-\treq := p.server.createAppendEntriesRequest(p.prevLogIndex)\n-\n-\tif req != nil {\n-\t\treturn p.sendFlushRequest(req)\n-\t} else {\n-\t\treq := p.server.createSnapshotRequest()\n-\t\treturn p.sendSnapshotRequest(req)\n-\t}\n-\n-}\n+// Listens to the heartbeat timeout and flushes an AppendEntries RPC.\n+func (p *Peer) heartbeat(c chan bool) {\n+\tc <- true\n \n-// send VoteRequest Request\n-func (p *Peer) sendVoteRequest(req *RequestVoteRequest, c chan *RequestVoteResponse) {\n-\treq.peer = p\n-\tdebugln(p.server.Name(), \"Send Vote Request to \", p.Name())\n-\tif resp, _ := p.server.transporter.SendVoteRequest(p.server, p, req); resp != nil {\n-\t\tresp.peer = p\n-\t\tc <- resp\n+\tfor {\n+\t\tselect {\n+\t\tcase <-p.stopChan:\n+\t\t\treturn\n+\t\t\t",
        "path": "peer.go",
        "position": null,
        "original_position": 121,
        "commit_id": "00d109823e28868859abe2c67b0349da7c083507",
        "original_commit_id": "08e2d519ae28b9f4f9750b0da73433e68a5de3e9",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Even if you make that, it will not make sure that after the checking it is still the leader. \nYou need a lock to make checking and get term is atomic. \n",
        "created_at": "2013-07-07T21:44:14Z",
        "updated_at": "2013-07-07T22:19:09Z",
        "html_url": "https://github.com/goraft/raft/pull/52#discussion_r5055679",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/52",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5055679"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/52#discussion_r5055679"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/52"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5055718",
        "pull_request_review_id": null,
        "id": 5055718,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU3MTg=",
        "diff_hunk": "@@ -99,182 +92,110 @@ func (p *Peer) clone() *Peer {\n }\n \n //--------------------------------------\n-// Flush\n+// Heartbeat\n //--------------------------------------\n \n-// Sends an AppendEntries RPC but does not obtain a lock\n-// on the server.\n-func (p *Peer) flush() (uint64, bool, error) {\n-\t// We need to hold the log lock to create AppendEntriesRequest\n-\t// avoid snapshot to delete the desired entries before AEQ()\n-\treq := p.server.createAppendEntriesRequest(p.prevLogIndex)\n-\n-\tif req != nil {\n-\t\treturn p.sendFlushRequest(req)\n-\t} else {\n-\t\treq := p.server.createSnapshotRequest()\n-\t\treturn p.sendSnapshotRequest(req)\n-\t}\n-\n-}\n+// Listens to the heartbeat timeout and flushes an AppendEntries RPC.\n+func (p *Peer) heartbeat(c chan bool) {\n+\tc <- true\n \n-// send VoteRequest Request\n-func (p *Peer) sendVoteRequest(req *RequestVoteRequest, c chan *RequestVoteResponse) {\n-\treq.peer = p\n-\tdebugln(p.server.Name(), \"Send Vote Request to \", p.Name())\n-\tif resp, _ := p.server.transporter.SendVoteRequest(p.server, p, req); resp != nil {\n-\t\tresp.peer = p\n-\t\tc <- resp\n+\tfor {\n+\t\tselect {\n+\t\tcase <-p.stopChan:\n+\t\t\treturn\n+\t\t\t\n+\t\tcase <-time.After(p.heartbeatTimeout):\n+\t\t\tp.flush()\n+\t\t}\n \t}\n }\n \n-// send Snapshot Request\n-func (p *Peer) sendSnapshotRequest(req *SnapshotRequest) (uint64, bool, error) {\n-\t// Ignore any null requests.\n-\tif req == nil {\n-\t\treturn 0, false, errors.New(\"raft.Peer: Request required\")\n-\t}\n-\n-\t// Generate an snapshot request based on the state of the server and\n-\t// log. Send the request through the user-provided handler and process the\n-\t// result.\n-\tresp, err := p.server.transporter.SendSnapshotRequest(p.server, p, req)\n-\n-\tif resp == nil {\n-\t\treturn 0, false, err\n-\t}\n-\n-\t// If successful then update the previous log index. If it was\n-\t// unsuccessful then decrement the previous log index and we'll try again\n-\t// next time.\n-\tif resp.Success {\n-\t\tp.prevLogIndex = req.LastIndex\n+//--------------------------------------\n+// Append Entries\n+//--------------------------------------\n \n+// Sends an AppendEntries RPC.\n+func (p *Peer) flush() {\n+\tentries, prevLogTerm := p.server.log.getEntriesAfter(p.prevLogIndex)\n+\tif entries != nil {\n+\t\tp.sendAppendEntriesRequest(newAppendEntriesRequest(p.server.currentTerm, p.server.name, p.prevLogIndex, prevLogTerm, entries, p.server.log.commitIndex))\n \t} else {\n-\t\tpanic(resp)\n+\t\tp.sendSnapshotRequest(newSnapshotRequest(p.server.name, p.server.lastSnapshot))\n \t}\n-\n-\treturn resp.Term, resp.Success, err\n }\n \n-// Flushes a request through the server's transport.\n-func (p *Peer) sendFlushRequest(req *AppendEntriesRequest) (uint64, bool, error) {\n-\t// Ignore any null requests.\n-\tif req == nil {\n-\t\treturn 0, false, errors.New(\"raft.Peer: Request required\")\n-\t}\n-\n-\t// Generate an AppendEntries request based on the state of the server and\n-\t// log. Send the request through the user-provided handler and process the\n-\t// result.\n-\t//debugln(\"flush to \", p.Name())\n-\tdebugln(\"[HeartBeat] Leader \", p.server.Name(), \" to \", p.Name(), \" \", len(req.Entries), \" \", time.Now())\n-\n-\trespChan := make(chan *AppendEntriesResponse, 2)\n-\n-\tgo func() {\n-\t\ttranResp, _ := p.server.transporter.SendAppendEntriesRequest(p.server, p, req)\n-\t\trespChan <- tranResp\n-\t}()\n-\n-\tvar resp *AppendEntriesResponse\n-\n-\tselect {\n-\t// how to decide?\n-\tcase <-time.After(p.server.heartbeatTimeout * 2):\n-\t\tresp = nil\n-\n-\tcase resp = <-respChan:\n-\n-\t}\n+// Sends an AppendEntries request to the peer through the transport.\n+func (p *Peer) sendAppendEntriesRequest(req *AppendEntriesRequest) {\n+\ttraceln(\"peer.flush.send: \", p.server.Name(), \"->\", p.Name(), \" \", len(req.Entries))\n \n+\tresp := p.server.transporter.SendAppendEntriesRequest(p.server, p, req)",
        "path": "peer.go",
        "position": null,
        "original_position": 200,
        "commit_id": "00d109823e28868859abe2c67b0349da7c083507",
        "original_commit_id": "08e2d519ae28b9f4f9750b0da73433e68a5de3e9",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You want to do the timeout thing in the transporter layer?\n",
        "created_at": "2013-07-07T22:01:56Z",
        "updated_at": "2013-07-07T22:19:09Z",
        "html_url": "https://github.com/goraft/raft/pull/52#discussion_r5055718",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/52",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5055718"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/52#discussion_r5055718"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/52"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5055740",
        "pull_request_review_id": null,
        "id": 5055740,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU3NDA=",
        "diff_hunk": "@@ -172,16 +182,25 @@ func (s *Server) LogPath() string {\n \n // Retrieves the current state of the server.\n func (s *Server) State() string {\n+\ts.mutex.RLock()\n+\tdefer s.mutex.RUnlock()\n \treturn s.state\n }",
        "path": "server.go",
        "position": 102,
        "original_position": 102,
        "commit_id": "00d109823e28868859abe2c67b0349da7c083507",
        "original_commit_id": "107888aaffaa9685acb16d4da9165fdc976d4508",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This lock is meaningless, since you will unlock before return\nif you really want the lock, it should be like \ns.mutex.RLock()\nstate := s.state\ns.mutex.RUnlock()\nreturn state\n",
        "created_at": "2013-07-07T22:16:54Z",
        "updated_at": "2013-07-07T22:19:09Z",
        "html_url": "https://github.com/goraft/raft/pull/52#discussion_r5055740",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/52",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5055740"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/52#discussion_r5055740"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/52"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5055751",
        "pull_request_review_id": null,
        "id": 5055751,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU3NTE=",
        "diff_hunk": "@@ -99,182 +92,110 @@ func (p *Peer) clone() *Peer {\n }\n \n //--------------------------------------\n-// Flush\n+// Heartbeat\n //--------------------------------------\n \n-// Sends an AppendEntries RPC but does not obtain a lock\n-// on the server.\n-func (p *Peer) flush() (uint64, bool, error) {\n-\t// We need to hold the log lock to create AppendEntriesRequest\n-\t// avoid snapshot to delete the desired entries before AEQ()\n-\treq := p.server.createAppendEntriesRequest(p.prevLogIndex)\n-\n-\tif req != nil {\n-\t\treturn p.sendFlushRequest(req)\n-\t} else {\n-\t\treq := p.server.createSnapshotRequest()\n-\t\treturn p.sendSnapshotRequest(req)\n-\t}\n-\n-}\n+// Listens to the heartbeat timeout and flushes an AppendEntries RPC.\n+func (p *Peer) heartbeat(c chan bool) {\n+\tc <- true\n \n-// send VoteRequest Request\n-func (p *Peer) sendVoteRequest(req *RequestVoteRequest, c chan *RequestVoteResponse) {\n-\treq.peer = p\n-\tdebugln(p.server.Name(), \"Send Vote Request to \", p.Name())\n-\tif resp, _ := p.server.transporter.SendVoteRequest(p.server, p, req); resp != nil {\n-\t\tresp.peer = p\n-\t\tc <- resp\n+\tfor {\n+\t\tselect {\n+\t\tcase <-p.stopChan:\n+\t\t\treturn\n+\t\t\t\n+\t\tcase <-time.After(p.heartbeatTimeout):\n+\t\t\tp.flush()\n+\t\t}\n \t}\n }\n \n-// send Snapshot Request\n-func (p *Peer) sendSnapshotRequest(req *SnapshotRequest) (uint64, bool, error) {\n-\t// Ignore any null requests.\n-\tif req == nil {\n-\t\treturn 0, false, errors.New(\"raft.Peer: Request required\")\n-\t}\n-\n-\t// Generate an snapshot request based on the state of the server and\n-\t// log. Send the request through the user-provided handler and process the\n-\t// result.\n-\tresp, err := p.server.transporter.SendSnapshotRequest(p.server, p, req)\n-\n-\tif resp == nil {\n-\t\treturn 0, false, err\n-\t}\n-\n-\t// If successful then update the previous log index. If it was\n-\t// unsuccessful then decrement the previous log index and we'll try again\n-\t// next time.\n-\tif resp.Success {\n-\t\tp.prevLogIndex = req.LastIndex\n+//--------------------------------------\n+// Append Entries\n+//--------------------------------------\n \n+// Sends an AppendEntries RPC.\n+func (p *Peer) flush() {\n+\tentries, prevLogTerm := p.server.log.getEntriesAfter(p.prevLogIndex)",
        "path": "peer.go",
        "position": null,
        "original_position": 155,
        "commit_id": "00d109823e28868859abe2c67b0349da7c083507",
        "original_commit_id": "08e2d519ae28b9f4f9750b0da73433e68a5de3e9",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu I made a change in 00d1098 to grab the last index and term before verifying that the server is still the leader. It's not quite atomic but it's better than what was there.\n",
        "created_at": "2013-07-07T22:21:22Z",
        "updated_at": "2013-07-07T22:21:22Z",
        "html_url": "https://github.com/goraft/raft/pull/52#discussion_r5055751",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/52",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5055751"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/52#discussion_r5055751"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/52"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5055772",
        "pull_request_review_id": null,
        "id": 5055772,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU3NzI=",
        "diff_hunk": "@@ -172,16 +182,25 @@ func (s *Server) LogPath() string {\n \n // Retrieves the current state of the server.\n func (s *Server) State() string {\n+\ts.mutex.RLock()\n+\tdefer s.mutex.RUnlock()\n \treturn s.state\n }",
        "path": "server.go",
        "position": 102,
        "original_position": 102,
        "commit_id": "00d109823e28868859abe2c67b0349da7c083507",
        "original_commit_id": "107888aaffaa9685acb16d4da9165fdc976d4508",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu The deferred unlock is run after the value of `s.state` is returned.\n\nHere's a playground example: http://play.golang.org/p/3grXbtVzsT\n",
        "created_at": "2013-07-07T22:30:59Z",
        "updated_at": "2013-07-07T22:30:59Z",
        "html_url": "https://github.com/goraft/raft/pull/52#discussion_r5055772",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/52",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5055772"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/52#discussion_r5055772"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/52"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5055799",
        "pull_request_review_id": null,
        "id": 5055799,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU3OTk=",
        "diff_hunk": "@@ -99,182 +92,110 @@ func (p *Peer) clone() *Peer {\n }\n \n //--------------------------------------\n-// Flush\n+// Heartbeat\n //--------------------------------------\n \n-// Sends an AppendEntries RPC but does not obtain a lock\n-// on the server.\n-func (p *Peer) flush() (uint64, bool, error) {\n-\t// We need to hold the log lock to create AppendEntriesRequest\n-\t// avoid snapshot to delete the desired entries before AEQ()\n-\treq := p.server.createAppendEntriesRequest(p.prevLogIndex)\n-\n-\tif req != nil {\n-\t\treturn p.sendFlushRequest(req)\n-\t} else {\n-\t\treq := p.server.createSnapshotRequest()\n-\t\treturn p.sendSnapshotRequest(req)\n-\t}\n-\n-}\n+// Listens to the heartbeat timeout and flushes an AppendEntries RPC.\n+func (p *Peer) heartbeat(c chan bool) {\n+\tc <- true\n \n-// send VoteRequest Request\n-func (p *Peer) sendVoteRequest(req *RequestVoteRequest, c chan *RequestVoteResponse) {\n-\treq.peer = p\n-\tdebugln(p.server.Name(), \"Send Vote Request to \", p.Name())\n-\tif resp, _ := p.server.transporter.SendVoteRequest(p.server, p, req); resp != nil {\n-\t\tresp.peer = p\n-\t\tc <- resp\n+\tfor {\n+\t\tselect {\n+\t\tcase <-p.stopChan:\n+\t\t\treturn\n+\t\t\t\n+\t\tcase <-time.After(p.heartbeatTimeout):\n+\t\t\tp.flush()\n+\t\t}\n \t}\n }\n \n-// send Snapshot Request\n-func (p *Peer) sendSnapshotRequest(req *SnapshotRequest) (uint64, bool, error) {\n-\t// Ignore any null requests.\n-\tif req == nil {\n-\t\treturn 0, false, errors.New(\"raft.Peer: Request required\")\n-\t}\n-\n-\t// Generate an snapshot request based on the state of the server and\n-\t// log. Send the request through the user-provided handler and process the\n-\t// result.\n-\tresp, err := p.server.transporter.SendSnapshotRequest(p.server, p, req)\n-\n-\tif resp == nil {\n-\t\treturn 0, false, err\n-\t}\n-\n-\t// If successful then update the previous log index. If it was\n-\t// unsuccessful then decrement the previous log index and we'll try again\n-\t// next time.\n-\tif resp.Success {\n-\t\tp.prevLogIndex = req.LastIndex\n+//--------------------------------------\n+// Append Entries\n+//--------------------------------------\n \n+// Sends an AppendEntries RPC.\n+func (p *Peer) flush() {\n+\tentries, prevLogTerm := p.server.log.getEntriesAfter(p.prevLogIndex)\n+\tif entries != nil {\n+\t\tp.sendAppendEntriesRequest(newAppendEntriesRequest(p.server.currentTerm, p.server.name, p.prevLogIndex, prevLogTerm, entries, p.server.log.commitIndex))\n \t} else {\n-\t\tpanic(resp)\n+\t\tp.sendSnapshotRequest(newSnapshotRequest(p.server.name, p.server.lastSnapshot))\n \t}\n-\n-\treturn resp.Term, resp.Success, err\n }\n \n-// Flushes a request through the server's transport.\n-func (p *Peer) sendFlushRequest(req *AppendEntriesRequest) (uint64, bool, error) {\n-\t// Ignore any null requests.\n-\tif req == nil {\n-\t\treturn 0, false, errors.New(\"raft.Peer: Request required\")\n-\t}\n-\n-\t// Generate an AppendEntries request based on the state of the server and\n-\t// log. Send the request through the user-provided handler and process the\n-\t// result.\n-\t//debugln(\"flush to \", p.Name())\n-\tdebugln(\"[HeartBeat] Leader \", p.server.Name(), \" to \", p.Name(), \" \", len(req.Entries), \" \", time.Now())\n-\n-\trespChan := make(chan *AppendEntriesResponse, 2)\n-\n-\tgo func() {\n-\t\ttranResp, _ := p.server.transporter.SendAppendEntriesRequest(p.server, p, req)\n-\t\trespChan <- tranResp\n-\t}()\n-\n-\tvar resp *AppendEntriesResponse\n-\n-\tselect {\n-\t// how to decide?\n-\tcase <-time.After(p.server.heartbeatTimeout * 2):\n-\t\tresp = nil\n-\n-\tcase resp = <-respChan:\n-\n-\t}\n+// Sends an AppendEntries request to the peer through the transport.\n+func (p *Peer) sendAppendEntriesRequest(req *AppendEntriesRequest) {\n+\ttraceln(\"peer.flush.send: \", p.server.Name(), \"->\", p.Name(), \" \", len(req.Entries))\n \n+\tresp := p.server.transporter.SendAppendEntriesRequest(p.server, p, req)",
        "path": "peer.go",
        "position": null,
        "original_position": 200,
        "commit_id": "00d109823e28868859abe2c67b0349da7c083507",
        "original_commit_id": "08e2d519ae28b9f4f9750b0da73433e68a5de3e9",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu What \"timeout thing\"? It doesn't seem like we should continue to push heartbeats out if the previous one hasn't returned yet.\n",
        "created_at": "2013-07-07T22:41:07Z",
        "updated_at": "2013-07-07T22:41:07Z",
        "html_url": "https://github.com/goraft/raft/pull/52#discussion_r5055799",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/52",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5055799"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/52#discussion_r5055799"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/52"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5055800",
        "pull_request_review_id": null,
        "id": 5055800,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU4MDA=",
        "diff_hunk": "@@ -172,16 +182,25 @@ func (s *Server) LogPath() string {\n \n // Retrieves the current state of the server.\n func (s *Server) State() string {\n+\ts.mutex.RLock()\n+\tdefer s.mutex.RUnlock()\n \treturn s.state\n }",
        "path": "server.go",
        "position": 102,
        "original_position": 102,
        "commit_id": "00d109823e28868859abe2c67b0349da7c083507",
        "original_commit_id": "107888aaffaa9685acb16d4da9165fdc976d4508",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Sorry! I think I may misunderstand that \"Go's defer statement schedules a function call (the deferred function) to be run immediately before the function executing the defer returns.\"\n",
        "created_at": "2013-07-07T22:41:26Z",
        "updated_at": "2013-07-07T22:41:26Z",
        "html_url": "https://github.com/goraft/raft/pull/52#discussion_r5055800",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/52",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5055800"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/52#discussion_r5055800"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/52"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5055811",
        "pull_request_review_id": null,
        "id": 5055811,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU4MTE=",
        "diff_hunk": "@@ -99,182 +92,110 @@ func (p *Peer) clone() *Peer {\n }\n \n //--------------------------------------\n-// Flush\n+// Heartbeat\n //--------------------------------------\n \n-// Sends an AppendEntries RPC but does not obtain a lock\n-// on the server.\n-func (p *Peer) flush() (uint64, bool, error) {\n-\t// We need to hold the log lock to create AppendEntriesRequest\n-\t// avoid snapshot to delete the desired entries before AEQ()\n-\treq := p.server.createAppendEntriesRequest(p.prevLogIndex)\n-\n-\tif req != nil {\n-\t\treturn p.sendFlushRequest(req)\n-\t} else {\n-\t\treq := p.server.createSnapshotRequest()\n-\t\treturn p.sendSnapshotRequest(req)\n-\t}\n-\n-}\n+// Listens to the heartbeat timeout and flushes an AppendEntries RPC.\n+func (p *Peer) heartbeat(c chan bool) {\n+\tc <- true\n \n-// send VoteRequest Request\n-func (p *Peer) sendVoteRequest(req *RequestVoteRequest, c chan *RequestVoteResponse) {\n-\treq.peer = p\n-\tdebugln(p.server.Name(), \"Send Vote Request to \", p.Name())\n-\tif resp, _ := p.server.transporter.SendVoteRequest(p.server, p, req); resp != nil {\n-\t\tresp.peer = p\n-\t\tc <- resp\n+\tfor {\n+\t\tselect {\n+\t\tcase <-p.stopChan:\n+\t\t\treturn\n+\t\t\t\n+\t\tcase <-time.After(p.heartbeatTimeout):\n+\t\t\tp.flush()\n+\t\t}\n \t}\n }\n \n-// send Snapshot Request\n-func (p *Peer) sendSnapshotRequest(req *SnapshotRequest) (uint64, bool, error) {\n-\t// Ignore any null requests.\n-\tif req == nil {\n-\t\treturn 0, false, errors.New(\"raft.Peer: Request required\")\n-\t}\n-\n-\t// Generate an snapshot request based on the state of the server and\n-\t// log. Send the request through the user-provided handler and process the\n-\t// result.\n-\tresp, err := p.server.transporter.SendSnapshotRequest(p.server, p, req)\n-\n-\tif resp == nil {\n-\t\treturn 0, false, err\n-\t}\n-\n-\t// If successful then update the previous log index. If it was\n-\t// unsuccessful then decrement the previous log index and we'll try again\n-\t// next time.\n-\tif resp.Success {\n-\t\tp.prevLogIndex = req.LastIndex\n+//--------------------------------------\n+// Append Entries\n+//--------------------------------------\n \n+// Sends an AppendEntries RPC.\n+func (p *Peer) flush() {\n+\tentries, prevLogTerm := p.server.log.getEntriesAfter(p.prevLogIndex)\n+\tif entries != nil {\n+\t\tp.sendAppendEntriesRequest(newAppendEntriesRequest(p.server.currentTerm, p.server.name, p.prevLogIndex, prevLogTerm, entries, p.server.log.commitIndex))\n \t} else {\n-\t\tpanic(resp)\n+\t\tp.sendSnapshotRequest(newSnapshotRequest(p.server.name, p.server.lastSnapshot))\n \t}\n-\n-\treturn resp.Term, resp.Success, err\n }\n \n-// Flushes a request through the server's transport.\n-func (p *Peer) sendFlushRequest(req *AppendEntriesRequest) (uint64, bool, error) {\n-\t// Ignore any null requests.\n-\tif req == nil {\n-\t\treturn 0, false, errors.New(\"raft.Peer: Request required\")\n-\t}\n-\n-\t// Generate an AppendEntries request based on the state of the server and\n-\t// log. Send the request through the user-provided handler and process the\n-\t// result.\n-\t//debugln(\"flush to \", p.Name())\n-\tdebugln(\"[HeartBeat] Leader \", p.server.Name(), \" to \", p.Name(), \" \", len(req.Entries), \" \", time.Now())\n-\n-\trespChan := make(chan *AppendEntriesResponse, 2)\n-\n-\tgo func() {\n-\t\ttranResp, _ := p.server.transporter.SendAppendEntriesRequest(p.server, p, req)\n-\t\trespChan <- tranResp\n-\t}()\n-\n-\tvar resp *AppendEntriesResponse\n-\n-\tselect {\n-\t// how to decide?\n-\tcase <-time.After(p.server.heartbeatTimeout * 2):\n-\t\tresp = nil\n-\n-\tcase resp = <-respChan:\n-\n-\t}\n+// Sends an AppendEntries request to the peer through the transport.\n+func (p *Peer) sendAppendEntriesRequest(req *AppendEntriesRequest) {\n+\ttraceln(\"peer.flush.send: \", p.server.Name(), \"->\", p.Name(), \" \", len(req.Entries))\n \n+\tresp := p.server.transporter.SendAppendEntriesRequest(p.server, p, req)",
        "path": "peer.go",
        "position": null,
        "original_position": 200,
        "commit_id": "00d109823e28868859abe2c67b0349da7c083507",
        "original_commit_id": "08e2d519ae28b9f4f9750b0da73433e68a5de3e9",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "First thing, we should do heartbeat every heartbeat timeout rather than (hearbeatTime + transfere time).\nSecond, if the package is lost we prob dont want to wait tcp to timeout.\n\nIt does not matter to send two same request to the peer.\n",
        "created_at": "2013-07-07T22:47:28Z",
        "updated_at": "2013-07-07T22:47:28Z",
        "html_url": "https://github.com/goraft/raft/pull/52#discussion_r5055811",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/52",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5055811"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/52#discussion_r5055811"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/52"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5055814",
        "pull_request_review_id": null,
        "id": 5055814,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU4MTQ=",
        "diff_hunk": "@@ -172,16 +182,25 @@ func (s *Server) LogPath() string {\n \n // Retrieves the current state of the server.\n func (s *Server) State() string {\n+\ts.mutex.RLock()\n+\tdefer s.mutex.RUnlock()\n \treturn s.state\n }",
        "path": "server.go",
        "position": 102,
        "original_position": 102,
        "commit_id": "00d109823e28868859abe2c67b0349da7c083507",
        "original_commit_id": "107888aaffaa9685acb16d4da9165fdc976d4508",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu No problem. There are a few gotchas in Go that I've noticed. Another thing to watch out for is that defer only works at the function level and not the block level. Also, defers get run LIFO (last in, first out) which is important if you decide to execute multiple locks in the same function.\n",
        "created_at": "2013-07-07T22:50:03Z",
        "updated_at": "2013-07-07T22:50:03Z",
        "html_url": "https://github.com/goraft/raft/pull/52#discussion_r5055814",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/52",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5055814"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/52#discussion_r5055814"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/52"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5055953",
        "pull_request_review_id": null,
        "id": 5055953,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU5NTM=",
        "diff_hunk": "@@ -520,6 +520,11 @@ func (s *Server) candidateLoop() {\n \t\t\t\t// Callback to event.\n \t\t\t\te.c <- err\n \n+\t\t\t\t// both process AER and RVR can make the server to follower\n+\t\t\t\tif s.State() == Follower {\n+\t\t\t\t\tbreak\n+\t\t\t\t}",
        "path": "server.go",
        "position": 25,
        "original_position": 25,
        "commit_id": "d3787f60c12c95e4eb96e6750e557ecbe460e9d1",
        "original_commit_id": "d3787f60c12c95e4eb96e6750e557ecbe460e9d1",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu I just looked at this again and realized that the `break` statements inside the `select` will only break out of the `select`, not the inner `for` loop. We need to check for the state change at the end of the inner `for` loop in addition to the end of the outer `for` loop.\n\nAlso, we need to have a `bool` to track whether the timeout occurred since the break inside the timeout isn't actually doing anything either.\n\nI can make these changes later or feel free to do them if you understand what I'm talking about.\n",
        "created_at": "2013-07-07T23:44:53Z",
        "updated_at": "2013-07-07T23:44:53Z",
        "html_url": "https://github.com/goraft/raft/pull/55#discussion_r5055953",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/55",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5055953"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/55#discussion_r5055953"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/55"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5055962",
        "pull_request_review_id": null,
        "id": 5055962,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU5NjI=",
        "diff_hunk": "@@ -520,6 +520,11 @@ func (s *Server) candidateLoop() {\n \t\t\t\t// Callback to event.\n \t\t\t\te.c <- err\n \n+\t\t\t\t// both process AER and RVR can make the server to follower\n+\t\t\t\tif s.State() == Follower {\n+\t\t\t\t\tbreak\n+\t\t\t\t}",
        "path": "server.go",
        "position": 25,
        "original_position": 25,
        "commit_id": "d3787f60c12c95e4eb96e6750e557ecbe460e9d1",
        "original_commit_id": "d3787f60c12c95e4eb96e6750e557ecbe460e9d1",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I found that too after do a quick testing\n",
        "created_at": "2013-07-07T23:46:00Z",
        "updated_at": "2013-07-07T23:46:00Z",
        "html_url": "https://github.com/goraft/raft/pull/55#discussion_r5055962",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/55",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5055962"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/55#discussion_r5055962"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/55"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5074031",
        "pull_request_review_id": null,
        "id": 5074031,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQwMzE=",
        "diff_hunk": "@@ -273,12 +273,16 @@ func (l *Log) getEntryResult(entry *LogEntry, clear bool) (interface{}, error) {\n \t// If a result exists for the entry then return it with its error.\n \tif entry.Index > 0 && entry.Index <= uint64(len(l.results)) {\n \t\tif result := l.results[entry.Index-1]; result != nil {\n+\n+\t\t\t// keep the records before remove it\n+\t\t\treturnValue, err := result.returnValue, result.err\n+",
        "path": "log.go",
        "position": 7,
        "original_position": 7,
        "commit_id": "9efa7910264bbd04526764ffe387fea16698d808",
        "original_commit_id": "9efa7910264bbd04526764ffe387fea16698d808",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu That was a pretty dumb mistake on my part. Thanks for fixing that. :)\n",
        "created_at": "2013-07-08T19:41:56Z",
        "updated_at": "2013-07-08T19:41:56Z",
        "html_url": "https://github.com/goraft/raft/pull/61#discussion_r5074031",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/61",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5074031"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/61#discussion_r5074031"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/61"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5122962",
        "pull_request_review_id": null,
        "id": 5122962,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI5NjI=",
        "diff_hunk": "@@ -0,0 +1,36 @@\n+package raft\n+\n+import (\n+\t\"bytes\"\n+\t\"encoding/json\"\n+\t\"testing\"\n+)\n+\n+func BenchmarkAppendEntriesEncoding(b *testing.B) {\n+\treq, tmp := createTestAppendEntriesRequest(2000)\n+    for i := 0; i < b.N; i++ {\n+\t\tvar buf bytes.Buffer\n+        json.NewEncoder(&buf).Encode(req)\n+    }\n+\tb.SetBytes(int64(len(tmp)))\n+}\n+\n+func BenchmarkAppendEntriesDecoding(b *testing.B) {\n+\treq, buf := createTestAppendEntriesRequest(2000)\n+    for i := 0; i < b.N; i++ {\n+        json.NewDecoder(bytes.NewReader(buf)).Decode(req)\n+    }\n+\tb.SetBytes(int64(len(buf)))\n+}\n+\n+func createTestAppendEntriesRequest(entryCount int) (*AppendEntriesRequest, []byte) {\n+\tentries := make([]*LogEntry, 0)\n+\tfor i := 0; i < entryCount; i++ {\n+\t\tentries = append(entries, newLogEntry(nil, 1, 2, &joinCommand{Name: \"localhost:1000\"}))\n+\t}\n+\treq := newAppendEntriesRequest(1, \"leader\", 1, 1, entries, 1)\n+\tbuf, _ := json.Marshal(req)",
        "path": "append_entries_test.go",
        "position": 32,
        "original_position": 32,
        "commit_id": "628b86fe1df445f9b0544a980123365ff96db68a",
        "original_commit_id": "628b86fe1df445f9b0544a980123365ff96db68a",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Does the benchmark also calculate this operation? \n",
        "created_at": "2013-07-10T18:32:33Z",
        "updated_at": "2013-07-10T18:32:33Z",
        "html_url": "https://github.com/goraft/raft/pull/66#discussion_r5122962",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/66",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5122962"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/66#discussion_r5122962"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/66"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5123017",
        "pull_request_review_id": null,
        "id": 5123017,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMwMTc=",
        "diff_hunk": "@@ -0,0 +1,36 @@\n+package raft\n+\n+import (\n+\t\"bytes\"\n+\t\"encoding/json\"\n+\t\"testing\"\n+)\n+\n+func BenchmarkAppendEntriesEncoding(b *testing.B) {\n+\treq, tmp := createTestAppendEntriesRequest(2000)\n+    for i := 0; i < b.N; i++ {\n+\t\tvar buf bytes.Buffer\n+        json.NewEncoder(&buf).Encode(req)\n+    }\n+\tb.SetBytes(int64(len(tmp)))\n+}\n+\n+func BenchmarkAppendEntriesDecoding(b *testing.B) {\n+\treq, buf := createTestAppendEntriesRequest(2000)\n+    for i := 0; i < b.N; i++ {\n+        json.NewDecoder(bytes.NewReader(buf)).Decode(req)\n+    }\n+\tb.SetBytes(int64(len(buf)))\n+}\n+\n+func createTestAppendEntriesRequest(entryCount int) (*AppendEntriesRequest, []byte) {\n+\tentries := make([]*LogEntry, 0)\n+\tfor i := 0; i < entryCount; i++ {\n+\t\tentries = append(entries, newLogEntry(nil, 1, 2, &joinCommand{Name: \"localhost:1000\"}))\n+\t}\n+\treq := newAppendEntriesRequest(1, \"leader\", 1, 1, entries, 1)\n+\tbuf, _ := json.Marshal(req)",
        "path": "append_entries_test.go",
        "position": 32,
        "original_position": 32,
        "commit_id": "628b86fe1df445f9b0544a980123365ff96db68a",
        "original_commit_id": "628b86fe1df445f9b0544a980123365ff96db68a",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Prob, we do not want to calculate encoding twice. \n",
        "created_at": "2013-07-10T18:33:57Z",
        "updated_at": "2013-07-10T18:33:57Z",
        "html_url": "https://github.com/goraft/raft/pull/66#discussion_r5123017",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/66",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5123017"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/66#discussion_r5123017"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/66"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5133072",
        "pull_request_review_id": null,
        "id": 5133072,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMwNzI=",
        "diff_hunk": "@@ -16,6 +16,7 @@ type Peer struct {\n \tserver           *Server\n \tname             string\n \tprevLogIndex     uint64\n+\tsynced           bool",
        "path": "peer.go",
        "position": null,
        "original_position": 4,
        "commit_id": "255ce1bc7d212b453df39d2d5a5cc10ea5aad3ef",
        "original_commit_id": "b9e1da8ac23927bcfd40f218e8b97480cce73928",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu This only gets set once to `false` but never used beyond that. Can you delete it?\n",
        "created_at": "2013-07-11T03:53:10Z",
        "updated_at": "2013-07-11T05:20:30Z",
        "html_url": "https://github.com/goraft/raft/pull/70#discussion_r5133072",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/70",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5133072"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/70#discussion_r5133072"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/70"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5133084",
        "pull_request_review_id": null,
        "id": 5133084,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMwODQ=",
        "diff_hunk": "@@ -65,7 +65,31 @@ func RegisterCommand(command Command) {\n \tif command == nil {\n \t\tpanic(fmt.Sprintf(\"raft: Cannot register nil\"))\n \t} else if commandTypes[command.CommandName()] != nil {\n-\t\tpanic(fmt.Sprintf(\"raft: Duplicate registration: %s\", command.CommandName()))\n+\t\t// we need to register NOP command at the beginning\n+\t\t// for testing, it may register mutliple times\n+\t\t// i am not quite familiar with reg prorcess\n+\t\t// maybe you can fix it. sorry!\n+\n+\t\t//panic(fmt.Sprintf(\"raft: Duplicate registration: %s\", command.CommandName()))\n+\t\treturn",
        "path": "command.go",
        "position": null,
        "original_position": 11,
        "commit_id": "255ce1bc7d212b453df39d2d5a5cc10ea5aad3ef",
        "original_commit_id": "b9e1da8ac23927bcfd40f218e8b97480cce73928",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu I can see how the `RegisterCommand()` would be confusing. You just need to add an `init` function which gets run by Go before anything else:\n\n``` go\nfunc init() {\n    RegisterCommand(&NOPCommand)\n}\n```\n",
        "created_at": "2013-07-11T03:54:44Z",
        "updated_at": "2013-07-11T05:20:30Z",
        "html_url": "https://github.com/goraft/raft/pull/70#discussion_r5133084",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/70",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5133084"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/70#discussion_r5133084"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/70"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5133087",
        "pull_request_review_id": null,
        "id": 5133087,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMwODc=",
        "diff_hunk": "@@ -65,7 +65,31 @@ func RegisterCommand(command Command) {\n \tif command == nil {\n \t\tpanic(fmt.Sprintf(\"raft: Cannot register nil\"))\n \t} else if commandTypes[command.CommandName()] != nil {\n-\t\tpanic(fmt.Sprintf(\"raft: Duplicate registration: %s\", command.CommandName()))\n+\t\t// we need to register NOP command at the beginning\n+\t\t// for testing, it may register mutliple times\n+\t\t// i am not quite familiar with reg prorcess\n+\t\t// maybe you can fix it. sorry!\n+\n+\t\t//panic(fmt.Sprintf(\"raft: Duplicate registration: %s\", command.CommandName()))\n+\t\treturn\n \t}\n \tcommandTypes[command.CommandName()] = command\n }\n+\n+//--------------------------------------\n+// NOP command\n+//--------------------------------------\n+\n+// NOP command\n+type NOPCommand struct {\n+}\n+\n+// The name of the NOP command in the log\n+func (c NOPCommand) CommandName() string {\n+\treturn \"nop\"\n+}\n+\n+// NOP\n+func (c NOPCommand) Apply(server *Server) (interface{}, error) {\n+\treturn nil, nil\n+}",
        "path": "command.go",
        "position": null,
        "original_position": 32,
        "commit_id": "255ce1bc7d212b453df39d2d5a5cc10ea5aad3ef",
        "original_commit_id": "b9e1da8ac23927bcfd40f218e8b97480cce73928",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Can you move `NOPCommand` to its own file? (`nop_command.go`)\n",
        "created_at": "2013-07-11T03:55:11Z",
        "updated_at": "2013-07-11T05:20:30Z",
        "html_url": "https://github.com/goraft/raft/pull/70#discussion_r5133087",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/70",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5133087"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/70#discussion_r5133087"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/70"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5133100",
        "pull_request_review_id": null,
        "id": 5133100,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMxMDA=",
        "diff_hunk": "@@ -174,26 +175,45 @@ func (p *Peer) sendAppendEntriesRequest(req *AppendEntriesRequest) {\n \tif resp.Success {\n \t\tif len(req.Entries) > 0 {\n \t\t\tp.prevLogIndex = req.Entries[len(req.Entries)-1].Index\n+\n+\t\t\t// if peer append a log entry from the current term\n+\t\t\t// we set append to true\n+\t\t\tif req.Entries[len(req.Entries)-1].Term == p.server.currentTerm {\n+\t\t\t\tresp.append = true\n+\t\t\t}\n \t\t}\n \t\ttraceln(\"peer.flush.success: \", p.server.Name(), \"->\", p.Name(), \"; idx =\", p.prevLogIndex)\n \n \t\t// If it was unsuccessful then decrement the previous log index and\n \t\t// we'll try again next time.\n \t} else {\n-\t\t// we may miss a response from peer\n \t\tif resp.CommitIndex >= p.prevLogIndex {\n+\n+\t\t\t// we may miss a response from peer\n+\t\t\t// so maybe the peer has commited the logs we sent\n+\t\t\t// but we did not receive the success reply and did not increase\n+\t\t\t// the prevLogIndex\n+\n \t\t\tp.prevLogIndex = resp.CommitIndex\n+\n \t\t\tdebugln(\"peer.flush.commitIndex: \", p.server.Name(), \"->\", p.Name(), \" idx =\", p.prevLogIndex)\n \t\t} else if p.prevLogIndex > 0 {\n \t\t\t// Decrement the previous log index down until we find a match. Don't\n \t\t\t// let it go below where the peer's commit index is though. That's a\n \t\t\t// problem.\n \t\t\tp.prevLogIndex--\n+\t\t\t// if it not enough, we directly decrease to the index of the\n+\t\t\tif p.prevLogIndex > resp.Index {\n+\t\t\t\tp.prevLogIndex = resp.Index\n+\t\t\t}\n+",
        "path": "peer.go",
        "position": 36,
        "original_position": 44,
        "commit_id": "255ce1bc7d212b453df39d2d5a5cc10ea5aad3ef",
        "original_commit_id": "b9e1da8ac23927bcfd40f218e8b97480cce73928",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Why does this only go down to the current index on the peer instead of the commit index?\n",
        "created_at": "2013-07-11T03:56:37Z",
        "updated_at": "2013-07-11T05:20:30Z",
        "html_url": "https://github.com/goraft/raft/pull/70#discussion_r5133100",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/70",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5133100"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/70#discussion_r5133100"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/70"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5133162",
        "pull_request_review_id": null,
        "id": 5133162,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMxNjI=",
        "diff_hunk": "@@ -65,7 +65,31 @@ func RegisterCommand(command Command) {\n \tif command == nil {\n \t\tpanic(fmt.Sprintf(\"raft: Cannot register nil\"))\n \t} else if commandTypes[command.CommandName()] != nil {\n-\t\tpanic(fmt.Sprintf(\"raft: Duplicate registration: %s\", command.CommandName()))\n+\t\t// we need to register NOP command at the beginning\n+\t\t// for testing, it may register mutliple times\n+\t\t// i am not quite familiar with reg prorcess\n+\t\t// maybe you can fix it. sorry!\n+\n+\t\t//panic(fmt.Sprintf(\"raft: Duplicate registration: %s\", command.CommandName()))\n+\t\treturn\n \t}\n \tcommandTypes[command.CommandName()] = command\n }\n+\n+//--------------------------------------\n+// NOP command\n+//--------------------------------------\n+\n+// NOP command\n+type NOPCommand struct {\n+}\n+\n+// The name of the NOP command in the log\n+func (c NOPCommand) CommandName() string {\n+\treturn \"nop\"\n+}\n+\n+// NOP\n+func (c NOPCommand) Apply(server *Server) (interface{}, error) {\n+\treturn nil, nil\n+}",
        "path": "command.go",
        "position": null,
        "original_position": 32,
        "commit_id": "255ce1bc7d212b453df39d2d5a5cc10ea5aad3ef",
        "original_commit_id": "b9e1da8ac23927bcfd40f218e8b97480cce73928",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "ok\n",
        "created_at": "2013-07-11T04:05:08Z",
        "updated_at": "2013-07-11T05:20:30Z",
        "html_url": "https://github.com/goraft/raft/pull/70#discussion_r5133162",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/70",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5133162"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/70#discussion_r5133162"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/70"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5133164",
        "pull_request_review_id": null,
        "id": 5133164,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMxNjQ=",
        "diff_hunk": "@@ -65,7 +65,31 @@ func RegisterCommand(command Command) {\n \tif command == nil {\n \t\tpanic(fmt.Sprintf(\"raft: Cannot register nil\"))\n \t} else if commandTypes[command.CommandName()] != nil {\n-\t\tpanic(fmt.Sprintf(\"raft: Duplicate registration: %s\", command.CommandName()))\n+\t\t// we need to register NOP command at the beginning\n+\t\t// for testing, it may register mutliple times\n+\t\t// i am not quite familiar with reg prorcess\n+\t\t// maybe you can fix it. sorry!\n+\n+\t\t//panic(fmt.Sprintf(\"raft: Duplicate registration: %s\", command.CommandName()))\n+\t\treturn",
        "path": "command.go",
        "position": null,
        "original_position": 11,
        "commit_id": "255ce1bc7d212b453df39d2d5a5cc10ea5aad3ef",
        "original_commit_id": "b9e1da8ac23927bcfd40f218e8b97480cce73928",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "understand.\n",
        "created_at": "2013-07-11T04:05:19Z",
        "updated_at": "2013-07-11T05:20:30Z",
        "html_url": "https://github.com/goraft/raft/pull/70#discussion_r5133164",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/70",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5133164"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/70#discussion_r5133164"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/70"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5133167",
        "pull_request_review_id": null,
        "id": 5133167,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMxNjc=",
        "diff_hunk": "@@ -16,6 +16,7 @@ type Peer struct {\n \tserver           *Server\n \tname             string\n \tprevLogIndex     uint64\n+\tsynced           bool",
        "path": "peer.go",
        "position": null,
        "original_position": 4,
        "commit_id": "255ce1bc7d212b453df39d2d5a5cc10ea5aad3ef",
        "original_commit_id": "b9e1da8ac23927bcfd40f218e8b97480cce73928",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "yes\n",
        "created_at": "2013-07-11T04:05:34Z",
        "updated_at": "2013-07-11T05:20:30Z",
        "html_url": "https://github.com/goraft/raft/pull/70#discussion_r5133167",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/70",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5133167"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/70#discussion_r5133167"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/70"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5133180",
        "pull_request_review_id": null,
        "id": 5133180,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMxODA=",
        "diff_hunk": "@@ -174,26 +175,45 @@ func (p *Peer) sendAppendEntriesRequest(req *AppendEntriesRequest) {\n \tif resp.Success {\n \t\tif len(req.Entries) > 0 {\n \t\t\tp.prevLogIndex = req.Entries[len(req.Entries)-1].Index\n+\n+\t\t\t// if peer append a log entry from the current term\n+\t\t\t// we set append to true\n+\t\t\tif req.Entries[len(req.Entries)-1].Term == p.server.currentTerm {\n+\t\t\t\tresp.append = true\n+\t\t\t}\n \t\t}\n \t\ttraceln(\"peer.flush.success: \", p.server.Name(), \"->\", p.Name(), \"; idx =\", p.prevLogIndex)\n \n \t\t// If it was unsuccessful then decrement the previous log index and\n \t\t// we'll try again next time.\n \t} else {\n-\t\t// we may miss a response from peer\n \t\tif resp.CommitIndex >= p.prevLogIndex {\n+\n+\t\t\t// we may miss a response from peer\n+\t\t\t// so maybe the peer has commited the logs we sent\n+\t\t\t// but we did not receive the success reply and did not increase\n+\t\t\t// the prevLogIndex\n+\n \t\t\tp.prevLogIndex = resp.CommitIndex\n+\n \t\t\tdebugln(\"peer.flush.commitIndex: \", p.server.Name(), \"->\", p.Name(), \" idx =\", p.prevLogIndex)\n \t\t} else if p.prevLogIndex > 0 {\n \t\t\t// Decrement the previous log index down until we find a match. Don't\n \t\t\t// let it go below where the peer's commit index is though. That's a\n \t\t\t// problem.\n \t\t\tp.prevLogIndex--\n+\t\t\t// if it not enough, we directly decrease to the index of the\n+\t\t\tif p.prevLogIndex > resp.Index {\n+\t\t\t\tp.prevLogIndex = resp.Index\n+\t\t\t}\n+",
        "path": "peer.go",
        "position": 36,
        "original_position": 44,
        "commit_id": "255ce1bc7d212b453df39d2d5a5cc10ea5aad3ef",
        "original_commit_id": "b9e1da8ac23927bcfd40f218e8b97480cce73928",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I dont want to do the linear probing here. Before, we decrease only 1 each time if the append did not success.\nNow I let the peer response its current Index, and then the leader will probe from there.\nI do not do from commit index, since it is to aggressive.  Maybe the peer has some correct log that has not been  committed. \n",
        "created_at": "2013-07-11T04:07:51Z",
        "updated_at": "2013-07-11T05:20:30Z",
        "html_url": "https://github.com/goraft/raft/pull/70#discussion_r5133180",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/70",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5133180"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/70#discussion_r5133180"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/70"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5133232",
        "pull_request_review_id": null,
        "id": 5133232,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMyMzI=",
        "diff_hunk": "@@ -174,26 +175,45 @@ func (p *Peer) sendAppendEntriesRequest(req *AppendEntriesRequest) {\n \tif resp.Success {\n \t\tif len(req.Entries) > 0 {\n \t\t\tp.prevLogIndex = req.Entries[len(req.Entries)-1].Index\n+\n+\t\t\t// if peer append a log entry from the current term\n+\t\t\t// we set append to true\n+\t\t\tif req.Entries[len(req.Entries)-1].Term == p.server.currentTerm {\n+\t\t\t\tresp.append = true\n+\t\t\t}\n \t\t}\n \t\ttraceln(\"peer.flush.success: \", p.server.Name(), \"->\", p.Name(), \"; idx =\", p.prevLogIndex)\n \n \t\t// If it was unsuccessful then decrement the previous log index and\n \t\t// we'll try again next time.\n \t} else {\n-\t\t// we may miss a response from peer\n \t\tif resp.CommitIndex >= p.prevLogIndex {\n+\n+\t\t\t// we may miss a response from peer\n+\t\t\t// so maybe the peer has commited the logs we sent\n+\t\t\t// but we did not receive the success reply and did not increase\n+\t\t\t// the prevLogIndex\n+\n \t\t\tp.prevLogIndex = resp.CommitIndex\n+\n \t\t\tdebugln(\"peer.flush.commitIndex: \", p.server.Name(), \"->\", p.Name(), \" idx =\", p.prevLogIndex)\n \t\t} else if p.prevLogIndex > 0 {\n \t\t\t// Decrement the previous log index down until we find a match. Don't\n \t\t\t// let it go below where the peer's commit index is though. That's a\n \t\t\t// problem.\n \t\t\tp.prevLogIndex--\n+\t\t\t// if it not enough, we directly decrease to the index of the\n+\t\t\tif p.prevLogIndex > resp.Index {\n+\t\t\t\tp.prevLogIndex = resp.Index\n+\t\t\t}\n+",
        "path": "peer.go",
        "position": 36,
        "original_position": 44,
        "commit_id": "255ce1bc7d212b453df39d2d5a5cc10ea5aad3ef",
        "original_commit_id": "b9e1da8ac23927bcfd40f218e8b97480cce73928",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu I think it'll be rare for the index and the commit index to be far enough off to matter. I don't think it's worth the extra complexity to send back the index. I would just use the commit index and retrieve the duplicate log entries again.\n",
        "created_at": "2013-07-11T04:14:56Z",
        "updated_at": "2013-07-11T05:20:30Z",
        "html_url": "https://github.com/goraft/raft/pull/70#discussion_r5133232",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/70",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5133232"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/70#discussion_r5133232"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/70"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5133730",
        "pull_request_review_id": null,
        "id": 5133730,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM3MzA=",
        "diff_hunk": "@@ -174,26 +175,45 @@ func (p *Peer) sendAppendEntriesRequest(req *AppendEntriesRequest) {\n \tif resp.Success {\n \t\tif len(req.Entries) > 0 {\n \t\t\tp.prevLogIndex = req.Entries[len(req.Entries)-1].Index\n+\n+\t\t\t// if peer append a log entry from the current term\n+\t\t\t// we set append to true\n+\t\t\tif req.Entries[len(req.Entries)-1].Term == p.server.currentTerm {\n+\t\t\t\tresp.append = true\n+\t\t\t}\n \t\t}\n \t\ttraceln(\"peer.flush.success: \", p.server.Name(), \"->\", p.Name(), \"; idx =\", p.prevLogIndex)\n \n \t\t// If it was unsuccessful then decrement the previous log index and\n \t\t// we'll try again next time.\n \t} else {\n-\t\t// we may miss a response from peer\n \t\tif resp.CommitIndex >= p.prevLogIndex {\n+\n+\t\t\t// we may miss a response from peer\n+\t\t\t// so maybe the peer has commited the logs we sent\n+\t\t\t// but we did not receive the success reply and did not increase\n+\t\t\t// the prevLogIndex\n+\n \t\t\tp.prevLogIndex = resp.CommitIndex\n+\n \t\t\tdebugln(\"peer.flush.commitIndex: \", p.server.Name(), \"->\", p.Name(), \" idx =\", p.prevLogIndex)\n \t\t} else if p.prevLogIndex > 0 {\n \t\t\t// Decrement the previous log index down until we find a match. Don't\n \t\t\t// let it go below where the peer's commit index is though. That's a\n \t\t\t// problem.\n \t\t\tp.prevLogIndex--\n+\t\t\t// if it not enough, we directly decrease to the index of the\n+\t\t\tif p.prevLogIndex > resp.Index {\n+\t\t\t\tp.prevLogIndex = resp.Index\n+\t\t\t}\n+",
        "path": "peer.go",
        "position": 36,
        "original_position": 44,
        "commit_id": "255ce1bc7d212b453df39d2d5a5cc10ea5aad3ef",
        "original_commit_id": "b9e1da8ac23927bcfd40f218e8b97480cce73928",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think this may need to be tested to decide.\nWe can leave this to solve later.\n",
        "created_at": "2013-07-11T05:21:22Z",
        "updated_at": "2013-07-11T05:21:22Z",
        "html_url": "https://github.com/goraft/raft/pull/70#discussion_r5133730",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/70",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5133730"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/70#discussion_r5133730"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/70"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5184120",
        "pull_request_review_id": null,
        "id": 5184120,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQxMjA=",
        "diff_hunk": "@@ -9,6 +9,10 @@ import (\n \t\"sync\"\n )\n \n+const (\n+\tMTU = 200",
        "path": "log.go",
        "position": null,
        "original_position": 5,
        "commit_id": "557c735f693047bdd45c59db8bd5f36fefc014ec",
        "original_commit_id": "9c83cdef74fda1031147f81d711a51df6a7c74fc",
        "user": {
            "login": "philips",
            "id": 33544,
            "node_id": "MDQ6VXNlcjMzNTQ0",
            "avatar_url": "https://avatars1.githubusercontent.com/u/33544?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/philips",
            "html_url": "https://github.com/philips",
            "followers_url": "https://api.github.com/users/philips/followers",
            "following_url": "https://api.github.com/users/philips/following{/other_user}",
            "gists_url": "https://api.github.com/users/philips/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/philips/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/philips/subscriptions",
            "organizations_url": "https://api.github.com/users/philips/orgs",
            "repos_url": "https://api.github.com/users/philips/repos",
            "events_url": "https://api.github.com/users/philips/events{/privacy}",
            "received_events_url": "https://api.github.com/users/philips/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It isn't immediately clear to me what the unit of this is or its purpose. This is the maximum number of logs entries sent per request? Usually MTU refers to the maximum number of bytes a layer can send. In this case the unit is log entries.\n\nPerhaps MaxLogEntriesPerRequest?\n",
        "created_at": "2013-07-15T04:48:28Z",
        "updated_at": "2013-07-15T05:48:50Z",
        "html_url": "https://github.com/goraft/raft/pull/73#discussion_r5184120",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/73",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5184120"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/73#discussion_r5184120"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/73"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5184218",
        "pull_request_review_id": null,
        "id": 5184218,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQyMTg=",
        "diff_hunk": "@@ -9,6 +9,10 @@ import (\n \t\"sync\"\n )\n \n+const (\n+\tMTU = 200",
        "path": "log.go",
        "position": null,
        "original_position": 5,
        "commit_id": "557c735f693047bdd45c59db8bd5f36fefc014ec",
        "original_commit_id": "9c83cdef74fda1031147f81d711a51df6a7c74fc",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think the Unit should be changed to bytes in the end. \n\nBut I should change it to MaxLogEntriesPerRequest for now.\n",
        "created_at": "2013-07-15T05:17:03Z",
        "updated_at": "2013-07-15T05:48:50Z",
        "html_url": "https://github.com/goraft/raft/pull/73#discussion_r5184218",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/73",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5184218"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/73#discussion_r5184218"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/73"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5246695",
        "pull_request_review_id": null,
        "id": 5246695,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY2OTU=",
        "diff_hunk": "@@ -0,0 +1,113 @@\n+package raft\n+\n+import (\n+\t\"bytes\"\n+\t\"encoding/binary\"\n+\t\"io\"\n+)\n+",
        "path": "append_entries_request.go",
        "position": 8,
        "original_position": 8,
        "commit_id": "e3b06c530ac94a815088777cef11c96d809488ca",
        "original_commit_id": "e3b06c530ac94a815088777cef11c96d809488ca",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "//      ---------------------------------------------------------------------------------------------------------------------------------\n//      |    uint32  | uint64 |    uint64    |    uint64    |      uint64       |     uint32             |   uint 32      |\n//       ---------------------------------------------------------------------------------------------------------------------------------\n//      | version   | term   | prevIndex  | prevTerm  | commit index | leader-name size | entries size | \n//       ---------------------------------------------------------------------------------------------------------------------------------\n",
        "created_at": "2013-07-17T16:31:51Z",
        "updated_at": "2013-07-17T16:31:51Z",
        "html_url": "https://github.com/goraft/raft/pull/77#discussion_r5246695",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/77",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5246695"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/77#discussion_r5246695"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/77"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5246704",
        "pull_request_review_id": null,
        "id": 5246704,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY3MDQ=",
        "diff_hunk": "@@ -0,0 +1,113 @@\n+package raft\n+\n+import (\n+\t\"bytes\"\n+\t\"encoding/binary\"\n+\t\"io\"\n+)\n+",
        "path": "append_entries_request.go",
        "position": 8,
        "original_position": 8,
        "commit_id": "e3b06c530ac94a815088777cef11c96d809488ca",
        "original_commit_id": "e3b06c530ac94a815088777cef11c96d809488ca",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Format is changed...\n",
        "created_at": "2013-07-17T16:32:19Z",
        "updated_at": "2013-07-17T16:32:19Z",
        "html_url": "https://github.com/goraft/raft/pull/77#discussion_r5246704",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/77",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5246704"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/77#discussion_r5246704"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/77"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5246744",
        "pull_request_review_id": null,
        "id": 5246744,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY3NDQ=",
        "diff_hunk": "@@ -0,0 +1,113 @@\n+package raft\n+\n+import (\n+\t\"bytes\"\n+\t\"encoding/binary\"\n+\t\"io\"\n+)\n+",
        "path": "append_entries_request.go",
        "position": 8,
        "original_position": 8,
        "commit_id": "e3b06c530ac94a815088777cef11c96d809488ca",
        "original_commit_id": "e3b06c530ac94a815088777cef11c96d809488ca",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Not sure I understand your comment. Do you want the format comment in the file?\n",
        "created_at": "2013-07-17T16:33:36Z",
        "updated_at": "2013-07-17T16:33:36Z",
        "html_url": "https://github.com/goraft/raft/pull/77#discussion_r5246744",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/77",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5246744"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/77#discussion_r5246744"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/77"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5282017",
        "pull_request_review_id": null,
        "id": 5282017,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIwMTc=",
        "diff_hunk": "@@ -221,19 +221,19 @@ func (l *Log) createEntry(term uint64, command Command) (*LogEntry, error) {\n \n // Retrieves an entry from the log. If the entry has been eliminated because\n // of a snapshot then nil is returned.\n-func (l *Log) getEntry(index uint64) *LogEntry {\n-\tl.mutex.Lock()\n-\tdefer l.mutex.Unlock()\n+func (l *Log) getLogEntry(index uint64) *LogEntry {\n+\tl.mutex.RLock()\n+\tdefer l.mutex.RUnlock()",
        "path": "log.go",
        "position": null,
        "original_position": 9,
        "commit_id": "6b6e167d3825207694b9536744a7eb0869399733",
        "original_commit_id": "dee43ecd60a23ed1210e962bd7312fde76789abf",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Can you change the function name back to `getEntry()`? It's already in the `Log` so it's redundant to say `getLogEntry()`.\n",
        "created_at": "2013-07-18T23:07:09Z",
        "updated_at": "2013-07-18T23:56:28Z",
        "html_url": "https://github.com/goraft/raft/pull/80#discussion_r5282017",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/80",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5282017"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/80#discussion_r5282017"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/80"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5282086",
        "pull_request_review_id": null,
        "id": 5282086,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIwODY=",
        "diff_hunk": "@@ -229,15 +229,28 @@ func (p *Peer) sendSnapshotRequest(req *SnapshotRequest) {\n \n \tdebugln(\"peer.snap.recv: \", p.name)\n \n-\t// If successful then update the previous log index.\n+\tvar SRResp *SnapshotRecoveryResponse",
        "path": "peer.go",
        "position": null,
        "original_position": 5,
        "commit_id": "6b6e167d3825207694b9536744a7eb0869399733",
        "original_commit_id": "dee43ecd60a23ed1210e962bd7312fde76789abf",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Can you change the name of this variable to `resp` for consistency?\n",
        "created_at": "2013-07-18T23:10:23Z",
        "updated_at": "2013-07-18T23:56:28Z",
        "html_url": "https://github.com/goraft/raft/pull/80#discussion_r5282086",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/80",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5282086"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/80#discussion_r5282086"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/80"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5282122",
        "pull_request_review_id": null,
        "id": 5282122,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIxMjI=",
        "diff_hunk": "@@ -229,15 +229,28 @@ func (p *Peer) sendSnapshotRequest(req *SnapshotRequest) {\n \n \tdebugln(\"peer.snap.recv: \", p.name)\n \n-\t// If successful then update the previous log index.\n+\tvar SRResp *SnapshotRecoveryResponse\n+\t// If successful, the peer should have been to snapshot state\n+\t// Send it the snapshot!\n \tif resp.Success {\n-\t\tp.setPrevLogIndex(req.LastIndex)\n+\t\treq := newSnapshotRecoveryRequest(p.server.name, p.server.lastSnapshot)\n+\t\tdebugln(\"peer.snap.recovery.send: \", p.name)\n+\t\tSRResp = p.server.Transporter().SendSnapshotRecoveryRequest(p.server, p, req)\n+\t\tif SRResp.Success {\n+\t\t\tp.prevLogIndex = req.LastIndex\n+\t\t} else {\n+\t\t\tdebugln(\"peer.snap.recovery.failed: \", p.name)\n+\t\t\treturn\n+\t\t}\n \t} else {\n \t\tdebugln(\"peer.snap.failed: \", p.name)\n+\t\treturn\n \t}\n \n+\tAEResp := p.convertSRRespToAEResp(SRResp)",
        "path": "peer.go",
        "position": null,
        "original_position": 24,
        "commit_id": "6b6e167d3825207694b9536744a7eb0869399733",
        "original_commit_id": "dee43ecd60a23ed1210e962bd7312fde76789abf",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu I think the separate function is overkill. You can just change this all to:\n\n``` go\np.server.send(&AppendEntriesResponse{Term:resp.Term, Success:resp.Success, append:(resp.Term == p.server.currentTerm)})\n```\n",
        "created_at": "2013-07-18T23:12:11Z",
        "updated_at": "2013-07-18T23:56:28Z",
        "html_url": "https://github.com/goraft/raft/pull/80#discussion_r5282122",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/80",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5282122"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/80#discussion_r5282122"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/80"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5282144",
        "pull_request_review_id": null,
        "id": 5282144,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIxNDQ=",
        "diff_hunk": "@@ -0,0 +1,9 @@\n+package protobuf;\n+\n+message ProtoSnapshotRecoveryRequest {\n+\trequired string  LeaderName=1;\n+\trequired uint64  LastIndex=2;\n+\trequired uint64  LastTerm=3;      \n+\trepeated string  Peers=4;      \n+\trequired bytes   State=5;\n+}",
        "path": "protobuf/snapshot_recovery_resquest.proto",
        "position": null,
        "original_position": 9,
        "commit_id": "6b6e167d3825207694b9536744a7eb0869399733",
        "original_commit_id": "dee43ecd60a23ed1210e962bd7312fde76789abf",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Can you fix the spelling of this file to `snapshot_recovery_request.proto`?\n",
        "created_at": "2013-07-18T23:13:09Z",
        "updated_at": "2013-07-18T23:56:28Z",
        "html_url": "https://github.com/goraft/raft/pull/80#discussion_r5282144",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/80",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5282144"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/80#discussion_r5282144"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/80"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5282158",
        "pull_request_review_id": null,
        "id": 5282158,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIxNTg=",
        "diff_hunk": "@@ -20,14 +20,16 @@ import (\n //------------------------------------------------------------------------------\n \n const (\n-\tStopped   = \"stopped\"\n-\tFollower  = \"follower\"\n-\tCandidate = \"candidate\"\n-\tLeader    = \"leader\"\n+\tStopped      = \"stopped\"\n+\tFollower     = \"follower\"\n+\tCandidate    = \"candidate\"\n+\tLeader       = \"leader\"\n+\tSnapshotting = \"snapshotting\"\n )\n \n const (\n-\tMaxLogEntriesPerRequest = 200\n+\tMaxLogEntriesPerRequest         = 200\n+\tNumberOfLogEntreisAfterSnapshot = 200",
        "path": "server.go",
        "position": null,
        "original_position": 18,
        "commit_id": "6b6e167d3825207694b9536744a7eb0869399733",
        "original_commit_id": "dee43ecd60a23ed1210e962bd7312fde76789abf",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Can you fix the spelling of this to `NumberOfLogEntriesAfterSnapshot`?\n",
        "created_at": "2013-07-18T23:13:47Z",
        "updated_at": "2013-07-18T23:56:28Z",
        "html_url": "https://github.com/goraft/raft/pull/80#discussion_r5282158",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/80",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5282158"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/80#discussion_r5282158"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/80"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5282188",
        "pull_request_review_id": null,
        "id": 5282188,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIxODg=",
        "diff_hunk": "@@ -221,19 +221,19 @@ func (l *Log) createEntry(term uint64, command Command) (*LogEntry, error) {\n \n // Retrieves an entry from the log. If the entry has been eliminated because\n // of a snapshot then nil is returned.\n-func (l *Log) getEntry(index uint64) *LogEntry {\n-\tl.mutex.Lock()\n-\tdefer l.mutex.Unlock()\n+func (l *Log) getLogEntry(index uint64) *LogEntry {\n+\tl.mutex.RLock()\n+\tdefer l.mutex.RUnlock()",
        "path": "log.go",
        "position": null,
        "original_position": 9,
        "commit_id": "6b6e167d3825207694b9536744a7eb0869399733",
        "original_commit_id": "dee43ecd60a23ed1210e962bd7312fde76789abf",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "OK\n",
        "created_at": "2013-07-18T23:15:15Z",
        "updated_at": "2013-07-18T23:56:28Z",
        "html_url": "https://github.com/goraft/raft/pull/80#discussion_r5282188",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/80",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5282188"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/80#discussion_r5282188"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/80"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5282210",
        "pull_request_review_id": null,
        "id": 5282210,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIyMTA=",
        "diff_hunk": "@@ -0,0 +1,9 @@\n+package protobuf;\n+\n+message ProtoSnapshotRecoveryRequest {\n+\trequired string  LeaderName=1;\n+\trequired uint64  LastIndex=2;\n+\trequired uint64  LastTerm=3;      \n+\trepeated string  Peers=4;      \n+\trequired bytes   State=5;\n+}",
        "path": "protobuf/snapshot_recovery_resquest.proto",
        "position": null,
        "original_position": 9,
        "commit_id": "6b6e167d3825207694b9536744a7eb0869399733",
        "original_commit_id": "dee43ecd60a23ed1210e962bd7312fde76789abf",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "um... sorry for the spelling.\n",
        "created_at": "2013-07-18T23:16:21Z",
        "updated_at": "2013-07-18T23:56:28Z",
        "html_url": "https://github.com/goraft/raft/pull/80#discussion_r5282210",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/80",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5282210"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/80#discussion_r5282210"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/80"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5282214",
        "pull_request_review_id": null,
        "id": 5282214,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIyMTQ=",
        "diff_hunk": "@@ -952,14 +996,44 @@ func (s *Server) SnapshotPath(lastIndex uint64, lastTerm uint64) string {\n \treturn path.Join(s.path, \"snapshot\", fmt.Sprintf(\"%v_%v.ss\", lastTerm, lastIndex))\n }\n \n-func (s *Server) SnapshotRecovery(req *SnapshotRequest) (*SnapshotResponse, error) {\n-\t//\n-\ts.mutex.Lock()\n-\tdefer s.mutex.Unlock()\n+func (s *Server) SnapshotRequest(req *SnapshotRequest) *SnapshotResponse {\n+\tret, _ := s.send(req)\n+\tresp, _ := ret.(*SnapshotResponse)\n+\treturn resp\n+}",
        "path": "server.go",
        "position": null,
        "original_position": 155,
        "commit_id": "6b6e167d3825207694b9536744a7eb0869399733",
        "original_commit_id": "dee43ecd60a23ed1210e962bd7312fde76789abf",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Can you change this function to a verb form? For example, `RequestSnapshot()`?\n",
        "created_at": "2013-07-18T23:16:42Z",
        "updated_at": "2013-07-18T23:56:28Z",
        "html_url": "https://github.com/goraft/raft/pull/80#discussion_r5282214",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/80",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5282214"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/80#discussion_r5282214"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/80"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5282244",
        "pull_request_review_id": null,
        "id": 5282244,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIyNDQ=",
        "diff_hunk": "@@ -952,14 +996,44 @@ func (s *Server) SnapshotPath(lastIndex uint64, lastTerm uint64) string {\n \treturn path.Join(s.path, \"snapshot\", fmt.Sprintf(\"%v_%v.ss\", lastTerm, lastIndex))\n }\n \n-func (s *Server) SnapshotRecovery(req *SnapshotRequest) (*SnapshotResponse, error) {\n-\t//\n-\ts.mutex.Lock()\n-\tdefer s.mutex.Unlock()\n+func (s *Server) SnapshotRequest(req *SnapshotRequest) *SnapshotResponse {\n+\tret, _ := s.send(req)\n+\tresp, _ := ret.(*SnapshotResponse)\n+\treturn resp\n+}",
        "path": "server.go",
        "position": null,
        "original_position": 155,
        "commit_id": "6b6e167d3825207694b9536744a7eb0869399733",
        "original_commit_id": "dee43ecd60a23ed1210e962bd7312fde76789abf",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "OK\n",
        "created_at": "2013-07-18T23:18:15Z",
        "updated_at": "2013-07-18T23:56:28Z",
        "html_url": "https://github.com/goraft/raft/pull/80#discussion_r5282244",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/80",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5282244"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/80#discussion_r5282244"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/80"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5282543",
        "pull_request_review_id": null,
        "id": 5282543,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI1NDM=",
        "diff_hunk": "@@ -229,15 +229,28 @@ func (p *Peer) sendSnapshotRequest(req *SnapshotRequest) {\n \n \tdebugln(\"peer.snap.recv: \", p.name)\n \n-\t// If successful then update the previous log index.\n+\tvar SRResp *SnapshotRecoveryResponse",
        "path": "peer.go",
        "position": null,
        "original_position": 5,
        "commit_id": "6b6e167d3825207694b9536744a7eb0869399733",
        "original_commit_id": "dee43ecd60a23ed1210e962bd7312fde76789abf",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "There is another resp var in this func\n",
        "created_at": "2013-07-18T23:35:01Z",
        "updated_at": "2013-07-18T23:56:28Z",
        "html_url": "https://github.com/goraft/raft/pull/80#discussion_r5282543",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/80",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5282543"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/80#discussion_r5282543"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/80"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5282551",
        "pull_request_review_id": null,
        "id": 5282551,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI1NTE=",
        "diff_hunk": "@@ -229,15 +229,28 @@ func (p *Peer) sendSnapshotRequest(req *SnapshotRequest) {\n \n \tdebugln(\"peer.snap.recv: \", p.name)\n \n-\t// If successful then update the previous log index.\n+\tvar SRResp *SnapshotRecoveryResponse\n+\t// If successful, the peer should have been to snapshot state\n+\t// Send it the snapshot!\n \tif resp.Success {\n-\t\tp.setPrevLogIndex(req.LastIndex)\n+\t\treq := newSnapshotRecoveryRequest(p.server.name, p.server.lastSnapshot)\n+\t\tdebugln(\"peer.snap.recovery.send: \", p.name)\n+\t\tSRResp = p.server.Transporter().SendSnapshotRecoveryRequest(p.server, p, req)\n+\t\tif SRResp.Success {\n+\t\t\tp.prevLogIndex = req.LastIndex\n+\t\t} else {\n+\t\t\tdebugln(\"peer.snap.recovery.failed: \", p.name)\n+\t\t\treturn\n+\t\t}\n \t} else {\n \t\tdebugln(\"peer.snap.failed: \", p.name)\n+\t\treturn\n \t}\n \n+\tAEResp := p.convertSRRespToAEResp(SRResp)",
        "path": "peer.go",
        "position": null,
        "original_position": 24,
        "commit_id": "6b6e167d3825207694b9536744a7eb0869399733",
        "original_commit_id": "dee43ecd60a23ed1210e962bd7312fde76789abf",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "good point\n",
        "created_at": "2013-07-18T23:35:25Z",
        "updated_at": "2013-07-18T23:56:28Z",
        "html_url": "https://github.com/goraft/raft/pull/80#discussion_r5282551",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/80",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5282551"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/80#discussion_r5282551"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/80"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5331709",
        "pull_request_review_id": null,
        "id": 5331709,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE3MDk=",
        "diff_hunk": "@@ -139,61 +139,91 @@ func (l *Log) open(path string) error {\n \tdefer l.mutex.Unlock()\n \n \t// Read all the entries from the log if one exists.\n-\tvar lastIndex int = 0\n-\tif _, err := os.Stat(path); !os.IsNotExist(err) {\n-\t\t// Open the log file.\n-\t\tfile, err := os.Open(path)\n-\t\tif err != nil {\n-\t\t\treturn err\n-\t\t}\n-\t\tdefer file.Close()\n-\t\treader := bufio.NewReader(file)\n+\tvar readBytes int64 = 0",
        "path": "log.go",
        "position": null,
        "original_position": 13,
        "commit_id": "ee3550871185a28f1d90e7c4855f4faf49a72c32",
        "original_commit_id": "aaf304693ec68e7bad15c0e8519541871d79be15",
        "user": {
            "login": "philips",
            "id": 33544,
            "node_id": "MDQ6VXNlcjMzNTQ0",
            "avatar_url": "https://avatars1.githubusercontent.com/u/33544?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/philips",
            "html_url": "https://github.com/philips",
            "followers_url": "https://api.github.com/users/philips/followers",
            "following_url": "https://api.github.com/users/philips/following{/other_user}",
            "gists_url": "https://api.github.com/users/philips/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/philips/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/philips/subscriptions",
            "organizations_url": "https://api.github.com/users/philips/orgs",
            "repos_url": "https://api.github.com/users/philips/repos",
            "events_url": "https://api.github.com/users/philips/events{/privacy}",
            "received_events_url": "https://api.github.com/users/philips/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "you don't need to initialize variables to zero in go\n",
        "created_at": "2013-07-22T21:43:37Z",
        "updated_at": "2013-07-23T22:31:36Z",
        "html_url": "https://github.com/goraft/raft/pull/81#discussion_r5331709",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/81",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5331709"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/81#discussion_r5331709"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/81"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5331971",
        "pull_request_review_id": null,
        "id": 5331971,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE5NzE=",
        "diff_hunk": "@@ -139,61 +139,91 @@ func (l *Log) open(path string) error {\n \tdefer l.mutex.Unlock()\n \n \t// Read all the entries from the log if one exists.\n-\tvar lastIndex int = 0\n-\tif _, err := os.Stat(path); !os.IsNotExist(err) {\n-\t\t// Open the log file.\n-\t\tfile, err := os.Open(path)\n-\t\tif err != nil {\n-\t\t\treturn err\n-\t\t}\n-\t\tdefer file.Close()\n-\t\treader := bufio.NewReader(file)\n+\tvar readBytes int64 = 0",
        "path": "log.go",
        "position": null,
        "original_position": 13,
        "commit_id": "ee3550871185a28f1d90e7c4855f4faf49a72c32",
        "original_commit_id": "aaf304693ec68e7bad15c0e8519541871d79be15",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "right. should not bring the habits in C to go. :)\n",
        "created_at": "2013-07-22T21:53:34Z",
        "updated_at": "2013-07-23T22:31:36Z",
        "html_url": "https://github.com/goraft/raft/pull/81#discussion_r5331971",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/81",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5331971"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/81#discussion_r5331971"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/81"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5350762",
        "pull_request_review_id": null,
        "id": 5350762,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTA3NjI=",
        "diff_hunk": "@@ -10,7 +10,7 @@ type NOPCommand struct {\n \n // The name of the NOP command in the log\n func (c NOPCommand) CommandName() string {\n-\treturn \"nop\"\n+\treturn \"nop\\n\"",
        "path": "nop_command.go",
        "position": null,
        "original_position": 5,
        "commit_id": "ee3550871185a28f1d90e7c4855f4faf49a72c32",
        "original_commit_id": "f6d92c9d4219cae586650f542d3732f87bdc68f5",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Why is there a newline?\n",
        "created_at": "2013-07-23T17:20:27Z",
        "updated_at": "2013-07-23T22:31:36Z",
        "html_url": "https://github.com/goraft/raft/pull/81#discussion_r5350762",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/81",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5350762"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/81#discussion_r5350762"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/81"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5350802",
        "pull_request_review_id": null,
        "id": 5350802,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTA4MDI=",
        "diff_hunk": "@@ -139,61 +139,91 @@ func (l *Log) open(path string) error {\n \tdefer l.mutex.Unlock()\n \n \t// Read all the entries from the log if one exists.\n-\tvar lastIndex int = 0\n-\tif _, err := os.Stat(path); !os.IsNotExist(err) {\n-\t\t// Open the log file.\n-\t\tfile, err := os.Open(path)\n-\t\tif err != nil {\n-\t\t\treturn err\n-\t\t}\n-\t\tdefer file.Close()\n-\t\treader := bufio.NewReader(file)\n+\tvar readBytes int64\n+\n+\tvar err error\n+\tdebugln(\"log.open.open \", path)\n+\t// open log file\n+\tl.file, err = os.OpenFile(path, os.O_RDWR, 0600)\n+\tl.path = path\n \n-\t\t// Read the file and decode entries.\n-\t\tfor {\n-\t\t\tif _, err := reader.Peek(1); err == io.EOF {\n-\t\t\t\tbreak\n+\tif err != nil {\n+\t\t// if the log file does not exist before\n+\t\t// we create the log file and set commitIndex to 0\n+\t\tif os.IsNotExist(err) {\n+\t\t\tl.file, err = os.OpenFile(path, os.O_WRONLY|os.O_CREATE, 0600)\n+\t\t\tdebugln(\"log.open.create \", path)\n+\t\t\tif err != nil {\n+\t\t\t\treturn err\n \t\t\t}\n+\t\t\t// set commitIndex to 0\n+\t\t\t_, err = fmt.Fprintf(l.file, \"%8x\\n\", 0)\n \n-\t\t\t// Instantiate log entry and decode into it.\n-\t\t\tentry, _ := newLogEntry(l, 0, 0, nil)\n-\t\t\tn, err := entry.decode(reader)\n \t\t\tif err != nil {\n-\t\t\t\tfile.Close()\n-\t\t\t\tif err = os.Truncate(path, int64(lastIndex)); err != nil {\n-\t\t\t\t\treturn fmt.Errorf(\"raft.Log: Unable to recover: %v\", err)\n-\t\t\t\t}\n-\t\t\t\tbreak\n+\t\t\t\tl.file.Close()\n \t\t\t}\n+\t\t\treturn err\n+\t\t}\n+\t\treturn err\n+\t}\n+\tdebugln(\"log.open.exist \", path)\n+\n+\t// if the log file exists\n+\t// we read out the commitIndex and apply all the commands\n+\t// seek to the end of log file\n+\tvar commitIndex uint64\n+\t_, err = fmt.Fscanf(l.file, \"%8x\\n\", &commitIndex)\n+\tdebugln(\"log.open.commitIndex is \", commitIndex)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\n+\treader := bufio.NewReader(l.file)\n+\n+\t// Read the file and decode entries.\n+\tfor {\n+\t\tif _, err := reader.Peek(1); err == io.EOF {\n+\t\t\tbreak\n+\t\t}\n+\n+\t\t// Instantiate log entry and decode into it.\n+\t\tentry, _ := newLogEntry(l, 0, 0, nil)\n+\t\tn, err := entry.decode(reader)\n+\t\tif err != nil {\n+\t\t\tif err = os.Truncate(path, readBytes); err != nil {\n+\t\t\t\treturn fmt.Errorf(\"raft.Log: Unable to recover: %v\", err)\n+\t\t\t}\n+\t\t\tbreak\n+\t\t}\n+\n+\t\t// Append entry.\n+\t\tl.entries = append(l.entries, entry)\n+\t\tdebugln(\"open.log.append log index \", entry.Index)\n+\n+\t\t// if the entry index less than the known commitIndex\n+\t\t// commit it\n+\t\tif entry.Index < commitIndex {\n \n-\t\t\t// Append entry.\n-\t\t\tl.entries = append(l.entries, entry)\n \t\t\tl.commitIndex = entry.Index\n \n \t\t\t// Lookup and decode command.\n \t\t\tcommand, err := newCommand(entry.CommandName, entry.Command)\n \t\t\tif err != nil {\n-\t\t\t\tfile.Close()\n+\t\t\t\tl.file.Close()\n \t\t\t\treturn err\n \t\t\t}\n \n \t\t\t// Apply the command.\n-\t\t\treturnValue, err := l.ApplyFunc(command)\n-\t\t\tl.results = append(l.results, &logResult{returnValue: returnValue, err: err})\n+\t\t\t_, err = l.ApplyFunc(command)\n \n-\t\t\tlastIndex += n\n-\t\t}\n-\n-\t\tfile.Close()\n-\t}\n+\t\t\t// Do we really want the result?\n+\t\t\t// l.results = append(l.results, &logResult{returnValue: returnValue, err: err})",
        "path": "log.go",
        "position": null,
        "original_position": 113,
        "commit_id": "ee3550871185a28f1d90e7c4855f4faf49a72c32",
        "original_commit_id": "f6d92c9d4219cae586650f542d3732f87bdc68f5",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu You can remove this. We shouldn't need this during recovery.\n",
        "created_at": "2013-07-23T17:22:01Z",
        "updated_at": "2013-07-23T22:31:36Z",
        "html_url": "https://github.com/goraft/raft/pull/81#discussion_r5350802",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/81",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5350802"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/81#discussion_r5350802"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/81"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5350890",
        "pull_request_review_id": null,
        "id": 5350890,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTA4OTA=",
        "diff_hunk": "@@ -18,6 +18,7 @@ type ProtoLogEntry struct {\n \tTerm             *uint64 `protobuf:\"varint,2,req\" json:\"Term,omitempty\"`\n \tCommandName      *string `protobuf:\"bytes,3,req\" json:\"CommandName,omitempty\"`\n \tCommand          []byte  `protobuf:\"bytes,4,opt\" json:\"Command,omitempty\"`\n+\tPosition         *int64  `protobuf:\"varint,5,req\" json:\"Position,omitempty\"`",
        "path": "protobuf/log_entry.pb.go",
        "position": null,
        "original_position": 4,
        "commit_id": "ee3550871185a28f1d90e7c4855f4faf49a72c32",
        "original_commit_id": "f6d92c9d4219cae586650f542d3732f87bdc68f5",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Why is the file byte offset stored in the `LogEntry` protobuf? I would think we only need this in-memory.\n",
        "created_at": "2013-07-23T17:25:37Z",
        "updated_at": "2013-07-23T22:31:36Z",
        "html_url": "https://github.com/goraft/raft/pull/81#discussion_r5350890",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/81",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5350890"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/81#discussion_r5350890"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/81"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5351444",
        "pull_request_review_id": null,
        "id": 5351444,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE0NDQ=",
        "diff_hunk": "@@ -10,7 +10,7 @@ type NOPCommand struct {\n \n // The name of the NOP command in the log\n func (c NOPCommand) CommandName() string {\n-\treturn \"nop\"\n+\treturn \"nop\\n\"",
        "path": "nop_command.go",
        "position": null,
        "original_position": 5,
        "commit_id": "ee3550871185a28f1d90e7c4855f4faf49a72c32",
        "original_commit_id": "f6d92c9d4219cae586650f542d3732f87bdc68f5",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "this will make the log clear if you want to cat it.\n",
        "created_at": "2013-07-23T17:45:35Z",
        "updated_at": "2013-07-23T22:31:36Z",
        "html_url": "https://github.com/goraft/raft/pull/81#discussion_r5351444",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/81",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5351444"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/81#discussion_r5351444"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/81"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5351484",
        "pull_request_review_id": null,
        "id": 5351484,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE0ODQ=",
        "diff_hunk": "@@ -18,6 +18,7 @@ type ProtoLogEntry struct {\n \tTerm             *uint64 `protobuf:\"varint,2,req\" json:\"Term,omitempty\"`\n \tCommandName      *string `protobuf:\"bytes,3,req\" json:\"CommandName,omitempty\"`\n \tCommand          []byte  `protobuf:\"bytes,4,opt\" json:\"Command,omitempty\"`\n+\tPosition         *int64  `protobuf:\"varint,5,req\" json:\"Position,omitempty\"`",
        "path": "protobuf/log_entry.pb.go",
        "position": null,
        "original_position": 4,
        "commit_id": "ee3550871185a28f1d90e7c4855f4faf49a72c32",
        "original_commit_id": "f6d92c9d4219cae586650f542d3732f87bdc68f5",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "When you recover the log, you still need the position.\nI do not think write more 8bytes will be harm. \n",
        "created_at": "2013-07-23T17:46:53Z",
        "updated_at": "2013-07-23T22:31:36Z",
        "html_url": "https://github.com/goraft/raft/pull/81#discussion_r5351484",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/81",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5351484"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/81#discussion_r5351484"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/81"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5351519",
        "pull_request_review_id": null,
        "id": 5351519,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE1MTk=",
        "diff_hunk": "@@ -10,7 +10,7 @@ type NOPCommand struct {\n \n // The name of the NOP command in the log\n func (c NOPCommand) CommandName() string {\n-\treturn \"nop\"\n+\treturn \"nop\\n\"",
        "path": "nop_command.go",
        "position": null,
        "original_position": 5,
        "commit_id": "ee3550871185a28f1d90e7c4855f4faf49a72c32",
        "original_commit_id": "f6d92c9d4219cae586650f542d3732f87bdc68f5",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu It's a binary log now so I don't think `cat`ing it is a good option. We'll need to build a separate utility (`raft-cat`, `raft-tail`, etc) that converts the log to something readable.\n",
        "created_at": "2013-07-23T17:48:04Z",
        "updated_at": "2013-07-23T22:31:36Z",
        "html_url": "https://github.com/goraft/raft/pull/81#discussion_r5351519",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/81",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5351519"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/81#discussion_r5351519"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/81"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5351568",
        "pull_request_review_id": null,
        "id": 5351568,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE1Njg=",
        "diff_hunk": "@@ -18,6 +18,7 @@ type ProtoLogEntry struct {\n \tTerm             *uint64 `protobuf:\"varint,2,req\" json:\"Term,omitempty\"`\n \tCommandName      *string `protobuf:\"bytes,3,req\" json:\"CommandName,omitempty\"`\n \tCommand          []byte  `protobuf:\"bytes,4,opt\" json:\"Command,omitempty\"`\n+\tPosition         *int64  `protobuf:\"varint,5,req\" json:\"Position,omitempty\"`",
        "path": "protobuf/log_entry.pb.go",
        "position": null,
        "original_position": 4,
        "commit_id": "ee3550871185a28f1d90e7c4855f4faf49a72c32",
        "original_commit_id": "f6d92c9d4219cae586650f542d3732f87bdc68f5",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu You can figure out the log entry position as you're reading it from the log. If we don't need the position in protobufs then I'd rather not have it.\n",
        "created_at": "2013-07-23T17:50:04Z",
        "updated_at": "2013-07-23T22:31:36Z",
        "html_url": "https://github.com/goraft/raft/pull/81#discussion_r5351568",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/81",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5351568"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/81#discussion_r5351568"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/81"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5352255",
        "pull_request_review_id": null,
        "id": 5352255,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTIyNTU=",
        "diff_hunk": "@@ -10,7 +10,7 @@ type NOPCommand struct {\n \n // The name of the NOP command in the log\n func (c NOPCommand) CommandName() string {\n-\treturn \"nop\"\n+\treturn \"nop\\n\"",
        "path": "nop_command.go",
        "position": null,
        "original_position": 5,
        "commit_id": "ee3550871185a28f1d90e7c4855f4faf49a72c32",
        "original_commit_id": "f6d92c9d4219cae586650f542d3732f87bdc68f5",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "hrm... since the command is json encoding. \ni just use this for debugging. we can remove this.\n",
        "created_at": "2013-07-23T18:13:38Z",
        "updated_at": "2013-07-23T22:31:36Z",
        "html_url": "https://github.com/goraft/raft/pull/81#discussion_r5352255",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/81",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5352255"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/81#discussion_r5352255"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/81"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5379385",
        "pull_request_review_id": null,
        "id": 5379385,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkzODU=",
        "diff_hunk": "@@ -508,6 +516,38 @@ func (l *Log) appendEntry(entry *LogEntry) error {\n \treturn nil\n }\n \n+// appendEntry with Buffered io\n+func (l *Log) appendEntryWithBuffer(entry *LogEntry, w io.Writer, startPosition int64) (int64, error) {",
        "path": "log.go",
        "position": null,
        "original_position": 27,
        "commit_id": "085da0973e7486a0b6a9e0872bc249e539bac0c8",
        "original_commit_id": "95efaa7a0becd83f88b97d8a706e5cab34aae59c",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Can you rename this to `writeEntry()`? There's nothing about the function that makes it buffer-specific. Also, you could just set the `Position` on the entry from `appendEntries()` since the `startPosition` doesn't do anything inside this function beside assign it to `Position`.\n",
        "created_at": "2013-07-24T18:21:44Z",
        "updated_at": "2013-07-24T18:43:40Z",
        "html_url": "https://github.com/goraft/raft/pull/82#discussion_r5379385",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/82",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5379385"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/82#discussion_r5379385"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/82"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5379449",
        "pull_request_review_id": null,
        "id": 5379449,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk0NDk=",
        "diff_hunk": "@@ -508,6 +516,38 @@ func (l *Log) appendEntry(entry *LogEntry) error {\n \treturn nil\n }\n \n+// appendEntry with Buffered io\n+func (l *Log) appendEntryWithBuffer(entry *LogEntry, w io.Writer, startPosition int64) (int64, error) {",
        "path": "log.go",
        "position": null,
        "original_position": 27,
        "commit_id": "085da0973e7486a0b6a9e0872bc249e539bac0c8",
        "original_commit_id": "95efaa7a0becd83f88b97d8a706e5cab34aae59c",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ok.\n",
        "created_at": "2013-07-24T18:23:54Z",
        "updated_at": "2013-07-24T18:43:40Z",
        "html_url": "https://github.com/goraft/raft/pull/82#discussion_r5379449",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/82",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5379449"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/82#discussion_r5379449"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/82"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5379474",
        "pull_request_review_id": null,
        "id": 5379474,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk0NzQ=",
        "diff_hunk": "@@ -508,6 +516,38 @@ func (l *Log) appendEntry(entry *LogEntry) error {\n \treturn nil\n }\n \n+// appendEntry with Buffered io\n+func (l *Log) appendEntryWithBuffer(entry *LogEntry, w io.Writer, startPosition int64) (int64, error) {\n+\tif l.file == nil {\n+\t\treturn -1, errors.New(\"raft.Log: Log is not open\")\n+\t}\n+\n+\t// Make sure the term and index are greater than the previous.\n+\tif len(l.entries) > 0 {\n+\t\tlastEntry := l.entries[len(l.entries)-1]\n+\t\tif entry.Term < lastEntry.Term {\n+\t\t\treturn -1, fmt.Errorf(\"raft.Log: Cannot append entry with earlier term (%x:%x <= %x:%x)\", entry.Term, entry.Index, lastEntry.Term, lastEntry.Index)\n+\t\t} else if entry.Term == lastEntry.Term && entry.Index <= lastEntry.Index {\n+\t\t\treturn -1, fmt.Errorf(\"raft.Log: Cannot append entry with earlier index in the same term (%x:%x <= %x:%x)\", entry.Term, entry.Index, lastEntry.Term, lastEntry.Index)\n+\t\t}\n+\t}\n+\n+\tentry.Position = startPosition\n+\n+\tvar size int\n+\tvar err error\n+\t// Write to storage.\n+\tif size, err = entry.encode(w); err != nil {\n+\t\treturn -1, err\n+\t}",
        "path": "log.go",
        "position": null,
        "original_position": 49,
        "commit_id": "085da0973e7486a0b6a9e0872bc249e539bac0c8",
        "original_commit_id": "95efaa7a0becd83f88b97d8a706e5cab34aae59c",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu You can write this easier as:\n\n``` go\nsize, err := entry.encode(w)\nif err != nil {\n    return -1, err\n}\n```\n\nThat way you don't need to use two lines to declare `size` and `err`.\n",
        "created_at": "2013-07-24T18:24:31Z",
        "updated_at": "2013-07-24T18:43:40Z",
        "html_url": "https://github.com/goraft/raft/pull/82#discussion_r5379474",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/82",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5379474"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/82#discussion_r5379474"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/82"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5379488",
        "pull_request_review_id": null,
        "id": 5379488,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk0ODg=",
        "diff_hunk": "@@ -508,6 +516,38 @@ func (l *Log) appendEntry(entry *LogEntry) error {\n \treturn nil\n }\n \n+// appendEntry with Buffered io\n+func (l *Log) appendEntryWithBuffer(entry *LogEntry, w io.Writer, startPosition int64) (int64, error) {\n+\tif l.file == nil {\n+\t\treturn -1, errors.New(\"raft.Log: Log is not open\")\n+\t}\n+\n+\t// Make sure the term and index are greater than the previous.\n+\tif len(l.entries) > 0 {\n+\t\tlastEntry := l.entries[len(l.entries)-1]\n+\t\tif entry.Term < lastEntry.Term {\n+\t\t\treturn -1, fmt.Errorf(\"raft.Log: Cannot append entry with earlier term (%x:%x <= %x:%x)\", entry.Term, entry.Index, lastEntry.Term, lastEntry.Index)\n+\t\t} else if entry.Term == lastEntry.Term && entry.Index <= lastEntry.Index {\n+\t\t\treturn -1, fmt.Errorf(\"raft.Log: Cannot append entry with earlier index in the same term (%x:%x <= %x:%x)\", entry.Term, entry.Index, lastEntry.Term, lastEntry.Index)\n+\t\t}\n+\t}\n+\n+\tentry.Position = startPosition\n+\n+\tvar size int\n+\tvar err error\n+\t// Write to storage.\n+\tif size, err = entry.encode(w); err != nil {\n+\t\treturn -1, err\n+\t}",
        "path": "log.go",
        "position": null,
        "original_position": 49,
        "commit_id": "085da0973e7486a0b6a9e0872bc249e539bac0c8",
        "original_commit_id": "95efaa7a0becd83f88b97d8a706e5cab34aae59c",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "ok\n",
        "created_at": "2013-07-24T18:25:02Z",
        "updated_at": "2013-07-24T18:43:40Z",
        "html_url": "https://github.com/goraft/raft/pull/82#discussion_r5379488",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/82",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5379488"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/82#discussion_r5379488"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/82"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5412412",
        "pull_request_review_id": null,
        "id": 5412412,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI0MTI=",
        "diff_hunk": "@@ -65,6 +65,7 @@ type Server struct {\n \ttransporter Transporter\n \tcontext     interface{}\n \tcurrentTerm uint64\n+\tpromotable  bool",
        "path": "server.go",
        "position": null,
        "original_position": 4,
        "commit_id": "32f6bd69dc6007b873ae1a323058902691ceb9b5",
        "original_commit_id": "1485b56f82feca6faa6a1306597ec53d8b3f2f9a",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu The `promotable` property can be determined by other properties. Can you remove this property and add a function:\n\n``` go\nfunc (s *Server) promotable() bool {\n    return s.log.currentIndex() > 0;\n}\n```\n",
        "created_at": "2013-07-25T22:59:49Z",
        "updated_at": "2013-07-25T23:16:17Z",
        "html_url": "https://github.com/goraft/raft/pull/84#discussion_r5412412",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/84",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5412412"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/84#discussion_r5412412"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/84"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5412419",
        "pull_request_review_id": null,
        "id": 5412419,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI0MTk=",
        "diff_hunk": "@@ -335,6 +342,25 @@ func (s *Server) Initialize() error {\n \t// Update the term to the last term in the log.\n \t_, s.currentTerm = s.log.lastInfo()\n \n+\ts.setState(Follower)\n+\n+\t// If no log entries exist then\n+\t// 1. wait for AEs from another node\n+\t// 2. wait for self-join command\n+\t// to set itself promotable\n+\tif s.log.currentIndex() == 0 {\n+\t\ts.debugln(\"start as a new raft server\")\n+\t\ts.promotable = false\n+\n+\t\t// If log entries exist then allow promotion to candidate\n+\t\t// if no AEs received.\n+\t} else {\n+\t\ts.debugln(\"start from previous saved state\")\n+\t\ts.promotable = true\n+\t}",
        "path": "server.go",
        "position": null,
        "original_position": 47,
        "commit_id": "32f6bd69dc6007b873ae1a323058902691ceb9b5",
        "original_commit_id": "1485b56f82feca6faa6a1306597ec53d8b3f2f9a",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu You can remove this if/else if you change `promotable` to a function.\n",
        "created_at": "2013-07-25T23:00:15Z",
        "updated_at": "2013-07-25T23:16:17Z",
        "html_url": "https://github.com/goraft/raft/pull/84#discussion_r5412419",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/84",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5412419"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/84#discussion_r5412419"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/84"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5412458",
        "pull_request_review_id": null,
        "id": 5412458,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI0NTg=",
        "diff_hunk": "@@ -504,13 +515,28 @@ func (s *Server) followerLoop() {\n \n \tfor {\n \t\tvar err error\n-\t\tvar update bool\n+\t\tupdate := false\n \t\tselect {\n \t\tcase e := <-s.c:\n \t\t\tif e.target == &stopValue {\n \t\t\t\ts.setState(Stopped)\n-\t\t\t} else if _, ok := e.target.(Command); ok {\n-\t\t\t\terr = NotLeaderError\n+\t\t\t} else if command, ok := e.target.(Command); ok {\n+\n+\t\t\t\tif command, ok := command.(*JoinCommand); ok {\n+\n+\t\t\t\t\t//If no log entries exist and a self-join command is issued\n+\t\t\t\t\t//then immediately become leader and commit entry.\n+\t\t\t\t\tif s.log.currentIndex() == 0 && command.Name == s.Name() {\n+\t\t\t\t\t\ts.debugln(\"selfjoin and promote to leader\")\n+\t\t\t\t\t\ts.promotable = true\n+\t\t\t\t\t\ts.setState(Leader)\n+\t\t\t\t\t\ts.processCommand(command, e)",
        "path": "server.go",
        "position": null,
        "original_position": 98,
        "commit_id": "32f6bd69dc6007b873ae1a323058902691ceb9b5",
        "original_commit_id": "1485b56f82feca6faa6a1306597ec53d8b3f2f9a",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu I'm a little worried about executing leader state outside of the `leaderLoop()` but I think this is fine right now.\n",
        "created_at": "2013-07-25T23:02:51Z",
        "updated_at": "2013-07-25T23:16:17Z",
        "html_url": "https://github.com/goraft/raft/pull/84#discussion_r5412458",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/84",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5412458"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/84#discussion_r5412458"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/84"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5412465",
        "pull_request_review_id": null,
        "id": 5412465,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI0NjU=",
        "diff_hunk": "@@ -796,6 +828,11 @@ func (s *Server) processAppendEntriesRequest(req *AppendEntriesRequest) (*Append\n \t\treturn newAppendEntriesResponse(s.currentTerm, false, s.log.currentIndex(), s.log.CommitIndex()), true\n \t}\n \n+\t// once the server appended and commited all the log entries from the leader\n+\t// it is synced with the cluster\n+\t// the follower can promote to candidate if needed\n+\ts.promotable = true\n+",
        "path": "server.go",
        "position": null,
        "original_position": 131,
        "commit_id": "32f6bd69dc6007b873ae1a323058902691ceb9b5",
        "original_commit_id": "1485b56f82feca6faa6a1306597ec53d8b3f2f9a",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu You can remove this if you change `promotable` to a function.\n",
        "created_at": "2013-07-25T23:03:10Z",
        "updated_at": "2013-07-25T23:16:17Z",
        "html_url": "https://github.com/goraft/raft/pull/84#discussion_r5412465",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/84",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5412465"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/84#discussion_r5412465"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/84"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5412484",
        "pull_request_review_id": null,
        "id": 5412484,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI0ODQ=",
        "diff_hunk": "@@ -65,6 +65,7 @@ type Server struct {\n \ttransporter Transporter\n \tcontext     interface{}\n \tcurrentTerm uint64\n+\tpromotable  bool",
        "path": "server.go",
        "position": null,
        "original_position": 4,
        "commit_id": "32f6bd69dc6007b873ae1a323058902691ceb9b5",
        "original_commit_id": "1485b56f82feca6faa6a1306597ec53d8b3f2f9a",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "We can do this. \nAfter you go through the codes, I will make changes.\n",
        "created_at": "2013-07-25T23:04:15Z",
        "updated_at": "2013-07-25T23:16:17Z",
        "html_url": "https://github.com/goraft/raft/pull/84#discussion_r5412484",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/84",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5412484"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/84#discussion_r5412484"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/84"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5435665",
        "pull_request_review_id": null,
        "id": 5435665,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU2NjU=",
        "diff_hunk": "@@ -1,17 +1,27 @@\n package raft\n \n+// Leave command interface\n+type DefaultCommand interface {",
        "path": "leave_command.go",
        "position": null,
        "original_position": 4,
        "commit_id": "bad6dd50e2525de486dfd6565a415954dae0db21",
        "original_commit_id": "ecd1b05db6d58731aec72d65d44c20ba6308c53a",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Can you change this to `DefaultLeaveCommand`?\n",
        "created_at": "2013-07-26T23:44:57Z",
        "updated_at": "2013-07-26T23:48:03Z",
        "html_url": "https://github.com/goraft/raft/pull/86#discussion_r5435665",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/86",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5435665"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/86#discussion_r5435665"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/86"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5435672",
        "pull_request_review_id": null,
        "id": 5435672,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU2NzI=",
        "diff_hunk": "@@ -1,17 +1,27 @@\n package raft\n \n+// Leave command interface\n+type DefaultCommand interface {",
        "path": "leave_command.go",
        "position": null,
        "original_position": 4,
        "commit_id": "bad6dd50e2525de486dfd6565a415954dae0db21",
        "original_commit_id": "ecd1b05db6d58731aec72d65d44c20ba6308c53a",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Sorry, I mean `LeaveCommand`.\n",
        "created_at": "2013-07-26T23:45:26Z",
        "updated_at": "2013-07-26T23:48:03Z",
        "html_url": "https://github.com/goraft/raft/pull/86#discussion_r5435672",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/86",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5435672"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/86#discussion_r5435672"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/86"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5441053",
        "pull_request_review_id": null,
        "id": 5441053,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEwNTM=",
        "diff_hunk": "@@ -29,6 +29,14 @@ func init() {\n //\n //------------------------------------------------------------------------------\n \n+func LogLevel() int {\n+\treturn logLevel\n+}\n+\n+func SetLogLevel(level int) {\n+\tlogLevel = logLevel",
        "path": "debug.go",
        "position": null,
        "original_position": 23,
        "commit_id": "1f39a46046f717bc9ef7bd7f5b1c600bba3a70ac",
        "original_commit_id": "4771080625fce9be231c9a96967e5571b734f679",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu This isn't going to do much.\n",
        "created_at": "2013-07-28T21:30:07Z",
        "updated_at": "2013-07-28T22:31:36Z",
        "html_url": "https://github.com/goraft/raft/pull/87#discussion_r5441053",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/87",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5441053"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/87#discussion_r5441053"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/87"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5583916",
        "pull_request_review_id": null,
        "id": 5583916,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODM5MTY=",
        "diff_hunk": "@@ -961,10 +969,13 @@ func (s *Server) AddPeer(name string) error {\n \n \t// Only add the peer if it doesn't have the same name.\n \tif s.name != name {\n-\t\t_, err := fmt.Fprintln(s.confFile, name)\n-\t\ts.debugln(\"server.peer.conf.write: \", name)\n-\t\tif err != nil {\n-\t\t\treturn err\n+\t\t// when loading snapshot s.confFile should be nil\n+\t\tif s.confFile != nil {\n+\t\t\t_, err := fmt.Fprintln(s.confFile, name)\n+\t\t\ts.debugln(\"server.peer.conf.write: \", name)\n+\t\t\tif err != nil {\n+\t\t\t\treturn err\n+\t\t\t}",
        "path": "server.go",
        "position": 58,
        "original_position": 58,
        "commit_id": "31db0ff136372cce7643e04d58bb8cae24596deb",
        "original_commit_id": "31db0ff136372cce7643e04d58bb8cae24596deb",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Is this appending to the file or overwriting it? Also, we can need to change the cluster configuration file to be JSON instead of just printing out names on each line. We'll want to save other cluster configuration data in there.\n",
        "created_at": "2013-08-05T17:07:56Z",
        "updated_at": "2013-08-05T17:07:56Z",
        "html_url": "https://github.com/goraft/raft/pull/96#discussion_r5583916",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/96",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5583916"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/96#discussion_r5583916"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/96"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5583962",
        "pull_request_review_id": null,
        "id": 5583962,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODM5NjI=",
        "diff_hunk": "@@ -961,10 +969,13 @@ func (s *Server) AddPeer(name string) error {\n \n \t// Only add the peer if it doesn't have the same name.\n \tif s.name != name {\n-\t\t_, err := fmt.Fprintln(s.confFile, name)\n-\t\ts.debugln(\"server.peer.conf.write: \", name)\n-\t\tif err != nil {\n-\t\t\treturn err\n+\t\t// when loading snapshot s.confFile should be nil\n+\t\tif s.confFile != nil {\n+\t\t\t_, err := fmt.Fprintln(s.confFile, name)\n+\t\t\ts.debugln(\"server.peer.conf.write: \", name)\n+\t\t\tif err != nil {\n+\t\t\t\treturn err\n+\t\t\t}",
        "path": "server.go",
        "position": 58,
        "original_position": 58,
        "commit_id": "31db0ff136372cce7643e04d58bb8cae24596deb",
        "original_commit_id": "31db0ff136372cce7643e04d58bb8cae24596deb",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@benbjohnson  appending. each time we start we will first read out all conf. Then remove the conf file. Add peer again will help to recovery and reduce redundant logic and codes. \n",
        "created_at": "2013-08-05T17:10:07Z",
        "updated_at": "2013-08-05T17:12:43Z",
        "html_url": "https://github.com/goraft/raft/pull/96#discussion_r5583962",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/96",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5583962"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/96#discussion_r5583962"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/96"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5584315",
        "pull_request_review_id": null,
        "id": 5584315,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODQzMTU=",
        "diff_hunk": "@@ -961,10 +969,13 @@ func (s *Server) AddPeer(name string) error {\n \n \t// Only add the peer if it doesn't have the same name.\n \tif s.name != name {\n-\t\t_, err := fmt.Fprintln(s.confFile, name)\n-\t\ts.debugln(\"server.peer.conf.write: \", name)\n-\t\tif err != nil {\n-\t\t\treturn err\n+\t\t// when loading snapshot s.confFile should be nil\n+\t\tif s.confFile != nil {\n+\t\t\t_, err := fmt.Fprintln(s.confFile, name)\n+\t\t\ts.debugln(\"server.peer.conf.write: \", name)\n+\t\t\tif err != nil {\n+\t\t\t\treturn err\n+\t\t\t}",
        "path": "server.go",
        "position": 58,
        "original_position": 58,
        "commit_id": "31db0ff136372cce7643e04d58bb8cae24596deb",
        "original_commit_id": "31db0ff136372cce7643e04d58bb8cae24596deb",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu I see it now. I'm fine to push this in now but it does need to be rewritten as an atomic read/write of the whole config and it'll need to be in JSON. Preferably in the format:\n\n```\n{\n  \"peers\":[\n    ...\n  ]\n}\n```\n\nThat way we can add other data to the cluster config (besides peers) if we ever need to. Down the line we should write to a temp file and then swap using `os.Rename()` so that we don't write a half-complete configuration.\n",
        "created_at": "2013-08-05T17:24:22Z",
        "updated_at": "2013-08-05T17:24:22Z",
        "html_url": "https://github.com/goraft/raft/pull/96#discussion_r5584315",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/96",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5584315"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/96#discussion_r5584315"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/96"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5584419",
        "pull_request_review_id": null,
        "id": 5584419,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODQ0MTk=",
        "diff_hunk": "@@ -961,10 +969,13 @@ func (s *Server) AddPeer(name string) error {\n \n \t// Only add the peer if it doesn't have the same name.\n \tif s.name != name {\n-\t\t_, err := fmt.Fprintln(s.confFile, name)\n-\t\ts.debugln(\"server.peer.conf.write: \", name)\n-\t\tif err != nil {\n-\t\t\treturn err\n+\t\t// when loading snapshot s.confFile should be nil\n+\t\tif s.confFile != nil {\n+\t\t\t_, err := fmt.Fprintln(s.confFile, name)\n+\t\t\ts.debugln(\"server.peer.conf.write: \", name)\n+\t\t\tif err != nil {\n+\t\t\t\treturn err\n+\t\t\t}",
        "path": "server.go",
        "position": 58,
        "original_position": 58,
        "commit_id": "31db0ff136372cce7643e04d58bb8cae24596deb",
        "original_commit_id": "31db0ff136372cce7643e04d58bb8cae24596deb",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@benbjohnson we should do that. this is the init fix. when i have time, i will do a more careful review and fix.\n",
        "created_at": "2013-08-05T17:28:31Z",
        "updated_at": "2013-08-05T17:28:31Z",
        "html_url": "https://github.com/goraft/raft/pull/96#discussion_r5584419",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/96",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5584419"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/96#discussion_r5584419"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/96"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5727817",
        "pull_request_review_id": null,
        "id": 5727817,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Mjc4MTc=",
        "diff_hunk": "@@ -89,14 +89,14 @@ func (p *Peer) startHeartbeat() {\n }\n \n // Stops the peer heartbeat.\n-func (p *Peer) stopHeartbeat() {\n+func (p *Peer) stopHeartbeat(flush bool) {\n \t// here is a problem\n \t// the previous stop is no buffer leader may get blocked\n \t// when heartbeat returns at line 132\n \t// I make the channel with 1 buffer\n \t// and try to panic here",
        "path": "peer.go",
        "position": null,
        "original_position": 10,
        "commit_id": "f16052cd9f446888c7798595ae60b03d586f809a",
        "original_commit_id": "132dae30226adc1b5b056f86ce81bd6891cfa5a8",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu I know this comment isn't part of the diff of this PR but, in general, don't include line numbers in the source code since those line numbers will change as new code gets merged in.\n",
        "created_at": "2013-08-13T03:56:06Z",
        "updated_at": "2013-08-13T04:01:51Z",
        "html_url": "https://github.com/goraft/raft/pull/109#discussion_r5727817",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/109",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5727817"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/109#discussion_r5727817"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/109"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5727830",
        "pull_request_review_id": null,
        "id": 5727830,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Mjc4MzA=",
        "diff_hunk": "@@ -89,14 +89,14 @@ func (p *Peer) startHeartbeat() {\n }\n \n // Stops the peer heartbeat.\n-func (p *Peer) stopHeartbeat() {\n+func (p *Peer) stopHeartbeat(flush bool) {\n \t// here is a problem\n \t// the previous stop is no buffer leader may get blocked\n \t// when heartbeat returns at line 132\n \t// I make the channel with 1 buffer\n \t// and try to panic here",
        "path": "peer.go",
        "position": null,
        "original_position": 10,
        "commit_id": "f16052cd9f446888c7798595ae60b03d586f809a",
        "original_commit_id": "132dae30226adc1b5b056f86ce81bd6891cfa5a8",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ok. Understand that.\n",
        "created_at": "2013-08-13T03:57:57Z",
        "updated_at": "2013-08-13T04:01:51Z",
        "html_url": "https://github.com/goraft/raft/pull/109#discussion_r5727830",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/109",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5727830"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/109#discussion_r5727830"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/109"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5727833",
        "pull_request_review_id": null,
        "id": 5727833,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Mjc4MzM=",
        "diff_hunk": "@@ -132,28 +132,40 @@ func (p *Peer) heartbeat(c chan bool) {\n \n \tfor {\n \t\tselect {\n-\t\tcase <-stopChan:\n-\t\t\tdebugln(\"peer.heartbeat.stop: \", p.Name())\n-\t\t\treturn\n-\n-\t\tcase <-time.After(p.heartbeatTimeout):\n-\t\t\tdebugln(\"peer.heartbeat.run: \", p.Name())\n-\t\t\tprevLogIndex := p.getPrevLogIndex()\n-\t\t\tentries, prevLogTerm := p.server.log.getEntriesAfter(prevLogIndex, p.server.maxLogEntriesPerRequest)\n-\n-\t\t\tif p.server.State() != Leader {\n+\t\tcase flush := <-stopChan:\n+\t\t\tif !flush {\n+\t\t\t\tdebugln(\"peer.heartbeat.stop: \", p.Name())\n \t\t\t\treturn\n-\t\t\t}\n-\n-\t\t\tif entries != nil {\n-\t\t\t\tp.sendAppendEntriesRequest(newAppendEntriesRequest(p.server.currentTerm, prevLogIndex, prevLogTerm, p.server.log.CommitIndex(), p.server.name, entries))\n \t\t\t} else {\n-\t\t\t\tp.sendSnapshotRequest(newSnapshotRequest(p.server.name, p.server.lastSnapshot))\n+\t\t\t\t// before we can safely remove a node\n+\t\t\t\t// we must flush the remove command to the node first\n+\t\t\t\tp.flushPeer()\n+\t\t\t\tdebugln(\"peer.heartbeat.stop: \", p.Name())\n+\t\t\t\treturn\n \t\t\t}\n+\n+\t\tcase <-time.After(p.heartbeatTimeout):\n+\t\t\tp.flushPeer()\n \t\t}\n \t}\n }\n \n+func (p *Peer) flushPeer() {\n+\tdebugln(\"peer.heartbeat.run: \", p.Name())\n+\tprevLogIndex := p.getPrevLogIndex()\n+\tentries, prevLogTerm := p.server.log.getEntriesAfter(prevLogIndex, p.server.maxLogEntriesPerRequest)\n+\n+\tif p.server.State() != Leader {\n+\t\treturn\n+\t}\n+\n+\tif entries != nil {\n+\t\tp.sendAppendEntriesRequest(newAppendEntriesRequest(p.server.currentTerm, prevLogIndex, prevLogTerm, p.server.log.CommitIndex(), p.server.name, entries))\n+\t} else {\n+\t\tp.sendSnapshotRequest(newSnapshotRequest(p.server.name, p.server.lastSnapshot))\n+\t}\n+}\n+",
        "path": "peer.go",
        "position": 70,
        "original_position": 69,
        "commit_id": "f16052cd9f446888c7798595ae60b03d586f809a",
        "original_commit_id": "132dae30226adc1b5b056f86ce81bd6891cfa5a8",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Can you rename this function to `flush()` since it's implied that it's for the peer?\n",
        "created_at": "2013-08-13T03:58:20Z",
        "updated_at": "2013-08-13T04:01:51Z",
        "html_url": "https://github.com/goraft/raft/pull/109#discussion_r5727833",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/109",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5727833"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/109#discussion_r5727833"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/109"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5727846",
        "pull_request_review_id": null,
        "id": 5727846,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Mjc4NDY=",
        "diff_hunk": "@@ -132,28 +132,40 @@ func (p *Peer) heartbeat(c chan bool) {\n \n \tfor {\n \t\tselect {\n-\t\tcase <-stopChan:\n-\t\t\tdebugln(\"peer.heartbeat.stop: \", p.Name())\n-\t\t\treturn\n-\n-\t\tcase <-time.After(p.heartbeatTimeout):\n-\t\t\tdebugln(\"peer.heartbeat.run: \", p.Name())\n-\t\t\tprevLogIndex := p.getPrevLogIndex()\n-\t\t\tentries, prevLogTerm := p.server.log.getEntriesAfter(prevLogIndex, p.server.maxLogEntriesPerRequest)\n-\n-\t\t\tif p.server.State() != Leader {\n+\t\tcase flush := <-stopChan:\n+\t\t\tif !flush {\n+\t\t\t\tdebugln(\"peer.heartbeat.stop: \", p.Name())\n \t\t\t\treturn\n-\t\t\t}\n-\n-\t\t\tif entries != nil {\n-\t\t\t\tp.sendAppendEntriesRequest(newAppendEntriesRequest(p.server.currentTerm, prevLogIndex, prevLogTerm, p.server.log.CommitIndex(), p.server.name, entries))\n \t\t\t} else {\n-\t\t\t\tp.sendSnapshotRequest(newSnapshotRequest(p.server.name, p.server.lastSnapshot))\n+\t\t\t\t// before we can safely remove a node\n+\t\t\t\t// we must flush the remove command to the node first\n+\t\t\t\tp.flushPeer()\n+\t\t\t\tdebugln(\"peer.heartbeat.stop: \", p.Name())\n+\t\t\t\treturn\n \t\t\t}\n+\n+\t\tcase <-time.After(p.heartbeatTimeout):\n+\t\t\tp.flushPeer()\n \t\t}\n \t}\n }\n \n+func (p *Peer) flushPeer() {\n+\tdebugln(\"peer.heartbeat.run: \", p.Name())\n+\tprevLogIndex := p.getPrevLogIndex()\n+\tentries, prevLogTerm := p.server.log.getEntriesAfter(prevLogIndex, p.server.maxLogEntriesPerRequest)\n+\n+\tif p.server.State() != Leader {\n+\t\treturn\n+\t}\n+\n+\tif entries != nil {\n+\t\tp.sendAppendEntriesRequest(newAppendEntriesRequest(p.server.currentTerm, prevLogIndex, prevLogTerm, p.server.log.CommitIndex(), p.server.name, entries))\n+\t} else {\n+\t\tp.sendSnapshotRequest(newSnapshotRequest(p.server.name, p.server.lastSnapshot))\n+\t}\n+}\n+",
        "path": "peer.go",
        "position": 70,
        "original_position": 69,
        "commit_id": "f16052cd9f446888c7798595ae60b03d586f809a",
        "original_commit_id": "132dae30226adc1b5b056f86ce81bd6891cfa5a8",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Oh yes.\n",
        "created_at": "2013-08-13T03:59:21Z",
        "updated_at": "2013-08-13T04:01:51Z",
        "html_url": "https://github.com/goraft/raft/pull/109#discussion_r5727846",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/109",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5727846"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/109#discussion_r5727846"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/109"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5750607",
        "pull_request_review_id": null,
        "id": 5750607,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTA2MDc=",
        "diff_hunk": "@@ -0,0 +1,84 @@\n+package raft\n+\n+import (\n+\t\"encoding/json\"\n+\t\"io/ioutil\"\n+\t\"os\"\n+\t\"path\"\n+)\n+\n+type RaftConfig struct {",
        "path": "config.go",
        "position": null,
        "original_position": 10,
        "commit_id": "851ca9ceeaf9855d994870c023a2892a5742ecf4",
        "original_commit_id": "ce1bd81d0805e6aac6e12a32388725a3970db9f0",
        "user": {
            "login": "philips",
            "id": 33544,
            "node_id": "MDQ6VXNlcjMzNTQ0",
            "avatar_url": "https://avatars1.githubusercontent.com/u/33544?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/philips",
            "html_url": "https://github.com/philips",
            "followers_url": "https://api.github.com/users/philips/followers",
            "following_url": "https://api.github.com/users/philips/following{/other_user}",
            "gists_url": "https://api.github.com/users/philips/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/philips/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/philips/subscriptions",
            "organizations_url": "https://api.github.com/users/philips/orgs",
            "repos_url": "https://api.github.com/users/philips/repos",
            "events_url": "https://api.github.com/users/philips/events{/privacy}",
            "received_events_url": "https://api.github.com/users/philips/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "We need to version this probably.\n",
        "created_at": "2013-08-13T22:03:39Z",
        "updated_at": "2013-08-15T23:35:09Z",
        "html_url": "https://github.com/goraft/raft/pull/110#discussion_r5750607",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/110",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5750607"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/110#discussion_r5750607"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/110"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5754485",
        "pull_request_review_id": null,
        "id": 5754485,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTQ0ODU=",
        "diff_hunk": "@@ -0,0 +1,84 @@\n+package raft\n+\n+import (\n+\t\"encoding/json\"\n+\t\"io/ioutil\"\n+\t\"os\"\n+\t\"path\"\n+)\n+\n+type RaftConfig struct {",
        "path": "config.go",
        "position": null,
        "original_position": 10,
        "commit_id": "851ca9ceeaf9855d994870c023a2892a5742ecf4",
        "original_commit_id": "ce1bd81d0805e6aac6e12a32388725a3970db9f0",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Just call this `Config` since it's already in the `raft` package.\n",
        "created_at": "2013-08-14T02:12:22Z",
        "updated_at": "2013-08-15T23:35:09Z",
        "html_url": "https://github.com/goraft/raft/pull/110#discussion_r5754485",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/110",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5754485"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/110#discussion_r5754485"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/110"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5754493",
        "pull_request_review_id": null,
        "id": 5754493,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTQ0OTM=",
        "diff_hunk": "@@ -0,0 +1,84 @@\n+package raft\n+\n+import (\n+\t\"encoding/json\"\n+\t\"io/ioutil\"\n+\t\"os\"\n+\t\"path\"\n+)\n+\n+type RaftConfig struct {\n+\tKnownCommitIndex uint64 `json:\"KnownCommitIndex\"`",
        "path": "config.go",
        "position": null,
        "original_position": 11,
        "commit_id": "851ca9ceeaf9855d994870c023a2892a5742ecf4",
        "original_commit_id": "ce1bd81d0805e6aac6e12a32388725a3970db9f0",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Change the field name to `CommitIndex` and the json field to `commitIndex`. It's implied that it's known and camel case is fairly standard for JSON.\n",
        "created_at": "2013-08-14T02:13:10Z",
        "updated_at": "2013-08-15T23:35:09Z",
        "html_url": "https://github.com/goraft/raft/pull/110#discussion_r5754493",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/110",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5754493"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/110#discussion_r5754493"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/110"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5754510",
        "pull_request_review_id": null,
        "id": 5754510,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTQ1MTA=",
        "diff_hunk": "@@ -0,0 +1,84 @@\n+package raft\n+\n+import (\n+\t\"encoding/json\"\n+\t\"io/ioutil\"\n+\t\"os\"\n+\t\"path\"\n+)\n+\n+type RaftConfig struct {\n+\tKnownCommitIndex uint64 `json:\"KnownCommitIndex\"`",
        "path": "config.go",
        "position": null,
        "original_position": 11,
        "commit_id": "851ca9ceeaf9855d994870c023a2892a5742ecf4",
        "original_commit_id": "ce1bd81d0805e6aac6e12a32388725a3970db9f0",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ok\n",
        "created_at": "2013-08-14T02:15:00Z",
        "updated_at": "2013-08-15T23:35:09Z",
        "html_url": "https://github.com/goraft/raft/pull/110#discussion_r5754510",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/110",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5754510"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/110#discussion_r5754510"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/110"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5754525",
        "pull_request_review_id": null,
        "id": 5754525,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTQ1MjU=",
        "diff_hunk": "@@ -0,0 +1,84 @@\n+package raft\n+\n+import (\n+\t\"encoding/json\"\n+\t\"io/ioutil\"\n+\t\"os\"\n+\t\"path\"\n+)\n+\n+type RaftConfig struct {\n+\tKnownCommitIndex uint64 `json:\"KnownCommitIndex\"`\n+\t// TODO decide what we need to store in peer struct\n+\tPeers []string `json:\"Peers\"`",
        "path": "config.go",
        "position": null,
        "original_position": 13,
        "commit_id": "851ca9ceeaf9855d994870c023a2892a5742ecf4",
        "original_commit_id": "ce1bd81d0805e6aac6e12a32388725a3970db9f0",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Change the json field to `peers`. Also, why is the field an array of strings? Aren't the peers `*Peer` objects?\n",
        "created_at": "2013-08-14T02:16:19Z",
        "updated_at": "2013-08-15T23:35:09Z",
        "html_url": "https://github.com/goraft/raft/pull/110#discussion_r5754525",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/110",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5754525"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/110#discussion_r5754525"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/110"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5754591",
        "pull_request_review_id": null,
        "id": 5754591,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTQ1OTE=",
        "diff_hunk": "@@ -0,0 +1,84 @@\n+package raft\n+\n+import (\n+\t\"encoding/json\"\n+\t\"io/ioutil\"\n+\t\"os\"\n+\t\"path\"\n+)\n+\n+type RaftConfig struct {\n+\tKnownCommitIndex uint64 `json:\"KnownCommitIndex\"`\n+\t// TODO decide what we need to store in peer struct\n+\tPeers []string `json:\"Peers\"`\n+}\n+\n+func (s *Server) writeConf() {",
        "path": "config.go",
        "position": null,
        "original_position": 16,
        "commit_id": "851ca9ceeaf9855d994870c023a2892a5742ecf4",
        "original_commit_id": "ce1bd81d0805e6aac6e12a32388725a3970db9f0",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu The reading and writing of the conf file should live in isolation from the server:\n\n``` go\nfunc (c *Config) writeFile(filename string)\nfunc (c *Config) readFile(filename string)\n```\n",
        "created_at": "2013-08-14T02:21:39Z",
        "updated_at": "2013-08-15T23:35:09Z",
        "html_url": "https://github.com/goraft/raft/pull/110#discussion_r5754591",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/110",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5754591"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/110#discussion_r5754591"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/110"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5754596",
        "pull_request_review_id": null,
        "id": 5754596,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTQ1OTY=",
        "diff_hunk": "@@ -0,0 +1,84 @@\n+package raft\n+\n+import (\n+\t\"encoding/json\"\n+\t\"io/ioutil\"\n+\t\"os\"\n+\t\"path\"\n+)\n+\n+type RaftConfig struct {\n+\tKnownCommitIndex uint64 `json:\"KnownCommitIndex\"`\n+\t// TODO decide what we need to store in peer struct\n+\tPeers []string `json:\"Peers\"`\n+}\n+\n+func (s *Server) writeConf() {\n+\n+\tpeers := make([]string, len(s.peers))\n+\n+\ti := 0\n+\tfor peer := range s.peers {\n+\t\tpeers[i] = peer\n+\t\ti++\n+\t}",
        "path": "config.go",
        "position": null,
        "original_position": 24,
        "commit_id": "851ca9ceeaf9855d994870c023a2892a5742ecf4",
        "original_commit_id": "ce1bd81d0805e6aac6e12a32388725a3970db9f0",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu The `range` operator lets you retrieve the index:\n\n``` go\nfor i, peer := range s.peers {\n    peers[i] = peer\n}\n```\n",
        "created_at": "2013-08-14T02:22:44Z",
        "updated_at": "2013-08-15T23:35:09Z",
        "html_url": "https://github.com/goraft/raft/pull/110#discussion_r5754596",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/110",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5754596"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/110#discussion_r5754596"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/110"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5754606",
        "pull_request_review_id": null,
        "id": 5754606,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTQ2MDY=",
        "diff_hunk": "@@ -0,0 +1,84 @@\n+package raft\n+\n+import (\n+\t\"encoding/json\"\n+\t\"io/ioutil\"\n+\t\"os\"\n+\t\"path\"\n+)\n+\n+type RaftConfig struct {\n+\tKnownCommitIndex uint64 `json:\"KnownCommitIndex\"`\n+\t// TODO decide what we need to store in peer struct\n+\tPeers []string `json:\"Peers\"`",
        "path": "config.go",
        "position": null,
        "original_position": 13,
        "commit_id": "851ca9ceeaf9855d994870c023a2892a5742ecf4",
        "original_commit_id": "ce1bd81d0805e6aac6e12a32388725a3970db9f0",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "There is no useful information in Peer Structure. \nI do not really know what should be put in here.\n",
        "created_at": "2013-08-14T02:24:16Z",
        "updated_at": "2013-08-15T23:35:09Z",
        "html_url": "https://github.com/goraft/raft/pull/110#discussion_r5754606",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/110",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5754606"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/110#discussion_r5754606"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/110"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5754607",
        "pull_request_review_id": null,
        "id": 5754607,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTQ2MDc=",
        "diff_hunk": "@@ -0,0 +1,84 @@\n+package raft\n+\n+import (\n+\t\"encoding/json\"\n+\t\"io/ioutil\"\n+\t\"os\"\n+\t\"path\"\n+)\n+\n+type RaftConfig struct {\n+\tKnownCommitIndex uint64 `json:\"KnownCommitIndex\"`\n+\t// TODO decide what we need to store in peer struct\n+\tPeers []string `json:\"Peers\"`\n+}\n+\n+func (s *Server) writeConf() {\n+\n+\tpeers := make([]string, len(s.peers))\n+\n+\ti := 0\n+\tfor peer := range s.peers {\n+\t\tpeers[i] = peer\n+\t\ti++\n+\t}\n+\n+\tr := &RaftConfig{\n+\t\tKnownCommitIndex: s.log.commitIndex,\n+\t\tPeers:            peers,\n+\t}\n+\n+\tb, _ := json.Marshal(r)\n+\n+\tconfBakPath := path.Join(s.path, \"conf.bak\")\n+\tconfPath := path.Join(s.path, \"conf\")",
        "path": "config.go",
        "position": null,
        "original_position": 34,
        "commit_id": "851ca9ceeaf9855d994870c023a2892a5742ecf4",
        "original_commit_id": "ce1bd81d0805e6aac6e12a32388725a3970db9f0",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu The `conf` is implied and it's a temp file (and not really a backup file) so you can simply name these `tmppath` and `path`.\n",
        "created_at": "2013-08-14T02:24:36Z",
        "updated_at": "2013-08-15T23:35:09Z",
        "html_url": "https://github.com/goraft/raft/pull/110#discussion_r5754607",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/110",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5754607"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/110#discussion_r5754607"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/110"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5754616",
        "pull_request_review_id": null,
        "id": 5754616,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTQ2MTY=",
        "diff_hunk": "@@ -0,0 +1,84 @@\n+package raft\n+\n+import (\n+\t\"encoding/json\"\n+\t\"io/ioutil\"\n+\t\"os\"\n+\t\"path\"\n+)\n+\n+type RaftConfig struct {\n+\tKnownCommitIndex uint64 `json:\"KnownCommitIndex\"`\n+\t// TODO decide what we need to store in peer struct\n+\tPeers []string `json:\"Peers\"`\n+}\n+\n+func (s *Server) writeConf() {\n+\n+\tpeers := make([]string, len(s.peers))\n+\n+\ti := 0\n+\tfor peer := range s.peers {\n+\t\tpeers[i] = peer\n+\t\ti++\n+\t}\n+\n+\tr := &RaftConfig{\n+\t\tKnownCommitIndex: s.log.commitIndex,\n+\t\tPeers:            peers,\n+\t}\n+\n+\tb, _ := json.Marshal(r)\n+\n+\tconfBakPath := path.Join(s.path, \"conf.bak\")\n+\tconfPath := path.Join(s.path, \"conf\")\n+\n+\tconfFile, err := os.OpenFile(confBakPath, os.O_WRONLY|os.O_CREATE, 0600)",
        "path": "config.go",
        "position": null,
        "original_position": 36,
        "commit_id": "851ca9ceeaf9855d994870c023a2892a5742ecf4",
        "original_commit_id": "ce1bd81d0805e6aac6e12a32388725a3970db9f0",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Try using [ioutil.WriteFile()](http://golang.org/pkg/io/ioutil/#WriteFile). It's a little bit cleaner.\n",
        "created_at": "2013-08-14T02:25:42Z",
        "updated_at": "2013-08-15T23:35:09Z",
        "html_url": "https://github.com/goraft/raft/pull/110#discussion_r5754616",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/110",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5754616"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/110#discussion_r5754616"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/110"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5754646",
        "pull_request_review_id": null,
        "id": 5754646,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTQ2NDY=",
        "diff_hunk": "@@ -0,0 +1,84 @@\n+package raft\n+\n+import (\n+\t\"encoding/json\"\n+\t\"io/ioutil\"\n+\t\"os\"\n+\t\"path\"\n+)\n+\n+type RaftConfig struct {\n+\tKnownCommitIndex uint64 `json:\"KnownCommitIndex\"`\n+\t// TODO decide what we need to store in peer struct\n+\tPeers []string `json:\"Peers\"`\n+}\n+\n+func (s *Server) writeConf() {\n+\n+\tpeers := make([]string, len(s.peers))\n+\n+\ti := 0\n+\tfor peer := range s.peers {\n+\t\tpeers[i] = peer\n+\t\ti++\n+\t}\n+\n+\tr := &RaftConfig{\n+\t\tKnownCommitIndex: s.log.commitIndex,\n+\t\tPeers:            peers,\n+\t}\n+\n+\tb, _ := json.Marshal(r)\n+\n+\tconfBakPath := path.Join(s.path, \"conf.bak\")\n+\tconfPath := path.Join(s.path, \"conf\")\n+\n+\tconfFile, err := os.OpenFile(confBakPath, os.O_WRONLY|os.O_CREATE, 0600)\n+\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\n+\tconfFile.Write(b)\n+\n+\tos.Remove(confPath)\n+\tos.Rename(confBakPath, confPath)",
        "path": "config.go",
        "position": null,
        "original_position": 45,
        "commit_id": "851ca9ceeaf9855d994870c023a2892a5742ecf4",
        "original_commit_id": "ce1bd81d0805e6aac6e12a32388725a3970db9f0",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu You don't need the `os.Remove()`. The rename will overwrite the file. Also, you could have the conf file removed and the fail on the rename and be stuck without a conf file.\n\nYou also need to check for an error on `os.Rename()` and panic.\n",
        "created_at": "2013-08-14T02:29:14Z",
        "updated_at": "2013-08-15T23:35:09Z",
        "html_url": "https://github.com/goraft/raft/pull/110#discussion_r5754646",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/110",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5754646"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/110#discussion_r5754646"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/110"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5754661",
        "pull_request_review_id": null,
        "id": 5754661,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTQ2NjE=",
        "diff_hunk": "@@ -0,0 +1,84 @@\n+package raft\n+\n+import (\n+\t\"encoding/json\"\n+\t\"io/ioutil\"\n+\t\"os\"\n+\t\"path\"\n+)\n+\n+type RaftConfig struct {\n+\tKnownCommitIndex uint64 `json:\"KnownCommitIndex\"`\n+\t// TODO decide what we need to store in peer struct\n+\tPeers []string `json:\"Peers\"`\n+}\n+\n+func (s *Server) writeConf() {\n+\n+\tpeers := make([]string, len(s.peers))\n+\n+\ti := 0\n+\tfor peer := range s.peers {\n+\t\tpeers[i] = peer\n+\t\ti++\n+\t}\n+\n+\tr := &RaftConfig{\n+\t\tKnownCommitIndex: s.log.commitIndex,\n+\t\tPeers:            peers,\n+\t}\n+\n+\tb, _ := json.Marshal(r)\n+\n+\tconfBakPath := path.Join(s.path, \"conf.bak\")\n+\tconfPath := path.Join(s.path, \"conf\")\n+\n+\tconfFile, err := os.OpenFile(confBakPath, os.O_WRONLY|os.O_CREATE, 0600)\n+\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\n+\tconfFile.Write(b)\n+\n+\tos.Remove(confPath)\n+\tos.Rename(confBakPath, confPath)\n+}\n+\n+// Read the configuration for the server.\n+func (s *Server) readConf() error {\n+\tconfPath := path.Join(s.path, \"conf\")",
        "path": "config.go",
        "position": null,
        "original_position": 50,
        "commit_id": "851ca9ceeaf9855d994870c023a2892a5742ecf4",
        "original_commit_id": "ce1bd81d0805e6aac6e12a32388725a3970db9f0",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu `path` should just be a field on the `Config` that the `Server` sets.\n",
        "created_at": "2013-08-14T02:31:09Z",
        "updated_at": "2013-08-15T23:35:09Z",
        "html_url": "https://github.com/goraft/raft/pull/110#discussion_r5754661",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/110",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5754661"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/110#discussion_r5754661"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/110"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5754676",
        "pull_request_review_id": null,
        "id": 5754676,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTQ2NzY=",
        "diff_hunk": "@@ -0,0 +1,84 @@\n+package raft\n+\n+import (\n+\t\"encoding/json\"\n+\t\"io/ioutil\"\n+\t\"os\"\n+\t\"path\"\n+)\n+\n+type RaftConfig struct {\n+\tKnownCommitIndex uint64 `json:\"KnownCommitIndex\"`\n+\t// TODO decide what we need to store in peer struct\n+\tPeers []string `json:\"Peers\"`",
        "path": "config.go",
        "position": null,
        "original_position": 13,
        "commit_id": "851ca9ceeaf9855d994870c023a2892a5742ecf4",
        "original_commit_id": "ce1bd81d0805e6aac6e12a32388725a3970db9f0",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu We should serialize the `name` and add a `connectionString` field to `Peer` and serialize that too.\n",
        "created_at": "2013-08-14T02:32:58Z",
        "updated_at": "2013-08-15T23:35:09Z",
        "html_url": "https://github.com/goraft/raft/pull/110#discussion_r5754676",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/110",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5754676"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/110#discussion_r5754676"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/110"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5754682",
        "pull_request_review_id": null,
        "id": 5754682,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTQ2ODI=",
        "diff_hunk": "@@ -0,0 +1,84 @@\n+package raft\n+\n+import (\n+\t\"encoding/json\"\n+\t\"io/ioutil\"\n+\t\"os\"\n+\t\"path\"\n+)\n+\n+type RaftConfig struct {\n+\tKnownCommitIndex uint64 `json:\"KnownCommitIndex\"`\n+\t// TODO decide what we need to store in peer struct\n+\tPeers []string `json:\"Peers\"`\n+}\n+\n+func (s *Server) writeConf() {\n+\n+\tpeers := make([]string, len(s.peers))\n+\n+\ti := 0\n+\tfor peer := range s.peers {\n+\t\tpeers[i] = peer\n+\t\ti++\n+\t}\n+\n+\tr := &RaftConfig{\n+\t\tKnownCommitIndex: s.log.commitIndex,\n+\t\tPeers:            peers,\n+\t}\n+\n+\tb, _ := json.Marshal(r)\n+\n+\tconfBakPath := path.Join(s.path, \"conf.bak\")\n+\tconfPath := path.Join(s.path, \"conf\")\n+\n+\tconfFile, err := os.OpenFile(confBakPath, os.O_WRONLY|os.O_CREATE, 0600)\n+\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\n+\tconfFile.Write(b)\n+\n+\tos.Remove(confPath)\n+\tos.Rename(confBakPath, confPath)\n+}\n+\n+// Read the configuration for the server.\n+func (s *Server) readConf() error {\n+\tconfPath := path.Join(s.path, \"conf\")\n+\ts.debugln(\"readConf.open \", confPath)\n+\t// open conf file\n+\tconfFile, err := os.OpenFile(confPath, os.O_RDWR, 0600)",
        "path": "config.go",
        "position": null,
        "original_position": 53,
        "commit_id": "851ca9ceeaf9855d994870c023a2892a5742ecf4",
        "original_commit_id": "ce1bd81d0805e6aac6e12a32388725a3970db9f0",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Using `ioutil.ReadFile()` would be cleaner here.\n",
        "created_at": "2013-08-14T02:33:43Z",
        "updated_at": "2013-08-15T23:35:09Z",
        "html_url": "https://github.com/goraft/raft/pull/110#discussion_r5754682",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/110",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5754682"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/110#discussion_r5754682"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/110"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5754686",
        "pull_request_review_id": null,
        "id": 5754686,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTQ2ODY=",
        "diff_hunk": "@@ -0,0 +1,84 @@\n+package raft\n+\n+import (\n+\t\"encoding/json\"\n+\t\"io/ioutil\"\n+\t\"os\"\n+\t\"path\"\n+)\n+\n+type RaftConfig struct {\n+\tKnownCommitIndex uint64 `json:\"KnownCommitIndex\"`\n+\t// TODO decide what we need to store in peer struct\n+\tPeers []string `json:\"Peers\"`\n+}\n+\n+func (s *Server) writeConf() {",
        "path": "config.go",
        "position": null,
        "original_position": 16,
        "commit_id": "851ca9ceeaf9855d994870c023a2892a5742ecf4",
        "original_commit_id": "ce1bd81d0805e6aac6e12a32388725a3970db9f0",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The problem is we need to pass in peer in `write`.\nI think let the server read/write conf is fine. \n",
        "created_at": "2013-08-14T02:34:25Z",
        "updated_at": "2013-08-15T23:35:09Z",
        "html_url": "https://github.com/goraft/raft/pull/110#discussion_r5754686",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/110",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5754686"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/110#discussion_r5754686"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/110"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5754688",
        "pull_request_review_id": null,
        "id": 5754688,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTQ2ODg=",
        "diff_hunk": "@@ -0,0 +1,84 @@\n+package raft\n+\n+import (\n+\t\"encoding/json\"\n+\t\"io/ioutil\"\n+\t\"os\"\n+\t\"path\"\n+)\n+\n+type RaftConfig struct {\n+\tKnownCommitIndex uint64 `json:\"KnownCommitIndex\"`\n+\t// TODO decide what we need to store in peer struct\n+\tPeers []string `json:\"Peers\"`\n+}\n+\n+func (s *Server) writeConf() {\n+\n+\tpeers := make([]string, len(s.peers))\n+\n+\ti := 0\n+\tfor peer := range s.peers {\n+\t\tpeers[i] = peer\n+\t\ti++\n+\t}\n+\n+\tr := &RaftConfig{\n+\t\tKnownCommitIndex: s.log.commitIndex,\n+\t\tPeers:            peers,\n+\t}\n+\n+\tb, _ := json.Marshal(r)\n+\n+\tconfBakPath := path.Join(s.path, \"conf.bak\")\n+\tconfPath := path.Join(s.path, \"conf\")\n+\n+\tconfFile, err := os.OpenFile(confBakPath, os.O_WRONLY|os.O_CREATE, 0600)\n+\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\n+\tconfFile.Write(b)\n+\n+\tos.Remove(confPath)\n+\tos.Rename(confBakPath, confPath)\n+}\n+\n+// Read the configuration for the server.\n+func (s *Server) readConf() error {\n+\tconfPath := path.Join(s.path, \"conf\")\n+\ts.debugln(\"readConf.open \", confPath)\n+\t// open conf file\n+\tconfFile, err := os.OpenFile(confPath, os.O_RDWR, 0600)\n+\n+\tif err != nil {\n+\t\tif os.IsNotExist(err) {\n+\t\t\t_, err = os.OpenFile(confPath, os.O_WRONLY|os.O_CREATE, 0600)\n+\t\t\tdebugln(\"readConf.create \", confPath)\n+\t\t\tif err != nil {\n+\t\t\t\treturn err\n+\t\t\t}\n+\t\t}\n+\t\treturn err\n+\t}",
        "path": "config.go",
        "position": null,
        "original_position": 64,
        "commit_id": "851ca9ceeaf9855d994870c023a2892a5742ecf4",
        "original_commit_id": "ce1bd81d0805e6aac6e12a32388725a3970db9f0",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu We don't need to create a blank conf file if one doesn't exist. We can just exit the function with a blank `Config`.\n",
        "created_at": "2013-08-14T02:34:41Z",
        "updated_at": "2013-08-15T23:35:09Z",
        "html_url": "https://github.com/goraft/raft/pull/110#discussion_r5754688",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/110",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5754688"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/110#discussion_r5754688"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/110"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5754700",
        "pull_request_review_id": null,
        "id": 5754700,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTQ3MDA=",
        "diff_hunk": "@@ -0,0 +1,84 @@\n+package raft\n+\n+import (\n+\t\"encoding/json\"\n+\t\"io/ioutil\"\n+\t\"os\"\n+\t\"path\"\n+)\n+\n+type RaftConfig struct {\n+\tKnownCommitIndex uint64 `json:\"KnownCommitIndex\"`\n+\t// TODO decide what we need to store in peer struct\n+\tPeers []string `json:\"Peers\"`\n+}\n+\n+func (s *Server) writeConf() {\n+\n+\tpeers := make([]string, len(s.peers))\n+\n+\ti := 0\n+\tfor peer := range s.peers {\n+\t\tpeers[i] = peer\n+\t\ti++\n+\t}\n+\n+\tr := &RaftConfig{\n+\t\tKnownCommitIndex: s.log.commitIndex,\n+\t\tPeers:            peers,\n+\t}\n+\n+\tb, _ := json.Marshal(r)\n+\n+\tconfBakPath := path.Join(s.path, \"conf.bak\")\n+\tconfPath := path.Join(s.path, \"conf\")\n+\n+\tconfFile, err := os.OpenFile(confBakPath, os.O_WRONLY|os.O_CREATE, 0600)\n+\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\n+\tconfFile.Write(b)\n+\n+\tos.Remove(confPath)\n+\tos.Rename(confBakPath, confPath)\n+}\n+\n+// Read the configuration for the server.\n+func (s *Server) readConf() error {\n+\tconfPath := path.Join(s.path, \"conf\")\n+\ts.debugln(\"readConf.open \", confPath)\n+\t// open conf file\n+\tconfFile, err := os.OpenFile(confPath, os.O_RDWR, 0600)\n+\n+\tif err != nil {\n+\t\tif os.IsNotExist(err) {\n+\t\t\t_, err = os.OpenFile(confPath, os.O_WRONLY|os.O_CREATE, 0600)\n+\t\t\tdebugln(\"readConf.create \", confPath)\n+\t\t\tif err != nil {\n+\t\t\t\treturn err\n+\t\t\t}\n+\t\t}\n+\t\treturn err\n+\t}\n+\n+\traftConf := &RaftConfig{}\n+\n+\tb, err := ioutil.ReadAll(confFile)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\n+\tconfFile.Close()\n+\n+\terr = json.Unmarshal(b, raftConf)\n+\n+\tif err != nil {\n+\t\treturn err\n+\t}",
        "path": "config.go",
        "position": null,
        "original_position": 79,
        "commit_id": "851ca9ceeaf9855d994870c023a2892a5742ecf4",
        "original_commit_id": "ce1bd81d0805e6aac6e12a32388725a3970db9f0",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu You can inline the `Unmarshal()` with the `if`:\n\n``` go\nif err = json.Unmarshal(b, conf); err != nil {\n    return err\n}\n```\n",
        "created_at": "2013-08-14T02:35:48Z",
        "updated_at": "2013-08-15T23:35:09Z",
        "html_url": "https://github.com/goraft/raft/pull/110#discussion_r5754700",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/110",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5754700"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/110#discussion_r5754700"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/110"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5754706",
        "pull_request_review_id": null,
        "id": 5754706,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTQ3MDY=",
        "diff_hunk": "@@ -0,0 +1,84 @@\n+package raft\n+\n+import (\n+\t\"encoding/json\"\n+\t\"io/ioutil\"\n+\t\"os\"\n+\t\"path\"\n+)\n+\n+type RaftConfig struct {\n+\tKnownCommitIndex uint64 `json:\"KnownCommitIndex\"`\n+\t// TODO decide what we need to store in peer struct\n+\tPeers []string `json:\"Peers\"`\n+}\n+\n+func (s *Server) writeConf() {\n+\n+\tpeers := make([]string, len(s.peers))\n+\n+\ti := 0\n+\tfor peer := range s.peers {\n+\t\tpeers[i] = peer\n+\t\ti++\n+\t}\n+\n+\tr := &RaftConfig{\n+\t\tKnownCommitIndex: s.log.commitIndex,\n+\t\tPeers:            peers,\n+\t}\n+\n+\tb, _ := json.Marshal(r)\n+\n+\tconfBakPath := path.Join(s.path, \"conf.bak\")\n+\tconfPath := path.Join(s.path, \"conf\")\n+\n+\tconfFile, err := os.OpenFile(confBakPath, os.O_WRONLY|os.O_CREATE, 0600)\n+\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\n+\tconfFile.Write(b)\n+\n+\tos.Remove(confPath)\n+\tos.Rename(confBakPath, confPath)\n+}\n+\n+// Read the configuration for the server.\n+func (s *Server) readConf() error {\n+\tconfPath := path.Join(s.path, \"conf\")\n+\ts.debugln(\"readConf.open \", confPath)\n+\t// open conf file\n+\tconfFile, err := os.OpenFile(confPath, os.O_RDWR, 0600)\n+\n+\tif err != nil {\n+\t\tif os.IsNotExist(err) {\n+\t\t\t_, err = os.OpenFile(confPath, os.O_WRONLY|os.O_CREATE, 0600)\n+\t\t\tdebugln(\"readConf.create \", confPath)\n+\t\t\tif err != nil {\n+\t\t\t\treturn err\n+\t\t\t}\n+\t\t}\n+\t\treturn err\n+\t}\n+\n+\traftConf := &RaftConfig{}\n+\n+\tb, err := ioutil.ReadAll(confFile)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\n+\tconfFile.Close()\n+\n+\terr = json.Unmarshal(b, raftConf)\n+\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\n+\ts.log.commitIndex = raftConf.KnownCommitIndex",
        "path": "config.go",
        "position": null,
        "original_position": 81,
        "commit_id": "851ca9ceeaf9855d994870c023a2892a5742ecf4",
        "original_commit_id": "ce1bd81d0805e6aac6e12a32388725a3970db9f0",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Add a `commitIndex` to the `Config` that the server can reference after the config is read so the `Config` doesn't need to know about the `Server`.\n",
        "created_at": "2013-08-14T02:36:34Z",
        "updated_at": "2013-08-15T23:35:09Z",
        "html_url": "https://github.com/goraft/raft/pull/110#discussion_r5754706",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/110",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5754706"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/110#discussion_r5754706"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/110"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5754722",
        "pull_request_review_id": null,
        "id": 5754722,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTQ3MjI=",
        "diff_hunk": "@@ -0,0 +1,84 @@\n+package raft\n+\n+import (\n+\t\"encoding/json\"\n+\t\"io/ioutil\"\n+\t\"os\"\n+\t\"path\"\n+)\n+\n+type RaftConfig struct {\n+\tKnownCommitIndex uint64 `json:\"KnownCommitIndex\"`\n+\t// TODO decide what we need to store in peer struct\n+\tPeers []string `json:\"Peers\"`\n+}\n+\n+func (s *Server) writeConf() {\n+\n+\tpeers := make([]string, len(s.peers))\n+\n+\ti := 0\n+\tfor peer := range s.peers {\n+\t\tpeers[i] = peer\n+\t\ti++\n+\t}\n+\n+\tr := &RaftConfig{\n+\t\tKnownCommitIndex: s.log.commitIndex,\n+\t\tPeers:            peers,\n+\t}\n+\n+\tb, _ := json.Marshal(r)\n+\n+\tconfBakPath := path.Join(s.path, \"conf.bak\")\n+\tconfPath := path.Join(s.path, \"conf\")",
        "path": "config.go",
        "position": null,
        "original_position": 34,
        "commit_id": "851ca9ceeaf9855d994870c023a2892a5742ecf4",
        "original_commit_id": "ce1bd81d0805e6aac6e12a32388725a3970db9f0",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I used to use the `Conf` struct as a entity. And have `newConf`, `conf.read`, `conf.write`. But finally, I think it is just redundant codes.  \n",
        "created_at": "2013-08-14T02:37:50Z",
        "updated_at": "2013-08-15T23:35:09Z",
        "html_url": "https://github.com/goraft/raft/pull/110#discussion_r5754722",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/110",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5754722"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/110#discussion_r5754722"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/110"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5754728",
        "pull_request_review_id": null,
        "id": 5754728,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTQ3Mjg=",
        "diff_hunk": "@@ -183,6 +183,15 @@ func (l *Log) open(path string) error {\n \n \t\t// Append entry.\n \t\tl.entries = append(l.entries, entry)\n+\n+\t\tif entry.Index <= l.commitIndex {\n+\t\t\tcommand, err := newCommand(entry.CommandName, entry.Command)\n+\t\t\tif err != nil {\n+\t\t\t\tcontinue",
        "path": "log.go",
        "position": 8,
        "original_position": 8,
        "commit_id": "851ca9ceeaf9855d994870c023a2892a5742ecf4",
        "original_commit_id": "ce1bd81d0805e6aac6e12a32388725a3970db9f0",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Continuing the loop will corrupt the state machine. Any application implementing this library will need to be backwards compatible with its commands as it upgrades. This should panic instead.\n",
        "created_at": "2013-08-14T02:38:38Z",
        "updated_at": "2013-08-15T23:35:09Z",
        "html_url": "https://github.com/goraft/raft/pull/110#discussion_r5754728",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/110",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5754728"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/110#discussion_r5754728"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/110"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5754740",
        "pull_request_review_id": null,
        "id": 5754740,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTQ3NDA=",
        "diff_hunk": "@@ -183,6 +183,15 @@ func (l *Log) open(path string) error {\n \n \t\t// Append entry.\n \t\tl.entries = append(l.entries, entry)\n+\n+\t\tif entry.Index <= l.commitIndex {\n+\t\t\tcommand, err := newCommand(entry.CommandName, entry.Command)\n+\t\t\tif err != nil {\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t\tl.ApplyFunc(command)\n+\t\t}\n+",
        "path": "log.go",
        "position": 12,
        "original_position": 12,
        "commit_id": "851ca9ceeaf9855d994870c023a2892a5742ecf4",
        "original_commit_id": "ce1bd81d0805e6aac6e12a32388725a3970db9f0",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu What's the purpose of this block? From the conditional, it looks like you're applying everything before the `commitIndex`. Shouldn't it apply everything after the `commitIndex`?\n",
        "created_at": "2013-08-14T02:39:47Z",
        "updated_at": "2013-08-15T23:35:09Z",
        "html_url": "https://github.com/goraft/raft/pull/110#discussion_r5754740",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/110",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5754740"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/110#discussion_r5754740"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/110"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5754742",
        "pull_request_review_id": null,
        "id": 5754742,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTQ3NDI=",
        "diff_hunk": "@@ -0,0 +1,84 @@\n+package raft\n+\n+import (\n+\t\"encoding/json\"\n+\t\"io/ioutil\"\n+\t\"os\"\n+\t\"path\"\n+)\n+\n+type RaftConfig struct {\n+\tKnownCommitIndex uint64 `json:\"KnownCommitIndex\"`\n+\t// TODO decide what we need to store in peer struct\n+\tPeers []string `json:\"Peers\"`",
        "path": "config.go",
        "position": null,
        "original_position": 13,
        "commit_id": "851ca9ceeaf9855d994870c023a2892a5742ecf4",
        "original_commit_id": "ce1bd81d0805e6aac6e12a32388725a3970db9f0",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@benbjohnson The problem is that, the application may define peer more than `connectionString`. I think just store `[]byte` and let application define what to store is fine.\n",
        "created_at": "2013-08-14T02:40:02Z",
        "updated_at": "2013-08-15T23:35:09Z",
        "html_url": "https://github.com/goraft/raft/pull/110#discussion_r5754742",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/110",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5754742"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/110#discussion_r5754742"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/110"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5754760",
        "pull_request_review_id": null,
        "id": 5754760,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTQ3NjA=",
        "diff_hunk": "@@ -1009,14 +956,19 @@ func (s *Server) AddPeer(name string) error {\n func (s *Server) RemovePeer(name string) error {\n \ts.debugln(\"server.peer.remove: \", name, len(s.peers))\n \n+\tif name == s.Name() {\n+\t\t// when the removed node restart, it should be able\n+\t\t// to know it has been removed before. So we need\n+\t\t// to update knownCommitIndex\n+\t\ts.writeConf()\n+\t\treturn nil\n+\t}",
        "path": "server.go",
        "position": null,
        "original_position": 127,
        "commit_id": "851ca9ceeaf9855d994870c023a2892a5742ecf4",
        "original_commit_id": "ce1bd81d0805e6aac6e12a32388725a3970db9f0",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu We should write the config every time a cluster configuration change is made.\n",
        "created_at": "2013-08-14T02:41:47Z",
        "updated_at": "2013-08-15T23:35:09Z",
        "html_url": "https://github.com/goraft/raft/pull/110#discussion_r5754760",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/110",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5754760"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/110#discussion_r5754760"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/110"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5754764",
        "pull_request_review_id": null,
        "id": 5754764,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTQ3NjQ=",
        "diff_hunk": "@@ -183,6 +183,15 @@ func (l *Log) open(path string) error {\n \n \t\t// Append entry.\n \t\tl.entries = append(l.entries, entry)\n+\n+\t\tif entry.Index <= l.commitIndex {\n+\t\t\tcommand, err := newCommand(entry.CommandName, entry.Command)\n+\t\t\tif err != nil {\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t\tl.ApplyFunc(command)\n+\t\t}\n+",
        "path": "log.go",
        "position": 12,
        "original_position": 12,
        "commit_id": "851ca9ceeaf9855d994870c023a2892a5742ecf4",
        "original_commit_id": "ce1bd81d0805e6aac6e12a32388725a3970db9f0",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "We should apply everything before `commitIndex`. The `commitIndex` is the last command that changes the conf of the cluster.\n",
        "created_at": "2013-08-14T02:42:09Z",
        "updated_at": "2013-08-15T23:35:09Z",
        "html_url": "https://github.com/goraft/raft/pull/110#discussion_r5754764",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/110",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5754764"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/110#discussion_r5754764"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/110"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5754786",
        "pull_request_review_id": null,
        "id": 5754786,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTQ3ODY=",
        "diff_hunk": "@@ -1009,14 +956,19 @@ func (s *Server) AddPeer(name string) error {\n func (s *Server) RemovePeer(name string) error {\n \ts.debugln(\"server.peer.remove: \", name, len(s.peers))\n \n+\tif name == s.Name() {\n+\t\t// when the removed node restart, it should be able\n+\t\t// to know it has been removed before. So we need\n+\t\t// to update knownCommitIndex\n+\t\ts.writeConf()\n+\t\treturn nil\n+\t}",
        "path": "server.go",
        "position": null,
        "original_position": 127,
        "commit_id": "851ca9ceeaf9855d994870c023a2892a5742ecf4",
        "original_commit_id": "ce1bd81d0805e6aac6e12a32388725a3970db9f0",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I want to clarify in this case, the peers do not change. Only the `commitIndex` will change.\n",
        "created_at": "2013-08-14T02:45:20Z",
        "updated_at": "2013-08-15T23:35:09Z",
        "html_url": "https://github.com/goraft/raft/pull/110#discussion_r5754786",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/110",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5754786"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/110#discussion_r5754786"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/110"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5754794",
        "pull_request_review_id": null,
        "id": 5754794,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTQ3OTQ=",
        "diff_hunk": "@@ -0,0 +1,84 @@\n+package raft\n+\n+import (\n+\t\"encoding/json\"\n+\t\"io/ioutil\"\n+\t\"os\"\n+\t\"path\"\n+)\n+\n+type RaftConfig struct {\n+\tKnownCommitIndex uint64 `json:\"KnownCommitIndex\"`\n+\t// TODO decide what we need to store in peer struct\n+\tPeers []string `json:\"Peers\"`\n+}\n+\n+func (s *Server) writeConf() {\n+\n+\tpeers := make([]string, len(s.peers))\n+\n+\ti := 0\n+\tfor peer := range s.peers {\n+\t\tpeers[i] = peer\n+\t\ti++\n+\t}\n+\n+\tr := &RaftConfig{\n+\t\tKnownCommitIndex: s.log.commitIndex,\n+\t\tPeers:            peers,\n+\t}\n+\n+\tb, _ := json.Marshal(r)\n+\n+\tconfBakPath := path.Join(s.path, \"conf.bak\")\n+\tconfPath := path.Join(s.path, \"conf\")\n+\n+\tconfFile, err := os.OpenFile(confBakPath, os.O_WRONLY|os.O_CREATE, 0600)\n+\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\n+\tconfFile.Write(b)\n+\n+\tos.Remove(confPath)\n+\tos.Rename(confBakPath, confPath)",
        "path": "config.go",
        "position": null,
        "original_position": 45,
        "commit_id": "851ca9ceeaf9855d994870c023a2892a5742ecf4",
        "original_commit_id": "ce1bd81d0805e6aac6e12a32388725a3970db9f0",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "All right. I was thinking it should be an error when try to rename to an existing file.\n",
        "created_at": "2013-08-14T02:46:22Z",
        "updated_at": "2013-08-15T23:35:09Z",
        "html_url": "https://github.com/goraft/raft/pull/110#discussion_r5754794",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/110",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5754794"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/110#discussion_r5754794"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/110"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5754838",
        "pull_request_review_id": null,
        "id": 5754838,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTQ4Mzg=",
        "diff_hunk": "@@ -183,6 +183,15 @@ func (l *Log) open(path string) error {\n \n \t\t// Append entry.\n \t\tl.entries = append(l.entries, entry)\n+\n+\t\tif entry.Index <= l.commitIndex {\n+\t\t\tcommand, err := newCommand(entry.CommandName, entry.Command)\n+\t\t\tif err != nil {\n+\t\t\t\tcontinue",
        "path": "log.go",
        "position": 8,
        "original_position": 8,
        "commit_id": "851ca9ceeaf9855d994870c023a2892a5742ecf4",
        "original_commit_id": "ce1bd81d0805e6aac6e12a32388725a3970db9f0",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The reason I continue this is in `setCommit()` we do record corrupt or unregistered `Command`. And if we want to panic here, we must make sure before append each log, we check the command.\n",
        "created_at": "2013-08-14T02:50:31Z",
        "updated_at": "2013-08-15T23:35:09Z",
        "html_url": "https://github.com/goraft/raft/pull/110#discussion_r5754838",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/110",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5754838"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/110#discussion_r5754838"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/110"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5754848",
        "pull_request_review_id": null,
        "id": 5754848,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTQ4NDg=",
        "diff_hunk": "@@ -0,0 +1,84 @@\n+package raft\n+\n+import (\n+\t\"encoding/json\"\n+\t\"io/ioutil\"\n+\t\"os\"\n+\t\"path\"\n+)\n+\n+type RaftConfig struct {\n+\tKnownCommitIndex uint64 `json:\"KnownCommitIndex\"`\n+\t// TODO decide what we need to store in peer struct\n+\tPeers []string `json:\"Peers\"`",
        "path": "config.go",
        "position": null,
        "original_position": 13,
        "commit_id": "851ca9ceeaf9855d994870c023a2892a5742ecf4",
        "original_commit_id": "ce1bd81d0805e6aac6e12a32388725a3970db9f0",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu The idea of a connection string is really common so I think we should support that. We can add a `data []byte` field for additional information about the `Peer` if someone requests it in the future but I bet that 99% of use cases will work with connection string.\n",
        "created_at": "2013-08-14T02:51:12Z",
        "updated_at": "2013-08-15T23:35:09Z",
        "html_url": "https://github.com/goraft/raft/pull/110#discussion_r5754848",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/110",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5754848"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/110#discussion_r5754848"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/110"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5755018",
        "pull_request_review_id": null,
        "id": 5755018,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTUwMTg=",
        "diff_hunk": "@@ -0,0 +1,84 @@\n+package raft\n+\n+import (\n+\t\"encoding/json\"\n+\t\"io/ioutil\"\n+\t\"os\"\n+\t\"path\"\n+)\n+\n+type RaftConfig struct {\n+\tKnownCommitIndex uint64 `json:\"KnownCommitIndex\"`\n+\t// TODO decide what we need to store in peer struct\n+\tPeers []string `json:\"Peers\"`",
        "path": "config.go",
        "position": null,
        "original_position": 13,
        "commit_id": "851ca9ceeaf9855d994870c023a2892a5742ecf4",
        "original_commit_id": "ce1bd81d0805e6aac6e12a32388725a3970db9f0",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Actually, if the application will reply the join command, we do not need to store anything about peer. \n\nFor `etcd`, we have a lookup map. When apply`join` command, we add  `connectionString` to the map. In this way, as long as the application can reply all the `join` log, then it will be good.\n",
        "created_at": "2013-08-14T03:11:11Z",
        "updated_at": "2013-08-15T23:35:09Z",
        "html_url": "https://github.com/goraft/raft/pull/110#discussion_r5755018",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/110",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5755018"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/110#discussion_r5755018"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/110"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5769440",
        "pull_request_review_id": null,
        "id": 5769440,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njk0NDA=",
        "diff_hunk": "@@ -0,0 +1,84 @@\n+package raft\n+\n+import (\n+\t\"encoding/json\"\n+\t\"io/ioutil\"\n+\t\"os\"\n+\t\"path\"\n+)\n+\n+type RaftConfig struct {\n+\tKnownCommitIndex uint64 `json:\"KnownCommitIndex\"`\n+\t// TODO decide what we need to store in peer struct\n+\tPeers []string `json:\"Peers\"`\n+}\n+\n+func (s *Server) writeConf() {\n+\n+\tpeers := make([]string, len(s.peers))\n+\n+\ti := 0\n+\tfor peer := range s.peers {\n+\t\tpeers[i] = peer\n+\t\ti++\n+\t}\n+\n+\tr := &RaftConfig{\n+\t\tKnownCommitIndex: s.log.commitIndex,\n+\t\tPeers:            peers,\n+\t}\n+\n+\tb, _ := json.Marshal(r)\n+\n+\tconfBakPath := path.Join(s.path, \"conf.bak\")\n+\tconfPath := path.Join(s.path, \"conf\")",
        "path": "config.go",
        "position": null,
        "original_position": 34,
        "commit_id": "851ca9ceeaf9855d994870c023a2892a5742ecf4",
        "original_commit_id": "ce1bd81d0805e6aac6e12a32388725a3970db9f0",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "path is the pkg name. So we need to use confPath.\n",
        "created_at": "2013-08-14T17:16:17Z",
        "updated_at": "2013-08-15T23:35:09Z",
        "html_url": "https://github.com/goraft/raft/pull/110#discussion_r5769440",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/110",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5769440"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/110#discussion_r5769440"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/110"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5769966",
        "pull_request_review_id": null,
        "id": 5769966,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njk5NjY=",
        "diff_hunk": "@@ -0,0 +1,84 @@\n+package raft\n+\n+import (\n+\t\"encoding/json\"\n+\t\"io/ioutil\"\n+\t\"os\"\n+\t\"path\"\n+)\n+\n+type RaftConfig struct {\n+\tKnownCommitIndex uint64 `json:\"KnownCommitIndex\"`\n+\t// TODO decide what we need to store in peer struct\n+\tPeers []string `json:\"Peers\"`\n+}\n+\n+func (s *Server) writeConf() {\n+\n+\tpeers := make([]string, len(s.peers))\n+\n+\ti := 0\n+\tfor peer := range s.peers {\n+\t\tpeers[i] = peer\n+\t\ti++\n+\t}",
        "path": "config.go",
        "position": null,
        "original_position": 24,
        "commit_id": "851ca9ceeaf9855d994870c023a2892a5742ecf4",
        "original_commit_id": "ce1bd81d0805e6aac6e12a32388725a3970db9f0",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@benbjohnson hmm... peer is a `[string]*Peer` map. We cannot do this.\n",
        "created_at": "2013-08-14T17:33:18Z",
        "updated_at": "2013-08-15T23:35:09Z",
        "html_url": "https://github.com/goraft/raft/pull/110#discussion_r5769966",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/110",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5769966"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/110#discussion_r5769966"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/110"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5776578",
        "pull_request_review_id": null,
        "id": 5776578,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzY1Nzg=",
        "diff_hunk": "@@ -0,0 +1,84 @@\n+package raft\n+\n+import (\n+\t\"encoding/json\"\n+\t\"io/ioutil\"\n+\t\"os\"\n+\t\"path\"\n+)\n+\n+type RaftConfig struct {\n+\tKnownCommitIndex uint64 `json:\"KnownCommitIndex\"`\n+\t// TODO decide what we need to store in peer struct\n+\tPeers []string `json:\"Peers\"`\n+}\n+\n+func (s *Server) writeConf() {\n+\n+\tpeers := make([]string, len(s.peers))\n+\n+\ti := 0\n+\tfor peer := range s.peers {\n+\t\tpeers[i] = peer\n+\t\ti++\n+\t}",
        "path": "config.go",
        "position": null,
        "original_position": 24,
        "commit_id": "851ca9ceeaf9855d994870c023a2892a5742ecf4",
        "original_commit_id": "ce1bd81d0805e6aac6e12a32388725a3970db9f0",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu For some reason I was thinking it was looping over the `peers` array. Nevermind.\n",
        "created_at": "2013-08-14T21:16:04Z",
        "updated_at": "2013-08-15T23:35:09Z",
        "html_url": "https://github.com/goraft/raft/pull/110#discussion_r5776578",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/110",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5776578"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/110#discussion_r5776578"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/110"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5776823",
        "pull_request_review_id": null,
        "id": 5776823,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzY4MjM=",
        "diff_hunk": "@@ -183,6 +183,15 @@ func (l *Log) open(path string) error {\n \n \t\t// Append entry.\n \t\tl.entries = append(l.entries, entry)\n+\n+\t\tif entry.Index <= l.commitIndex {\n+\t\t\tcommand, err := newCommand(entry.CommandName, entry.Command)\n+\t\t\tif err != nil {\n+\t\t\t\tcontinue",
        "path": "log.go",
        "position": 8,
        "original_position": 8,
        "commit_id": "851ca9ceeaf9855d994870c023a2892a5742ecf4",
        "original_commit_id": "ce1bd81d0805e6aac6e12a32388725a3970db9f0",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu We should panic from `setCommitIndex()` as well.\n",
        "created_at": "2013-08-14T21:24:37Z",
        "updated_at": "2013-08-15T23:35:09Z",
        "html_url": "https://github.com/goraft/raft/pull/110#discussion_r5776823",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/110",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5776823"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/110#discussion_r5776823"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/110"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5776824",
        "pull_request_review_id": null,
        "id": 5776824,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzY4MjQ=",
        "diff_hunk": "@@ -0,0 +1,84 @@\n+package raft\n+\n+import (\n+\t\"encoding/json\"\n+\t\"io/ioutil\"\n+\t\"os\"\n+\t\"path\"\n+)\n+\n+type RaftConfig struct {\n+\tKnownCommitIndex uint64 `json:\"KnownCommitIndex\"`\n+\t// TODO decide what we need to store in peer struct\n+\tPeers []string `json:\"Peers\"`\n+}\n+\n+func (s *Server) writeConf() {\n+\n+\tpeers := make([]string, len(s.peers))\n+\n+\ti := 0\n+\tfor peer := range s.peers {\n+\t\tpeers[i] = peer\n+\t\ti++\n+\t}",
        "path": "config.go",
        "position": null,
        "original_position": 24,
        "commit_id": "851ca9ceeaf9855d994870c023a2892a5742ecf4",
        "original_commit_id": "ce1bd81d0805e6aac6e12a32388725a3970db9f0",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@benbjohnson No worries. I will be back to clean these up and update pr soon.\n",
        "created_at": "2013-08-14T21:24:39Z",
        "updated_at": "2013-08-15T23:35:09Z",
        "html_url": "https://github.com/goraft/raft/pull/110#discussion_r5776824",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/110",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5776824"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/110#discussion_r5776824"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/110"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5776848",
        "pull_request_review_id": null,
        "id": 5776848,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzY4NDg=",
        "diff_hunk": "@@ -183,6 +183,15 @@ func (l *Log) open(path string) error {\n \n \t\t// Append entry.\n \t\tl.entries = append(l.entries, entry)\n+\n+\t\tif entry.Index <= l.commitIndex {\n+\t\t\tcommand, err := newCommand(entry.CommandName, entry.Command)\n+\t\t\tif err != nil {\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t\tl.ApplyFunc(command)\n+\t\t}\n+",
        "path": "log.go",
        "position": 12,
        "original_position": 12,
        "commit_id": "851ca9ceeaf9855d994870c023a2892a5742ecf4",
        "original_commit_id": "ce1bd81d0805e6aac6e12a32388725a3970db9f0",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Sorry, for some reason I was thinking about snapshotting. n/m.\n",
        "created_at": "2013-08-14T21:25:44Z",
        "updated_at": "2013-08-15T23:35:09Z",
        "html_url": "https://github.com/goraft/raft/pull/110#discussion_r5776848",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/110",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5776848"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/110#discussion_r5776848"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/110"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5776871",
        "pull_request_review_id": null,
        "id": 5776871,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzY4NzE=",
        "diff_hunk": "@@ -1009,14 +956,19 @@ func (s *Server) AddPeer(name string) error {\n func (s *Server) RemovePeer(name string) error {\n \ts.debugln(\"server.peer.remove: \", name, len(s.peers))\n \n+\tif name == s.Name() {\n+\t\t// when the removed node restart, it should be able\n+\t\t// to know it has been removed before. So we need\n+\t\t// to update knownCommitIndex\n+\t\ts.writeConf()\n+\t\treturn nil\n+\t}",
        "path": "server.go",
        "position": null,
        "original_position": 127,
        "commit_id": "851ca9ceeaf9855d994870c023a2892a5742ecf4",
        "original_commit_id": "ce1bd81d0805e6aac6e12a32388725a3970db9f0",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Why wouldn't the peers change if you remove one?\n",
        "created_at": "2013-08-14T21:26:37Z",
        "updated_at": "2013-08-15T23:35:09Z",
        "html_url": "https://github.com/goraft/raft/pull/110#discussion_r5776871",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/110",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5776871"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/110#discussion_r5776871"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/110"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5776902",
        "pull_request_review_id": null,
        "id": 5776902,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzY5MDI=",
        "diff_hunk": "@@ -1009,14 +956,19 @@ func (s *Server) AddPeer(name string) error {\n func (s *Server) RemovePeer(name string) error {\n \ts.debugln(\"server.peer.remove: \", name, len(s.peers))\n \n+\tif name == s.Name() {\n+\t\t// when the removed node restart, it should be able\n+\t\t// to know it has been removed before. So we need\n+\t\t// to update knownCommitIndex\n+\t\ts.writeConf()\n+\t\treturn nil\n+\t}",
        "path": "server.go",
        "position": null,
        "original_position": 127,
        "commit_id": "851ca9ceeaf9855d994870c023a2892a5742ecf4",
        "original_commit_id": "ce1bd81d0805e6aac6e12a32388725a3970db9f0",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@benbjohnson Since the serve itself is not in the peer list :)\n",
        "created_at": "2013-08-14T21:27:53Z",
        "updated_at": "2013-08-15T23:35:09Z",
        "html_url": "https://github.com/goraft/raft/pull/110#discussion_r5776902",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/110",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5776902"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/110#discussion_r5776902"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/110"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5777193",
        "pull_request_review_id": null,
        "id": 5777193,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzcxOTM=",
        "diff_hunk": "@@ -1009,14 +956,19 @@ func (s *Server) AddPeer(name string) error {\n func (s *Server) RemovePeer(name string) error {\n \ts.debugln(\"server.peer.remove: \", name, len(s.peers))\n \n+\tif name == s.Name() {\n+\t\t// when the removed node restart, it should be able\n+\t\t// to know it has been removed before. So we need\n+\t\t// to update knownCommitIndex\n+\t\ts.writeConf()\n+\t\treturn nil\n+\t}",
        "path": "server.go",
        "position": null,
        "original_position": 127,
        "commit_id": "851ca9ceeaf9855d994870c023a2892a5742ecf4",
        "original_commit_id": "ce1bd81d0805e6aac6e12a32388725a3970db9f0",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Yes, the server is not part of the peer list. But in the code above you're only writing the config when the server is removed -- not when other peers are removed.\n",
        "created_at": "2013-08-14T21:38:33Z",
        "updated_at": "2013-08-15T23:35:09Z",
        "html_url": "https://github.com/goraft/raft/pull/110#discussion_r5777193",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/110",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5777193"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/110#discussion_r5777193"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/110"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5777431",
        "pull_request_review_id": null,
        "id": 5777431,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Nzc0MzE=",
        "diff_hunk": "@@ -1024,15 +976,7 @@ func (s *Server) RemovePeer(name string) error {\n \n \tdelete(s.peers, name)\n \n-\ts.confFile.Truncate(0)\n-\ts.confFile.Seek(0, os.SEEK_SET)\n-\n-\tfor peer := range s.peers {\n-\t\t_, err := fmt.Fprintln(s.confFile, peer)\n-\t\tif err != nil {\n-\t\t\treturn err\n-\t\t}\n-\t}\n+\ts.writeConf()",
        "path": "server.go",
        "position": null,
        "original_position": 152,
        "commit_id": "851ca9ceeaf9855d994870c023a2892a5742ecf4",
        "original_commit_id": "ce1bd81d0805e6aac6e12a32388725a3970db9f0",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@benbjohnson  Here it is.\n\n\"Yes, the server is not part of the peer list. But in the code above you're only writing the config when the server is removed -- not when other peers are removed.\"\n",
        "created_at": "2013-08-14T21:47:15Z",
        "updated_at": "2013-08-15T23:35:09Z",
        "html_url": "https://github.com/goraft/raft/pull/110#discussion_r5777431",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/110",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5777431"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/110#discussion_r5777431"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/110"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/5777484",
        "pull_request_review_id": null,
        "id": 5777484,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Nzc0ODQ=",
        "diff_hunk": "@@ -1024,15 +976,7 @@ func (s *Server) RemovePeer(name string) error {\n \n \tdelete(s.peers, name)\n \n-\ts.confFile.Truncate(0)\n-\ts.confFile.Seek(0, os.SEEK_SET)\n-\n-\tfor peer := range s.peers {\n-\t\t_, err := fmt.Fprintln(s.confFile, peer)\n-\t\tif err != nil {\n-\t\t\treturn err\n-\t\t}\n-\t}\n+\ts.writeConf()",
        "path": "server.go",
        "position": null,
        "original_position": 152,
        "commit_id": "851ca9ceeaf9855d994870c023a2892a5742ecf4",
        "original_commit_id": "ce1bd81d0805e6aac6e12a32388725a3970db9f0",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Ok, I see now. Thanks.\n",
        "created_at": "2013-08-14T21:49:27Z",
        "updated_at": "2013-08-15T23:35:09Z",
        "html_url": "https://github.com/goraft/raft/pull/110#discussion_r5777484",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/110",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/5777484"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/110#discussion_r5777484"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/110"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/6479608",
        "pull_request_review_id": null,
        "id": 6479608,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0Nzk2MDg=",
        "diff_hunk": "@@ -180,26 +180,23 @@ func (l *Log) open(path string) error {\n \t\t\t}\n \t\t\tbreak\n \t\t}\n-\n-\t\t// Append entry.\n-\t\tl.entries = append(l.entries, entry)\n-\n-\t\tif entry.Index <= l.commitIndex {\n-\t\t\tcommand, err := newCommand(entry.CommandName, entry.Command)\n-\t\t\tif err != nil {\n-\t\t\t\tcontinue\n+\t\tif entry.Index > l.startIndex {\n+\t\t\t// Append entry.\n+\t\t\tl.entries = append(l.entries, entry)\n+\t\t\tif entry.Index <= l.commitIndex {\n+\t\t\t\tcommand, err := newCommand(entry.CommandName, entry.Command)\n+\t\t\t\tif err != nil {\n+\t\t\t\t\tcontinue\n+\t\t\t\t}\n+\t\t\t\tl.ApplyFunc(command)",
        "path": "log.go",
        "position": 20,
        "original_position": 20,
        "commit_id": "f92654b00ea7218f37f317292333d767cff21bd0",
        "original_commit_id": "f92654b00ea7218f37f317292333d767cff21bd0",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Can you explain the change in this section just so I'm clear? My brain is fried right now. :)\n",
        "created_at": "2013-09-20T04:19:25Z",
        "updated_at": "2013-09-20T04:19:25Z",
        "html_url": "https://github.com/goraft/raft/pull/113#discussion_r6479608",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/113",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/6479608"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/113#discussion_r6479608"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/113"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/6479661",
        "pull_request_review_id": null,
        "id": 6479661,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0Nzk2NjE=",
        "diff_hunk": "@@ -180,26 +180,23 @@ func (l *Log) open(path string) error {\n \t\t\t}\n \t\t\tbreak\n \t\t}\n-\n-\t\t// Append entry.\n-\t\tl.entries = append(l.entries, entry)\n-\n-\t\tif entry.Index <= l.commitIndex {\n-\t\t\tcommand, err := newCommand(entry.CommandName, entry.Command)\n-\t\t\tif err != nil {\n-\t\t\t\tcontinue\n+\t\tif entry.Index > l.startIndex {\n+\t\t\t// Append entry.\n+\t\t\tl.entries = append(l.entries, entry)\n+\t\t\tif entry.Index <= l.commitIndex {\n+\t\t\t\tcommand, err := newCommand(entry.CommandName, entry.Command)\n+\t\t\t\tif err != nil {\n+\t\t\t\t\tcontinue\n+\t\t\t\t}\n+\t\t\t\tl.ApplyFunc(command)",
        "path": "log.go",
        "position": 20,
        "original_position": 20,
        "commit_id": "f92654b00ea7218f37f317292333d767cff21bd0",
        "original_commit_id": "f92654b00ea7218f37f317292333d767cff21bd0",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@benbjohnson Sure. \nWe keep some old logs after snapshot (to help slow machine) and they will be stored on disk.\n\nWhen the machine restarts, it need to restore the `startIndex` and  `startTerm` and `commitIndex` from snapshot and another `commitIndex` from conf. We will use the larger `commitIndex`.\n\nAnd we only want to keep the log after `startIndex`. So when we read logs from disk, we need to compare it against `startIndex` we got from snapshot and to drop the older ones.\n",
        "created_at": "2013-09-20T04:32:22Z",
        "updated_at": "2013-09-20T04:35:18Z",
        "html_url": "https://github.com/goraft/raft/pull/113#discussion_r6479661",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/113",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/6479661"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/113#discussion_r6479661"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/113"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/6497737",
        "pull_request_review_id": null,
        "id": 6497737,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0OTc3Mzc=",
        "diff_hunk": "@@ -180,26 +180,23 @@ func (l *Log) open(path string) error {\n \t\t\t}\n \t\t\tbreak\n \t\t}\n-\n-\t\t// Append entry.\n-\t\tl.entries = append(l.entries, entry)\n-\n-\t\tif entry.Index <= l.commitIndex {\n-\t\t\tcommand, err := newCommand(entry.CommandName, entry.Command)\n-\t\t\tif err != nil {\n-\t\t\t\tcontinue\n+\t\tif entry.Index > l.startIndex {\n+\t\t\t// Append entry.\n+\t\t\tl.entries = append(l.entries, entry)\n+\t\t\tif entry.Index <= l.commitIndex {\n+\t\t\t\tcommand, err := newCommand(entry.CommandName, entry.Command)\n+\t\t\t\tif err != nil {\n+\t\t\t\t\tcontinue\n+\t\t\t\t}\n+\t\t\t\tl.ApplyFunc(command)",
        "path": "log.go",
        "position": 20,
        "original_position": 20,
        "commit_id": "f92654b00ea7218f37f317292333d767cff21bd0",
        "original_commit_id": "f92654b00ea7218f37f317292333d767cff21bd0",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Cool. That makes sense. I was way to tired to be reading code last night. :)\n",
        "created_at": "2013-09-20T20:56:35Z",
        "updated_at": "2013-09-20T20:56:35Z",
        "html_url": "https://github.com/goraft/raft/pull/113#discussion_r6497737",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/113",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/6497737"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/113#discussion_r6497737"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/113"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/7520534",
        "pull_request_review_id": null,
        "id": 7520534,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc1MjA1MzQ=",
        "diff_hunk": "@@ -237,8 +240,6 @@ func (s *server) LogPath() string {\n \n // Retrieves the current state of the server.\n func (s *server) State() string {\n-\ts.mutex.RLock()",
        "path": "server.go",
        "position": 28,
        "original_position": 21,
        "commit_id": "863b29186dfa2080cd66884983c3e634c7d522c5",
        "original_commit_id": "87d11017ad4c2f1a48e3edd0c41a42034c73a503",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@jvshahid Is there any reason you removed the lock? Although it is a read, go test -race might report data race. \n",
        "created_at": "2013-11-08T07:16:31Z",
        "updated_at": "2014-01-07T21:28:34Z",
        "html_url": "https://github.com/goraft/raft/pull/126#discussion_r7520534",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/126",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/7520534"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/126#discussion_r7520534"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/126"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/7574282",
        "pull_request_review_id": null,
        "id": 7574282,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc1NzQyODI=",
        "diff_hunk": "@@ -237,8 +240,6 @@ func (s *server) LogPath() string {\n \n // Retrieves the current state of the server.\n func (s *server) State() string {\n-\ts.mutex.RLock()",
        "path": "server.go",
        "position": 28,
        "original_position": 21,
        "commit_id": "863b29186dfa2080cd66884983c3e634c7d522c5",
        "original_commit_id": "87d11017ad4c2f1a48e3edd0c41a42034c73a503",
        "user": {
            "login": "jvshahid",
            "id": 297621,
            "node_id": "MDQ6VXNlcjI5NzYyMQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/297621?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jvshahid",
            "html_url": "https://github.com/jvshahid",
            "followers_url": "https://api.github.com/users/jvshahid/followers",
            "following_url": "https://api.github.com/users/jvshahid/following{/other_user}",
            "gists_url": "https://api.github.com/users/jvshahid/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jvshahid/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jvshahid/subscriptions",
            "organizations_url": "https://api.github.com/users/jvshahid/orgs",
            "repos_url": "https://api.github.com/users/jvshahid/repos",
            "events_url": "https://api.github.com/users/jvshahid/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jvshahid/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Getting rid of this line will cause a deadlock. I forgot exactly where the write lock is acquired that caused the deadlock. But s.mutex is a big lock, may be we should use a finer grained lock instead.\n",
        "created_at": "2013-11-11T21:37:30Z",
        "updated_at": "2014-01-07T21:28:34Z",
        "html_url": "https://github.com/goraft/raft/pull/126#discussion_r7574282",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/126",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/7574282"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/126#discussion_r7574282"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/126"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/7574511",
        "pull_request_review_id": null,
        "id": 7574511,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc1NzQ1MTE=",
        "diff_hunk": "@@ -237,8 +240,6 @@ func (s *server) LogPath() string {\n \n // Retrieves the current state of the server.\n func (s *server) State() string {\n-\ts.mutex.RLock()",
        "path": "server.go",
        "position": 28,
        "original_position": 21,
        "commit_id": "863b29186dfa2080cd66884983c3e634c7d522c5",
        "original_commit_id": "87d11017ad4c2f1a48e3edd0c41a42034c73a503",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@jvshahid I understand it is a big lock. But the contention is rare and all its current job is to prevent -race reporting data race... \n",
        "created_at": "2013-11-11T21:44:37Z",
        "updated_at": "2014-01-07T21:28:34Z",
        "html_url": "https://github.com/goraft/raft/pull/126#discussion_r7574511",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/126",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/7574511"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/126#discussion_r7574511"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/126"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/8819225",
        "pull_request_review_id": null,
        "id": 8819225,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4MTkyMjU=",
        "diff_hunk": "@@ -866,12 +866,12 @@ func (s *server) processCommand(command Command, e *ev) {\n \t\treturn\n \t}\n \n-\t// Issue an append entries response for the server.\n-\tresp := newAppendEntriesResponse(s.currentTerm, true, s.log.currentIndex(), s.log.CommitIndex())\n-\tresp.append = true\n-\tresp.peer = s.Name()\n-\n-\ts.sendAsync(resp)",
        "path": "server.go",
        "position": 25,
        "original_position": 25,
        "commit_id": "601a7996939a305f712a86b157f60c873322aab0",
        "original_commit_id": "601a7996939a305f712a86b157f60c873322aab0",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@philips If the cluster size is NOT one, this line sends a meaningless response to the leader for processing.\n",
        "created_at": "2014-01-13T08:43:31Z",
        "updated_at": "2014-01-13T08:51:39Z",
        "html_url": "https://github.com/goraft/raft/pull/152#discussion_r8819225",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/152",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/8819225"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/152#discussion_r8819225"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/152"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/8793342",
        "pull_request_review_id": null,
        "id": 8793342,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg3OTMzNDI=",
        "diff_hunk": "@@ -0,0 +1,25 @@\n+package raft\n+\n+import (\n+\t\"io\"\n+\t\"os\"\n+)\n+\n+// WriteFile writes data to a file named by filename.\n+// If the file does not exist, WriteFile creates it with permissions perm;\n+// otherwise WriteFile truncates it before writing.\n+// This is copied from ioutil.WriteFile with the addition of a Sync call to\n+// ensure the data reaches the disk.\n+func writeFileSynced(filename string, data []byte, perm os.FileMode) error {\n+\tf, err := os.OpenFile(filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, perm)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\tn, err := f.Write(data)\n+\tf.Sync()\n+\tf.Close()\n+\tif err == nil && n < len(data) {\n+\t\terr = io.ErrShortWrite\n+\t}",
        "path": "util.go",
        "position": null,
        "original_position": 23,
        "commit_id": "8ca39ae2237115edc31fd6d8312daac290a1cb87",
        "original_commit_id": "4a4b7391a3f8d570da3560d0222657a66139e7ea",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu `err` cannot be nil when `n != len(data)`. You can just pass the `err` back directly.\n\nhttp://golang.org/pkg/os/#File.Write\n",
        "created_at": "2014-01-10T16:33:01Z",
        "updated_at": "2014-01-15T12:27:14Z",
        "html_url": "https://github.com/goraft/raft/pull/150#discussion_r8793342",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/150",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/8793342"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/150#discussion_r8793342"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/150"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/8793360",
        "pull_request_review_id": null,
        "id": 8793360,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg3OTMzNjA=",
        "diff_hunk": "@@ -0,0 +1,25 @@\n+package raft\n+\n+import (\n+\t\"io\"\n+\t\"os\"\n+)\n+\n+// WriteFile writes data to a file named by filename.\n+// If the file does not exist, WriteFile creates it with permissions perm;\n+// otherwise WriteFile truncates it before writing.\n+// This is copied from ioutil.WriteFile with the addition of a Sync call to\n+// ensure the data reaches the disk.\n+func writeFileSynced(filename string, data []byte, perm os.FileMode) error {\n+\tf, err := os.OpenFile(filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, perm)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\tn, err := f.Write(data)\n+\tf.Sync()",
        "path": "util.go",
        "position": null,
        "original_position": 19,
        "commit_id": "8ca39ae2237115edc31fd6d8312daac290a1cb87",
        "original_commit_id": "4a4b7391a3f8d570da3560d0222657a66139e7ea",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu `File.Sync()` can return an error.\n",
        "created_at": "2014-01-10T16:33:37Z",
        "updated_at": "2014-01-15T12:27:14Z",
        "html_url": "https://github.com/goraft/raft/pull/150#discussion_r8793360",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/150",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/8793360"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/150#discussion_r8793360"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/150"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/8793373",
        "pull_request_review_id": null,
        "id": 8793373,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg3OTMzNzM=",
        "diff_hunk": "@@ -0,0 +1,25 @@\n+package raft\n+\n+import (\n+\t\"io\"\n+\t\"os\"\n+)\n+\n+// WriteFile writes data to a file named by filename.\n+// If the file does not exist, WriteFile creates it with permissions perm;\n+// otherwise WriteFile truncates it before writing.\n+// This is copied from ioutil.WriteFile with the addition of a Sync call to\n+// ensure the data reaches the disk.\n+func writeFileSynced(filename string, data []byte, perm os.FileMode) error {\n+\tf, err := os.OpenFile(filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, perm)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\tn, err := f.Write(data)\n+\tf.Sync()\n+\tf.Close()",
        "path": "util.go",
        "position": null,
        "original_position": 20,
        "commit_id": "8ca39ae2237115edc31fd6d8312daac290a1cb87",
        "original_commit_id": "4a4b7391a3f8d570da3560d0222657a66139e7ea",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu `File.Close()` can also return an error.\n",
        "created_at": "2014-01-10T16:33:54Z",
        "updated_at": "2014-01-15T12:27:14Z",
        "html_url": "https://github.com/goraft/raft/pull/150#discussion_r8793373",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/150",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/8793373"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/150#discussion_r8793373"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/150"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/8975495",
        "pull_request_review_id": null,
        "id": 8975495,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg5NzU0OTU=",
        "diff_hunk": "@@ -40,11 +42,13 @@ type HTTPMuxer interface {\n // Creates a new HTTP transporter with the given path prefix.\n func NewHTTPTransporter(prefix string) *HTTPTransporter {\n \tt := &HTTPTransporter{\n-\t\tDisableKeepAlives: false,\n-\t\tprefix:            prefix,\n-\t\tappendEntriesPath: fmt.Sprintf(\"%s%s\", prefix, \"/appendEntries\"),\n-\t\trequestVotePath:   fmt.Sprintf(\"%s%s\", prefix, \"/requestVote\"),\n-\t\tTransport:         &http.Transport{DisableKeepAlives: false},\n+\t\tDisableKeepAlives:    false,\n+\t\tprefix:               prefix,\n+\t\tappendEntriesPath:    fmt.Sprintf(\"%s%s\", prefix, \"/appendEntries\"),",
        "path": "http_transporter.go",
        "position": null,
        "original_position": 32,
        "commit_id": "4157c675e0b6d92461823fcbeb631489910d7ac5",
        "original_commit_id": "8d001630009ea37eb7582c094cca5d6b55830e54",
        "user": {
            "login": "philips",
            "id": 33544,
            "node_id": "MDQ6VXNlcjMzNTQ0",
            "avatar_url": "https://avatars1.githubusercontent.com/u/33544?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/philips",
            "html_url": "https://github.com/philips",
            "followers_url": "https://api.github.com/users/philips/followers",
            "following_url": "https://api.github.com/users/philips/following{/other_user}",
            "gists_url": "https://api.github.com/users/philips/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/philips/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/philips/subscriptions",
            "organizations_url": "https://api.github.com/users/philips/orgs",
            "repos_url": "https://api.github.com/users/philips/repos",
            "events_url": "https://api.github.com/users/philips/events{/privacy}",
            "received_events_url": "https://api.github.com/users/philips/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I know this isn't your fault but we should be using path.Join here. Lots of silly bugs caused by accidental double slashes.\n",
        "created_at": "2014-01-17T18:44:15Z",
        "updated_at": "2014-01-17T19:05:24Z",
        "html_url": "https://github.com/goraft/raft/pull/154#discussion_r8975495",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/154",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/8975495"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/154#discussion_r8975495"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/154"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/8975686",
        "pull_request_review_id": null,
        "id": 8975686,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg5NzU2ODY=",
        "diff_hunk": "@@ -40,11 +42,13 @@ type HTTPMuxer interface {\n // Creates a new HTTP transporter with the given path prefix.\n func NewHTTPTransporter(prefix string) *HTTPTransporter {\n \tt := &HTTPTransporter{\n-\t\tDisableKeepAlives: false,\n-\t\tprefix:            prefix,\n-\t\tappendEntriesPath: fmt.Sprintf(\"%s%s\", prefix, \"/appendEntries\"),\n-\t\trequestVotePath:   fmt.Sprintf(\"%s%s\", prefix, \"/requestVote\"),\n-\t\tTransport:         &http.Transport{DisableKeepAlives: false},\n+\t\tDisableKeepAlives:    false,\n+\t\tprefix:               prefix,\n+\t\tappendEntriesPath:    fmt.Sprintf(\"%s%s\", prefix, \"/appendEntries\"),",
        "path": "http_transporter.go",
        "position": null,
        "original_position": 32,
        "commit_id": "4157c675e0b6d92461823fcbeb631489910d7ac5",
        "original_commit_id": "8d001630009ea37eb7582c094cca5d6b55830e54",
        "user": {
            "login": "jvshahid",
            "id": 297621,
            "node_id": "MDQ6VXNlcjI5NzYyMQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/297621?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jvshahid",
            "html_url": "https://github.com/jvshahid",
            "followers_url": "https://api.github.com/users/jvshahid/followers",
            "following_url": "https://api.github.com/users/jvshahid/following{/other_user}",
            "gists_url": "https://api.github.com/users/jvshahid/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jvshahid/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jvshahid/subscriptions",
            "organizations_url": "https://api.github.com/users/jvshahid/orgs",
            "repos_url": "https://api.github.com/users/jvshahid/repos",
            "events_url": "https://api.github.com/users/jvshahid/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jvshahid/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I don't think that'll work, it'll probably normalize connections strings \"http://\" to \"http:/\" wouldn't it ?\n",
        "created_at": "2014-01-17T18:49:19Z",
        "updated_at": "2014-01-17T19:05:24Z",
        "html_url": "https://github.com/goraft/raft/pull/154#discussion_r8975686",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/154",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/8975686"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/154#discussion_r8975686"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/154"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/8975828",
        "pull_request_review_id": null,
        "id": 8975828,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg5NzU4Mjg=",
        "diff_hunk": "@@ -40,11 +42,13 @@ type HTTPMuxer interface {\n // Creates a new HTTP transporter with the given path prefix.\n func NewHTTPTransporter(prefix string) *HTTPTransporter {\n \tt := &HTTPTransporter{\n-\t\tDisableKeepAlives: false,\n-\t\tprefix:            prefix,\n-\t\tappendEntriesPath: fmt.Sprintf(\"%s%s\", prefix, \"/appendEntries\"),\n-\t\trequestVotePath:   fmt.Sprintf(\"%s%s\", prefix, \"/requestVote\"),\n-\t\tTransport:         &http.Transport{DisableKeepAlives: false},\n+\t\tDisableKeepAlives:    false,\n+\t\tprefix:               prefix,\n+\t\tappendEntriesPath:    fmt.Sprintf(\"%s%s\", prefix, \"/appendEntries\"),",
        "path": "http_transporter.go",
        "position": null,
        "original_position": 32,
        "commit_id": "4157c675e0b6d92461823fcbeb631489910d7ac5",
        "original_commit_id": "8d001630009ea37eb7582c094cca5d6b55830e54",
        "user": {
            "login": "philips",
            "id": 33544,
            "node_id": "MDQ6VXNlcjMzNTQ0",
            "avatar_url": "https://avatars1.githubusercontent.com/u/33544?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/philips",
            "html_url": "https://github.com/philips",
            "followers_url": "https://api.github.com/users/philips/followers",
            "following_url": "https://api.github.com/users/philips/following{/other_user}",
            "gists_url": "https://api.github.com/users/philips/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/philips/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/philips/subscriptions",
            "organizations_url": "https://api.github.com/users/philips/orgs",
            "repos_url": "https://api.github.com/users/philips/repos",
            "events_url": "https://api.github.com/users/philips/events{/privacy}",
            "received_events_url": "https://api.github.com/users/philips/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "in that case we need to use url.Parse and then join on u.Path\n",
        "created_at": "2014-01-17T18:52:34Z",
        "updated_at": "2014-01-17T19:05:24Z",
        "html_url": "https://github.com/goraft/raft/pull/154#discussion_r8975828",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/154",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/8975828"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/154#discussion_r8975828"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/154"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/8976351",
        "pull_request_review_id": null,
        "id": 8976351,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg5NzYzNTE=",
        "diff_hunk": "@@ -40,11 +42,13 @@ type HTTPMuxer interface {\n // Creates a new HTTP transporter with the given path prefix.\n func NewHTTPTransporter(prefix string) *HTTPTransporter {\n \tt := &HTTPTransporter{\n-\t\tDisableKeepAlives: false,\n-\t\tprefix:            prefix,\n-\t\tappendEntriesPath: fmt.Sprintf(\"%s%s\", prefix, \"/appendEntries\"),\n-\t\trequestVotePath:   fmt.Sprintf(\"%s%s\", prefix, \"/requestVote\"),\n-\t\tTransport:         &http.Transport{DisableKeepAlives: false},\n+\t\tDisableKeepAlives:    false,\n+\t\tprefix:               prefix,\n+\t\tappendEntriesPath:    fmt.Sprintf(\"%s%s\", prefix, \"/appendEntries\"),",
        "path": "http_transporter.go",
        "position": null,
        "original_position": 32,
        "commit_id": "4157c675e0b6d92461823fcbeb631489910d7ac5",
        "original_commit_id": "8d001630009ea37eb7582c094cca5d6b55830e54",
        "user": {
            "login": "jvshahid",
            "id": 297621,
            "node_id": "MDQ6VXNlcjI5NzYyMQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/297621?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jvshahid",
            "html_url": "https://github.com/jvshahid",
            "followers_url": "https://api.github.com/users/jvshahid/followers",
            "following_url": "https://api.github.com/users/jvshahid/following{/other_user}",
            "gists_url": "https://api.github.com/users/jvshahid/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jvshahid/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jvshahid/subscriptions",
            "organizations_url": "https://api.github.com/users/jvshahid/orgs",
            "repos_url": "https://api.github.com/users/jvshahid/repos",
            "events_url": "https://api.github.com/users/jvshahid/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jvshahid/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I fixed it and changed all references to Sprtinf to use `joinPath`\n",
        "created_at": "2014-01-17T19:06:05Z",
        "updated_at": "2014-01-17T19:06:05Z",
        "html_url": "https://github.com/goraft/raft/pull/154#discussion_r8976351",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/154",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/8976351"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/154#discussion_r8976351"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/154"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/9119630",
        "pull_request_review_id": null,
        "id": 9119630,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxMTk2MzA=",
        "diff_hunk": "@@ -192,7 +192,13 @@ func (p *Peer) sendAppendEntriesRequest(req *AppendEntriesRequest) {\n \t\t// If it was unsuccessful then decrement the previous log index and\n \t\t// we'll try again next time.\n \t} else {\n-\t\tif resp.CommitIndex() >= p.prevLogIndex {\n+\t\tif resp.Term() > server.Term() {\n+\t\t\t// this happens when there is a new leader comes up that this *leader* has not",
        "path": "peer.go",
        "position": 6,
        "original_position": 6,
        "commit_id": "6ffaa2484c463e1edc1345f3d2f8eda5bf886e8e",
        "original_commit_id": "6ffaa2484c463e1edc1345f3d2f8eda5bf886e8e",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@benbjohnson We cannot just step down here since we want to make leader process all the event in one single for loop. \n",
        "created_at": "2014-01-23T16:51:23Z",
        "updated_at": "2014-01-23T16:51:23Z",
        "html_url": "https://github.com/goraft/raft/pull/162#discussion_r9119630",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/162",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/9119630"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/162#discussion_r9119630"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/162"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/9129942",
        "pull_request_review_id": null,
        "id": 9129942,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxMjk5NDI=",
        "diff_hunk": "@@ -33,7 +33,10 @@ const (\n )\n \n const (\n-\tDefaultHeartbeatTimeout = 50 * time.Millisecond\n+",
        "path": "server.go",
        "position": null,
        "original_position": 5,
        "commit_id": "6ce38579a4e8d42dc6d6074665f6907010636a54",
        "original_commit_id": "1ab2774bfa2b4c94d446f1d891f29a6ce302e503",
        "user": {
            "login": "bcwaldon",
            "id": 548759,
            "node_id": "MDQ6VXNlcjU0ODc1OQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/548759?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bcwaldon",
            "html_url": "https://github.com/bcwaldon",
            "followers_url": "https://api.github.com/users/bcwaldon/followers",
            "following_url": "https://api.github.com/users/bcwaldon/following{/other_user}",
            "gists_url": "https://api.github.com/users/bcwaldon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bcwaldon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bcwaldon/subscriptions",
            "organizations_url": "https://api.github.com/users/bcwaldon/orgs",
            "repos_url": "https://api.github.com/users/bcwaldon/repos",
            "events_url": "https://api.github.com/users/bcwaldon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bcwaldon/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "extra line\n",
        "created_at": "2014-01-23T21:10:12Z",
        "updated_at": "2014-01-23T21:23:47Z",
        "html_url": "https://github.com/goraft/raft/pull/166#discussion_r9129942",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/166",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/9129942"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/166#discussion_r9129942"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/166"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/9129949",
        "pull_request_review_id": null,
        "id": 9129949,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxMjk5NDk=",
        "diff_hunk": "@@ -33,7 +33,10 @@ const (\n )\n \n const (\n-\tDefaultHeartbeatTimeout = 50 * time.Millisecond\n+\n+\t// DefaultHeartbeatInterval is the interval that the leader will send\n+\t// AppendEntriesRequests to followers to maintain leadership.\n+\tDefaultHeartbeatInterval = 50 * time.Millisecond",
        "path": "server.go",
        "position": null,
        "original_position": 8,
        "commit_id": "6ce38579a4e8d42dc6d6074665f6907010636a54",
        "original_commit_id": "1ab2774bfa2b4c94d446f1d891f29a6ce302e503",
        "user": {
            "login": "bcwaldon",
            "id": 548759,
            "node_id": "MDQ6VXNlcjU0ODc1OQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/548759?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bcwaldon",
            "html_url": "https://github.com/bcwaldon",
            "followers_url": "https://api.github.com/users/bcwaldon/followers",
            "following_url": "https://api.github.com/users/bcwaldon/following{/other_user}",
            "gists_url": "https://api.github.com/users/bcwaldon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bcwaldon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bcwaldon/subscriptions",
            "organizations_url": "https://api.github.com/users/bcwaldon/orgs",
            "repos_url": "https://api.github.com/users/bcwaldon/repos",
            "events_url": "https://api.github.com/users/bcwaldon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bcwaldon/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "maybe put that extra line here?\n",
        "created_at": "2014-01-23T21:10:19Z",
        "updated_at": "2014-01-23T21:23:47Z",
        "html_url": "https://github.com/goraft/raft/pull/166#discussion_r9129949",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/166",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/9129949"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/166#discussion_r9129949"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/166"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/9129957",
        "pull_request_review_id": null,
        "id": 9129957,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxMjk5NTc=",
        "diff_hunk": "@@ -122,7 +125,7 @@ type server struct {\n \tstopped          chan bool\n \tc                chan *ev\n \telectionTimeout  time.Duration\n-\theartbeatTimeout time.Duration\n+\theartbeatInterval time.Duration",
        "path": "server.go",
        "position": null,
        "original_position": 28,
        "commit_id": "6ce38579a4e8d42dc6d6074665f6907010636a54",
        "original_commit_id": "1ab2774bfa2b4c94d446f1d891f29a6ce302e503",
        "user": {
            "login": "bcwaldon",
            "id": 548759,
            "node_id": "MDQ6VXNlcjU0ODc1OQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/548759?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bcwaldon",
            "html_url": "https://github.com/bcwaldon",
            "followers_url": "https://api.github.com/users/bcwaldon/followers",
            "following_url": "https://api.github.com/users/bcwaldon/following{/other_user}",
            "gists_url": "https://api.github.com/users/bcwaldon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bcwaldon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bcwaldon/subscriptions",
            "organizations_url": "https://api.github.com/users/bcwaldon/orgs",
            "repos_url": "https://api.github.com/users/bcwaldon/repos",
            "events_url": "https://api.github.com/users/bcwaldon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bcwaldon/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Fmt needed\n",
        "created_at": "2014-01-23T21:10:30Z",
        "updated_at": "2014-01-23T21:23:47Z",
        "html_url": "https://github.com/goraft/raft/pull/166#discussion_r9129957",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/166",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/9129957"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/166#discussion_r9129957"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/166"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/9647294",
        "pull_request_review_id": null,
        "id": 9647294,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2NDcyOTQ=",
        "diff_hunk": "@@ -4,6 +4,7 @@ const (\n \tStateChangeEventType  = \"stateChange\"\n \tLeaderChangeEventType = \"leaderChange\"\n \tTermChangeEventType   = \"termChange\"\n+\tCommitEventType   = \"commit\"",
        "path": "event.go",
        "position": 4,
        "original_position": 4,
        "commit_id": "9a253886e73d9eaa5edbf38b17af9ce6fab323b2",
        "original_commit_id": "9a253886e73d9eaa5edbf38b17af9ce6fab323b2",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "fmt?\n",
        "created_at": "2014-02-11T22:41:50Z",
        "updated_at": "2014-02-11T22:41:50Z",
        "html_url": "https://github.com/goraft/raft/pull/178#discussion_r9647294",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/178",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/9647294"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/178#discussion_r9647294"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/178"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/9647309",
        "pull_request_review_id": null,
        "id": 9647309,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2NDczMDk=",
        "diff_hunk": "@@ -19,7 +19,7 @@ import (\n \n // A log is a collection of log entries that are persisted to durable storage.\n type Log struct {\n-\tApplyFunc   func(Command) (interface{}, error)\n+\tApplyFunc   func(*LogEntry, Command) (interface{}, error)",
        "path": "log.go",
        "position": 5,
        "original_position": 5,
        "commit_id": "9a253886e73d9eaa5edbf38b17af9ce6fab323b2",
        "original_commit_id": "9a253886e73d9eaa5edbf38b17af9ce6fab323b2",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@benbjohnson Will this break the API?\n",
        "created_at": "2014-02-11T22:42:05Z",
        "updated_at": "2014-02-11T22:42:05Z",
        "html_url": "https://github.com/goraft/raft/pull/178#discussion_r9647309",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/178",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/9647309"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/178#discussion_r9647309"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/178"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/9647436",
        "pull_request_review_id": null,
        "id": 9647436,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2NDc0MzY=",
        "diff_hunk": "@@ -19,7 +19,7 @@ import (\n \n // A log is a collection of log entries that are persisted to durable storage.\n type Log struct {\n-\tApplyFunc   func(Command) (interface{}, error)\n+\tApplyFunc   func(*LogEntry, Command) (interface{}, error)",
        "path": "log.go",
        "position": 5,
        "original_position": 5,
        "commit_id": "9a253886e73d9eaa5edbf38b17af9ce6fab323b2",
        "original_commit_id": "9a253886e73d9eaa5edbf38b17af9ce6fab323b2",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Technically, yes, but the `Log` should really be an unexported type. I'd be surprised if anyone is using `Log.ApplyFunc()`. \n",
        "created_at": "2014-02-11T22:45:18Z",
        "updated_at": "2014-02-11T22:45:18Z",
        "html_url": "https://github.com/goraft/raft/pull/178#discussion_r9647436",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/178",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/9647436"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/178#discussion_r9647436"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/178"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/9647444",
        "pull_request_review_id": null,
        "id": 9647444,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2NDc0NDQ=",
        "diff_hunk": "@@ -4,6 +4,7 @@ const (\n \tStateChangeEventType  = \"stateChange\"\n \tLeaderChangeEventType = \"leaderChange\"\n \tTermChangeEventType   = \"termChange\"\n+\tCommitEventType   = \"commit\"",
        "path": "event.go",
        "position": 4,
        "original_position": 4,
        "commit_id": "9a253886e73d9eaa5edbf38b17af9ce6fab323b2",
        "original_commit_id": "9a253886e73d9eaa5edbf38b17af9ce6fab323b2",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "oops. :)\n",
        "created_at": "2014-02-11T22:45:28Z",
        "updated_at": "2014-02-11T22:45:28Z",
        "html_url": "https://github.com/goraft/raft/pull/178#discussion_r9647444",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/178",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/9647444"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/178#discussion_r9647444"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/178"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/9471865",
        "pull_request_review_id": null,
        "id": 9471865,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk0NzE4NjU=",
        "diff_hunk": "@@ -0,0 +1,78 @@\n+package raft",
        "path": "default_commands.go",
        "position": null,
        "original_position": 1,
        "commit_id": "1f17738ec6447e6f903e294ae421f72e170aa3a2",
        "original_commit_id": "bead4942bfe2f989b2bab4044340a95b931cfa4f",
        "user": {
            "login": "philips",
            "id": 33544,
            "node_id": "MDQ6VXNlcjMzNTQ0",
            "avatar_url": "https://avatars1.githubusercontent.com/u/33544?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/philips",
            "html_url": "https://github.com/philips",
            "followers_url": "https://api.github.com/users/philips/followers",
            "following_url": "https://api.github.com/users/philips/following{/other_user}",
            "gists_url": "https://api.github.com/users/philips/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/philips/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/philips/subscriptions",
            "organizations_url": "https://api.github.com/users/philips/orgs",
            "repos_url": "https://api.github.com/users/philips/repos",
            "events_url": "https://api.github.com/users/philips/events{/privacy}",
            "received_events_url": "https://api.github.com/users/philips/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Not a huge fan of the file name. Why not just commands.go?\n",
        "created_at": "2014-02-05T18:31:22Z",
        "updated_at": "2014-02-13T15:38:18Z",
        "html_url": "https://github.com/goraft/raft/pull/174#discussion_r9471865",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/174",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/9471865"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/174#discussion_r9471865"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/174"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/9471887",
        "pull_request_review_id": null,
        "id": 9471887,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk0NzE4ODc=",
        "diff_hunk": "@@ -0,0 +1,78 @@\n+package raft",
        "path": "default_commands.go",
        "position": null,
        "original_position": 1,
        "commit_id": "1f17738ec6447e6f903e294ae421f72e170aa3a2",
        "original_commit_id": "bead4942bfe2f989b2bab4044340a95b931cfa4f",
        "user": {
            "login": "philips",
            "id": 33544,
            "node_id": "MDQ6VXNlcjMzNTQ0",
            "avatar_url": "https://avatars1.githubusercontent.com/u/33544?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/philips",
            "html_url": "https://github.com/philips",
            "followers_url": "https://api.github.com/users/philips/followers",
            "following_url": "https://api.github.com/users/philips/following{/other_user}",
            "gists_url": "https://api.github.com/users/philips/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/philips/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/philips/subscriptions",
            "organizations_url": "https://api.github.com/users/philips/orgs",
            "repos_url": "https://api.github.com/users/philips/repos",
            "events_url": "https://api.github.com/users/philips/events{/privacy}",
            "received_events_url": "https://api.github.com/users/philips/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Oh, I get it now. This is fine.\n",
        "created_at": "2014-02-05T18:31:53Z",
        "updated_at": "2014-02-13T15:38:18Z",
        "html_url": "https://github.com/goraft/raft/pull/174#discussion_r9471887",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/174",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/9471887"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/174#discussion_r9471887"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/174"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/9482055",
        "pull_request_review_id": null,
        "id": 9482055,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk0ODIwNTU=",
        "diff_hunk": "@@ -0,0 +1,78 @@\n+package raft",
        "path": "default_commands.go",
        "position": null,
        "original_position": 1,
        "commit_id": "1f17738ec6447e6f903e294ae421f72e170aa3a2",
        "original_commit_id": "bead4942bfe2f989b2bab4044340a95b931cfa4f",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu I agree with @philips. I don't think it's necessary to state that they're \"default\" commands. Also, the `nop` command isn't a default command. It's used in the server's leader loop. Can you change this to `commands.go`?\n",
        "created_at": "2014-02-05T22:41:46Z",
        "updated_at": "2014-02-13T15:38:18Z",
        "html_url": "https://github.com/goraft/raft/pull/174#discussion_r9482055",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/174",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/9482055"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/174#discussion_r9482055"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/174"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/9713192",
        "pull_request_review_id": null,
        "id": 9713192,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk3MTMxOTI=",
        "diff_hunk": "@@ -0,0 +1,78 @@\n+package raft",
        "path": "default_commands.go",
        "position": null,
        "original_position": 1,
        "commit_id": "1f17738ec6447e6f903e294ae421f72e170aa3a2",
        "original_commit_id": "bead4942bfe2f989b2bab4044340a95b931cfa4f",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@benbjohnson @philips Fixed.\n",
        "created_at": "2014-02-13T15:39:00Z",
        "updated_at": "2014-02-13T15:39:00Z",
        "html_url": "https://github.com/goraft/raft/pull/174#discussion_r9713192",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/174",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/9713192"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/174#discussion_r9713192"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/174"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/9714122",
        "pull_request_review_id": null,
        "id": 9714122,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk3MTQxMjI=",
        "diff_hunk": "@@ -2,9 +2,18 @@ package raft\n \n import (\n \t\"io\"\n+\t\"math/rand\"\n \t\"os\"\n+\t\"time\"\n )\n \n+// uint64Slice implements sort interface\n+type uint64Slice []uint64\n+\n+func (p uint64Slice) Len() int           { return len(p) }\n+func (p uint64Slice) Less(i, j int) bool { return p[i] < p[j] }\n+func (p uint64Slice) Swap(i, j int)      { p[i], p[j] = p[j], p[i] }",
        "path": "util.go",
        "position": 14,
        "original_position": 14,
        "commit_id": "1f17738ec6447e6f903e294ae421f72e170aa3a2",
        "original_commit_id": "1f17738ec6447e6f903e294ae421f72e170aa3a2",
        "user": {
            "login": "philips",
            "id": 33544,
            "node_id": "MDQ6VXNlcjMzNTQ0",
            "avatar_url": "https://avatars1.githubusercontent.com/u/33544?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/philips",
            "html_url": "https://github.com/philips",
            "followers_url": "https://api.github.com/users/philips/followers",
            "following_url": "https://api.github.com/users/philips/following{/other_user}",
            "gists_url": "https://api.github.com/users/philips/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/philips/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/philips/subscriptions",
            "organizations_url": "https://api.github.com/users/philips/orgs",
            "repos_url": "https://api.github.com/users/philips/repos",
            "events_url": "https://api.github.com/users/philips/events{/privacy}",
            "received_events_url": "https://api.github.com/users/philips/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "do these pass gofmt?\n",
        "created_at": "2014-02-13T15:58:35Z",
        "updated_at": "2014-02-13T15:58:35Z",
        "html_url": "https://github.com/goraft/raft/pull/174#discussion_r9714122",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/174",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/9714122"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/174#discussion_r9714122"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/174"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/9714166",
        "pull_request_review_id": null,
        "id": 9714166,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk3MTQxNjY=",
        "diff_hunk": "@@ -2,9 +2,18 @@ package raft\n \n import (\n \t\"io\"\n+\t\"math/rand\"\n \t\"os\"\n+\t\"time\"\n )\n \n+// uint64Slice implements sort interface\n+type uint64Slice []uint64\n+\n+func (p uint64Slice) Len() int           { return len(p) }\n+func (p uint64Slice) Less(i, j int) bool { return p[i] < p[j] }\n+func (p uint64Slice) Swap(i, j int)      { p[i], p[j] = p[j], p[i] }",
        "path": "util.go",
        "position": 14,
        "original_position": 14,
        "commit_id": "1f17738ec6447e6f903e294ae421f72e170aa3a2",
        "original_commit_id": "1f17738ec6447e6f903e294ae421f72e170aa3a2",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@philips Yes. \n",
        "created_at": "2014-02-13T15:59:31Z",
        "updated_at": "2014-02-13T15:59:31Z",
        "html_url": "https://github.com/goraft/raft/pull/174#discussion_r9714166",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/174",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/9714166"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/174#discussion_r9714166"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/174"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/9729498",
        "pull_request_review_id": null,
        "id": 9729498,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk3Mjk0OTg=",
        "diff_hunk": "@@ -674,7 +674,13 @@ func (s *server) followerLoop() {\n \n // The event loop that is run when the server is in a Candidate state.\n func (s *server) candidateLoop() {\n-\tlastLogIndex, lastLogTerm := s.log.lastInfo()\n+\t// meaningless to go through candidate loop\n+\t// if there is only one member in the raft cluster\n+\t// shortcut here\n+\tif s.MemberCount() == 1 {",
        "path": "server.go",
        "position": null,
        "original_position": 8,
        "commit_id": "02d5905607677f0498d86f77f939e69491ddc38b",
        "original_commit_id": "9d8798579ce59e14c08cafb8f07a906ee27edd5a",
        "user": {
            "login": "philips",
            "id": 33544,
            "node_id": "MDQ6VXNlcjMzNTQ0",
            "avatar_url": "https://avatars1.githubusercontent.com/u/33544?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/philips",
            "html_url": "https://github.com/philips",
            "followers_url": "https://api.github.com/users/philips/followers",
            "following_url": "https://api.github.com/users/philips/following{/other_user}",
            "gists_url": "https://api.github.com/users/philips/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/philips/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/philips/subscriptions",
            "organizations_url": "https://api.github.com/users/philips/orgs",
            "repos_url": "https://api.github.com/users/philips/repos",
            "events_url": "https://api.github.com/users/philips/events{/privacy}",
            "received_events_url": "https://api.github.com/users/philips/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I get nervous whenever code gets special cased.\n",
        "created_at": "2014-02-13T21:57:36Z",
        "updated_at": "2014-02-14T00:05:24Z",
        "html_url": "https://github.com/goraft/raft/pull/179#discussion_r9729498",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/179",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/9729498"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/179#discussion_r9729498"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/179"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/9729657",
        "pull_request_review_id": null,
        "id": 9729657,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk3Mjk2NTc=",
        "diff_hunk": "@@ -683,75 +689,69 @@ func (s *server) candidateLoop() {\n \t\ts.DispatchEvent(newEvent(LeaderChangeEventType, s.leader, prevLeader))\n \t}\n \n+\tlastLogIndex, lastLogTerm := s.log.lastInfo()\n+\tdoVote := true\n+\tvotesGranted := 0\n+\tvar timeoutChan <-chan time.Time\n+\tvar respChan chan *RequestVoteResponse\n+\n \tfor s.State() == Candidate {\n-\t\t// Increment current term, vote for self.\n-\t\ts.currentTerm++\n-\t\ts.votedFor = s.name\n-\n-\t\t// Send RequestVote RPCs to all other servers.\n-\t\trespChan := make(chan *RequestVoteResponse, len(s.peers))\n-\t\tfor _, peer := range s.peers {\n-\t\t\tgo peer.sendVoteRequest(newRequestVoteRequest(s.currentTerm, s.name, lastLogIndex, lastLogTerm), respChan)\n-\t\t}\n+\t\tif doVote {\n+\t\t\t// Increment current term, vote for self.\n+\t\t\ts.currentTerm++\n+\t\t\ts.votedFor = s.name\n \n-\t\t// Wait for either:\n-\t\t//   * Votes received from majority of servers: become leader\n-\t\t//   * AppendEntries RPC received from new leader: step down.\n-\t\t//   * Election timeout elapses without election resolution: increment term, start new election\n-\t\t//   * Discover higher term: step down (\u00a75.1)\n-\t\tvotesGranted := 1\n-\t\ttimeoutChan := afterBetween(s.ElectionTimeout(), s.ElectionTimeout()*2)\n-\t\ttimeout := false\n-\n-\t\tfor {\n-\t\t\t// If we received enough votes then stop waiting for more votes.\n-\t\t\ts.debugln(\"server.candidate.votes: \", votesGranted, \" quorum:\", s.QuorumSize())\n-\t\t\tif votesGranted >= s.QuorumSize() {\n-\t\t\t\ts.setState(Leader)\n-\t\t\t\tbreak\n+\t\t\t// Send RequestVote RPCs to all other servers.\n+\t\t\trespChan = make(chan *RequestVoteResponse, len(s.peers))\n+\t\t\tfor _, peer := range s.peers {\n+\t\t\t\tgo peer.sendVoteRequest(newRequestVoteRequest(s.currentTerm, s.name, lastLogIndex, lastLogTerm), respChan)\n \t\t\t}\n \n-\t\t\t// Collect votes from peers.\n-\t\t\tselect {\n-\t\t\tcase resp := <-respChan:\n-\t\t\t\tif resp.VoteGranted {\n-\t\t\t\t\ts.debugln(\"server.candidate.vote.granted: \", votesGranted)\n-\t\t\t\t\tvotesGranted++\n-\t\t\t\t} else if resp.Term > s.currentTerm {\n-\t\t\t\t\ts.debugln(\"server.candidate.vote.failed\")\n-\t\t\t\t\ts.setCurrentTerm(resp.Term, \"\", false)\n-\t\t\t\t} else {\n-\t\t\t\t\ts.debugln(\"server.candidate.vote: denied\")\n-\t\t\t\t}\n+\t\t\t// Wait for either:\n+\t\t\t//   * Votes received from majority of servers: become leader\n+\t\t\t//   * AppendEntries RPC received from new leader: step down.\n+\t\t\t//   * Election timeout elapses without election resolution: increment term, start new election\n+\t\t\t//   * Discover higher term: step down (\u00a75.1)\n+\t\t\tvotesGranted = 1\n+\t\t\ttimeoutChan = afterBetween(s.ElectionTimeout(), s.ElectionTimeout()*2)",
        "path": "server.go",
        "position": 73,
        "original_position": 79,
        "commit_id": "02d5905607677f0498d86f77f939e69491ddc38b",
        "original_commit_id": "9d8798579ce59e14c08cafb8f07a906ee27edd5a",
        "user": {
            "login": "philips",
            "id": 33544,
            "node_id": "MDQ6VXNlcjMzNTQ0",
            "avatar_url": "https://avatars1.githubusercontent.com/u/33544?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/philips",
            "html_url": "https://github.com/philips",
            "followers_url": "https://api.github.com/users/philips/followers",
            "following_url": "https://api.github.com/users/philips/following{/other_user}",
            "gists_url": "https://api.github.com/users/philips/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/philips/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/philips/subscriptions",
            "organizations_url": "https://api.github.com/users/philips/orgs",
            "repos_url": "https://api.github.com/users/philips/repos",
            "events_url": "https://api.github.com/users/philips/events{/privacy}",
            "received_events_url": "https://api.github.com/users/philips/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "aside: it seems like we should should be able to come up with a better name for this function.\n",
        "created_at": "2014-02-13T22:01:34Z",
        "updated_at": "2014-02-14T00:05:24Z",
        "html_url": "https://github.com/goraft/raft/pull/179#discussion_r9729657",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/179",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/9729657"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/179#discussion_r9729657"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/179"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/9729851",
        "pull_request_review_id": null,
        "id": 9729851,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk3Mjk4NTE=",
        "diff_hunk": "@@ -674,7 +674,13 @@ func (s *server) followerLoop() {\n \n // The event loop that is run when the server is in a Candidate state.\n func (s *server) candidateLoop() {\n-\tlastLogIndex, lastLogTerm := s.log.lastInfo()\n+\t// meaningless to go through candidate loop\n+\t// if there is only one member in the raft cluster\n+\t// shortcut here\n+\tif s.MemberCount() == 1 {",
        "path": "server.go",
        "position": null,
        "original_position": 8,
        "commit_id": "02d5905607677f0498d86f77f939e69491ddc38b",
        "original_commit_id": "9d8798579ce59e14c08cafb8f07a906ee27edd5a",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@philips Well... I removed it. Just a shortcut. \n",
        "created_at": "2014-02-13T22:05:54Z",
        "updated_at": "2014-02-14T00:05:24Z",
        "html_url": "https://github.com/goraft/raft/pull/179#discussion_r9729851",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/179",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/9729851"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/179#discussion_r9729851"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/179"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/9735266",
        "pull_request_review_id": null,
        "id": 9735266,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk3MzUyNjY=",
        "diff_hunk": "@@ -139,6 +139,47 @@ func TestServerRequestVoteDenyIfCandidateLogIsBehind(t *testing.T) {\n \t}\n }\n \n+func TestProcessVoteResponse(t *testing.T) {",
        "path": "server_test.go",
        "position": 4,
        "original_position": 4,
        "commit_id": "02d5905607677f0498d86f77f939e69491ddc38b",
        "original_commit_id": "02d5905607677f0498d86f77f939e69491ddc38b",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@benbjohnson Add process function allows me to do this kind of test. \nI can create all kinds of input, then process by a static server, then examine the state changes. \n",
        "created_at": "2014-02-14T00:51:01Z",
        "updated_at": "2014-02-14T00:51:01Z",
        "html_url": "https://github.com/goraft/raft/pull/179#discussion_r9735266",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/179",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/9735266"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/179#discussion_r9735266"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/179"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/9560246",
        "pull_request_review_id": null,
        "id": 9560246,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1NjAyNDY=",
        "diff_hunk": "@@ -36,6 +36,7 @@ These projects are built on go-raft:\n - [goraft/raftd](https://github.com/goraft/raftd) - A reference implementation for using the go-raft library for distributed consensus.\n - [skynetservices/skydns](https://github.com/skynetservices/skydns) - DNS for skynet or any other service discovery.\n - [influxdb/influxdb](https://github.com/influxdb/influxdb) - An open-source, distributed, time series, events, and metrics database.\n+- [Weed File System](https://weed-fs.googlecode.com) - An distributed key-to-file system based on Haystack, with O(1) disk access for each request.",
        "path": "README.md",
        "position": null,
        "original_position": 4,
        "commit_id": "3c0126ed0d92874a0c21214d70c71cf29b578f7b",
        "original_commit_id": "2e5542cdff6d0ef21782f42a68e4be2e10d2e39b",
        "user": {
            "login": "philips",
            "id": 33544,
            "node_id": "MDQ6VXNlcjMzNTQ0",
            "avatar_url": "https://avatars1.githubusercontent.com/u/33544?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/philips",
            "html_url": "https://github.com/philips",
            "followers_url": "https://api.github.com/users/philips/followers",
            "following_url": "https://api.github.com/users/philips/following{/other_user}",
            "gists_url": "https://api.github.com/users/philips/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/philips/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/philips/subscriptions",
            "organizations_url": "https://api.github.com/users/philips/orgs",
            "repos_url": "https://api.github.com/users/philips/repos",
            "events_url": "https://api.github.com/users/philips/events{/privacy}",
            "received_events_url": "https://api.github.com/users/philips/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "A distributed key-to-file instead of An\n",
        "created_at": "2014-02-08T00:08:37Z",
        "updated_at": "2014-02-14T21:02:11Z",
        "html_url": "https://github.com/goraft/raft/pull/176#discussion_r9560246",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/176",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/9560246"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/176#discussion_r9560246"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/176"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/9775350",
        "pull_request_review_id": null,
        "id": 9775350,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk3NzUzNTA=",
        "diff_hunk": "@@ -554,28 +554,22 @@ func (s *server) setCurrentTerm(term uint64, leaderName string, append bool) {\n func (s *server) loop() {\n \tdefer s.debugln(\"server.loop.end\")\n \n-\tfor {\n+\tfor s.state != Stopped {\n \t\tstate := s.State()\n \n \t\ts.debugln(\"server.loop.run \", state)\n \t\tswitch state {\n \t\tcase Follower:\n \t\t\ts.followerLoop()\n-\n \t\tcase Candidate:\n \t\t\ts.candidateLoop()\n-\n \t\tcase Leader:\n \t\t\ts.leaderLoop()\n-\n \t\tcase Snapshotting:\n \t\t\ts.snapshotLoop()\n-\n-\t\tcase Stopped:\n-\t\t\ts.stopped <- true\n-\t\t\treturn\n \t\t}\n \t}\n+\ts.stopped <- true",
        "path": "server.go",
        "position": 36,
        "original_position": 36,
        "commit_id": "4a2652e8cfa5c86ddb0b5f026512ef4a3f3d3e1e",
        "original_commit_id": "4a2652e8cfa5c86ddb0b5f026512ef4a3f3d3e1e",
        "user": {
            "login": "philips",
            "id": 33544,
            "node_id": "MDQ6VXNlcjMzNTQ0",
            "avatar_url": "https://avatars1.githubusercontent.com/u/33544?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/philips",
            "html_url": "https://github.com/philips",
            "followers_url": "https://api.github.com/users/philips/followers",
            "following_url": "https://api.github.com/users/philips/following{/other_user}",
            "gists_url": "https://api.github.com/users/philips/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/philips/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/philips/subscriptions",
            "organizations_url": "https://api.github.com/users/philips/orgs",
            "repos_url": "https://api.github.com/users/philips/repos",
            "events_url": "https://api.github.com/users/philips/events{/privacy}",
            "received_events_url": "https://api.github.com/users/philips/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Is there a reason we don't use close(s.stopped)?\n",
        "created_at": "2014-02-16T01:01:09Z",
        "updated_at": "2014-02-16T01:01:09Z",
        "html_url": "https://github.com/goraft/raft/pull/182#discussion_r9775350",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/182",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/9775350"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/182#discussion_r9775350"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/182"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/9775364",
        "pull_request_review_id": null,
        "id": 9775364,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk3NzUzNjQ=",
        "diff_hunk": "@@ -554,28 +554,22 @@ func (s *server) setCurrentTerm(term uint64, leaderName string, append bool) {\n func (s *server) loop() {\n \tdefer s.debugln(\"server.loop.end\")\n \n-\tfor {\n+\tfor s.state != Stopped {\n \t\tstate := s.State()\n \n \t\ts.debugln(\"server.loop.run \", state)\n \t\tswitch state {\n \t\tcase Follower:\n \t\t\ts.followerLoop()\n-\n \t\tcase Candidate:\n \t\t\ts.candidateLoop()\n-\n \t\tcase Leader:\n \t\t\ts.leaderLoop()\n-\n \t\tcase Snapshotting:\n \t\t\ts.snapshotLoop()\n-\n-\t\tcase Stopped:\n-\t\t\ts.stopped <- true\n-\t\t\treturn\n \t\t}\n \t}\n+\ts.stopped <- true",
        "path": "server.go",
        "position": 36,
        "original_position": 36,
        "commit_id": "4a2652e8cfa5c86ddb0b5f026512ef4a3f3d3e1e",
        "original_commit_id": "4a2652e8cfa5c86ddb0b5f026512ef4a3f3d3e1e",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@philips Ignore this pr. It is not a good way to do stop. I will send another pr.\n",
        "created_at": "2014-02-16T01:06:25Z",
        "updated_at": "2014-02-16T01:06:25Z",
        "html_url": "https://github.com/goraft/raft/pull/182#discussion_r9775364",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/182",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/9775364"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/182#discussion_r9775364"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/182"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/9775464",
        "pull_request_review_id": null,
        "id": 9775464,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk3NzU0NjQ=",
        "diff_hunk": "@@ -472,10 +470,11 @@ func (s *server) Start() error {\n \n // Shuts down the server.\n func (s *server) Stop() {\n-\ts.send(&stopValue)\n+\tstop := make(chan bool)",
        "path": "server.go",
        "position": 32,
        "original_position": 32,
        "commit_id": "cd230b96c377b2615d64bba486e0c8ec575f2972",
        "original_commit_id": "cd230b96c377b2615d64bba486e0c8ec575f2972",
        "user": {
            "login": "philips",
            "id": 33544,
            "node_id": "MDQ6VXNlcjMzNTQ0",
            "avatar_url": "https://avatars1.githubusercontent.com/u/33544?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/philips",
            "html_url": "https://github.com/philips",
            "followers_url": "https://api.github.com/users/philips/followers",
            "following_url": "https://api.github.com/users/philips/following{/other_user}",
            "gists_url": "https://api.github.com/users/philips/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/philips/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/philips/subscriptions",
            "organizations_url": "https://api.github.com/users/philips/orgs",
            "repos_url": "https://api.github.com/users/philips/repos",
            "events_url": "https://api.github.com/users/philips/events{/privacy}",
            "received_events_url": "https://api.github.com/users/philips/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "nip: `chan<- bool`\n",
        "created_at": "2014-02-16T01:42:08Z",
        "updated_at": "2014-02-16T01:42:08Z",
        "html_url": "https://github.com/goraft/raft/pull/183#discussion_r9775464",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/183",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/9775464"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/183#discussion_r9775464"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/183"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/9775509",
        "pull_request_review_id": null,
        "id": 9775509,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk3NzU1MDk=",
        "diff_hunk": "@@ -472,10 +470,11 @@ func (s *server) Start() error {\n \n // Shuts down the server.\n func (s *server) Stop() {\n-\ts.send(&stopValue)\n+\tstop := make(chan bool)",
        "path": "server.go",
        "position": 32,
        "original_position": 32,
        "commit_id": "cd230b96c377b2615d64bba486e0c8ec575f2972",
        "original_commit_id": "cd230b96c377b2615d64bba486e0c8ec575f2972",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This is not possible. Since when you will pass this channel to another goroutine. That goroutine needs to send to the channel.\n",
        "created_at": "2014-02-16T01:54:48Z",
        "updated_at": "2014-02-16T01:54:48Z",
        "html_url": "https://github.com/goraft/raft/pull/183#discussion_r9775509",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/183",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/9775509"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/183#discussion_r9775509"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/183"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/9802409",
        "pull_request_review_id": null,
        "id": 9802409,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk4MDI0MDk=",
        "diff_hunk": "@@ -153,7 +153,7 @@ func (p *Peer) flush() {\n \tif entries != nil {\n \t\tp.sendAppendEntriesRequest(newAppendEntriesRequest(term, prevLogIndex, prevLogTerm, p.server.log.CommitIndex(), p.server.name, entries))\n \t} else {\n-\t\tp.sendSnapshotRequest(newSnapshotRequest(p.server.name, p.server.lastSnapshot))\n+\t\tp.sendSnapshotRequest(newSnapshotRequest(p.server.name, p.server.snapshot))",
        "path": "peer.go",
        "position": 5,
        "original_position": 5,
        "commit_id": "80173a747a74cbda7b91a01323457d98a257d69b",
        "original_commit_id": "80173a747a74cbda7b91a01323457d98a257d69b",
        "user": {
            "login": "philips",
            "id": 33544,
            "node_id": "MDQ6VXNlcjMzNTQ0",
            "avatar_url": "https://avatars1.githubusercontent.com/u/33544?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/philips",
            "html_url": "https://github.com/philips",
            "followers_url": "https://api.github.com/users/philips/followers",
            "following_url": "https://api.github.com/users/philips/following{/other_user}",
            "gists_url": "https://api.github.com/users/philips/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/philips/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/philips/subscriptions",
            "organizations_url": "https://api.github.com/users/philips/orgs",
            "repos_url": "https://api.github.com/users/philips/repos",
            "events_url": "https://api.github.com/users/philips/events{/privacy}",
            "received_events_url": "https://api.github.com/users/philips/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "thank you, that name was confusing.\n",
        "created_at": "2014-02-17T19:44:05Z",
        "updated_at": "2014-02-17T19:44:05Z",
        "html_url": "https://github.com/goraft/raft/pull/184#discussion_r9802409",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/184",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/9802409"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/184#discussion_r9802409"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/184"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/9802418",
        "pull_request_review_id": null,
        "id": 9802418,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk4MDI0MTg=",
        "diff_hunk": "@@ -125,8 +125,8 @@ type server struct {\n \telectionTimeout   time.Duration\n \theartbeatInterval time.Duration\n \n-\tcurrentSnapshot         *Snapshot\n-\tlastSnapshot            *Snapshot\n+\tpendingSnapshot         *Snapshot",
        "path": "server.go",
        "position": 6,
        "original_position": 6,
        "commit_id": "80173a747a74cbda7b91a01323457d98a257d69b",
        "original_commit_id": "80173a747a74cbda7b91a01323457d98a257d69b",
        "user": {
            "login": "philips",
            "id": 33544,
            "node_id": "MDQ6VXNlcjMzNTQ0",
            "avatar_url": "https://avatars1.githubusercontent.com/u/33544?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/philips",
            "html_url": "https://github.com/philips",
            "followers_url": "https://api.github.com/users/philips/followers",
            "following_url": "https://api.github.com/users/philips/following{/other_user}",
            "gists_url": "https://api.github.com/users/philips/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/philips/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/philips/subscriptions",
            "organizations_url": "https://api.github.com/users/philips/orgs",
            "repos_url": "https://api.github.com/users/philips/repos",
            "events_url": "https://api.github.com/users/philips/events{/privacy}",
            "received_events_url": "https://api.github.com/users/philips/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "a comment on when this varilable is used would be helpful.\n",
        "created_at": "2014-02-17T19:44:23Z",
        "updated_at": "2014-02-17T19:44:23Z",
        "html_url": "https://github.com/goraft/raft/pull/184#discussion_r9802418",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/184",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/9802418"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/184#discussion_r9802418"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/184"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/9802460",
        "pull_request_review_id": null,
        "id": 9802460,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk4MDI0NjA=",
        "diff_hunk": "@@ -1082,30 +1082,35 @@ func (s *server) RemovePeer(name string) error {\n //--------------------------------------\n \n func (s *server) TakeSnapshot() error {\n-\t// TODO: put a snapshot mutex\n-\ts.debugln(\"take Snapshot\")\n+\tif s.stateMachine == nil {\n+\t\treturn errors.New(\"Snapshot: Cannot create snapshot. Missing state machine.\")\n+\t}\n \n+\t// Shortcut without lock\n \t// Exit if the server is currently creating a snapshot.\n-\tif s.currentSnapshot != nil {\n-\t\treturn errors.New(\"handling snapshot\")\n+\tif s.pendingSnapshot != nil {\n+\t\treturn errors.New(\"Snapshot: Last snapshot is not finished.\")\n \t}\n \n-\t// Exit if there are no logs yet in the system.\n+\t// TODO: acquire the lock and no more committed is allowed\n+\t// This will be done after finishing refactoring heartbeat\n+\ts.debugln(\"take.snapshot\")\n+\n \tlastIndex, lastTerm := s.log.commitInfo()\n-\tpath := s.SnapshotPath(lastIndex, lastTerm)\n-\tif lastIndex == 0 {\n-\t\treturn errors.New(\"No logs\")\n+\n+\t// check if there is log has been committed since the\n+\t// last snapshot.\n+\tif lastIndex == s.log.startIndex {",
        "path": "server.go",
        "position": 41,
        "original_position": 41,
        "commit_id": "80173a747a74cbda7b91a01323457d98a257d69b",
        "original_commit_id": "80173a747a74cbda7b91a01323457d98a257d69b",
        "user": {
            "login": "philips",
            "id": 33544,
            "node_id": "MDQ6VXNlcjMzNTQ0",
            "avatar_url": "https://avatars1.githubusercontent.com/u/33544?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/philips",
            "html_url": "https://github.com/philips",
            "followers_url": "https://api.github.com/users/philips/followers",
            "following_url": "https://api.github.com/users/philips/following{/other_user}",
            "gists_url": "https://api.github.com/users/philips/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/philips/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/philips/subscriptions",
            "organizations_url": "https://api.github.com/users/philips/orgs",
            "repos_url": "https://api.github.com/users/philips/repos",
            "events_url": "https://api.github.com/users/philips/events{/privacy}",
            "received_events_url": "https://api.github.com/users/philips/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "actually. NACK on this commit. Rename variable patches shouldn't introduce different logic. Can you rename the variables and then change these code paths in a second commit?\n",
        "created_at": "2014-02-17T19:46:16Z",
        "updated_at": "2014-02-17T19:46:16Z",
        "html_url": "https://github.com/goraft/raft/pull/184#discussion_r9802460",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/184",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/9802460"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/184#discussion_r9802460"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/184"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/9803671",
        "pull_request_review_id": null,
        "id": 9803671,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk4MDM2NzE=",
        "diff_hunk": "@@ -1082,30 +1082,35 @@ func (s *server) RemovePeer(name string) error {\n //--------------------------------------\n \n func (s *server) TakeSnapshot() error {\n-\t// TODO: put a snapshot mutex\n-\ts.debugln(\"take Snapshot\")\n+\tif s.stateMachine == nil {\n+\t\treturn errors.New(\"Snapshot: Cannot create snapshot. Missing state machine.\")\n+\t}\n \n+\t// Shortcut without lock\n \t// Exit if the server is currently creating a snapshot.\n-\tif s.currentSnapshot != nil {\n-\t\treturn errors.New(\"handling snapshot\")\n+\tif s.pendingSnapshot != nil {\n+\t\treturn errors.New(\"Snapshot: Last snapshot is not finished.\")\n \t}\n \n-\t// Exit if there are no logs yet in the system.\n+\t// TODO: acquire the lock and no more committed is allowed\n+\t// This will be done after finishing refactoring heartbeat\n+\ts.debugln(\"take.snapshot\")\n+\n \tlastIndex, lastTerm := s.log.commitInfo()\n-\tpath := s.SnapshotPath(lastIndex, lastTerm)\n-\tif lastIndex == 0 {\n-\t\treturn errors.New(\"No logs\")\n+\n+\t// check if there is log has been committed since the\n+\t// last snapshot.\n+\tif lastIndex == s.log.startIndex {",
        "path": "server.go",
        "position": 41,
        "original_position": 41,
        "commit_id": "80173a747a74cbda7b91a01323457d98a257d69b",
        "original_commit_id": "80173a747a74cbda7b91a01323457d98a257d69b",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@philips OK. I will separate this into another pull request. \n",
        "created_at": "2014-02-17T20:36:48Z",
        "updated_at": "2014-02-17T20:36:48Z",
        "html_url": "https://github.com/goraft/raft/pull/184#discussion_r9803671",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/184",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/9803671"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/184#discussion_r9803671"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/184"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/9775180",
        "pull_request_review_id": null,
        "id": 9775180,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk3NzUxODA=",
        "diff_hunk": "@@ -490,48 +489,45 @@ func (s *server) Running() bool {\n // Term\n //--------------------------------------\n \n-// Sets the current term for the server. This is only used when an external\n-// current term is found.\n-func (s *server) setCurrentTerm(term uint64, leaderName string, append bool) {\n+// updates the current term for the server. This is only used when a larger\n+// external term is found.\n+func (s *server) updateCurrentTerm(term uint64, leaderName string) {\n \ts.mutex.Lock()\n \tdefer s.mutex.Unlock()\n \n+\tif term <= s.currentTerm {\n+\t\tpanic(\"updteCurrentTerm: update is called when term is not larger than currentTerm\")\n+\t}\n+\n \t// Store previous values temporarily.\n-\tprevState := s.state\n \tprevTerm := s.currentTerm\n \tprevLeader := s.leader\n \n-\tif term > s.currentTerm {\n-\t\t// stop heartbeats before step-down\n-\t\tif s.state == Leader {\n-\t\t\ts.mutex.Unlock()\n-\t\t\tfor _, peer := range s.peers {\n-\t\t\t\tpeer.stopHeartbeat(false)\n-\t\t\t}\n-\t\t\ts.mutex.Lock()\n+\t// set currentTerm = T, convert to follower (\u00a75.1)\n+\t// stop heartbeats before step-down\n+\tif s.state == Leader {\n+\t\ts.mutex.Unlock()",
        "path": "server.go",
        "position": 44,
        "original_position": 45,
        "commit_id": "67fe8a10e5cc82e4f876b8fea82dd857d1551504",
        "original_commit_id": "61d6f8e066ab8fbc08e0e4993c62049bae0ee534",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "These locks will go away after some more refactoring. \n",
        "created_at": "2014-02-16T00:19:05Z",
        "updated_at": "2014-02-18T00:50:36Z",
        "html_url": "https://github.com/goraft/raft/pull/181#discussion_r9775180",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/181",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/9775180"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/181#discussion_r9775180"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/181"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/9775768",
        "pull_request_review_id": null,
        "id": 9775768,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk3NzU3Njg=",
        "diff_hunk": "@@ -292,9 +292,8 @@ func (s *server) setState(state string) {\n \t}\n \n \t// Dispatch state and leader change events.\n-\tif prevState != state {\n-\t\ts.DispatchEvent(newEvent(StateChangeEventType, s.state, prevState))\n-\t}\n+\ts.DispatchEvent(newEvent(StateChangeEventType, s.state, prevState))",
        "path": "server.go",
        "position": 7,
        "original_position": 7,
        "commit_id": "67fe8a10e5cc82e4f876b8fea82dd857d1551504",
        "original_commit_id": "61d6f8e066ab8fbc08e0e4993c62049bae0ee534",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Why are we not checking if it's changed? It's not a state change event if the value doesn't change.\n",
        "created_at": "2014-02-16T03:43:19Z",
        "updated_at": "2014-02-18T00:50:36Z",
        "html_url": "https://github.com/goraft/raft/pull/181#discussion_r9775768",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/181",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/9775768"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/181#discussion_r9775768"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/181"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/9775775",
        "pull_request_review_id": null,
        "id": 9775775,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk3NzU3NzU=",
        "diff_hunk": "@@ -490,48 +489,45 @@ func (s *server) Running() bool {\n // Term\n //--------------------------------------\n \n-// Sets the current term for the server. This is only used when an external\n-// current term is found.\n-func (s *server) setCurrentTerm(term uint64, leaderName string, append bool) {\n+// updates the current term for the server. This is only used when a larger\n+// external term is found.\n+func (s *server) updateCurrentTerm(term uint64, leaderName string) {\n \ts.mutex.Lock()\n \tdefer s.mutex.Unlock()\n \n+\tif term <= s.currentTerm {\n+\t\tpanic(\"updteCurrentTerm: update is called when term is not larger than currentTerm\")\n+\t}\n+",
        "path": "server.go",
        "position": null,
        "original_position": 28,
        "commit_id": "67fe8a10e5cc82e4f876b8fea82dd857d1551504",
        "original_commit_id": "61d6f8e066ab8fbc08e0e4993c62049bae0ee534",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu I wrote an assertion function for Bolt that I liked quite a bit. It condenses these down to one line and doesn't cause you to have unreachable lines when doing code coverage.\n\nhttps://github.com/boltdb/bolt/blob/2b5e4403161acec06c169ce286b2761ee96a2ce1/assert.go\n\nThen all you need to do is:\n\n``` go\nfunc doSomething() {\n    _assert(term > s.currentTerm, \"updateCurrentTerm() is called when term (%d) is not larger than current term (%d)\", term, s.currentTerm)\n}\n```\n\nI had to prefix with an underscore since it conflicts with testify's assert package.\n",
        "created_at": "2014-02-16T03:46:41Z",
        "updated_at": "2014-02-18T00:50:36Z",
        "html_url": "https://github.com/goraft/raft/pull/181#discussion_r9775775",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/181",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/9775775"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/181#discussion_r9775775"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/181"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/9775784",
        "pull_request_review_id": null,
        "id": 9775784,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk3NzU3ODQ=",
        "diff_hunk": "@@ -884,8 +876,20 @@ func (s *server) processAppendEntriesRequest(req *AppendEntriesRequest) (*Append\n \t\treturn newAppendEntriesResponse(s.currentTerm, false, s.log.currentIndex(), s.log.CommitIndex()), false\n \t}\n \n-\t// Update term and leader.\n-\ts.setCurrentTerm(req.Term, req.LeaderName, true)\n+\tif req.Term == s.currentTerm {\n+\t\tif s.state == Leader {\n+\t\t\tmsg := fmt.Sprintf(\"leader.elected.at.same.term.%d\\n\", s.currentTerm)\n+\t\t\tpanic(msg)\n+\t\t}",
        "path": "server.go",
        "position": null,
        "original_position": 121,
        "commit_id": "67fe8a10e5cc82e4f876b8fea82dd857d1551504",
        "original_commit_id": "61d6f8e066ab8fbc08e0e4993c62049bae0ee534",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu This is another place where it would be nice to do an assertion.\n",
        "created_at": "2014-02-16T03:50:15Z",
        "updated_at": "2014-02-18T00:50:36Z",
        "html_url": "https://github.com/goraft/raft/pull/181#discussion_r9775784",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/181",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/9775784"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/181#discussion_r9775784"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/181"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/9775798",
        "pull_request_review_id": null,
        "id": 9775798,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk3NzU3OTg=",
        "diff_hunk": "@@ -292,9 +292,8 @@ func (s *server) setState(state string) {\n \t}\n \n \t// Dispatch state and leader change events.\n-\tif prevState != state {\n-\t\ts.DispatchEvent(newEvent(StateChangeEventType, s.state, prevState))\n-\t}\n+\ts.DispatchEvent(newEvent(StateChangeEventType, s.state, prevState))",
        "path": "server.go",
        "position": 7,
        "original_position": 7,
        "commit_id": "67fe8a10e5cc82e4f876b8fea82dd857d1551504",
        "original_commit_id": "61d6f8e066ab8fbc08e0e4993c62049bae0ee534",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@benbjohnson I think this function should only be called when there is a state change. I have removed the unnecessary calls of this function. \n",
        "created_at": "2014-02-16T04:07:26Z",
        "updated_at": "2014-02-18T00:50:36Z",
        "html_url": "https://github.com/goraft/raft/pull/181#discussion_r9775798",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/181",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/9775798"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/181#discussion_r9775798"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/181"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/9775803",
        "pull_request_review_id": null,
        "id": 9775803,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk3NzU4MDM=",
        "diff_hunk": "@@ -490,48 +489,45 @@ func (s *server) Running() bool {\n // Term\n //--------------------------------------\n \n-// Sets the current term for the server. This is only used when an external\n-// current term is found.\n-func (s *server) setCurrentTerm(term uint64, leaderName string, append bool) {\n+// updates the current term for the server. This is only used when a larger\n+// external term is found.\n+func (s *server) updateCurrentTerm(term uint64, leaderName string) {\n \ts.mutex.Lock()\n \tdefer s.mutex.Unlock()\n \n+\tif term <= s.currentTerm {\n+\t\tpanic(\"updteCurrentTerm: update is called when term is not larger than currentTerm\")\n+\t}\n+",
        "path": "server.go",
        "position": null,
        "original_position": 28,
        "commit_id": "67fe8a10e5cc82e4f876b8fea82dd857d1551504",
        "original_commit_id": "61d6f8e066ab8fbc08e0e4993c62049bae0ee534",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I will do as you suggest. I think I will add assert at several other place for debugging purpose. \nI want to make test coverage = 100% and test all state machines changes. \n",
        "created_at": "2014-02-16T04:08:41Z",
        "updated_at": "2014-02-18T00:50:36Z",
        "html_url": "https://github.com/goraft/raft/pull/181#discussion_r9775803",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/181",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/9775803"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/181#discussion_r9775803"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/181"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/9775804",
        "pull_request_review_id": null,
        "id": 9775804,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk3NzU4MDQ=",
        "diff_hunk": "@@ -884,8 +876,20 @@ func (s *server) processAppendEntriesRequest(req *AppendEntriesRequest) (*Append\n \t\treturn newAppendEntriesResponse(s.currentTerm, false, s.log.currentIndex(), s.log.CommitIndex()), false\n \t}\n \n-\t// Update term and leader.\n-\ts.setCurrentTerm(req.Term, req.LeaderName, true)\n+\tif req.Term == s.currentTerm {\n+\t\tif s.state == Leader {\n+\t\t\tmsg := fmt.Sprintf(\"leader.elected.at.same.term.%d\\n\", s.currentTerm)\n+\t\t\tpanic(msg)\n+\t\t}",
        "path": "server.go",
        "position": null,
        "original_position": 121,
        "commit_id": "67fe8a10e5cc82e4f876b8fea82dd857d1551504",
        "original_commit_id": "61d6f8e066ab8fbc08e0e4993c62049bae0ee534",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@benbjohnson will do.\n",
        "created_at": "2014-02-16T04:08:54Z",
        "updated_at": "2014-02-18T00:50:36Z",
        "html_url": "https://github.com/goraft/raft/pull/181#discussion_r9775804",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/181",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/9775804"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/181#discussion_r9775804"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/181"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/9976805",
        "pull_request_review_id": null,
        "id": 9976805,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NzY4MDU=",
        "diff_hunk": "@@ -125,8 +125,13 @@ type server struct {\n \telectionTimeout   time.Duration\n \theartbeatInterval time.Duration\n \n-\tsnapshot                *Snapshot\n-\tpendingSnapshot         *Snapshot\n+\tsnapshot *Snapshot\n+\t// pending snapshot is an unfinished snapshot\n+\t// after the snapshot is safely saved to disk\n+\t// the pendingSnapshot will be set to snapshot\n+\t// and cleared to nil",
        "path": "server.go",
        "position": null,
        "original_position": 10,
        "commit_id": "7debffbcbbfa20a2d233def72daa57315f1096a8",
        "original_commit_id": "e533df6ed63a24c4ebbbd888eff98217441f9564",
        "user": {
            "login": "philips",
            "id": 33544,
            "node_id": "MDQ6VXNlcjMzNTQ0",
            "avatar_url": "https://avatars1.githubusercontent.com/u/33544?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/philips",
            "html_url": "https://github.com/philips",
            "followers_url": "https://api.github.com/users/philips/followers",
            "following_url": "https://api.github.com/users/philips/following{/other_user}",
            "gists_url": "https://api.github.com/users/philips/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/philips/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/philips/subscriptions",
            "organizations_url": "https://api.github.com/users/philips/orgs",
            "repos_url": "https://api.github.com/users/philips/repos",
            "events_url": "https://api.github.com/users/philips/events{/privacy}",
            "received_events_url": "https://api.github.com/users/philips/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Pending snapshot is an unfinished snapshot. After the snapshot is saved to disk snapshot will be set to pendingSnapshot and pendingShot will be set to nil.\n",
        "created_at": "2014-02-23T17:56:06Z",
        "updated_at": "2014-02-27T16:11:18Z",
        "html_url": "https://github.com/goraft/raft/pull/190#discussion_r9976805",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/190",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/9976805"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/190#discussion_r9976805"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/190"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/9976808",
        "pull_request_review_id": null,
        "id": 9976808,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5NzY4MDg=",
        "diff_hunk": "@@ -1083,30 +1088,35 @@ func (s *server) RemovePeer(name string) error {\n //--------------------------------------\n \n func (s *server) TakeSnapshot() error {\n-\t// TODO: put a snapshot mutex\n-\ts.debugln(\"take Snapshot\")\n+\tif s.stateMachine == nil {\n+\t\treturn errors.New(\"Snapshot: Cannot create snapshot. Missing state machine.\")",
        "path": "server.go",
        "position": 24,
        "original_position": 23,
        "commit_id": "7debffbcbbfa20a2d233def72daa57315f1096a8",
        "original_commit_id": "e533df6ed63a24c4ebbbd888eff98217441f9564",
        "user": {
            "login": "philips",
            "id": 33544,
            "node_id": "MDQ6VXNlcjMzNTQ0",
            "avatar_url": "https://avatars1.githubusercontent.com/u/33544?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/philips",
            "html_url": "https://github.com/philips",
            "followers_url": "https://api.github.com/users/philips/followers",
            "following_url": "https://api.github.com/users/philips/following{/other_user}",
            "gists_url": "https://api.github.com/users/philips/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/philips/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/philips/subscriptions",
            "organizations_url": "https://api.github.com/users/philips/orgs",
            "repos_url": "https://api.github.com/users/philips/repos",
            "events_url": "https://api.github.com/users/philips/events{/privacy}",
            "received_events_url": "https://api.github.com/users/philips/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "huh, when could this happen?\n",
        "created_at": "2014-02-23T17:56:32Z",
        "updated_at": "2014-02-27T16:11:18Z",
        "html_url": "https://github.com/goraft/raft/pull/190#discussion_r9976808",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/190",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/9976808"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/190#discussion_r9976808"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/190"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/10129281",
        "pull_request_review_id": null,
        "id": 10129281,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTI5Mjgx",
        "diff_hunk": "@@ -1083,30 +1088,35 @@ func (s *server) RemovePeer(name string) error {\n //--------------------------------------\n \n func (s *server) TakeSnapshot() error {\n-\t// TODO: put a snapshot mutex\n-\ts.debugln(\"take Snapshot\")\n+\tif s.stateMachine == nil {\n+\t\treturn errors.New(\"Snapshot: Cannot create snapshot. Missing state machine.\")",
        "path": "server.go",
        "position": 24,
        "original_position": 23,
        "commit_id": "7debffbcbbfa20a2d233def72daa57315f1096a8",
        "original_commit_id": "e533df6ed63a24c4ebbbd888eff98217441f9564",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@philips A stateMachine is not required in go-raft. If there is no stateMachine, we cannot do snapshot. \n",
        "created_at": "2014-02-27T16:12:38Z",
        "updated_at": "2014-02-27T16:12:38Z",
        "html_url": "https://github.com/goraft/raft/pull/190#discussion_r10129281",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/190",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/10129281"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/190#discussion_r10129281"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/190"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/10852112",
        "pull_request_review_id": null,
        "id": 10852112,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODUyMTEy",
        "diff_hunk": "@@ -509,21 +507,20 @@ func (s *server) updateCurrentTerm(term uint64, leaderName string) {\n \t// set currentTerm = T, convert to follower (\u00a75.1)\n \t// stop heartbeats before step-down\n \tif s.state == Leader {\n-\t\ts.mutex.Unlock()",
        "path": "server.go",
        "position": 24,
        "original_position": 24,
        "commit_id": "0baef4100491b47ac2454251cea92ba5872f5a43",
        "original_commit_id": "0baef4100491b47ac2454251cea92ba5872f5a43",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@benbjohnson Right. But previous we also release the lock here. We can not hold the lock while stopHeartbeat. That is why I do not think this pr changes this behavior. \n",
        "created_at": "2014-03-21T20:01:24Z",
        "updated_at": "2014-03-21T20:02:05Z",
        "html_url": "https://github.com/goraft/raft/pull/197#discussion_r10852112",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/197",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/10852112"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/197#discussion_r10852112"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/197"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/10852875",
        "pull_request_review_id": null,
        "id": 10852875,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODUyODc1",
        "diff_hunk": "@@ -509,21 +507,20 @@ func (s *server) updateCurrentTerm(term uint64, leaderName string) {\n \t// set currentTerm = T, convert to follower (\u00a75.1)\n \t// stop heartbeats before step-down\n \tif s.state == Leader {\n-\t\ts.mutex.Unlock()",
        "path": "server.go",
        "position": 24,
        "original_position": 24,
        "commit_id": "0baef4100491b47ac2454251cea92ba5872f5a43",
        "original_commit_id": "0baef4100491b47ac2454251cea92ba5872f5a43",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Ok, that's fine with me.\n",
        "created_at": "2014-03-21T20:22:10Z",
        "updated_at": "2014-03-21T20:22:10Z",
        "html_url": "https://github.com/goraft/raft/pull/197#discussion_r10852875",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/197",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/10852875"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/197#discussion_r10852875"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/197"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/10667751",
        "pull_request_review_id": null,
        "id": 10667751,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjY3NzUx",
        "diff_hunk": "@@ -422,35 +424,24 @@ func init() {\n \tRegisterCommand(&DefaultLeaveCommand{})\n }\n \n-// Start as follow\n+// Start the raft server\n // If log entries exist then allow promotion to candidate if no AEs received.\n // If no log entries exist then wait for AEs from another node.\n // If no log entries exist and a self-join command is issued then\n // immediately become leader and commit entry.\n-\n func (s *server) Start() error {\n \t// Exit if the server is already running.\n-\tif s.State() != Stopped {\n-\t\treturn errors.New(\"raft.Server: Server already running\")\n-\t}\n-\n-\t// Create snapshot directory if not exist\n-\tos.Mkdir(path.Join(s.path, \"snapshot\"), 0700)\n-\n-\tif err := s.readConf(); err != nil {\n-\t\ts.debugln(\"raft: Conf file error: \", err)\n-\t\treturn fmt.Errorf(\"raft: Initialization error: %s\", err)\n-\t}\n-\n-\t// Initialize the log and load it up.\n-\tif err := s.log.open(s.LogPath()); err != nil {\n-\t\ts.debugln(\"raft: Log error: \", err)\n-\t\treturn fmt.Errorf(\"raft: Initialization error: %s\", err)\n+\tif s.state != Stopped {\n+\t\tif s.state != Initialized {\n+\t\t\treturn fmt.Errorf(\"raft.Server: Server already running[%v]\", s.state)\n+\t\t}\n+\t} else {\n+\t\terr := s.Init()\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}",
        "path": "server.go",
        "position": null,
        "original_position": 53,
        "commit_id": "a9c25bd3cc32fac7312afb3cd1b778626778ac83",
        "original_commit_id": "27994231e3c898ced06d52da90db634e6e62e392",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Can you change this to process the error condition as a single if (instead of if/else):\n\n``` go\nif s.state != Stopped && s.state != Initialized {\n    return fmt.Errorf(\"raft.Server: Server already running[%v]\", s.state)\n}\n\nif err := s.Init(); err != nil {\n    return err\n}\n```\n",
        "created_at": "2014-03-17T17:29:18Z",
        "updated_at": "2014-03-22T16:06:00Z",
        "html_url": "https://github.com/goraft/raft/pull/198#discussion_r10667751",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/198",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/10667751"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/198#discussion_r10667751"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/198"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/10668386",
        "pull_request_review_id": null,
        "id": 10668386,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjY4Mzg2",
        "diff_hunk": "@@ -422,35 +424,24 @@ func init() {\n \tRegisterCommand(&DefaultLeaveCommand{})\n }\n \n-// Start as follow\n+// Start the raft server\n // If log entries exist then allow promotion to candidate if no AEs received.\n // If no log entries exist then wait for AEs from another node.\n // If no log entries exist and a self-join command is issued then\n // immediately become leader and commit entry.\n-\n func (s *server) Start() error {\n \t// Exit if the server is already running.\n-\tif s.State() != Stopped {\n-\t\treturn errors.New(\"raft.Server: Server already running\")\n-\t}\n-\n-\t// Create snapshot directory if not exist\n-\tos.Mkdir(path.Join(s.path, \"snapshot\"), 0700)\n-\n-\tif err := s.readConf(); err != nil {\n-\t\ts.debugln(\"raft: Conf file error: \", err)\n-\t\treturn fmt.Errorf(\"raft: Initialization error: %s\", err)\n-\t}\n-\n-\t// Initialize the log and load it up.\n-\tif err := s.log.open(s.LogPath()); err != nil {\n-\t\ts.debugln(\"raft: Log error: \", err)\n-\t\treturn fmt.Errorf(\"raft: Initialization error: %s\", err)\n+\tif s.state != Stopped {\n+\t\tif s.state != Initialized {\n+\t\t\treturn fmt.Errorf(\"raft.Server: Server already running[%v]\", s.state)\n+\t\t}\n+\t} else {\n+\t\terr := s.Init()\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}",
        "path": "server.go",
        "position": null,
        "original_position": 53,
        "commit_id": "a9c25bd3cc32fac7312afb3cd1b778626778ac83",
        "original_commit_id": "27994231e3c898ced06d52da90db634e6e62e392",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I do not like the embedded error handling too.\n\nHowever, we should only call `Init` in start when the state of server is `Stopped`.\n\nOr we have to understand the error message from `s.Init`. \n\nWhich one do you prefer? \n",
        "created_at": "2014-03-17T17:41:16Z",
        "updated_at": "2014-03-22T16:06:00Z",
        "html_url": "https://github.com/goraft/raft/pull/198#discussion_r10668386",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/198",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/10668386"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/198#discussion_r10668386"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/198"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/10752134",
        "pull_request_review_id": null,
        "id": 10752134,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzUyMTM0",
        "diff_hunk": "@@ -422,35 +424,24 @@ func init() {\n \tRegisterCommand(&DefaultLeaveCommand{})\n }\n \n-// Start as follow\n+// Start the raft server\n // If log entries exist then allow promotion to candidate if no AEs received.\n // If no log entries exist then wait for AEs from another node.\n // If no log entries exist and a self-join command is issued then\n // immediately become leader and commit entry.\n-\n func (s *server) Start() error {\n \t// Exit if the server is already running.\n-\tif s.State() != Stopped {\n-\t\treturn errors.New(\"raft.Server: Server already running\")\n-\t}\n-\n-\t// Create snapshot directory if not exist\n-\tos.Mkdir(path.Join(s.path, \"snapshot\"), 0700)\n-\n-\tif err := s.readConf(); err != nil {\n-\t\ts.debugln(\"raft: Conf file error: \", err)\n-\t\treturn fmt.Errorf(\"raft: Initialization error: %s\", err)\n-\t}\n-\n-\t// Initialize the log and load it up.\n-\tif err := s.log.open(s.LogPath()); err != nil {\n-\t\ts.debugln(\"raft: Log error: \", err)\n-\t\treturn fmt.Errorf(\"raft: Initialization error: %s\", err)\n+\tif s.state != Stopped {\n+\t\tif s.state != Initialized {\n+\t\t\treturn fmt.Errorf(\"raft.Server: Server already running[%v]\", s.state)\n+\t\t}\n+\t} else {\n+\t\terr := s.Init()\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}",
        "path": "server.go",
        "position": null,
        "original_position": 53,
        "commit_id": "a9c25bd3cc32fac7312afb3cd1b778626778ac83",
        "original_commit_id": "27994231e3c898ced06d52da90db634e6e62e392",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'm ok with doing a nesting like:\n\n```\nif s.state != Stopped {\n    if s.state != Initialized {\n        return fmt.Errorf(\"raft.Server: Server already running[%v]\", s.state)\n    }\n}\n\nif err := s.Init(); err != nil {\n    return err\n}\n```\n\nIt's mostly the `else` that I don't like. The error handling should be handled first and let the program continue on outside of a block after that.\n",
        "created_at": "2014-03-19T14:50:50Z",
        "updated_at": "2014-03-22T16:06:00Z",
        "html_url": "https://github.com/goraft/raft/pull/198#discussion_r10752134",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/198",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/10752134"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/198#discussion_r10752134"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/198"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/10851905",
        "pull_request_review_id": null,
        "id": 10851905,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODUxOTA1",
        "diff_hunk": "@@ -473,6 +461,39 @@ func (s *server) Start() error {\n \treturn nil\n }\n \n+// Init initializes the raft server\n+func (s *server) Init() error {\n+\tif s.Running() {\n+\t\treturn fmt.Errorf(\"raft.Server: Server already running[%v]\", s.state)\n+\t}\n+\n+\t// server has been initialized or server was stopped after initialized\n+\tif s.state == Initialized || !s.log.isEmpty() {\n+\t\ts.state = Initialized\n+\t\treturn nil\n+\t}\n+\n+\t// Create snapshot directory if it does not exist\n+\tos.Mkdir(path.Join(s.path, \"snapshot\"), 0700)",
        "path": "server.go",
        "position": null,
        "original_position": 74,
        "commit_id": "a9c25bd3cc32fac7312afb3cd1b778626778ac83",
        "original_commit_id": "ebe497e96f4728ee1506eb5595aeea130845aeae",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Missing error check.\n",
        "created_at": "2014-03-21T19:55:35Z",
        "updated_at": "2014-03-22T16:06:00Z",
        "html_url": "https://github.com/goraft/raft/pull/198#discussion_r10851905",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/198",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/10851905"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/198#discussion_r10851905"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/198"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/10956136",
        "pull_request_review_id": null,
        "id": 10956136,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTU2MTM2",
        "diff_hunk": "@@ -501,6 +503,10 @@ func (s *server) Init() error {\n \n // Shuts down the server.\n func (s *server) Stop() {\n+\tif s.State() == Stopped {\n+\t\treturn",
        "path": "server.go",
        "position": 18,
        "original_position": 18,
        "commit_id": "0cfbf0caeb478f64ab61131fcf1e4993c1faee4c",
        "original_commit_id": "fb320e2be6b3eb97b581e9d42eebbb3773950a52",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@benbjohnson Shall we panic here? Or we need to add a return value?\n",
        "created_at": "2014-03-25T22:03:31Z",
        "updated_at": "2014-04-04T01:14:26Z",
        "html_url": "https://github.com/goraft/raft/pull/208#discussion_r10956136",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/208",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/10956136"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/208#discussion_r10956136"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/208"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/10974176",
        "pull_request_review_id": null,
        "id": 10974176,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTc0MTc2",
        "diff_hunk": "@@ -501,6 +503,10 @@ func (s *server) Init() error {\n \n // Shuts down the server.\n func (s *server) Stop() {\n+\tif s.State() == Stopped {\n+\t\treturn",
        "path": "server.go",
        "position": 18,
        "original_position": 18,
        "commit_id": "0cfbf0caeb478f64ab61131fcf1e4993c1faee4c",
        "original_commit_id": "fb320e2be6b3eb97b581e9d42eebbb3773950a52",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Definitely don't panic. Double stopping a server is not an unrecoverable situation. Also, I don't think we need a return value -- especially since it changes the API.\n",
        "created_at": "2014-03-26T12:44:26Z",
        "updated_at": "2014-04-04T01:14:26Z",
        "html_url": "https://github.com/goraft/raft/pull/208#discussion_r10974176",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/208",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/10974176"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/208#discussion_r10974176"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/208"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/10974313",
        "pull_request_review_id": null,
        "id": 10974313,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTc0MzEz",
        "diff_hunk": "@@ -92,6 +93,10 @@ func (l *Log) isEmpty() bool {\n \treturn (len(l.entries) == 0) && (l.startIndex == 0)\n }\n \n+func (l *Log) isInitialized() bool {\n+\treturn l.initialized\n+}\n+",
        "path": "log.go",
        "position": null,
        "original_position": 15,
        "commit_id": "0cfbf0caeb478f64ab61131fcf1e4993c1faee4c",
        "original_commit_id": "fb320e2be6b3eb97b581e9d42eebbb3773950a52",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Wrapping an unexported property with a getter is overkill. You can just check the property directly.\n",
        "created_at": "2014-03-26T12:48:46Z",
        "updated_at": "2014-04-04T01:14:26Z",
        "html_url": "https://github.com/goraft/raft/pull/208#discussion_r10974313",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/208",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/10974313"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/208#discussion_r10974313"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/208"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/10976604",
        "pull_request_review_id": null,
        "id": 10976604,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTc2NjA0",
        "diff_hunk": "@@ -501,6 +503,10 @@ func (s *server) Init() error {\n \n // Shuts down the server.\n func (s *server) Stop() {\n+\tif s.State() == Stopped {\n+\t\treturn",
        "path": "server.go",
        "position": 18,
        "original_position": 18,
        "commit_id": "0cfbf0caeb478f64ab61131fcf1e4993c1faee4c",
        "original_commit_id": "fb320e2be6b3eb97b581e9d42eebbb3773950a52",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@benbjohnson I fell double close usually return an error. But I am fine with just return here. \n",
        "created_at": "2014-03-26T13:53:21Z",
        "updated_at": "2014-04-04T01:14:26Z",
        "html_url": "https://github.com/goraft/raft/pull/208#discussion_r10976604",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/208",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/10976604"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/208#discussion_r10976604"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/208"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/10976633",
        "pull_request_review_id": null,
        "id": 10976633,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTc2NjMz",
        "diff_hunk": "@@ -92,6 +93,10 @@ func (l *Log) isEmpty() bool {\n \treturn (len(l.entries) == 0) && (l.startIndex == 0)\n }\n \n+func (l *Log) isInitialized() bool {\n+\treturn l.initialized\n+}\n+",
        "path": "log.go",
        "position": null,
        "original_position": 15,
        "commit_id": "0cfbf0caeb478f64ab61131fcf1e4993c1faee4c",
        "original_commit_id": "fb320e2be6b3eb97b581e9d42eebbb3773950a52",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "right\n",
        "created_at": "2014-03-26T13:54:01Z",
        "updated_at": "2014-04-04T01:14:26Z",
        "html_url": "https://github.com/goraft/raft/pull/208#discussion_r10976633",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/208",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/10976633"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/208#discussion_r10976633"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/208"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/10976688",
        "pull_request_review_id": null,
        "id": 10976688,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTc2Njg4",
        "diff_hunk": "@@ -501,6 +503,10 @@ func (s *server) Init() error {\n \n // Shuts down the server.\n func (s *server) Stop() {\n+\tif s.State() == Stopped {\n+\t\treturn",
        "path": "server.go",
        "position": 18,
        "original_position": 18,
        "commit_id": "0cfbf0caeb478f64ab61131fcf1e4993c1faee4c",
        "original_commit_id": "fb320e2be6b3eb97b581e9d42eebbb3773950a52",
        "user": {
            "login": "benbjohnson",
            "id": 118015,
            "node_id": "MDQ6VXNlcjExODAxNQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/118015?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benbjohnson",
            "html_url": "https://github.com/benbjohnson",
            "followers_url": "https://api.github.com/users/benbjohnson/followers",
            "following_url": "https://api.github.com/users/benbjohnson/following{/other_user}",
            "gists_url": "https://api.github.com/users/benbjohnson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benbjohnson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benbjohnson/subscriptions",
            "organizations_url": "https://api.github.com/users/benbjohnson/orgs",
            "repos_url": "https://api.github.com/users/benbjohnson/repos",
            "events_url": "https://api.github.com/users/benbjohnson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benbjohnson/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I agree that double close should return an error but it's not worth changing the API for it.\n",
        "created_at": "2014-03-26T13:55:07Z",
        "updated_at": "2014-04-04T01:14:26Z",
        "html_url": "https://github.com/goraft/raft/pull/208#discussion_r10976688",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/208",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/10976688"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/208#discussion_r10976688"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/208"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/10976837",
        "pull_request_review_id": null,
        "id": 10976837,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTc2ODM3",
        "diff_hunk": "@@ -92,6 +93,10 @@ func (l *Log) isEmpty() bool {\n \treturn (len(l.entries) == 0) && (l.startIndex == 0)\n }\n \n+func (l *Log) isInitialized() bool {\n+\treturn l.initialized\n+}\n+",
        "path": "log.go",
        "position": null,
        "original_position": 15,
        "commit_id": "0cfbf0caeb478f64ab61131fcf1e4993c1faee4c",
        "original_commit_id": "fb320e2be6b3eb97b581e9d42eebbb3773950a52",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "done\n",
        "created_at": "2014-03-26T13:58:50Z",
        "updated_at": "2014-04-04T01:14:26Z",
        "html_url": "https://github.com/goraft/raft/pull/208#discussion_r10976837",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/208",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/10976837"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/208#discussion_r10976837"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/208"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/11315515",
        "pull_request_review_id": null,
        "id": 11315515,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzE1NTE1",
        "diff_hunk": "@@ -621,7 +634,9 @@ func (s *server) sendAsync(value interface{}) {\n \tdefault:\n \t}\n \n+\ts.routineGroup.Add(1)\n \tgo func() {\n+\t\tdefer s.routineGroup.Done()\n \t\ts.c <- event",
        "path": "server.go",
        "position": null,
        "original_position": 94,
        "commit_id": "1961d0a126261738fa2a68d68b97eca940092dd4",
        "original_commit_id": "5f87be1f0e5f6864bb053dc70a6d3dc748363c21",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "If the server is stopped, this routine will block here since no one is going to recv on the channel. Then stop function will be blocked. \n",
        "created_at": "2014-04-04T21:50:52Z",
        "updated_at": "2014-04-04T23:37:24Z",
        "html_url": "https://github.com/goraft/raft/pull/211#discussion_r11315515",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/211",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/11315515"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/211#discussion_r11315515"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/211"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/11315640",
        "pull_request_review_id": null,
        "id": 11315640,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzE1NjQw",
        "diff_hunk": "@@ -621,7 +634,9 @@ func (s *server) sendAsync(value interface{}) {\n \tdefault:\n \t}\n \n+\ts.routineGroup.Add(1)\n \tgo func() {\n+\t\tdefer s.routineGroup.Done()\n \t\ts.c <- event",
        "path": "server.go",
        "position": null,
        "original_position": 94,
        "commit_id": "1961d0a126261738fa2a68d68b97eca940092dd4",
        "original_commit_id": "5f87be1f0e5f6864bb053dc70a6d3dc748363c21",
        "user": {
            "login": "yichengq",
            "id": 2976232,
            "node_id": "MDQ6VXNlcjI5NzYyMzI=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/2976232?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/yichengq",
            "html_url": "https://github.com/yichengq",
            "followers_url": "https://api.github.com/users/yichengq/followers",
            "following_url": "https://api.github.com/users/yichengq/following{/other_user}",
            "gists_url": "https://api.github.com/users/yichengq/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/yichengq/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/yichengq/subscriptions",
            "organizations_url": "https://api.github.com/users/yichengq/orgs",
            "repos_url": "https://api.github.com/users/yichengq/repos",
            "events_url": "https://api.github.com/users/yichengq/events{/privacy}",
            "received_events_url": "https://api.github.com/users/yichengq/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Not for most times because `s.c` has a size of 256, but it is still possible.\n",
        "created_at": "2014-04-04T21:54:39Z",
        "updated_at": "2014-04-04T23:37:24Z",
        "html_url": "https://github.com/goraft/raft/pull/211#discussion_r11315640",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/211",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/11315640"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/211#discussion_r11315640"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/211"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/11315839",
        "pull_request_review_id": null,
        "id": 11315839,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzE1ODM5",
        "diff_hunk": "@@ -457,7 +462,11 @@ func (s *server) Start() error {\n \n \tdebugln(s.GetState())\n \n-\tgo s.loop()\n+\ts.routineGroup.Add(1)",
        "path": "server.go",
        "position": 49,
        "original_position": 49,
        "commit_id": "1961d0a126261738fa2a68d68b97eca940092dd4",
        "original_commit_id": "4b45c1f98c433f2edceaef063d0bf3e93917fc32",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "you do not need to wait for this one.\n",
        "created_at": "2014-04-04T22:00:24Z",
        "updated_at": "2014-04-04T23:37:24Z",
        "html_url": "https://github.com/goraft/raft/pull/211#discussion_r11315839",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/211",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/11315839"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/211#discussion_r11315839"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/211"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/11315879",
        "pull_request_review_id": null,
        "id": 11315879,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzE1ODc5",
        "diff_hunk": "@@ -457,7 +462,11 @@ func (s *server) Start() error {\n \n \tdebugln(s.GetState())\n \n-\tgo s.loop()\n+\ts.routineGroup.Add(1)",
        "path": "server.go",
        "position": 49,
        "original_position": 49,
        "commit_id": "1961d0a126261738fa2a68d68b97eca940092dd4",
        "original_commit_id": "4b45c1f98c433f2edceaef063d0bf3e93917fc32",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "oh ok. you change the stop logic a little bit. we need to wait for this one.\n",
        "created_at": "2014-04-04T22:01:42Z",
        "updated_at": "2014-04-04T23:37:24Z",
        "html_url": "https://github.com/goraft/raft/pull/211#discussion_r11315879",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/211",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/11315879"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/211#discussion_r11315879"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/211"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/11317950",
        "pull_request_review_id": null,
        "id": 11317950,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzE3OTUw",
        "diff_hunk": "@@ -507,11 +516,11 @@ func (s *server) Stop() {\n \t\treturn\n \t}\n \n-\tstop := make(chan bool)\n-\ts.stopped <- stop\n+\tclose(s.stopped)\n \n \t// make sure the server has stopped before we close the log",
        "path": "server.go",
        "position": null,
        "original_position": 65,
        "commit_id": "1961d0a126261738fa2a68d68b97eca940092dd4",
        "original_commit_id": "4b45c1f98c433f2edceaef063d0bf3e93917fc32",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "can you change this comment? make sure all the go-routines have been stopped. \n",
        "created_at": "2014-04-04T23:32:02Z",
        "updated_at": "2014-04-04T23:37:24Z",
        "html_url": "https://github.com/goraft/raft/pull/211#discussion_r11317950",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/211",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/11317950"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/211#discussion_r11317950"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/211"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/11318236",
        "pull_request_review_id": null,
        "id": 11318236,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzE4MjM2",
        "diff_hunk": "@@ -507,11 +516,11 @@ func (s *server) Stop() {\n \t\treturn\n \t}\n \n-\tstop := make(chan bool)\n-\ts.stopped <- stop\n+\tclose(s.stopped)\n+\n+\t// make sure all goroutines have stopped before we close the log\n+\ts.routineGroup.Wait()\n \n-\t// make sure the server has stopped before we close the log\n-\t<-stop\n \ts.log.close()\n \ts.setState(Stopped)",
        "path": "server.go",
        "position": 71,
        "original_position": 71,
        "commit_id": "1961d0a126261738fa2a68d68b97eca940092dd4",
        "original_commit_id": "1961d0a126261738fa2a68d68b97eca940092dd4",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "There is a race in this stop function, which can cause panic. \nWe need to make sure we check the state and set the state in a transaction. Or we might end up with a double close, which will cause panic.\n",
        "created_at": "2014-04-04T23:47:02Z",
        "updated_at": "2014-04-04T23:47:02Z",
        "html_url": "https://github.com/goraft/raft/pull/211#discussion_r11318236",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/211",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/11318236"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/211#discussion_r11318236"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/211"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/11318264",
        "pull_request_review_id": null,
        "id": 11318264,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzE4MjY0",
        "diff_hunk": "@@ -507,11 +516,11 @@ func (s *server) Stop() {\n \t\treturn\n \t}\n \n-\tstop := make(chan bool)\n-\ts.stopped <- stop\n+\tclose(s.stopped)\n+\n+\t// make sure all goroutines have stopped before we close the log\n+\ts.routineGroup.Wait()\n \n-\t// make sure the server has stopped before we close the log\n-\t<-stop\n \ts.log.close()\n \ts.setState(Stopped)",
        "path": "server.go",
        "position": 71,
        "original_position": 71,
        "commit_id": "1961d0a126261738fa2a68d68b97eca940092dd4",
        "original_commit_id": "1961d0a126261738fa2a68d68b97eca940092dd4",
        "user": {
            "login": "yichengq",
            "id": 2976232,
            "node_id": "MDQ6VXNlcjI5NzYyMzI=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/2976232?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/yichengq",
            "html_url": "https://github.com/yichengq",
            "followers_url": "https://api.github.com/users/yichengq/followers",
            "following_url": "https://api.github.com/users/yichengq/following{/other_user}",
            "gists_url": "https://api.github.com/users/yichengq/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/yichengq/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/yichengq/subscriptions",
            "organizations_url": "https://api.github.com/users/yichengq/orgs",
            "repos_url": "https://api.github.com/users/yichengq/repos",
            "events_url": "https://api.github.com/users/yichengq/events{/privacy}",
            "received_events_url": "https://api.github.com/users/yichengq/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "We check it around 10+ lines above:\n\n```\n    if s.State() == Stopped {\n        return\n    }\n```\n",
        "created_at": "2014-04-04T23:48:42Z",
        "updated_at": "2014-04-04T23:48:42Z",
        "html_url": "https://github.com/goraft/raft/pull/211#discussion_r11318264",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/211",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/11318264"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/211#discussion_r11318264"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/211"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/11318282",
        "pull_request_review_id": null,
        "id": 11318282,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzE4Mjgy",
        "diff_hunk": "@@ -507,11 +516,11 @@ func (s *server) Stop() {\n \t\treturn\n \t}\n \n-\tstop := make(chan bool)\n-\ts.stopped <- stop\n+\tclose(s.stopped)\n+\n+\t// make sure all goroutines have stopped before we close the log\n+\ts.routineGroup.Wait()\n \n-\t// make sure the server has stopped before we close the log\n-\t<-stop\n \ts.log.close()\n \ts.setState(Stopped)",
        "path": "server.go",
        "position": 71,
        "original_position": 71,
        "commit_id": "1961d0a126261738fa2a68d68b97eca940092dd4",
        "original_commit_id": "1961d0a126261738fa2a68d68b97eca940092dd4",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@unihorn How many lines above does not make a difference. You still have the chance to close the channel twice.\n",
        "created_at": "2014-04-04T23:50:13Z",
        "updated_at": "2014-04-04T23:50:13Z",
        "html_url": "https://github.com/goraft/raft/pull/211#discussion_r11318282",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/211",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/11318282"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/211#discussion_r11318282"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/211"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/11318334",
        "pull_request_review_id": null,
        "id": 11318334,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzE4MzM0",
        "diff_hunk": "@@ -507,11 +516,11 @@ func (s *server) Stop() {\n \t\treturn\n \t}\n \n-\tstop := make(chan bool)\n-\ts.stopped <- stop\n+\tclose(s.stopped)\n+\n+\t// make sure all goroutines have stopped before we close the log\n+\ts.routineGroup.Wait()\n \n-\t// make sure the server has stopped before we close the log\n-\t<-stop\n \ts.log.close()\n \ts.setState(Stopped)",
        "path": "server.go",
        "position": 71,
        "original_position": 71,
        "commit_id": "1961d0a126261738fa2a68d68b97eca940092dd4",
        "original_commit_id": "1961d0a126261738fa2a68d68b97eca940092dd4",
        "user": {
            "login": "yichengq",
            "id": 2976232,
            "node_id": "MDQ6VXNlcjI5NzYyMzI=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/2976232?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/yichengq",
            "html_url": "https://github.com/yichengq",
            "followers_url": "https://api.github.com/users/yichengq/followers",
            "following_url": "https://api.github.com/users/yichengq/following{/other_user}",
            "gists_url": "https://api.github.com/users/yichengq/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/yichengq/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/yichengq/subscriptions",
            "organizations_url": "https://api.github.com/users/yichengq/orgs",
            "repos_url": "https://api.github.com/users/yichengq/repos",
            "events_url": "https://api.github.com/users/yichengq/events{/privacy}",
            "received_events_url": "https://api.github.com/users/yichengq/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I assume the `Stop` function should not be called simultaneously.\nAnd this is the assumption for all other functions, like `Init` or `Start`.\n",
        "created_at": "2014-04-04T23:53:52Z",
        "updated_at": "2014-04-04T23:53:52Z",
        "html_url": "https://github.com/goraft/raft/pull/211#discussion_r11318334",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/211",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/11318334"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/211#discussion_r11318334"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/211"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/11318385",
        "pull_request_review_id": null,
        "id": 11318385,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzE4Mzg1",
        "diff_hunk": "@@ -507,11 +516,11 @@ func (s *server) Stop() {\n \t\treturn\n \t}\n \n-\tstop := make(chan bool)\n-\ts.stopped <- stop\n+\tclose(s.stopped)\n+\n+\t// make sure all goroutines have stopped before we close the log\n+\ts.routineGroup.Wait()\n \n-\t// make sure the server has stopped before we close the log\n-\t<-stop\n \ts.log.close()\n \ts.setState(Stopped)",
        "path": "server.go",
        "position": 71,
        "original_position": 71,
        "commit_id": "1961d0a126261738fa2a68d68b97eca940092dd4",
        "original_commit_id": "1961d0a126261738fa2a68d68b97eca940092dd4",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "make senses. I think we need to fix others and this one in another pr.\nOr we need to document it.\n",
        "created_at": "2014-04-04T23:56:17Z",
        "updated_at": "2014-04-04T23:56:29Z",
        "html_url": "https://github.com/goraft/raft/pull/211#discussion_r11318385",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/211",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/11318385"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/211#discussion_r11318385"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/211"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/11468224",
        "pull_request_review_id": null,
        "id": 11468224,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDY4MjI0",
        "diff_hunk": "@@ -334,6 +334,8 @@ func (s *server) IsLogEmpty() bool {\n \n // A list of all the log entries. This should only be used for debugging purposes.\n func (s *server) LogEntries() []*LogEntry {\n+\ts.log.mutex.RLock()\n+\tdefer s.log.mutex.RUnlock()",
        "path": "server.go",
        "position": null,
        "original_position": 5,
        "commit_id": "b6b4e5775ac835e76a191c7196294f05132e19c6",
        "original_commit_id": "a41eb303d1266da900295da10df8399a320e7abb",
        "user": {
            "login": "yichengq",
            "id": 2976232,
            "node_id": "MDQ6VXNlcjI5NzYyMzI=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/2976232?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/yichengq",
            "html_url": "https://github.com/yichengq",
            "followers_url": "https://api.github.com/users/yichengq/followers",
            "following_url": "https://api.github.com/users/yichengq/following{/other_user}",
            "gists_url": "https://api.github.com/users/yichengq/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/yichengq/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/yichengq/subscriptions",
            "organizations_url": "https://api.github.com/users/yichengq/orgs",
            "repos_url": "https://api.github.com/users/yichengq/repos",
            "events_url": "https://api.github.com/users/yichengq/events{/privacy}",
            "received_events_url": "https://api.github.com/users/yichengq/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The lock here is meaningless because you return a pointer value.\nIs this to pass a race detector?\n",
        "created_at": "2014-04-10T02:57:57Z",
        "updated_at": "2014-04-10T03:17:19Z",
        "html_url": "https://github.com/goraft/raft/pull/215#discussion_r11468224",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/215",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/11468224"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/215#discussion_r11468224"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/215"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/11468318",
        "pull_request_review_id": null,
        "id": 11468318,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDY4MzE4",
        "diff_hunk": "@@ -334,6 +334,8 @@ func (s *server) IsLogEmpty() bool {\n \n // A list of all the log entries. This should only be used for debugging purposes.\n func (s *server) LogEntries() []*LogEntry {\n+\ts.log.mutex.RLock()\n+\tdefer s.log.mutex.RUnlock()",
        "path": "server.go",
        "position": null,
        "original_position": 5,
        "commit_id": "b6b4e5775ac835e76a191c7196294f05132e19c6",
        "original_commit_id": "a41eb303d1266da900295da10df8399a320e7abb",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "See the comment for usage of this function.\nThis is used to protect the pointer itself. \n",
        "created_at": "2014-04-10T03:05:27Z",
        "updated_at": "2014-04-10T03:17:19Z",
        "html_url": "https://github.com/goraft/raft/pull/215#discussion_r11468318",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/215",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/11468318"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/215#discussion_r11468318"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/215"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/11468383",
        "pull_request_review_id": null,
        "id": 11468383,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDY4Mzgz",
        "diff_hunk": "@@ -334,6 +334,8 @@ func (s *server) IsLogEmpty() bool {\n \n // A list of all the log entries. This should only be used for debugging purposes.\n func (s *server) LogEntries() []*LogEntry {\n+\ts.log.mutex.RLock()\n+\tdefer s.log.mutex.RUnlock()",
        "path": "server.go",
        "position": null,
        "original_position": 5,
        "commit_id": "b6b4e5775ac835e76a191c7196294f05132e19c6",
        "original_commit_id": "a41eb303d1266da900295da10df8399a320e7abb",
        "user": {
            "login": "yichengq",
            "id": 2976232,
            "node_id": "MDQ6VXNlcjI5NzYyMzI=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/2976232?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/yichengq",
            "html_url": "https://github.com/yichengq",
            "followers_url": "https://api.github.com/users/yichengq/followers",
            "following_url": "https://api.github.com/users/yichengq/following{/other_user}",
            "gists_url": "https://api.github.com/users/yichengq/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/yichengq/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/yichengq/subscriptions",
            "organizations_url": "https://api.github.com/users/yichengq/orgs",
            "repos_url": "https://api.github.com/users/yichengq/repos",
            "events_url": "https://api.github.com/users/yichengq/events{/privacy}",
            "received_events_url": "https://api.github.com/users/yichengq/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This is different from this commit comment. Right?\nI cannot understand why this could protect the pointer.\n",
        "created_at": "2014-04-10T03:10:36Z",
        "updated_at": "2014-04-10T03:17:19Z",
        "html_url": "https://github.com/goraft/raft/pull/215#discussion_r11468383",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/215",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/11468383"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/215#discussion_r11468383"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/215"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/11468493",
        "pull_request_review_id": null,
        "id": 11468493,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDY4NDkz",
        "diff_hunk": "@@ -334,6 +334,8 @@ func (s *server) IsLogEmpty() bool {\n \n // A list of all the log entries. This should only be used for debugging purposes.\n func (s *server) LogEntries() []*LogEntry {\n+\ts.log.mutex.RLock()\n+\tdefer s.log.mutex.RUnlock()",
        "path": "server.go",
        "position": null,
        "original_position": 5,
        "commit_id": "b6b4e5775ac835e76a191c7196294f05132e19c6",
        "original_commit_id": "a41eb303d1266da900295da10df8399a320e7abb",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I will fix this in another pr. \n",
        "created_at": "2014-04-10T03:18:14Z",
        "updated_at": "2014-04-10T03:18:14Z",
        "html_url": "https://github.com/goraft/raft/pull/215#discussion_r11468493",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/215",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/11468493"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/215#discussion_r11468493"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/215"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/11536978",
        "pull_request_review_id": null,
        "id": 11536978,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTM2OTc4",
        "diff_hunk": "@@ -484,8 +484,8 @@ func (s *server) Init() error {\n \t// Server has been initialized or server was stopped after initialized\n \t// If log has been initialized, we know that the server was stopped after\n \t// running.\n-\tif s.state == Initialized || s.log.initialized {\n-\t\ts.state = Initialized\n+\tif s.State() == Initialized || s.log.initialized {\n+\t\ts.setState(Initialized)",
        "path": "server.go",
        "position": 7,
        "original_position": 7,
        "commit_id": "768a0fda5fe29aa49bf65245fd9f4ae116f71e33",
        "original_commit_id": "768a0fda5fe29aa49bf65245fd9f4ae116f71e33",
        "user": {
            "login": "philips",
            "id": 33544,
            "node_id": "MDQ6VXNlcjMzNTQ0",
            "avatar_url": "https://avatars1.githubusercontent.com/u/33544?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/philips",
            "html_url": "https://github.com/philips",
            "followers_url": "https://api.github.com/users/philips/followers",
            "following_url": "https://api.github.com/users/philips/following{/other_user}",
            "gists_url": "https://api.github.com/users/philips/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/philips/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/philips/subscriptions",
            "organizations_url": "https://api.github.com/users/philips/orgs",
            "repos_url": "https://api.github.com/users/philips/repos",
            "events_url": "https://api.github.com/users/philips/events{/privacy}",
            "received_events_url": "https://api.github.com/users/philips/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This code just looks racy. I understand that goraft is single threaded but is there a better way that doesn't look like a race?\n",
        "created_at": "2014-04-11T15:18:16Z",
        "updated_at": "2014-04-11T15:18:16Z",
        "html_url": "https://github.com/goraft/raft/pull/218#discussion_r11536978",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/218",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/11536978"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/218#discussion_r11536978"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/218"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/11537118",
        "pull_request_review_id": null,
        "id": 11537118,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTM3MTE4",
        "diff_hunk": "@@ -484,8 +484,8 @@ func (s *server) Init() error {\n \t// Server has been initialized or server was stopped after initialized\n \t// If log has been initialized, we know that the server was stopped after\n \t// running.\n-\tif s.state == Initialized || s.log.initialized {\n-\t\ts.state = Initialized\n+\tif s.State() == Initialized || s.log.initialized {\n+\t\ts.setState(Initialized)",
        "path": "server.go",
        "position": 7,
        "original_position": 7,
        "commit_id": "768a0fda5fe29aa49bf65245fd9f4ae116f71e33",
        "original_commit_id": "768a0fda5fe29aa49bf65245fd9f4ae116f71e33",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@philips Actually the logic should be \n\n```\nif s.State() == Initialized {\n    return\n}\n\nif s.log.initialized {\n  s.setState(Initialized)\n  return\n}\n```\n",
        "created_at": "2014-04-11T15:21:28Z",
        "updated_at": "2014-04-11T15:21:28Z",
        "html_url": "https://github.com/goraft/raft/pull/218#discussion_r11537118",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/218",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/11537118"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/218#discussion_r11537118"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/218"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/11537161",
        "pull_request_review_id": null,
        "id": 11537161,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTM3MTYx",
        "diff_hunk": "@@ -484,8 +484,8 @@ func (s *server) Init() error {\n \t// Server has been initialized or server was stopped after initialized\n \t// If log has been initialized, we know that the server was stopped after\n \t// running.\n-\tif s.state == Initialized || s.log.initialized {\n-\t\ts.state = Initialized\n+\tif s.State() == Initialized || s.log.initialized {\n+\t\ts.setState(Initialized)",
        "path": "server.go",
        "position": 7,
        "original_position": 7,
        "commit_id": "768a0fda5fe29aa49bf65245fd9f4ae116f71e33",
        "original_commit_id": "768a0fda5fe29aa49bf65245fd9f4ae116f71e33",
        "user": {
            "login": "xiang90",
            "id": 4479947,
            "node_id": "MDQ6VXNlcjQ0Nzk5NDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4479947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xiang90",
            "html_url": "https://github.com/xiang90",
            "followers_url": "https://api.github.com/users/xiang90/followers",
            "following_url": "https://api.github.com/users/xiang90/following{/other_user}",
            "gists_url": "https://api.github.com/users/xiang90/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xiang90/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xiang90/subscriptions",
            "organizations_url": "https://api.github.com/users/xiang90/orgs",
            "repos_url": "https://api.github.com/users/xiang90/repos",
            "events_url": "https://api.github.com/users/xiang90/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xiang90/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@philips Do you think it is better to separate the logic?\n",
        "created_at": "2014-04-11T15:22:27Z",
        "updated_at": "2014-04-11T15:22:27Z",
        "html_url": "https://github.com/goraft/raft/pull/218#discussion_r11537161",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/218",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/11537161"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/218#discussion_r11537161"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/218"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/11537738",
        "pull_request_review_id": null,
        "id": 11537738,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTM3NzM4",
        "diff_hunk": "@@ -484,8 +484,8 @@ func (s *server) Init() error {\n \t// Server has been initialized or server was stopped after initialized\n \t// If log has been initialized, we know that the server was stopped after\n \t// running.\n-\tif s.state == Initialized || s.log.initialized {\n-\t\ts.state = Initialized\n+\tif s.State() == Initialized || s.log.initialized {\n+\t\ts.setState(Initialized)",
        "path": "server.go",
        "position": 7,
        "original_position": 7,
        "commit_id": "768a0fda5fe29aa49bf65245fd9f4ae116f71e33",
        "original_commit_id": "768a0fda5fe29aa49bf65245fd9f4ae116f71e33",
        "user": {
            "login": "philips",
            "id": 33544,
            "node_id": "MDQ6VXNlcjMzNTQ0",
            "avatar_url": "https://avatars1.githubusercontent.com/u/33544?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/philips",
            "html_url": "https://github.com/philips",
            "followers_url": "https://api.github.com/users/philips/followers",
            "following_url": "https://api.github.com/users/philips/following{/other_user}",
            "gists_url": "https://api.github.com/users/philips/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/philips/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/philips/subscriptions",
            "organizations_url": "https://api.github.com/users/philips/orgs",
            "repos_url": "https://api.github.com/users/philips/repos",
            "events_url": "https://api.github.com/users/philips/events{/privacy}",
            "received_events_url": "https://api.github.com/users/philips/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Yes, that is better. Ideally the state machine would compare and swap while holding locks but this is OK.\n",
        "created_at": "2014-04-11T15:32:36Z",
        "updated_at": "2014-04-11T15:32:36Z",
        "html_url": "https://github.com/goraft/raft/pull/218#discussion_r11537738",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/218",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/11537738"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/218#discussion_r11537738"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/218"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/11702666",
        "pull_request_review_id": null,
        "id": 11702666,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNzAyNjY2",
        "diff_hunk": "@@ -484,8 +484,8 @@ func (s *server) Init() error {\n \t// Server has been initialized or server was stopped after initialized\n \t// If log has been initialized, we know that the server was stopped after\n \t// running.\n-\tif s.state == Initialized || s.log.initialized {\n-\t\ts.state = Initialized\n+\tif s.State() == Initialized || s.log.initialized {\n+\t\ts.setState(Initialized)",
        "path": "server.go",
        "position": 7,
        "original_position": 7,
        "commit_id": "768a0fda5fe29aa49bf65245fd9f4ae116f71e33",
        "original_commit_id": "768a0fda5fe29aa49bf65245fd9f4ae116f71e33",
        "user": {
            "login": "philips",
            "id": 33544,
            "node_id": "MDQ6VXNlcjMzNTQ0",
            "avatar_url": "https://avatars1.githubusercontent.com/u/33544?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/philips",
            "html_url": "https://github.com/philips",
            "followers_url": "https://api.github.com/users/philips/followers",
            "following_url": "https://api.github.com/users/philips/following{/other_user}",
            "gists_url": "https://api.github.com/users/philips/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/philips/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/philips/subscriptions",
            "organizations_url": "https://api.github.com/users/philips/orgs",
            "repos_url": "https://api.github.com/users/philips/repos",
            "events_url": "https://api.github.com/users/philips/events{/privacy}",
            "received_events_url": "https://api.github.com/users/philips/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@xiangli-cmu Please change the logic and merge when you have a chance.\n",
        "created_at": "2014-04-16T19:38:40Z",
        "updated_at": "2014-04-16T19:38:40Z",
        "html_url": "https://github.com/goraft/raft/pull/218#discussion_r11702666",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/218",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/11702666"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/218#discussion_r11702666"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/218"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/14164496",
        "pull_request_review_id": null,
        "id": 14164496,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MTY0NDk2",
        "diff_hunk": "@@ -19,13 +19,34 @@ import (\n //\n //------------------------------------------------------------------------------\n \n+type State byte\n+\n+func (s State) String() string {\n+\tswitch s {\n+\tcase Stopped:\n+\t\treturn \"stopped\"\n+\tcase Initialized:\n+\t\treturn \"initalized\"\n+\tcase Follower:\n+\t\treturn \"follower\"\n+\tcase Candidate:\n+\t\treturn \"candidate\"\n+\tcase Leader:\n+\t\treturn \"leader\"\n+\tcase Snapshotting:\n+\t\treturn \"snapshotting\"\n+\tdefault:\n+\t\treturn \"invalidtype\"\n+\t}\n+}",
        "path": "server.go",
        "position": 23,
        "original_position": 23,
        "commit_id": "707805aab2ed14ae2117e979f84a7952af2ac3ac",
        "original_commit_id": "707805aab2ed14ae2117e979f84a7952af2ac3ac",
        "user": {
            "login": "yichengq",
            "id": 2976232,
            "node_id": "MDQ6VXNlcjI5NzYyMzI=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/2976232?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/yichengq",
            "html_url": "https://github.com/yichengq",
            "followers_url": "https://api.github.com/users/yichengq/followers",
            "following_url": "https://api.github.com/users/yichengq/following{/other_user}",
            "gists_url": "https://api.github.com/users/yichengq/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/yichengq/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/yichengq/subscriptions",
            "organizations_url": "https://api.github.com/users/yichengq/orgs",
            "repos_url": "https://api.github.com/users/yichengq/repos",
            "events_url": "https://api.github.com/users/yichengq/events{/privacy}",
            "received_events_url": "https://api.github.com/users/yichengq/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Personally, I think it is better to use a `map[State]string` here.\n",
        "created_at": "2014-06-25T00:52:00Z",
        "updated_at": "2014-06-25T00:52:00Z",
        "html_url": "https://github.com/goraft/raft/pull/227#discussion_r14164496",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/227",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/14164496"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/227#discussion_r14164496"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/227"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/goraft/raft/pulls/comments/14165509",
        "pull_request_review_id": null,
        "id": 14165509,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MTY1NTA5",
        "diff_hunk": "@@ -19,13 +19,34 @@ import (\n //\n //------------------------------------------------------------------------------\n \n+type State byte\n+\n+func (s State) String() string {\n+\tswitch s {\n+\tcase Stopped:\n+\t\treturn \"stopped\"\n+\tcase Initialized:\n+\t\treturn \"initalized\"\n+\tcase Follower:\n+\t\treturn \"follower\"\n+\tcase Candidate:\n+\t\treturn \"candidate\"\n+\tcase Leader:\n+\t\treturn \"leader\"\n+\tcase Snapshotting:\n+\t\treturn \"snapshotting\"\n+\tdefault:\n+\t\treturn \"invalidtype\"\n+\t}\n+}",
        "path": "server.go",
        "position": 23,
        "original_position": 23,
        "commit_id": "707805aab2ed14ae2117e979f84a7952af2ac3ac",
        "original_commit_id": "707805aab2ed14ae2117e979f84a7952af2ac3ac",
        "user": {
            "login": "rdallman",
            "id": 2935111,
            "node_id": "MDQ6VXNlcjI5MzUxMTE=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/2935111?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rdallman",
            "html_url": "https://github.com/rdallman",
            "followers_url": "https://api.github.com/users/rdallman/followers",
            "following_url": "https://api.github.com/users/rdallman/following{/other_user}",
            "gists_url": "https://api.github.com/users/rdallman/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rdallman/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rdallman/subscriptions",
            "organizations_url": "https://api.github.com/users/rdallman/orgs",
            "repos_url": "https://api.github.com/users/rdallman/repos",
            "events_url": "https://api.github.com/users/rdallman/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rdallman/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "hmm, for brevity and maybe readability, I would agree. on the other hand it makes String() allocate a map in each call or we populate the package with a global map for state strings. Let me know what is preferred I will gladly make change. Either way makes State more understandable and I would be happy.\n",
        "created_at": "2014-06-25T01:33:09Z",
        "updated_at": "2014-06-25T01:33:09Z",
        "html_url": "https://github.com/goraft/raft/pull/227#discussion_r14165509",
        "pull_request_url": "https://api.github.com/repos/goraft/raft/pulls/227",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/comments/14165509"
            },
            "html": {
                "href": "https://github.com/goraft/raft/pull/227#discussion_r14165509"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/goraft/raft/pulls/227"
            }
        }
    }
]