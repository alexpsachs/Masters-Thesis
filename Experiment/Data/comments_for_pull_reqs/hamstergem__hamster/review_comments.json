[
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/7548761",
        "pull_request_review_id": null,
        "id": 7548761,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc1NDg3NjE=",
        "diff_hunk": "@@ -15,29 +15,85 @@ class << self\n \n     extend Forwardable\n \n+    # Create a list containing the given items\n+    #\n+    # @example\n+    #   list = Hamster.list(:a, :b, :c)\n+    #   # => [:a, :b, :c]\n+    #\n+    # @return [Hamster::List]\n+    #\n+    # @api public\n     def list(*items)\n       items.to_list\n     end\n \n+    # Create a lazy, infinite list\n+    #\n+    # The given block is repeatedly called to yield the elements of the list.\n+    #\n+    # @example\n+    #   Hamster.stream { :hello }.take(3)\n+    #   # => [:hello, :hello, :hello]\n+    #\n+    # @return [Hamster::List]\n+    #\n+    # @api public\n     def stream(&block)\n       return EmptyList unless block_given?\n       Stream.new { Sequence.new(yield, stream(&block)) }\n     end\n \n+    # Construct a list of consecutive integers\n+    #\n+    # @example\n+    #   Hamster.interval(5,9)\n+    #   # => [5, 6, 7, 8, 9]\n+    #\n+    # @param from [Integer] Start value, inclusive\n+    # @param from [Integer] End value, inclusive\n+    # @return [Hamster::List]\n+    #\n+    # @api public\n     def interval(from, to)\n       return EmptyList if from > to\n       interval_exclusive(from, to.next)\n     end\n     def_delegator :self, :interval, :range\n \n+    # Create an infinite list repeating the same item indefinitely\n+    #\n+    # @example\n+    #   Hamster.repeat(:chunky).take(4)\n+    #   => [:chunky, :chunky, :chunky, :chunky]\n+    #\n+    # @api public\n     def repeat(item)\n       Stream.new { Sequence.new(item, repeat(item)) }\n     end\n \n+    # Create a list that contains a given item a fixed number of times\n+    #\n+    # @example\n+    #   Hamster.replicate(3).(:hamster)\n+    #   #=> [:hamster, :hamster, :hamster]\n+    #\n+    # @api public\n     def replicate(number, item)\n       repeat(item).take(number)\n     end\n \n+    # Create an infinite list where each item is based on the previous one\n+    #\n+    # @example\n+    #   Hamster.iterate(0) {|i| i.next}.take(5)\n+    #   # => [0, 1, 2, 3, 4]\n+    #\n+    # @param item [Object] Starting value\n+    # @yieldparam [Object] The previous value\n+    # @yieldreturn [Object] The next value",
        "path": "lib/hamster/list.rb",
        "position": 80,
        "original_position": 80,
        "commit_id": "b8dbcc29199a069370efc6ab90154a5515adf19c",
        "original_commit_id": "b8dbcc29199a069370efc6ab90154a5515adf19c",
        "user": {
            "login": "krainboltgreene",
            "id": 334809,
            "node_id": "MDQ6VXNlcjMzNDgwOQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/334809?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krainboltgreene",
            "html_url": "https://github.com/krainboltgreene",
            "followers_url": "https://api.github.com/users/krainboltgreene/followers",
            "following_url": "https://api.github.com/users/krainboltgreene/following{/other_user}",
            "gists_url": "https://api.github.com/users/krainboltgreene/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krainboltgreene/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krainboltgreene/subscriptions",
            "organizations_url": "https://api.github.com/users/krainboltgreene/orgs",
            "repos_url": "https://api.github.com/users/krainboltgreene/repos",
            "events_url": "https://api.github.com/users/krainboltgreene/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krainboltgreene/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Should this be more specific than `[Object]`?\n",
        "created_at": "2013-11-10T14:36:33Z",
        "updated_at": "2013-11-10T14:36:33Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/62#discussion_r7548761",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/62",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/7548761"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/62#discussion_r7548761"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/62"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/7548782",
        "pull_request_review_id": null,
        "id": 7548782,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc1NDg3ODI=",
        "diff_hunk": "@@ -15,29 +15,85 @@ class << self\n \n     extend Forwardable\n \n+    # Create a list containing the given items\n+    #\n+    # @example\n+    #   list = Hamster.list(:a, :b, :c)\n+    #   # => [:a, :b, :c]\n+    #\n+    # @return [Hamster::List]\n+    #\n+    # @api public\n     def list(*items)\n       items.to_list\n     end\n \n+    # Create a lazy, infinite list\n+    #\n+    # The given block is repeatedly called to yield the elements of the list.\n+    #\n+    # @example\n+    #   Hamster.stream { :hello }.take(3)\n+    #   # => [:hello, :hello, :hello]\n+    #\n+    # @return [Hamster::List]\n+    #\n+    # @api public\n     def stream(&block)\n       return EmptyList unless block_given?\n       Stream.new { Sequence.new(yield, stream(&block)) }\n     end\n \n+    # Construct a list of consecutive integers\n+    #\n+    # @example\n+    #   Hamster.interval(5,9)\n+    #   # => [5, 6, 7, 8, 9]\n+    #\n+    # @param from [Integer] Start value, inclusive\n+    # @param from [Integer] End value, inclusive\n+    # @return [Hamster::List]\n+    #\n+    # @api public\n     def interval(from, to)\n       return EmptyList if from > to\n       interval_exclusive(from, to.next)\n     end\n     def_delegator :self, :interval, :range\n \n+    # Create an infinite list repeating the same item indefinitely\n+    #\n+    # @example\n+    #   Hamster.repeat(:chunky).take(4)\n+    #   => [:chunky, :chunky, :chunky, :chunky]\n+    #\n+    # @api public\n     def repeat(item)\n       Stream.new { Sequence.new(item, repeat(item)) }\n     end\n \n+    # Create a list that contains a given item a fixed number of times\n+    #\n+    # @example\n+    #   Hamster.replicate(3).(:hamster)\n+    #   #=> [:hamster, :hamster, :hamster]\n+    #\n+    # @api public\n     def replicate(number, item)\n       repeat(item).take(number)\n     end\n \n+    # Create an infinite list where each item is based on the previous one\n+    #\n+    # @example\n+    #   Hamster.iterate(0) {|i| i.next}.take(5)\n+    #   # => [0, 1, 2, 3, 4]\n+    #\n+    # @param item [Object] Starting value\n+    # @yieldparam [Object] The previous value\n+    # @yieldreturn [Object] The next value",
        "path": "lib/hamster/list.rb",
        "position": 80,
        "original_position": 80,
        "commit_id": "b8dbcc29199a069370efc6ab90154a5515adf19c",
        "original_commit_id": "b8dbcc29199a069370efc6ab90154a5515adf19c",
        "user": {
            "login": "plexus",
            "id": 32212,
            "node_id": "MDQ6VXNlcjMyMjEy",
            "avatar_url": "https://avatars2.githubusercontent.com/u/32212?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/plexus",
            "html_url": "https://github.com/plexus",
            "followers_url": "https://api.github.com/users/plexus/followers",
            "following_url": "https://api.github.com/users/plexus/following{/other_user}",
            "gists_url": "https://api.github.com/users/plexus/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/plexus/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/plexus/subscriptions",
            "organizations_url": "https://api.github.com/users/plexus/orgs",
            "repos_url": "https://api.github.com/users/plexus/repos",
            "events_url": "https://api.github.com/users/plexus/events{/privacy}",
            "received_events_url": "https://api.github.com/users/plexus/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Open to suggestions, I was assuming it could be pretty much anything.\n",
        "created_at": "2013-11-10T14:48:06Z",
        "updated_at": "2013-11-10T14:48:06Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/62#discussion_r7548782",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/62",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/7548782"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/62#discussion_r7548782"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/62"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/8777449",
        "pull_request_review_id": null,
        "id": 8777449,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg3Nzc0NDk=",
        "diff_hunk": "@@ -0,0 +1,12 @@\n+module Hamster\n+  module Groupable\n+    def group_by_with(empty_group, &block)\n+      return group_by { |item| item } unless block_given?",
        "path": "lib/hamster/groupable.rb",
        "position": 4,
        "original_position": 4,
        "commit_id": "8711659f12d0304cd9efc46aa38728834f4e00d4",
        "original_commit_id": "992d98a2f08b443e46b03422e5e183d76b0880fe",
        "user": {
            "login": "krainboltgreene",
            "id": 334809,
            "node_id": "MDQ6VXNlcjMzNDgwOQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/334809?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krainboltgreene",
            "html_url": "https://github.com/krainboltgreene",
            "followers_url": "https://api.github.com/users/krainboltgreene/followers",
            "following_url": "https://api.github.com/users/krainboltgreene/following{/other_user}",
            "gists_url": "https://api.github.com/users/krainboltgreene/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krainboltgreene/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krainboltgreene/subscriptions",
            "organizations_url": "https://api.github.com/users/krainboltgreene/orgs",
            "repos_url": "https://api.github.com/users/krainboltgreene/repos",
            "events_url": "https://api.github.com/users/krainboltgreene/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krainboltgreene/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'm not a huge fan of early return styles. Does it actually confer any bonus?\n",
        "created_at": "2014-01-10T00:56:21Z",
        "updated_at": "2014-01-10T14:21:57Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/78#discussion_r8777449",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/78",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/8777449"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/78#discussion_r8777449"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/78"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/8777648",
        "pull_request_review_id": null,
        "id": 8777648,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg3Nzc2NDg=",
        "diff_hunk": "@@ -0,0 +1,12 @@\n+module Hamster\n+  module Groupable\n+    def group_by_with(empty_group, &block)\n+      return group_by { |item| item } unless block_given?",
        "path": "lib/hamster/groupable.rb",
        "position": 4,
        "original_position": 4,
        "commit_id": "8711659f12d0304cd9efc46aa38728834f4e00d4",
        "original_commit_id": "992d98a2f08b443e46b03422e5e183d76b0880fe",
        "user": {
            "login": "gcapizzi",
            "id": 251425,
            "node_id": "MDQ6VXNlcjI1MTQyNQ==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/251425?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gcapizzi",
            "html_url": "https://github.com/gcapizzi",
            "followers_url": "https://api.github.com/users/gcapizzi/followers",
            "following_url": "https://api.github.com/users/gcapizzi/following{/other_user}",
            "gists_url": "https://api.github.com/users/gcapizzi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gcapizzi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gcapizzi/subscriptions",
            "organizations_url": "https://api.github.com/users/gcapizzi/orgs",
            "repos_url": "https://api.github.com/users/gcapizzi/repos",
            "events_url": "https://api.github.com/users/gcapizzi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gcapizzi/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I've just extracted the code, that's how it was done in `List#group_by` and `Set#group_by`. I've seen early returns elsewhere also, they're pretty widespread in the codebase.\n",
        "created_at": "2014-01-10T01:06:25Z",
        "updated_at": "2014-01-10T14:21:57Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/78#discussion_r8777648",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/78",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/8777648"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/78#discussion_r8777648"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/78"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/8777675",
        "pull_request_review_id": null,
        "id": 8777675,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg3Nzc2NzU=",
        "diff_hunk": "@@ -0,0 +1,12 @@\n+module Hamster\n+  module Groupable\n+    def group_by_with(empty_group, &block)\n+      return group_by { |item| item } unless block_given?",
        "path": "lib/hamster/groupable.rb",
        "position": 4,
        "original_position": 4,
        "commit_id": "8711659f12d0304cd9efc46aa38728834f4e00d4",
        "original_commit_id": "992d98a2f08b443e46b03422e5e183d76b0880fe",
        "user": {
            "login": "krainboltgreene",
            "id": 334809,
            "node_id": "MDQ6VXNlcjMzNDgwOQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/334809?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krainboltgreene",
            "html_url": "https://github.com/krainboltgreene",
            "followers_url": "https://api.github.com/users/krainboltgreene/followers",
            "following_url": "https://api.github.com/users/krainboltgreene/following{/other_user}",
            "gists_url": "https://api.github.com/users/krainboltgreene/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krainboltgreene/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krainboltgreene/subscriptions",
            "organizations_url": "https://api.github.com/users/krainboltgreene/orgs",
            "repos_url": "https://api.github.com/users/krainboltgreene/repos",
            "events_url": "https://api.github.com/users/krainboltgreene/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krainboltgreene/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yeah, a lot of choices were made prior to me coming on, and I respect the style. I don't see any issue in staying this way and only changing patterns in a clean sweep of the entire code.\n",
        "created_at": "2014-01-10T01:08:16Z",
        "updated_at": "2014-01-10T14:21:57Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/78#discussion_r8777675",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/78",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/8777675"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/78#discussion_r8777675"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/78"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/14051678",
        "pull_request_review_id": null,
        "id": 14051678,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MDUxNjc4",
        "diff_hunk": "@@ -1,39 +1,22 @@\n-require \"forwardable\"\n require \"hamster/immutable\"\n \n module Hamster\n-  class Tuple\n-    extend Forwardable\n+  class Tuple < Array\n     include Immutable\n \n     def initialize(*items)\n-      @items = items.freeze\n-    end\n-\n-    def first\n-      @items.first\n-    end\n-\n-    def last\n-      @items.last\n+      super(items)",
        "path": "lib/hamster/tuple.rb",
        "position": 20,
        "original_position": 20,
        "commit_id": "c44072a0f7e7bf1c5f5d10c313bb35d86d7a5dbd",
        "original_commit_id": "c44072a0f7e7bf1c5f5d10c313bb35d86d7a5dbd",
        "user": {
            "login": "krainboltgreene",
            "id": 334809,
            "node_id": "MDQ6VXNlcjMzNDgwOQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/334809?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krainboltgreene",
            "html_url": "https://github.com/krainboltgreene",
            "followers_url": "https://api.github.com/users/krainboltgreene/followers",
            "following_url": "https://api.github.com/users/krainboltgreene/following{/other_user}",
            "gists_url": "https://api.github.com/users/krainboltgreene/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krainboltgreene/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krainboltgreene/subscriptions",
            "organizations_url": "https://api.github.com/users/krainboltgreene/orgs",
            "repos_url": "https://api.github.com/users/krainboltgreene/repos",
            "events_url": "https://api.github.com/users/krainboltgreene/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krainboltgreene/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Doesn't this mean we no longer freeze the item array?\n",
        "created_at": "2014-06-21T21:23:21Z",
        "updated_at": "2014-06-21T21:23:21Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/97#discussion_r14051678",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/97",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/14051678"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/97#discussion_r14051678"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/97"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/14053004",
        "pull_request_review_id": null,
        "id": 14053004,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MDUzMDA0",
        "diff_hunk": "@@ -1,39 +1,22 @@\n-require \"forwardable\"\n require \"hamster/immutable\"\n \n module Hamster\n-  class Tuple\n-    extend Forwardable\n+  class Tuple < Array\n     include Immutable\n \n     def initialize(*items)\n-      @items = items.freeze\n-    end\n-\n-    def first\n-      @items.first\n-    end\n-\n-    def last\n-      @items.last\n+      super(items)",
        "path": "lib/hamster/tuple.rb",
        "position": 20,
        "original_position": 20,
        "commit_id": "c44072a0f7e7bf1c5f5d10c313bb35d86d7a5dbd",
        "original_commit_id": "c44072a0f7e7bf1c5f5d10c313bb35d86d7a5dbd",
        "user": {
            "login": "alexdowad",
            "id": 1067359,
            "node_id": "MDQ6VXNlcjEwNjczNTk=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1067359?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alexdowad",
            "html_url": "https://github.com/alexdowad",
            "followers_url": "https://api.github.com/users/alexdowad/followers",
            "following_url": "https://api.github.com/users/alexdowad/following{/other_user}",
            "gists_url": "https://api.github.com/users/alexdowad/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/alexdowad/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alexdowad/subscriptions",
            "organizations_url": "https://api.github.com/users/alexdowad/orgs",
            "repos_url": "https://api.github.com/users/alexdowad/repos",
            "events_url": "https://api.github.com/users/alexdowad/events{/privacy}",
            "received_events_url": "https://api.github.com/users/alexdowad/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The Tuple _is_ the item array. Since Tuple includes Immutable, all new\nTuples are automatically frozen. Note that with this patch, Tuple inherits from Array.\n",
        "created_at": "2014-06-22T05:04:44Z",
        "updated_at": "2014-06-22T05:05:38Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/97#discussion_r14053004",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/97",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/14053004"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/97#discussion_r14053004"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/97"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/14170475",
        "pull_request_review_id": null,
        "id": 14170475,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MTcwNDc1",
        "diff_hunk": "@@ -1,39 +1,22 @@\n-require \"forwardable\"\n require \"hamster/immutable\"\n \n module Hamster\n-  class Tuple\n-    extend Forwardable\n+  class Tuple < Array\n     include Immutable\n \n     def initialize(*items)\n-      @items = items.freeze\n-    end\n-\n-    def first\n-      @items.first\n-    end\n-\n-    def last\n-      @items.last\n+      super(items)",
        "path": "lib/hamster/tuple.rb",
        "position": 20,
        "original_position": 20,
        "commit_id": "c44072a0f7e7bf1c5f5d10c313bb35d86d7a5dbd",
        "original_commit_id": "c44072a0f7e7bf1c5f5d10c313bb35d86d7a5dbd",
        "user": {
            "login": "alexdowad",
            "id": 1067359,
            "node_id": "MDQ6VXNlcjEwNjczNTk=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1067359?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alexdowad",
            "html_url": "https://github.com/alexdowad",
            "followers_url": "https://api.github.com/users/alexdowad/followers",
            "following_url": "https://api.github.com/users/alexdowad/following{/other_user}",
            "gists_url": "https://api.github.com/users/alexdowad/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/alexdowad/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alexdowad/subscriptions",
            "organizations_url": "https://api.github.com/users/alexdowad/orgs",
            "repos_url": "https://api.github.com/users/alexdowad/repos",
            "events_url": "https://api.github.com/users/alexdowad/events{/privacy}",
            "received_events_url": "https://api.github.com/users/alexdowad/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "To clarify further: in this implementation, the array here called `items` is just an ephemeral object used for initialization (actually used to package up varargs passed to the constructor). It is passed to `Array.new` to initialize the Tuple (`ri` can give you more information on `Array.new`). After that, no reference to it is retained, and it will be garbage-collected. It could be frozen, but that would not serve any purpose.\n",
        "created_at": "2014-06-25T06:17:31Z",
        "updated_at": "2014-06-25T06:17:31Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/97#discussion_r14170475",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/97",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/14170475"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/97#discussion_r14170475"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/97"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/14184596",
        "pull_request_review_id": null,
        "id": 14184596,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MTg0NTk2",
        "diff_hunk": "@@ -1,39 +1,22 @@\n-require \"forwardable\"\n require \"hamster/immutable\"\n \n module Hamster\n-  class Tuple\n-    extend Forwardable\n+  class Tuple < Array\n     include Immutable\n \n     def initialize(*items)\n-      @items = items.freeze\n-    end\n-\n-    def first\n-      @items.first\n-    end\n-\n-    def last\n-      @items.last\n+      super(items)",
        "path": "lib/hamster/tuple.rb",
        "position": 20,
        "original_position": 20,
        "commit_id": "c44072a0f7e7bf1c5f5d10c313bb35d86d7a5dbd",
        "original_commit_id": "c44072a0f7e7bf1c5f5d10c313bb35d86d7a5dbd",
        "user": {
            "login": "krainboltgreene",
            "id": 334809,
            "node_id": "MDQ6VXNlcjMzNDgwOQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/334809?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krainboltgreene",
            "html_url": "https://github.com/krainboltgreene",
            "followers_url": "https://api.github.com/users/krainboltgreene/followers",
            "following_url": "https://api.github.com/users/krainboltgreene/following{/other_user}",
            "gists_url": "https://api.github.com/users/krainboltgreene/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krainboltgreene/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krainboltgreene/subscriptions",
            "organizations_url": "https://api.github.com/users/krainboltgreene/orgs",
            "repos_url": "https://api.github.com/users/krainboltgreene/repos",
            "events_url": "https://api.github.com/users/krainboltgreene/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krainboltgreene/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Agreed.\n",
        "created_at": "2014-06-25T13:22:57Z",
        "updated_at": "2014-06-25T13:22:57Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/97#discussion_r14184596",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/97",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/14184596"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/97#discussion_r14184596"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/97"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/14325633",
        "pull_request_review_id": null,
        "id": 14325633,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MzI1NjMz",
        "diff_hunk": "@@ -15,12 +15,15 @@ class Hash\n     include Immutable\n \n     class << self\n+      alias :alloc :new",
        "path": "lib/hamster/hash.rb",
        "position": 4,
        "original_position": 4,
        "commit_id": "6ace98eb71bc0f194914847fe8292bade93d52cc",
        "original_commit_id": "62f7bef9777ee41d0d79755e48c3a028a48a6210",
        "user": {
            "login": "krainboltgreene",
            "id": 334809,
            "node_id": "MDQ6VXNlcjMzNDgwOQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/334809?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krainboltgreene",
            "html_url": "https://github.com/krainboltgreene",
            "followers_url": "https://api.github.com/users/krainboltgreene/followers",
            "following_url": "https://api.github.com/users/krainboltgreene/following{/other_user}",
            "gists_url": "https://api.github.com/users/krainboltgreene/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krainboltgreene/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krainboltgreene/subscriptions",
            "organizations_url": "https://api.github.com/users/krainboltgreene/orgs",
            "repos_url": "https://api.github.com/users/krainboltgreene/repos",
            "events_url": "https://api.github.com/users/krainboltgreene/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krainboltgreene/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think we're using `Forwardable` for aliasing methods, in order to facilitate inheriting.\n",
        "created_at": "2014-06-28T19:02:35Z",
        "updated_at": "2014-06-28T19:18:14Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/98#discussion_r14325633",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/98",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/14325633"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/98#discussion_r14325633"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/98"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/14325635",
        "pull_request_review_id": null,
        "id": 14325635,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MzI1NjM1",
        "diff_hunk": "@@ -18,6 +18,16 @@\n           Hamster.hash(*pairs).send(method).should == result\n         end\n \n+        describe \"from a subclass\" do",
        "path": "spec/hamster/hash/empty_spec.rb",
        "position": null,
        "original_position": 4,
        "commit_id": "6ace98eb71bc0f194914847fe8292bade93d52cc",
        "original_commit_id": "62f7bef9777ee41d0d79755e48c3a028a48a6210",
        "user": {
            "login": "krainboltgreene",
            "id": 334809,
            "node_id": "MDQ6VXNlcjMzNDgwOQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/334809?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krainboltgreene",
            "html_url": "https://github.com/krainboltgreene",
            "followers_url": "https://api.github.com/users/krainboltgreene/followers",
            "following_url": "https://api.github.com/users/krainboltgreene/following{/other_user}",
            "gists_url": "https://api.github.com/users/krainboltgreene/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krainboltgreene/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krainboltgreene/subscriptions",
            "organizations_url": "https://api.github.com/users/krainboltgreene/orgs",
            "repos_url": "https://api.github.com/users/krainboltgreene/repos",
            "events_url": "https://api.github.com/users/krainboltgreene/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krainboltgreene/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This should be `context`\n",
        "created_at": "2014-06-28T19:03:28Z",
        "updated_at": "2014-06-28T19:18:14Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/98#discussion_r14325635",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/98",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/14325635"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/98#discussion_r14325635"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/98"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/14325644",
        "pull_request_review_id": null,
        "id": 14325644,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MzI1NjQ0",
        "diff_hunk": "@@ -15,12 +15,15 @@ class Hash\n     include Immutable\n \n     class << self\n+      alias :alloc :new",
        "path": "lib/hamster/hash.rb",
        "position": 4,
        "original_position": 4,
        "commit_id": "6ace98eb71bc0f194914847fe8292bade93d52cc",
        "original_commit_id": "62f7bef9777ee41d0d79755e48c3a028a48a6210",
        "user": {
            "login": "alexdowad",
            "id": 1067359,
            "node_id": "MDQ6VXNlcjEwNjczNTk=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1067359?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alexdowad",
            "html_url": "https://github.com/alexdowad",
            "followers_url": "https://api.github.com/users/alexdowad/followers",
            "following_url": "https://api.github.com/users/alexdowad/following{/other_user}",
            "gists_url": "https://api.github.com/users/alexdowad/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/alexdowad/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alexdowad/subscriptions",
            "organizations_url": "https://api.github.com/users/alexdowad/orgs",
            "repos_url": "https://api.github.com/users/alexdowad/repos",
            "events_url": "https://api.github.com/users/alexdowad/events{/privacy}",
            "received_events_url": "https://api.github.com/users/alexdowad/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I am doubting if that will work, but I will try. Here we need to grab a reference to the original `new` before we override it. Calling the original `new` after it has been overridden can also be done using something like `Class.instance_method(:new).bind(self).call`, but that's rather ugly.\n\nI think I should also clarify that when RDoc or something similar is added to this code, I would mark `alloc` as hidden (no documentation). It's not intended to ever be called from outside Hamster.\n",
        "created_at": "2014-06-28T19:06:09Z",
        "updated_at": "2014-06-28T19:18:14Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/98#discussion_r14325644",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/98",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/14325644"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/98#discussion_r14325644"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/98"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/14325649",
        "pull_request_review_id": null,
        "id": 14325649,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MzI1NjQ5",
        "diff_hunk": "@@ -18,6 +18,16 @@\n           Hamster.hash(*pairs).send(method).should == result\n         end\n \n+        describe \"from a subclass\" do",
        "path": "spec/hamster/hash/empty_spec.rb",
        "position": null,
        "original_position": 4,
        "commit_id": "6ace98eb71bc0f194914847fe8292bade93d52cc",
        "original_commit_id": "62f7bef9777ee41d0d79755e48c3a028a48a6210",
        "user": {
            "login": "alexdowad",
            "id": 1067359,
            "node_id": "MDQ6VXNlcjEwNjczNTk=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1067359?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alexdowad",
            "html_url": "https://github.com/alexdowad",
            "followers_url": "https://api.github.com/users/alexdowad/followers",
            "following_url": "https://api.github.com/users/alexdowad/following{/other_user}",
            "gists_url": "https://api.github.com/users/alexdowad/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/alexdowad/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alexdowad/subscriptions",
            "organizations_url": "https://api.github.com/users/alexdowad/orgs",
            "repos_url": "https://api.github.com/users/alexdowad/repos",
            "events_url": "https://api.github.com/users/alexdowad/events{/privacy}",
            "received_events_url": "https://api.github.com/users/alexdowad/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Does `context` do the same thing as `describe`? Sorry for my ignorance.\n",
        "created_at": "2014-06-28T19:07:30Z",
        "updated_at": "2014-06-28T19:18:14Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/98#discussion_r14325649",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/98",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/14325649"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/98#discussion_r14325649"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/98"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/14325653",
        "pull_request_review_id": null,
        "id": 14325653,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MzI1NjUz",
        "diff_hunk": "@@ -18,6 +18,16 @@\n           Hamster.hash(*pairs).send(method).should == result\n         end\n \n+        describe \"from a subclass\" do",
        "path": "spec/hamster/hash/empty_spec.rb",
        "position": null,
        "original_position": 4,
        "commit_id": "6ace98eb71bc0f194914847fe8292bade93d52cc",
        "original_commit_id": "62f7bef9777ee41d0d79755e48c3a028a48a6210",
        "user": {
            "login": "krainboltgreene",
            "id": 334809,
            "node_id": "MDQ6VXNlcjMzNDgwOQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/334809?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krainboltgreene",
            "html_url": "https://github.com/krainboltgreene",
            "followers_url": "https://api.github.com/users/krainboltgreene/followers",
            "following_url": "https://api.github.com/users/krainboltgreene/following{/other_user}",
            "gists_url": "https://api.github.com/users/krainboltgreene/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krainboltgreene/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krainboltgreene/subscriptions",
            "organizations_url": "https://api.github.com/users/krainboltgreene/orgs",
            "repos_url": "https://api.github.com/users/krainboltgreene/repos",
            "events_url": "https://api.github.com/users/krainboltgreene/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krainboltgreene/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Method wise they're the same, but contextually it's common practice to use `describe` when describing interfaces and `context` for the different contexts of that behavior.\n",
        "created_at": "2014-06-28T19:09:12Z",
        "updated_at": "2014-06-28T19:18:14Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/98#discussion_r14325653",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/98",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/14325653"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/98#discussion_r14325653"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/98"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/14325672",
        "pull_request_review_id": null,
        "id": 14325672,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MzI1Njcy",
        "diff_hunk": "@@ -18,6 +18,16 @@\n           Hamster.hash(*pairs).send(method).should == result\n         end\n \n+        describe \"from a subclass\" do",
        "path": "spec/hamster/hash/empty_spec.rb",
        "position": null,
        "original_position": 4,
        "commit_id": "6ace98eb71bc0f194914847fe8292bade93d52cc",
        "original_commit_id": "62f7bef9777ee41d0d79755e48c3a028a48a6210",
        "user": {
            "login": "alexdowad",
            "id": 1067359,
            "node_id": "MDQ6VXNlcjEwNjczNTk=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1067359?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alexdowad",
            "html_url": "https://github.com/alexdowad",
            "followers_url": "https://api.github.com/users/alexdowad/followers",
            "following_url": "https://api.github.com/users/alexdowad/following{/other_user}",
            "gists_url": "https://api.github.com/users/alexdowad/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/alexdowad/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alexdowad/subscriptions",
            "organizations_url": "https://api.github.com/users/alexdowad/orgs",
            "repos_url": "https://api.github.com/users/alexdowad/repos",
            "events_url": "https://api.github.com/users/alexdowad/events{/privacy}",
            "received_events_url": "https://api.github.com/users/alexdowad/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Thanks for the tip. I am just adding a commit to fix this.\n",
        "created_at": "2014-06-28T19:17:35Z",
        "updated_at": "2014-06-28T19:18:14Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/98#discussion_r14325672",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/98",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/14325672"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/98#discussion_r14325672"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/98"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/14325685",
        "pull_request_review_id": null,
        "id": 14325685,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MzI1Njg1",
        "diff_hunk": "@@ -15,12 +15,15 @@ class Hash\n     include Immutable\n \n     class << self\n+      alias :alloc :new",
        "path": "lib/hamster/hash.rb",
        "position": 4,
        "original_position": 4,
        "commit_id": "6ace98eb71bc0f194914847fe8292bade93d52cc",
        "original_commit_id": "62f7bef9777ee41d0d79755e48c3a028a48a6210",
        "user": {
            "login": "alexdowad",
            "id": 1067359,
            "node_id": "MDQ6VXNlcjEwNjczNTk=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1067359?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alexdowad",
            "html_url": "https://github.com/alexdowad",
            "followers_url": "https://api.github.com/users/alexdowad/followers",
            "following_url": "https://api.github.com/users/alexdowad/following{/other_user}",
            "gists_url": "https://api.github.com/users/alexdowad/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/alexdowad/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alexdowad/subscriptions",
            "organizations_url": "https://api.github.com/users/alexdowad/orgs",
            "repos_url": "https://api.github.com/users/alexdowad/repos",
            "events_url": "https://api.github.com/users/alexdowad/events{/privacy}",
            "received_events_url": "https://api.github.com/users/alexdowad/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I have confirmed that `def_delegator` won't work here. When `new` is redefined, `alloc` will also point to the redefined `new`, which is not what is needed. I need a way to create a new instance after `new` has been \"hijacked\" for use as part of the public API.\n",
        "created_at": "2014-06-28T19:21:11Z",
        "updated_at": "2014-06-28T19:21:11Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/98#discussion_r14325685",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/98",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/14325685"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/98#discussion_r14325685"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/98"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/14326338",
        "pull_request_review_id": null,
        "id": 14326338,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MzI2MzM4",
        "diff_hunk": "@@ -15,12 +15,15 @@ class Hash\n     include Immutable\n \n     class << self\n+      alias :alloc :new",
        "path": "lib/hamster/hash.rb",
        "position": 4,
        "original_position": 4,
        "commit_id": "6ace98eb71bc0f194914847fe8292bade93d52cc",
        "original_commit_id": "62f7bef9777ee41d0d79755e48c3a028a48a6210",
        "user": {
            "login": "krainboltgreene",
            "id": 334809,
            "node_id": "MDQ6VXNlcjMzNDgwOQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/334809?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krainboltgreene",
            "html_url": "https://github.com/krainboltgreene",
            "followers_url": "https://api.github.com/users/krainboltgreene/followers",
            "following_url": "https://api.github.com/users/krainboltgreene/following{/other_user}",
            "gists_url": "https://api.github.com/users/krainboltgreene/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krainboltgreene/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krainboltgreene/subscriptions",
            "organizations_url": "https://api.github.com/users/krainboltgreene/orgs",
            "repos_url": "https://api.github.com/users/krainboltgreene/repos",
            "events_url": "https://api.github.com/users/krainboltgreene/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krainboltgreene/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Curious. We can go with your current implementation and just make an issue for the problem, yes?\n",
        "created_at": "2014-06-28T21:20:34Z",
        "updated_at": "2014-06-28T21:20:34Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/98#discussion_r14326338",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/98",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/14326338"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/98#discussion_r14326338"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/98"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/14327549",
        "pull_request_review_id": null,
        "id": 14327549,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MzI3NTQ5",
        "diff_hunk": "@@ -15,12 +15,15 @@ class Hash\n     include Immutable\n \n     class << self\n+      alias :alloc :new",
        "path": "lib/hamster/hash.rb",
        "position": 4,
        "original_position": 4,
        "commit_id": "6ace98eb71bc0f194914847fe8292bade93d52cc",
        "original_commit_id": "62f7bef9777ee41d0d79755e48c3a028a48a6210",
        "user": {
            "login": "alexdowad",
            "id": 1067359,
            "node_id": "MDQ6VXNlcjEwNjczNTk=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1067359?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alexdowad",
            "html_url": "https://github.com/alexdowad",
            "followers_url": "https://api.github.com/users/alexdowad/followers",
            "following_url": "https://api.github.com/users/alexdowad/following{/other_user}",
            "gists_url": "https://api.github.com/users/alexdowad/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/alexdowad/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alexdowad/subscriptions",
            "organizations_url": "https://api.github.com/users/alexdowad/orgs",
            "repos_url": "https://api.github.com/users/alexdowad/repos",
            "events_url": "https://api.github.com/users/alexdowad/events{/privacy}",
            "received_events_url": "https://api.github.com/users/alexdowad/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It's not a problem, it's how `def_delegator` is supposed to work.\n`def_delegator :self, :a, :b` makes a method `b` which _calls_ `a`. So if\n`a` is redefined, `b` will automatically reflect the change. But here I\nwant something which will _not_ change when `new` is redefined.\n\nAfter `new` is redefined (because it is part of the public API), I still\nneed a way to instantiate a new object. The code previously used `super`,\nbut that only works from inside `new` itself, and I need to call it from\nelsewhere.\n\nOn Sat, Jun 28, 2014 at 11:20 PM, Kurtis Rainbolt-Greene <\nnotifications@github.com> wrote:\n\n> In lib/hamster/hash.rb:\n> \n> > @@ -15,12 +15,15 @@ class Hash\n> >      include Immutable\n> > \n> > ```\n> >  class << self\n> > ```\n> > -      alias :alloc :new\n> \n> Curious. We can go with your current implementation and just make an issue\n> for the problem, yes?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/hamstergem/hamster/pull/98/files#r14326338.\n",
        "created_at": "2014-06-29T04:53:30Z",
        "updated_at": "2014-06-29T04:53:30Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/98#discussion_r14327549",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/98",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/14327549"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/98#discussion_r14327549"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/98"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/14337014",
        "pull_request_review_id": null,
        "id": 14337014,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MzM3MDE0",
        "diff_hunk": "@@ -15,12 +15,15 @@ class Hash\n     include Immutable\n \n     class << self\n+      alias :alloc :new",
        "path": "lib/hamster/hash.rb",
        "position": 4,
        "original_position": 4,
        "commit_id": "6ace98eb71bc0f194914847fe8292bade93d52cc",
        "original_commit_id": "62f7bef9777ee41d0d79755e48c3a028a48a6210",
        "user": {
            "login": "alexdowad",
            "id": 1067359,
            "node_id": "MDQ6VXNlcjEwNjczNTk=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1067359?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alexdowad",
            "html_url": "https://github.com/alexdowad",
            "followers_url": "https://api.github.com/users/alexdowad/followers",
            "following_url": "https://api.github.com/users/alexdowad/following{/other_user}",
            "gists_url": "https://api.github.com/users/alexdowad/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/alexdowad/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alexdowad/subscriptions",
            "organizations_url": "https://api.github.com/users/alexdowad/orgs",
            "repos_url": "https://api.github.com/users/alexdowad/repos",
            "events_url": "https://api.github.com/users/alexdowad/events{/privacy}",
            "received_events_url": "https://api.github.com/users/alexdowad/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@krainboltgreene, do you think I should go ahead and merge this? Can you think of a better way to fix this problem?\n",
        "created_at": "2014-06-30T06:13:50Z",
        "updated_at": "2014-06-30T06:13:50Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/98#discussion_r14337014",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/98",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/14337014"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/98#discussion_r14337014"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/98"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/14337386",
        "pull_request_review_id": null,
        "id": 14337386,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MzM3Mzg2",
        "diff_hunk": "@@ -15,12 +15,15 @@ class Hash\n     include Immutable\n \n     class << self\n+      alias :alloc :new",
        "path": "lib/hamster/hash.rb",
        "position": 4,
        "original_position": 4,
        "commit_id": "6ace98eb71bc0f194914847fe8292bade93d52cc",
        "original_commit_id": "62f7bef9777ee41d0d79755e48c3a028a48a6210",
        "user": {
            "login": "krainboltgreene",
            "id": 334809,
            "node_id": "MDQ6VXNlcjMzNDgwOQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/334809?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krainboltgreene",
            "html_url": "https://github.com/krainboltgreene",
            "followers_url": "https://api.github.com/users/krainboltgreene/followers",
            "following_url": "https://api.github.com/users/krainboltgreene/following{/other_user}",
            "gists_url": "https://api.github.com/users/krainboltgreene/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krainboltgreene/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krainboltgreene/subscriptions",
            "organizations_url": "https://api.github.com/users/krainboltgreene/orgs",
            "repos_url": "https://api.github.com/users/krainboltgreene/repos",
            "events_url": "https://api.github.com/users/krainboltgreene/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krainboltgreene/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'm cool with this, on further consideration. Merge away!\n\nOn Mon, Jun 30, 2014 at 1:13 AM, Alex Dowad notifications@github.com\nwrote:\n\n> In lib/hamster/hash.rb:\n> \n> > @@ -15,12 +15,15 @@ class Hash\n> >      include Immutable\n> > \n> > ```\n> >  class << self\n> > ```\n> > -      alias :alloc :new\n> \n> @krainboltgreene https://github.com/krainboltgreene, do you think I\n> should go ahead and merge this? Can you think of a better way to fix this\n> problem?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/hamstergem/hamster/pull/98/files#r14337014.\n\n## \n\nKurtis Rainbolt-Greene, Hacker\nSoftware Developer\n1631 8th St.\nNew Orleans, LA\n70115\n",
        "created_at": "2014-06-30T06:35:46Z",
        "updated_at": "2014-06-30T06:35:46Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/98#discussion_r14337386",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/98",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/14337386"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/98#discussion_r14337386"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/98"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/14941395",
        "pull_request_review_id": null,
        "id": 14941395,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0OTQxMzk1",
        "diff_hunk": "@@ -0,0 +1,30 @@\n+require \"spec_helper\"\n+require \"hamster/tuple\"\n+\n+describe Hamster do\n+  describe \".tuple\" do\n+    describe \"with no arguments\" do\n+      let(:tuple) { Hamster.tuple }\n+\n+      it \"always returns the same instance\" do\n+        expect(tuple).to eq(Hamster.tuple)\n+      end\n+\n+      it \"returns an empty queue\" do\n+        expect(tuple).to be_empty\n+      end\n+    end\n+\n+    describe \"with a number of items\" do",
        "path": "spec/hamster/tuple/construction_spec.rb",
        "position": null,
        "original_position": 18,
        "commit_id": "d685426cc7074fb373388474b6cb94fe498e5ec2",
        "original_commit_id": "2a3fbfa1f2d886018926fba1b66bca0f5a9d1893",
        "user": {
            "login": "krainboltgreene",
            "id": 334809,
            "node_id": "MDQ6VXNlcjMzNDgwOQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/334809?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krainboltgreene",
            "html_url": "https://github.com/krainboltgreene",
            "followers_url": "https://api.github.com/users/krainboltgreene/followers",
            "following_url": "https://api.github.com/users/krainboltgreene/following{/other_user}",
            "gists_url": "https://api.github.com/users/krainboltgreene/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krainboltgreene/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krainboltgreene/subscriptions",
            "organizations_url": "https://api.github.com/users/krainboltgreene/orgs",
            "repos_url": "https://api.github.com/users/krainboltgreene/repos",
            "events_url": "https://api.github.com/users/krainboltgreene/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krainboltgreene/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This should be a `context` block.\n",
        "created_at": "2014-07-15T15:15:36Z",
        "updated_at": "2014-07-16T01:54:22Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/107#discussion_r14941395",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/107",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/14941395"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/107#discussion_r14941395"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/107"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/14941405",
        "pull_request_review_id": null,
        "id": 14941405,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0OTQxNDA1",
        "diff_hunk": "@@ -0,0 +1,30 @@\n+require \"spec_helper\"\n+require \"hamster/tuple\"\n+\n+describe Hamster do\n+  describe \".tuple\" do\n+    describe \"with no arguments\" do",
        "path": "spec/hamster/tuple/construction_spec.rb",
        "position": null,
        "original_position": 6,
        "commit_id": "d685426cc7074fb373388474b6cb94fe498e5ec2",
        "original_commit_id": "2a3fbfa1f2d886018926fba1b66bca0f5a9d1893",
        "user": {
            "login": "krainboltgreene",
            "id": 334809,
            "node_id": "MDQ6VXNlcjMzNDgwOQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/334809?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krainboltgreene",
            "html_url": "https://github.com/krainboltgreene",
            "followers_url": "https://api.github.com/users/krainboltgreene/followers",
            "following_url": "https://api.github.com/users/krainboltgreene/following{/other_user}",
            "gists_url": "https://api.github.com/users/krainboltgreene/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krainboltgreene/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krainboltgreene/subscriptions",
            "organizations_url": "https://api.github.com/users/krainboltgreene/orgs",
            "repos_url": "https://api.github.com/users/krainboltgreene/repos",
            "events_url": "https://api.github.com/users/krainboltgreene/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krainboltgreene/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This should be a `context` block.\n",
        "created_at": "2014-07-15T15:15:42Z",
        "updated_at": "2014-07-16T01:54:22Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/107#discussion_r14941405",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/107",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/14941405"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/107#discussion_r14941405"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/107"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/15024274",
        "pull_request_review_id": null,
        "id": 15024274,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MDI0Mjc0",
        "diff_hunk": "@@ -527,20 +527,21 @@ def cached_size?\n     private\n \n     def method_missing(name, *args, &block)\n-      return accessor(Regexp.last_match[1]) if name.to_s.match(CADR)\n-      super\n-    end\n-\n-    # Perform compositions of <tt>car</tt> and <tt>cdr</tt> operations. Their names consist of a 'c', followed by at\n-    # least one 'a' or 'd', and finally an 'r'. The series of 'a's and 'd's in each function's name is chosen to\n-    # identify the series of car and cdr operations that is performed by the function. The order in which the 'a's and\n-    # 'd's appear is the inverse of the order in which the corresponding operations are performed.\n-    def accessor(sequence)\n-      sequence.reverse.each_char.reduce(self) do |memo, char|\n-        case char\n-        when \"a\" then memo.head\n-        when \"d\" then memo.tail\n-        end\n+      if name.to_s.match(CADR)\n+        # Perform compositions of car and cdr operations. Their names consist of a 'c',\n+        # followed by at least one 'a' or 'd', and finally an 'r'. The series of 'a's and\n+        # 'd's in the method name identify the series of car and cdr operations performed.\n+        # The order in which the 'a's and 'd's appear is the inverse of the order in which\n+        # the corresponding operations are performed.\n+        code = \"def #{name}; self.\"\n+        code << Regexp.last_match[1].reverse.chars.map do |char|\n+          {'a' => 'head', 'd' => 'tail'}[char]\n+        end.join('.')\n+        code << '; end'\n+        List.class_eval(code)",
        "path": "lib/hamster/list.rb",
        "position": 29,
        "original_position": 29,
        "commit_id": "b6b0ae9e59f087cb5ad29860797537b32590e40a",
        "original_commit_id": "2d4ca1d74bcee21b287d99d756477b02c641498e",
        "user": {
            "login": "krainboltgreene",
            "id": 334809,
            "node_id": "MDQ6VXNlcjMzNDgwOQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/334809?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krainboltgreene",
            "html_url": "https://github.com/krainboltgreene",
            "followers_url": "https://api.github.com/users/krainboltgreene/followers",
            "following_url": "https://api.github.com/users/krainboltgreene/following{/other_user}",
            "gists_url": "https://api.github.com/users/krainboltgreene/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krainboltgreene/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krainboltgreene/subscriptions",
            "organizations_url": "https://api.github.com/users/krainboltgreene/orgs",
            "repos_url": "https://api.github.com/users/krainboltgreene/repos",
            "events_url": "https://api.github.com/users/krainboltgreene/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krainboltgreene/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Why code evaluation instead of using `define_method?`\n",
        "created_at": "2014-07-16T20:13:49Z",
        "updated_at": "2014-07-17T20:44:27Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/111#discussion_r15024274",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/111",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/15024274"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/111#discussion_r15024274"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/111"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/15024674",
        "pull_request_review_id": null,
        "id": 15024674,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MDI0Njc0",
        "diff_hunk": "@@ -527,20 +527,21 @@ def cached_size?\n     private\n \n     def method_missing(name, *args, &block)\n-      return accessor(Regexp.last_match[1]) if name.to_s.match(CADR)\n-      super\n-    end\n-\n-    # Perform compositions of <tt>car</tt> and <tt>cdr</tt> operations. Their names consist of a 'c', followed by at\n-    # least one 'a' or 'd', and finally an 'r'. The series of 'a's and 'd's in each function's name is chosen to\n-    # identify the series of car and cdr operations that is performed by the function. The order in which the 'a's and\n-    # 'd's appear is the inverse of the order in which the corresponding operations are performed.\n-    def accessor(sequence)\n-      sequence.reverse.each_char.reduce(self) do |memo, char|\n-        case char\n-        when \"a\" then memo.head\n-        when \"d\" then memo.tail\n-        end\n+      if name.to_s.match(CADR)\n+        # Perform compositions of car and cdr operations. Their names consist of a 'c',\n+        # followed by at least one 'a' or 'd', and finally an 'r'. The series of 'a's and\n+        # 'd's in the method name identify the series of car and cdr operations performed.\n+        # The order in which the 'a's and 'd's appear is the inverse of the order in which\n+        # the corresponding operations are performed.\n+        code = \"def #{name}; self.\"\n+        code << Regexp.last_match[1].reverse.chars.map do |char|\n+          {'a' => 'head', 'd' => 'tail'}[char]\n+        end.join('.')\n+        code << '; end'\n+        List.class_eval(code)",
        "path": "lib/hamster/list.rb",
        "position": 29,
        "original_position": 29,
        "commit_id": "b6b0ae9e59f087cb5ad29860797537b32590e40a",
        "original_commit_id": "2d4ca1d74bcee21b287d99d756477b02c641498e",
        "user": {
            "login": "alexdowad",
            "id": 1067359,
            "node_id": "MDQ6VXNlcjEwNjczNTk=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1067359?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alexdowad",
            "html_url": "https://github.com/alexdowad",
            "followers_url": "https://api.github.com/users/alexdowad/followers",
            "following_url": "https://api.github.com/users/alexdowad/following{/other_user}",
            "gists_url": "https://api.github.com/users/alexdowad/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/alexdowad/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alexdowad/subscriptions",
            "organizations_url": "https://api.github.com/users/alexdowad/orgs",
            "repos_url": "https://api.github.com/users/alexdowad/repos",
            "events_url": "https://api.github.com/users/alexdowad/events{/privacy}",
            "received_events_url": "https://api.github.com/users/alexdowad/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The resulting method will be faster.\n\nOn Wed, Jul 16, 2014 at 10:13 PM, Kurtis Rainbolt-Greene <\nnotifications@github.com> wrote:\n\n> In lib/hamster/list.rb:\n> \n> > -        case char\n> > -        when \"a\" then memo.head\n> > -        when \"d\" then memo.tail\n> > -        end\n> > -      if name.to_s.match(CADR)\n> > -        # Perform compositions of car and cdr operations. Their names consist of a 'c',\n> > -        # followed by at least one 'a' or 'd', and finally an 'r'. The series of 'a's and\n> > -        # 'd's in the method name identify the series of car and cdr operations performed.\n> > -        # The order in which the 'a's and 'd's appear is the inverse of the order in which\n> > -        # the corresponding operations are performed.\n> > -        code = \"def #{name}; self.\"\n> > -        code << Regexp.last_match[1].reverse.chars.map do |char|\n> > -          {'a' => 'head', 'd' => 'tail'}[char]\n> > -        end.join('.')\n> > -        code << '; end'\n> > -        List.class_eval(code)\n> \n> Why code evaluation instead of using define_method?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/hamstergem/hamster/pull/111/files#r15024274.\n",
        "created_at": "2014-07-16T20:21:00Z",
        "updated_at": "2014-07-17T20:44:27Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/111#discussion_r15024674",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/111",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/15024674"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/111#discussion_r15024674"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/111"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/15025759",
        "pull_request_review_id": null,
        "id": 15025759,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MDI1NzU5",
        "diff_hunk": "@@ -527,20 +527,21 @@ def cached_size?\n     private\n \n     def method_missing(name, *args, &block)\n-      return accessor(Regexp.last_match[1]) if name.to_s.match(CADR)\n-      super\n-    end\n-\n-    # Perform compositions of <tt>car</tt> and <tt>cdr</tt> operations. Their names consist of a 'c', followed by at\n-    # least one 'a' or 'd', and finally an 'r'. The series of 'a's and 'd's in each function's name is chosen to\n-    # identify the series of car and cdr operations that is performed by the function. The order in which the 'a's and\n-    # 'd's appear is the inverse of the order in which the corresponding operations are performed.\n-    def accessor(sequence)\n-      sequence.reverse.each_char.reduce(self) do |memo, char|\n-        case char\n-        when \"a\" then memo.head\n-        when \"d\" then memo.tail\n-        end\n+      if name.to_s.match(CADR)\n+        # Perform compositions of car and cdr operations. Their names consist of a 'c',\n+        # followed by at least one 'a' or 'd', and finally an 'r'. The series of 'a's and\n+        # 'd's in the method name identify the series of car and cdr operations performed.\n+        # The order in which the 'a's and 'd's appear is the inverse of the order in which\n+        # the corresponding operations are performed.\n+        code = \"def #{name}; self.\"\n+        code << Regexp.last_match[1].reverse.chars.map do |char|\n+          {'a' => 'head', 'd' => 'tail'}[char]\n+        end.join('.')\n+        code << '; end'\n+        List.class_eval(code)",
        "path": "lib/hamster/list.rb",
        "position": 29,
        "original_position": 29,
        "commit_id": "b6b0ae9e59f087cb5ad29860797537b32590e40a",
        "original_commit_id": "2d4ca1d74bcee21b287d99d756477b02c641498e",
        "user": {
            "login": "alexdowad",
            "id": 1067359,
            "node_id": "MDQ6VXNlcjEwNjczNTk=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1067359?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alexdowad",
            "html_url": "https://github.com/alexdowad",
            "followers_url": "https://api.github.com/users/alexdowad/followers",
            "following_url": "https://api.github.com/users/alexdowad/following{/other_user}",
            "gists_url": "https://api.github.com/users/alexdowad/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/alexdowad/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alexdowad/subscriptions",
            "organizations_url": "https://api.github.com/users/alexdowad/orgs",
            "repos_url": "https://api.github.com/users/alexdowad/repos",
            "events_url": "https://api.github.com/users/alexdowad/events{/privacy}",
            "received_events_url": "https://api.github.com/users/alexdowad/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "To clarify, when you define a method with `define_method`, every call to that method has to go through some extra code which invokes the saved block. When you define a method by `eval`ing a string, the resulting method is _exactly_ the same as if you had written it out \"longhand\" in the source code.\n\nThe overhead of a method call is small enough that you have to run many iterations for the effect to show itself clearly in a benchmark. But having done so, it appears like the overhead of a call is about 25% less using `eval`ed code.\n\nThe other thing is without using `eval`, I don't see any way to get away from the overhead of iterating over the matched characters on every call.\n",
        "created_at": "2014-07-16T20:39:30Z",
        "updated_at": "2014-07-17T20:44:27Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/111#discussion_r15025759",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/111",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/15025759"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/111#discussion_r15025759"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/111"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/19214159",
        "pull_request_review_id": null,
        "id": 19214159,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjE0MTU5",
        "diff_hunk": "@@ -2,6 +2,4 @@ language: ruby\n rvm:\n   - 1.9.3\n   - 2.0.0\n-  - 2.1.0\n-  - 2.1.1\n   - ruby-head",
        "path": ".travis.yml",
        "position": null,
        "original_position": 6,
        "commit_id": "174141c22c52478e69d38e9dee4039b44915c0cb",
        "original_commit_id": "460252d9d739d6bdf993ae683a41c688ca9b3287",
        "user": {
            "login": "dubek",
            "id": 9211,
            "node_id": "MDQ6VXNlcjkyMTE=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/9211?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dubek",
            "html_url": "https://github.com/dubek",
            "followers_url": "https://api.github.com/users/dubek/followers",
            "following_url": "https://api.github.com/users/dubek/following{/other_user}",
            "gists_url": "https://api.github.com/users/dubek/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dubek/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dubek/subscriptions",
            "organizations_url": "https://api.github.com/users/dubek/orgs",
            "repos_url": "https://api.github.com/users/dubek/repos",
            "events_url": "https://api.github.com/users/dubek/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dubek/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": ":+1: for removal of 2.1.0 and 2.1.1 .\n\nI think that `ruby-head` is the next developed MRI ruby which is probably the work towards 2.2.0 . Besides `ruby-head` we should also state `2.1` here to have the latest ruby in the 2.1 series (which is 2.1.3 at this moment).\n",
        "created_at": "2014-10-22T13:49:46Z",
        "updated_at": "2014-10-22T15:52:43Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/142#discussion_r19214159",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/142",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/19214159"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/142#discussion_r19214159"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/142"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/19214683",
        "pull_request_review_id": null,
        "id": 19214683,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjE0Njgz",
        "diff_hunk": "@@ -2,6 +2,4 @@ language: ruby\n rvm:\n   - 1.9.3\n   - 2.0.0\n-  - 2.1.0\n-  - 2.1.1\n   - ruby-head",
        "path": ".travis.yml",
        "position": null,
        "original_position": 6,
        "commit_id": "174141c22c52478e69d38e9dee4039b44915c0cb",
        "original_commit_id": "460252d9d739d6bdf993ae683a41c688ca9b3287",
        "user": {
            "login": "krainboltgreene",
            "id": 334809,
            "node_id": "MDQ6VXNlcjMzNDgwOQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/334809?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krainboltgreene",
            "html_url": "https://github.com/krainboltgreene",
            "followers_url": "https://api.github.com/users/krainboltgreene/followers",
            "following_url": "https://api.github.com/users/krainboltgreene/following{/other_user}",
            "gists_url": "https://api.github.com/users/krainboltgreene/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krainboltgreene/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krainboltgreene/subscriptions",
            "organizations_url": "https://api.github.com/users/krainboltgreene/orgs",
            "repos_url": "https://api.github.com/users/krainboltgreene/repos",
            "events_url": "https://api.github.com/users/krainboltgreene/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krainboltgreene/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Agreed.\nOn Oct 22, 2014 8:49 AM, \"Dov Murik\" notifications@github.com wrote:\n\n> In .travis.yml:\n> \n> > @@ -2,6 +2,4 @@ language: ruby\n> >  rvm:\n> > - 1.9.3\n> > - 2.0.0\n> >   -  - 2.1.0\n> >   -  - 2.1.1\n> > - ruby-head\n> \n> [image: :+1:] for removal of 2.1.0 and 2.1.1 .\n> \n> I think that ruby-head is the next developed MRI ruby which is probably\n> the work towards 2.2.0 . Besides ruby-head we should also state 2.1 here\n> to have the latest ruby in the 2.1 series (which is 2.1.3 at this moment).\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/hamstergem/hamster/pull/142/files#r19214159.\n",
        "created_at": "2014-10-22T13:57:46Z",
        "updated_at": "2014-10-22T15:52:43Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/142#discussion_r19214683",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/142",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/19214683"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/142#discussion_r19214683"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/142"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/19688670",
        "pull_request_review_id": null,
        "id": 19688670,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njg4Njcw",
        "diff_hunk": "@@ -0,0 +1,37 @@\n+require \"set\"\n+require \"hamster/hash\"\n+require \"hamster/set\"\n+require \"hamster/vector\"\n+\n+module Hamster\n+  class << self\n+\n+    # Create a Hamster immutable data structure with nested Hamster data\n+    # structure from a nested Ruby object `obj`.  This method recursively\n+    # \"walks\" the Ruby object, converting Ruby `Hash` to `Hamster::Hash`, Ruby\n+    # `Array` to `Hamster::Vector` and Ruby `Set` to `Hamster::Set`.  Other\n+    # Ruby objects are left as-is.\n+    #\n+    # @example\n+    #   h = Hamster.from({ \"a\" => [1, 2], \"b\" => \"c\" })\n+    #   # => Hamster::Hash[\"a\" => Hamster::Vector[1, 2], \"b\" => \"c\"]\n+    #\n+    # @return [Hamster::Hash, Hamster::Vector, Hamster::Set, Object]\n+    def from(obj)\n+      case obj\n+      when ::Hash\n+        obj.inject(Hamster::Hash.new) do |hash, (key, value)|\n+          hash.put(from(key), from(value))",
        "path": "lib/hamster/nested.rb",
        "position": null,
        "original_position": 24,
        "commit_id": "30444ef1fe932b62e10fbe43e41fa2e99eba3137",
        "original_commit_id": "471abcae596d7cd63c5e24a87ed8ebfbb64c126c",
        "user": {
            "login": "alexdowad",
            "id": 1067359,
            "node_id": "MDQ6VXNlcjEwNjczNTk=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1067359?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alexdowad",
            "html_url": "https://github.com/alexdowad",
            "followers_url": "https://api.github.com/users/alexdowad/followers",
            "following_url": "https://api.github.com/users/alexdowad/following{/other_user}",
            "gists_url": "https://api.github.com/users/alexdowad/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/alexdowad/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alexdowad/subscriptions",
            "organizations_url": "https://api.github.com/users/alexdowad/orgs",
            "repos_url": "https://api.github.com/users/alexdowad/repos",
            "events_url": "https://api.github.com/users/alexdowad/events{/privacy}",
            "received_events_url": "https://api.github.com/users/alexdowad/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Since you are using a new `Hamster::Hash` here, you could use `#put!` for performance.\n",
        "created_at": "2014-10-31T19:34:39Z",
        "updated_at": "2014-10-31T20:25:28Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/150#discussion_r19688670",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/150",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/19688670"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/150#discussion_r19688670"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/150"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/19689541",
        "pull_request_review_id": null,
        "id": 19689541,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njg5NTQx",
        "diff_hunk": "@@ -0,0 +1,37 @@\n+require \"set\"\n+require \"hamster/hash\"\n+require \"hamster/set\"\n+require \"hamster/vector\"\n+\n+module Hamster\n+  class << self\n+\n+    # Create a Hamster immutable data structure with nested Hamster data\n+    # structure from a nested Ruby object `obj`.  This method recursively\n+    # \"walks\" the Ruby object, converting Ruby `Hash` to `Hamster::Hash`, Ruby\n+    # `Array` to `Hamster::Vector` and Ruby `Set` to `Hamster::Set`.  Other\n+    # Ruby objects are left as-is.\n+    #\n+    # @example\n+    #   h = Hamster.from({ \"a\" => [1, 2], \"b\" => \"c\" })\n+    #   # => Hamster::Hash[\"a\" => Hamster::Vector[1, 2], \"b\" => \"c\"]\n+    #\n+    # @return [Hamster::Hash, Hamster::Vector, Hamster::Set, Object]\n+    def from(obj)\n+      case obj\n+      when ::Hash\n+        obj.inject(Hamster::Hash.new) do |hash, (key, value)|\n+          hash.put(from(key), from(value))",
        "path": "lib/hamster/nested.rb",
        "position": null,
        "original_position": 24,
        "commit_id": "30444ef1fe932b62e10fbe43e41fa2e99eba3137",
        "original_commit_id": "471abcae596d7cd63c5e24a87ed8ebfbb64c126c",
        "user": {
            "login": "dubek",
            "id": 9211,
            "node_id": "MDQ6VXNlcjkyMTE=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/9211?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dubek",
            "html_url": "https://github.com/dubek",
            "followers_url": "https://api.github.com/users/dubek/followers",
            "following_url": "https://api.github.com/users/dubek/following{/other_user}",
            "gists_url": "https://api.github.com/users/dubek/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dubek/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dubek/subscriptions",
            "organizations_url": "https://api.github.com/users/dubek/orgs",
            "repos_url": "https://api.github.com/users/dubek/repos",
            "events_url": "https://api.github.com/users/dubek/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dubek/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Well there's no `Hash#put!`. There's `Trie#put!`. What I can do is built an array of key-value pairs, and then use that with `#bulk_put` (hmm maybe we need Hamster::Hash.new to use bulk_put too?)\n",
        "created_at": "2014-10-31T19:51:24Z",
        "updated_at": "2014-10-31T20:25:28Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/150#discussion_r19689541",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/150",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/19689541"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/150#discussion_r19689541"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/150"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/19689745",
        "pull_request_review_id": null,
        "id": 19689745,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njg5NzQ1",
        "diff_hunk": "@@ -0,0 +1,37 @@\n+require \"set\"\n+require \"hamster/hash\"\n+require \"hamster/set\"\n+require \"hamster/vector\"\n+\n+module Hamster\n+  class << self\n+\n+    # Create a Hamster immutable data structure with nested Hamster data\n+    # structure from a nested Ruby object `obj`.  This method recursively\n+    # \"walks\" the Ruby object, converting Ruby `Hash` to `Hamster::Hash`, Ruby\n+    # `Array` to `Hamster::Vector` and Ruby `Set` to `Hamster::Set`.  Other\n+    # Ruby objects are left as-is.\n+    #\n+    # @example\n+    #   h = Hamster.from({ \"a\" => [1, 2], \"b\" => \"c\" })\n+    #   # => Hamster::Hash[\"a\" => Hamster::Vector[1, 2], \"b\" => \"c\"]\n+    #\n+    # @return [Hamster::Hash, Hamster::Vector, Hamster::Set, Object]\n+    def from(obj)\n+      case obj\n+      when ::Hash\n+        obj.inject(Hamster::Hash.new) do |hash, (key, value)|\n+          hash.put(from(key), from(value))",
        "path": "lib/hamster/nested.rb",
        "position": null,
        "original_position": 24,
        "commit_id": "30444ef1fe932b62e10fbe43e41fa2e99eba3137",
        "original_commit_id": "471abcae596d7cd63c5e24a87ed8ebfbb64c126c",
        "user": {
            "login": "dubek",
            "id": 9211,
            "node_id": "MDQ6VXNlcjkyMTE=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/9211?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dubek",
            "html_url": "https://github.com/dubek",
            "followers_url": "https://api.github.com/users/dubek/followers",
            "following_url": "https://api.github.com/users/dubek/following{/other_user}",
            "gists_url": "https://api.github.com/users/dubek/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dubek/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dubek/subscriptions",
            "organizations_url": "https://api.github.com/users/dubek/orgs",
            "repos_url": "https://api.github.com/users/dubek/repos",
            "events_url": "https://api.github.com/users/dubek/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dubek/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Basically something similar to the `Vector` and `Set` handling below, something like:\n\n```\nkey_value_pairs = obj.map { |k,v| [from(k), from(v)] }\nHamster::Hash.new(key_value_pairs)\n```\n\nProbably even clearer code. WDYT?\n",
        "created_at": "2014-10-31T19:55:04Z",
        "updated_at": "2014-10-31T20:25:28Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/150#discussion_r19689745",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/150",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/19689745"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/150#discussion_r19689745"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/150"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/19690785",
        "pull_request_review_id": null,
        "id": 19690785,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NjkwNzg1",
        "diff_hunk": "@@ -0,0 +1,37 @@\n+require \"set\"\n+require \"hamster/hash\"\n+require \"hamster/set\"\n+require \"hamster/vector\"\n+\n+module Hamster\n+  class << self\n+\n+    # Create a Hamster immutable data structure with nested Hamster data\n+    # structure from a nested Ruby object `obj`.  This method recursively\n+    # \"walks\" the Ruby object, converting Ruby `Hash` to `Hamster::Hash`, Ruby\n+    # `Array` to `Hamster::Vector` and Ruby `Set` to `Hamster::Set`.  Other\n+    # Ruby objects are left as-is.\n+    #\n+    # @example\n+    #   h = Hamster.from({ \"a\" => [1, 2], \"b\" => \"c\" })\n+    #   # => Hamster::Hash[\"a\" => Hamster::Vector[1, 2], \"b\" => \"c\"]\n+    #\n+    # @return [Hamster::Hash, Hamster::Vector, Hamster::Set, Object]\n+    def from(obj)\n+      case obj\n+      when ::Hash\n+        obj.inject(Hamster::Hash.new) do |hash, (key, value)|\n+          hash.put(from(key), from(value))",
        "path": "lib/hamster/nested.rb",
        "position": null,
        "original_position": 24,
        "commit_id": "30444ef1fe932b62e10fbe43e41fa2e99eba3137",
        "original_commit_id": "471abcae596d7cd63c5e24a87ed8ebfbb64c126c",
        "user": {
            "login": "alexdowad",
            "id": 1067359,
            "node_id": "MDQ6VXNlcjEwNjczNTk=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1067359?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alexdowad",
            "html_url": "https://github.com/alexdowad",
            "followers_url": "https://api.github.com/users/alexdowad/followers",
            "following_url": "https://api.github.com/users/alexdowad/following{/other_user}",
            "gists_url": "https://api.github.com/users/alexdowad/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/alexdowad/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alexdowad/subscriptions",
            "organizations_url": "https://api.github.com/users/alexdowad/orgs",
            "repos_url": "https://api.github.com/users/alexdowad/repos",
            "events_url": "https://api.github.com/users/alexdowad/events{/privacy}",
            "received_events_url": "https://api.github.com/users/alexdowad/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "That looks good. Another alternative would be to do something like `Hamster::Hash.alloc(Trie[obj])`.\n\nAs for using `#bulk_put` to initialize a `Hash`, right now `Hash.new` uses `Trie[]`. `Trie[]` does repeated `#put!` to initialize a new `Trie`. If `#bulk_put` is faster than a repeated `#put!`, we can use it in `Trie[]` instead, but I suspect it will be slower.\n",
        "created_at": "2014-10-31T20:13:22Z",
        "updated_at": "2014-10-31T20:25:28Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/150#discussion_r19690785",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/150",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/19690785"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/150#discussion_r19690785"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/150"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/19690821",
        "pull_request_review_id": null,
        "id": 19690821,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NjkwODIx",
        "diff_hunk": "@@ -0,0 +1,37 @@\n+require \"set\"\n+require \"hamster/hash\"\n+require \"hamster/set\"\n+require \"hamster/vector\"\n+\n+module Hamster\n+  class << self\n+\n+    # Create a Hamster immutable data structure with nested Hamster data\n+    # structure from a nested Ruby object `obj`.  This method recursively\n+    # \"walks\" the Ruby object, converting Ruby `Hash` to `Hamster::Hash`, Ruby\n+    # `Array` to `Hamster::Vector` and Ruby `Set` to `Hamster::Set`.  Other\n+    # Ruby objects are left as-is.\n+    #\n+    # @example\n+    #   h = Hamster.from({ \"a\" => [1, 2], \"b\" => \"c\" })\n+    #   # => Hamster::Hash[\"a\" => Hamster::Vector[1, 2], \"b\" => \"c\"]\n+    #\n+    # @return [Hamster::Hash, Hamster::Vector, Hamster::Set, Object]\n+    def from(obj)\n+      case obj\n+      when ::Hash\n+        obj.inject(Hamster::Hash.new) do |hash, (key, value)|\n+          hash.put(from(key), from(value))",
        "path": "lib/hamster/nested.rb",
        "position": null,
        "original_position": 24,
        "commit_id": "30444ef1fe932b62e10fbe43e41fa2e99eba3137",
        "original_commit_id": "471abcae596d7cd63c5e24a87ed8ebfbb64c126c",
        "user": {
            "login": "alexdowad",
            "id": 1067359,
            "node_id": "MDQ6VXNlcjEwNjczNTk=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1067359?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alexdowad",
            "html_url": "https://github.com/alexdowad",
            "followers_url": "https://api.github.com/users/alexdowad/followers",
            "following_url": "https://api.github.com/users/alexdowad/following{/other_user}",
            "gists_url": "https://api.github.com/users/alexdowad/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/alexdowad/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alexdowad/subscriptions",
            "organizations_url": "https://api.github.com/users/alexdowad/orgs",
            "repos_url": "https://api.github.com/users/alexdowad/repos",
            "events_url": "https://api.github.com/users/alexdowad/events{/privacy}",
            "received_events_url": "https://api.github.com/users/alexdowad/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Looking at that again, actually, all that is needed is `Hamster::Hash.new(obj)`. That's a whole lot cleaner, and avoids the redundant `#map`.\n",
        "created_at": "2014-10-31T20:13:59Z",
        "updated_at": "2014-10-31T20:25:28Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/150#discussion_r19690821",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/150",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/19690821"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/150#discussion_r19690821"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/150"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/19691103",
        "pull_request_review_id": null,
        "id": 19691103,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NjkxMTAz",
        "diff_hunk": "@@ -0,0 +1,37 @@\n+require \"set\"\n+require \"hamster/hash\"\n+require \"hamster/set\"\n+require \"hamster/vector\"\n+\n+module Hamster\n+  class << self\n+\n+    # Create a Hamster immutable data structure with nested Hamster data\n+    # structure from a nested Ruby object `obj`.  This method recursively\n+    # \"walks\" the Ruby object, converting Ruby `Hash` to `Hamster::Hash`, Ruby\n+    # `Array` to `Hamster::Vector` and Ruby `Set` to `Hamster::Set`.  Other\n+    # Ruby objects are left as-is.\n+    #\n+    # @example\n+    #   h = Hamster.from({ \"a\" => [1, 2], \"b\" => \"c\" })\n+    #   # => Hamster::Hash[\"a\" => Hamster::Vector[1, 2], \"b\" => \"c\"]\n+    #\n+    # @return [Hamster::Hash, Hamster::Vector, Hamster::Set, Object]\n+    def from(obj)\n+      case obj\n+      when ::Hash\n+        obj.inject(Hamster::Hash.new) do |hash, (key, value)|\n+          hash.put(from(key), from(value))",
        "path": "lib/hamster/nested.rb",
        "position": null,
        "original_position": 24,
        "commit_id": "30444ef1fe932b62e10fbe43e41fa2e99eba3137",
        "original_commit_id": "471abcae596d7cd63c5e24a87ed8ebfbb64c126c",
        "user": {
            "login": "dubek",
            "id": 9211,
            "node_id": "MDQ6VXNlcjkyMTE=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/9211?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dubek",
            "html_url": "https://github.com/dubek",
            "followers_url": "https://api.github.com/users/dubek/followers",
            "following_url": "https://api.github.com/users/dubek/following{/other_user}",
            "gists_url": "https://api.github.com/users/dubek/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dubek/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dubek/subscriptions",
            "organizations_url": "https://api.github.com/users/dubek/orgs",
            "repos_url": "https://api.github.com/users/dubek/repos",
            "events_url": "https://api.github.com/users/dubek/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dubek/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "No, you need to run `from` recursively on all the keys and values; that's what the `#map` is for.\n",
        "created_at": "2014-10-31T20:18:30Z",
        "updated_at": "2014-10-31T20:25:28Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/150#discussion_r19691103",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/150",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/19691103"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/150#discussion_r19691103"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/150"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/19691513",
        "pull_request_review_id": null,
        "id": 19691513,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NjkxNTEz",
        "diff_hunk": "@@ -0,0 +1,37 @@\n+require \"set\"\n+require \"hamster/hash\"\n+require \"hamster/set\"\n+require \"hamster/vector\"\n+\n+module Hamster\n+  class << self\n+\n+    # Create a Hamster immutable data structure with nested Hamster data\n+    # structure from a nested Ruby object `obj`.  This method recursively\n+    # \"walks\" the Ruby object, converting Ruby `Hash` to `Hamster::Hash`, Ruby\n+    # `Array` to `Hamster::Vector` and Ruby `Set` to `Hamster::Set`.  Other\n+    # Ruby objects are left as-is.\n+    #\n+    # @example\n+    #   h = Hamster.from({ \"a\" => [1, 2], \"b\" => \"c\" })\n+    #   # => Hamster::Hash[\"a\" => Hamster::Vector[1, 2], \"b\" => \"c\"]\n+    #\n+    # @return [Hamster::Hash, Hamster::Vector, Hamster::Set, Object]\n+    def from(obj)\n+      case obj\n+      when ::Hash\n+        obj.inject(Hamster::Hash.new) do |hash, (key, value)|\n+          hash.put(from(key), from(value))",
        "path": "lib/hamster/nested.rb",
        "position": null,
        "original_position": 24,
        "commit_id": "30444ef1fe932b62e10fbe43e41fa2e99eba3137",
        "original_commit_id": "471abcae596d7cd63c5e24a87ed8ebfbb64c126c",
        "user": {
            "login": "alexdowad",
            "id": 1067359,
            "node_id": "MDQ6VXNlcjEwNjczNTk=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1067359?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alexdowad",
            "html_url": "https://github.com/alexdowad",
            "followers_url": "https://api.github.com/users/alexdowad/followers",
            "following_url": "https://api.github.com/users/alexdowad/following{/other_user}",
            "gists_url": "https://api.github.com/users/alexdowad/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/alexdowad/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alexdowad/subscriptions",
            "organizations_url": "https://api.github.com/users/alexdowad/orgs",
            "repos_url": "https://api.github.com/users/alexdowad/repos",
            "events_url": "https://api.github.com/users/alexdowad/events{/privacy}",
            "received_events_url": "https://api.github.com/users/alexdowad/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Doh! OK, then I would suggest going with the `#map`.\n",
        "created_at": "2014-10-31T20:23:27Z",
        "updated_at": "2014-10-31T20:25:28Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/150#discussion_r19691513",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/150",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/19691513"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/150#discussion_r19691513"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/150"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/28508016",
        "pull_request_review_id": null,
        "id": 28508016,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4NTA4MDE2",
        "diff_hunk": "@@ -197,7 +197,7 @@ list.tail                    # => Hamster.list(2, 3)\n To add to a list, you use `List#cons`:\n \n ``` ruby\n-original = Hamster.list(1, 2, 3)\n+original = Hamster::List(1, 2, 3)",
        "path": "README.md",
        "position": 65,
        "original_position": 65,
        "commit_id": "b4cfc2eb8c20ccd720000177b9322d97aab76bb5",
        "original_commit_id": "b4cfc2eb8c20ccd720000177b9322d97aab76bb5",
        "user": {
            "login": "dubek",
            "id": 9211,
            "node_id": "MDQ6VXNlcjkyMTE=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/9211?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dubek",
            "html_url": "https://github.com/dubek",
            "followers_url": "https://api.github.com/users/dubek/followers",
            "following_url": "https://api.github.com/users/dubek/following{/other_user}",
            "gists_url": "https://api.github.com/users/dubek/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dubek/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dubek/subscriptions",
            "organizations_url": "https://api.github.com/users/dubek/orgs",
            "repos_url": "https://api.github.com/users/dubek/repos",
            "events_url": "https://api.github.com/users/dubek/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dubek/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This should be brackets: `Hamster::List[1, 2, 3]`\n\nThis shows the awkward situation in which `Vector` `Hash` `Set` are classes (and therefore instances are constructed with `#new`), but `List` is a module... Maybe topic for another discussion.\n",
        "created_at": "2015-04-16T13:19:25Z",
        "updated_at": "2015-04-16T13:19:25Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/170#discussion_r28508016",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/170",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/28508016"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/170#discussion_r28508016"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/170"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/37867252",
        "pull_request_review_id": null,
        "id": 37867252,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY3MjUy",
        "diff_hunk": "@@ -32,10 +32,10 @@\n         context \"without a block\" do\n           it \"returns an Enumerator\" do\n             list.each.class.should be(Enumerator)\n-            list.each.to_list.should eql(list)\n+            Hamster::List[*list.each].should eql(list)",
        "path": "spec/lib/hamster/list/each_spec.rb",
        "position": 5,
        "original_position": 5,
        "commit_id": "64d10c4db7ea647f4441d14d6eb2ec17b13a92ea",
        "original_commit_id": "64d10c4db7ea647f4441d14d6eb2ec17b13a92ea",
        "user": {
            "login": "dubek",
            "id": 9211,
            "node_id": "MDQ6VXNlcjkyMTE=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/9211?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dubek",
            "html_url": "https://github.com/dubek",
            "followers_url": "https://api.github.com/users/dubek/followers",
            "following_url": "https://api.github.com/users/dubek/following{/other_user}",
            "gists_url": "https://api.github.com/users/dubek/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dubek/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dubek/subscriptions",
            "organizations_url": "https://api.github.com/users/dubek/orgs",
            "repos_url": "https://api.github.com/users/dubek/repos",
            "events_url": "https://api.github.com/users/dubek/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dubek/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Why was the spec modified here? I thought the change was completely backward-compatible.\n",
        "created_at": "2015-08-25T13:56:13Z",
        "updated_at": "2015-08-25T13:56:13Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/197#discussion_r37867252",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/197",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/37867252"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/197#discussion_r37867252"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/197"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/37874330",
        "pull_request_review_id": null,
        "id": 37874330,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc0MzMw",
        "diff_hunk": "@@ -32,10 +32,10 @@\n         context \"without a block\" do\n           it \"returns an Enumerator\" do\n             list.each.class.should be(Enumerator)\n-            list.each.to_list.should eql(list)\n+            Hamster::List[*list.each].should eql(list)",
        "path": "spec/lib/hamster/list/each_spec.rb",
        "position": 5,
        "original_position": 5,
        "commit_id": "64d10c4db7ea647f4441d14d6eb2ec17b13a92ea",
        "original_commit_id": "64d10c4db7ea647f4441d14d6eb2ec17b13a92ea",
        "user": {
            "login": "xaviershay",
            "id": 1714,
            "node_id": "MDQ6VXNlcjE3MTQ=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1714?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xaviershay",
            "html_url": "https://github.com/xaviershay",
            "followers_url": "https://api.github.com/users/xaviershay/followers",
            "following_url": "https://api.github.com/users/xaviershay/following{/other_user}",
            "gists_url": "https://api.github.com/users/xaviershay/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xaviershay/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xaviershay/subscriptions",
            "organizations_url": "https://api.github.com/users/xaviershay/orgs",
            "repos_url": "https://api.github.com/users/xaviershay/repos",
            "events_url": "https://api.github.com/users/xaviershay/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xaviershay/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "it is, but there's no reason for this spec to depend on `core_ext` (which it did implicitly before).\n",
        "created_at": "2015-08-25T14:51:00Z",
        "updated_at": "2015-08-25T14:51:00Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/197#discussion_r37874330",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/197",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/37874330"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/197#discussion_r37874330"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/197"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/37874614",
        "pull_request_review_id": null,
        "id": 37874614,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc0NjE0",
        "diff_hunk": "@@ -32,10 +32,10 @@\n         context \"without a block\" do\n           it \"returns an Enumerator\" do\n             list.each.class.should be(Enumerator)\n-            list.each.to_list.should eql(list)\n+            Hamster::List[*list.each].should eql(list)",
        "path": "spec/lib/hamster/list/each_spec.rb",
        "position": 5,
        "original_position": 5,
        "commit_id": "64d10c4db7ea647f4441d14d6eb2ec17b13a92ea",
        "original_commit_id": "64d10c4db7ea647f4441d14d6eb2ec17b13a92ea",
        "user": {
            "login": "dubek",
            "id": 9211,
            "node_id": "MDQ6VXNlcjkyMTE=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/9211?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dubek",
            "html_url": "https://github.com/dubek",
            "followers_url": "https://api.github.com/users/dubek/followers",
            "following_url": "https://api.github.com/users/dubek/following{/other_user}",
            "gists_url": "https://api.github.com/users/dubek/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dubek/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dubek/subscriptions",
            "organizations_url": "https://api.github.com/users/dubek/orgs",
            "repos_url": "https://api.github.com/users/dubek/repos",
            "events_url": "https://api.github.com/users/dubek/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dubek/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "OK, cool.\n",
        "created_at": "2015-08-25T14:53:05Z",
        "updated_at": "2015-08-25T14:53:05Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/197#discussion_r37874614",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/197",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/37874614"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/197#discussion_r37874614"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/197"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/41951969",
        "pull_request_review_id": null,
        "id": 41951969,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUxOTY5",
        "diff_hunk": "@@ -4,6 +4,9 @@\n require \"set\"\n \n describe Hamster do\n+\n+  Struct.new(\"Customer\", :name, :address)",
        "path": "spec/lib/hamster/nested/construction_spec.rb",
        "position": 5,
        "original_position": 5,
        "commit_id": "0933b437833e2a923eddefa562ba69eb78aa3863",
        "original_commit_id": "0933b437833e2a923eddefa562ba69eb78aa3863",
        "user": {
            "login": "alexdowad",
            "id": 1067359,
            "node_id": "MDQ6VXNlcjEwNjczNTk=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1067359?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alexdowad",
            "html_url": "https://github.com/alexdowad",
            "followers_url": "https://api.github.com/users/alexdowad/followers",
            "following_url": "https://api.github.com/users/alexdowad/following{/other_user}",
            "gists_url": "https://api.github.com/users/alexdowad/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/alexdowad/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alexdowad/subscriptions",
            "organizations_url": "https://api.github.com/users/alexdowad/orgs",
            "repos_url": "https://api.github.com/users/alexdowad/repos",
            "events_url": "https://api.github.com/users/alexdowad/events{/privacy}",
            "received_events_url": "https://api.github.com/users/alexdowad/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Please remove this extraneous line.\n",
        "created_at": "2015-10-14T03:32:09Z",
        "updated_at": "2015-10-14T03:32:09Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/200#discussion_r41951969",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/200",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/41951969"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/200#discussion_r41951969"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/200"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/41952221",
        "pull_request_review_id": null,
        "id": 41952221,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUyMjIx",
        "diff_hunk": "@@ -4,6 +4,9 @@\n require \"set\"\n \n describe Hamster do\n+\n+  Struct.new(\"Customer\", :name, :address)",
        "path": "spec/lib/hamster/nested/construction_spec.rb",
        "position": 5,
        "original_position": 5,
        "commit_id": "0933b437833e2a923eddefa562ba69eb78aa3863",
        "original_commit_id": "0933b437833e2a923eddefa562ba69eb78aa3863",
        "user": {
            "login": "alexdowad",
            "id": 1067359,
            "node_id": "MDQ6VXNlcjEwNjczNTk=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1067359?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alexdowad",
            "html_url": "https://github.com/alexdowad",
            "followers_url": "https://api.github.com/users/alexdowad/followers",
            "following_url": "https://api.github.com/users/alexdowad/following{/other_user}",
            "gists_url": "https://api.github.com/users/alexdowad/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/alexdowad/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alexdowad/subscriptions",
            "organizations_url": "https://api.github.com/users/alexdowad/orgs",
            "repos_url": "https://api.github.com/users/alexdowad/repos",
            "events_url": "https://api.github.com/users/alexdowad/events{/privacy}",
            "received_events_url": "https://api.github.com/users/alexdowad/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "OK, sorry, I see it's not extraneous now. I moved it to `spec_helper.rb`, though.\n",
        "created_at": "2015-10-14T03:40:07Z",
        "updated_at": "2015-10-14T03:40:07Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/200#discussion_r41952221",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/200",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/41952221"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/200#discussion_r41952221"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/200"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/41979932",
        "pull_request_review_id": null,
        "id": 41979932,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc5OTMy",
        "diff_hunk": "@@ -0,0 +1,9 @@\n+class Struct\n+  # Implement Struct#to_h for Ruby interpreters which don't have it\n+  # (such as MRI 1.9.3 and lower)\n+  unless method_defined?(:to_h)\n+    def to_h\n+      Hash[members.zip(values)]",
        "path": "lib/hamster/core_ext/struct.rb",
        "position": 6,
        "original_position": 6,
        "commit_id": "2b4c9e7201ae76994eb3c9b7d93f47ac3a91cc04",
        "original_commit_id": "2b4c9e7201ae76994eb3c9b7d93f47ac3a91cc04",
        "user": {
            "login": "dubek",
            "id": 9211,
            "node_id": "MDQ6VXNlcjkyMTE=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/9211?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dubek",
            "html_url": "https://github.com/dubek",
            "followers_url": "https://api.github.com/users/dubek/followers",
            "following_url": "https://api.github.com/users/dubek/following{/other_user}",
            "gists_url": "https://api.github.com/users/dubek/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dubek/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dubek/subscriptions",
            "organizations_url": "https://api.github.com/users/dubek/orgs",
            "repos_url": "https://api.github.com/users/dubek/repos",
            "events_url": "https://api.github.com/users/dubek/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dubek/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Maybe simpler/clearer:\n\n```\nHash[each_pair.to_a]\n```\n\n(not that it's really important...)\n",
        "created_at": "2015-10-14T11:00:38Z",
        "updated_at": "2015-10-14T11:00:38Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/202#discussion_r41979932",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/202",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/41979932"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/202#discussion_r41979932"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/202"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/46779314",
        "pull_request_review_id": null,
        "id": 46779314,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc5MzE0",
        "diff_hunk": "@@ -590,6 +590,27 @@ def fetch_values(*wanted)\n       Vector.new(array.freeze)\n     end\n \n+    # Return the value of successively indexing into a hash\n+    # If any of the keys is not present in the hash, return `hil`\n+    #\n+    # @example\n+    #   h = Hamster::Hash[:a => 9, :b => Hamster::Hash[:c => 'a', :d => 4], :e => nil]\n+    #   h.dig(:b, :c) # => \"a\"\n+    #   h.dig(:b, :f) # => nil\n+    # @params keys to fetch from the hash\n+    # @return value\n+    def dig(key, *rest)\n+      value = self[key]\n+      if rest.empty? || value.nil?\n+        value\n+      else\n+        if value.respond_to?(:dig)\n+          value.dig(*rest)\n+        end\n+      end\n+    end",
        "path": "lib/hamster/hash.rb",
        "position": null,
        "original_position": 22,
        "commit_id": "f506b72dece1d11c6d9c7ee388e1f79188b35a25",
        "original_commit_id": "9e382c8ce9914161b355a717b979946b3e8e358e",
        "user": {
            "login": "HParker",
            "id": 4482399,
            "node_id": "MDQ6VXNlcjQ0ODIzOTk=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/4482399?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/HParker",
            "html_url": "https://github.com/HParker",
            "followers_url": "https://api.github.com/users/HParker/followers",
            "following_url": "https://api.github.com/users/HParker/following{/other_user}",
            "gists_url": "https://api.github.com/users/HParker/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/HParker/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/HParker/subscriptions",
            "organizations_url": "https://api.github.com/users/HParker/orgs",
            "repos_url": "https://api.github.com/users/HParker/repos",
            "events_url": "https://api.github.com/users/HParker/events{/privacy}",
            "received_events_url": "https://api.github.com/users/HParker/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think this implementation could actually be used for vectors too since it is just implemented on top of `[]`.\n\nonly reason I didn't solve them both at once is that vectors dig in ruby 2.3.0-dev behaves slightly different.\n\n``` ruby\nirb(main):006:0> [1,2,3].dig(:first)\nTypeError: no implicit conversion of Symbol into Integer\n    from (irb):6:in `dig'\n    from (irb):6\n    from /Users/adam/.rbenv/versions/2.3.0-dev/bin/irb:11:in `<main>'\n```\n\nvs.\n\n``` ruby\nirb(main):007:0> {a: 'b'}.dig(:first)\n=> nil\n```\n\nwith this code, instead of raising an error it would return nil.\nHowever, this behavior might not make it to final release.\nhttps://bugs.ruby-lang.org/issues/11762\n",
        "created_at": "2015-12-07T00:33:48Z",
        "updated_at": "2015-12-07T04:26:51Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/216#discussion_r46779314",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/216",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/46779314"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/216#discussion_r46779314"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/216"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/46781863",
        "pull_request_review_id": null,
        "id": 46781863,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgxODYz",
        "diff_hunk": "@@ -590,6 +590,27 @@ def fetch_values(*wanted)\n       Vector.new(array.freeze)\n     end\n \n+    # Return the value of successively indexing into a hash\n+    # If any of the keys is not present in the hash, return `hil`",
        "path": "lib/hamster/hash.rb",
        "position": null,
        "original_position": 5,
        "commit_id": "f506b72dece1d11c6d9c7ee388e1f79188b35a25",
        "original_commit_id": "9e382c8ce9914161b355a717b979946b3e8e358e",
        "user": {
            "login": "dubek",
            "id": 9211,
            "node_id": "MDQ6VXNlcjkyMTE=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/9211?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dubek",
            "html_url": "https://github.com/dubek",
            "followers_url": "https://api.github.com/users/dubek/followers",
            "following_url": "https://api.github.com/users/dubek/following{/other_user}",
            "gists_url": "https://api.github.com/users/dubek/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dubek/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dubek/subscriptions",
            "organizations_url": "https://api.github.com/users/dubek/orgs",
            "repos_url": "https://api.github.com/users/dubek/repos",
            "events_url": "https://api.github.com/users/dubek/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dubek/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "s/hil/nil/\n",
        "created_at": "2015-12-07T02:11:25Z",
        "updated_at": "2015-12-07T04:26:51Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/216#discussion_r46781863",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/216",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/46781863"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/216#discussion_r46781863"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/216"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/46781958",
        "pull_request_review_id": null,
        "id": 46781958,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgxOTU4",
        "diff_hunk": "@@ -590,6 +590,27 @@ def fetch_values(*wanted)\n       Vector.new(array.freeze)\n     end\n \n+    # Return the value of successively indexing into a hash\n+    # If any of the keys is not present in the hash, return `hil`\n+    #\n+    # @example\n+    #   h = Hamster::Hash[:a => 9, :b => Hamster::Hash[:c => 'a', :d => 4], :e => nil]\n+    #   h.dig(:b, :c) # => \"a\"\n+    #   h.dig(:b, :f) # => nil\n+    # @params keys to fetch from the hash\n+    # @return value\n+    def dig(key, *rest)\n+      value = self[key]\n+      if rest.empty? || value.nil?\n+        value\n+      else\n+        if value.respond_to?(:dig)",
        "path": "lib/hamster/hash.rb",
        "position": null,
        "original_position": 18,
        "commit_id": "f506b72dece1d11c6d9c7ee388e1f79188b35a25",
        "original_commit_id": "9e382c8ce9914161b355a717b979946b3e8e358e",
        "user": {
            "login": "dubek",
            "id": 9211,
            "node_id": "MDQ6VXNlcjkyMTE=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/9211?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dubek",
            "html_url": "https://github.com/dubek",
            "followers_url": "https://api.github.com/users/dubek/followers",
            "following_url": "https://api.github.com/users/dubek/following{/other_user}",
            "gists_url": "https://api.github.com/users/dubek/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dubek/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dubek/subscriptions",
            "organizations_url": "https://api.github.com/users/dubek/orgs",
            "repos_url": "https://api.github.com/users/dubek/repos",
            "events_url": "https://api.github.com/users/dubek/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dubek/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ruby has an `elsif` keyword - that's the place to use it.\n",
        "created_at": "2015-12-07T02:14:18Z",
        "updated_at": "2015-12-07T04:26:51Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/216#discussion_r46781958",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/216",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/46781958"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/216#discussion_r46781958"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/216"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/46782118",
        "pull_request_review_id": null,
        "id": 46782118,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgyMTE4",
        "diff_hunk": "@@ -590,6 +590,27 @@ def fetch_values(*wanted)\n       Vector.new(array.freeze)\n     end\n \n+    # Return the value of successively indexing into a hash\n+    # If any of the keys is not present in the hash, return `hil`\n+    #\n+    # @example\n+    #   h = Hamster::Hash[:a => 9, :b => Hamster::Hash[:c => 'a', :d => 4], :e => nil]\n+    #   h.dig(:b, :c) # => \"a\"\n+    #   h.dig(:b, :f) # => nil\n+    # @params keys to fetch from the hash\n+    # @return value",
        "path": "lib/hamster/hash.rb",
        "position": null,
        "original_position": 12,
        "commit_id": "f506b72dece1d11c6d9c7ee388e1f79188b35a25",
        "original_commit_id": "9e382c8ce9914161b355a717b979946b3e8e358e",
        "user": {
            "login": "dubek",
            "id": 9211,
            "node_id": "MDQ6VXNlcjkyMTE=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/9211?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dubek",
            "html_url": "https://github.com/dubek",
            "followers_url": "https://api.github.com/users/dubek/followers",
            "following_url": "https://api.github.com/users/dubek/following{/other_user}",
            "gists_url": "https://api.github.com/users/dubek/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dubek/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dubek/subscriptions",
            "organizations_url": "https://api.github.com/users/dubek/orgs",
            "repos_url": "https://api.github.com/users/dubek/repos",
            "events_url": "https://api.github.com/users/dubek/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dubek/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The rest of the Hamster code uses `@return [Object]` in such a case; I'd try to follow suit.\n",
        "created_at": "2015-12-07T02:19:11Z",
        "updated_at": "2015-12-07T04:26:51Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/216#discussion_r46782118",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/216",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/46782118"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/216#discussion_r46782118"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/216"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/46782470",
        "pull_request_review_id": null,
        "id": 46782470,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgyNDcw",
        "diff_hunk": "@@ -590,6 +590,27 @@ def fetch_values(*wanted)\n       Vector.new(array.freeze)\n     end\n \n+    # Return the value of successively indexing into a hash\n+    # If any of the keys is not present in the hash, return `hil`\n+    #\n+    # @example\n+    #   h = Hamster::Hash[:a => 9, :b => Hamster::Hash[:c => 'a', :d => 4], :e => nil]\n+    #   h.dig(:b, :c) # => \"a\"\n+    #   h.dig(:b, :f) # => nil\n+    # @params keys to fetch from the hash\n+    # @return value\n+    def dig(key, *rest)\n+      value = self[key]\n+      if rest.empty? || value.nil?\n+        value\n+      else\n+        if value.respond_to?(:dig)\n+          value.dig(*rest)\n+        end\n+      end\n+    end",
        "path": "lib/hamster/hash.rb",
        "position": null,
        "original_position": 22,
        "commit_id": "f506b72dece1d11c6d9c7ee388e1f79188b35a25",
        "original_commit_id": "9e382c8ce9914161b355a717b979946b3e8e358e",
        "user": {
            "login": "dubek",
            "id": 9211,
            "node_id": "MDQ6VXNlcjkyMTE=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/9211?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dubek",
            "html_url": "https://github.com/dubek",
            "followers_url": "https://api.github.com/users/dubek/followers",
            "following_url": "https://api.github.com/users/dubek/following{/other_user}",
            "gists_url": "https://api.github.com/users/dubek/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dubek/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dubek/subscriptions",
            "organizations_url": "https://api.github.com/users/dubek/orgs",
            "repos_url": "https://api.github.com/users/dubek/repos",
            "events_url": "https://api.github.com/users/dubek/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dubek/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I don't understand. `Hamster::Vector` _does_ raise an exception when `#[]` is called with a non-integer:\n\n```\n2.2.3 :002 > v = Hamster::Vector[1,2,3]\n => Hamster::Vector[1, 2, 3] \n2.2.3 :003 > v[1]\n => 2 \n2.2.3 :004 > v[:first]\nArgumentError: comparison of Symbol with 0 failed\n    from /home/dmurik/world/hamster/lib/hamster/vector.rb:215:in `<'\n    from /home/dmurik/world/hamster/lib/hamster/vector.rb:215:in `get'\n    from /home/dmurik/world/hamster/lib/hamster/vector.rb:323:in `slice'\n    from (irb):4\n    from /home/dmurik/.rvm/rubies/ruby-2.2.3/bin/irb:11:in `<main>'\n```\n\nSo if you use your current suggested `#dig` implementation for Vectors too you'll get a behaviour similar to 2.3.0-preview1. (unless I missed something...)\n",
        "created_at": "2015-12-07T02:31:40Z",
        "updated_at": "2015-12-07T04:26:51Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/216#discussion_r46782470",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/216",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/46782470"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/216#discussion_r46782470"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/216"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/46782565",
        "pull_request_review_id": null,
        "id": 46782565,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgyNTY1",
        "diff_hunk": "@@ -590,6 +590,27 @@ def fetch_values(*wanted)\n       Vector.new(array.freeze)\n     end\n \n+    # Return the value of successively indexing into a hash\n+    # If any of the keys is not present in the hash, return `hil`\n+    #\n+    # @example\n+    #   h = Hamster::Hash[:a => 9, :b => Hamster::Hash[:c => 'a', :d => 4], :e => nil]\n+    #   h.dig(:b, :c) # => \"a\"\n+    #   h.dig(:b, :f) # => nil\n+    # @params keys to fetch from the hash\n+    # @return value\n+    def dig(key, *rest)\n+      value = self[key]\n+      if rest.empty? || value.nil?\n+        value\n+      else\n+        if value.respond_to?(:dig)\n+          value.dig(*rest)\n+        end\n+      end\n+    end",
        "path": "lib/hamster/hash.rb",
        "position": null,
        "original_position": 22,
        "commit_id": "f506b72dece1d11c6d9c7ee388e1f79188b35a25",
        "original_commit_id": "9e382c8ce9914161b355a717b979946b3e8e358e",
        "user": {
            "login": "HParker",
            "id": 4482399,
            "node_id": "MDQ6VXNlcjQ0ODIzOTk=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/4482399?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/HParker",
            "html_url": "https://github.com/HParker",
            "followers_url": "https://api.github.com/users/HParker/followers",
            "following_url": "https://api.github.com/users/HParker/following{/other_user}",
            "gists_url": "https://api.github.com/users/HParker/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/HParker/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/HParker/subscriptions",
            "organizations_url": "https://api.github.com/users/HParker/orgs",
            "repos_url": "https://api.github.com/users/HParker/repos",
            "events_url": "https://api.github.com/users/HParker/events{/privacy}",
            "received_events_url": "https://api.github.com/users/HParker/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Sorry, I should have been more clear. There seems to some debate if `Array#dig` should raise an error when indexed with a non integer, or return `nil`. Which do you think fits better with existing hamster apis?\n\nSounds like you are saying raising an error is expected?\n",
        "created_at": "2015-12-07T02:35:07Z",
        "updated_at": "2015-12-07T04:26:51Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/216#discussion_r46782565",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/216",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/46782565"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/216#discussion_r46782565"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/216"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/46782714",
        "pull_request_review_id": null,
        "id": 46782714,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgyNzE0",
        "diff_hunk": "@@ -590,6 +590,27 @@ def fetch_values(*wanted)\n       Vector.new(array.freeze)\n     end\n \n+    # Return the value of successively indexing into a hash\n+    # If any of the keys is not present in the hash, return `hil`\n+    #\n+    # @example\n+    #   h = Hamster::Hash[:a => 9, :b => Hamster::Hash[:c => 'a', :d => 4], :e => nil]\n+    #   h.dig(:b, :c) # => \"a\"\n+    #   h.dig(:b, :f) # => nil\n+    # @params keys to fetch from the hash\n+    # @return value\n+    def dig(key, *rest)\n+      value = self[key]\n+      if rest.empty? || value.nil?\n+        value\n+      else\n+        if value.respond_to?(:dig)\n+          value.dig(*rest)\n+        end\n+      end\n+    end",
        "path": "lib/hamster/hash.rb",
        "position": null,
        "original_position": 22,
        "commit_id": "f506b72dece1d11c6d9c7ee388e1f79188b35a25",
        "original_commit_id": "9e382c8ce9914161b355a717b979946b3e8e358e",
        "user": {
            "login": "dubek",
            "id": 9211,
            "node_id": "MDQ6VXNlcjkyMTE=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/9211?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dubek",
            "html_url": "https://github.com/dubek",
            "followers_url": "https://api.github.com/users/dubek/followers",
            "following_url": "https://api.github.com/users/dubek/following{/other_user}",
            "gists_url": "https://api.github.com/users/dubek/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dubek/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dubek/subscriptions",
            "organizations_url": "https://api.github.com/users/dubek/orgs",
            "repos_url": "https://api.github.com/users/dubek/repos",
            "events_url": "https://api.github.com/users/dubek/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dubek/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I would follow the behaviour we currently have in `#update_in` (which shares some ideas with `#dig`):\n\n```\n2.2.3 :001 > v = Hamster::Vector[1,2,3]\n => Hamster::Vector[1, 2, 3] \n2.2.3 :002 > v.update_in(1) { |v| 100+v }\n => Hamster::Vector[1, 102, 3] \n2.2.3 :003 > v\n => Hamster::Vector[1, 2, 3] \n2.2.3 :004 > v.update_in(:foo) { |v| 100+v }\nArgumentError: comparison of Symbol with -3 failed\n    from /home/dmurik/world/hamster/lib/hamster/vector.rb:261:in `>='\n    from /home/dmurik/world/hamster/lib/hamster/vector.rb:261:in `fetch'\n    from /home/dmurik/world/hamster/lib/hamster/associable.rb:41:in `update_in'\n    from (irb):4\n    from /home/dmurik/.rvm/rubies/ruby-2.2.3/bin/irb:11:in `<main>'\n```\n\nSo, yes, raise an exception when accessing a Vector with a non-integer index.\n",
        "created_at": "2015-12-07T02:39:19Z",
        "updated_at": "2015-12-07T04:26:51Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/216#discussion_r46782714",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/216",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/46782714"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/216#discussion_r46782714"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/216"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/46782870",
        "pull_request_review_id": null,
        "id": 46782870,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgyODcw",
        "diff_hunk": "@@ -590,6 +590,27 @@ def fetch_values(*wanted)\n       Vector.new(array.freeze)\n     end\n \n+    # Return the value of successively indexing into a hash\n+    # If any of the keys is not present in the hash, return `hil`\n+    #\n+    # @example\n+    #   h = Hamster::Hash[:a => 9, :b => Hamster::Hash[:c => 'a', :d => 4], :e => nil]\n+    #   h.dig(:b, :c) # => \"a\"\n+    #   h.dig(:b, :f) # => nil\n+    # @params keys to fetch from the hash\n+    # @return value\n+    def dig(key, *rest)\n+      value = self[key]\n+      if rest.empty? || value.nil?\n+        value\n+      else\n+        if value.respond_to?(:dig)\n+          value.dig(*rest)\n+        end\n+      end\n+    end",
        "path": "lib/hamster/hash.rb",
        "position": null,
        "original_position": 22,
        "commit_id": "f506b72dece1d11c6d9c7ee388e1f79188b35a25",
        "original_commit_id": "9e382c8ce9914161b355a717b979946b3e8e358e",
        "user": {
            "login": "HParker",
            "id": 4482399,
            "node_id": "MDQ6VXNlcjQ0ODIzOTk=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/4482399?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/HParker",
            "html_url": "https://github.com/HParker",
            "followers_url": "https://api.github.com/users/HParker/followers",
            "following_url": "https://api.github.com/users/HParker/following{/other_user}",
            "gists_url": "https://api.github.com/users/HParker/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/HParker/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/HParker/subscriptions",
            "organizations_url": "https://api.github.com/users/HParker/orgs",
            "repos_url": "https://api.github.com/users/HParker/repos",
            "events_url": "https://api.github.com/users/HParker/events{/privacy}",
            "received_events_url": "https://api.github.com/users/HParker/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Great, makes sense to me! This also mean we could use this implementation as a `Dig` module included in hash and vector and get 2 for the price of one. Does that sound like a reasonable solution to you?\n",
        "created_at": "2015-12-07T02:44:29Z",
        "updated_at": "2015-12-07T04:26:51Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/216#discussion_r46782870",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/216",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/46782870"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/216#discussion_r46782870"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/216"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/46788025",
        "pull_request_review_id": null,
        "id": 46788025,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg4MDI1",
        "diff_hunk": "@@ -590,6 +590,25 @@ def fetch_values(*wanted)\n       Vector.new(array.freeze)\n     end\n \n+    # Return the value of successively indexing into a hash\n+    # If any of the keys is not present in the hash, return `nil`\n+    #\n+    # @example\n+    #   h = Hamster::Hash[:a => 9, :b => Hamster::Hash[:c => 'a', :d => 4], :e => nil]\n+    #   h.dig(:b, :c) # => \"a\"\n+    #   h.dig(:b, :f) # => nil\n+    # @params keys to fetch from the hash\n+    # @return [Object]\n+    def dig(key, *rest)\n+      value = self[key]\n+      if rest.empty? || value.nil?\n+        value\n+      elsif value.respond_to?(:dig)\n+        value.dig(*rest)",
        "path": "lib/hamster/hash.rb",
        "position": 18,
        "original_position": 18,
        "commit_id": "f506b72dece1d11c6d9c7ee388e1f79188b35a25",
        "original_commit_id": "f506b72dece1d11c6d9c7ee388e1f79188b35a25",
        "user": {
            "login": "alexdowad",
            "id": 1067359,
            "node_id": "MDQ6VXNlcjEwNjczNTk=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1067359?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alexdowad",
            "html_url": "https://github.com/alexdowad",
            "followers_url": "https://api.github.com/users/alexdowad/followers",
            "following_url": "https://api.github.com/users/alexdowad/following{/other_user}",
            "gists_url": "https://api.github.com/users/alexdowad/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/alexdowad/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alexdowad/subscriptions",
            "organizations_url": "https://api.github.com/users/alexdowad/orgs",
            "repos_url": "https://api.github.com/users/alexdowad/repos",
            "events_url": "https://api.github.com/users/alexdowad/events{/privacy}",
            "received_events_url": "https://api.github.com/users/alexdowad/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Out of curiosity: is this how MRI's `#dig` also works? If it finds a value which does not respond to `dig`, does it error out, or just return `nil`?\n",
        "created_at": "2015-12-07T05:30:53Z",
        "updated_at": "2015-12-07T05:30:53Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/216#discussion_r46788025",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/216",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/46788025"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/216#discussion_r46788025"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/216"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/46788451",
        "pull_request_review_id": null,
        "id": 46788451,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg4NDUx",
        "diff_hunk": "@@ -590,6 +590,25 @@ def fetch_values(*wanted)\n       Vector.new(array.freeze)\n     end\n \n+    # Return the value of successively indexing into a hash\n+    # If any of the keys is not present in the hash, return `nil`\n+    #\n+    # @example\n+    #   h = Hamster::Hash[:a => 9, :b => Hamster::Hash[:c => 'a', :d => 4], :e => nil]\n+    #   h.dig(:b, :c) # => \"a\"\n+    #   h.dig(:b, :f) # => nil\n+    # @params keys to fetch from the hash\n+    # @return [Object]\n+    def dig(key, *rest)\n+      value = self[key]\n+      if rest.empty? || value.nil?\n+        value\n+      elsif value.respond_to?(:dig)\n+        value.dig(*rest)",
        "path": "lib/hamster/hash.rb",
        "position": 18,
        "original_position": 18,
        "commit_id": "f506b72dece1d11c6d9c7ee388e1f79188b35a25",
        "original_commit_id": "f506b72dece1d11c6d9c7ee388e1f79188b35a25",
        "user": {
            "login": "HParker",
            "id": 4482399,
            "node_id": "MDQ6VXNlcjQ0ODIzOTk=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/4482399?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/HParker",
            "html_url": "https://github.com/HParker",
            "followers_url": "https://api.github.com/users/HParker/followers",
            "following_url": "https://api.github.com/users/HParker/following{/other_user}",
            "gists_url": "https://api.github.com/users/HParker/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/HParker/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/HParker/subscriptions",
            "organizations_url": "https://api.github.com/users/HParker/orgs",
            "repos_url": "https://api.github.com/users/HParker/repos",
            "events_url": "https://api.github.com/users/HParker/events{/privacy}",
            "received_events_url": "https://api.github.com/users/HParker/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It does at least on the ruby 2.3.0 I have:\n\n``` shell\n$ ruby --version\nruby 2.3.0dev (2015-11-17 trunk 52623) [x86_64-darwin15]\n\nadam at machine in ~ \n$ irb\nirb(main):001:0> {a: 9}.dig(:a, :b)\n=> nil\n```\n\nInterestingly, it actually works on any class that implements dig:\n\n``` ruby\nirb(main):001:0> class Diggable\nirb(main):002:1>   def dig(*args)\nirb(main):003:2>     'foo'\nirb(main):004:2>   end\nirb(main):005:1> end\n=> :dig\nirb(main):006:0> d = Diggable.new\n=> #<Diggable:0x007f818316a358>\nirb(main):007:0> {a: d}.dig(:a, :b)\n=> \"foo\"\n```\n\nHowever, you do have to dig based on a key that the object can respond to:\n\n``` ruby\nirb(main):008:0> {a: [1,2,3]}.dig(:a, 1)\n=> 2\nirb(main):009:0> {a: [1,2,3]}.dig(:a, :b)\nTypeError: no implicit conversion of Symbol into Integer\n    from (irb):9:in `dig'\n    from (irb):9\n    from /Users/adam/.rbenv/versions/2.3.0-dev/bin/irb:11:in `<main>'\n```\n",
        "created_at": "2015-12-07T05:43:15Z",
        "updated_at": "2015-12-07T05:43:15Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/216#discussion_r46788451",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/216",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/46788451"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/216#discussion_r46788451"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/216"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/46788901",
        "pull_request_review_id": null,
        "id": 46788901,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg4OTAx",
        "diff_hunk": "@@ -590,6 +590,25 @@ def fetch_values(*wanted)\n       Vector.new(array.freeze)\n     end\n \n+    # Return the value of successively indexing into a hash\n+    # If any of the keys is not present in the hash, return `nil`\n+    #\n+    # @example\n+    #   h = Hamster::Hash[:a => 9, :b => Hamster::Hash[:c => 'a', :d => 4], :e => nil]\n+    #   h.dig(:b, :c) # => \"a\"\n+    #   h.dig(:b, :f) # => nil\n+    # @params keys to fetch from the hash\n+    # @return [Object]\n+    def dig(key, *rest)\n+      value = self[key]\n+      if rest.empty? || value.nil?\n+        value\n+      elsif value.respond_to?(:dig)\n+        value.dig(*rest)",
        "path": "lib/hamster/hash.rb",
        "position": 18,
        "original_position": 18,
        "commit_id": "f506b72dece1d11c6d9c7ee388e1f79188b35a25",
        "original_commit_id": "f506b72dece1d11c6d9c7ee388e1f79188b35a25",
        "user": {
            "login": "alexdowad",
            "id": 1067359,
            "node_id": "MDQ6VXNlcjEwNjczNTk=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1067359?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alexdowad",
            "html_url": "https://github.com/alexdowad",
            "followers_url": "https://api.github.com/users/alexdowad/followers",
            "following_url": "https://api.github.com/users/alexdowad/following{/other_user}",
            "gists_url": "https://api.github.com/users/alexdowad/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/alexdowad/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alexdowad/subscriptions",
            "organizations_url": "https://api.github.com/users/alexdowad/orgs",
            "repos_url": "https://api.github.com/users/alexdowad/repos",
            "events_url": "https://api.github.com/users/alexdowad/events{/privacy}",
            "received_events_url": "https://api.github.com/users/alexdowad/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Thanks for the clarification!\n",
        "created_at": "2015-12-07T05:55:30Z",
        "updated_at": "2015-12-07T05:55:30Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/216#discussion_r46788901",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/216",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/46788901"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/216#discussion_r46788901"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/216"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/46852509",
        "pull_request_review_id": null,
        "id": 46852509,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODUyNTA5",
        "diff_hunk": "@@ -45,5 +45,23 @@ def update_in(*key_path, &block)\n       end\n       put(key, new_value)\n     end\n+\n+    # Return the value of successively indexing into a hash",
        "path": "lib/hamster/associable.rb",
        "position": null,
        "original_position": 5,
        "commit_id": "7ddd6933965745c4513fda340fca01105212cfea",
        "original_commit_id": "1565794d1591da99fd7408fb6c4468aac27246b5",
        "user": {
            "login": "alexdowad",
            "id": 1067359,
            "node_id": "MDQ6VXNlcjEwNjczNTk=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1067359?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alexdowad",
            "html_url": "https://github.com/alexdowad",
            "followers_url": "https://api.github.com/users/alexdowad/followers",
            "following_url": "https://api.github.com/users/alexdowad/following{/other_user}",
            "gists_url": "https://api.github.com/users/alexdowad/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/alexdowad/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alexdowad/subscriptions",
            "organizations_url": "https://api.github.com/users/alexdowad/orgs",
            "repos_url": "https://api.github.com/users/alexdowad/repos",
            "events_url": "https://api.github.com/users/alexdowad/events{/privacy}",
            "received_events_url": "https://api.github.com/users/alexdowad/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\"successively indexing into a _hash_\"...\n",
        "created_at": "2015-12-07T17:53:49Z",
        "updated_at": "2015-12-10T01:56:52Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/217#discussion_r46852509",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/217",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/46852509"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/217#discussion_r46852509"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/217"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/46986024",
        "pull_request_review_id": null,
        "id": 46986024,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg2MDI0",
        "diff_hunk": "@@ -45,5 +45,28 @@ def update_in(*key_path, &block)\n       end\n       put(key, new_value)\n     end\n+\n+    # Return the value of successively indexing into a container\n+    # If any of the keys is not present in the container, return `nil`.\n+    # keys that the Hamster type doesn't understand, raises an argument error\n+    #\n+    # @example\n+    #   h = Hamster::Hash[:a => 9, :b => Hamster::Hash[:c => 'a', :d => 4], :e => nil]",
        "path": "lib/hamster/associable.rb",
        "position": null,
        "original_position": 10,
        "commit_id": "7ddd6933965745c4513fda340fca01105212cfea",
        "original_commit_id": "7fcf93afc13aa084112e6d0dc9f672c433284f6a",
        "user": {
            "login": "dubek",
            "id": 9211,
            "node_id": "MDQ6VXNlcjkyMTE=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/9211?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dubek",
            "html_url": "https://github.com/dubek",
            "followers_url": "https://api.github.com/users/dubek/followers",
            "following_url": "https://api.github.com/users/dubek/following{/other_user}",
            "gists_url": "https://api.github.com/users/dubek/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dubek/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dubek/subscriptions",
            "organizations_url": "https://api.github.com/users/dubek/orgs",
            "repos_url": "https://api.github.com/users/dubek/repos",
            "events_url": "https://api.github.com/users/dubek/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dubek/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I would give an example that has a Hash+Vector together, like the first example of `#update_in` above. This shows that both containers can be used together with the same method.\n",
        "created_at": "2015-12-08T17:39:13Z",
        "updated_at": "2015-12-10T01:56:52Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/217#discussion_r46986024",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/217",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/46986024"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/217#discussion_r46986024"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/217"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/46986335",
        "pull_request_review_id": null,
        "id": 46986335,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg2MzM1",
        "diff_hunk": "@@ -45,5 +45,28 @@ def update_in(*key_path, &block)\n       end\n       put(key, new_value)\n     end\n+\n+    # Return the value of successively indexing into a container",
        "path": "lib/hamster/associable.rb",
        "position": null,
        "original_position": 5,
        "commit_id": "7ddd6933965745c4513fda340fca01105212cfea",
        "original_commit_id": "7fcf93afc13aa084112e6d0dc9f672c433284f6a",
        "user": {
            "login": "dubek",
            "id": 9211,
            "node_id": "MDQ6VXNlcjkyMTE=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/9211?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dubek",
            "html_url": "https://github.com/dubek",
            "followers_url": "https://api.github.com/users/dubek/followers",
            "following_url": "https://api.github.com/users/dubek/following{/other_user}",
            "gists_url": "https://api.github.com/users/dubek/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dubek/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dubek/subscriptions",
            "organizations_url": "https://api.github.com/users/dubek/orgs",
            "repos_url": "https://api.github.com/users/dubek/repos",
            "events_url": "https://api.github.com/users/dubek/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dubek/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Add a period at the end of the first sentence.\n",
        "created_at": "2015-12-08T17:41:36Z",
        "updated_at": "2015-12-10T01:56:52Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/217#discussion_r46986335",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/217",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/46986335"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/217#discussion_r46986335"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/217"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/46991055",
        "pull_request_review_id": null,
        "id": 46991055,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkxMDU1",
        "diff_hunk": "@@ -45,5 +45,28 @@ def update_in(*key_path, &block)\n       end\n       put(key, new_value)\n     end\n+\n+    # Return the value of successively indexing into a container",
        "path": "lib/hamster/associable.rb",
        "position": null,
        "original_position": 5,
        "commit_id": "7ddd6933965745c4513fda340fca01105212cfea",
        "original_commit_id": "7fcf93afc13aa084112e6d0dc9f672c433284f6a",
        "user": {
            "login": "alexdowad",
            "id": 1067359,
            "node_id": "MDQ6VXNlcjEwNjczNTk=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1067359?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alexdowad",
            "html_url": "https://github.com/alexdowad",
            "followers_url": "https://api.github.com/users/alexdowad/followers",
            "following_url": "https://api.github.com/users/alexdowad/following{/other_user}",
            "gists_url": "https://api.github.com/users/alexdowad/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/alexdowad/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alexdowad/subscriptions",
            "organizations_url": "https://api.github.com/users/alexdowad/orgs",
            "repos_url": "https://api.github.com/users/alexdowad/repos",
            "events_url": "https://api.github.com/users/alexdowad/events{/privacy}",
            "received_events_url": "https://api.github.com/users/alexdowad/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I would add that \"collection\" is preferable to \"container\".\n",
        "created_at": "2015-12-08T18:18:09Z",
        "updated_at": "2015-12-10T01:56:52Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/217#discussion_r46991055",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/217",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/46991055"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/217#discussion_r46991055"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/217"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/56769826",
        "pull_request_review_id": null,
        "id": 56769826,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzY5ODI2",
        "diff_hunk": "@@ -526,21 +526,9 @@ def shuffle\n     # @return [Vector]\n     def uniq(&block)\n       array = self.to_a\n-      if block_given?\n-        if array.frozen?\n-          self.class.new(array.uniq(&block).freeze)\n-        elsif array.uniq!(&block) # returns nil if no changes were made\n-          self.class.new(array.freeze)\n-        else\n-          self\n-        end\n-      elsif array.frozen?\n-        self.class.new(array.uniq.freeze)\n-      elsif array.uniq! # returns nil if no changes were made\n-        self.class.new(array.freeze)\n-      else\n-        self\n-      end\n+      return self.class.new(array.uniq(&block).freeze) if array.frozen?\n+      return self.class.new(array.freeze) if array.uniq!(&block)",
        "path": "lib/hamster/vector.rb",
        "position": 20,
        "original_position": 20,
        "commit_id": "8ddf85553d172d6803a18af0b2d95779666f925a",
        "original_commit_id": "747122d0c4656fb8e10a27070144ac93a47fa419",
        "user": {
            "login": "stephencelis",
            "id": 658,
            "node_id": "MDQ6VXNlcjY1OA==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/658?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/stephencelis",
            "html_url": "https://github.com/stephencelis",
            "followers_url": "https://api.github.com/users/stephencelis/followers",
            "following_url": "https://api.github.com/users/stephencelis/following{/other_user}",
            "gists_url": "https://api.github.com/users/stephencelis/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/stephencelis/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/stephencelis/subscriptions",
            "organizations_url": "https://api.github.com/users/stephencelis/orgs",
            "repos_url": "https://api.github.com/users/stephencelis/repos",
            "events_url": "https://api.github.com/users/stephencelis/events{/privacy}",
            "received_events_url": "https://api.github.com/users/stephencelis/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Not sure why freezing the input is necessary seeing as `#initialize` already does so.\n\nTo be honest this entire method could probably be:\n\n``` ruby\ndef uniq(&block)\n  self.class.new(to_a.uniq(&block))\nend\n```\n\nThough it's possible that this would be less efficient, I wonder what the threshold is and if (for smaller vectors), it would actually be faster.\n",
        "created_at": "2016-03-20T19:06:42Z",
        "updated_at": "2016-06-14T12:19:59Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/224#discussion_r56769826",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/224",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/56769826"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/224#discussion_r56769826"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/224"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/56770064",
        "pull_request_review_id": null,
        "id": 56770064,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzcwMDY0",
        "diff_hunk": "@@ -526,21 +526,9 @@ def shuffle\n     # @return [Vector]\n     def uniq(&block)\n       array = self.to_a\n-      if block_given?\n-        if array.frozen?\n-          self.class.new(array.uniq(&block).freeze)\n-        elsif array.uniq!(&block) # returns nil if no changes were made\n-          self.class.new(array.freeze)\n-        else\n-          self\n-        end\n-      elsif array.frozen?\n-        self.class.new(array.uniq.freeze)\n-      elsif array.uniq! # returns nil if no changes were made\n-        self.class.new(array.freeze)\n-      else\n-        self\n-      end\n+      return self.class.new(array.uniq(&block).freeze) if array.frozen?\n+      return self.class.new(array.freeze) if array.uniq!(&block)",
        "path": "lib/hamster/vector.rb",
        "position": 20,
        "original_position": 20,
        "commit_id": "8ddf85553d172d6803a18af0b2d95779666f925a",
        "original_commit_id": "747122d0c4656fb8e10a27070144ac93a47fa419",
        "user": {
            "login": "alexdowad",
            "id": 1067359,
            "node_id": "MDQ6VXNlcjEwNjczNTk=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1067359?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alexdowad",
            "html_url": "https://github.com/alexdowad",
            "followers_url": "https://api.github.com/users/alexdowad/followers",
            "following_url": "https://api.github.com/users/alexdowad/following{/other_user}",
            "gists_url": "https://api.github.com/users/alexdowad/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/alexdowad/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alexdowad/subscriptions",
            "organizations_url": "https://api.github.com/users/alexdowad/orgs",
            "repos_url": "https://api.github.com/users/alexdowad/repos",
            "events_url": "https://api.github.com/users/alexdowad/events{/privacy}",
            "received_events_url": "https://api.github.com/users/alexdowad/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "`Vector.new(array)` is faster if `array` is frozen.\n",
        "created_at": "2016-03-20T19:17:53Z",
        "updated_at": "2016-06-14T12:19:59Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/224#discussion_r56770064",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/224",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/56770064"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/224#discussion_r56770064"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/224"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/56770098",
        "pull_request_review_id": null,
        "id": 56770098,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzcwMDk4",
        "diff_hunk": "@@ -526,21 +526,9 @@ def shuffle\n     # @return [Vector]\n     def uniq(&block)\n       array = self.to_a\n-      if block_given?\n-        if array.frozen?\n-          self.class.new(array.uniq(&block).freeze)\n-        elsif array.uniq!(&block) # returns nil if no changes were made\n-          self.class.new(array.freeze)\n-        else\n-          self\n-        end\n-      elsif array.frozen?\n-        self.class.new(array.uniq.freeze)\n-      elsif array.uniq! # returns nil if no changes were made\n-        self.class.new(array.freeze)\n-      else\n-        self\n-      end\n+      return self.class.new(array.uniq(&block).freeze) if array.frozen?\n+      return self.class.new(array.freeze) if array.uniq!(&block)",
        "path": "lib/hamster/vector.rb",
        "position": 20,
        "original_position": 20,
        "commit_id": "8ddf85553d172d6803a18af0b2d95779666f925a",
        "original_commit_id": "747122d0c4656fb8e10a27070144ac93a47fa419",
        "user": {
            "login": "stephencelis",
            "id": 658,
            "node_id": "MDQ6VXNlcjY1OA==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/658?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/stephencelis",
            "html_url": "https://github.com/stephencelis",
            "followers_url": "https://api.github.com/users/stephencelis/followers",
            "following_url": "https://api.github.com/users/stephencelis/following{/other_user}",
            "gists_url": "https://api.github.com/users/stephencelis/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/stephencelis/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/stephencelis/subscriptions",
            "organizations_url": "https://api.github.com/users/stephencelis/orgs",
            "repos_url": "https://api.github.com/users/stephencelis/repos",
            "events_url": "https://api.github.com/users/stephencelis/events{/privacy}",
            "received_events_url": "https://api.github.com/users/stephencelis/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ah, the `dup`, gotcha.\n",
        "created_at": "2016-03-20T19:19:49Z",
        "updated_at": "2016-06-14T12:19:59Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/224#discussion_r56770098",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/224",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/56770098"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/224#discussion_r56770098"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/224"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/56770117",
        "pull_request_review_id": null,
        "id": 56770117,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzcwMTE3",
        "diff_hunk": "@@ -526,21 +526,9 @@ def shuffle\n     # @return [Vector]\n     def uniq(&block)\n       array = self.to_a\n-      if block_given?\n-        if array.frozen?\n-          self.class.new(array.uniq(&block).freeze)\n-        elsif array.uniq!(&block) # returns nil if no changes were made\n-          self.class.new(array.freeze)\n-        else\n-          self\n-        end\n-      elsif array.frozen?\n-        self.class.new(array.uniq.freeze)\n-      elsif array.uniq! # returns nil if no changes were made\n-        self.class.new(array.freeze)\n-      else\n-        self\n-      end\n+      return self.class.new(array.uniq(&block).freeze) if array.frozen?\n+      return self.class.new(array.freeze) if array.uniq!(&block)",
        "path": "lib/hamster/vector.rb",
        "position": 20,
        "original_position": 20,
        "commit_id": "8ddf85553d172d6803a18af0b2d95779666f925a",
        "original_commit_id": "747122d0c4656fb8e10a27070144ac93a47fa419",
        "user": {
            "login": "alexdowad",
            "id": 1067359,
            "node_id": "MDQ6VXNlcjEwNjczNTk=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1067359?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alexdowad",
            "html_url": "https://github.com/alexdowad",
            "followers_url": "https://api.github.com/users/alexdowad/followers",
            "following_url": "https://api.github.com/users/alexdowad/following{/other_user}",
            "gists_url": "https://api.github.com/users/alexdowad/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/alexdowad/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alexdowad/subscriptions",
            "organizations_url": "https://api.github.com/users/alexdowad/orgs",
            "repos_url": "https://api.github.com/users/alexdowad/repos",
            "events_url": "https://api.github.com/users/alexdowad/events{/privacy}",
            "received_events_url": "https://api.github.com/users/alexdowad/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Another thing to note is that `Vector#to_a` sometimes returns a frozen array, sometimes not. If it's not frozen, `uniq!` can be used on it to avoid an extra array copy. `self.class.new(to_a.uniq(&block))` is indeed simple, but it always does an extra copy, even when that's not necessary.\n",
        "created_at": "2016-03-20T19:20:38Z",
        "updated_at": "2016-06-14T12:19:59Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/224#discussion_r56770117",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/224",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/56770117"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/224#discussion_r56770117"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/224"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/56770141",
        "pull_request_review_id": null,
        "id": 56770141,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzcwMTQx",
        "diff_hunk": "@@ -526,21 +526,9 @@ def shuffle\n     # @return [Vector]\n     def uniq(&block)\n       array = self.to_a\n-      if block_given?\n-        if array.frozen?\n-          self.class.new(array.uniq(&block).freeze)\n-        elsif array.uniq!(&block) # returns nil if no changes were made\n-          self.class.new(array.freeze)\n-        else\n-          self\n-        end\n-      elsif array.frozen?\n-        self.class.new(array.uniq.freeze)\n-      elsif array.uniq! # returns nil if no changes were made\n-        self.class.new(array.freeze)\n-      else\n-        self\n-      end\n+      return self.class.new(array.uniq(&block).freeze) if array.frozen?\n+      return self.class.new(array.freeze) if array.uniq!(&block)",
        "path": "lib/hamster/vector.rb",
        "position": 20,
        "original_position": 20,
        "commit_id": "8ddf85553d172d6803a18af0b2d95779666f925a",
        "original_commit_id": "747122d0c4656fb8e10a27070144ac93a47fa419",
        "user": {
            "login": "stephencelis",
            "id": 658,
            "node_id": "MDQ6VXNlcjY1OA==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/658?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/stephencelis",
            "html_url": "https://github.com/stephencelis",
            "followers_url": "https://api.github.com/users/stephencelis/followers",
            "following_url": "https://api.github.com/users/stephencelis/following{/other_user}",
            "gists_url": "https://api.github.com/users/stephencelis/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/stephencelis/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/stephencelis/subscriptions",
            "organizations_url": "https://api.github.com/users/stephencelis/orgs",
            "repos_url": "https://api.github.com/users/stephencelis/repos",
            "events_url": "https://api.github.com/users/stephencelis/events{/privacy}",
            "received_events_url": "https://api.github.com/users/stephencelis/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Not surprising. Wish Ruby arrays were COW.\n",
        "created_at": "2016-03-20T19:21:52Z",
        "updated_at": "2016-06-14T12:19:59Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/224#discussion_r56770141",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/224",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/56770141"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/224#discussion_r56770141"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/224"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/187443851",
        "pull_request_review_id": 119227544,
        "id": 187443851,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzQ0Mzg1MQ==",
        "diff_hunk": "@@ -1,5 +1,2 @@\n---colour",
        "path": ".rspec",
        "position": 1,
        "original_position": 1,
        "commit_id": "2380d58d66e50811c3c1d8657a7bc07c483d867e",
        "original_commit_id": "4572c68b2917a115cbd8e9526c015693cd73f5d4",
        "user": {
            "login": "alexdowad",
            "id": 1067359,
            "node_id": "MDQ6VXNlcjEwNjczNTk=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1067359?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alexdowad",
            "html_url": "https://github.com/alexdowad",
            "followers_url": "https://api.github.com/users/alexdowad/followers",
            "following_url": "https://api.github.com/users/alexdowad/following{/other_user}",
            "gists_url": "https://api.github.com/users/alexdowad/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/alexdowad/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alexdowad/subscriptions",
            "organizations_url": "https://api.github.com/users/alexdowad/orgs",
            "repos_url": "https://api.github.com/users/alexdowad/repos",
            "events_url": "https://api.github.com/users/alexdowad/events{/privacy}",
            "received_events_url": "https://api.github.com/users/alexdowad/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Why remove these lines?",
        "created_at": "2018-05-10T20:06:08Z",
        "updated_at": "2018-05-10T20:06:08Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/242#discussion_r187443851",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/242",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/187443851"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/242#discussion_r187443851"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/242"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/187444251",
        "pull_request_review_id": 119227984,
        "id": 187444251,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzQ0NDI1MQ==",
        "diff_hunk": "@@ -83,3 +83,88 @@ def eql?(other)\n     true\n   end\n end\n+",
        "path": "spec/spec_helper.rb",
        "position": 4,
        "original_position": 4,
        "commit_id": "2380d58d66e50811c3c1d8657a7bc07c483d867e",
        "original_commit_id": "4572c68b2917a115cbd8e9526c015693cd73f5d4",
        "user": {
            "login": "alexdowad",
            "id": 1067359,
            "node_id": "MDQ6VXNlcjEwNjczNTk=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1067359?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alexdowad",
            "html_url": "https://github.com/alexdowad",
            "followers_url": "https://api.github.com/users/alexdowad/followers",
            "following_url": "https://api.github.com/users/alexdowad/following{/other_user}",
            "gists_url": "https://api.github.com/users/alexdowad/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/alexdowad/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alexdowad/subscriptions",
            "organizations_url": "https://api.github.com/users/alexdowad/orgs",
            "repos_url": "https://api.github.com/users/alexdowad/repos",
            "events_url": "https://api.github.com/users/alexdowad/events{/privacy}",
            "received_events_url": "https://api.github.com/users/alexdowad/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Rather than just committing the default `spec_helper` generated by `rspec --init`, I wonder if it would be better to trim this down. At least remove the verbose comments.",
        "created_at": "2018-05-10T20:07:26Z",
        "updated_at": "2018-05-10T20:07:26Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/242#discussion_r187444251",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/242",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/187444251"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/242#discussion_r187444251"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/242"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/187444457",
        "pull_request_review_id": 119228237,
        "id": 187444457,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzQ0NDQ1Nw==",
        "diff_hunk": "@@ -83,3 +83,88 @@ def eql?(other)\n     true\n   end\n end\n+\n+# The next part of this file was bootstrapped using the `rspec --init` command.\n+#\n+# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration\n+RSpec.configure do |config|\n+  # rspec-expectations config goes here. You can use an alternate\n+  # assertion/expectation library such as wrong or the stdlib/minitest\n+  # assertions if you prefer.\n+  config.expect_with :rspec do |expectations|\n+    # This option will default to `true` in RSpec 4. It makes the `description`\n+    # and `failure_message` of custom matchers include text for helper methods\n+    # defined using `chain`, e.g.:\n+    #     be_bigger_than(2).and_smaller_than(4).description\n+    #     # => \"be bigger than 2 and smaller than 4\"\n+    # ...rather than:\n+    #     # => \"be bigger than 2\"\n+    expectations.include_chain_clauses_in_custom_matcher_descriptions = true\n+  end\n+\n+  # rspec-mocks config goes here. You can use an alternate test double\n+  # library (such as bogus or mocha) by changing the `mock_with` option here.\n+  config.mock_with :rspec do |mocks|\n+    # Prevents you from mocking or stubbing a method that does not exist on\n+    # a real object. This is generally recommended, and will default to\n+    # `true` in RSpec 4.\n+    mocks.verify_partial_doubles = true\n+  end\n+\n+  # This option will default to `:apply_to_host_groups` in RSpec 4 (and will\n+  # have no way to turn it off -- the option exists only for backwards\n+  # compatibility in RSpec 3). It causes shared context metadata to be\n+  # inherited by the metadata hash of host groups and examples, rather than\n+  # triggering implicit auto-inclusion in groups with matching metadata.\n+  config.shared_context_metadata_behavior = :apply_to_host_groups\n+\n+  # This allows you to limit a spec run to individual examples or groups\n+  # you care about by tagging them with `:focus` metadata. When nothing\n+  # is tagged with `:focus`, all examples get run. RSpec also provides\n+  # aliases for `it`, `describe`, and `context` that include `:focus`\n+  # metadata: `fit`, `fdescribe` and `fcontext`, respectively.\n+  config.filter_run_when_matching :focus\n+\n+  # Allows RSpec to persist some state between runs in order to support\n+  # the `--only-failures` and `--next-failure` CLI options. We recommend\n+  # you configure your source control system to ignore this file.\n+  config.example_status_persistence_file_path = \"spec/examples.txt\"\n+\n+  # Limits the available syntax to the non-monkey patched syntax that is\n+  # recommended. For more details, see:\n+  #   - http://rspec.info/blog/2012/06/rspecs-new-expectation-syntax/\n+  #   - http://www.teaisaweso.me/blog/2013/05/27/rspecs-new-message-expectation-syntax/\n+  #   - http://rspec.info/blog/2014/05/notable-changes-in-rspec-3/#zero-monkey-patching-mode\n+  #config.disable_monkey_patching!\n+\n+  # This setting enables warnings. It's recommended, but in some cases may\n+  # be too noisy due to issues in dependencies.\n+  #config.warnings = true\n+\n+  # Many RSpec users commonly either run the entire suite or an individual\n+  # file, and it's useful to allow more verbose output when running an\n+  # individual spec file.\n+  if config.files_to_run.one?",
        "path": "spec/spec_helper.rb",
        "position": 65,
        "original_position": 65,
        "commit_id": "2380d58d66e50811c3c1d8657a7bc07c483d867e",
        "original_commit_id": "4572c68b2917a115cbd8e9526c015693cd73f5d4",
        "user": {
            "login": "alexdowad",
            "id": 1067359,
            "node_id": "MDQ6VXNlcjEwNjczNTk=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1067359?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alexdowad",
            "html_url": "https://github.com/alexdowad",
            "followers_url": "https://api.github.com/users/alexdowad/followers",
            "following_url": "https://api.github.com/users/alexdowad/following{/other_user}",
            "gists_url": "https://api.github.com/users/alexdowad/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/alexdowad/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alexdowad/subscriptions",
            "organizations_url": "https://api.github.com/users/alexdowad/orgs",
            "repos_url": "https://api.github.com/users/alexdowad/repos",
            "events_url": "https://api.github.com/users/alexdowad/events{/privacy}",
            "received_events_url": "https://api.github.com/users/alexdowad/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'm leery about the benefits of changing the output format if only running specs from a single file.",
        "created_at": "2018-05-10T20:08:12Z",
        "updated_at": "2018-05-10T20:08:13Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/242#discussion_r187444457",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/242",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/187444457"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/242#discussion_r187444457"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/242"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/187445293",
        "pull_request_review_id": 119229224,
        "id": 187445293,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzQ0NTI5Mw==",
        "diff_hunk": "@@ -1,7 +1,7 @@\n require \"hamster/hash\"\n require \"hamster/vector\"\n \n-describe Hamster::Associable do",
        "path": "spec/lib/hamster/associable/associable_spec.rb",
        "position": 5,
        "original_position": 4,
        "commit_id": "2380d58d66e50811c3c1d8657a7bc07c483d867e",
        "original_commit_id": "8a9c41d5f63f7154e6bafcd9330b68d0683f63b5",
        "user": {
            "login": "alexdowad",
            "id": 1067359,
            "node_id": "MDQ6VXNlcjEwNjczNTk=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1067359?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alexdowad",
            "html_url": "https://github.com/alexdowad",
            "followers_url": "https://api.github.com/users/alexdowad/followers",
            "following_url": "https://api.github.com/users/alexdowad/following{/other_user}",
            "gists_url": "https://api.github.com/users/alexdowad/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/alexdowad/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alexdowad/subscriptions",
            "organizations_url": "https://api.github.com/users/alexdowad/orgs",
            "repos_url": "https://api.github.com/users/alexdowad/repos",
            "events_url": "https://api.github.com/users/alexdowad/events{/privacy}",
            "received_events_url": "https://api.github.com/users/alexdowad/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "What is the benefit of using the `Rspec.describe` syntax rather than `describe`?",
        "created_at": "2018-05-10T20:11:14Z",
        "updated_at": "2018-05-10T20:11:14Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/242#discussion_r187445293",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/242",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/187445293"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/242#discussion_r187445293"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/242"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/187447526",
        "pull_request_review_id": 119231932,
        "id": 187447526,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzQ0NzUyNg==",
        "diff_hunk": "@@ -1,7 +1,7 @@\n require \"hamster/hash\"\n require \"hamster/vector\"\n \n-describe Hamster::Associable do",
        "path": "spec/lib/hamster/associable/associable_spec.rb",
        "position": 5,
        "original_position": 4,
        "commit_id": "2380d58d66e50811c3c1d8657a7bc07c483d867e",
        "original_commit_id": "8a9c41d5f63f7154e6bafcd9330b68d0683f63b5",
        "user": {
            "login": "xaviershay",
            "id": 1714,
            "node_id": "MDQ6VXNlcjE3MTQ=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1714?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xaviershay",
            "html_url": "https://github.com/xaviershay",
            "followers_url": "https://api.github.com/users/xaviershay/followers",
            "following_url": "https://api.github.com/users/xaviershay/following{/other_user}",
            "gists_url": "https://api.github.com/users/xaviershay/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xaviershay/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xaviershay/subscriptions",
            "organizations_url": "https://api.github.com/users/xaviershay/orgs",
            "repos_url": "https://api.github.com/users/xaviershay/repos",
            "events_url": "https://api.github.com/users/xaviershay/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xaviershay/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "they're semantically equivalent, but `Rspec.describe` is \"nicer\" because it doesn't require monkey patching the global namespace. It's now the Rspec recommended way to do this.",
        "created_at": "2018-05-10T20:19:31Z",
        "updated_at": "2018-05-10T20:19:31Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/242#discussion_r187447526",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/242",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/187447526"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/242#discussion_r187447526"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/242"
            }
        },
        "in_reply_to_id": 187445293
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/187453236",
        "pull_request_review_id": 119238928,
        "id": 187453236,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzQ1MzIzNg==",
        "diff_hunk": "@@ -1,7 +1,7 @@\n require \"hamster/hash\"\n require \"hamster/vector\"\n \n-describe Hamster::Associable do",
        "path": "spec/lib/hamster/associable/associable_spec.rb",
        "position": 5,
        "original_position": 4,
        "commit_id": "2380d58d66e50811c3c1d8657a7bc07c483d867e",
        "original_commit_id": "8a9c41d5f63f7154e6bafcd9330b68d0683f63b5",
        "user": {
            "login": "alexdowad",
            "id": 1067359,
            "node_id": "MDQ6VXNlcjEwNjczNTk=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1067359?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alexdowad",
            "html_url": "https://github.com/alexdowad",
            "followers_url": "https://api.github.com/users/alexdowad/followers",
            "following_url": "https://api.github.com/users/alexdowad/following{/other_user}",
            "gists_url": "https://api.github.com/users/alexdowad/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/alexdowad/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alexdowad/subscriptions",
            "organizations_url": "https://api.github.com/users/alexdowad/orgs",
            "repos_url": "https://api.github.com/users/alexdowad/repos",
            "events_url": "https://api.github.com/users/alexdowad/events{/privacy}",
            "received_events_url": "https://api.github.com/users/alexdowad/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'm wondering what the problem with defining methods on `main` and its ancestors (i.e. the \"global namespace\") is. Of course, you could have a naming clash if another library defined a method called `describe`, but I've never seen another one which does.\r\n\r\nRSpec's DSL is the best part about it. This change makes the DSL uglier and more verbose. However, it is good that there is the *option* of namespacing, for projects which really do have a different method called `describe` in the \"global namespace\".",
        "created_at": "2018-05-10T20:39:55Z",
        "updated_at": "2018-05-10T20:39:55Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/242#discussion_r187453236",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/242",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/187453236"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/242#discussion_r187453236"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/242"
            }
        },
        "in_reply_to_id": 187445293
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/187469283",
        "pull_request_review_id": 119258985,
        "id": 187469283,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzQ2OTI4Mw==",
        "diff_hunk": "@@ -1,5 +1,2 @@\n---colour",
        "path": ".rspec",
        "position": 1,
        "original_position": 1,
        "commit_id": "2380d58d66e50811c3c1d8657a7bc07c483d867e",
        "original_commit_id": "4572c68b2917a115cbd8e9526c015693cd73f5d4",
        "user": {
            "login": "ivoanjo",
            "id": 2785847,
            "node_id": "MDQ6VXNlcjI3ODU4NDc=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/2785847?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ivoanjo",
            "html_url": "https://github.com/ivoanjo",
            "followers_url": "https://api.github.com/users/ivoanjo/followers",
            "following_url": "https://api.github.com/users/ivoanjo/following{/other_user}",
            "gists_url": "https://api.github.com/users/ivoanjo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ivoanjo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ivoanjo/subscriptions",
            "organizations_url": "https://api.github.com/users/ivoanjo/orgs",
            "repos_url": "https://api.github.com/users/ivoanjo/repos",
            "events_url": "https://api.github.com/users/ivoanjo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ivoanjo/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "* `--colour` is now on by default ([link](https://github.com/rspec/rspec-core/blob/master/Changelog.md#360beta1--2016-10-09))\r\n* `--format` and `--profile` are now set in the `spec_helper`",
        "created_at": "2018-05-10T21:45:23Z",
        "updated_at": "2018-05-10T21:46:12Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/242#discussion_r187469283",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/242",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/187469283"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/242#discussion_r187469283"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/242"
            }
        },
        "in_reply_to_id": 187443851
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/187490994",
        "pull_request_review_id": 119284496,
        "id": 187490994,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzQ5MDk5NA==",
        "diff_hunk": "@@ -1,7 +1,7 @@\n require \"hamster/hash\"\n require \"hamster/vector\"\n \n-describe Hamster::Associable do",
        "path": "spec/lib/hamster/associable/associable_spec.rb",
        "position": 5,
        "original_position": 4,
        "commit_id": "2380d58d66e50811c3c1d8657a7bc07c483d867e",
        "original_commit_id": "8a9c41d5f63f7154e6bafcd9330b68d0683f63b5",
        "user": {
            "login": "xaviershay",
            "id": 1714,
            "node_id": "MDQ6VXNlcjE3MTQ=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1714?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xaviershay",
            "html_url": "https://github.com/xaviershay",
            "followers_url": "https://api.github.com/users/xaviershay/followers",
            "following_url": "https://api.github.com/users/xaviershay/following{/other_user}",
            "gists_url": "https://api.github.com/users/xaviershay/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xaviershay/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xaviershay/subscriptions",
            "organizations_url": "https://api.github.com/users/xaviershay/orgs",
            "repos_url": "https://api.github.com/users/xaviershay/repos",
            "events_url": "https://api.github.com/users/xaviershay/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xaviershay/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Mostly a principle thing, though in practice we've also found it seems less \"magical\" to people. Doesn't particularly matter here.",
        "created_at": "2018-05-10T23:55:45Z",
        "updated_at": "2018-05-10T23:55:45Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/242#discussion_r187490994",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/242",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/187490994"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/242#discussion_r187490994"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/242"
            }
        },
        "in_reply_to_id": 187445293
    },
    {
        "url": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/187523552",
        "pull_request_review_id": 119321755,
        "id": 187523552,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzUyMzU1Mg==",
        "diff_hunk": "@@ -1,5 +1,2 @@\n---colour",
        "path": ".rspec",
        "position": 1,
        "original_position": 1,
        "commit_id": "2380d58d66e50811c3c1d8657a7bc07c483d867e",
        "original_commit_id": "4572c68b2917a115cbd8e9526c015693cd73f5d4",
        "user": {
            "login": "alexdowad",
            "id": 1067359,
            "node_id": "MDQ6VXNlcjEwNjczNTk=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1067359?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alexdowad",
            "html_url": "https://github.com/alexdowad",
            "followers_url": "https://api.github.com/users/alexdowad/followers",
            "following_url": "https://api.github.com/users/alexdowad/following{/other_user}",
            "gists_url": "https://api.github.com/users/alexdowad/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/alexdowad/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alexdowad/subscriptions",
            "organizations_url": "https://api.github.com/users/alexdowad/orgs",
            "repos_url": "https://api.github.com/users/alexdowad/repos",
            "events_url": "https://api.github.com/users/alexdowad/events{/privacy}",
            "received_events_url": "https://api.github.com/users/alexdowad/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "OK, makes sense.",
        "created_at": "2018-05-11T05:33:26Z",
        "updated_at": "2018-05-11T05:33:26Z",
        "html_url": "https://github.com/hamstergem/hamster/pull/242#discussion_r187523552",
        "pull_request_url": "https://api.github.com/repos/hamstergem/hamster/pulls/242",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/comments/187523552"
            },
            "html": {
                "href": "https://github.com/hamstergem/hamster/pull/242#discussion_r187523552"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/hamstergem/hamster/pulls/242"
            }
        },
        "in_reply_to_id": 187443851
    }
]