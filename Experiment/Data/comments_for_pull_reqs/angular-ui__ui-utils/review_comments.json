[
    {
        "url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/3848559",
        "pull_request_review_id": null,
        "id": 3848559,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg1NTk=",
        "diff_hunk": "@@ -46,7 +46,8 @@ factory('keypressHelper', ['$parse', function keypress($parse){\n     // Check only matching of pressed keys one of the conditions\n     elm.bind(mode, function (event) {\n       // No need to do that inside the cycle\n-      var altPressed = !!(event.metaKey || event.altKey);\n+      var metaPressed = !!(event.metaKey && !event.ctrlKey);",
        "path": "modules/keypress/keypress.js",
        "position": 5,
        "original_position": 5,
        "commit_id": "f5b5d7d32ab168f0ae83123ce469cd2531c0ea8b",
        "original_commit_id": "f5b5d7d32ab168f0ae83123ce469cd2531c0ea8b",
        "user": {
            "login": "ProLoser",
            "id": 67395,
            "node_id": "MDQ6VXNlcjY3Mzk1",
            "avatar_url": "https://avatars0.githubusercontent.com/u/67395?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ProLoser",
            "html_url": "https://github.com/ProLoser",
            "followers_url": "https://api.github.com/users/ProLoser/followers",
            "following_url": "https://api.github.com/users/ProLoser/following{/other_user}",
            "gists_url": "https://api.github.com/users/ProLoser/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ProLoser/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ProLoser/subscriptions",
            "organizations_url": "https://api.github.com/users/ProLoser/orgs",
            "repos_url": "https://api.github.com/users/ProLoser/repos",
            "events_url": "https://api.github.com/users/ProLoser/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ProLoser/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This is redundant to `ctrlPressed`. I realize that `ctrl` and `cmd` or `meta` are commonly used interchangeably on windows and mac, however there is still a separate `ctrl` key available on the mac.\n\nYou may need to clarify / split these events for this to be accepted.\n",
        "created_at": "2013-04-18T07:58:26Z",
        "updated_at": "2013-04-18T07:58:26Z",
        "html_url": "https://github.com/angular-ui/ui-utils/pull/9#discussion_r3848559",
        "pull_request_url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/9",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/3848559"
            },
            "html": {
                "href": "https://github.com/angular-ui/ui-utils/pull/9#discussion_r3848559"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/9"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/3858326",
        "pull_request_review_id": null,
        "id": 3858326,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgzMjY=",
        "diff_hunk": "@@ -46,7 +46,8 @@ factory('keypressHelper', ['$parse', function keypress($parse){\n     // Check only matching of pressed keys one of the conditions\n     elm.bind(mode, function (event) {\n       // No need to do that inside the cycle\n-      var altPressed = !!(event.metaKey || event.altKey);\n+      var metaPressed = !!(event.metaKey && !event.ctrlKey);",
        "path": "modules/keypress/keypress.js",
        "position": 5,
        "original_position": 5,
        "commit_id": "f5b5d7d32ab168f0ae83123ce469cd2531c0ea8b",
        "original_commit_id": "f5b5d7d32ab168f0ae83123ce469cd2531c0ea8b",
        "user": {
            "login": "arnaudbreton",
            "id": 1361191,
            "node_id": "MDQ6VXNlcjEzNjExOTE=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1361191?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/arnaudbreton",
            "html_url": "https://github.com/arnaudbreton",
            "followers_url": "https://api.github.com/users/arnaudbreton/followers",
            "following_url": "https://api.github.com/users/arnaudbreton/following{/other_user}",
            "gists_url": "https://api.github.com/users/arnaudbreton/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/arnaudbreton/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/arnaudbreton/subscriptions",
            "organizations_url": "https://api.github.com/users/arnaudbreton/orgs",
            "repos_url": "https://api.github.com/users/arnaudbreton/repos",
            "events_url": "https://api.github.com/users/arnaudbreton/events{/privacy}",
            "received_events_url": "https://api.github.com/users/arnaudbreton/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'm not agree about the fact that ctrl / \u2318 are interchangeable.\nCtrl (\u2303 on OS X) serves a different purpose (it's a modifier, not an action key in the contrary of Windows). \n\nThe equivalent of Windows' CTRL is OS X's \u2318 so it makes sense to split and handle them.\n",
        "created_at": "2013-04-18T17:01:04Z",
        "updated_at": "2013-04-18T17:01:04Z",
        "html_url": "https://github.com/angular-ui/ui-utils/pull/9#discussion_r3858326",
        "pull_request_url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/9",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/3858326"
            },
            "html": {
                "href": "https://github.com/angular-ui/ui-utils/pull/9#discussion_r3858326"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/9"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/4069961",
        "pull_request_review_id": null,
        "id": 4069961,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5NjE=",
        "diff_hunk": "@@ -1,2 +1,3 @@\n node_modules\n-components\n\\ No newline at end of file\n+components\n+.idea",
        "path": ".gitignore",
        "position": null,
        "original_position": 5,
        "commit_id": "6f307fed46b54b68a97ca2ec239f379f6773a82b",
        "original_commit_id": "54e65ff6f16f99bcb8332117b972f007798644ac",
        "user": {
            "login": "ProLoser",
            "id": 67395,
            "node_id": "MDQ6VXNlcjY3Mzk1",
            "avatar_url": "https://avatars0.githubusercontent.com/u/67395?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ProLoser",
            "html_url": "https://github.com/ProLoser",
            "followers_url": "https://api.github.com/users/ProLoser/followers",
            "following_url": "https://api.github.com/users/ProLoser/following{/other_user}",
            "gists_url": "https://api.github.com/users/ProLoser/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ProLoser/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ProLoser/subscriptions",
            "organizations_url": "https://api.github.com/users/ProLoser/orgs",
            "repos_url": "https://api.github.com/users/ProLoser/repos",
            "events_url": "https://api.github.com/users/ProLoser/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ProLoser/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I personally believe IDE-related ignores should be done in a developer's [global .gitignore](https://help.github.com/articles/ignoring-files#global-gitignore) and not in the project itself.\n",
        "created_at": "2013-05-03T07:50:31Z",
        "updated_at": "2013-05-03T08:34:02Z",
        "html_url": "https://github.com/angular-ui/ui-utils/pull/12#discussion_r4069961",
        "pull_request_url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/12",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/4069961"
            },
            "html": {
                "href": "https://github.com/angular-ui/ui-utils/pull/12#discussion_r4069961"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/12"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/4070133",
        "pull_request_review_id": null,
        "id": 4070133,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAxMzM=",
        "diff_hunk": "@@ -0,0 +1,62 @@\n+// Karma configuration\n+// Generated on Thu May 02 2013 23:29:14 GMT+0200 (CEST)\n+\n+\n+// base path, that will be used to resolve files and exclude\n+basePath = '..';\n+\n+\n+// list of files / patterns to load in the browser\n+files = [\n+  JASMINE,\n+  JASMINE_ADAPTER,\n+  'components/jquery/jquery.js',\n+  'components/angular/angular.js',\n+  'components/angular-mocks/angular-mocks.js',\n+  'modules/*/*.js',\n+  'modules/*/test/*Spec.js'\n+];\n+\n+\n+// list of files to exclude\n+exclude = [\n+  \n+];\n+\n+\n+// test results reporter to use\n+// possible values: 'dots', 'progress', 'junit'\n+reporters = ['dots'];\n+\n+\n+// enable / disable colors in the output (reporters and logs)\n+colors = true;\n+\n+\n+// level of logging\n+// possible values: LOG_DISABLE || LOG_ERROR || LOG_WARN || LOG_INFO || LOG_DEBUG\n+logLevel = LOG_INFO;\n+\n+\n+// enable / disable watching file and executing tests whenever any file changes\n+autoWatch = false;\n+\n+\n+// Start these browsers, currently available:\n+// - Chrome\n+// - ChromeCanary\n+// - Firefox\n+// - Opera\n+// - Safari (only Mac)\n+// - PhantomJS\n+// - IE (only Windows)\n+browsers = ['Firefox'];",
        "path": "test/karma.conf.js",
        "position": 53,
        "original_position": 53,
        "commit_id": "6f307fed46b54b68a97ca2ec239f379f6773a82b",
        "original_commit_id": "54e65ff6f16f99bcb8332117b972f007798644ac",
        "user": {
            "login": "ProLoser",
            "id": 67395,
            "node_id": "MDQ6VXNlcjY3Mzk1",
            "avatar_url": "https://avatars0.githubusercontent.com/u/67395?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ProLoser",
            "html_url": "https://github.com/ProLoser",
            "followers_url": "https://api.github.com/users/ProLoser/followers",
            "following_url": "https://api.github.com/users/ProLoser/following{/other_user}",
            "gists_url": "https://api.github.com/users/ProLoser/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ProLoser/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ProLoser/subscriptions",
            "organizations_url": "https://api.github.com/users/ProLoser/orgs",
            "repos_url": "https://api.github.com/users/ProLoser/repos",
            "events_url": "https://api.github.com/users/ProLoser/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ProLoser/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "If this is the default configuration for Travis, can you add PhantomJS? I figure might as well get as much coverage as possible since it's free :smile:\n\nI also think `singleRun` needs to be `true` for Travis.\n\nI also don't know why you need captureTimeout since we are not supposed to wait for anything to 'render'\n",
        "created_at": "2013-05-03T08:08:13Z",
        "updated_at": "2013-05-03T08:34:02Z",
        "html_url": "https://github.com/angular-ui/ui-utils/pull/12#discussion_r4070133",
        "pull_request_url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/12",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/4070133"
            },
            "html": {
                "href": "https://github.com/angular-ui/ui-utils/pull/12#discussion_r4070133"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/12"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/4070476",
        "pull_request_review_id": null,
        "id": 4070476,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NzY=",
        "diff_hunk": "@@ -1,2 +1,3 @@\n node_modules\n-components\n\\ No newline at end of file\n+components\n+.idea",
        "path": ".gitignore",
        "position": null,
        "original_position": 5,
        "commit_id": "6f307fed46b54b68a97ca2ec239f379f6773a82b",
        "original_commit_id": "54e65ff6f16f99bcb8332117b972f007798644ac",
        "user": {
            "login": "douglasduteil",
            "id": 730511,
            "node_id": "MDQ6VXNlcjczMDUxMQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/730511?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/douglasduteil",
            "html_url": "https://github.com/douglasduteil",
            "followers_url": "https://api.github.com/users/douglasduteil/followers",
            "following_url": "https://api.github.com/users/douglasduteil/following{/other_user}",
            "gists_url": "https://api.github.com/users/douglasduteil/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/douglasduteil/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/douglasduteil/subscriptions",
            "organizations_url": "https://api.github.com/users/douglasduteil/orgs",
            "repos_url": "https://api.github.com/users/douglasduteil/repos",
            "events_url": "https://api.github.com/users/douglasduteil/events{/privacy}",
            "received_events_url": "https://api.github.com/users/douglasduteil/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yes. Right.\nI will remove it in the repo [here](https://github.com/angular-ui/ui-ace/blob/v0.0.3/.gitignore) and [there](https://github.com/angular-ui/ui-codemirror/blob/v0.0.2/.gitignore)...\n",
        "created_at": "2013-05-03T08:38:08Z",
        "updated_at": "2013-05-03T08:38:08Z",
        "html_url": "https://github.com/angular-ui/ui-utils/pull/12#discussion_r4070476",
        "pull_request_url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/12",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/4070476"
            },
            "html": {
                "href": "https://github.com/angular-ui/ui-utils/pull/12#discussion_r4070476"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/12"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/4070735",
        "pull_request_review_id": null,
        "id": 4070735,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA3MzU=",
        "diff_hunk": "@@ -0,0 +1,62 @@\n+// Karma configuration\n+// Generated on Thu May 02 2013 23:29:14 GMT+0200 (CEST)\n+\n+\n+// base path, that will be used to resolve files and exclude\n+basePath = '..';\n+\n+\n+// list of files / patterns to load in the browser\n+files = [\n+  JASMINE,\n+  JASMINE_ADAPTER,\n+  'components/jquery/jquery.js',\n+  'components/angular/angular.js',\n+  'components/angular-mocks/angular-mocks.js',\n+  'modules/*/*.js',\n+  'modules/*/test/*Spec.js'\n+];\n+\n+\n+// list of files to exclude\n+exclude = [\n+  \n+];\n+\n+\n+// test results reporter to use\n+// possible values: 'dots', 'progress', 'junit'\n+reporters = ['dots'];\n+\n+\n+// enable / disable colors in the output (reporters and logs)\n+colors = true;\n+\n+\n+// level of logging\n+// possible values: LOG_DISABLE || LOG_ERROR || LOG_WARN || LOG_INFO || LOG_DEBUG\n+logLevel = LOG_INFO;\n+\n+\n+// enable / disable watching file and executing tests whenever any file changes\n+autoWatch = false;\n+\n+\n+// Start these browsers, currently available:\n+// - Chrome\n+// - ChromeCanary\n+// - Firefox\n+// - Opera\n+// - Safari (only Mac)\n+// - PhantomJS\n+// - IE (only Windows)\n+browsers = ['Firefox'];",
        "path": "test/karma.conf.js",
        "position": 53,
        "original_position": 53,
        "commit_id": "6f307fed46b54b68a97ca2ec239f379f6773a82b",
        "original_commit_id": "54e65ff6f16f99bcb8332117b972f007798644ac",
        "user": {
            "login": "douglasduteil",
            "id": 730511,
            "node_id": "MDQ6VXNlcjczMDUxMQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/730511?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/douglasduteil",
            "html_url": "https://github.com/douglasduteil",
            "followers_url": "https://api.github.com/users/douglasduteil/followers",
            "following_url": "https://api.github.com/users/douglasduteil/following{/other_user}",
            "gists_url": "https://api.github.com/users/douglasduteil/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/douglasduteil/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/douglasduteil/subscriptions",
            "organizations_url": "https://api.github.com/users/douglasduteil/orgs",
            "repos_url": "https://api.github.com/users/douglasduteil/repos",
            "events_url": "https://api.github.com/users/douglasduteil/events{/privacy}",
            "received_events_url": "https://api.github.com/users/douglasduteil/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Agreed :)\nIt's just that to debug I personally directly use that config file with karma\n\n``` sh\nkarma start ./test/karma.conf.js\n```\n\nthen whenever I need I run it `karma run`\n\nStill [the grunt config overrwrite some config ](https://github.com/douglasduteil/ui-utils/blob/Tons_of_Damage/gruntFile.js#L20) so let's add PhantomJS there.\nThere is a repetition on the two files that set `reporters = ['dots'];`\n",
        "created_at": "2013-05-03T08:58:04Z",
        "updated_at": "2013-05-03T08:58:04Z",
        "html_url": "https://github.com/angular-ui/ui-utils/pull/12#discussion_r4070735",
        "pull_request_url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/12",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/4070735"
            },
            "html": {
                "href": "https://github.com/angular-ui/ui-utils/pull/12#discussion_r4070735"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/12"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/4070773",
        "pull_request_review_id": null,
        "id": 4070773,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA3NzM=",
        "diff_hunk": "@@ -0,0 +1,62 @@\n+// Karma configuration\n+// Generated on Thu May 02 2013 23:29:14 GMT+0200 (CEST)\n+\n+\n+// base path, that will be used to resolve files and exclude\n+basePath = '..';\n+\n+\n+// list of files / patterns to load in the browser\n+files = [\n+  JASMINE,\n+  JASMINE_ADAPTER,\n+  'components/jquery/jquery.js',\n+  'components/angular/angular.js',\n+  'components/angular-mocks/angular-mocks.js',\n+  'modules/*/*.js',\n+  'modules/*/test/*Spec.js'\n+];\n+\n+\n+// list of files to exclude\n+exclude = [\n+  \n+];\n+\n+\n+// test results reporter to use\n+// possible values: 'dots', 'progress', 'junit'\n+reporters = ['dots'];\n+\n+\n+// enable / disable colors in the output (reporters and logs)\n+colors = true;\n+\n+\n+// level of logging\n+// possible values: LOG_DISABLE || LOG_ERROR || LOG_WARN || LOG_INFO || LOG_DEBUG\n+logLevel = LOG_INFO;\n+\n+\n+// enable / disable watching file and executing tests whenever any file changes\n+autoWatch = false;\n+\n+\n+// Start these browsers, currently available:\n+// - Chrome\n+// - ChromeCanary\n+// - Firefox\n+// - Opera\n+// - Safari (only Mac)\n+// - PhantomJS\n+// - IE (only Windows)\n+browsers = ['Firefox'];",
        "path": "test/karma.conf.js",
        "position": 53,
        "original_position": 53,
        "commit_id": "6f307fed46b54b68a97ca2ec239f379f6773a82b",
        "original_commit_id": "54e65ff6f16f99bcb8332117b972f007798644ac",
        "user": {
            "login": "ProLoser",
            "id": 67395,
            "node_id": "MDQ6VXNlcjY3Mzk1",
            "avatar_url": "https://avatars0.githubusercontent.com/u/67395?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ProLoser",
            "html_url": "https://github.com/ProLoser",
            "followers_url": "https://api.github.com/users/ProLoser/followers",
            "following_url": "https://api.github.com/users/ProLoser/following{/other_user}",
            "gists_url": "https://api.github.com/users/ProLoser/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ProLoser/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ProLoser/subscriptions",
            "organizations_url": "https://api.github.com/users/ProLoser/orgs",
            "repos_url": "https://api.github.com/users/ProLoser/repos",
            "events_url": "https://api.github.com/users/ProLoser/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ProLoser/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Personally, what I _started_ doing with the refactor was only put global assumptions into the file. In other words, I had no browsers specified by default and expected you to pass them locally (or during travis).\n\nI'm not even sure which of the two cases we should hard-code into the file. It makes sense to put the most common browser into the file that you test with locally (chrome?), or maybe it's best to do the travis browsers since those are fixed and you're just going to override our assumptions locally anyway?\n",
        "created_at": "2013-05-03T09:01:38Z",
        "updated_at": "2013-05-03T09:01:38Z",
        "html_url": "https://github.com/angular-ui/ui-utils/pull/12#discussion_r4070773",
        "pull_request_url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/12",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/4070773"
            },
            "html": {
                "href": "https://github.com/angular-ui/ui-utils/pull/12#discussion_r4070773"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/12"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/4070856",
        "pull_request_review_id": null,
        "id": 4070856,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4NTY=",
        "diff_hunk": "@@ -0,0 +1,62 @@\n+// Karma configuration\n+// Generated on Thu May 02 2013 23:29:14 GMT+0200 (CEST)\n+\n+\n+// base path, that will be used to resolve files and exclude\n+basePath = '..';\n+\n+\n+// list of files / patterns to load in the browser\n+files = [\n+  JASMINE,\n+  JASMINE_ADAPTER,\n+  'components/jquery/jquery.js',\n+  'components/angular/angular.js',\n+  'components/angular-mocks/angular-mocks.js',\n+  'modules/*/*.js',\n+  'modules/*/test/*Spec.js'\n+];\n+\n+\n+// list of files to exclude\n+exclude = [\n+  \n+];\n+\n+\n+// test results reporter to use\n+// possible values: 'dots', 'progress', 'junit'\n+reporters = ['dots'];\n+\n+\n+// enable / disable colors in the output (reporters and logs)\n+colors = true;\n+\n+\n+// level of logging\n+// possible values: LOG_DISABLE || LOG_ERROR || LOG_WARN || LOG_INFO || LOG_DEBUG\n+logLevel = LOG_INFO;\n+\n+\n+// enable / disable watching file and executing tests whenever any file changes\n+autoWatch = false;\n+\n+\n+// Start these browsers, currently available:\n+// - Chrome\n+// - ChromeCanary\n+// - Firefox\n+// - Opera\n+// - Safari (only Mac)\n+// - PhantomJS\n+// - IE (only Windows)\n+browsers = ['Firefox'];",
        "path": "test/karma.conf.js",
        "position": 53,
        "original_position": 53,
        "commit_id": "6f307fed46b54b68a97ca2ec239f379f6773a82b",
        "original_commit_id": "54e65ff6f16f99bcb8332117b972f007798644ac",
        "user": {
            "login": "douglasduteil",
            "id": 730511,
            "node_id": "MDQ6VXNlcjczMDUxMQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/730511?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/douglasduteil",
            "html_url": "https://github.com/douglasduteil",
            "followers_url": "https://api.github.com/users/douglasduteil/followers",
            "following_url": "https://api.github.com/users/douglasduteil/following{/other_user}",
            "gists_url": "https://api.github.com/users/douglasduteil/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/douglasduteil/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/douglasduteil/subscriptions",
            "organizations_url": "https://api.github.com/users/douglasduteil/orgs",
            "repos_url": "https://api.github.com/users/douglasduteil/repos",
            "events_url": "https://api.github.com/users/douglasduteil/events{/privacy}",
            "received_events_url": "https://api.github.com/users/douglasduteil/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Agreed.\nSo like Travis is safe we put here Firefox, Chrome and PhantomJS ?\n",
        "created_at": "2013-05-03T09:10:19Z",
        "updated_at": "2013-05-03T09:10:19Z",
        "html_url": "https://github.com/angular-ui/ui-utils/pull/12#discussion_r4070856",
        "pull_request_url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/12",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/4070856"
            },
            "html": {
                "href": "https://github.com/angular-ui/ui-utils/pull/12#discussion_r4070856"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/12"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/3848612",
        "pull_request_review_id": null,
        "id": 3848612,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg2MTI=",
        "diff_hunk": "@@ -1,21 +1,65 @@\n angular.module('ui.keypress',[]).\n factory('keypressHelper', ['$parse', function keypress($parse){\n+   // keymaps from http://unixpapa.com/js/key.html\n+  var keyupdownmap = {\n+      8: 'backspace',\n+      9: 'tab',\n+      13: 'enter',\n+      27: 'esc',\n+      32: 'space',\n+      33: 'pageup',\n+      34: 'pagedown',\n+      35: 'end',\n+      36: 'home',\n+      37: 'left',\n+      38: 'up',\n+      39: 'right',\n+      40: 'down',\n+      44: ',',\n+      45: 'insert',\n+      46: 'delete',\n+      91: 'leftwindows',\n+      92: 'rightwindows',\n+      93: 'windowsmenu',\n+      96: '0',\n+      97: '1',\n+      98: '2',\n+      99: '3',\n+      100: '4',\n+      101: '5',\n+      102: '6',\n+      103: '7',\n+      104: '8',\n+      105: '9',\n+      106: '*',\n+      107: '+',\n+      109: '-',",
        "path": "modules/keypress/keypress.js",
        "position": null,
        "original_position": 36,
        "commit_id": "cfb4d667dbac6a7c8e8236c11a82deb9965e30b1",
        "original_commit_id": "467395ee995293ec859d5b9d6920696b7f2536bb",
        "user": {
            "login": "ProLoser",
            "id": 67395,
            "node_id": "MDQ6VXNlcjY3Mzk1",
            "avatar_url": "https://avatars0.githubusercontent.com/u/67395?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ProLoser",
            "html_url": "https://github.com/ProLoser",
            "followers_url": "https://api.github.com/users/ProLoser/followers",
            "following_url": "https://api.github.com/users/ProLoser/following{/other_user}",
            "gists_url": "https://api.github.com/users/ProLoser/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ProLoser/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ProLoser/subscriptions",
            "organizations_url": "https://api.github.com/users/ProLoser/orgs",
            "repos_url": "https://api.github.com/users/ProLoser/repos",
            "events_url": "https://api.github.com/users/ProLoser/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ProLoser/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This would break our current parsing as this character is used to stack up keys\n",
        "created_at": "2013-04-18T08:03:16Z",
        "updated_at": "2013-05-20T01:05:20Z",
        "html_url": "https://github.com/angular-ui/ui-utils/pull/6#discussion_r3848612",
        "pull_request_url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/6",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/3848612"
            },
            "html": {
                "href": "https://github.com/angular-ui/ui-utils/pull/6#discussion_r3848612"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/6"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/3858511",
        "pull_request_review_id": null,
        "id": 3858511,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg1MTE=",
        "diff_hunk": "@@ -1,21 +1,65 @@\n angular.module('ui.keypress',[]).\n factory('keypressHelper', ['$parse', function keypress($parse){\n+   // keymaps from http://unixpapa.com/js/key.html\n+  var keyupdownmap = {\n+      8: 'backspace',\n+      9: 'tab',\n+      13: 'enter',\n+      27: 'esc',\n+      32: 'space',\n+      33: 'pageup',\n+      34: 'pagedown',\n+      35: 'end',\n+      36: 'home',\n+      37: 'left',\n+      38: 'up',\n+      39: 'right',\n+      40: 'down',\n+      44: ',',\n+      45: 'insert',\n+      46: 'delete',\n+      91: 'leftwindows',\n+      92: 'rightwindows',\n+      93: 'windowsmenu',\n+      96: '0',\n+      97: '1',\n+      98: '2',\n+      99: '3',\n+      100: '4',\n+      101: '5',\n+      102: '6',\n+      103: '7',\n+      104: '8',\n+      105: '9',",
        "path": "modules/keypress/keypress.js",
        "position": null,
        "original_position": 33,
        "commit_id": "cfb4d667dbac6a7c8e8236c11a82deb9965e30b1",
        "original_commit_id": "467395ee995293ec859d5b9d6920696b7f2536bb",
        "user": {
            "login": "ProLoser",
            "id": 67395,
            "node_id": "MDQ6VXNlcjY3Mzk1",
            "avatar_url": "https://avatars0.githubusercontent.com/u/67395?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ProLoser",
            "html_url": "https://github.com/ProLoser",
            "followers_url": "https://api.github.com/users/ProLoser/followers",
            "following_url": "https://api.github.com/users/ProLoser/following{/other_user}",
            "gists_url": "https://api.github.com/users/ProLoser/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ProLoser/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ProLoser/subscriptions",
            "organizations_url": "https://api.github.com/users/ProLoser/orgs",
            "repos_url": "https://api.github.com/users/ProLoser/repos",
            "events_url": "https://api.github.com/users/ProLoser/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ProLoser/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The number keys could very well cause issues / confusion when people are trying to use the keycode numbers\n",
        "created_at": "2013-04-18T17:09:48Z",
        "updated_at": "2013-05-20T01:05:20Z",
        "html_url": "https://github.com/angular-ui/ui-utils/pull/6#discussion_r3858511",
        "pull_request_url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/6",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/3858511"
            },
            "html": {
                "href": "https://github.com/angular-ui/ui-utils/pull/6#discussion_r3858511"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/6"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/4123896",
        "pull_request_review_id": null,
        "id": 4123896,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM4OTY=",
        "diff_hunk": "@@ -1,21 +1,65 @@\n angular.module('ui.keypress',[]).\n factory('keypressHelper', ['$parse', function keypress($parse){\n+   // keymaps from http://unixpapa.com/js/key.html\n+  var keyupdownmap = {\n+      8: 'backspace',\n+      9: 'tab',\n+      13: 'enter',\n+      27: 'esc',\n+      32: 'space',\n+      33: 'pageup',\n+      34: 'pagedown',\n+      35: 'end',\n+      36: 'home',\n+      37: 'left',\n+      38: 'up',\n+      39: 'right',\n+      40: 'down',\n+      44: ',',\n+      45: 'insert',\n+      46: 'delete',\n+      91: 'leftwindows',\n+      92: 'rightwindows',\n+      93: 'windowsmenu',\n+      96: '0',\n+      97: '1',\n+      98: '2',\n+      99: '3',\n+      100: '4',\n+      101: '5',\n+      102: '6',\n+      103: '7',\n+      104: '8',\n+      105: '9',\n+      106: '*',\n+      107: '+',\n+      109: '-',",
        "path": "modules/keypress/keypress.js",
        "position": null,
        "original_position": 36,
        "commit_id": "cfb4d667dbac6a7c8e8236c11a82deb9965e30b1",
        "original_commit_id": "467395ee995293ec859d5b9d6920696b7f2536bb",
        "user": {
            "login": "dturkenk",
            "id": 477923,
            "node_id": "MDQ6VXNlcjQ3NzkyMw==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/477923?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dturkenk",
            "html_url": "https://github.com/dturkenk",
            "followers_url": "https://api.github.com/users/dturkenk/followers",
            "following_url": "https://api.github.com/users/dturkenk/following{/other_user}",
            "gists_url": "https://api.github.com/users/dturkenk/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dturkenk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dturkenk/subscriptions",
            "organizations_url": "https://api.github.com/users/dturkenk/orgs",
            "repos_url": "https://api.github.com/users/dturkenk/repos",
            "events_url": "https://api.github.com/users/dturkenk/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dturkenk/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think this will fall behind the current parsing in the execution flow and will never get used, but in that case it's unnecessary and should be removed.\n\nI'll fix that.\n",
        "created_at": "2013-05-07T21:46:56Z",
        "updated_at": "2013-05-20T01:05:20Z",
        "html_url": "https://github.com/angular-ui/ui-utils/pull/6#discussion_r4123896",
        "pull_request_url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/6",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/4123896"
            },
            "html": {
                "href": "https://github.com/angular-ui/ui-utils/pull/6#discussion_r4123896"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/6"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/4123959",
        "pull_request_review_id": null,
        "id": 4123959,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM5NTk=",
        "diff_hunk": "@@ -1,21 +1,65 @@\n angular.module('ui.keypress',[]).\n factory('keypressHelper', ['$parse', function keypress($parse){\n+   // keymaps from http://unixpapa.com/js/key.html\n+  var keyupdownmap = {\n+      8: 'backspace',\n+      9: 'tab',\n+      13: 'enter',\n+      27: 'esc',\n+      32: 'space',\n+      33: 'pageup',\n+      34: 'pagedown',\n+      35: 'end',\n+      36: 'home',\n+      37: 'left',\n+      38: 'up',\n+      39: 'right',\n+      40: 'down',\n+      44: ',',\n+      45: 'insert',\n+      46: 'delete',\n+      91: 'leftwindows',\n+      92: 'rightwindows',\n+      93: 'windowsmenu',\n+      96: '0',\n+      97: '1',\n+      98: '2',\n+      99: '3',\n+      100: '4',\n+      101: '5',\n+      102: '6',\n+      103: '7',\n+      104: '8',\n+      105: '9',\n+      106: '*',\n+      107: '+',\n+      109: '-',",
        "path": "modules/keypress/keypress.js",
        "position": null,
        "original_position": 36,
        "commit_id": "cfb4d667dbac6a7c8e8236c11a82deb9965e30b1",
        "original_commit_id": "467395ee995293ec859d5b9d6920696b7f2536bb",
        "user": {
            "login": "ProLoser",
            "id": 67395,
            "node_id": "MDQ6VXNlcjY3Mzk1",
            "avatar_url": "https://avatars0.githubusercontent.com/u/67395?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ProLoser",
            "html_url": "https://github.com/ProLoser",
            "followers_url": "https://api.github.com/users/ProLoser/followers",
            "following_url": "https://api.github.com/users/ProLoser/following{/other_user}",
            "gists_url": "https://api.github.com/users/ProLoser/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ProLoser/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ProLoser/subscriptions",
            "organizations_url": "https://api.github.com/users/ProLoser/orgs",
            "repos_url": "https://api.github.com/users/ProLoser/repos",
            "events_url": "https://api.github.com/users/ProLoser/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ProLoser/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'm interested in your other updates, but I'm not sure I yet agree with your single-character mappings because of potential conflicts they could create.\n",
        "created_at": "2013-05-07T21:49:34Z",
        "updated_at": "2013-05-20T01:05:20Z",
        "html_url": "https://github.com/angular-ui/ui-utils/pull/6#discussion_r4123959",
        "pull_request_url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/6",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/4123959"
            },
            "html": {
                "href": "https://github.com/angular-ui/ui-utils/pull/6#discussion_r4123959"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/6"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/4123984",
        "pull_request_review_id": null,
        "id": 4123984,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM5ODQ=",
        "diff_hunk": "@@ -1,21 +1,65 @@\n angular.module('ui.keypress',[]).\n factory('keypressHelper', ['$parse', function keypress($parse){\n+   // keymaps from http://unixpapa.com/js/key.html\n+  var keyupdownmap = {\n+      8: 'backspace',\n+      9: 'tab',\n+      13: 'enter',\n+      27: 'esc',\n+      32: 'space',\n+      33: 'pageup',\n+      34: 'pagedown',\n+      35: 'end',\n+      36: 'home',\n+      37: 'left',\n+      38: 'up',\n+      39: 'right',\n+      40: 'down',\n+      44: ',',\n+      45: 'insert',\n+      46: 'delete',\n+      91: 'leftwindows',\n+      92: 'rightwindows',\n+      93: 'windowsmenu',\n+      96: '0',\n+      97: '1',\n+      98: '2',\n+      99: '3',\n+      100: '4',\n+      101: '5',\n+      102: '6',\n+      103: '7',\n+      104: '8',\n+      105: '9',",
        "path": "modules/keypress/keypress.js",
        "position": null,
        "original_position": 33,
        "commit_id": "cfb4d667dbac6a7c8e8236c11a82deb9965e30b1",
        "original_commit_id": "467395ee995293ec859d5b9d6920696b7f2536bb",
        "user": {
            "login": "dturkenk",
            "id": 477923,
            "node_id": "MDQ6VXNlcjQ3NzkyMw==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/477923?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dturkenk",
            "html_url": "https://github.com/dturkenk",
            "followers_url": "https://api.github.com/users/dturkenk/followers",
            "following_url": "https://api.github.com/users/dturkenk/following{/other_user}",
            "gists_url": "https://api.github.com/users/dturkenk/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dturkenk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dturkenk/subscriptions",
            "organizations_url": "https://api.github.com/users/dturkenk/orgs",
            "repos_url": "https://api.github.com/users/dturkenk/repos",
            "events_url": "https://api.github.com/users/dturkenk/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dturkenk/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think that makes sense. Will remove this too.\n",
        "created_at": "2013-05-07T21:50:48Z",
        "updated_at": "2013-05-20T01:05:20Z",
        "html_url": "https://github.com/angular-ui/ui-utils/pull/6#discussion_r4123984",
        "pull_request_url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/6",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/4123984"
            },
            "html": {
                "href": "https://github.com/angular-ui/ui-utils/pull/6#discussion_r4123984"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/6"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/4713464",
        "pull_request_review_id": null,
        "id": 4713464,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM0NjQ=",
        "diff_hunk": "@@ -1,444 +1,475 @@\n /*\n  Attaches input mask onto input element\n  */\n-angular.module('ui.mask',[]).directive('uiMask', [\n-  function () {\n-    var maskDefinitions = {\n+angular.module('ui.mask',[])\n+  .value('uiMaskConfig', {\n+    'maskDefinitions': {\n       '9': /\\d/,\n       'A': /[a-zA-Z]/,\n       '*': /[a-zA-Z0-9]/\n-    };\n+    }\n+  })\n+  .directive('uiMask', ['uiMaskConfig', function (maskConfig) {\n     return {\n       priority: 100,\n       require: 'ngModel',\n       restrict: 'A',\n-      link: function (scope, iElement, iAttrs, controller) {\n-        var maskProcessed = false, eventsBound = false,\n+      compile: function uiMaskCompilingFunction(){\n+        var options = maskConfig;\n+        \n+        return function uiMaskLinkingFunction(scope, iElement, iAttrs, controller){\n+          var maskProcessed = false, eventsBound = false,\n             maskCaretMap, maskPatterns, maskPlaceholder, maskComponents,\n-            // Minimum required length of the value to be considered valid\n+          // Minimum required length of the value to be considered valid\n             minRequiredLength,\n             value, valueMasked, isValid,\n-            // Vars for initializing/uninitializing\n+          // Vars for initializing/uninitializing\n             originalPlaceholder = iAttrs.placeholder,\n-            originalMaxlength   = iAttrs.maxlength,\n-            // Vars used exclusively in eventHandler()\n+            originalMaxlength = iAttrs.maxlength,\n+          // Vars used exclusively in eventHandler()\n             oldValue, oldValueUnmasked, oldCaretPosition, oldSelectionLength;\n \n-        function initialize(maskAttr) {\n-          if (!angular.isDefined(maskAttr)){\n-            return uninitialize();\n-          }\n-          processRawMask(maskAttr);\n-          if (!maskProcessed){\n-            return uninitialize();\n+          function initialize(maskAttr){\n+            if (!angular.isDefined(maskAttr)) {\n+              return uninitialize();\n+            }\n+            processRawMask(maskAttr);\n+            if (!maskProcessed) {\n+              return uninitialize();\n+            }\n+            initializeElement();\n+            bindEventListeners();\n+            return true;\n           }\n-          initializeElement();\n-          bindEventListeners();\n-        }\n \n-        function formatter(fromModelValue) {\n-          if (!maskProcessed){\n-            return fromModelValue;\n+          function formatter(fromModelValue){\n+            if (!maskProcessed) {\n+              return fromModelValue;\n+            }\n+            value = unmaskValue(fromModelValue || '');\n+            isValid = validateValue(value);\n+            controller.$setValidity('mask', isValid);\n+            return isValid && value.length ? maskValue(value) : undefined;\n           }\n-          value   = unmaskValue(fromModelValue || '');\n-          isValid = validateValue(value);\n-          controller.$setValidity('mask', isValid);\n-          return isValid && value.length ? maskValue(value) : undefined;\n-        }\n \n-\n-        function parser(fromViewValue) {\n-          if (!maskProcessed){\n-            return fromViewValue;\n+          function parser(fromViewValue){\n+            if (!maskProcessed) {\n+              return fromViewValue;\n+            }\n+            value = unmaskValue(fromViewValue || '');\n+            isValid = validateValue(value);\n+            // We have to set viewValue manually as the reformatting of the input\n+            // value performed by eventHandler() doesn't happen until after\n+            // this parser is called, which causes what the user sees in the input\n+            // to be out-of-sync with what the controller's $viewValue is set to.\n+            controller.$viewValue = value.length ? maskValue(value) : '';\n+            controller.$setValidity('mask', isValid);\n+            if (value === '' && controller.$error.required !== undefined) {\n+              controller.$setValidity('required', false);\n+            }\n+            return isValid ? value : undefined;\n           }\n-          value     = unmaskValue(fromViewValue || '');\n-          isValid   = validateValue(value);\n-          viewValue = value.length ? maskValue(value) : '';\n-          // We have to set viewValue manually as the reformatting of the input\n-          // value performed by eventHandler() doesn't happen until after\n-          // this parser is called, which causes what the user sees in the input\n-          // to be out-of-sync with what the controller's $viewValue is set to.\n-          controller.$viewValue = viewValue;\n-          controller.$setValidity('mask', isValid);\n-          if (value === '' && controller.$error.required !== undefined){\n-            controller.$setValidity('required', false);\n+\n+          var linkOptions = {};\n+          \n+          if (iAttrs.uiOptions) {\n+            linkOptions = scope.$eval('[' + iAttrs.uiOptions + ']');\n+            if (angular.isObject(linkOptions[0])) { \n+              // we can't use angular.copy nor angular.extend, they lack the power to do a deep merge\n+              linkOptions = (function(original, current){\n+                for(var i in original) {\n+                  if (Object.prototype.hasOwnProperty.call(original, i)) {\n+                    if (!current[i]) {\n+                      current[i] = angular.copy(original[i]);\n+                    } else {\n+                      angular.extend(current[i], original[i]);\n+                    }\n+                  }\n+                }\n+                return current;\n+              })(options, linkOptions[0]);\n+            }\n+          } else {\n+            linkOptions = options;\n           }\n-          return isValid ? value : undefined;\n-        }\n \n-        iAttrs.$observe('uiMask', initialize);\n-        controller.$formatters.push(formatter);\n-        controller.$parsers.push(parser);\n+          iAttrs.$observe('uiMask', initialize);\n+          controller.$formatters.push(formatter);\n+          controller.$parsers.push(parser);\n+\n+          function uninitialize(){\n+            maskProcessed = false;\n+            unbindEventListeners();\n+\n+            if (angular.isDefined(originalPlaceholder)) {\n+              iElement.attr('placeholder', originalPlaceholder);\n+            } else {\n+              iElement.removeAttr('placeholder');\n+            }\n \n-        function uninitialize() {\n-          maskProcessed = false;\n-          unbindEventListeners();\n+            if (angular.isDefined(originalMaxlength)) {\n+              iElement.attr('maxlength', originalMaxlength);\n+            } else {\n+              iElement.removeAttr('maxlength');\n+            }\n \n-          if (angular.isDefined(originalPlaceholder)){\n-            iElement.attr('placeholder', originalPlaceholder);\n-          }else{\n-            iElement.removeAttr('placeholder');\n+            iElement.val(controller.$modelValue);\n+            controller.$viewValue = controller.$modelValue;\n+            return false;\n           }\n \n-          if (angular.isDefined(originalMaxlength)){\n-            iElement.attr('maxlength', originalMaxlength);\n-          }else{\n-            iElement.removeAttr('maxlength');\n+          function initializeElement(){\n+            value = oldValueUnmasked = unmaskValue(controller.$modelValue || '');\n+            valueMasked = oldValue = maskValue(value);\n+            isValid = validateValue(value);\n+            var viewValue = isValid && value.length ? valueMasked : '';\n+            if (iAttrs.maxlength) { // Double maxlength to allow pasting new val at end of mask\n+              iElement.attr('maxlength', maskCaretMap[maskCaretMap.length - 1] * 2);\n+            }\n+            iElement.attr('placeholder', maskPlaceholder);\n+            iElement.val(viewValue);\n+            controller.$viewValue = viewValue;\n+            // Not using $setViewValue so we don't clobber the model value and dirty the form\n+            // without any kind of user interaction.\n           }\n \n-          iElement.val(controller.$modelValue);\n-          controller.$viewValue = controller.$modelValue;\n-          return false;\n-        }\n-\n-        function initializeElement() {\n-          value       = oldValueUnmasked = unmaskValue(controller.$modelValue || '');\n-          valueMasked = oldValue         = maskValue(value);\n-          isValid     = validateValue(value);\n-          viewValue   = isValid && value.length ? valueMasked : '';\n-          if (iAttrs.maxlength){ // Double maxlength to allow pasting new val at end of mask\n-            iElement.attr('maxlength', maskCaretMap[maskCaretMap.length-1]*2);\n+          function bindEventListeners(){\n+            if (eventsBound) {\n+              return;\n+            }\n+            iElement.bind('blur', blurHandler);\n+            iElement.bind('mousedown mouseup', mouseDownUpHandler);\n+            iElement.bind('input keyup click', eventHandler);",
        "path": "modules/mask/mask.js",
        "position": 213,
        "original_position": 213,
        "commit_id": "80ac219226216ff0a88222c59dfbd34b7d14dc56",
        "original_commit_id": "80ac219226216ff0a88222c59dfbd34b7d14dc56",
        "user": {
            "login": "ProLoser",
            "id": 67395,
            "node_id": "MDQ6VXNlcjY3Mzk1",
            "avatar_url": "https://avatars0.githubusercontent.com/u/67395?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ProLoser",
            "html_url": "https://github.com/ProLoser",
            "followers_url": "https://api.github.com/users/ProLoser/followers",
            "following_url": "https://api.github.com/users/ProLoser/following{/other_user}",
            "gists_url": "https://api.github.com/users/ProLoser/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ProLoser/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ProLoser/subscriptions",
            "organizations_url": "https://api.github.com/users/ProLoser/orgs",
            "repos_url": "https://api.github.com/users/ProLoser/repos",
            "events_url": "https://api.github.com/users/ProLoser/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ProLoser/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "What is the purpose of binding to anything other than `input`?\n",
        "created_at": "2013-06-15T04:42:33Z",
        "updated_at": "2013-06-15T04:42:33Z",
        "html_url": "https://github.com/angular-ui/ui-utils/pull/50#discussion_r4713464",
        "pull_request_url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/50",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/4713464"
            },
            "html": {
                "href": "https://github.com/angular-ui/ui-utils/pull/50#discussion_r4713464"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/50"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/4713467",
        "pull_request_review_id": null,
        "id": 4713467,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM0Njc=",
        "diff_hunk": "@@ -1,444 +1,475 @@\n /*\n  Attaches input mask onto input element\n  */\n-angular.module('ui.mask',[]).directive('uiMask', [\n-  function () {\n-    var maskDefinitions = {\n+angular.module('ui.mask',[])\n+  .value('uiMaskConfig', {\n+    'maskDefinitions': {\n       '9': /\\d/,\n       'A': /[a-zA-Z]/,\n       '*': /[a-zA-Z0-9]/\n-    };\n+    }\n+  })\n+  .directive('uiMask', ['uiMaskConfig', function (maskConfig) {\n     return {\n       priority: 100,\n       require: 'ngModel',\n       restrict: 'A',\n-      link: function (scope, iElement, iAttrs, controller) {\n-        var maskProcessed = false, eventsBound = false,\n+      compile: function uiMaskCompilingFunction(){\n+        var options = maskConfig;\n+        \n+        return function uiMaskLinkingFunction(scope, iElement, iAttrs, controller){\n+          var maskProcessed = false, eventsBound = false,\n             maskCaretMap, maskPatterns, maskPlaceholder, maskComponents,\n-            // Minimum required length of the value to be considered valid\n+          // Minimum required length of the value to be considered valid\n             minRequiredLength,\n             value, valueMasked, isValid,\n-            // Vars for initializing/uninitializing\n+          // Vars for initializing/uninitializing\n             originalPlaceholder = iAttrs.placeholder,\n-            originalMaxlength   = iAttrs.maxlength,\n-            // Vars used exclusively in eventHandler()\n+            originalMaxlength = iAttrs.maxlength,\n+          // Vars used exclusively in eventHandler()\n             oldValue, oldValueUnmasked, oldCaretPosition, oldSelectionLength;\n \n-        function initialize(maskAttr) {\n-          if (!angular.isDefined(maskAttr)){\n-            return uninitialize();\n-          }\n-          processRawMask(maskAttr);\n-          if (!maskProcessed){\n-            return uninitialize();\n+          function initialize(maskAttr){\n+            if (!angular.isDefined(maskAttr)) {\n+              return uninitialize();\n+            }\n+            processRawMask(maskAttr);\n+            if (!maskProcessed) {\n+              return uninitialize();\n+            }\n+            initializeElement();\n+            bindEventListeners();\n+            return true;\n           }\n-          initializeElement();\n-          bindEventListeners();\n-        }\n \n-        function formatter(fromModelValue) {\n-          if (!maskProcessed){\n-            return fromModelValue;\n+          function formatter(fromModelValue){\n+            if (!maskProcessed) {\n+              return fromModelValue;\n+            }\n+            value = unmaskValue(fromModelValue || '');\n+            isValid = validateValue(value);\n+            controller.$setValidity('mask', isValid);\n+            return isValid && value.length ? maskValue(value) : undefined;\n           }\n-          value   = unmaskValue(fromModelValue || '');\n-          isValid = validateValue(value);\n-          controller.$setValidity('mask', isValid);\n-          return isValid && value.length ? maskValue(value) : undefined;\n-        }\n \n-\n-        function parser(fromViewValue) {\n-          if (!maskProcessed){\n-            return fromViewValue;\n+          function parser(fromViewValue){\n+            if (!maskProcessed) {\n+              return fromViewValue;\n+            }\n+            value = unmaskValue(fromViewValue || '');\n+            isValid = validateValue(value);\n+            // We have to set viewValue manually as the reformatting of the input\n+            // value performed by eventHandler() doesn't happen until after\n+            // this parser is called, which causes what the user sees in the input\n+            // to be out-of-sync with what the controller's $viewValue is set to.\n+            controller.$viewValue = value.length ? maskValue(value) : '';\n+            controller.$setValidity('mask', isValid);\n+            if (value === '' && controller.$error.required !== undefined) {\n+              controller.$setValidity('required', false);\n+            }\n+            return isValid ? value : undefined;\n           }\n-          value     = unmaskValue(fromViewValue || '');\n-          isValid   = validateValue(value);\n-          viewValue = value.length ? maskValue(value) : '';\n-          // We have to set viewValue manually as the reformatting of the input\n-          // value performed by eventHandler() doesn't happen until after\n-          // this parser is called, which causes what the user sees in the input\n-          // to be out-of-sync with what the controller's $viewValue is set to.\n-          controller.$viewValue = viewValue;\n-          controller.$setValidity('mask', isValid);\n-          if (value === '' && controller.$error.required !== undefined){\n-            controller.$setValidity('required', false);\n+\n+          var linkOptions = {};\n+          \n+          if (iAttrs.uiOptions) {\n+            linkOptions = scope.$eval('[' + iAttrs.uiOptions + ']');\n+            if (angular.isObject(linkOptions[0])) { \n+              // we can't use angular.copy nor angular.extend, they lack the power to do a deep merge\n+              linkOptions = (function(original, current){\n+                for(var i in original) {\n+                  if (Object.prototype.hasOwnProperty.call(original, i)) {\n+                    if (!current[i]) {\n+                      current[i] = angular.copy(original[i]);\n+                    } else {\n+                      angular.extend(current[i], original[i]);\n+                    }\n+                  }\n+                }\n+                return current;\n+              })(options, linkOptions[0]);\n+            }\n+          } else {\n+            linkOptions = options;\n           }\n-          return isValid ? value : undefined;\n-        }\n \n-        iAttrs.$observe('uiMask', initialize);\n-        controller.$formatters.push(formatter);\n-        controller.$parsers.push(parser);\n+          iAttrs.$observe('uiMask', initialize);\n+          controller.$formatters.push(formatter);\n+          controller.$parsers.push(parser);\n+\n+          function uninitialize(){\n+            maskProcessed = false;\n+            unbindEventListeners();\n+\n+            if (angular.isDefined(originalPlaceholder)) {\n+              iElement.attr('placeholder', originalPlaceholder);\n+            } else {\n+              iElement.removeAttr('placeholder');\n+            }\n \n-        function uninitialize() {\n-          maskProcessed = false;\n-          unbindEventListeners();\n+            if (angular.isDefined(originalMaxlength)) {\n+              iElement.attr('maxlength', originalMaxlength);\n+            } else {\n+              iElement.removeAttr('maxlength');\n+            }\n \n-          if (angular.isDefined(originalPlaceholder)){\n-            iElement.attr('placeholder', originalPlaceholder);\n-          }else{\n-            iElement.removeAttr('placeholder');\n+            iElement.val(controller.$modelValue);\n+            controller.$viewValue = controller.$modelValue;\n+            return false;\n           }\n \n-          if (angular.isDefined(originalMaxlength)){\n-            iElement.attr('maxlength', originalMaxlength);\n-          }else{\n-            iElement.removeAttr('maxlength');\n+          function initializeElement(){\n+            value = oldValueUnmasked = unmaskValue(controller.$modelValue || '');\n+            valueMasked = oldValue = maskValue(value);\n+            isValid = validateValue(value);\n+            var viewValue = isValid && value.length ? valueMasked : '';\n+            if (iAttrs.maxlength) { // Double maxlength to allow pasting new val at end of mask\n+              iElement.attr('maxlength', maskCaretMap[maskCaretMap.length - 1] * 2);\n+            }\n+            iElement.attr('placeholder', maskPlaceholder);\n+            iElement.val(viewValue);\n+            controller.$viewValue = viewValue;\n+            // Not using $setViewValue so we don't clobber the model value and dirty the form\n+            // without any kind of user interaction.\n           }\n \n-          iElement.val(controller.$modelValue);\n-          controller.$viewValue = controller.$modelValue;\n-          return false;\n-        }\n-\n-        function initializeElement() {\n-          value       = oldValueUnmasked = unmaskValue(controller.$modelValue || '');\n-          valueMasked = oldValue         = maskValue(value);\n-          isValid     = validateValue(value);\n-          viewValue   = isValid && value.length ? valueMasked : '';\n-          if (iAttrs.maxlength){ // Double maxlength to allow pasting new val at end of mask\n-            iElement.attr('maxlength', maskCaretMap[maskCaretMap.length-1]*2);\n+          function bindEventListeners(){\n+            if (eventsBound) {\n+              return;\n+            }\n+            iElement.bind('blur', blurHandler);\n+            iElement.bind('mousedown mouseup', mouseDownUpHandler);\n+            iElement.bind('input keyup click', eventHandler);\n+            eventsBound = true;\n           }\n-          iElement.attr('placeholder', maskPlaceholder);\n-          iElement.val(viewValue);\n-          controller.$viewValue = viewValue;\n-          // Not using $setViewValue so we don't clobber the model value and dirty the form\n-          // without any kind of user interaction.\n-        }\n-\n-        function bindEventListeners() {\n-          if (eventsBound){\n-            return true;\n+\n+          function unbindEventListeners(){\n+            if (!eventsBound) {\n+              return;\n+            }\n+            iElement.unbind('blur', blurHandler);\n+            iElement.unbind('mousedown', mouseDownUpHandler);\n+            iElement.unbind('mouseup', mouseDownUpHandler);\n+            iElement.unbind('input', eventHandler);\n+            iElement.unbind('keyup', eventHandler);\n+            iElement.unbind('click', eventHandler);\n+            eventsBound = false;\n           }\n-          iElement.bind('blur',              blurHandler);\n-          iElement.bind('mousedown mouseup', mouseDownUpHandler);\n-          iElement.bind('input keyup click', eventHandler);\n-          eventsBound = true;\n-        }\n \n-        function unbindEventListeners() {\n-          if (!eventsBound){\n-            return true;\n+          function validateValue(value){\n+            // Zero-length value validity is ngRequired's determination\n+            return value.length ? value.length >= minRequiredLength : true;\n           }\n-          iElement.unbind('blur',      blurHandler);\n-          iElement.unbind('mousedown', mouseDownUpHandler);\n-          iElement.unbind('mouseup',   mouseDownUpHandler);\n-          iElement.unbind('input',     eventHandler);\n-          iElement.unbind('keyup',     eventHandler);\n-          iElement.unbind('click',     eventHandler);\n-          eventsBound = false;\n-        }\n-\n-\n-        function validateValue(value) {\n-          // Zero-length value validity is ngRequired's determination\n-          return value.length ? value.length >= minRequiredLength : true;\n-        }\n-\n-        function unmaskValue(value) {\n-          var valueUnmasked    = '',\n+\n+          function unmaskValue(value){\n+            var valueUnmasked = '',\n               maskPatternsCopy = maskPatterns.slice();\n-          // Preprocess by stripping mask components from value\n-          value = value.toString();\n-          angular.forEach(maskComponents, function(component, i) {\n-            value = value.replace(component, '');\n-          });\n-          angular.forEach(value.split(''), function(chr, i) {\n-            if (maskPatternsCopy.length && maskPatternsCopy[0].test(chr)) {\n-              valueUnmasked += chr;\n-              maskPatternsCopy.shift();\n-            }\n-          });\n-          return valueUnmasked;\n-        }\n+            // Preprocess by stripping mask components from value\n+            value = value.toString();\n+            angular.forEach(maskComponents, function (component){\n+              value = value.replace(component, '');\n+            });\n+            angular.forEach(value.split(''), function (chr){\n+              if (maskPatternsCopy.length && maskPatternsCopy[0].test(chr)) {\n+                valueUnmasked += chr;\n+                maskPatternsCopy.shift();\n+              }\n+            });\n+            return valueUnmasked;\n+          }\n \n-        function maskValue(unmaskedValue) {\n-          var valueMasked      = '',\n+          function maskValue(unmaskedValue){\n+            var valueMasked = '',\n               maskCaretMapCopy = maskCaretMap.slice();\n-          angular.forEach(maskPlaceholder.split(''), function(chr, i) {\n-            if (unmaskedValue.length && i === maskCaretMapCopy[0]) {\n-              valueMasked  += unmaskedValue.charAt(0) || '_';\n-              unmaskedValue = unmaskedValue.substr(1);\n-              maskCaretMapCopy.shift(); }\n-            else{\n-              valueMasked += chr;\n-            }\n-          });\n-          return valueMasked;\n-        }\n-\n-        function processRawMask(mask) {\n-          var characterCount = 0;\n-          maskCaretMap       = [];\n-          maskPatterns       = [];\n-          maskPlaceholder    = '';\n-\n-          // No complex mask support for now...\n-          // if (mask instanceof Array) {\n-          //   angular.forEach(mask, function(item, i) {\n-          //     if (item instanceof RegExp) {\n-          //       maskCaretMap.push(characterCount++);\n-          //       maskPlaceholder += '_';\n-          //       maskPatterns.push(item);\n-          //     }\n-          //     else if (typeof item == 'string') {\n-          //       angular.forEach(item.split(''), function(chr, i) {\n-          //         maskPlaceholder += chr;\n-          //         characterCount++;\n-          //       });\n-          //     }\n-          //   });\n-          // }\n-          // Otherwise it's a simple mask\n-          // else\n-\n-          if (typeof mask === 'string') {\n-            minRequiredLength = 0;\n-            var isOptional = false;\n-\n-            angular.forEach(mask.split(''), function(chr, i) {\n-              if (maskDefinitions[chr]) {\n-                maskCaretMap.push(characterCount);\n-                maskPlaceholder += '_';\n-                maskPatterns.push(maskDefinitions[chr]);\n-\n-                characterCount++;\n-                if (!isOptional) {\n-                  minRequiredLength++;\n-                }\n+            \n+            angular.forEach(maskPlaceholder.split(''), function (chr, i){\n+              if (unmaskedValue.length && i === maskCaretMapCopy[0]) {\n+                valueMasked += unmaskedValue.charAt(0) || '_';\n+                unmaskedValue = unmaskedValue.substr(1);\n+                maskCaretMapCopy.shift();\n               }\n-              else if (chr === \"?\") {\n-                isOptional = true;\n-              }\n-              else{\n-                maskPlaceholder += chr;\n-                characterCount++;\n+              else {\n+                valueMasked += chr;\n               }\n             });\n+            return valueMasked;\n           }\n-          // Caret position immediately following last position is valid.\n-          maskCaretMap.push(maskCaretMap.slice().pop() + 1);\n-          // Generate array of mask components that will be stripped from a masked value\n-          // before processing to prevent mask components from being added to the unmasked value.\n-          // E.g., a mask pattern of '+7 9999' won't have the 7 bleed into the unmasked value.\n-                                                                // If a maskable char is followed by a mask char and has a mask\n-                                                                // char behind it, we'll split it into it's own component so if\n-                                                                // a user is aggressively deleting in the input and a char ahead\n-                                                                // of the maskable char gets deleted, we'll still be able to strip\n-                                                                // it in the unmaskValue() preprocessing.\n-          maskComponents = maskPlaceholder.replace(/[_]+/g,'_').replace(/([^_]+)([a-zA-Z0-9])([^_])/g, '$1$2_$3').split('_');\n-          maskProcessed  = maskCaretMap.length > 1 ? true : false;\n-        }\n-\n-        function blurHandler(e) {\n-          oldCaretPosition   = 0;\n-          oldSelectionLength = 0;\n-          if (!isValid || value.length === 0) {\n-            valueMasked = '';\n-            iElement.val('');\n-            scope.$apply(function() {\n-              controller.$setViewValue('');\n-            });\n+\n+          function processRawMask(mask){\n+            var characterCount = 0;\n+            maskCaretMap = [];\n+            maskPatterns = [];\n+            maskPlaceholder = '';\n+\n+            // No complex mask support for now...\n+            // if (mask instanceof Array) {\n+            //   angular.forEach(mask, function(item, i) {\n+            //     if (item instanceof RegExp) {\n+            //       maskCaretMap.push(characterCount++);\n+            //       maskPlaceholder += '_';\n+            //       maskPatterns.push(item);\n+            //     }\n+            //     else if (typeof item == 'string') {\n+            //       angular.forEach(item.split(''), function(chr, i) {\n+            //         maskPlaceholder += chr;\n+            //         characterCount++;\n+            //       });\n+            //     }\n+            //   });\n+            // }\n+            // Otherwise it's a simple mask\n+            // else\n+\n+            if (typeof mask === 'string') {\n+              minRequiredLength = 0;\n+              var isOptional = false;\n+\n+              angular.forEach(mask.split(''), function (chr){\n+                if (linkOptions.maskDefinitions[chr]) {\n+                  maskCaretMap.push(characterCount);\n+                  maskPlaceholder += '_';\n+                  maskPatterns.push(linkOptions.maskDefinitions[chr]);\n+\n+                  characterCount++;\n+                  if (!isOptional) {\n+                    minRequiredLength++;\n+                  }\n+                }\n+                else if (chr === \"?\") {\n+                  isOptional = true;\n+                }\n+                else {\n+                  maskPlaceholder += chr;\n+                  characterCount++;\n+                }\n+              });\n+            }\n+            // Caret position immediately following last position is valid.\n+            maskCaretMap.push(maskCaretMap.slice().pop() + 1);\n+            // Generate array of mask components that will be stripped from a masked value\n+            // before processing to prevent mask components from being added to the unmasked value.\n+            // E.g., a mask pattern of '+7 9999' won't have the 7 bleed into the unmasked value.\n+            // If a maskable char is followed by a mask char and has a mask\n+            // char behind it, we'll split it into it's own component so if\n+            // a user is aggressively deleting in the input and a char ahead\n+            // of the maskable char gets deleted, we'll still be able to strip\n+            // it in the unmaskValue() preprocessing.\n+            maskComponents = maskPlaceholder.replace(/[_]+/g, '_').replace(/([^_]+)([a-zA-Z0-9])([^_])/g, '$1$2_$3').split('_');\n+            maskProcessed = maskCaretMap.length > 1 ? true : false;\n           }\n-        }\n \n-        function mouseDownUpHandler(e) {\n-          if (e.type === 'mousedown'){\n-            iElement.bind('mouseout', mouseoutHandler);\n-          }else{\n-            iElement.unbind('mouseout', mouseoutHandler);\n+          function blurHandler(){\n+            oldCaretPosition = 0;\n+            oldSelectionLength = 0;\n+            if (!isValid || value.length === 0) {\n+              valueMasked = '';\n+              iElement.val('');\n+              scope.$apply(function (){\n+                controller.$setViewValue('');\n+              });\n+            }\n           }\n-        }\n \n-        iElement.bind('mousedown mouseup', mouseDownUpHandler);\n+          function mouseDownUpHandler(e){\n+            if (e.type === 'mousedown') {\n+              iElement.bind('mouseout', mouseoutHandler);\n+            } else {\n+              iElement.unbind('mouseout', mouseoutHandler);\n+            }\n+          }\n \n-        function mouseoutHandler(e) {\n-          oldSelectionLength = getSelectionLength(this);\n-          iElement.unbind('mouseout', mouseoutHandler);\n-        }\n+          iElement.bind('mousedown mouseup', mouseDownUpHandler);\n \n-        function eventHandler(e) {\n-          e = e || {};\n-          // Allows more efficient minification\n-          var eventWhich = e.which,\n-              eventType  = e.type;\n+          function mouseoutHandler(){\n+            oldSelectionLength = getSelectionLength(this);",
        "path": "modules/mask/mask.js",
        "position": 502,
        "original_position": 502,
        "commit_id": "80ac219226216ff0a88222c59dfbd34b7d14dc56",
        "original_commit_id": "80ac219226216ff0a88222c59dfbd34b7d14dc56",
        "user": {
            "login": "ProLoser",
            "id": 67395,
            "node_id": "MDQ6VXNlcjY3Mzk1",
            "avatar_url": "https://avatars0.githubusercontent.com/u/67395?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ProLoser",
            "html_url": "https://github.com/ProLoser",
            "followers_url": "https://api.github.com/users/ProLoser/followers",
            "following_url": "https://api.github.com/users/ProLoser/following{/other_user}",
            "gists_url": "https://api.github.com/users/ProLoser/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ProLoser/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ProLoser/subscriptions",
            "organizations_url": "https://api.github.com/users/ProLoser/orgs",
            "repos_url": "https://api.github.com/users/ProLoser/repos",
            "events_url": "https://api.github.com/users/ProLoser/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ProLoser/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Why are we keeping track of things like selection length?\n",
        "created_at": "2013-06-15T04:43:26Z",
        "updated_at": "2013-06-15T04:43:26Z",
        "html_url": "https://github.com/angular-ui/ui-utils/pull/50#discussion_r4713467",
        "pull_request_url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/50",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/4713467"
            },
            "html": {
                "href": "https://github.com/angular-ui/ui-utils/pull/50#discussion_r4713467"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/50"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/4713476",
        "pull_request_review_id": null,
        "id": 4713476,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM0NzY=",
        "diff_hunk": "@@ -1,444 +1,475 @@\n /*\n  Attaches input mask onto input element\n  */\n-angular.module('ui.mask',[]).directive('uiMask', [\n-  function () {\n-    var maskDefinitions = {\n+angular.module('ui.mask',[])\n+  .value('uiMaskConfig', {\n+    'maskDefinitions': {\n       '9': /\\d/,\n       'A': /[a-zA-Z]/,\n       '*': /[a-zA-Z0-9]/\n-    };\n+    }\n+  })\n+  .directive('uiMask', ['uiMaskConfig', function (maskConfig) {\n     return {\n       priority: 100,\n       require: 'ngModel',\n       restrict: 'A',\n-      link: function (scope, iElement, iAttrs, controller) {\n-        var maskProcessed = false, eventsBound = false,\n+      compile: function uiMaskCompilingFunction(){\n+        var options = maskConfig;\n+        \n+        return function uiMaskLinkingFunction(scope, iElement, iAttrs, controller){\n+          var maskProcessed = false, eventsBound = false,\n             maskCaretMap, maskPatterns, maskPlaceholder, maskComponents,\n-            // Minimum required length of the value to be considered valid\n+          // Minimum required length of the value to be considered valid\n             minRequiredLength,\n             value, valueMasked, isValid,\n-            // Vars for initializing/uninitializing\n+          // Vars for initializing/uninitializing\n             originalPlaceholder = iAttrs.placeholder,\n-            originalMaxlength   = iAttrs.maxlength,\n-            // Vars used exclusively in eventHandler()\n+            originalMaxlength = iAttrs.maxlength,\n+          // Vars used exclusively in eventHandler()\n             oldValue, oldValueUnmasked, oldCaretPosition, oldSelectionLength;\n \n-        function initialize(maskAttr) {\n-          if (!angular.isDefined(maskAttr)){\n-            return uninitialize();\n-          }\n-          processRawMask(maskAttr);\n-          if (!maskProcessed){\n-            return uninitialize();\n+          function initialize(maskAttr){\n+            if (!angular.isDefined(maskAttr)) {\n+              return uninitialize();\n+            }\n+            processRawMask(maskAttr);\n+            if (!maskProcessed) {\n+              return uninitialize();\n+            }\n+            initializeElement();\n+            bindEventListeners();\n+            return true;\n           }\n-          initializeElement();\n-          bindEventListeners();\n-        }\n \n-        function formatter(fromModelValue) {\n-          if (!maskProcessed){\n-            return fromModelValue;\n+          function formatter(fromModelValue){\n+            if (!maskProcessed) {\n+              return fromModelValue;\n+            }\n+            value = unmaskValue(fromModelValue || '');\n+            isValid = validateValue(value);\n+            controller.$setValidity('mask', isValid);\n+            return isValid && value.length ? maskValue(value) : undefined;\n           }\n-          value   = unmaskValue(fromModelValue || '');\n-          isValid = validateValue(value);\n-          controller.$setValidity('mask', isValid);\n-          return isValid && value.length ? maskValue(value) : undefined;\n-        }\n \n-\n-        function parser(fromViewValue) {\n-          if (!maskProcessed){\n-            return fromViewValue;\n+          function parser(fromViewValue){\n+            if (!maskProcessed) {\n+              return fromViewValue;\n+            }\n+            value = unmaskValue(fromViewValue || '');\n+            isValid = validateValue(value);\n+            // We have to set viewValue manually as the reformatting of the input\n+            // value performed by eventHandler() doesn't happen until after\n+            // this parser is called, which causes what the user sees in the input\n+            // to be out-of-sync with what the controller's $viewValue is set to.\n+            controller.$viewValue = value.length ? maskValue(value) : '';\n+            controller.$setValidity('mask', isValid);\n+            if (value === '' && controller.$error.required !== undefined) {\n+              controller.$setValidity('required', false);\n+            }\n+            return isValid ? value : undefined;\n           }\n-          value     = unmaskValue(fromViewValue || '');\n-          isValid   = validateValue(value);\n-          viewValue = value.length ? maskValue(value) : '';\n-          // We have to set viewValue manually as the reformatting of the input\n-          // value performed by eventHandler() doesn't happen until after\n-          // this parser is called, which causes what the user sees in the input\n-          // to be out-of-sync with what the controller's $viewValue is set to.\n-          controller.$viewValue = viewValue;\n-          controller.$setValidity('mask', isValid);\n-          if (value === '' && controller.$error.required !== undefined){\n-            controller.$setValidity('required', false);\n+\n+          var linkOptions = {};\n+          \n+          if (iAttrs.uiOptions) {\n+            linkOptions = scope.$eval('[' + iAttrs.uiOptions + ']');\n+            if (angular.isObject(linkOptions[0])) { \n+              // we can't use angular.copy nor angular.extend, they lack the power to do a deep merge\n+              linkOptions = (function(original, current){\n+                for(var i in original) {\n+                  if (Object.prototype.hasOwnProperty.call(original, i)) {\n+                    if (!current[i]) {\n+                      current[i] = angular.copy(original[i]);\n+                    } else {\n+                      angular.extend(current[i], original[i]);\n+                    }\n+                  }\n+                }\n+                return current;\n+              })(options, linkOptions[0]);\n+            }\n+          } else {\n+            linkOptions = options;\n           }\n-          return isValid ? value : undefined;\n-        }\n \n-        iAttrs.$observe('uiMask', initialize);\n-        controller.$formatters.push(formatter);\n-        controller.$parsers.push(parser);\n+          iAttrs.$observe('uiMask', initialize);\n+          controller.$formatters.push(formatter);\n+          controller.$parsers.push(parser);\n+\n+          function uninitialize(){\n+            maskProcessed = false;\n+            unbindEventListeners();\n+\n+            if (angular.isDefined(originalPlaceholder)) {\n+              iElement.attr('placeholder', originalPlaceholder);\n+            } else {\n+              iElement.removeAttr('placeholder');\n+            }\n \n-        function uninitialize() {\n-          maskProcessed = false;\n-          unbindEventListeners();\n+            if (angular.isDefined(originalMaxlength)) {\n+              iElement.attr('maxlength', originalMaxlength);\n+            } else {\n+              iElement.removeAttr('maxlength');\n+            }\n \n-          if (angular.isDefined(originalPlaceholder)){\n-            iElement.attr('placeholder', originalPlaceholder);\n-          }else{\n-            iElement.removeAttr('placeholder');\n+            iElement.val(controller.$modelValue);\n+            controller.$viewValue = controller.$modelValue;\n+            return false;\n           }\n \n-          if (angular.isDefined(originalMaxlength)){\n-            iElement.attr('maxlength', originalMaxlength);\n-          }else{\n-            iElement.removeAttr('maxlength');\n+          function initializeElement(){\n+            value = oldValueUnmasked = unmaskValue(controller.$modelValue || '');\n+            valueMasked = oldValue = maskValue(value);\n+            isValid = validateValue(value);\n+            var viewValue = isValid && value.length ? valueMasked : '';\n+            if (iAttrs.maxlength) { // Double maxlength to allow pasting new val at end of mask\n+              iElement.attr('maxlength', maskCaretMap[maskCaretMap.length - 1] * 2);\n+            }\n+            iElement.attr('placeholder', maskPlaceholder);\n+            iElement.val(viewValue);\n+            controller.$viewValue = viewValue;\n+            // Not using $setViewValue so we don't clobber the model value and dirty the form\n+            // without any kind of user interaction.\n           }\n \n-          iElement.val(controller.$modelValue);\n-          controller.$viewValue = controller.$modelValue;\n-          return false;\n-        }\n-\n-        function initializeElement() {\n-          value       = oldValueUnmasked = unmaskValue(controller.$modelValue || '');\n-          valueMasked = oldValue         = maskValue(value);\n-          isValid     = validateValue(value);\n-          viewValue   = isValid && value.length ? valueMasked : '';\n-          if (iAttrs.maxlength){ // Double maxlength to allow pasting new val at end of mask\n-            iElement.attr('maxlength', maskCaretMap[maskCaretMap.length-1]*2);\n+          function bindEventListeners(){\n+            if (eventsBound) {\n+              return;\n+            }\n+            iElement.bind('blur', blurHandler);\n+            iElement.bind('mousedown mouseup', mouseDownUpHandler);\n+            iElement.bind('input keyup click', eventHandler);\n+            eventsBound = true;\n           }\n-          iElement.attr('placeholder', maskPlaceholder);\n-          iElement.val(viewValue);\n-          controller.$viewValue = viewValue;\n-          // Not using $setViewValue so we don't clobber the model value and dirty the form\n-          // without any kind of user interaction.\n-        }\n-\n-        function bindEventListeners() {\n-          if (eventsBound){\n-            return true;\n+\n+          function unbindEventListeners(){\n+            if (!eventsBound) {\n+              return;\n+            }\n+            iElement.unbind('blur', blurHandler);\n+            iElement.unbind('mousedown', mouseDownUpHandler);\n+            iElement.unbind('mouseup', mouseDownUpHandler);\n+            iElement.unbind('input', eventHandler);\n+            iElement.unbind('keyup', eventHandler);\n+            iElement.unbind('click', eventHandler);\n+            eventsBound = false;\n           }\n-          iElement.bind('blur',              blurHandler);\n-          iElement.bind('mousedown mouseup', mouseDownUpHandler);\n-          iElement.bind('input keyup click', eventHandler);\n-          eventsBound = true;\n-        }\n \n-        function unbindEventListeners() {\n-          if (!eventsBound){\n-            return true;\n+          function validateValue(value){\n+            // Zero-length value validity is ngRequired's determination\n+            return value.length ? value.length >= minRequiredLength : true;\n           }\n-          iElement.unbind('blur',      blurHandler);\n-          iElement.unbind('mousedown', mouseDownUpHandler);\n-          iElement.unbind('mouseup',   mouseDownUpHandler);\n-          iElement.unbind('input',     eventHandler);\n-          iElement.unbind('keyup',     eventHandler);\n-          iElement.unbind('click',     eventHandler);\n-          eventsBound = false;\n-        }\n-\n-\n-        function validateValue(value) {\n-          // Zero-length value validity is ngRequired's determination\n-          return value.length ? value.length >= minRequiredLength : true;\n-        }\n-\n-        function unmaskValue(value) {\n-          var valueUnmasked    = '',\n+\n+          function unmaskValue(value){\n+            var valueUnmasked = '',\n               maskPatternsCopy = maskPatterns.slice();\n-          // Preprocess by stripping mask components from value\n-          value = value.toString();\n-          angular.forEach(maskComponents, function(component, i) {\n-            value = value.replace(component, '');\n-          });\n-          angular.forEach(value.split(''), function(chr, i) {\n-            if (maskPatternsCopy.length && maskPatternsCopy[0].test(chr)) {\n-              valueUnmasked += chr;\n-              maskPatternsCopy.shift();\n-            }\n-          });\n-          return valueUnmasked;\n-        }\n+            // Preprocess by stripping mask components from value\n+            value = value.toString();\n+            angular.forEach(maskComponents, function (component){\n+              value = value.replace(component, '');\n+            });\n+            angular.forEach(value.split(''), function (chr){\n+              if (maskPatternsCopy.length && maskPatternsCopy[0].test(chr)) {\n+                valueUnmasked += chr;\n+                maskPatternsCopy.shift();\n+              }\n+            });\n+            return valueUnmasked;\n+          }\n \n-        function maskValue(unmaskedValue) {\n-          var valueMasked      = '',\n+          function maskValue(unmaskedValue){\n+            var valueMasked = '',\n               maskCaretMapCopy = maskCaretMap.slice();\n-          angular.forEach(maskPlaceholder.split(''), function(chr, i) {\n-            if (unmaskedValue.length && i === maskCaretMapCopy[0]) {\n-              valueMasked  += unmaskedValue.charAt(0) || '_';\n-              unmaskedValue = unmaskedValue.substr(1);\n-              maskCaretMapCopy.shift(); }\n-            else{\n-              valueMasked += chr;\n-            }\n-          });\n-          return valueMasked;\n-        }\n-\n-        function processRawMask(mask) {\n-          var characterCount = 0;\n-          maskCaretMap       = [];\n-          maskPatterns       = [];\n-          maskPlaceholder    = '';\n-\n-          // No complex mask support for now...\n-          // if (mask instanceof Array) {\n-          //   angular.forEach(mask, function(item, i) {\n-          //     if (item instanceof RegExp) {\n-          //       maskCaretMap.push(characterCount++);\n-          //       maskPlaceholder += '_';\n-          //       maskPatterns.push(item);\n-          //     }\n-          //     else if (typeof item == 'string') {\n-          //       angular.forEach(item.split(''), function(chr, i) {\n-          //         maskPlaceholder += chr;\n-          //         characterCount++;\n-          //       });\n-          //     }\n-          //   });\n-          // }\n-          // Otherwise it's a simple mask\n-          // else\n-\n-          if (typeof mask === 'string') {\n-            minRequiredLength = 0;\n-            var isOptional = false;\n-\n-            angular.forEach(mask.split(''), function(chr, i) {\n-              if (maskDefinitions[chr]) {\n-                maskCaretMap.push(characterCount);\n-                maskPlaceholder += '_';\n-                maskPatterns.push(maskDefinitions[chr]);\n-\n-                characterCount++;\n-                if (!isOptional) {\n-                  minRequiredLength++;\n-                }\n+            \n+            angular.forEach(maskPlaceholder.split(''), function (chr, i){\n+              if (unmaskedValue.length && i === maskCaretMapCopy[0]) {\n+                valueMasked += unmaskedValue.charAt(0) || '_';\n+                unmaskedValue = unmaskedValue.substr(1);\n+                maskCaretMapCopy.shift();\n               }\n-              else if (chr === \"?\") {\n-                isOptional = true;\n-              }\n-              else{\n-                maskPlaceholder += chr;\n-                characterCount++;\n+              else {\n+                valueMasked += chr;\n               }\n             });\n+            return valueMasked;\n           }\n-          // Caret position immediately following last position is valid.\n-          maskCaretMap.push(maskCaretMap.slice().pop() + 1);\n-          // Generate array of mask components that will be stripped from a masked value\n-          // before processing to prevent mask components from being added to the unmasked value.\n-          // E.g., a mask pattern of '+7 9999' won't have the 7 bleed into the unmasked value.\n-                                                                // If a maskable char is followed by a mask char and has a mask\n-                                                                // char behind it, we'll split it into it's own component so if\n-                                                                // a user is aggressively deleting in the input and a char ahead\n-                                                                // of the maskable char gets deleted, we'll still be able to strip\n-                                                                // it in the unmaskValue() preprocessing.\n-          maskComponents = maskPlaceholder.replace(/[_]+/g,'_').replace(/([^_]+)([a-zA-Z0-9])([^_])/g, '$1$2_$3').split('_');\n-          maskProcessed  = maskCaretMap.length > 1 ? true : false;\n-        }\n-\n-        function blurHandler(e) {\n-          oldCaretPosition   = 0;\n-          oldSelectionLength = 0;\n-          if (!isValid || value.length === 0) {\n-            valueMasked = '';\n-            iElement.val('');\n-            scope.$apply(function() {\n-              controller.$setViewValue('');\n-            });\n+\n+          function processRawMask(mask){\n+            var characterCount = 0;\n+            maskCaretMap = [];\n+            maskPatterns = [];\n+            maskPlaceholder = '';\n+\n+            // No complex mask support for now...\n+            // if (mask instanceof Array) {\n+            //   angular.forEach(mask, function(item, i) {\n+            //     if (item instanceof RegExp) {\n+            //       maskCaretMap.push(characterCount++);\n+            //       maskPlaceholder += '_';\n+            //       maskPatterns.push(item);\n+            //     }\n+            //     else if (typeof item == 'string') {\n+            //       angular.forEach(item.split(''), function(chr, i) {\n+            //         maskPlaceholder += chr;\n+            //         characterCount++;\n+            //       });\n+            //     }\n+            //   });\n+            // }\n+            // Otherwise it's a simple mask\n+            // else\n+\n+            if (typeof mask === 'string') {\n+              minRequiredLength = 0;\n+              var isOptional = false;\n+\n+              angular.forEach(mask.split(''), function (chr){\n+                if (linkOptions.maskDefinitions[chr]) {\n+                  maskCaretMap.push(characterCount);\n+                  maskPlaceholder += '_';\n+                  maskPatterns.push(linkOptions.maskDefinitions[chr]);\n+\n+                  characterCount++;\n+                  if (!isOptional) {\n+                    minRequiredLength++;\n+                  }\n+                }\n+                else if (chr === \"?\") {\n+                  isOptional = true;\n+                }\n+                else {\n+                  maskPlaceholder += chr;\n+                  characterCount++;\n+                }\n+              });\n+            }\n+            // Caret position immediately following last position is valid.\n+            maskCaretMap.push(maskCaretMap.slice().pop() + 1);\n+            // Generate array of mask components that will be stripped from a masked value\n+            // before processing to prevent mask components from being added to the unmasked value.\n+            // E.g., a mask pattern of '+7 9999' won't have the 7 bleed into the unmasked value.\n+            // If a maskable char is followed by a mask char and has a mask\n+            // char behind it, we'll split it into it's own component so if\n+            // a user is aggressively deleting in the input and a char ahead\n+            // of the maskable char gets deleted, we'll still be able to strip\n+            // it in the unmaskValue() preprocessing.\n+            maskComponents = maskPlaceholder.replace(/[_]+/g, '_').replace(/([^_]+)([a-zA-Z0-9])([^_])/g, '$1$2_$3').split('_');\n+            maskProcessed = maskCaretMap.length > 1 ? true : false;\n           }\n-        }\n \n-        function mouseDownUpHandler(e) {\n-          if (e.type === 'mousedown'){\n-            iElement.bind('mouseout', mouseoutHandler);\n-          }else{\n-            iElement.unbind('mouseout', mouseoutHandler);\n+          function blurHandler(){\n+            oldCaretPosition = 0;\n+            oldSelectionLength = 0;\n+            if (!isValid || value.length === 0) {\n+              valueMasked = '';\n+              iElement.val('');\n+              scope.$apply(function (){\n+                controller.$setViewValue('');\n+              });\n+            }\n           }\n-        }\n \n-        iElement.bind('mousedown mouseup', mouseDownUpHandler);\n+          function mouseDownUpHandler(e){\n+            if (e.type === 'mousedown') {\n+              iElement.bind('mouseout', mouseoutHandler);\n+            } else {\n+              iElement.unbind('mouseout', mouseoutHandler);\n+            }\n+          }\n \n-        function mouseoutHandler(e) {\n-          oldSelectionLength = getSelectionLength(this);\n-          iElement.unbind('mouseout', mouseoutHandler);\n-        }\n+          iElement.bind('mousedown mouseup', mouseDownUpHandler);\n \n-        function eventHandler(e) {\n-          e = e || {};\n-          // Allows more efficient minification\n-          var eventWhich = e.which,\n-              eventType  = e.type;\n+          function mouseoutHandler(){\n+            oldSelectionLength = getSelectionLength(this);",
        "path": "modules/mask/mask.js",
        "position": 502,
        "original_position": 502,
        "commit_id": "80ac219226216ff0a88222c59dfbd34b7d14dc56",
        "original_commit_id": "80ac219226216ff0a88222c59dfbd34b7d14dc56",
        "user": {
            "login": "shaungrady",
            "id": 52413,
            "node_id": "MDQ6VXNlcjUyNDEz",
            "avatar_url": "https://avatars2.githubusercontent.com/u/52413?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/shaungrady",
            "html_url": "https://github.com/shaungrady",
            "followers_url": "https://api.github.com/users/shaungrady/followers",
            "following_url": "https://api.github.com/users/shaungrady/following{/other_user}",
            "gists_url": "https://api.github.com/users/shaungrady/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/shaungrady/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/shaungrady/subscriptions",
            "organizations_url": "https://api.github.com/users/shaungrady/orgs",
            "repos_url": "https://api.github.com/users/shaungrady/repos",
            "events_url": "https://api.github.com/users/shaungrady/events{/privacy}",
            "received_events_url": "https://api.github.com/users/shaungrady/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The behavior of the caret changes depending on if there is a selection or not when: a character is input; backspace key is pressed; delete button is pressed. It's also used in determining the value of isKeyDelete.\n",
        "created_at": "2013-06-15T04:51:46Z",
        "updated_at": "2013-06-15T04:51:46Z",
        "html_url": "https://github.com/angular-ui/ui-utils/pull/50#discussion_r4713476",
        "pull_request_url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/50",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/4713476"
            },
            "html": {
                "href": "https://github.com/angular-ui/ui-utils/pull/50#discussion_r4713476"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/50"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/4713486",
        "pull_request_review_id": null,
        "id": 4713486,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM0ODY=",
        "diff_hunk": "@@ -1,444 +1,475 @@\n /*\n  Attaches input mask onto input element\n  */\n-angular.module('ui.mask',[]).directive('uiMask', [\n-  function () {\n-    var maskDefinitions = {\n+angular.module('ui.mask',[])\n+  .value('uiMaskConfig', {\n+    'maskDefinitions': {\n       '9': /\\d/,\n       'A': /[a-zA-Z]/,\n       '*': /[a-zA-Z0-9]/\n-    };\n+    }\n+  })\n+  .directive('uiMask', ['uiMaskConfig', function (maskConfig) {\n     return {\n       priority: 100,\n       require: 'ngModel',\n       restrict: 'A',\n-      link: function (scope, iElement, iAttrs, controller) {\n-        var maskProcessed = false, eventsBound = false,\n+      compile: function uiMaskCompilingFunction(){\n+        var options = maskConfig;\n+        \n+        return function uiMaskLinkingFunction(scope, iElement, iAttrs, controller){\n+          var maskProcessed = false, eventsBound = false,\n             maskCaretMap, maskPatterns, maskPlaceholder, maskComponents,\n-            // Minimum required length of the value to be considered valid\n+          // Minimum required length of the value to be considered valid\n             minRequiredLength,\n             value, valueMasked, isValid,\n-            // Vars for initializing/uninitializing\n+          // Vars for initializing/uninitializing\n             originalPlaceholder = iAttrs.placeholder,\n-            originalMaxlength   = iAttrs.maxlength,\n-            // Vars used exclusively in eventHandler()\n+            originalMaxlength = iAttrs.maxlength,\n+          // Vars used exclusively in eventHandler()\n             oldValue, oldValueUnmasked, oldCaretPosition, oldSelectionLength;\n \n-        function initialize(maskAttr) {\n-          if (!angular.isDefined(maskAttr)){\n-            return uninitialize();\n-          }\n-          processRawMask(maskAttr);\n-          if (!maskProcessed){\n-            return uninitialize();\n+          function initialize(maskAttr){\n+            if (!angular.isDefined(maskAttr)) {\n+              return uninitialize();\n+            }\n+            processRawMask(maskAttr);\n+            if (!maskProcessed) {\n+              return uninitialize();\n+            }\n+            initializeElement();\n+            bindEventListeners();\n+            return true;\n           }\n-          initializeElement();\n-          bindEventListeners();\n-        }\n \n-        function formatter(fromModelValue) {\n-          if (!maskProcessed){\n-            return fromModelValue;\n+          function formatter(fromModelValue){\n+            if (!maskProcessed) {\n+              return fromModelValue;\n+            }\n+            value = unmaskValue(fromModelValue || '');\n+            isValid = validateValue(value);\n+            controller.$setValidity('mask', isValid);\n+            return isValid && value.length ? maskValue(value) : undefined;\n           }\n-          value   = unmaskValue(fromModelValue || '');\n-          isValid = validateValue(value);\n-          controller.$setValidity('mask', isValid);\n-          return isValid && value.length ? maskValue(value) : undefined;\n-        }\n \n-\n-        function parser(fromViewValue) {\n-          if (!maskProcessed){\n-            return fromViewValue;\n+          function parser(fromViewValue){\n+            if (!maskProcessed) {\n+              return fromViewValue;\n+            }\n+            value = unmaskValue(fromViewValue || '');\n+            isValid = validateValue(value);\n+            // We have to set viewValue manually as the reformatting of the input\n+            // value performed by eventHandler() doesn't happen until after\n+            // this parser is called, which causes what the user sees in the input\n+            // to be out-of-sync with what the controller's $viewValue is set to.\n+            controller.$viewValue = value.length ? maskValue(value) : '';\n+            controller.$setValidity('mask', isValid);\n+            if (value === '' && controller.$error.required !== undefined) {\n+              controller.$setValidity('required', false);\n+            }\n+            return isValid ? value : undefined;\n           }\n-          value     = unmaskValue(fromViewValue || '');\n-          isValid   = validateValue(value);\n-          viewValue = value.length ? maskValue(value) : '';\n-          // We have to set viewValue manually as the reformatting of the input\n-          // value performed by eventHandler() doesn't happen until after\n-          // this parser is called, which causes what the user sees in the input\n-          // to be out-of-sync with what the controller's $viewValue is set to.\n-          controller.$viewValue = viewValue;\n-          controller.$setValidity('mask', isValid);\n-          if (value === '' && controller.$error.required !== undefined){\n-            controller.$setValidity('required', false);\n+\n+          var linkOptions = {};\n+          \n+          if (iAttrs.uiOptions) {\n+            linkOptions = scope.$eval('[' + iAttrs.uiOptions + ']');\n+            if (angular.isObject(linkOptions[0])) { \n+              // we can't use angular.copy nor angular.extend, they lack the power to do a deep merge\n+              linkOptions = (function(original, current){\n+                for(var i in original) {\n+                  if (Object.prototype.hasOwnProperty.call(original, i)) {\n+                    if (!current[i]) {\n+                      current[i] = angular.copy(original[i]);\n+                    } else {\n+                      angular.extend(current[i], original[i]);\n+                    }\n+                  }\n+                }\n+                return current;\n+              })(options, linkOptions[0]);\n+            }\n+          } else {\n+            linkOptions = options;\n           }\n-          return isValid ? value : undefined;\n-        }\n \n-        iAttrs.$observe('uiMask', initialize);\n-        controller.$formatters.push(formatter);\n-        controller.$parsers.push(parser);\n+          iAttrs.$observe('uiMask', initialize);\n+          controller.$formatters.push(formatter);\n+          controller.$parsers.push(parser);\n+\n+          function uninitialize(){\n+            maskProcessed = false;\n+            unbindEventListeners();\n+\n+            if (angular.isDefined(originalPlaceholder)) {\n+              iElement.attr('placeholder', originalPlaceholder);\n+            } else {\n+              iElement.removeAttr('placeholder');\n+            }\n \n-        function uninitialize() {\n-          maskProcessed = false;\n-          unbindEventListeners();\n+            if (angular.isDefined(originalMaxlength)) {\n+              iElement.attr('maxlength', originalMaxlength);\n+            } else {\n+              iElement.removeAttr('maxlength');\n+            }\n \n-          if (angular.isDefined(originalPlaceholder)){\n-            iElement.attr('placeholder', originalPlaceholder);\n-          }else{\n-            iElement.removeAttr('placeholder');\n+            iElement.val(controller.$modelValue);\n+            controller.$viewValue = controller.$modelValue;\n+            return false;\n           }\n \n-          if (angular.isDefined(originalMaxlength)){\n-            iElement.attr('maxlength', originalMaxlength);\n-          }else{\n-            iElement.removeAttr('maxlength');\n+          function initializeElement(){\n+            value = oldValueUnmasked = unmaskValue(controller.$modelValue || '');\n+            valueMasked = oldValue = maskValue(value);\n+            isValid = validateValue(value);\n+            var viewValue = isValid && value.length ? valueMasked : '';\n+            if (iAttrs.maxlength) { // Double maxlength to allow pasting new val at end of mask\n+              iElement.attr('maxlength', maskCaretMap[maskCaretMap.length - 1] * 2);\n+            }\n+            iElement.attr('placeholder', maskPlaceholder);\n+            iElement.val(viewValue);\n+            controller.$viewValue = viewValue;\n+            // Not using $setViewValue so we don't clobber the model value and dirty the form\n+            // without any kind of user interaction.\n           }\n \n-          iElement.val(controller.$modelValue);\n-          controller.$viewValue = controller.$modelValue;\n-          return false;\n-        }\n-\n-        function initializeElement() {\n-          value       = oldValueUnmasked = unmaskValue(controller.$modelValue || '');\n-          valueMasked = oldValue         = maskValue(value);\n-          isValid     = validateValue(value);\n-          viewValue   = isValid && value.length ? valueMasked : '';\n-          if (iAttrs.maxlength){ // Double maxlength to allow pasting new val at end of mask\n-            iElement.attr('maxlength', maskCaretMap[maskCaretMap.length-1]*2);\n+          function bindEventListeners(){\n+            if (eventsBound) {\n+              return;\n+            }\n+            iElement.bind('blur', blurHandler);\n+            iElement.bind('mousedown mouseup', mouseDownUpHandler);\n+            iElement.bind('input keyup click', eventHandler);",
        "path": "modules/mask/mask.js",
        "position": 213,
        "original_position": 213,
        "commit_id": "80ac219226216ff0a88222c59dfbd34b7d14dc56",
        "original_commit_id": "80ac219226216ff0a88222c59dfbd34b7d14dc56",
        "user": {
            "login": "shaungrady",
            "id": 52413,
            "node_id": "MDQ6VXNlcjUyNDEz",
            "avatar_url": "https://avatars2.githubusercontent.com/u/52413?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/shaungrady",
            "html_url": "https://github.com/shaungrady",
            "followers_url": "https://api.github.com/users/shaungrady/followers",
            "following_url": "https://api.github.com/users/shaungrady/following{/other_user}",
            "gists_url": "https://api.github.com/users/shaungrady/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/shaungrady/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/shaungrady/subscriptions",
            "organizations_url": "https://api.github.com/users/shaungrady/orgs",
            "repos_url": "https://api.github.com/users/shaungrady/repos",
            "events_url": "https://api.github.com/users/shaungrady/events{/privacy}",
            "received_events_url": "https://api.github.com/users/shaungrady/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Cross-browser compatibility. The `input` event isn't supported below IE9, and IE9 doesn't fire the event on backspace. Additionally I found that the `input` event wasn't providing a `which` value in the event object. I don't recall if this was for all browsers or some, but I wrote about it in a couple of the code comments.\n",
        "created_at": "2013-06-15T04:59:27Z",
        "updated_at": "2013-06-15T04:59:27Z",
        "html_url": "https://github.com/angular-ui/ui-utils/pull/50#discussion_r4713486",
        "pull_request_url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/50",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/4713486"
            },
            "html": {
                "href": "https://github.com/angular-ui/ui-utils/pull/50#discussion_r4713486"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/50"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/4713489",
        "pull_request_review_id": null,
        "id": 4713489,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM0ODk=",
        "diff_hunk": "@@ -1,444 +1,475 @@\n /*\n  Attaches input mask onto input element\n  */\n-angular.module('ui.mask',[]).directive('uiMask', [\n-  function () {\n-    var maskDefinitions = {\n+angular.module('ui.mask',[])\n+  .value('uiMaskConfig', {\n+    'maskDefinitions': {\n       '9': /\\d/,\n       'A': /[a-zA-Z]/,\n       '*': /[a-zA-Z0-9]/\n-    };\n+    }\n+  })\n+  .directive('uiMask', ['uiMaskConfig', function (maskConfig) {\n     return {\n       priority: 100,\n       require: 'ngModel',\n       restrict: 'A',\n-      link: function (scope, iElement, iAttrs, controller) {\n-        var maskProcessed = false, eventsBound = false,\n+      compile: function uiMaskCompilingFunction(){\n+        var options = maskConfig;\n+        \n+        return function uiMaskLinkingFunction(scope, iElement, iAttrs, controller){\n+          var maskProcessed = false, eventsBound = false,\n             maskCaretMap, maskPatterns, maskPlaceholder, maskComponents,\n-            // Minimum required length of the value to be considered valid\n+          // Minimum required length of the value to be considered valid\n             minRequiredLength,\n             value, valueMasked, isValid,\n-            // Vars for initializing/uninitializing\n+          // Vars for initializing/uninitializing\n             originalPlaceholder = iAttrs.placeholder,\n-            originalMaxlength   = iAttrs.maxlength,\n-            // Vars used exclusively in eventHandler()\n+            originalMaxlength = iAttrs.maxlength,\n+          // Vars used exclusively in eventHandler()\n             oldValue, oldValueUnmasked, oldCaretPosition, oldSelectionLength;\n \n-        function initialize(maskAttr) {\n-          if (!angular.isDefined(maskAttr)){\n-            return uninitialize();\n-          }\n-          processRawMask(maskAttr);\n-          if (!maskProcessed){\n-            return uninitialize();\n+          function initialize(maskAttr){\n+            if (!angular.isDefined(maskAttr)) {\n+              return uninitialize();\n+            }\n+            processRawMask(maskAttr);\n+            if (!maskProcessed) {\n+              return uninitialize();\n+            }\n+            initializeElement();\n+            bindEventListeners();\n+            return true;\n           }\n-          initializeElement();\n-          bindEventListeners();\n-        }\n \n-        function formatter(fromModelValue) {\n-          if (!maskProcessed){\n-            return fromModelValue;\n+          function formatter(fromModelValue){\n+            if (!maskProcessed) {\n+              return fromModelValue;\n+            }\n+            value = unmaskValue(fromModelValue || '');\n+            isValid = validateValue(value);\n+            controller.$setValidity('mask', isValid);\n+            return isValid && value.length ? maskValue(value) : undefined;\n           }\n-          value   = unmaskValue(fromModelValue || '');\n-          isValid = validateValue(value);\n-          controller.$setValidity('mask', isValid);\n-          return isValid && value.length ? maskValue(value) : undefined;\n-        }\n \n-\n-        function parser(fromViewValue) {\n-          if (!maskProcessed){\n-            return fromViewValue;\n+          function parser(fromViewValue){\n+            if (!maskProcessed) {\n+              return fromViewValue;\n+            }\n+            value = unmaskValue(fromViewValue || '');\n+            isValid = validateValue(value);\n+            // We have to set viewValue manually as the reformatting of the input\n+            // value performed by eventHandler() doesn't happen until after\n+            // this parser is called, which causes what the user sees in the input\n+            // to be out-of-sync with what the controller's $viewValue is set to.\n+            controller.$viewValue = value.length ? maskValue(value) : '';\n+            controller.$setValidity('mask', isValid);\n+            if (value === '' && controller.$error.required !== undefined) {\n+              controller.$setValidity('required', false);\n+            }\n+            return isValid ? value : undefined;\n           }\n-          value     = unmaskValue(fromViewValue || '');\n-          isValid   = validateValue(value);\n-          viewValue = value.length ? maskValue(value) : '';\n-          // We have to set viewValue manually as the reformatting of the input\n-          // value performed by eventHandler() doesn't happen until after\n-          // this parser is called, which causes what the user sees in the input\n-          // to be out-of-sync with what the controller's $viewValue is set to.\n-          controller.$viewValue = viewValue;\n-          controller.$setValidity('mask', isValid);\n-          if (value === '' && controller.$error.required !== undefined){\n-            controller.$setValidity('required', false);\n+\n+          var linkOptions = {};\n+          \n+          if (iAttrs.uiOptions) {\n+            linkOptions = scope.$eval('[' + iAttrs.uiOptions + ']');\n+            if (angular.isObject(linkOptions[0])) { \n+              // we can't use angular.copy nor angular.extend, they lack the power to do a deep merge\n+              linkOptions = (function(original, current){\n+                for(var i in original) {\n+                  if (Object.prototype.hasOwnProperty.call(original, i)) {\n+                    if (!current[i]) {\n+                      current[i] = angular.copy(original[i]);\n+                    } else {\n+                      angular.extend(current[i], original[i]);\n+                    }\n+                  }\n+                }\n+                return current;\n+              })(options, linkOptions[0]);\n+            }\n+          } else {\n+            linkOptions = options;\n           }\n-          return isValid ? value : undefined;\n-        }\n \n-        iAttrs.$observe('uiMask', initialize);\n-        controller.$formatters.push(formatter);\n-        controller.$parsers.push(parser);\n+          iAttrs.$observe('uiMask', initialize);\n+          controller.$formatters.push(formatter);\n+          controller.$parsers.push(parser);\n+\n+          function uninitialize(){\n+            maskProcessed = false;\n+            unbindEventListeners();\n+\n+            if (angular.isDefined(originalPlaceholder)) {\n+              iElement.attr('placeholder', originalPlaceholder);\n+            } else {\n+              iElement.removeAttr('placeholder');\n+            }\n \n-        function uninitialize() {\n-          maskProcessed = false;\n-          unbindEventListeners();\n+            if (angular.isDefined(originalMaxlength)) {\n+              iElement.attr('maxlength', originalMaxlength);\n+            } else {\n+              iElement.removeAttr('maxlength');\n+            }\n \n-          if (angular.isDefined(originalPlaceholder)){\n-            iElement.attr('placeholder', originalPlaceholder);\n-          }else{\n-            iElement.removeAttr('placeholder');\n+            iElement.val(controller.$modelValue);\n+            controller.$viewValue = controller.$modelValue;\n+            return false;\n           }\n \n-          if (angular.isDefined(originalMaxlength)){\n-            iElement.attr('maxlength', originalMaxlength);\n-          }else{\n-            iElement.removeAttr('maxlength');\n+          function initializeElement(){\n+            value = oldValueUnmasked = unmaskValue(controller.$modelValue || '');\n+            valueMasked = oldValue = maskValue(value);\n+            isValid = validateValue(value);\n+            var viewValue = isValid && value.length ? valueMasked : '';\n+            if (iAttrs.maxlength) { // Double maxlength to allow pasting new val at end of mask\n+              iElement.attr('maxlength', maskCaretMap[maskCaretMap.length - 1] * 2);\n+            }\n+            iElement.attr('placeholder', maskPlaceholder);\n+            iElement.val(viewValue);\n+            controller.$viewValue = viewValue;\n+            // Not using $setViewValue so we don't clobber the model value and dirty the form\n+            // without any kind of user interaction.\n           }\n \n-          iElement.val(controller.$modelValue);\n-          controller.$viewValue = controller.$modelValue;\n-          return false;\n-        }\n-\n-        function initializeElement() {\n-          value       = oldValueUnmasked = unmaskValue(controller.$modelValue || '');\n-          valueMasked = oldValue         = maskValue(value);\n-          isValid     = validateValue(value);\n-          viewValue   = isValid && value.length ? valueMasked : '';\n-          if (iAttrs.maxlength){ // Double maxlength to allow pasting new val at end of mask\n-            iElement.attr('maxlength', maskCaretMap[maskCaretMap.length-1]*2);\n+          function bindEventListeners(){\n+            if (eventsBound) {\n+              return;\n+            }\n+            iElement.bind('blur', blurHandler);\n+            iElement.bind('mousedown mouseup', mouseDownUpHandler);\n+            iElement.bind('input keyup click', eventHandler);",
        "path": "modules/mask/mask.js",
        "position": 213,
        "original_position": 213,
        "commit_id": "80ac219226216ff0a88222c59dfbd34b7d14dc56",
        "original_commit_id": "80ac219226216ff0a88222c59dfbd34b7d14dc56",
        "user": {
            "login": "shaungrady",
            "id": 52413,
            "node_id": "MDQ6VXNlcjUyNDEz",
            "avatar_url": "https://avatars2.githubusercontent.com/u/52413?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/shaungrady",
            "html_url": "https://github.com/shaungrady",
            "followers_url": "https://api.github.com/users/shaungrady/followers",
            "following_url": "https://api.github.com/users/shaungrady/following{/other_user}",
            "gists_url": "https://api.github.com/users/shaungrady/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/shaungrady/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/shaungrady/subscriptions",
            "organizations_url": "https://api.github.com/users/shaungrady/orgs",
            "repos_url": "https://api.github.com/users/shaungrady/repos",
            "events_url": "https://api.github.com/users/shaungrady/events{/privacy}",
            "received_events_url": "https://api.github.com/users/shaungrady/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The `click` listener is used purely for nudging the caret leftward to the nearest non-mask character if the user placed the caret to the immediate right of a mask character. The reasoning behind this is that a user is arguably more likely to backspace a character on a filled input when clicking into it, so placing the caret in front of a deletable char makes the most sense. \n",
        "created_at": "2013-06-15T05:02:58Z",
        "updated_at": "2013-06-15T05:02:58Z",
        "html_url": "https://github.com/angular-ui/ui-utils/pull/50#discussion_r4713489",
        "pull_request_url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/50",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/4713489"
            },
            "html": {
                "href": "https://github.com/angular-ui/ui-utils/pull/50#discussion_r4713489"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/50"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/5122851",
        "pull_request_review_id": null,
        "id": 5122851,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI4NTE=",
        "diff_hunk": "@@ -13,10 +13,10 @@ angular.module('ui.scrollfix',[]).directive('uiScrollfix', ['$window', function\n           $target = uiScrollfixTarget && uiScrollfixTarget.$element || angular.element($window);\n       if (!attrs.uiScrollfix) {\n         attrs.uiScrollfix = top;\n-      } else {\n-        // chartAt is generally faster than indexOf: http://jsperf.com/indexof-vs-chartat\n+      } else if (typeof(attrs.uiScrollfix) === 'string') {\n+        // charAt is generally faster than indexOf: http://jsperf.com/indexof-vs-charat\n         if (attrs.uiScrollfix.charAt(0) === '-') {",
        "path": "modules/scrollfix/scrollfix.js",
        "position": 8,
        "original_position": 8,
        "commit_id": "151baa42d39f94c5afe4e28cef7a6ac23ee503a5",
        "original_commit_id": "151baa42d39f94c5afe4e28cef7a6ac23ee503a5",
        "user": {
            "login": "ProLoser",
            "id": 67395,
            "node_id": "MDQ6VXNlcjY3Mzk1",
            "avatar_url": "https://avatars0.githubusercontent.com/u/67395?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ProLoser",
            "html_url": "https://github.com/ProLoser",
            "followers_url": "https://api.github.com/users/ProLoser/followers",
            "following_url": "https://api.github.com/users/ProLoser/following{/other_user}",
            "gists_url": "https://api.github.com/users/ProLoser/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ProLoser/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ProLoser/subscriptions",
            "organizations_url": "https://api.github.com/users/ProLoser/orgs",
            "repos_url": "https://api.github.com/users/ProLoser/repos",
            "events_url": "https://api.github.com/users/ProLoser/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ProLoser/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This might be neurotic and is completely optional, but is there a reason not to use `attrs.uiScrollfix[0]`\n",
        "created_at": "2013-07-10T18:29:22Z",
        "updated_at": "2013-07-10T18:29:22Z",
        "html_url": "https://github.com/angular-ui/ui-utils/pull/66#discussion_r5122851",
        "pull_request_url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/66",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/5122851"
            },
            "html": {
                "href": "https://github.com/angular-ui/ui-utils/pull/66#discussion_r5122851"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/66"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/5124443",
        "pull_request_review_id": null,
        "id": 5124443,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ0NDM=",
        "diff_hunk": "@@ -13,10 +13,10 @@ angular.module('ui.scrollfix',[]).directive('uiScrollfix', ['$window', function\n           $target = uiScrollfixTarget && uiScrollfixTarget.$element || angular.element($window);\n       if (!attrs.uiScrollfix) {\n         attrs.uiScrollfix = top;\n-      } else {\n-        // chartAt is generally faster than indexOf: http://jsperf.com/indexof-vs-chartat\n+      } else if (typeof(attrs.uiScrollfix) === 'string') {\n+        // charAt is generally faster than indexOf: http://jsperf.com/indexof-vs-charat\n         if (attrs.uiScrollfix.charAt(0) === '-') {",
        "path": "modules/scrollfix/scrollfix.js",
        "position": 8,
        "original_position": 8,
        "commit_id": "151baa42d39f94c5afe4e28cef7a6ac23ee503a5",
        "original_commit_id": "151baa42d39f94c5afe4e28cef7a6ac23ee503a5",
        "user": {
            "login": "aleksihakli",
            "id": 2477934,
            "node_id": "MDQ6VXNlcjI0Nzc5MzQ=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/2477934?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aleksihakli",
            "html_url": "https://github.com/aleksihakli",
            "followers_url": "https://api.github.com/users/aleksihakli/followers",
            "following_url": "https://api.github.com/users/aleksihakli/following{/other_user}",
            "gists_url": "https://api.github.com/users/aleksihakli/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/aleksihakli/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/aleksihakli/subscriptions",
            "organizations_url": "https://api.github.com/users/aleksihakli/orgs",
            "repos_url": "https://api.github.com/users/aleksihakli/repos",
            "events_url": "https://api.github.com/users/aleksihakli/events{/privacy}",
            "received_events_url": "https://api.github.com/users/aleksihakli/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I tried to make minimal alterations to the source code, but [bracket notation for strings is a recent addition to ECMAScript](http://stackoverflow.com/questions/5943726/string-charatx-or-stringx). In addition to that, [charAt seems to compare well in speed](http://jsperf.com/charat-vs-array/3) and is an actual string method in older standards as well. \n",
        "created_at": "2013-07-10T19:21:15Z",
        "updated_at": "2013-07-10T19:21:15Z",
        "html_url": "https://github.com/angular-ui/ui-utils/pull/66#discussion_r5124443",
        "pull_request_url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/66",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/5124443"
            },
            "html": {
                "href": "https://github.com/angular-ui/ui-utils/pull/66#discussion_r5124443"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/66"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/7068211",
        "pull_request_review_id": null,
        "id": 7068211,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNjgyMTE=",
        "diff_hunk": "@@ -11,11 +11,28 @@ describe('uiScrollfix', function () {\n   }));\n \n   describe('compiling this directive', function () {\n-    it('should bind to window \"scroll\" event', function () {\n-      spyOn($.fn, 'bind');\n+    it('should bind and unbind to window \"scroll\" event in the absence of a uiScrollfixTarget', function () {\n+      spyOn($.fn, 'on').andCallThrough();\n       $compile('<div ui-scrollfix=\"100\"></div>')(scope);\n-      expect($.fn.bind).toHaveBeenCalled();\n-      expect($.fn.bind.mostRecentCall.args[0]).toBe('scroll');\n+      expect($.fn.on).toHaveBeenCalled();\n+      expect($.fn.on.mostRecentCall.args[0]).toBe('scroll');\n+      expect($._data($window, 'events')).toBeDefined();\n+      expect($._data($window, 'events').scroll.length).toBe(1);\n+      // Event must un-bind to prevent memory leaks\n+      spyOn($.fn, 'off').andCallThrough();\n+      scope.$destroy();\n+      expect($.fn.off).toHaveBeenCalled();\n+      expect($.fn.off.mostRecentCall.args[0]).toBe('scroll');\n+      expect($._data($window, 'events')).toBeUndefined();\n+    });\n+    it('should bind and unbind to a parent uiScrollfixTarget element \"scroll\" event', function() {\n+      var $elm = $compile('<div ui-scrollfix-target><div ui-scrollfix=\"100\"></div></div>')(scope);\n+      expect($._data($window, 'events')).toBeUndefined();\n+      expect($._data($elm[0], 'events')).toBeDefined();\n+      expect($._data($elm[0], 'events').scroll.length).toBe(1);\n+      // Event must un-bind to prevent memory leaks\n+      scope.$destroy();\n+      expect($._data($elm[0], 'events')).toBeUndefined();",
        "path": "modules/scrollfix/test/scrollfixSpec.js",
        "position": 29,
        "original_position": 29,
        "commit_id": "ec7dc31382a50359c92735a9d51ddb2e13ff3795",
        "original_commit_id": "ec7dc31382a50359c92735a9d51ddb2e13ff3795",
        "user": {
            "login": "kadamwhite",
            "id": 442115,
            "node_id": "MDQ6VXNlcjQ0MjExNQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/442115?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kadamwhite",
            "html_url": "https://github.com/kadamwhite",
            "followers_url": "https://api.github.com/users/kadamwhite/followers",
            "following_url": "https://api.github.com/users/kadamwhite/following{/other_user}",
            "gists_url": "https://api.github.com/users/kadamwhite/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kadamwhite/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kadamwhite/subscriptions",
            "organizations_url": "https://api.github.com/users/kadamwhite/orgs",
            "repos_url": "https://api.github.com/users/kadamwhite/repos",
            "events_url": "https://api.github.com/users/kadamwhite/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kadamwhite/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@ajpiano validated my concerns about using `$._data` here\u2014I will update this PR with a patch to leverage spies and mocks rather than relying on a private jQuery API.\n",
        "created_at": "2013-10-18T17:38:18Z",
        "updated_at": "2013-10-18T17:38:18Z",
        "html_url": "https://github.com/angular-ui/ui-utils/pull/124#discussion_r7068211",
        "pull_request_url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/124",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/7068211"
            },
            "html": {
                "href": "https://github.com/angular-ui/ui-utils/pull/124#discussion_r7068211"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/124"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/12775803",
        "pull_request_review_id": null,
        "id": 12775803,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzc1ODAz",
        "diff_hunk": "@@ -79,7 +79,7 @@ angular.module('ui.mask', [])\n             // to be out-of-sync with what the controller's $viewValue is set to.\n             controller.$viewValue = value.length ? maskValue(value) : '';\n             controller.$setValidity('mask', isValid);\n-            if (value === '' && controller.$error.required !== undefined) {\n+            if (value === '' && iAttrs.required) {",
        "path": "modules/mask/mask.js",
        "position": 5,
        "original_position": 5,
        "commit_id": "781e59e5a1fa72db91eca6a257408ffe72da0c57",
        "original_commit_id": "ba817b5e44cb1094267c2e996b88a7d3f71555fd",
        "user": {
            "login": "sjbarker",
            "id": 2990942,
            "node_id": "MDQ6VXNlcjI5OTA5NDI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/2990942?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sjbarker",
            "html_url": "https://github.com/sjbarker",
            "followers_url": "https://api.github.com/users/sjbarker/followers",
            "following_url": "https://api.github.com/users/sjbarker/following{/other_user}",
            "gists_url": "https://api.github.com/users/sjbarker/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sjbarker/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sjbarker/subscriptions",
            "organizations_url": "https://api.github.com/users/sjbarker/orgs",
            "repos_url": "https://api.github.com/users/sjbarker/repos",
            "events_url": "https://api.github.com/users/sjbarker/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sjbarker/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "A better check for whether or not the control is required, is through the attributes object. This is where the Angular `RequiredDirective` keeps track of whether or not the control is required. When checked the old way, the `parser` function may set a 'no longer required' control to fail requirement.\n",
        "created_at": "2014-05-18T19:22:21Z",
        "updated_at": "2014-05-19T01:46:41Z",
        "html_url": "https://github.com/angular-ui/ui-utils/pull/245#discussion_r12775803",
        "pull_request_url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/245",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/12775803"
            },
            "html": {
                "href": "https://github.com/angular-ui/ui-utils/pull/245#discussion_r12775803"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/245"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/12808814",
        "pull_request_review_id": null,
        "id": 12808814,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODA4ODE0",
        "diff_hunk": "@@ -113,6 +113,39 @@ describe(\"uiMask\", function () {\n       input.triggerHandler(\"input\");\n       expect(scope.x).toBe(\"\");\n     });\n+\n+    it(\"should not setValidity on required to false on a control that isn't required\", function() {",
        "path": "modules/mask/test/maskSpec.js",
        "position": 5,
        "original_position": 5,
        "commit_id": "781e59e5a1fa72db91eca6a257408ffe72da0c57",
        "original_commit_id": "781e59e5a1fa72db91eca6a257408ffe72da0c57",
        "user": {
            "login": "sjbarker",
            "id": 2990942,
            "node_id": "MDQ6VXNlcjI5OTA5NDI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/2990942?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sjbarker",
            "html_url": "https://github.com/sjbarker",
            "followers_url": "https://api.github.com/users/sjbarker/followers",
            "following_url": "https://api.github.com/users/sjbarker/following{/other_user}",
            "gists_url": "https://api.github.com/users/sjbarker/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sjbarker/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sjbarker/subscriptions",
            "organizations_url": "https://api.github.com/users/sjbarker/orgs",
            "repos_url": "https://api.github.com/users/sjbarker/repos",
            "events_url": "https://api.github.com/users/sjbarker/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sjbarker/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This test shows that there are three posibilities for required:\n- no required attribute\n- with required attribute\n- with ng-required attribute\n\nThis test determines that at no point with each control, does the mask directive mark an option control with a required error.\n",
        "created_at": "2014-05-19T18:31:06Z",
        "updated_at": "2014-05-19T18:31:06Z",
        "html_url": "https://github.com/angular-ui/ui-utils/pull/245#discussion_r12808814",
        "pull_request_url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/245",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/12808814"
            },
            "html": {
                "href": "https://github.com/angular-ui/ui-utils/pull/245#discussion_r12808814"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/245"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/18658505",
        "pull_request_review_id": null,
        "id": 18658505,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjU4NTA1",
        "diff_hunk": "@@ -63,8 +65,15 @@ angular.module('ui.mask', [])\n             }\n             value = unmaskValue(fromModelValue || '');\n             isValid = validateValue(value);\n-            controller.$setValidity('mask', isValid);\n-            return isValid && value.length ? maskValue(value) : undefined;\n+            ngModel.$setValidity('mask', isValid);\n+            return isValid && value.length ? maskValue(value) : allowInvalid(maskValue(value), undefined);",
        "path": "modules/mask/mask.js",
        "position": 25,
        "original_position": 25,
        "commit_id": "cf2e40794ce634ca865effb5993aab41d1c01945",
        "original_commit_id": "cf2e40794ce634ca865effb5993aab41d1c01945",
        "user": {
            "login": "Narretz",
            "id": 1153097,
            "node_id": "MDQ6VXNlcjExNTMwOTc=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1153097?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Narretz",
            "html_url": "https://github.com/Narretz",
            "followers_url": "https://api.github.com/users/Narretz/followers",
            "following_url": "https://api.github.com/users/Narretz/following{/other_user}",
            "gists_url": "https://api.github.com/users/Narretz/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Narretz/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Narretz/subscriptions",
            "organizations_url": "https://api.github.com/users/Narretz/orgs",
            "repos_url": "https://api.github.com/users/Narretz/repos",
            "events_url": "https://api.github.com/users/Narretz/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Narretz/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I don't think that's right. allowInvalid is only concerned with view -> model updates.\n",
        "created_at": "2014-10-09T17:00:28Z",
        "updated_at": "2014-10-09T17:00:28Z",
        "html_url": "https://github.com/angular-ui/ui-utils/pull/308#discussion_r18658505",
        "pull_request_url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/308",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/18658505"
            },
            "html": {
                "href": "https://github.com/angular-ui/ui-utils/pull/308#discussion_r18658505"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/308"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/11566317",
        "pull_request_review_id": null,
        "id": 11566317,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTY2MzE3",
        "diff_hunk": "@@ -0,0 +1,140 @@\n+\"use strict\";\n+/*\n+ * Author: Remy Alain Ticona Carbajal http://realtica.org\n+ * Description: The main objective of ng-uploader is to have a user control,\n+ * clean, simple, customizable, and above all very easy to implement.\n+ * Licence: GNU version 3\n+ */\n+\n+angular.module('ui.ng-uploader', [])\n+    .directive('ngUploader', ['$log',function ($log) {\n+        return {\n+            restrict: 'AEC',\n+            //template:'<div class=\"panel panel-info\"><div class=\"panel-heading\"><input class=\"btn btn-default\" type=\"file\" name=\"{{file.parameter}}\" multiple/></div><div class=\"panel-body\"><div ng-repeat=\"file in fileList\"  style=\"text-align:center;\" class=\"bg-primary\"><span>{{file.filename}}</span><button ng-click=\"erase(this)\" type=\"button\" class=\"close\" aria-hidden=\"true\">&times;</button><div class=\"progress\"><div min-width=\"10%\" class=\"progress-bar\" role=\"progressbar\" aria-valuenow=\"{{file.value}}\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: {{file.value}}%;\">{{file.size}}/{{file.total}}</div></div></div><button class=\"btn btn-success\" ng-click=\"startUpload()\">Upload</button></div></div>',\n+            templateUrl:'template.html',\n+            link: function($scope, element, attrs) {\n+\n+                $scope.fileList=[];\n+                $scope.concurrency=(typeof attrs.concurrency==\"undefined\")?2:attrs.concurrency;\n+                $scope.concurrency=parseInt($scope.concurrency);\n+                $scope.parameter=(typeof attrs.name==\"undefined\")?\"file\":attrs.name;\n+                $scope.activeUploads=0;\n+                $scope.getSize=function(bytes) {\n+                    var sizes = [ 'n/a', 'bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EiB', 'ZiB', 'YiB' ];\n+                    var i = +Math.floor(Math.log(bytes) / Math.log(1024));\n+                    return (bytes / Math.pow(1024, i)).toFixed(i ? 1 : 0) + ' ' + sizes[isNaN(bytes) ? 0 : i + 1];\n+                };\n+\n+                //Not $watch not supported yet by angularjs\n+                element.find(\"input\").bind(\"change\", function(e) {\n+                    var files=e.target.files;\n+                    for ( var i = 0; i < files.length; i++) {\n+                        $scope.fileList.push({\n+                            parameter:$scope.parameter,\n+                            active:false,\n+                            filename:files[i].name,\n+                            file:files[i],\n+                            value:(0/files[i].size)*100,\n+                            size:0,\n+                            total:$scope.getSize(files[i].size)\n+                        });\n+                    }\n+                    $scope.$apply();\n+                    //$scope.startUpload();\n+                });\n+\n+                $scope.erase=function(ele){\n+                    $log.info(\"file erased=\");\n+                    $scope.fileList.splice( $scope.fileList.indexOf(ele), 1 );\n+                };\n+                $scope.onProgress=function(upload, loaded){\n+                    $log.info(\"progress=\"+loaded);\n+                    upload.value=(loaded/upload.file.size)*100;\n+                    upload.size=$scope.getSize(loaded);\n+                    $scope.$apply();\n+                };\n+\n+                $scope.onCompleted=function(upload){\n+                    $log.info(\"file uploaded=\"+upload.filename);\n+                    $scope.activeUploads-=1;\n+                    $scope.fileList.splice( $scope.fileList.indexOf(upload), 1 );\n+                    $scope.$apply();\n+                    $scope.startUpload();\n+                };\n+                $scope.startUpload=function(){\n+                    $log.info(\"URL=\"+attrs.ngUploader);\n+                    for(var i=0; i< $scope.fileList.length;i++){\n+                        if ($scope.activeUploads == $scope.concurrency) {\n+                            break;\n+                        }\n+                        if($scope.fileList[i].active)\n+                            continue;\n+                        $scope.ajaxUpload($scope.fileList[i]);\n+                    }\n+                };\n+\n+                $scope.ajaxUpload=function(upload) {\n+\n+                    var xhr, formData, prop, data = \"\", key = \"\" || 'file';\n+                    //index = upload.count;\n+                    console.log('Beging upload: ' + upload.filename);\n+                    $scope.activeUploads+=1;\n+                    upload.active=true;\n+                    xhr = new window.XMLHttpRequest();\n+                    formData = new window.FormData();\n+                    xhr.open('POST', attrs.ngUploader);\n+\n+                    // Triggered when upload starts:\n+                    xhr.upload.onloadstart = function() {\n+                        // File size is not reported during start!\n+                        console.log('Upload started: ' + upload.filename);\n+                        //methods.OnStart(upload.newname);\n+                    };\n+\n+                    // Triggered many times during upload:\n+                    xhr.upload.onprogress = function(event) {\n+                        // console.dir(event);\n+                        if (!event.lengthComputable) { return; }\n+\n+                        // Update file size because it might be bigger than reported by\n+                        // the fileSize:\n+                        console.log(\"File: \" + upload.filename);\n+                        //methods.OnProgress(xhr,event.total, event.loaded, index, upload.newname,upload);",
        "path": "modules/ng-uploader/demos/ng-uploader.js",
        "position": null,
        "original_position": 102,
        "commit_id": "83f3fff0989809185aa5e2cde2a6d1cb18c00247",
        "original_commit_id": "bd36c006f57fae736f0834ea4d567564892a12ac",
        "user": {
            "login": "ProLoser",
            "id": 67395,
            "node_id": "MDQ6VXNlcjY3Mzk1",
            "avatar_url": "https://avatars0.githubusercontent.com/u/67395?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ProLoser",
            "html_url": "https://github.com/ProLoser",
            "followers_url": "https://api.github.com/users/ProLoser/followers",
            "following_url": "https://api.github.com/users/ProLoser/following{/other_user}",
            "gists_url": "https://api.github.com/users/ProLoser/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ProLoser/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ProLoser/subscriptions",
            "organizations_url": "https://api.github.com/users/ProLoser/orgs",
            "repos_url": "https://api.github.com/users/ProLoser/repos",
            "events_url": "https://api.github.com/users/ProLoser/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ProLoser/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Can you remove the vestigial code and the console.log()'s? You can use GIT to refer to the old lines, and the logs will break in some browsers (internet exploder)\n",
        "created_at": "2014-04-13T18:13:51Z",
        "updated_at": "2014-11-17T02:09:16Z",
        "html_url": "https://github.com/angular-ui/ui-utils/pull/220#discussion_r11566317",
        "pull_request_url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/220",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/11566317"
            },
            "html": {
                "href": "https://github.com/angular-ui/ui-utils/pull/220#discussion_r11566317"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/220"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/11566347",
        "pull_request_review_id": null,
        "id": 11566347,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTY2MzQ3",
        "diff_hunk": "@@ -0,0 +1,139 @@\n+\"use strict\";\n+/*\n+ * Author: Remy Alain Ticona Carbajal http://realtica.org\n+ * Description: The main objective of ng-uploader is to have a user control,\n+ * clean, simple, customizable, and above all very easy to implement.\n+ * Licence: GNU version 3\n+ */\n+\n+angular.module('ui.ng-uploader', [])\n+    .directive('ngUploader', ['$log',function ($log) {\n+        return {\n+            restrict: 'AEC',\n+            //template:'<div class=\"panel panel-info\"><div class=\"panel-heading\"><input class=\"btn btn-default\" type=\"file\" name=\"{{file.parameter}}\" multiple/></div><div class=\"panel-body\"><div ng-repeat=\"file in fileList\"  style=\"text-align:center;\" class=\"bg-primary\"><span>{{file.filename}}</span><button ng-click=\"erase(this)\" type=\"button\" class=\"close\" aria-hidden=\"true\">&times;</button><div class=\"progress\"><div min-width=\"10%\" class=\"progress-bar\" role=\"progressbar\" aria-valuenow=\"{{file.value}}\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: {{file.value}}%;\">{{file.size}}/{{file.total}}</div></div></div><button class=\"btn btn-success\" ng-click=\"startUpload()\">Upload</button></div></div>',\n+            templateUrl:'template.html',",
        "path": "modules/ng-uploader/src/ng-uploader.js",
        "position": null,
        "original_position": 14,
        "commit_id": "83f3fff0989809185aa5e2cde2a6d1cb18c00247",
        "original_commit_id": "bd36c006f57fae736f0834ea4d567564892a12ac",
        "user": {
            "login": "ProLoser",
            "id": 67395,
            "node_id": "MDQ6VXNlcjY3Mzk1",
            "avatar_url": "https://avatars0.githubusercontent.com/u/67395?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ProLoser",
            "html_url": "https://github.com/ProLoser",
            "followers_url": "https://api.github.com/users/ProLoser/followers",
            "following_url": "https://api.github.com/users/ProLoser/following{/other_user}",
            "gists_url": "https://api.github.com/users/ProLoser/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ProLoser/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ProLoser/subscriptions",
            "organizations_url": "https://api.github.com/users/ProLoser/orgs",
            "repos_url": "https://api.github.com/users/ProLoser/repos",
            "events_url": "https://api.github.com/users/ProLoser/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ProLoser/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The URL is wrong. The path of your template has changed and this should no longer be part of the directive. Also you should remove the vestigial (commented out) lines\n",
        "created_at": "2014-04-13T18:17:05Z",
        "updated_at": "2014-11-17T02:09:16Z",
        "html_url": "https://github.com/angular-ui/ui-utils/pull/220#discussion_r11566347",
        "pull_request_url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/220",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/11566347"
            },
            "html": {
                "href": "https://github.com/angular-ui/ui-utils/pull/220#discussion_r11566347"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/220"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/11566350",
        "pull_request_review_id": null,
        "id": 11566350,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTY2MzUw",
        "diff_hunk": "@@ -0,0 +1,139 @@\n+\"use strict\";\n+/*\n+ * Author: Remy Alain Ticona Carbajal http://realtica.org\n+ * Description: The main objective of ng-uploader is to have a user control,\n+ * clean, simple, customizable, and above all very easy to implement.\n+ * Licence: GNU version 3\n+ */\n+\n+angular.module('ui.ng-uploader', [])\n+    .directive('ngUploader', ['$log',function ($log) {\n+        return {\n+            restrict: 'AEC',\n+            //template:'<div class=\"panel panel-info\"><div class=\"panel-heading\"><input class=\"btn btn-default\" type=\"file\" name=\"{{file.parameter}}\" multiple/></div><div class=\"panel-body\"><div ng-repeat=\"file in fileList\"  style=\"text-align:center;\" class=\"bg-primary\"><span>{{file.filename}}</span><button ng-click=\"erase(this)\" type=\"button\" class=\"close\" aria-hidden=\"true\">&times;</button><div class=\"progress\"><div min-width=\"10%\" class=\"progress-bar\" role=\"progressbar\" aria-valuenow=\"{{file.value}}\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: {{file.value}}%;\">{{file.size}}/{{file.total}}</div></div></div><button class=\"btn btn-success\" ng-click=\"startUpload()\">Upload</button></div></div>',\n+            templateUrl:'template.html',\n+            link: function($scope, element, attrs) {\n+\n+                $scope.fileList=[];\n+                $scope.concurrency=(typeof attrs.concurrency==\"undefined\")?2:attrs.concurrency;\n+                $scope.concurrency=parseInt($scope.concurrency);\n+                $scope.parameter=(typeof attrs.name==\"undefined\")?\"file\":attrs.name;\n+                $scope.activeUploads=0;\n+                $scope.getSize=function(bytes) {\n+                    var sizes = [ 'n/a', 'bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EiB', 'ZiB', 'YiB' ];\n+                    var i = +Math.floor(Math.log(bytes) / Math.log(1024));\n+                    return (bytes / Math.pow(1024, i)).toFixed(i ? 1 : 0) + ' ' + sizes[isNaN(bytes) ? 0 : i + 1];\n+                };\n+\n+                element.find(\"input\").bind(\"change\", function(e) {",
        "path": "modules/ng-uploader/src/ng-uploader.js",
        "position": null,
        "original_position": 28,
        "commit_id": "83f3fff0989809185aa5e2cde2a6d1cb18c00247",
        "original_commit_id": "bd36c006f57fae736f0834ea4d567564892a12ac",
        "user": {
            "login": "ProLoser",
            "id": 67395,
            "node_id": "MDQ6VXNlcjY3Mzk1",
            "avatar_url": "https://avatars0.githubusercontent.com/u/67395?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ProLoser",
            "html_url": "https://github.com/ProLoser",
            "followers_url": "https://api.github.com/users/ProLoser/followers",
            "following_url": "https://api.github.com/users/ProLoser/following{/other_user}",
            "gists_url": "https://api.github.com/users/ProLoser/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ProLoser/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ProLoser/subscriptions",
            "organizations_url": "https://api.github.com/users/ProLoser/orgs",
            "repos_url": "https://api.github.com/users/ProLoser/repos",
            "events_url": "https://api.github.com/users/ProLoser/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ProLoser/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You should be using $scope.$watch or ng-change instead of `element.find()` which is needlessly creating a dependency on jQuery.\n",
        "created_at": "2014-04-13T18:17:07Z",
        "updated_at": "2014-11-17T02:09:16Z",
        "html_url": "https://github.com/angular-ui/ui-utils/pull/220#discussion_r11566350",
        "pull_request_url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/220",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/11566350"
            },
            "html": {
                "href": "https://github.com/angular-ui/ui-utils/pull/220#discussion_r11566350"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/220"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/11610849",
        "pull_request_review_id": null,
        "id": 11610849,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNjEwODQ5",
        "diff_hunk": "@@ -0,0 +1,140 @@\n+\"use strict\";\n+/*\n+ * Author: Remy Alain Ticona Carbajal http://realtica.org\n+ * Description: The main objective of ng-uploader is to have a user control,\n+ * clean, simple, customizable, and above all very easy to implement.\n+ * Licence: GNU version 3\n+ */\n+\n+angular.module('ui.ng-uploader', [])\n+    .directive('ngUploader', ['$log',function ($log) {\n+        return {\n+            restrict: 'AEC',\n+            //template:'<div class=\"panel panel-info\"><div class=\"panel-heading\"><input class=\"btn btn-default\" type=\"file\" name=\"{{file.parameter}}\" multiple/></div><div class=\"panel-body\"><div ng-repeat=\"file in fileList\"  style=\"text-align:center;\" class=\"bg-primary\"><span>{{file.filename}}</span><button ng-click=\"erase(this)\" type=\"button\" class=\"close\" aria-hidden=\"true\">&times;</button><div class=\"progress\"><div min-width=\"10%\" class=\"progress-bar\" role=\"progressbar\" aria-valuenow=\"{{file.value}}\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: {{file.value}}%;\">{{file.size}}/{{file.total}}</div></div></div><button class=\"btn btn-success\" ng-click=\"startUpload()\">Upload</button></div></div>',\n+            templateUrl:'template.html',\n+            link: function($scope, element, attrs) {\n+\n+                $scope.fileList=[];\n+                $scope.concurrency=(typeof attrs.concurrency==\"undefined\")?2:attrs.concurrency;\n+                $scope.concurrency=parseInt($scope.concurrency);\n+                $scope.parameter=(typeof attrs.name==\"undefined\")?\"file\":attrs.name;\n+                $scope.activeUploads=0;\n+                $scope.getSize=function(bytes) {\n+                    var sizes = [ 'n/a', 'bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EiB', 'ZiB', 'YiB' ];\n+                    var i = +Math.floor(Math.log(bytes) / Math.log(1024));\n+                    return (bytes / Math.pow(1024, i)).toFixed(i ? 1 : 0) + ' ' + sizes[isNaN(bytes) ? 0 : i + 1];\n+                };\n+\n+                //Not $watch not supported yet by angularjs\n+                element.find(\"input\").bind(\"change\", function(e) {\n+                    var files=e.target.files;\n+                    for ( var i = 0; i < files.length; i++) {\n+                        $scope.fileList.push({\n+                            parameter:$scope.parameter,\n+                            active:false,\n+                            filename:files[i].name,\n+                            file:files[i],\n+                            value:(0/files[i].size)*100,\n+                            size:0,\n+                            total:$scope.getSize(files[i].size)\n+                        });\n+                    }\n+                    $scope.$apply();\n+                    //$scope.startUpload();\n+                });\n+\n+                $scope.erase=function(ele){\n+                    $log.info(\"file erased=\");\n+                    $scope.fileList.splice( $scope.fileList.indexOf(ele), 1 );\n+                };\n+                $scope.onProgress=function(upload, loaded){\n+                    $log.info(\"progress=\"+loaded);\n+                    upload.value=(loaded/upload.file.size)*100;\n+                    upload.size=$scope.getSize(loaded);\n+                    $scope.$apply();\n+                };\n+\n+                $scope.onCompleted=function(upload){\n+                    $log.info(\"file uploaded=\"+upload.filename);\n+                    $scope.activeUploads-=1;\n+                    $scope.fileList.splice( $scope.fileList.indexOf(upload), 1 );\n+                    $scope.$apply();\n+                    $scope.startUpload();\n+                };\n+                $scope.startUpload=function(){\n+                    $log.info(\"URL=\"+attrs.ngUploader);\n+                    for(var i=0; i< $scope.fileList.length;i++){\n+                        if ($scope.activeUploads == $scope.concurrency) {\n+                            break;\n+                        }\n+                        if($scope.fileList[i].active)\n+                            continue;\n+                        $scope.ajaxUpload($scope.fileList[i]);\n+                    }\n+                };\n+\n+                $scope.ajaxUpload=function(upload) {\n+\n+                    var xhr, formData, prop, data = \"\", key = \"\" || 'file';\n+                    //index = upload.count;\n+                    console.log('Beging upload: ' + upload.filename);\n+                    $scope.activeUploads+=1;\n+                    upload.active=true;\n+                    xhr = new window.XMLHttpRequest();\n+                    formData = new window.FormData();\n+                    xhr.open('POST', attrs.ngUploader);\n+\n+                    // Triggered when upload starts:\n+                    xhr.upload.onloadstart = function() {\n+                        // File size is not reported during start!\n+                        console.log('Upload started: ' + upload.filename);\n+                        //methods.OnStart(upload.newname);\n+                    };\n+\n+                    // Triggered many times during upload:\n+                    xhr.upload.onprogress = function(event) {\n+                        // console.dir(event);\n+                        if (!event.lengthComputable) { return; }\n+\n+                        // Update file size because it might be bigger than reported by\n+                        // the fileSize:\n+                        console.log(\"File: \" + upload.filename);\n+                        //methods.OnProgress(xhr,event.total, event.loaded, index, upload.newname,upload);",
        "path": "modules/ng-uploader/demos/ng-uploader.js",
        "position": null,
        "original_position": 102,
        "commit_id": "83f3fff0989809185aa5e2cde2a6d1cb18c00247",
        "original_commit_id": "bd36c006f57fae736f0834ea4d567564892a12ac",
        "user": {
            "login": "realtica",
            "id": 852446,
            "node_id": "MDQ6VXNlcjg1MjQ0Ng==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/852446?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/realtica",
            "html_url": "https://github.com/realtica",
            "followers_url": "https://api.github.com/users/realtica/followers",
            "following_url": "https://api.github.com/users/realtica/following{/other_user}",
            "gists_url": "https://api.github.com/users/realtica/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/realtica/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/realtica/subscriptions",
            "organizations_url": "https://api.github.com/users/realtica/orgs",
            "repos_url": "https://api.github.com/users/realtica/repos",
            "events_url": "https://api.github.com/users/realtica/events{/privacy}",
            "received_events_url": "https://api.github.com/users/realtica/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "That's done.\n",
        "created_at": "2014-04-14T22:06:44Z",
        "updated_at": "2014-11-17T02:09:16Z",
        "html_url": "https://github.com/angular-ui/ui-utils/pull/220#discussion_r11610849",
        "pull_request_url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/220",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/11610849"
            },
            "html": {
                "href": "https://github.com/angular-ui/ui-utils/pull/220#discussion_r11610849"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/220"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/11610883",
        "pull_request_review_id": null,
        "id": 11610883,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNjEwODgz",
        "diff_hunk": "@@ -0,0 +1,139 @@\n+\"use strict\";\n+/*\n+ * Author: Remy Alain Ticona Carbajal http://realtica.org\n+ * Description: The main objective of ng-uploader is to have a user control,\n+ * clean, simple, customizable, and above all very easy to implement.\n+ * Licence: GNU version 3\n+ */\n+\n+angular.module('ui.ng-uploader', [])\n+    .directive('ngUploader', ['$log',function ($log) {\n+        return {\n+            restrict: 'AEC',\n+            //template:'<div class=\"panel panel-info\"><div class=\"panel-heading\"><input class=\"btn btn-default\" type=\"file\" name=\"{{file.parameter}}\" multiple/></div><div class=\"panel-body\"><div ng-repeat=\"file in fileList\"  style=\"text-align:center;\" class=\"bg-primary\"><span>{{file.filename}}</span><button ng-click=\"erase(this)\" type=\"button\" class=\"close\" aria-hidden=\"true\">&times;</button><div class=\"progress\"><div min-width=\"10%\" class=\"progress-bar\" role=\"progressbar\" aria-valuenow=\"{{file.value}}\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: {{file.value}}%;\">{{file.size}}/{{file.total}}</div></div></div><button class=\"btn btn-success\" ng-click=\"startUpload()\">Upload</button></div></div>',\n+            templateUrl:'template.html',",
        "path": "modules/ng-uploader/src/ng-uploader.js",
        "position": null,
        "original_position": 14,
        "commit_id": "83f3fff0989809185aa5e2cde2a6d1cb18c00247",
        "original_commit_id": "bd36c006f57fae736f0834ea4d567564892a12ac",
        "user": {
            "login": "realtica",
            "id": 852446,
            "node_id": "MDQ6VXNlcjg1MjQ0Ng==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/852446?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/realtica",
            "html_url": "https://github.com/realtica",
            "followers_url": "https://api.github.com/users/realtica/followers",
            "following_url": "https://api.github.com/users/realtica/following{/other_user}",
            "gists_url": "https://api.github.com/users/realtica/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/realtica/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/realtica/subscriptions",
            "organizations_url": "https://api.github.com/users/realtica/orgs",
            "repos_url": "https://api.github.com/users/realtica/repos",
            "events_url": "https://api.github.com/users/realtica/events{/privacy}",
            "received_events_url": "https://api.github.com/users/realtica/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ok, we have now a configurable template.\n",
        "created_at": "2014-04-14T22:07:40Z",
        "updated_at": "2014-11-17T02:09:16Z",
        "html_url": "https://github.com/angular-ui/ui-utils/pull/220#discussion_r11610883",
        "pull_request_url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/220",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/11610883"
            },
            "html": {
                "href": "https://github.com/angular-ui/ui-utils/pull/220#discussion_r11610883"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/220"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/11610941",
        "pull_request_review_id": null,
        "id": 11610941,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNjEwOTQx",
        "diff_hunk": "@@ -0,0 +1,139 @@\n+\"use strict\";\n+/*\n+ * Author: Remy Alain Ticona Carbajal http://realtica.org\n+ * Description: The main objective of ng-uploader is to have a user control,\n+ * clean, simple, customizable, and above all very easy to implement.\n+ * Licence: GNU version 3\n+ */\n+\n+angular.module('ui.ng-uploader', [])\n+    .directive('ngUploader', ['$log',function ($log) {\n+        return {\n+            restrict: 'AEC',\n+            //template:'<div class=\"panel panel-info\"><div class=\"panel-heading\"><input class=\"btn btn-default\" type=\"file\" name=\"{{file.parameter}}\" multiple/></div><div class=\"panel-body\"><div ng-repeat=\"file in fileList\"  style=\"text-align:center;\" class=\"bg-primary\"><span>{{file.filename}}</span><button ng-click=\"erase(this)\" type=\"button\" class=\"close\" aria-hidden=\"true\">&times;</button><div class=\"progress\"><div min-width=\"10%\" class=\"progress-bar\" role=\"progressbar\" aria-valuenow=\"{{file.value}}\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: {{file.value}}%;\">{{file.size}}/{{file.total}}</div></div></div><button class=\"btn btn-success\" ng-click=\"startUpload()\">Upload</button></div></div>',\n+            templateUrl:'template.html',\n+            link: function($scope, element, attrs) {\n+\n+                $scope.fileList=[];\n+                $scope.concurrency=(typeof attrs.concurrency==\"undefined\")?2:attrs.concurrency;\n+                $scope.concurrency=parseInt($scope.concurrency);\n+                $scope.parameter=(typeof attrs.name==\"undefined\")?\"file\":attrs.name;\n+                $scope.activeUploads=0;\n+                $scope.getSize=function(bytes) {\n+                    var sizes = [ 'n/a', 'bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EiB', 'ZiB', 'YiB' ];\n+                    var i = +Math.floor(Math.log(bytes) / Math.log(1024));\n+                    return (bytes / Math.pow(1024, i)).toFixed(i ? 1 : 0) + ' ' + sizes[isNaN(bytes) ? 0 : i + 1];\n+                };\n+\n+                element.find(\"input\").bind(\"change\", function(e) {",
        "path": "modules/ng-uploader/src/ng-uploader.js",
        "position": null,
        "original_position": 28,
        "commit_id": "83f3fff0989809185aa5e2cde2a6d1cb18c00247",
        "original_commit_id": "bd36c006f57fae736f0834ea4d567564892a12ac",
        "user": {
            "login": "realtica",
            "id": 852446,
            "node_id": "MDQ6VXNlcjg1MjQ0Ng==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/852446?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/realtica",
            "html_url": "https://github.com/realtica",
            "followers_url": "https://api.github.com/users/realtica/followers",
            "following_url": "https://api.github.com/users/realtica/following{/other_user}",
            "gists_url": "https://api.github.com/users/realtica/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/realtica/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/realtica/subscriptions",
            "organizations_url": "https://api.github.com/users/realtica/orgs",
            "repos_url": "https://api.github.com/users/realtica/repos",
            "events_url": "https://api.github.com/users/realtica/events{/privacy}",
            "received_events_url": "https://api.github.com/users/realtica/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "$scope.$watch and ng-change not works for input file, AngularJS do not support Input file binding yet.\n",
        "created_at": "2014-04-14T22:09:13Z",
        "updated_at": "2014-11-17T02:09:16Z",
        "html_url": "https://github.com/angular-ui/ui-utils/pull/220#discussion_r11610941",
        "pull_request_url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/220",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/11610941"
            },
            "html": {
                "href": "https://github.com/angular-ui/ui-utils/pull/220#discussion_r11610941"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/220"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/12122316",
        "pull_request_review_id": null,
        "id": 12122316,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTIyMzE2",
        "diff_hunk": "@@ -0,0 +1,18 @@\n+<!DOCTYPE html>\n+<html>\n+<head>\n+    <script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.2.14/angular.min.js\"></script>\n+    <script src=\"http://code.jquery.com/jquery.min.js\"></script>\n+    <link href=\"http://getbootstrap.com/dist/css/bootstrap.css\" rel=\"stylesheet\" type=\"text/css\" />\n+    <script src=\"http://getbootstrap.com/dist/js/bootstrap.js\"></script>\n+    <script src=\"ng-uploader.js\"></script>\n+    <meta charset=\"utf-8\">\n+    <title>Demo 1</title>\n+</head>\n+<body>\n+<div ng-app=\"myapp\" ng-uploader=\"\"></div>\n+<script>\n+    angular.module('myapp', ['ui.ng-uploader']);",
        "path": "modules/ng-uploader/demos/demo1.html",
        "position": null,
        "original_position": 15,
        "commit_id": "83f3fff0989809185aa5e2cde2a6d1cb18c00247",
        "original_commit_id": "53ca17ea5009a15368034e45e381c094acc862cc",
        "user": {
            "login": "ProLoser",
            "id": 67395,
            "node_id": "MDQ6VXNlcjY3Mzk1",
            "avatar_url": "https://avatars0.githubusercontent.com/u/67395?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ProLoser",
            "html_url": "https://github.com/ProLoser",
            "followers_url": "https://api.github.com/users/ProLoser/followers",
            "following_url": "https://api.github.com/users/ProLoser/following{/other_user}",
            "gists_url": "https://api.github.com/users/ProLoser/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ProLoser/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ProLoser/subscriptions",
            "organizations_url": "https://api.github.com/users/ProLoser/orgs",
            "repos_url": "https://api.github.com/users/ProLoser/repos",
            "events_url": "https://api.github.com/users/ProLoser/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ProLoser/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Perhaps the module can just be `ui.uploader` to be consistent with the rest of the project?\n",
        "created_at": "2014-04-29T23:15:01Z",
        "updated_at": "2014-11-17T02:09:16Z",
        "html_url": "https://github.com/angular-ui/ui-utils/pull/220#discussion_r12122316",
        "pull_request_url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/220",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/12122316"
            },
            "html": {
                "href": "https://github.com/angular-ui/ui-utils/pull/220#discussion_r12122316"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/220"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/12122345",
        "pull_request_review_id": null,
        "id": 12122345,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTIyMzQ1",
        "diff_hunk": "@@ -0,0 +1,127 @@\n+'use strict';\n+/*\n+ * Author: Remy Alain Ticona Carbajal http://realtica.org\n+ * Description: The main objective of ng-uploader is to have a user control,\n+ * clean, simple, customizable, and above all very easy to implement.\n+ * Licence: MIT\n+ */\n+\n+angular.module('ui.ng-uploader', [])\n+    .directive('ngUploader', ['$log', function ($log) {",
        "path": "modules/ng-uploader/src/ng-uploader.js",
        "position": null,
        "original_position": 10,
        "commit_id": "83f3fff0989809185aa5e2cde2a6d1cb18c00247",
        "original_commit_id": "53ca17ea5009a15368034e45e381c094acc862cc",
        "user": {
            "login": "ProLoser",
            "id": 67395,
            "node_id": "MDQ6VXNlcjY3Mzk1",
            "avatar_url": "https://avatars0.githubusercontent.com/u/67395?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ProLoser",
            "html_url": "https://github.com/ProLoser",
            "followers_url": "https://api.github.com/users/ProLoser/followers",
            "following_url": "https://api.github.com/users/ProLoser/following{/other_user}",
            "gists_url": "https://api.github.com/users/ProLoser/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ProLoser/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ProLoser/subscriptions",
            "organizations_url": "https://api.github.com/users/ProLoser/orgs",
            "repos_url": "https://api.github.com/users/ProLoser/repos",
            "events_url": "https://api.github.com/users/ProLoser/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ProLoser/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I still feel you should be using `uiUploader` as this is considered best practice in the angular community.\n",
        "created_at": "2014-04-29T23:15:40Z",
        "updated_at": "2014-11-17T02:09:16Z",
        "html_url": "https://github.com/angular-ui/ui-utils/pull/220#discussion_r12122345",
        "pull_request_url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/220",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/12122345"
            },
            "html": {
                "href": "https://github.com/angular-ui/ui-utils/pull/220#discussion_r12122345"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/220"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/12122412",
        "pull_request_review_id": null,
        "id": 12122412,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTIyNDEy",
        "diff_hunk": "@@ -0,0 +1,127 @@\n+'use strict';",
        "path": "modules/ng-uploader/demos/ng-uploader.js",
        "position": null,
        "original_position": 1,
        "commit_id": "83f3fff0989809185aa5e2cde2a6d1cb18c00247",
        "original_commit_id": "53ca17ea5009a15368034e45e381c094acc862cc",
        "user": {
            "login": "ProLoser",
            "id": 67395,
            "node_id": "MDQ6VXNlcjY3Mzk1",
            "avatar_url": "https://avatars0.githubusercontent.com/u/67395?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ProLoser",
            "html_url": "https://github.com/ProLoser",
            "followers_url": "https://api.github.com/users/ProLoser/followers",
            "following_url": "https://api.github.com/users/ProLoser/following{/other_user}",
            "gists_url": "https://api.github.com/users/ProLoser/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ProLoser/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ProLoser/subscriptions",
            "organizations_url": "https://api.github.com/users/ProLoser/orgs",
            "repos_url": "https://api.github.com/users/ProLoser/repos",
            "events_url": "https://api.github.com/users/ProLoser/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ProLoser/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I don't think you need `demos/ng-uploader` as you can assume you have access to the original uploader file. Refer to other modules as examples.\n",
        "created_at": "2014-04-29T23:17:43Z",
        "updated_at": "2014-11-17T02:09:16Z",
        "html_url": "https://github.com/angular-ui/ui-utils/pull/220#discussion_r12122412",
        "pull_request_url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/220",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/12122412"
            },
            "html": {
                "href": "https://github.com/angular-ui/ui-utils/pull/220#discussion_r12122412"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/220"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/12122450",
        "pull_request_review_id": null,
        "id": 12122450,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTIyNDUw",
        "diff_hunk": "@@ -0,0 +1,127 @@\n+'use strict';\n+/*\n+ * Author: Remy Alain Ticona Carbajal http://realtica.org\n+ * Description: The main objective of ng-uploader is to have a user control,\n+ * clean, simple, customizable, and above all very easy to implement.\n+ * Licence: MIT\n+ */\n+\n+angular.module('ui.ng-uploader', [])\n+    .directive('ngUploader', ['$log', function ($log) {\n+        return {\n+            restrict: 'AEC',\n+            templateUrl: function (element, attr) {\n+                return attr.templateUrl;\n+            },",
        "path": "modules/ng-uploader/src/ng-uploader.js",
        "position": null,
        "original_position": 15,
        "commit_id": "83f3fff0989809185aa5e2cde2a6d1cb18c00247",
        "original_commit_id": "53ca17ea5009a15368034e45e381c094acc862cc",
        "user": {
            "login": "ProLoser",
            "id": 67395,
            "node_id": "MDQ6VXNlcjY3Mzk1",
            "avatar_url": "https://avatars0.githubusercontent.com/u/67395?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ProLoser",
            "html_url": "https://github.com/ProLoser",
            "followers_url": "https://api.github.com/users/ProLoser/followers",
            "following_url": "https://api.github.com/users/ProLoser/following{/other_user}",
            "gists_url": "https://api.github.com/users/ProLoser/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ProLoser/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ProLoser/subscriptions",
            "organizations_url": "https://api.github.com/users/ProLoser/orgs",
            "repos_url": "https://api.github.com/users/ProLoser/repos",
            "events_url": "https://api.github.com/users/ProLoser/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ProLoser/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Is there a need to have a templateUrl attribute? Perhaps this might just be a scope utility only?\n",
        "created_at": "2014-04-29T23:18:51Z",
        "updated_at": "2014-11-17T02:09:16Z",
        "html_url": "https://github.com/angular-ui/ui-utils/pull/220#discussion_r12122450",
        "pull_request_url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/220",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/12122450"
            },
            "html": {
                "href": "https://github.com/angular-ui/ui-utils/pull/220#discussion_r12122450"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/220"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/12123027",
        "pull_request_review_id": null,
        "id": 12123027,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTIzMDI3",
        "diff_hunk": "@@ -0,0 +1,127 @@\n+'use strict';\n+/*\n+ * Author: Remy Alain Ticona Carbajal http://realtica.org\n+ * Description: The main objective of ng-uploader is to have a user control,\n+ * clean, simple, customizable, and above all very easy to implement.\n+ * Licence: MIT\n+ */\n+\n+angular.module('ui.ng-uploader', [])\n+    .directive('ngUploader', ['$log', function ($log) {\n+        return {\n+            restrict: 'AEC',\n+            templateUrl: function (element, attr) {\n+                return attr.templateUrl;\n+            },\n+            link: function ($scope, element, attrs) {\n+                $scope.fileList = [];",
        "path": "modules/ng-uploader/src/ng-uploader.js",
        "position": null,
        "original_position": 17,
        "commit_id": "83f3fff0989809185aa5e2cde2a6d1cb18c00247",
        "original_commit_id": "53ca17ea5009a15368034e45e381c094acc862cc",
        "user": {
            "login": "ProLoser",
            "id": 67395,
            "node_id": "MDQ6VXNlcjY3Mzk1",
            "avatar_url": "https://avatars0.githubusercontent.com/u/67395?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ProLoser",
            "html_url": "https://github.com/ProLoser",
            "followers_url": "https://api.github.com/users/ProLoser/followers",
            "following_url": "https://api.github.com/users/ProLoser/following{/other_user}",
            "gists_url": "https://api.github.com/users/ProLoser/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ProLoser/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ProLoser/subscriptions",
            "organizations_url": "https://api.github.com/users/ProLoser/orgs",
            "repos_url": "https://api.github.com/users/ProLoser/repos",
            "events_url": "https://api.github.com/users/ProLoser/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ProLoser/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Since you're not using a child scope, you run the risk of clobbering the developer's variables. What I recommend doing is instead putting all the values and functions you use inside a controller. Checkout this example: https://github.com/angular-ui/ui-select/blob/master/src/select.js#L297-L298 as a great way to package things.\n\nThe nifty part is this will allow other developers to inject your controller into their directive and expand upon it while gaining access to the methods and properties you use.\n",
        "created_at": "2014-04-29T23:36:54Z",
        "updated_at": "2014-11-17T02:09:16Z",
        "html_url": "https://github.com/angular-ui/ui-utils/pull/220#discussion_r12123027",
        "pull_request_url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/220",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/12123027"
            },
            "html": {
                "href": "https://github.com/angular-ui/ui-utils/pull/220#discussion_r12123027"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/220"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/13943997",
        "pull_request_review_id": null,
        "id": 13943997,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzOTQzOTk3",
        "diff_hunk": "@@ -0,0 +1,18 @@\n+<!DOCTYPE html>\n+<html>\n+<head>\n+    <script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.2.14/angular.min.js\"></script>\n+    <script src=\"http://code.jquery.com/jquery.min.js\"></script>\n+    <link href=\"http://getbootstrap.com/dist/css/bootstrap.css\" rel=\"stylesheet\" type=\"text/css\" />\n+    <script src=\"http://getbootstrap.com/dist/js/bootstrap.js\"></script>\n+    <script src=\"ng-uploader.js\"></script>\n+    <meta charset=\"utf-8\">\n+    <title>Demo 1</title>\n+</head>\n+<body>\n+<div ng-app=\"myapp\" ng-uploader=\"\"></div>\n+<script>\n+    angular.module('myapp', ['ui.ng-uploader']);",
        "path": "modules/ng-uploader/demos/demo1.html",
        "position": null,
        "original_position": 15,
        "commit_id": "83f3fff0989809185aa5e2cde2a6d1cb18c00247",
        "original_commit_id": "53ca17ea5009a15368034e45e381c094acc862cc",
        "user": {
            "login": "realtica",
            "id": 852446,
            "node_id": "MDQ6VXNlcjg1MjQ0Ng==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/852446?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/realtica",
            "html_url": "https://github.com/realtica",
            "followers_url": "https://api.github.com/users/realtica/followers",
            "following_url": "https://api.github.com/users/realtica/following{/other_user}",
            "gists_url": "https://api.github.com/users/realtica/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/realtica/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/realtica/subscriptions",
            "organizations_url": "https://api.github.com/users/realtica/orgs",
            "repos_url": "https://api.github.com/users/realtica/repos",
            "events_url": "https://api.github.com/users/realtica/events{/privacy}",
            "received_events_url": "https://api.github.com/users/realtica/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ok I change that.\n",
        "created_at": "2014-06-18T22:22:01Z",
        "updated_at": "2014-11-17T02:09:16Z",
        "html_url": "https://github.com/angular-ui/ui-utils/pull/220#discussion_r13943997",
        "pull_request_url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/220",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/13943997"
            },
            "html": {
                "href": "https://github.com/angular-ui/ui-utils/pull/220#discussion_r13943997"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/220"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/13944005",
        "pull_request_review_id": null,
        "id": 13944005,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzOTQ0MDA1",
        "diff_hunk": "@@ -0,0 +1,127 @@\n+'use strict';\n+/*\n+ * Author: Remy Alain Ticona Carbajal http://realtica.org\n+ * Description: The main objective of ng-uploader is to have a user control,\n+ * clean, simple, customizable, and above all very easy to implement.\n+ * Licence: MIT\n+ */\n+\n+angular.module('ui.ng-uploader', [])\n+    .directive('ngUploader', ['$log', function ($log) {",
        "path": "modules/ng-uploader/src/ng-uploader.js",
        "position": null,
        "original_position": 10,
        "commit_id": "83f3fff0989809185aa5e2cde2a6d1cb18c00247",
        "original_commit_id": "53ca17ea5009a15368034e45e381c094acc862cc",
        "user": {
            "login": "realtica",
            "id": 852446,
            "node_id": "MDQ6VXNlcjg1MjQ0Ng==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/852446?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/realtica",
            "html_url": "https://github.com/realtica",
            "followers_url": "https://api.github.com/users/realtica/followers",
            "following_url": "https://api.github.com/users/realtica/following{/other_user}",
            "gists_url": "https://api.github.com/users/realtica/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/realtica/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/realtica/subscriptions",
            "organizations_url": "https://api.github.com/users/realtica/orgs",
            "repos_url": "https://api.github.com/users/realtica/repos",
            "events_url": "https://api.github.com/users/realtica/events{/privacy}",
            "received_events_url": "https://api.github.com/users/realtica/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ok I change that.\n",
        "created_at": "2014-06-18T22:22:08Z",
        "updated_at": "2014-11-17T02:09:16Z",
        "html_url": "https://github.com/angular-ui/ui-utils/pull/220#discussion_r13944005",
        "pull_request_url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/220",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/13944005"
            },
            "html": {
                "href": "https://github.com/angular-ui/ui-utils/pull/220#discussion_r13944005"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/220"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/13944047",
        "pull_request_review_id": null,
        "id": 13944047,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzOTQ0MDQ3",
        "diff_hunk": "@@ -0,0 +1,127 @@\n+'use strict';",
        "path": "modules/ng-uploader/demos/ng-uploader.js",
        "position": null,
        "original_position": 1,
        "commit_id": "83f3fff0989809185aa5e2cde2a6d1cb18c00247",
        "original_commit_id": "53ca17ea5009a15368034e45e381c094acc862cc",
        "user": {
            "login": "realtica",
            "id": 852446,
            "node_id": "MDQ6VXNlcjg1MjQ0Ng==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/852446?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/realtica",
            "html_url": "https://github.com/realtica",
            "followers_url": "https://api.github.com/users/realtica/followers",
            "following_url": "https://api.github.com/users/realtica/following{/other_user}",
            "gists_url": "https://api.github.com/users/realtica/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/realtica/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/realtica/subscriptions",
            "organizations_url": "https://api.github.com/users/realtica/orgs",
            "repos_url": "https://api.github.com/users/realtica/repos",
            "events_url": "https://api.github.com/users/realtica/events{/privacy}",
            "received_events_url": "https://api.github.com/users/realtica/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yes you are right.\n",
        "created_at": "2014-06-18T22:22:58Z",
        "updated_at": "2014-11-17T02:09:16Z",
        "html_url": "https://github.com/angular-ui/ui-utils/pull/220#discussion_r13944047",
        "pull_request_url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/220",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/13944047"
            },
            "html": {
                "href": "https://github.com/angular-ui/ui-utils/pull/220#discussion_r13944047"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/220"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/13944664",
        "pull_request_review_id": null,
        "id": 13944664,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzOTQ0NjY0",
        "diff_hunk": "@@ -0,0 +1,127 @@\n+'use strict';\n+/*\n+ * Author: Remy Alain Ticona Carbajal http://realtica.org\n+ * Description: The main objective of ng-uploader is to have a user control,\n+ * clean, simple, customizable, and above all very easy to implement.\n+ * Licence: MIT\n+ */\n+\n+angular.module('ui.ng-uploader', [])\n+    .directive('ngUploader', ['$log', function ($log) {\n+        return {\n+            restrict: 'AEC',\n+            templateUrl: function (element, attr) {\n+                return attr.templateUrl;\n+            },",
        "path": "modules/ng-uploader/src/ng-uploader.js",
        "position": null,
        "original_position": 15,
        "commit_id": "83f3fff0989809185aa5e2cde2a6d1cb18c00247",
        "original_commit_id": "53ca17ea5009a15368034e45e381c094acc862cc",
        "user": {
            "login": "realtica",
            "id": 852446,
            "node_id": "MDQ6VXNlcjg1MjQ0Ng==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/852446?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/realtica",
            "html_url": "https://github.com/realtica",
            "followers_url": "https://api.github.com/users/realtica/followers",
            "following_url": "https://api.github.com/users/realtica/following{/other_user}",
            "gists_url": "https://api.github.com/users/realtica/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/realtica/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/realtica/subscriptions",
            "organizations_url": "https://api.github.com/users/realtica/orgs",
            "repos_url": "https://api.github.com/users/realtica/repos",
            "events_url": "https://api.github.com/users/realtica/events{/privacy}",
            "received_events_url": "https://api.github.com/users/realtica/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "What do you think is the best? \n-Give to developer templates to use.\n-Give to developer, methods to work.\n-or..\n",
        "created_at": "2014-06-18T22:39:12Z",
        "updated_at": "2014-11-17T02:09:16Z",
        "html_url": "https://github.com/angular-ui/ui-utils/pull/220#discussion_r13944664",
        "pull_request_url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/220",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/13944664"
            },
            "html": {
                "href": "https://github.com/angular-ui/ui-utils/pull/220#discussion_r13944664"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/220"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/13944759",
        "pull_request_review_id": null,
        "id": 13944759,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzOTQ0NzU5",
        "diff_hunk": "@@ -0,0 +1,127 @@\n+'use strict';\n+/*\n+ * Author: Remy Alain Ticona Carbajal http://realtica.org\n+ * Description: The main objective of ng-uploader is to have a user control,\n+ * clean, simple, customizable, and above all very easy to implement.\n+ * Licence: MIT\n+ */\n+\n+angular.module('ui.ng-uploader', [])\n+    .directive('ngUploader', ['$log', function ($log) {\n+        return {\n+            restrict: 'AEC',\n+            templateUrl: function (element, attr) {\n+                return attr.templateUrl;\n+            },\n+            link: function ($scope, element, attrs) {\n+                $scope.fileList = [];",
        "path": "modules/ng-uploader/src/ng-uploader.js",
        "position": null,
        "original_position": 17,
        "commit_id": "83f3fff0989809185aa5e2cde2a6d1cb18c00247",
        "original_commit_id": "53ca17ea5009a15368034e45e381c094acc862cc",
        "user": {
            "login": "realtica",
            "id": 852446,
            "node_id": "MDQ6VXNlcjg1MjQ0Ng==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/852446?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/realtica",
            "html_url": "https://github.com/realtica",
            "followers_url": "https://api.github.com/users/realtica/followers",
            "following_url": "https://api.github.com/users/realtica/following{/other_user}",
            "gists_url": "https://api.github.com/users/realtica/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/realtica/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/realtica/subscriptions",
            "organizations_url": "https://api.github.com/users/realtica/orgs",
            "repos_url": "https://api.github.com/users/realtica/repos",
            "events_url": "https://api.github.com/users/realtica/events{/privacy}",
            "received_events_url": "https://api.github.com/users/realtica/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ok thanks, I do that.\n",
        "created_at": "2014-06-18T22:42:20Z",
        "updated_at": "2014-11-17T02:09:16Z",
        "html_url": "https://github.com/angular-ui/ui-utils/pull/220#discussion_r13944759",
        "pull_request_url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/220",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/13944759"
            },
            "html": {
                "href": "https://github.com/angular-ui/ui-utils/pull/220#discussion_r13944759"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/220"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/13948358",
        "pull_request_review_id": null,
        "id": 13948358,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzOTQ4MzU4",
        "diff_hunk": "@@ -0,0 +1,127 @@\n+'use strict';\n+/*\n+ * Author: Remy Alain Ticona Carbajal http://realtica.org\n+ * Description: The main objective of ng-uploader is to have a user control,\n+ * clean, simple, customizable, and above all very easy to implement.\n+ * Licence: MIT\n+ */\n+\n+angular.module('ui.ng-uploader', [])\n+    .directive('ngUploader', ['$log', function ($log) {\n+        return {\n+            restrict: 'AEC',\n+            templateUrl: function (element, attr) {\n+                return attr.templateUrl;\n+            },",
        "path": "modules/ng-uploader/src/ng-uploader.js",
        "position": null,
        "original_position": 15,
        "commit_id": "83f3fff0989809185aa5e2cde2a6d1cb18c00247",
        "original_commit_id": "53ca17ea5009a15368034e45e381c094acc862cc",
        "user": {
            "login": "ProLoser",
            "id": 67395,
            "node_id": "MDQ6VXNlcjY3Mzk1",
            "avatar_url": "https://avatars0.githubusercontent.com/u/67395?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ProLoser",
            "html_url": "https://github.com/ProLoser",
            "followers_url": "https://api.github.com/users/ProLoser/followers",
            "following_url": "https://api.github.com/users/ProLoser/following{/other_user}",
            "gists_url": "https://api.github.com/users/ProLoser/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ProLoser/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ProLoser/subscriptions",
            "organizations_url": "https://api.github.com/users/ProLoser/orgs",
            "repos_url": "https://api.github.com/users/ProLoser/repos",
            "events_url": "https://api.github.com/users/ProLoser/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ProLoser/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think you're better off providing methods. I think people are going to wish to customize this so much and it's so simple to create templates for this that there isn't a big need for you to provide them.\n",
        "created_at": "2014-06-19T00:27:17Z",
        "updated_at": "2014-11-17T02:09:16Z",
        "html_url": "https://github.com/angular-ui/ui-utils/pull/220#discussion_r13948358",
        "pull_request_url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/220",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/13948358"
            },
            "html": {
                "href": "https://github.com/angular-ui/ui-utils/pull/220#discussion_r13948358"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/220"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/31695182",
        "pull_request_review_id": null,
        "id": 31695182,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNjk1MTgy",
        "diff_hunk": "@@ -17,6 +17,7 @@ function uiUploader($log) {\n     self.files = [];\n     self.options = {};\n     self.activeUploads = 0;\n+    self.uploadedFiles = 0;",
        "path": "modules/uploader/uploader.js",
        "position": 4,
        "original_position": 4,
        "commit_id": "7fe8c28ac35350a150e4fbbfdb1864ad927422a5",
        "original_commit_id": "7fe8c28ac35350a150e4fbbfdb1864ad927422a5",
        "user": {
            "login": "Z3R084",
            "id": 4097275,
            "node_id": "MDQ6VXNlcjQwOTcyNzU=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/4097275?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Z3R084",
            "html_url": "https://github.com/Z3R084",
            "followers_url": "https://api.github.com/users/Z3R084/followers",
            "following_url": "https://api.github.com/users/Z3R084/following{/other_user}",
            "gists_url": "https://api.github.com/users/Z3R084/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Z3R084/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Z3R084/subscriptions",
            "organizations_url": "https://api.github.com/users/Z3R084/orgs",
            "repos_url": "https://api.github.com/users/Z3R084/repos",
            "events_url": "https://api.github.com/users/Z3R084/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Z3R084/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Used for counting the uploaded files\n",
        "created_at": "2015-06-04T06:01:19Z",
        "updated_at": "2015-06-04T06:01:19Z",
        "html_url": "https://github.com/angular-ui/ui-utils/pull/404#discussion_r31695182",
        "pull_request_url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/404",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/31695182"
            },
            "html": {
                "href": "https://github.com/angular-ui/ui-utils/pull/404#discussion_r31695182"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/404"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/31695251",
        "pull_request_review_id": null,
        "id": 31695251,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNjk1MjUx",
        "diff_hunk": "@@ -94,8 +95,13 @@ function uiUploader($log) {\n         // Triggered when upload is completed:\n         xhr.onload = function() {\n             self.activeUploads -= 1;\n+            self.uploadedFiles += 1;",
        "path": "modules/uploader/uploader.js",
        "position": 12,
        "original_position": 12,
        "commit_id": "7fe8c28ac35350a150e4fbbfdb1864ad927422a5",
        "original_commit_id": "7fe8c28ac35350a150e4fbbfdb1864ad927422a5",
        "user": {
            "login": "Z3R084",
            "id": 4097275,
            "node_id": "MDQ6VXNlcjQwOTcyNzU=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/4097275?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Z3R084",
            "html_url": "https://github.com/Z3R084",
            "followers_url": "https://api.github.com/users/Z3R084/followers",
            "following_url": "https://api.github.com/users/Z3R084/following{/other_user}",
            "gists_url": "https://api.github.com/users/Z3R084/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Z3R084/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Z3R084/subscriptions",
            "organizations_url": "https://api.github.com/users/Z3R084/orgs",
            "repos_url": "https://api.github.com/users/Z3R084/repos",
            "events_url": "https://api.github.com/users/Z3R084/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Z3R084/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Increase amount of uploaded files\n",
        "created_at": "2015-06-04T06:03:58Z",
        "updated_at": "2015-06-04T06:03:58Z",
        "html_url": "https://github.com/angular-ui/ui-utils/pull/404#discussion_r31695251",
        "pull_request_url": "https://api.github.com/repos/angular-ui/ui-utils/pulls/404",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/comments/31695251"
            },
            "html": {
                "href": "https://github.com/angular-ui/ui-utils/pull/404#discussion_r31695251"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/angular-ui/ui-utils/pulls/404"
            }
        }
    }
]