[
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81011486",
        "pull_request_review_id": 2024007,
        "id": 81011486,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxMDExNDg2",
        "diff_hunk": "@@ -0,0 +1,43 @@\n+branches:\n+  only:\n+    - master\n+    - /^release-.*$/",
        "path": ".travis.yml",
        "position": 4,
        "original_position": 4,
        "commit_id": "54c25ec1812a77888e1c13873c40e90925aab202",
        "original_commit_id": "54c25ec1812a77888e1c13873c40e90925aab202",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Nice!\n",
        "created_at": "2016-09-28T20:38:24Z",
        "updated_at": "2016-09-28T20:42:37Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/1#discussion_r81011486",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/1",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81011486"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/1#discussion_r81011486"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/1"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81011817",
        "pull_request_review_id": 2024007,
        "id": 81011817,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxMDExODE3",
        "diff_hunk": "@@ -41,14 +39,45 @@ platform :ios do\n   end\n \n \n-  desc 'Run all CI jobs'\n+  desc 'Lint the source code and other linteable artifacts'\n+  lane :lint do\n+    # pod_lib_lint",
        "path": "fastlane/Fastfile",
        "position": 13,
        "original_position": 13,
        "commit_id": "54c25ec1812a77888e1c13873c40e90925aab202",
        "original_commit_id": "54c25ec1812a77888e1c13873c40e90925aab202",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I guess this is coming later?\n",
        "created_at": "2016-09-28T20:40:07Z",
        "updated_at": "2016-09-28T20:42:37Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/1#discussion_r81011817",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/1",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81011817"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/1#discussion_r81011817"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/1"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81011947",
        "pull_request_review_id": 2024007,
        "id": 81011947,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxMDExOTQ3",
        "diff_hunk": "@@ -41,14 +39,45 @@ platform :ios do\n   end\n \n \n-  desc 'Run all CI jobs'\n+  desc 'Lint the source code and other linteable artifacts'\n+  lane :lint do\n+    # pod_lib_lint\n+  end\n+\n+\n+  desc 'Update documentation and publish them'\n+  lane :update_docs do\n+    sh \"cd .. && rake docs:generate\"\n+  end\n+\n+\n+  desc 'Execute all CI lanes'\n+  desc 'This action can be configured using the following environment variable:'\n+  desc ''\n+  desc '- LINT:           Whether the sources and certain artifacts should be linted,'\n+  desc '                  defaults to `YES`.'\n+  desc '- RUN_TESTS:      Whether unit tests should be ran, defaults to `YES`.'",
        "path": "fastlane/Fastfile",
        "position": 28,
        "original_position": 28,
        "commit_id": "54c25ec1812a77888e1c13873c40e90925aab202",
        "original_commit_id": "54c25ec1812a77888e1c13873c40e90925aab202",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\"should be run\", \"ran\" is in the past :)\n",
        "created_at": "2016-09-28T20:40:42Z",
        "updated_at": "2016-09-28T20:42:37Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/1#discussion_r81011947",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/1",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81011947"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/1#discussion_r81011947"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/1"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81012200",
        "pull_request_review_id": 2024007,
        "id": 81012200,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxMDEyMjAw",
        "diff_hunk": "@@ -16,11 +16,35 @@ Run unit tests\n fastlane ios demo\n ```\n Build the demo app\n+### ios lint\n+```\n+fastlane ios lint\n+```\n+Lint the source code and other linteable artifacts\n+### ios update_docs\n+```\n+fastlane ios update_docs\n+```\n+Update documentation and publish them\n ### ios ci_all\n ```\n fastlane ios ci_all\n ```\n-Run all CI jobs\n+Execute all CI lanes\n+\n+This action can be configured using the following environment variable:\n+\n+\n+\n+- LINT:           Whether the sources and certain artifacts should be linted,\n+\n+                  defaults to `YES`.\n+\n+- RUN_TESTS:      Whether unit tests should be ran, defaults to `YES`.",
        "path": "fastlane/README.md",
        "position": 29,
        "original_position": 29,
        "commit_id": "54c25ec1812a77888e1c13873c40e90925aab202",
        "original_commit_id": "54c25ec1812a77888e1c13873c40e90925aab202",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Same comment here as for the in-code docs. \"Run\" instead of \"ran\".\n",
        "created_at": "2016-09-28T20:41:45Z",
        "updated_at": "2016-09-28T20:42:37Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/1#discussion_r81012200",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/1",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81012200"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/1#discussion_r81012200"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/1"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/80977498",
        "pull_request_review_id": 1992412,
        "id": 80977498,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgwOTc3NDk4",
        "diff_hunk": "@@ -0,0 +1,32 @@\n+Pod::Spec.new do |s|\n+\n+    s.name         = \"HubFramework\"\n+    s.version      = \"2.0\"",
        "path": "HubFramework.podspec",
        "position": null,
        "original_position": 4,
        "commit_id": "50af845dde4c173cc8cf4d7f4e79525f4dcba1ae",
        "original_commit_id": "87702b538ebc8e1b8ce95b7e82b5233bdbc9815b",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "We probably want this to be set to `2.0.0` and we might want to tag that later as well.\n",
        "created_at": "2016-09-28T17:50:43Z",
        "updated_at": "2016-09-28T20:46:12Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/6#discussion_r80977498",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/6",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/80977498"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/6#discussion_r80977498"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/6"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/80977745",
        "pull_request_review_id": 1992412,
        "id": 80977745,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgwOTc3NzQ1",
        "diff_hunk": "@@ -0,0 +1,32 @@\n+Pod::Spec.new do |s|\n+\n+    s.name         = \"HubFramework\"\n+    s.version      = \"2.0\"\n+    s.summary      = \"Spotify's component-driven UI framework for iOS\"\n+\n+    s.description  = <<-DESC\n+                        The Hub Framework is a toolkit for building native,\n+                        component-driven UIs on iOS. It is designed to enable\n+                        teams of any size to quickly build, tweak and ship new\n+                        UI features, in either new or existing apps. It also\n+                        makes it easy to build backend-driven UIs.\n+                     DESC\n+\n+    s.ios.deployment_target     = \"8.0\"\n+\n+    s.homepage          = \"https://github.com/spotify/HubFramework\"\n+    s.social_media_url  = \"https://twitter.com/spotifyeng\"\n+    s.license           = \"Apache 2.0\"\n+    s.author            = {\n+        \"John Sundell\" => \"josu@spotify.com\"\n+    }\n+\n+    s.source                = { :git => \"https://github.com/spotify/HubFramework.git\", :tag => s.version }\n+    s.source_files          = \"include/HubFramework/*.h\", \"HubFramework/*.{h,m}\"\n+    s.public_header_files   = \"include/HubFramework/*.h\"\n+    s.frameworks            = \"UIKit\", \"SystemConfiguration\"",
        "path": "HubFramework.podspec",
        "position": 27,
        "original_position": 27,
        "commit_id": "50af845dde4c173cc8cf4d7f4e79525f4dcba1ae",
        "original_commit_id": "87702b538ebc8e1b8ce95b7e82b5233bdbc9815b",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "We don\u2019t need CoreGraphics or QuartzCore?\n",
        "created_at": "2016-09-28T17:51:45Z",
        "updated_at": "2016-09-28T20:46:12Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/6#discussion_r80977745",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/6",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/80977745"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/6#discussion_r80977745"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/6"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/80990158",
        "pull_request_review_id": 2004150,
        "id": 80990158,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgwOTkwMTU4",
        "diff_hunk": "@@ -0,0 +1,32 @@\n+Pod::Spec.new do |s|\n+\n+    s.name         = \"HubFramework\"\n+    s.version      = \"2.0\"",
        "path": "HubFramework.podspec",
        "position": null,
        "original_position": 4,
        "commit_id": "50af845dde4c173cc8cf4d7f4e79525f4dcba1ae",
        "original_commit_id": "87702b538ebc8e1b8ce95b7e82b5233bdbc9815b",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Will do! \ud83d\udc4d \n",
        "created_at": "2016-09-28T18:47:31Z",
        "updated_at": "2016-09-28T20:46:12Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/6#discussion_r80990158",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/6",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/80990158"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/6#discussion_r80990158"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/6"
            }
        },
        "in_reply_to_id": 80977498
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/80990247",
        "pull_request_review_id": 2004229,
        "id": 80990247,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgwOTkwMjQ3",
        "diff_hunk": "@@ -0,0 +1,32 @@\n+Pod::Spec.new do |s|\n+\n+    s.name         = \"HubFramework\"\n+    s.version      = \"2.0\"\n+    s.summary      = \"Spotify's component-driven UI framework for iOS\"\n+\n+    s.description  = <<-DESC\n+                        The Hub Framework is a toolkit for building native,\n+                        component-driven UIs on iOS. It is designed to enable\n+                        teams of any size to quickly build, tweak and ship new\n+                        UI features, in either new or existing apps. It also\n+                        makes it easy to build backend-driven UIs.\n+                     DESC\n+\n+    s.ios.deployment_target     = \"8.0\"\n+\n+    s.homepage          = \"https://github.com/spotify/HubFramework\"\n+    s.social_media_url  = \"https://twitter.com/spotifyeng\"\n+    s.license           = \"Apache 2.0\"\n+    s.author            = {\n+        \"John Sundell\" => \"josu@spotify.com\"\n+    }\n+\n+    s.source                = { :git => \"https://github.com/spotify/HubFramework.git\", :tag => s.version }\n+    s.source_files          = \"include/HubFramework/*.h\", \"HubFramework/*.{h,m}\"\n+    s.public_header_files   = \"include/HubFramework/*.h\"\n+    s.frameworks            = \"UIKit\", \"SystemConfiguration\"",
        "path": "HubFramework.podspec",
        "position": 27,
        "original_position": 27,
        "commit_id": "50af845dde4c173cc8cf4d7f4e79525f4dcba1ae",
        "original_commit_id": "87702b538ebc8e1b8ce95b7e82b5233bdbc9815b",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Those should be implictly imported by importing `UIKit`. Haven't seen any other Podspec that lists them.\n",
        "created_at": "2016-09-28T18:47:56Z",
        "updated_at": "2016-09-28T20:46:12Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/6#discussion_r80990247",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/6",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/80990247"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/6#discussion_r80990247"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/6"
            }
        },
        "in_reply_to_id": 80977745
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81015660",
        "pull_request_review_id": 2027876,
        "id": 81015660,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxMDE1NjYw",
        "diff_hunk": "@@ -41,14 +39,45 @@ platform :ios do\n   end\n \n \n-  desc 'Run all CI jobs'\n+  desc 'Lint the source code and other linteable artifacts'\n+  lane :lint do\n+    # pod_lib_lint",
        "path": "fastlane/Fastfile",
        "position": 13,
        "original_position": 13,
        "commit_id": "54c25ec1812a77888e1c13873c40e90925aab202",
        "original_commit_id": "54c25ec1812a77888e1c13873c40e90925aab202",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yep! Depended on your podspec being merged. Will uncomment it in a subsequent PR.\n",
        "created_at": "2016-09-28T20:58:21Z",
        "updated_at": "2016-09-28T20:58:21Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/1#discussion_r81015660",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/1",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81015660"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/1#discussion_r81015660"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/1"
            }
        },
        "in_reply_to_id": 81011817
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81015754",
        "pull_request_review_id": 2027962,
        "id": 81015754,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxMDE1NzU0",
        "diff_hunk": "@@ -41,14 +39,45 @@ platform :ios do\n   end\n \n \n-  desc 'Run all CI jobs'\n+  desc 'Lint the source code and other linteable artifacts'\n+  lane :lint do\n+    # pod_lib_lint\n+  end\n+\n+\n+  desc 'Update documentation and publish them'\n+  lane :update_docs do\n+    sh \"cd .. && rake docs:generate\"\n+  end\n+\n+\n+  desc 'Execute all CI lanes'\n+  desc 'This action can be configured using the following environment variable:'\n+  desc ''\n+  desc '- LINT:           Whether the sources and certain artifacts should be linted,'\n+  desc '                  defaults to `YES`.'\n+  desc '- RUN_TESTS:      Whether unit tests should be ran, defaults to `YES`.'",
        "path": "fastlane/Fastfile",
        "position": 28,
        "original_position": 28,
        "commit_id": "54c25ec1812a77888e1c13873c40e90925aab202",
        "original_commit_id": "54c25ec1812a77888e1c13873c40e90925aab202",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I\u2019ll fix that in my subsequent PR (will push _very_ soon).\n",
        "created_at": "2016-09-28T20:58:47Z",
        "updated_at": "2016-09-28T20:58:47Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/1#discussion_r81015754",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/1",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81015754"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/1#discussion_r81015754"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/1"
            }
        },
        "in_reply_to_id": 81011947
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81015781",
        "pull_request_review_id": 2027984,
        "id": 81015781,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxMDE1Nzgx",
        "diff_hunk": "@@ -41,14 +39,45 @@ platform :ios do\n   end\n \n \n-  desc 'Run all CI jobs'\n+  desc 'Lint the source code and other linteable artifacts'\n+  lane :lint do\n+    # pod_lib_lint",
        "path": "fastlane/Fastfile",
        "position": 13,
        "original_position": 13,
        "commit_id": "54c25ec1812a77888e1c13873c40e90925aab202",
        "original_commit_id": "54c25ec1812a77888e1c13873c40e90925aab202",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Awesome \ud83d\udc4d \n",
        "created_at": "2016-09-28T20:58:53Z",
        "updated_at": "2016-09-28T20:58:53Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/1#discussion_r81015781",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/1",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81015781"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/1#discussion_r81015781"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/1"
            }
        },
        "in_reply_to_id": 81011817
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81015803",
        "pull_request_review_id": 2028001,
        "id": 81015803,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxMDE1ODAz",
        "diff_hunk": "@@ -16,11 +16,35 @@ Run unit tests\n fastlane ios demo\n ```\n Build the demo app\n+### ios lint\n+```\n+fastlane ios lint\n+```\n+Lint the source code and other linteable artifacts\n+### ios update_docs\n+```\n+fastlane ios update_docs\n+```\n+Update documentation and publish them\n ### ios ci_all\n ```\n fastlane ios ci_all\n ```\n-Run all CI jobs\n+Execute all CI lanes\n+\n+This action can be configured using the following environment variable:\n+\n+\n+\n+- LINT:           Whether the sources and certain artifacts should be linted,\n+\n+                  defaults to `YES`.\n+\n+- RUN_TESTS:      Whether unit tests should be ran, defaults to `YES`.",
        "path": "fastlane/README.md",
        "position": 29,
        "original_position": 29,
        "commit_id": "54c25ec1812a77888e1c13873c40e90925aab202",
        "original_commit_id": "54c25ec1812a77888e1c13873c40e90925aab202",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Fixing in the next one!\n",
        "created_at": "2016-09-28T20:58:59Z",
        "updated_at": "2016-09-28T20:58:59Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/1#discussion_r81015803",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/1",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81015803"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/1#discussion_r81015803"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/1"
            }
        },
        "in_reply_to_id": 81012200
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81015922",
        "pull_request_review_id": 2028105,
        "id": 81015922,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxMDE1OTIy",
        "diff_hunk": "@@ -41,14 +39,45 @@ platform :ios do\n   end\n \n \n-  desc 'Run all CI jobs'\n+  desc 'Lint the source code and other linteable artifacts'\n+  lane :lint do\n+    # pod_lib_lint\n+  end\n+\n+\n+  desc 'Update documentation and publish them'\n+  lane :update_docs do\n+    sh \"cd .. && rake docs:generate\"\n+  end\n+\n+\n+  desc 'Execute all CI lanes'\n+  desc 'This action can be configured using the following environment variable:'\n+  desc ''\n+  desc '- LINT:           Whether the sources and certain artifacts should be linted,'\n+  desc '                  defaults to `YES`.'\n+  desc '- RUN_TESTS:      Whether unit tests should be ran, defaults to `YES`.'",
        "path": "fastlane/Fastfile",
        "position": 28,
        "original_position": 28,
        "commit_id": "54c25ec1812a77888e1c13873c40e90925aab202",
        "original_commit_id": "54c25ec1812a77888e1c13873c40e90925aab202",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Alright, no problems!\n",
        "created_at": "2016-09-28T20:59:33Z",
        "updated_at": "2016-09-28T20:59:33Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/1#discussion_r81015922",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/1",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81015922"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/1#discussion_r81015922"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/1"
            }
        },
        "in_reply_to_id": 81011947
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81093034",
        "pull_request_review_id": 2097540,
        "id": 81093034,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxMDkzMDM0",
        "diff_hunk": "@@ -685,14 +722,35 @@ - (void)configureOverlayComponents\n         \n         [self.overlayComponentWrappers addObject:componentWrapper];\n         \n-        componentWrapper.view.center = self.collectionView.center;\n+        componentWrapper.view.center = [self overlayComponentCenterPoint];\n     }\n     \n     for (HUBComponentWrapper * const unusedOverlayComponentWrapper in currentOverlayComponentWrappers) {\n         [self removeOverlayComponentWrapper:unusedOverlayComponentWrapper];\n     }\n }\n \n+- (CGPoint)overlayComponentCenterPoint\n+{\n+    CGRect frame = self.view.bounds;\n+    frame.origin.y = self.collectionView.contentInset.top;\n+    frame.size.height -= self.visibleKeyboardHeight + CGRectGetMinY(frame);\n+    return CGPointMake(CGRectGetMidX(frame), CGRectGetMidY(frame));\n+}\n+\n+- (void)updateOverlayComponentCenterPointsWithKeyboardNotification:(NSNotification *)notification\n+{\n+    NSTimeInterval const animationDuration = [notification.userInfo[UIKeyboardAnimationDurationUserInfoKey] doubleValue];\n+    UIViewAnimationCurve const animationCurve = [notification.userInfo[UIKeyboardAnimationCurveUserInfoKey] integerValue];\n+    UIViewAnimationOptions animationOptions = HUBAnimationOptionsFromCurve(animationCurve);",
        "path": "sources/HUBViewControllerImplementation.m",
        "position": null,
        "original_position": 90,
        "commit_id": "a13970a18a5a76ee43b3dd223878cfddb2c35436",
        "original_commit_id": "f87ec8cc8ad2dc4e71e0ec59dde20ee4ae001bf2",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "No const?\n",
        "created_at": "2016-09-29T09:03:19Z",
        "updated_at": "2016-09-29T09:41:08Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/10#discussion_r81093034",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/10",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81093034"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/10#discussion_r81093034"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/10"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81094925",
        "pull_request_review_id": 2097540,
        "id": 81094925,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxMDk0OTI1",
        "diff_hunk": "@@ -685,14 +722,35 @@ - (void)configureOverlayComponents\n         \n         [self.overlayComponentWrappers addObject:componentWrapper];\n         \n-        componentWrapper.view.center = self.collectionView.center;\n+        componentWrapper.view.center = [self overlayComponentCenterPoint];\n     }\n     \n     for (HUBComponentWrapper * const unusedOverlayComponentWrapper in currentOverlayComponentWrappers) {\n         [self removeOverlayComponentWrapper:unusedOverlayComponentWrapper];\n     }\n }\n \n+- (CGPoint)overlayComponentCenterPoint\n+{\n+    CGRect frame = self.view.bounds;\n+    frame.origin.y = self.collectionView.contentInset.top;\n+    frame.size.height -= self.visibleKeyboardHeight + CGRectGetMinY(frame);\n+    return CGPointMake(CGRectGetMidX(frame), CGRectGetMidY(frame));\n+}\n+\n+- (void)updateOverlayComponentCenterPointsWithKeyboardNotification:(NSNotification *)notification\n+{\n+    NSTimeInterval const animationDuration = [notification.userInfo[UIKeyboardAnimationDurationUserInfoKey] doubleValue];\n+    UIViewAnimationCurve const animationCurve = [notification.userInfo[UIKeyboardAnimationCurveUserInfoKey] integerValue];\n+    UIViewAnimationOptions animationOptions = HUBAnimationOptionsFromCurve(animationCurve);",
        "path": "sources/HUBViewControllerImplementation.m",
        "position": null,
        "original_position": 90,
        "commit_id": "a13970a18a5a76ee43b3dd223878cfddb2c35436",
        "original_commit_id": "f87ec8cc8ad2dc4e71e0ec59dde20ee4ae001bf2",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "If I remember correctly, the only way to completely mimic the animation curve used by the keyboard is to take the animation curve from the userInfo and feed it directly into the old UIView animation API's (`[UIView setAnimationCurve:]`), as their curve is private.\n",
        "created_at": "2016-09-29T09:14:22Z",
        "updated_at": "2016-09-29T09:41:08Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/10#discussion_r81094925",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/10",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81094925"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/10#discussion_r81094925"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/10"
            }
        },
        "in_reply_to_id": 81093034
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81096230",
        "pull_request_review_id": 2100580,
        "id": 81096230,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxMDk2MjMw",
        "diff_hunk": "@@ -685,14 +722,35 @@ - (void)configureOverlayComponents\n         \n         [self.overlayComponentWrappers addObject:componentWrapper];\n         \n-        componentWrapper.view.center = self.collectionView.center;\n+        componentWrapper.view.center = [self overlayComponentCenterPoint];\n     }\n     \n     for (HUBComponentWrapper * const unusedOverlayComponentWrapper in currentOverlayComponentWrappers) {\n         [self removeOverlayComponentWrapper:unusedOverlayComponentWrapper];\n     }\n }\n \n+- (CGPoint)overlayComponentCenterPoint\n+{\n+    CGRect frame = self.view.bounds;\n+    frame.origin.y = self.collectionView.contentInset.top;\n+    frame.size.height -= self.visibleKeyboardHeight + CGRectGetMinY(frame);\n+    return CGPointMake(CGRectGetMidX(frame), CGRectGetMidY(frame));\n+}\n+\n+- (void)updateOverlayComponentCenterPointsWithKeyboardNotification:(NSNotification *)notification\n+{\n+    NSTimeInterval const animationDuration = [notification.userInfo[UIKeyboardAnimationDurationUserInfoKey] doubleValue];\n+    UIViewAnimationCurve const animationCurve = [notification.userInfo[UIKeyboardAnimationCurveUserInfoKey] integerValue];\n+    UIViewAnimationOptions animationOptions = HUBAnimationOptionsFromCurve(animationCurve);",
        "path": "sources/HUBViewControllerImplementation.m",
        "position": null,
        "original_position": 90,
        "commit_id": "a13970a18a5a76ee43b3dd223878cfddb2c35436",
        "original_commit_id": "f87ec8cc8ad2dc4e71e0ec59dde20ee4ae001bf2",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@Goos Ooooh, I didn't know that! Thanks! \ud83d\udc4d How do I restore the curve once the animation has finished? Isn't it also a bit dangerous, as it will change the animation curve on a global level? (Don't think we need to **completely** match the animation curve tbh).\n",
        "created_at": "2016-09-29T09:22:07Z",
        "updated_at": "2016-09-29T09:41:08Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/10#discussion_r81096230",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/10",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81096230"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/10#discussion_r81096230"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/10"
            }
        },
        "in_reply_to_id": 81093034
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81097639",
        "pull_request_review_id": 2101970,
        "id": 81097639,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxMDk3NjM5",
        "diff_hunk": "@@ -685,14 +722,35 @@ - (void)configureOverlayComponents\n         \n         [self.overlayComponentWrappers addObject:componentWrapper];\n         \n-        componentWrapper.view.center = self.collectionView.center;\n+        componentWrapper.view.center = [self overlayComponentCenterPoint];\n     }\n     \n     for (HUBComponentWrapper * const unusedOverlayComponentWrapper in currentOverlayComponentWrappers) {\n         [self removeOverlayComponentWrapper:unusedOverlayComponentWrapper];\n     }\n }\n \n+- (CGPoint)overlayComponentCenterPoint\n+{\n+    CGRect frame = self.view.bounds;\n+    frame.origin.y = self.collectionView.contentInset.top;\n+    frame.size.height -= self.visibleKeyboardHeight + CGRectGetMinY(frame);\n+    return CGPointMake(CGRectGetMidX(frame), CGRectGetMidY(frame));\n+}\n+\n+- (void)updateOverlayComponentCenterPointsWithKeyboardNotification:(NSNotification *)notification\n+{\n+    NSTimeInterval const animationDuration = [notification.userInfo[UIKeyboardAnimationDurationUserInfoKey] doubleValue];\n+    UIViewAnimationCurve const animationCurve = [notification.userInfo[UIKeyboardAnimationCurveUserInfoKey] integerValue];\n+    UIViewAnimationOptions animationOptions = HUBAnimationOptionsFromCurve(animationCurve);",
        "path": "sources/HUBViewControllerImplementation.m",
        "position": null,
        "original_position": 90,
        "commit_id": "a13970a18a5a76ee43b3dd223878cfddb2c35436",
        "original_commit_id": "f87ec8cc8ad2dc4e71e0ec59dde20ee4ae001bf2",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@JohnSundell Afaik, it will be scoped inbetween the two `[UIView beginAnimations:context:]` & `[UIView commitAnimations]` calls\n",
        "created_at": "2016-09-29T09:30:12Z",
        "updated_at": "2016-09-29T09:41:08Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/10#discussion_r81097639",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/10",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81097639"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/10#discussion_r81097639"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/10"
            }
        },
        "in_reply_to_id": 81093034
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81098440",
        "pull_request_review_id": 2102712,
        "id": 81098440,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxMDk4NDQw",
        "diff_hunk": "@@ -685,14 +722,35 @@ - (void)configureOverlayComponents\n         \n         [self.overlayComponentWrappers addObject:componentWrapper];\n         \n-        componentWrapper.view.center = self.collectionView.center;\n+        componentWrapper.view.center = [self overlayComponentCenterPoint];\n     }\n     \n     for (HUBComponentWrapper * const unusedOverlayComponentWrapper in currentOverlayComponentWrappers) {\n         [self removeOverlayComponentWrapper:unusedOverlayComponentWrapper];\n     }\n }\n \n+- (CGPoint)overlayComponentCenterPoint\n+{\n+    CGRect frame = self.view.bounds;\n+    frame.origin.y = self.collectionView.contentInset.top;\n+    frame.size.height -= self.visibleKeyboardHeight + CGRectGetMinY(frame);\n+    return CGPointMake(CGRectGetMidX(frame), CGRectGetMidY(frame));\n+}\n+\n+- (void)updateOverlayComponentCenterPointsWithKeyboardNotification:(NSNotification *)notification\n+{\n+    NSTimeInterval const animationDuration = [notification.userInfo[UIKeyboardAnimationDurationUserInfoKey] doubleValue];\n+    UIViewAnimationCurve const animationCurve = [notification.userInfo[UIKeyboardAnimationCurveUserInfoKey] integerValue];\n+    UIViewAnimationOptions animationOptions = HUBAnimationOptionsFromCurve(animationCurve);",
        "path": "sources/HUBViewControllerImplementation.m",
        "position": null,
        "original_position": 90,
        "commit_id": "a13970a18a5a76ee43b3dd223878cfddb2c35436",
        "original_commit_id": "f87ec8cc8ad2dc4e71e0ec59dde20ee4ae001bf2",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@Goos Ah of course, excellent, will fix! \ud83d\udc4d \n",
        "created_at": "2016-09-29T09:34:32Z",
        "updated_at": "2016-09-29T09:41:08Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/10#discussion_r81098440",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/10",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81098440"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/10#discussion_r81098440"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/10"
            }
        },
        "in_reply_to_id": 81093034
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81118459",
        "pull_request_review_id": 2121210,
        "id": 81118459,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxMTE4NDU5",
        "diff_hunk": "@@ -0,0 +1,53 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+import Foundation\n+import HubFramework\n+\n+/// Content operation that adds 10,000 rows as part of the \"Really Long List\" feature\n+class ReallyLongListContentOperation: NSObject, HUBContentOperation {\n+    weak var delegate: HUBContentOperationDelegate?\n+    private var hasBeenExecuted = false\n+\n+    func perform(forViewURI viewURI: URL, featureInfo: HUBFeatureInfo, connectivityState: HUBConnectivityState, viewModelBuilder: HUBViewModelBuilder, previousError: Error?) {\n+        // To enable the navigation bar title to be displayed synchronously,\n+        // we finish directly if executed for the first time, then reschedule\n+        // ourselves right after that, so that the operation gets run again\n+        if !hasBeenExecuted {\n+            hasBeenExecuted = true\n+            delegate?.contentOperationDidFinish(self)\n+            delegate?.contentOperationRequiresRescheduling(self)\n+            return\n+        }\n+        \n+        // Run this code on a background queue as to not block the main thread\n+        DispatchQueue(label: String(describing: self)).async {",
        "path": "demo/sources/ReallyLongListContentOperation.swift",
        "position": 43,
        "original_position": 42,
        "commit_id": "e5ed80c7da8163f49bc38b7a9af84504eecb37b1",
        "original_commit_id": "9ecdc0a8c2aca01e28298f2a82fa3428f4d1adc0",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Is it safe to not retain the dispatch queue like this? \ud83d\ude2e \n",
        "created_at": "2016-09-29T11:46:15Z",
        "updated_at": "2016-09-29T11:56:15Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/13#discussion_r81118459",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/13",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81118459"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/13#discussion_r81118459"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/13"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81118867",
        "pull_request_review_id": 2121210,
        "id": 81118867,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxMTE4ODY3",
        "diff_hunk": "@@ -0,0 +1,53 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+import Foundation\n+import HubFramework\n+\n+/// Content operation that adds 10,000 rows as part of the \"Really Long List\" feature\n+class ReallyLongListContentOperation: NSObject, HUBContentOperation {\n+    weak var delegate: HUBContentOperationDelegate?\n+    private var hasBeenExecuted = false\n+\n+    func perform(forViewURI viewURI: URL, featureInfo: HUBFeatureInfo, connectivityState: HUBConnectivityState, viewModelBuilder: HUBViewModelBuilder, previousError: Error?) {\n+        // To enable the navigation bar title to be displayed synchronously,\n+        // we finish directly if executed for the first time, then reschedule\n+        // ourselves right after that, so that the operation gets run again\n+        if !hasBeenExecuted {\n+            hasBeenExecuted = true",
        "path": "demo/sources/ReallyLongListContentOperation.swift",
        "position": null,
        "original_position": 35,
        "commit_id": "e5ed80c7da8163f49bc38b7a9af84504eecb37b1",
        "original_commit_id": "9ecdc0a8c2aca01e28298f2a82fa3428f4d1adc0",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Tiny nitpick, but `hasBeenExecuted` is kind of confusing as it gives the impression that it has already generated its content :smile: Could we call it `hasPerformedInitialRenderingPass` instead?\n",
        "created_at": "2016-09-29T11:48:35Z",
        "updated_at": "2016-09-29T11:56:15Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/13#discussion_r81118867",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/13",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81118867"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/13#discussion_r81118867"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/13"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81119317",
        "pull_request_review_id": 2122010,
        "id": 81119317,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxMTE5MzE3",
        "diff_hunk": "@@ -0,0 +1,53 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+import Foundation\n+import HubFramework\n+\n+/// Content operation that adds 10,000 rows as part of the \"Really Long List\" feature\n+class ReallyLongListContentOperation: NSObject, HUBContentOperation {\n+    weak var delegate: HUBContentOperationDelegate?\n+    private var hasBeenExecuted = false\n+\n+    func perform(forViewURI viewURI: URL, featureInfo: HUBFeatureInfo, connectivityState: HUBConnectivityState, viewModelBuilder: HUBViewModelBuilder, previousError: Error?) {\n+        // To enable the navigation bar title to be displayed synchronously,\n+        // we finish directly if executed for the first time, then reschedule\n+        // ourselves right after that, so that the operation gets run again\n+        if !hasBeenExecuted {\n+            hasBeenExecuted = true\n+            delegate?.contentOperationDidFinish(self)\n+            delegate?.contentOperationRequiresRescheduling(self)\n+            return\n+        }\n+        \n+        // Run this code on a background queue as to not block the main thread\n+        DispatchQueue(label: String(describing: self)).async {",
        "path": "demo/sources/ReallyLongListContentOperation.swift",
        "position": 43,
        "original_position": 42,
        "commit_id": "e5ed80c7da8163f49bc38b7a9af84504eecb37b1",
        "original_commit_id": "9ecdc0a8c2aca01e28298f2a82fa3428f4d1adc0",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yeah, from the documentation of `DispatchQueue`:\n\n```\nPending blocks submitted to a queue also hold a reference to the queue until\nthey have finished. Once all references to a queue have been released, the\nqueue will be deallocated by the system.\n```\n",
        "created_at": "2016-09-29T11:51:59Z",
        "updated_at": "2016-09-29T11:56:15Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/13#discussion_r81119317",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/13",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81119317"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/13#discussion_r81119317"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/13"
            }
        },
        "in_reply_to_id": 81118459
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81119343",
        "pull_request_review_id": 2122037,
        "id": 81119343,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxMTE5MzQz",
        "diff_hunk": "@@ -0,0 +1,53 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+import Foundation\n+import HubFramework\n+\n+/// Content operation that adds 10,000 rows as part of the \"Really Long List\" feature\n+class ReallyLongListContentOperation: NSObject, HUBContentOperation {\n+    weak var delegate: HUBContentOperationDelegate?\n+    private var hasBeenExecuted = false\n+\n+    func perform(forViewURI viewURI: URL, featureInfo: HUBFeatureInfo, connectivityState: HUBConnectivityState, viewModelBuilder: HUBViewModelBuilder, previousError: Error?) {\n+        // To enable the navigation bar title to be displayed synchronously,\n+        // we finish directly if executed for the first time, then reschedule\n+        // ourselves right after that, so that the operation gets run again\n+        if !hasBeenExecuted {\n+            hasBeenExecuted = true\n+            delegate?.contentOperationDidFinish(self)\n+            delegate?.contentOperationRequiresRescheduling(self)\n+            return\n+        }\n+        \n+        // Run this code on a background queue as to not block the main thread\n+        DispatchQueue(label: String(describing: self)).async {",
        "path": "demo/sources/ReallyLongListContentOperation.swift",
        "position": 43,
        "original_position": 42,
        "commit_id": "e5ed80c7da8163f49bc38b7a9af84504eecb37b1",
        "original_commit_id": "9ecdc0a8c2aca01e28298f2a82fa3428f4d1adc0",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "(And couldn't we just as well use the global background queue?)\n",
        "created_at": "2016-09-29T11:52:11Z",
        "updated_at": "2016-09-29T11:56:15Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/13#discussion_r81119343",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/13",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81119343"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/13#discussion_r81119343"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/13"
            }
        },
        "in_reply_to_id": 81118459
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81119421",
        "pull_request_review_id": 2122108,
        "id": 81119421,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxMTE5NDIx",
        "diff_hunk": "@@ -0,0 +1,53 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+import Foundation\n+import HubFramework\n+\n+/// Content operation that adds 10,000 rows as part of the \"Really Long List\" feature\n+class ReallyLongListContentOperation: NSObject, HUBContentOperation {\n+    weak var delegate: HUBContentOperationDelegate?\n+    private var hasBeenExecuted = false\n+\n+    func perform(forViewURI viewURI: URL, featureInfo: HUBFeatureInfo, connectivityState: HUBConnectivityState, viewModelBuilder: HUBViewModelBuilder, previousError: Error?) {\n+        // To enable the navigation bar title to be displayed synchronously,\n+        // we finish directly if executed for the first time, then reschedule\n+        // ourselves right after that, so that the operation gets run again\n+        if !hasBeenExecuted {\n+            hasBeenExecuted = true",
        "path": "demo/sources/ReallyLongListContentOperation.swift",
        "position": null,
        "original_position": 35,
        "commit_id": "e5ed80c7da8163f49bc38b7a9af84504eecb37b1",
        "original_commit_id": "9ecdc0a8c2aca01e28298f2a82fa3428f4d1adc0",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Sure, will pick a better name \ud83d\udc4d \n",
        "created_at": "2016-09-29T11:52:47Z",
        "updated_at": "2016-09-29T11:56:15Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/13#discussion_r81119421",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/13",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81119421"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/13#discussion_r81119421"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/13"
            }
        },
        "in_reply_to_id": 81118867
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81120025",
        "pull_request_review_id": 2122687,
        "id": 81120025,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxMTIwMDI1",
        "diff_hunk": "@@ -0,0 +1,53 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+import Foundation\n+import HubFramework\n+\n+/// Content operation that adds 10,000 rows as part of the \"Really Long List\" feature\n+class ReallyLongListContentOperation: NSObject, HUBContentOperation {\n+    weak var delegate: HUBContentOperationDelegate?\n+    private var hasBeenExecuted = false\n+\n+    func perform(forViewURI viewURI: URL, featureInfo: HUBFeatureInfo, connectivityState: HUBConnectivityState, viewModelBuilder: HUBViewModelBuilder, previousError: Error?) {\n+        // To enable the navigation bar title to be displayed synchronously,\n+        // we finish directly if executed for the first time, then reschedule\n+        // ourselves right after that, so that the operation gets run again\n+        if !hasBeenExecuted {\n+            hasBeenExecuted = true\n+            delegate?.contentOperationDidFinish(self)\n+            delegate?.contentOperationRequiresRescheduling(self)\n+            return\n+        }\n+        \n+        // Run this code on a background queue as to not block the main thread\n+        DispatchQueue(label: String(describing: self)).async {",
        "path": "demo/sources/ReallyLongListContentOperation.swift",
        "position": 43,
        "original_position": 42,
        "commit_id": "e5ed80c7da8163f49bc38b7a9af84504eecb37b1",
        "original_commit_id": "9ecdc0a8c2aca01e28298f2a82fa3428f4d1adc0",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I guess, just wanted to show \"Hey you can do things on a custom backround queue!\" \ud83d\ude05\n",
        "created_at": "2016-09-29T11:57:03Z",
        "updated_at": "2016-09-29T11:57:03Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/13#discussion_r81120025",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/13",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81120025"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/13#discussion_r81120025"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/13"
            }
        },
        "in_reply_to_id": 81118459
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81120634",
        "pull_request_review_id": 2123254,
        "id": 81120634,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxMTIwNjM0",
        "diff_hunk": "@@ -0,0 +1,53 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+import Foundation\n+import HubFramework\n+\n+/// Content operation that adds 10,000 rows as part of the \"Really Long List\" feature\n+class ReallyLongListContentOperation: NSObject, HUBContentOperation {\n+    weak var delegate: HUBContentOperationDelegate?\n+    private var hasBeenExecuted = false\n+\n+    func perform(forViewURI viewURI: URL, featureInfo: HUBFeatureInfo, connectivityState: HUBConnectivityState, viewModelBuilder: HUBViewModelBuilder, previousError: Error?) {\n+        // To enable the navigation bar title to be displayed synchronously,\n+        // we finish directly if executed for the first time, then reschedule\n+        // ourselves right after that, so that the operation gets run again\n+        if !hasBeenExecuted {\n+            hasBeenExecuted = true\n+            delegate?.contentOperationDidFinish(self)\n+            delegate?.contentOperationRequiresRescheduling(self)\n+            return\n+        }\n+        \n+        // Run this code on a background queue as to not block the main thread\n+        DispatchQueue(label: String(describing: self)).async {",
        "path": "demo/sources/ReallyLongListContentOperation.swift",
        "position": 43,
        "original_position": 42,
        "commit_id": "e5ed80c7da8163f49bc38b7a9af84504eecb37b1",
        "original_commit_id": "9ecdc0a8c2aca01e28298f2a82fa3428f4d1adc0",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Haha, yeah it's all good. Just wanna see more of those fine new Swift 3 GCD APIs :smile: \n",
        "created_at": "2016-09-29T12:01:16Z",
        "updated_at": "2016-09-29T12:01:16Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/13#discussion_r81120634",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/13",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81120634"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/13#discussion_r81120634"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/13"
            }
        },
        "in_reply_to_id": 81118459
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81120768",
        "pull_request_review_id": 2123376,
        "id": 81120768,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxMTIwNzY4",
        "diff_hunk": "@@ -0,0 +1,53 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+import Foundation\n+import HubFramework\n+\n+/// Content operation that adds 10,000 rows as part of the \"Really Long List\" feature\n+class ReallyLongListContentOperation: NSObject, HUBContentOperation {\n+    weak var delegate: HUBContentOperationDelegate?\n+    private var hasBeenExecuted = false\n+\n+    func perform(forViewURI viewURI: URL, featureInfo: HUBFeatureInfo, connectivityState: HUBConnectivityState, viewModelBuilder: HUBViewModelBuilder, previousError: Error?) {\n+        // To enable the navigation bar title to be displayed synchronously,\n+        // we finish directly if executed for the first time, then reschedule\n+        // ourselves right after that, so that the operation gets run again\n+        if !hasBeenExecuted {\n+            hasBeenExecuted = true\n+            delegate?.contentOperationDidFinish(self)\n+            delegate?.contentOperationRequiresRescheduling(self)\n+            return\n+        }\n+        \n+        // Run this code on a background queue as to not block the main thread\n+        DispatchQueue(label: String(describing: self)).async {",
        "path": "demo/sources/ReallyLongListContentOperation.swift",
        "position": 43,
        "original_position": 42,
        "commit_id": "e5ed80c7da8163f49bc38b7a9af84504eecb37b1",
        "original_commit_id": "9ecdc0a8c2aca01e28298f2a82fa3428f4d1adc0",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Haha yeah, they're amazing! \ud83d\ude0d \n",
        "created_at": "2016-09-29T12:02:15Z",
        "updated_at": "2016-09-29T12:02:15Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/13#discussion_r81120768",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/13",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81120768"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/13#discussion_r81120768"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/13"
            }
        },
        "in_reply_to_id": 81118459
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81162348",
        "pull_request_review_id": 2162580,
        "id": 81162348,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxMTYyMzQ4",
        "diff_hunk": "@@ -118,11 +118,15 @@ There are also a series of **programming guides** that each introduce you to dif\n - [JSON programming guide](https://spotify.github.io/HubFramework/json-programming-guide.html)\n - [Action programming guide](https://spotify.github.io/HubFramework/action-programming-guide.html)\n \n+## Demo app\n+\n+To see an example implementation of the Hub Framework, open up the [demo app](https://github.com/spotify/HubFramework/tree/master/demo) that has a few different features, showcasing some of the capabilities of the framework.\n+\n ## Documentation\n \n-The Hub Framework\u2019s API is also well documented and we generate both a [documentation website](https://spotify.github.io/HubFramework/) as well as a DocSet for the documentation app [Dash](https://kapeli.com/dash). The documentation is also written in such a way that Xcode will present it on usage.\n+The Hub Framework\u2019s API is well documented and we generate both a [documentation website](https://spotify.github.io/HubFramework/) as well as a DocSet for the documentation app [Dash](https://kapeli.com/dash). The documentation is also written in such a way that Xcode will present it on usage.\n \n-The Dash documentation is updated automatically for you on any changes to HubFramework. Get it by subscribing to the [https://spotify.github.io/HubFramework/docsets/HubFramework.xml](dash-feed://https%3A%2F%2Fghe%2Espotify%2Enet%2Fpages%2FiOS%2FHubFramework%2Fdocsets%2FHubFramework%2Exml) feed.\n+The Dash documentation is updated automatically for you on any changes to the framework. Get it by subscribing to the [https://spotify.github.io/HubFramework/docsets/HubFramework.xml](dash-feed://https%3A%2F%2Fghe%2Espotify%2Enet%2Fpages%2FiOS%2FHubFramework%2Fdocsets%2FHubFramework%2Exml) feed.",
        "path": "README.md",
        "position": null,
        "original_position": 14,
        "commit_id": "b1240470d8f18f081dce05e7a2e16e21c6c58204",
        "original_commit_id": "72add59b39b5e828d0b65444bc512654d4c2b359",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Could you update the feed URL as well? :)\n\nShould be `dash-feed://https%3A%2F%2Fspotify%2Egithub%2Eio%2FHubFramework%2Fdocsets%2FHubFramework%2Exml` now\n",
        "created_at": "2016-09-29T15:20:47Z",
        "updated_at": "2016-09-29T15:25:31Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/18#discussion_r81162348",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/18",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81162348"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/18#discussion_r81162348"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/18"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81162960",
        "pull_request_review_id": 2163147,
        "id": 81162960,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxMTYyOTYw",
        "diff_hunk": "@@ -118,11 +118,15 @@ There are also a series of **programming guides** that each introduce you to dif\n - [JSON programming guide](https://spotify.github.io/HubFramework/json-programming-guide.html)\n - [Action programming guide](https://spotify.github.io/HubFramework/action-programming-guide.html)\n \n+## Demo app\n+\n+To see an example implementation of the Hub Framework, open up the [demo app](https://github.com/spotify/HubFramework/tree/master/demo) that has a few different features, showcasing some of the capabilities of the framework.\n+\n ## Documentation\n \n-The Hub Framework\u2019s API is also well documented and we generate both a [documentation website](https://spotify.github.io/HubFramework/) as well as a DocSet for the documentation app [Dash](https://kapeli.com/dash). The documentation is also written in such a way that Xcode will present it on usage.\n+The Hub Framework\u2019s API is well documented and we generate both a [documentation website](https://spotify.github.io/HubFramework/) as well as a DocSet for the documentation app [Dash](https://kapeli.com/dash). The documentation is also written in such a way that Xcode will present it on usage.\n \n-The Dash documentation is updated automatically for you on any changes to HubFramework. Get it by subscribing to the [https://spotify.github.io/HubFramework/docsets/HubFramework.xml](dash-feed://https%3A%2F%2Fghe%2Espotify%2Enet%2Fpages%2FiOS%2FHubFramework%2Fdocsets%2FHubFramework%2Exml) feed.\n+The Dash documentation is updated automatically for you on any changes to the framework. Get it by subscribing to the [https://spotify.github.io/HubFramework/docsets/HubFramework.xml](dash-feed://https%3A%2F%2Fghe%2Espotify%2Enet%2Fpages%2FiOS%2FHubFramework%2Fdocsets%2FHubFramework%2Exml) feed.",
        "path": "README.md",
        "position": null,
        "original_position": 14,
        "commit_id": "b1240470d8f18f081dce05e7a2e16e21c6c58204",
        "original_commit_id": "72add59b39b5e828d0b65444bc512654d4c2b359",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Of course, no problems \ud83d\udc4d \n",
        "created_at": "2016-09-29T15:23:14Z",
        "updated_at": "2016-09-29T15:25:31Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/18#discussion_r81162960",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/18",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81162960"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/18#discussion_r81162960"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/18"
            }
        },
        "in_reply_to_id": 81162348
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81362013",
        "pull_request_review_id": 2348564,
        "id": 81362013,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxMzYyMDEz",
        "diff_hunk": "@@ -47,6 +47,19 @@ @implementation HUBManager\n \n - (instancetype)initWithComponentLayoutManager:(id<HUBComponentLayoutManager>)componentLayoutManager\n                       componentFallbackHandler:(id<HUBComponentFallbackHandler>)componentFallbackHandler\n+{\n+    return [self initWithComponentLayoutManager:componentLayoutManager\n+                       componentFallbackHandler:componentFallbackHandler\n+                      connectivityStateResolver:nil imageLoaderFactory:nil",
        "path": "sources/HUBManager.m",
        "position": null,
        "original_position": 7,
        "commit_id": "0fc71c7dacf4715adf7a72eca307baaa128372cb",
        "original_commit_id": "1c06c26b87205f55597844e138a92cc24968fe6f",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Move `imageLoaderFactory:nil` to its own line.\n",
        "created_at": "2016-09-30T15:32:44Z",
        "updated_at": "2016-09-30T18:20:32Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/37#discussion_r81362013",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/37",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81362013"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/37#discussion_r81362013"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/37"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81363342",
        "pull_request_review_id": 2349813,
        "id": 81363342,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxMzYzMzQy",
        "diff_hunk": "@@ -47,6 +47,19 @@ @implementation HUBManager\n \n - (instancetype)initWithComponentLayoutManager:(id<HUBComponentLayoutManager>)componentLayoutManager\n                       componentFallbackHandler:(id<HUBComponentFallbackHandler>)componentFallbackHandler\n+{\n+    return [self initWithComponentLayoutManager:componentLayoutManager\n+                       componentFallbackHandler:componentFallbackHandler\n+                      connectivityStateResolver:nil imageLoaderFactory:nil",
        "path": "sources/HUBManager.m",
        "position": null,
        "original_position": 7,
        "commit_id": "0fc71c7dacf4715adf7a72eca307baaa128372cb",
        "original_commit_id": "1c06c26b87205f55597844e138a92cc24968fe6f",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ah of course, silly mistake! Will fix \ud83d\udc4d \n",
        "created_at": "2016-09-30T15:39:10Z",
        "updated_at": "2016-09-30T18:20:32Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/37#discussion_r81363342",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/37",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81363342"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/37#discussion_r81363342"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/37"
            }
        },
        "in_reply_to_id": 81362013
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81398961",
        "pull_request_review_id": 2383988,
        "id": 81398961,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxMzk4OTYx",
        "diff_hunk": "@@ -2,7 +2,7 @@\n \n Welcome to the Hub Framework getting started guide! This guide aims to help introduce you to the concepts of the framework, and give you a step-by-step guide to building your first dynamic, component-driven view.\n \n-Note that this guide does not involve *setting up* the Hub Framework in your application - for that, see the [setup guide](https://spotify.github.io/HubFramework/setup-guide.html). This guide requires an application already set up with the Hub Framework, if you don't have your own - you can use the [demo app](https://ghe.spotify.net/iOS/HubFramework/tree/master/demo) that is included in the Hub Framework repo.\n+Note that this guide does not involve *setting up* the Hub Framework in your application - for that, see the [setup guide](https://spotify.github.io/HubFramework/setup-guide.html). This guide requires an application already set up with the Hub Framework, if you don't have your own - you can use the [demo app](https://github.com/spotify/iOS/HubFramework/tree/master/demo) that is included in the Hub Framework repo.",
        "path": "documentation/Getting started guide.md",
        "position": null,
        "original_position": 5,
        "commit_id": "3cc541332facbfe882a5bab785652bc36100ea34",
        "original_commit_id": "42ca40321e1df1d606f82346a6e167497da7570c",
        "user": {
            "login": "eliperkins",
            "id": 1051453,
            "node_id": "MDQ6VXNlcjEwNTE0NTM=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1051453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/eliperkins",
            "html_url": "https://github.com/eliperkins",
            "followers_url": "https://api.github.com/users/eliperkins/followers",
            "following_url": "https://api.github.com/users/eliperkins/following{/other_user}",
            "gists_url": "https://api.github.com/users/eliperkins/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/eliperkins/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/eliperkins/subscriptions",
            "organizations_url": "https://api.github.com/users/eliperkins/orgs",
            "repos_url": "https://api.github.com/users/eliperkins/repos",
            "events_url": "https://api.github.com/users/eliperkins/events{/privacy}",
            "received_events_url": "https://api.github.com/users/eliperkins/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Oops. Messed this find and replace up. Fixing...\n",
        "created_at": "2016-09-30T19:01:56Z",
        "updated_at": "2016-09-30T19:04:36Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/44#discussion_r81398961",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/44",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81398961"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/44#discussion_r81398961"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/44"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81399399",
        "pull_request_review_id": 2384391,
        "id": 81399399,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxMzk5Mzk5",
        "diff_hunk": "@@ -2,7 +2,7 @@\n \n Welcome to the Hub Framework getting started guide! This guide aims to help introduce you to the concepts of the framework, and give you a step-by-step guide to building your first dynamic, component-driven view.\n \n-Note that this guide does not involve *setting up* the Hub Framework in your application - for that, see the [setup guide](https://spotify.github.io/HubFramework/setup-guide.html). This guide requires an application already set up with the Hub Framework, if you don't have your own - you can use the [demo app](https://ghe.spotify.net/iOS/HubFramework/tree/master/demo) that is included in the Hub Framework repo.\n+Note that this guide does not involve *setting up* the Hub Framework in your application - for that, see the [setup guide](https://spotify.github.io/HubFramework/setup-guide.html). This guide requires an application already set up with the Hub Framework, if you don't have your own - you can use the [demo app](https://github.com/spotify/iOS/HubFramework/tree/master/demo) that is included in the Hub Framework repo.",
        "path": "documentation/Getting started guide.md",
        "position": null,
        "original_position": 5,
        "commit_id": "3cc541332facbfe882a5bab785652bc36100ea34",
        "original_commit_id": "42ca40321e1df1d606f82346a6e167497da7570c",
        "user": {
            "login": "eliperkins",
            "id": 1051453,
            "node_id": "MDQ6VXNlcjEwNTE0NTM=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1051453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/eliperkins",
            "html_url": "https://github.com/eliperkins",
            "followers_url": "https://api.github.com/users/eliperkins/followers",
            "following_url": "https://api.github.com/users/eliperkins/following{/other_user}",
            "gists_url": "https://api.github.com/users/eliperkins/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/eliperkins/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/eliperkins/subscriptions",
            "organizations_url": "https://api.github.com/users/eliperkins/orgs",
            "repos_url": "https://api.github.com/users/eliperkins/repos",
            "events_url": "https://api.github.com/users/eliperkins/events{/privacy}",
            "received_events_url": "https://api.github.com/users/eliperkins/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Fixed in    3cc5413\n",
        "created_at": "2016-09-30T19:05:01Z",
        "updated_at": "2016-09-30T19:05:01Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/44#discussion_r81399399",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/44",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81399399"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/44#discussion_r81399399"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/44"
            }
        },
        "in_reply_to_id": 81398961
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81445737",
        "pull_request_review_id": 2427961,
        "id": 81445737,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxNDQ1NzM3",
        "diff_hunk": "@@ -0,0 +1,35 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+/**\n+ *  Returns a key-path string that has been validated at compile-time.\n+ *\n+ *  ```objc\n+ *  HUBKeyPath(self.object, property) => @\"property\"\n+ *  HUBKeyPath(self, object.property) => @\"object.property\"\n+ *  ```\n+ *\n+ *  In a class method (such as `keyPathsForValuesAffectingvalueForKey:`) you can cast `nil` to a instance pointer",
        "path": "sources/HUBKeyPath.h",
        "position": 30,
        "original_position": 30,
        "commit_id": "27b84c3822353d55a3351ebae72afaa79de18685",
        "original_commit_id": "27b84c3822353d55a3351ebae72afaa79de18685",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Clever! \ud83d\udc4d \n",
        "created_at": "2016-10-01T07:46:35Z",
        "updated_at": "2016-10-01T07:47:30Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/46#discussion_r81445737",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/46",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81445737"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/46#discussion_r81445737"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/46"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81445759",
        "pull_request_review_id": 2427983,
        "id": 81445759,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxNDQ1NzU5",
        "diff_hunk": "@@ -12,7 +12,7 @@ platform :ios do\n     UI.message(\"Simulator testing device set to '#{device}'\")\n \n     scan(\n-      :workspace => 'HubFramework.xcworkspace',\n+      :project => 'HubFramework.xcodeproj',\n       :scheme => 'HubFramework',",
        "path": "fastlane/Fastfile",
        "position": 6,
        "original_position": 6,
        "commit_id": "b44fce9e2762188794ba3181542d8f9a112350f9",
        "original_commit_id": "b44fce9e2762188794ba3181542d8f9a112350f9",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This can't be updated to `:target`?\n",
        "created_at": "2016-10-01T07:49:17Z",
        "updated_at": "2016-10-01T07:49:17Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/45#discussion_r81445759",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/45",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81445759"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/45#discussion_r81445759"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/45"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81563353",
        "pull_request_review_id": 2534041,
        "id": 81563353,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxNTYzMzUz",
        "diff_hunk": "@@ -68,11 +69,19 @@ NS_ASSUME_NONNULL_BEGIN\n /**\n  *  The title that the view should have in the navigation bar\n  *\n- *  The value of this property will be assigned to the view controller's title property\n+ *  This property is an alias for `navigationItem.title`.\n  */\n @property (nonatomic, copy, nullable) NSString *navigationBarTitle;",
        "path": "include/HubFramework/HUBViewModelBuilder.h",
        "position": 15,
        "original_position": 15,
        "commit_id": "1e0626bbad43c4b483ff0cd706e650bb3bcca560",
        "original_commit_id": "40a9f55e1765166e0ed7d63f7fe48f68c4ca76bd",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Do we intend for this property to live on? Or do we want to encourage that API users transition to using the `navigationItem` property?\n\nIf the latter, how about also deprecating this property like\n\n``` objc\nDEPRECATED_MSG_ATTRIBUTE(\"Use the navigationItem property instead\")\n@property (nonatomic, copy, nullable) NSString *navigationBarTitle;\n```\n",
        "created_at": "2016-10-03T14:38:49Z",
        "updated_at": "2016-10-03T16:07:09Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/50#discussion_r81563353",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/50",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81563353"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/50#discussion_r81563353"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/50"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81563520",
        "pull_request_review_id": 2534041,
        "id": 81563520,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxNTYzNTIw",
        "diff_hunk": "@@ -20,6 +20,7 @@\n  */\n \n #import \"HUBSerializable.h\"\n+#import <UIKit/UIKit.h>",
        "path": "include/HubFramework/HUBViewModel.h",
        "position": null,
        "original_position": 4,
        "commit_id": "1e0626bbad43c4b483ff0cd706e650bb3bcca560",
        "original_commit_id": "40a9f55e1765166e0ed7d63f7fe48f68c4ca76bd",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Do we need to import UIKit here, how about a forward class declaration of `UINavigationItem`?\n",
        "created_at": "2016-10-03T14:39:33Z",
        "updated_at": "2016-10-03T16:07:09Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/50#discussion_r81563520",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/50",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81563520"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/50#discussion_r81563520"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/50"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81563612",
        "pull_request_review_id": 2534041,
        "id": 81563612,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxNTYzNjEy",
        "diff_hunk": "@@ -20,6 +20,7 @@\n  */\n \n #import \"HUBJSONCompatibleBuilder.h\"\n+#import <UIKit/UIKit.h>",
        "path": "include/HubFramework/HUBViewModelBuilder.h",
        "position": null,
        "original_position": 4,
        "commit_id": "1e0626bbad43c4b483ff0cd706e650bb3bcca560",
        "original_commit_id": "40a9f55e1765166e0ed7d63f7fe48f68c4ca76bd",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Same as for `HUBViewModel.h`, how about a forward class declaration of `UINavigationItem`?\n",
        "created_at": "2016-10-03T14:40:02Z",
        "updated_at": "2016-10-03T16:07:09Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/50#discussion_r81563612",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/50",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81563612"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/50#discussion_r81563612"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/50"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81564428",
        "pull_request_review_id": 2534041,
        "id": 81564428,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxNTY0NDI4",
        "diff_hunk": "@@ -24,10 +24,31 @@\n #import \"HUBComponent.h\"\n #import \"HUBJSONCompatibleBuilder.h\"\n #import \"HUBSerializable.h\"\n+#import \"HUBKeyPath.h\"\n \n NS_ASSUME_NONNULL_BEGIN\n \n /**\n+ *  Return whether two properties are considered equal\n+ *\n+ *  @param objectA The first object\n+ *  @param objectB The second object\n+ *  @param propertyName The name of the property to compare\n+ *\n+ *  Two nil values are considered equal.\n+ */\n+static inline BOOL HUBPropertyIsEqual(NSObject * _Nullable objectA, NSObject * _Nullable objectB, NSString *propertyName) {",
        "path": "sources/HUBUtilities.h",
        "position": 17,
        "original_position": 17,
        "commit_id": "1e0626bbad43c4b483ff0cd706e650bb3bcca560",
        "original_commit_id": "40a9f55e1765166e0ed7d63f7fe48f68c4ca76bd",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "What\u2019s the reason we need to inline this function? Seems like it could just be a normal function instead, no?\n",
        "created_at": "2016-10-03T14:43:46Z",
        "updated_at": "2016-10-03T16:07:09Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/50#discussion_r81564428",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/50",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81564428"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/50#discussion_r81564428"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/50"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81564632",
        "pull_request_review_id": 2534041,
        "id": 81564632,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxNTY0NjMy",
        "diff_hunk": "@@ -95,6 +116,76 @@ static inline NSDictionary<NSString *, id> * _Nullable HUBMergeDictionaries(NSDi\n }\n \n /**\n+ *  Return the property names that should be taken into account when handling a `UINavigationItem`\n+ *\n+ *  This function is used to determine which properties should be compared or copied. Note that\n+ *  `HUBAutoEquatable` is not used here, since we don't control the implementation of the class.\n+ */\n+static inline NSArray<NSString *> *HUBNavigationItemPropertyNames() {\n+    return @[\n+        HUBKeyPath((UINavigationItem *)nil, title),\n+        HUBKeyPath((UINavigationItem *)nil, titleView),\n+        HUBKeyPath((UINavigationItem *)nil, prompt),\n+        HUBKeyPath((UINavigationItem *)nil, backBarButtonItem),\n+        HUBKeyPath((UINavigationItem *)nil, hidesBackButton),\n+        HUBKeyPath((UINavigationItem *)nil, leftBarButtonItems),\n+        HUBKeyPath((UINavigationItem *)nil, rightBarButtonItems),\n+        HUBKeyPath((UINavigationItem *)nil, leftItemsSupplementBackButton)\n+    ];\n+}\n+\n+/**\n+ *  Return whether two `UINavigationItem` instances are equal\n+ *\n+ *  @param navigationItemA The first navigation item\n+ *  @param navigationItemB The second navigation item\n+ *\n+ *  The two instances are considered equal if all properties which have names included in the array\n+ *  obtained by calling `HUBNavigationItemPropertyNames()` are equal.\n+ */\n+static inline BOOL HUBNavigationItemEqualToNavigationItem(UINavigationItem *navigationItemA, UINavigationItem *navigationItemB) {",
        "path": "sources/HUBUtilities.h",
        "position": 63,
        "original_position": 63,
        "commit_id": "1e0626bbad43c4b483ff0cd706e650bb3bcca560",
        "original_commit_id": "40a9f55e1765166e0ed7d63f7fe48f68c4ca76bd",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "What\u2019s the reason we need to inline this function? Seems like it could just be a normal function instead, no?\n\nThe overhead of executing the function should be very minimal compared to the complexity of it\u2019s implementation. So might as well have it be a normal function imo.\n",
        "created_at": "2016-10-03T14:44:41Z",
        "updated_at": "2016-10-03T16:07:09Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/50#discussion_r81564632",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/50",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81564632"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/50#discussion_r81564632"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/50"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81564767",
        "pull_request_review_id": 2534041,
        "id": 81564767,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxNTY0NzY3",
        "diff_hunk": "@@ -95,6 +116,76 @@ static inline NSDictionary<NSString *, id> * _Nullable HUBMergeDictionaries(NSDi\n }\n \n /**\n+ *  Return the property names that should be taken into account when handling a `UINavigationItem`\n+ *\n+ *  This function is used to determine which properties should be compared or copied. Note that\n+ *  `HUBAutoEquatable` is not used here, since we don't control the implementation of the class.\n+ */\n+static inline NSArray<NSString *> *HUBNavigationItemPropertyNames() {\n+    return @[\n+        HUBKeyPath((UINavigationItem *)nil, title),\n+        HUBKeyPath((UINavigationItem *)nil, titleView),\n+        HUBKeyPath((UINavigationItem *)nil, prompt),\n+        HUBKeyPath((UINavigationItem *)nil, backBarButtonItem),\n+        HUBKeyPath((UINavigationItem *)nil, hidesBackButton),\n+        HUBKeyPath((UINavigationItem *)nil, leftBarButtonItems),\n+        HUBKeyPath((UINavigationItem *)nil, rightBarButtonItems),\n+        HUBKeyPath((UINavigationItem *)nil, leftItemsSupplementBackButton)\n+    ];\n+}\n+\n+/**\n+ *  Return whether two `UINavigationItem` instances are equal\n+ *\n+ *  @param navigationItemA The first navigation item\n+ *  @param navigationItemB The second navigation item\n+ *\n+ *  The two instances are considered equal if all properties which have names included in the array\n+ *  obtained by calling `HUBNavigationItemPropertyNames()` are equal.\n+ */\n+static inline BOOL HUBNavigationItemEqualToNavigationItem(UINavigationItem *navigationItemA, UINavigationItem *navigationItemB) {\n+    for (NSString * const propertyName in HUBNavigationItemPropertyNames()) {\n+        if (!HUBPropertyIsEqual(navigationItemA, navigationItemB, propertyName)) {\n+            return NO;\n+        }\n+    }\n+    \n+    return YES;\n+}\n+\n+/**\n+ *  Copy the properties from an instance of `UINavigationItem` into another\n+ *\n+ *  @param navigationItemA The navigation item to copy values into\n+ *  @param navigationItemB Any navigation item to copy values from\n+ *\n+ *  @return navigationItemA\n+ *\n+ *  If `navigationItemB` is nil, all `navigationItemA` properties will be reset to `nil`. To determine\n+ *  which properties that should be handled, `HUBNavigationItemPropertyNames()` is called.\n+ */\n+static inline UINavigationItem *HUBCopyNavigationItemProperties(UINavigationItem *navigationItemA, UINavigationItem * _Nullable navigationItemB) {",
        "path": "sources/HUBUtilities.h",
        "position": 84,
        "original_position": 84,
        "commit_id": "1e0626bbad43c4b483ff0cd706e650bb3bcca560",
        "original_commit_id": "40a9f55e1765166e0ed7d63f7fe48f68c4ca76bd",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This is so big and complex it feels like it shouldn\u2019t be inlined imo. How about changing it to a normal function?\n",
        "created_at": "2016-10-03T14:45:20Z",
        "updated_at": "2016-10-03T16:07:09Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/50#discussion_r81564767",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/50",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81564767"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/50#discussion_r81564767"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/50"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81565435",
        "pull_request_review_id": 2534041,
        "id": 81565435,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxNTY1NDM1",
        "diff_hunk": "@@ -68,11 +69,19 @@ NS_ASSUME_NONNULL_BEGIN\n /**\n  *  The title that the view should have in the navigation bar\n  *\n- *  The value of this property will be assigned to the view controller's title property\n+ *  This property is an alias for `navigationItem.title`.\n  */\n @property (nonatomic, copy, nullable) NSString *navigationBarTitle;\n \n /**\n+ *  The navigation item that the view should use when presented in a `UINavigationController`\n+ *\n+ *  You can use this navigation item to set what title, bar buttons etc that the view's navigation bar\n+ *  should contain. Only relevant when the view's controller is added to a container view controller.\n+ */\n+@property (nonatomic, strong, readonly) UINavigationItem *navigationItem;",
        "path": "include/HubFramework/HUBViewModelBuilder.h",
        "position": 23,
        "original_position": 23,
        "commit_id": "1e0626bbad43c4b483ff0cd706e650bb3bcca560",
        "original_commit_id": "40a9f55e1765166e0ed7d63f7fe48f68c4ca76bd",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Given its implementation, should we mark this as `null_resetable`? Since it would technically be possible to set it to `nil` and have it reset back to a default implementation when accessed again. Only if it\u2019s a use-case we intend to support of course.\n",
        "created_at": "2016-10-03T14:48:24Z",
        "updated_at": "2016-10-03T16:07:09Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/50#discussion_r81565435",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/50",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81565435"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/50#discussion_r81565435"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/50"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81567436",
        "pull_request_review_id": 2537920,
        "id": 81567436,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxNTY3NDM2",
        "diff_hunk": "@@ -20,6 +20,7 @@\n  */\n \n #import \"HUBSerializable.h\"\n+#import <UIKit/UIKit.h>",
        "path": "include/HubFramework/HUBViewModel.h",
        "position": null,
        "original_position": 4,
        "commit_id": "1e0626bbad43c4b483ff0cd706e650bb3bcca560",
        "original_commit_id": "40a9f55e1765166e0ed7d63f7fe48f68c4ca76bd",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Could do, but does it matter? I mean, `UIKIt` is required by the entire framework.\n",
        "created_at": "2016-10-03T14:56:57Z",
        "updated_at": "2016-10-03T16:07:09Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/50#discussion_r81567436",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/50",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81567436"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/50#discussion_r81567436"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/50"
            }
        },
        "in_reply_to_id": 81563520
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81567580",
        "pull_request_review_id": 2538057,
        "id": 81567580,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxNTY3NTgw",
        "diff_hunk": "@@ -68,11 +69,19 @@ NS_ASSUME_NONNULL_BEGIN\n /**\n  *  The title that the view should have in the navigation bar\n  *\n- *  The value of this property will be assigned to the view controller's title property\n+ *  This property is an alias for `navigationItem.title`.\n  */\n @property (nonatomic, copy, nullable) NSString *navigationBarTitle;\n \n /**\n+ *  The navigation item that the view should use when presented in a `UINavigationController`\n+ *\n+ *  You can use this navigation item to set what title, bar buttons etc that the view's navigation bar\n+ *  should contain. Only relevant when the view's controller is added to a container view controller.\n+ */\n+@property (nonatomic, strong, readonly) UINavigationItem *navigationItem;",
        "path": "include/HubFramework/HUBViewModelBuilder.h",
        "position": 23,
        "original_position": 23,
        "commit_id": "1e0626bbad43c4b483ff0cd706e650bb3bcca560",
        "original_commit_id": "40a9f55e1765166e0ed7d63f7fe48f68c4ca76bd",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It can't be reset to `nil`, since it's `readonly`. It will only be lazily created, but that's an implementation detail.\n",
        "created_at": "2016-10-03T14:57:39Z",
        "updated_at": "2016-10-03T16:07:09Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/50#discussion_r81567580",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/50",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81567580"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/50#discussion_r81567580"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/50"
            }
        },
        "in_reply_to_id": 81565435
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81567790",
        "pull_request_review_id": 2538249,
        "id": 81567790,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxNTY3Nzkw",
        "diff_hunk": "@@ -24,10 +24,31 @@\n #import \"HUBComponent.h\"\n #import \"HUBJSONCompatibleBuilder.h\"\n #import \"HUBSerializable.h\"\n+#import \"HUBKeyPath.h\"\n \n NS_ASSUME_NONNULL_BEGIN\n \n /**\n+ *  Return whether two properties are considered equal\n+ *\n+ *  @param objectA The first object\n+ *  @param objectB The second object\n+ *  @param propertyName The name of the property to compare\n+ *\n+ *  Two nil values are considered equal.\n+ */\n+static inline BOOL HUBPropertyIsEqual(NSObject * _Nullable objectA, NSObject * _Nullable objectB, NSString *propertyName) {",
        "path": "sources/HUBUtilities.h",
        "position": 17,
        "original_position": 17,
        "commit_id": "1e0626bbad43c4b483ff0cd706e650bb3bcca560",
        "original_commit_id": "40a9f55e1765166e0ed7d63f7fe48f68c4ca76bd",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "No reason, just in the habit of doing it. Adding `inline` as no downsides AFAIK though \ud83d\ude04 \n",
        "created_at": "2016-10-03T14:58:24Z",
        "updated_at": "2016-10-03T16:07:09Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/50#discussion_r81567790",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/50",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81567790"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/50#discussion_r81567790"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/50"
            }
        },
        "in_reply_to_id": 81564428
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81567910",
        "pull_request_review_id": 2538369,
        "id": 81567910,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxNTY3OTEw",
        "diff_hunk": "@@ -95,6 +116,76 @@ static inline NSDictionary<NSString *, id> * _Nullable HUBMergeDictionaries(NSDi\n }\n \n /**\n+ *  Return the property names that should be taken into account when handling a `UINavigationItem`\n+ *\n+ *  This function is used to determine which properties should be compared or copied. Note that\n+ *  `HUBAutoEquatable` is not used here, since we don't control the implementation of the class.\n+ */\n+static inline NSArray<NSString *> *HUBNavigationItemPropertyNames() {\n+    return @[\n+        HUBKeyPath((UINavigationItem *)nil, title),\n+        HUBKeyPath((UINavigationItem *)nil, titleView),\n+        HUBKeyPath((UINavigationItem *)nil, prompt),\n+        HUBKeyPath((UINavigationItem *)nil, backBarButtonItem),\n+        HUBKeyPath((UINavigationItem *)nil, hidesBackButton),\n+        HUBKeyPath((UINavigationItem *)nil, leftBarButtonItems),\n+        HUBKeyPath((UINavigationItem *)nil, rightBarButtonItems),\n+        HUBKeyPath((UINavigationItem *)nil, leftItemsSupplementBackButton)\n+    ];\n+}\n+\n+/**\n+ *  Return whether two `UINavigationItem` instances are equal\n+ *\n+ *  @param navigationItemA The first navigation item\n+ *  @param navigationItemB The second navigation item\n+ *\n+ *  The two instances are considered equal if all properties which have names included in the array\n+ *  obtained by calling `HUBNavigationItemPropertyNames()` are equal.\n+ */\n+static inline BOOL HUBNavigationItemEqualToNavigationItem(UINavigationItem *navigationItemA, UINavigationItem *navigationItemB) {\n+    for (NSString * const propertyName in HUBNavigationItemPropertyNames()) {\n+        if (!HUBPropertyIsEqual(navigationItemA, navigationItemB, propertyName)) {\n+            return NO;\n+        }\n+    }\n+    \n+    return YES;\n+}\n+\n+/**\n+ *  Copy the properties from an instance of `UINavigationItem` into another\n+ *\n+ *  @param navigationItemA The navigation item to copy values into\n+ *  @param navigationItemB Any navigation item to copy values from\n+ *\n+ *  @return navigationItemA\n+ *\n+ *  If `navigationItemB` is nil, all `navigationItemA` properties will be reset to `nil`. To determine\n+ *  which properties that should be handled, `HUBNavigationItemPropertyNames()` is called.\n+ */\n+static inline UINavigationItem *HUBCopyNavigationItemProperties(UINavigationItem *navigationItemA, UINavigationItem * _Nullable navigationItemB) {",
        "path": "sources/HUBUtilities.h",
        "position": 84,
        "original_position": 84,
        "commit_id": "1e0626bbad43c4b483ff0cd706e650bb3bcca560",
        "original_commit_id": "40a9f55e1765166e0ed7d63f7fe48f68c4ca76bd",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Fair point actually, will change!\n",
        "created_at": "2016-10-03T14:58:54Z",
        "updated_at": "2016-10-03T16:07:09Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/50#discussion_r81567910",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/50",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81567910"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/50#discussion_r81567910"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/50"
            }
        },
        "in_reply_to_id": 81564767
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81568110",
        "pull_request_review_id": 2538562,
        "id": 81568110,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxNTY4MTEw",
        "diff_hunk": "@@ -68,11 +69,19 @@ NS_ASSUME_NONNULL_BEGIN\n /**\n  *  The title that the view should have in the navigation bar\n  *\n- *  The value of this property will be assigned to the view controller's title property\n+ *  This property is an alias for `navigationItem.title`.\n  */\n @property (nonatomic, copy, nullable) NSString *navigationBarTitle;",
        "path": "include/HubFramework/HUBViewModelBuilder.h",
        "position": 15,
        "original_position": 15,
        "commit_id": "1e0626bbad43c4b483ff0cd706e650bb3bcca560",
        "original_commit_id": "40a9f55e1765166e0ed7d63f7fe48f68c4ca76bd",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yeah, we have convenience APIs like that on `HUBComponentModel` as well, aliases to perform common tasks, such as setting `imageURLs` etc. So no need to deprecate it at this time :)\n",
        "created_at": "2016-10-03T14:59:47Z",
        "updated_at": "2016-10-03T16:07:09Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/50#discussion_r81568110",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/50",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81568110"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/50#discussion_r81568110"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/50"
            }
        },
        "in_reply_to_id": 81563353
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81576725",
        "pull_request_review_id": 2546672,
        "id": 81576725,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxNTc2NzI1",
        "diff_hunk": "@@ -24,10 +24,31 @@\n #import \"HUBComponent.h\"\n #import \"HUBJSONCompatibleBuilder.h\"\n #import \"HUBSerializable.h\"\n+#import \"HUBKeyPath.h\"\n \n NS_ASSUME_NONNULL_BEGIN\n \n /**\n+ *  Return whether two properties are considered equal\n+ *\n+ *  @param objectA The first object\n+ *  @param objectB The second object\n+ *  @param propertyName The name of the property to compare\n+ *\n+ *  Two nil values are considered equal.\n+ */\n+static inline BOOL HUBPropertyIsEqual(NSObject * _Nullable objectA, NSObject * _Nullable objectB, NSString *propertyName) {",
        "path": "sources/HUBUtilities.h",
        "position": 17,
        "original_position": 17,
        "commit_id": "1e0626bbad43c4b483ff0cd706e650bb3bcca560",
        "original_commit_id": "40a9f55e1765166e0ed7d63f7fe48f68c4ca76bd",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Since it's only used in two places (both of which are in loops), wouldn't it be a perfect candidate for inlining? :smile: \n",
        "created_at": "2016-10-03T15:39:29Z",
        "updated_at": "2016-10-03T16:07:09Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/50#discussion_r81576725",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/50",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81576725"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/50#discussion_r81576725"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/50"
            }
        },
        "in_reply_to_id": 81564428
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81580886",
        "pull_request_review_id": 2550476,
        "id": 81580886,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxNTgwODg2",
        "diff_hunk": "@@ -68,11 +69,19 @@ NS_ASSUME_NONNULL_BEGIN\n /**\n  *  The title that the view should have in the navigation bar\n  *\n- *  The value of this property will be assigned to the view controller's title property\n+ *  This property is an alias for `navigationItem.title`.\n  */\n @property (nonatomic, copy, nullable) NSString *navigationBarTitle;\n \n /**\n+ *  The navigation item that the view should use when presented in a `UINavigationController`\n+ *\n+ *  You can use this navigation item to set what title, bar buttons etc that the view's navigation bar\n+ *  should contain. Only relevant when the view's controller is added to a container view controller.\n+ */\n+@property (nonatomic, strong, readonly) UINavigationItem *navigationItem;",
        "path": "include/HubFramework/HUBViewModelBuilder.h",
        "position": 23,
        "original_position": 23,
        "commit_id": "1e0626bbad43c4b483ff0cd706e650bb3bcca560",
        "original_commit_id": "40a9f55e1765166e0ed7d63f7fe48f68c4ca76bd",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "My bad! Missed that keyword \ud83d\ude05 \ud83d\udc4d \n",
        "created_at": "2016-10-03T15:59:02Z",
        "updated_at": "2016-10-03T16:07:09Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/50#discussion_r81580886",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/50",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81580886"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/50#discussion_r81580886"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/50"
            }
        },
        "in_reply_to_id": 81565435
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81581376",
        "pull_request_review_id": 2550931,
        "id": 81581376,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxNTgxMzc2",
        "diff_hunk": "@@ -20,6 +20,7 @@\n  */\n \n #import \"HUBSerializable.h\"\n+#import <UIKit/UIKit.h>",
        "path": "include/HubFramework/HUBViewModel.h",
        "position": null,
        "original_position": 4,
        "commit_id": "1e0626bbad43c4b483ff0cd706e650bb3bcca560",
        "original_commit_id": "40a9f55e1765166e0ed7d63f7fe48f68c4ca76bd",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It does speed up compile time. Up to you :)\n",
        "created_at": "2016-10-03T16:01:28Z",
        "updated_at": "2016-10-03T16:07:09Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/50#discussion_r81581376",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/50",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81581376"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/50#discussion_r81581376"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/50"
            }
        },
        "in_reply_to_id": 81563520
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81581505",
        "pull_request_review_id": 2551051,
        "id": 81581505,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxNTgxNTA1",
        "diff_hunk": "@@ -24,10 +24,31 @@\n #import \"HUBComponent.h\"\n #import \"HUBJSONCompatibleBuilder.h\"\n #import \"HUBSerializable.h\"\n+#import \"HUBKeyPath.h\"\n \n NS_ASSUME_NONNULL_BEGIN\n \n /**\n+ *  Return whether two properties are considered equal\n+ *\n+ *  @param objectA The first object\n+ *  @param objectB The second object\n+ *  @param propertyName The name of the property to compare\n+ *\n+ *  Two nil values are considered equal.\n+ */\n+static inline BOOL HUBPropertyIsEqual(NSObject * _Nullable objectA, NSObject * _Nullable objectB, NSString *propertyName) {",
        "path": "sources/HUBUtilities.h",
        "position": 17,
        "original_position": 17,
        "commit_id": "1e0626bbad43c4b483ff0cd706e650bb3bcca560",
        "original_commit_id": "40a9f55e1765166e0ed7d63f7fe48f68c4ca76bd",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@Goos Right, let\u2019s keep this inline then! \ud83d\ude04 \n",
        "created_at": "2016-10-03T16:02:06Z",
        "updated_at": "2016-10-03T16:07:09Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/50#discussion_r81581505",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/50",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81581505"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/50#discussion_r81581505"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/50"
            }
        },
        "in_reply_to_id": 81564428
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81025762",
        "pull_request_review_id": 2037081,
        "id": 81025762,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxMDI1NzYy",
        "diff_hunk": "@@ -0,0 +1,27 @@\n+# Mainly to encourage writing up some reasoning about the PR, rather than just leaving a title\n+if github.pr_body.length < 5\n+  fail \"Please provide a summary in the Pull Request description\"\n+end\n+\n+# Just to let people know\n+warn(\"PR is classed as Work in Progress\") if github.pr_title.include? \"[WIP]\"",
        "path": "Dangerfile",
        "position": null,
        "original_position": 7,
        "commit_id": "45dd126c697859bf7595e7d22aa250aca8b4bf5c",
        "original_commit_id": "61ee7de268ec8f003e2591b53d217b47cff717a8",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Maybe just includes \"WIP\" as not everyone adds \"[\" \"]\" around it. Also could check for the \u26a0\ufe0f in the description maybe? (although that could produce false positives)\n",
        "created_at": "2016-09-28T21:52:29Z",
        "updated_at": "2016-10-03T18:39:14Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/8#discussion_r81025762",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/8",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81025762"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/8#discussion_r81025762"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/8"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81220168",
        "pull_request_review_id": 2216676,
        "id": 81220168,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxMjIwMTY4",
        "diff_hunk": "@@ -0,0 +1,27 @@\n+# Mainly to encourage writing up some reasoning about the PR, rather than just leaving a title\n+if github.pr_body.length < 5\n+  fail \"Please provide a summary in the Pull Request description\"\n+end\n+\n+# Just to let people know\n+warn(\"PR is classed as Work in Progress\") if github.pr_title.include? \"[WIP]\"",
        "path": "Dangerfile",
        "position": null,
        "original_position": 7,
        "commit_id": "45dd126c697859bf7595e7d22aa250aca8b4bf5c",
        "original_commit_id": "61ee7de268ec8f003e2591b53d217b47cff717a8",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Done \u2705 \n",
        "created_at": "2016-09-29T19:52:01Z",
        "updated_at": "2016-10-03T18:39:14Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/8#discussion_r81220168",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/8",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81220168"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/8#discussion_r81220168"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/8"
            }
        },
        "in_reply_to_id": 81025762
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81623678",
        "pull_request_review_id": 2590480,
        "id": 81623678,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxNjIzNjc4",
        "diff_hunk": "@@ -12,7 +12,7 @@ platform :ios do\n     UI.message(\"Simulator testing device set to '#{device}'\")\n \n     scan(\n-      :workspace => 'HubFramework.xcworkspace',\n+      :project => 'HubFramework.xcodeproj',\n       :scheme => 'HubFramework',",
        "path": "fastlane/Fastfile",
        "position": 6,
        "original_position": 6,
        "commit_id": "b44fce9e2762188794ba3181542d8f9a112350f9",
        "original_commit_id": "b44fce9e2762188794ba3181542d8f9a112350f9",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Unfortunately not. Xcode doesn\u2019t support running tests with just a target name. You need a scheme \ud83d\ude22 \n",
        "created_at": "2016-10-03T19:39:24Z",
        "updated_at": "2016-10-03T19:39:24Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/45#discussion_r81623678",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/45",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81623678"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/45#discussion_r81623678"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/45"
            }
        },
        "in_reply_to_id": 81445759
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/82082346",
        "pull_request_review_id": 3014653,
        "id": 82082346,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgyMDgyMzQ2",
        "diff_hunk": "@@ -575,7 +575,7 @@ The JSON above specifies that we want to add 4 body components that use our new\n \n We're now finished with our second content operation, and we're ready to integrate it into our content loading chain. To do that, we'll add it to the array of content operations that our content operation factory returns.\n \n-The order of the returned array determines the loading order. In our case it doesn't really matter, since both of our content operations deal with separate component models - but if you wanted to continously mutate a component model throughout different operations - the order will probably matter.\n+The order of the returned array determines the loading order. In our case it doesn't really matter, since both of our content operations deal with separate component models - but if you wanted to continuosly mutate a component model throughout different operations - the order will probably matter.",
        "path": "documentation/Getting started guide.md",
        "position": null,
        "original_position": 23,
        "commit_id": "6cbea6256c9a419e1b2bf5a3cb6049233fd26423",
        "original_commit_id": "02f7a81acf2fe7efac0192bfe67f3de7c8aa4110",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It's actually spelled `continuously` \ud83d\ude1b\n",
        "created_at": "2016-10-05T22:11:23Z",
        "updated_at": "2016-10-06T07:15:49Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/57#discussion_r82082346",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/57",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/82082346"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/57#discussion_r82082346"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/57"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81994762",
        "pull_request_review_id": 2933284,
        "id": 81994762,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxOTk0NzYy",
        "diff_hunk": "@@ -183,7 +183,7 @@ - (CGPoint)targetContentOffsetForProposedContentOffset:(CGPoint)proposedContentO\n     \n     for (NSIndexPath *indexPath in self.lastViewModelDiff.insertedBodyComponentIndexPaths) {\n         if (indexPath.item <= topmostVisibleIndex) {\n-            UICollectionViewLayoutAttributes *attributes = self.previousLayoutAttributesByIndexPath[indexPath];\n+            UICollectionViewLayoutAttributes *attributes = self.layoutAttributesByIndexPath[indexPath];",
        "path": "sources/HUBCollectionViewLayout.m",
        "position": 5,
        "original_position": 5,
        "commit_id": "a02d7db59b8cb10bab3426c11c7c95c08d10b54c",
        "original_commit_id": "ffe0254c3a311bea80c87d64d72d4f4aa47af15e",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The size of the added cells should be computed from the new layout attributes, rather than the previous.\n",
        "created_at": "2016-10-05T15:06:30Z",
        "updated_at": "2016-10-06T07:32:44Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/55#discussion_r81994762",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/55",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81994762"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/55#discussion_r81994762"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/55"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81995203",
        "pull_request_review_id": 2933719,
        "id": 81995203,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxOTk1MjAz",
        "diff_hunk": "@@ -198,7 +198,7 @@ - (CGPoint)targetContentOffsetForProposedContentOffset:(CGPoint)proposedContentO\n     for (NSIndexPath *indexPath in self.lastViewModelDiff.reloadedBodyComponentIndexPaths) {\n         if (indexPath.item < topmostVisibleIndex) {\n             UICollectionViewLayoutAttributes *oldAttributes = self.previousLayoutAttributesByIndexPath[indexPath];\n-            UICollectionViewLayoutAttributes *newAttributes = self.previousLayoutAttributesByIndexPath[indexPath];\n+            UICollectionViewLayoutAttributes *newAttributes = self.layoutAttributesByIndexPath[indexPath];",
        "path": "sources/HUBCollectionViewLayout.m",
        "position": 14,
        "original_position": 14,
        "commit_id": "a02d7db59b8cb10bab3426c11c7c95c08d10b54c",
        "original_commit_id": "bc28fcbf095710c568491afa398304e7d8d2337c",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "...As should the reloads\n",
        "created_at": "2016-10-05T15:08:23Z",
        "updated_at": "2016-10-06T07:32:44Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/55#discussion_r81995203",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/55",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/81995203"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/55#discussion_r81995203"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/55"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/82384902",
        "pull_request_review_id": 3297246,
        "id": 82384902,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgyMzg0OTAy",
        "diff_hunk": "@@ -609,11 +610,18 @@ - (void)reloadCollectionViewWithViewModel:(id<HUBViewModel>)viewModel animated:(\n     /* Performing batch updates inbetween viewDidLoad and viewDidAppear is seemingly not allowed, as it\n      causes an assertion inside a private UICollectionView method. If no diff exists, fall back to\n      a complete reload. */\n-    if (!self.viewHasAppeared || self.lastViewModelDiff == nil) {\n+    if (!self.hasPerformedInitialReload || !self.viewHasAppeared || self.lastViewModelDiff == nil) {",
        "path": "sources/HUBViewControllerImplementation.m",
        "position": 13,
        "original_position": 13,
        "commit_id": "b228ca9a1f99808c52fd8d19dad468d352a70357",
        "original_commit_id": "b228ca9a1f99808c52fd8d19dad468d352a70357",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "With this, can we remove `viewHasBeenLaidOut`, or do they complement each other?\n",
        "created_at": "2016-10-07T13:08:00Z",
        "updated_at": "2016-10-07T13:08:13Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/61#discussion_r82384902",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/61",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/82384902"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/61#discussion_r82384902"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/61"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/82387349",
        "pull_request_review_id": 3299702,
        "id": 82387349,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgyMzg3MzQ5",
        "diff_hunk": "@@ -609,11 +610,18 @@ - (void)reloadCollectionViewWithViewModel:(id<HUBViewModel>)viewModel animated:(\n     /* Performing batch updates inbetween viewDidLoad and viewDidAppear is seemingly not allowed, as it\n      causes an assertion inside a private UICollectionView method. If no diff exists, fall back to\n      a complete reload. */\n-    if (!self.viewHasAppeared || self.lastViewModelDiff == nil) {\n+    if (!self.hasPerformedInitialReload || !self.viewHasAppeared || self.lastViewModelDiff == nil) {\n         [self.collectionView reloadData];\n         \n         [layout computeForCollectionViewSize:self.collectionView.frame.size viewModel:viewModel diff:self.lastViewModelDiff];\n+        \n+        /* Forcing a re-layout as the reloadData-call doesn't trigger the numberOfItemsInSection:-calls \n+           by itself, and batch update calls don't play well without having an initial item count. */",
        "path": "sources/HUBViewControllerImplementation.m",
        "position": 19,
        "original_position": 19,
        "commit_id": "b228ca9a1f99808c52fd8d19dad468d352a70357",
        "original_commit_id": "b228ca9a1f99808c52fd8d19dad468d352a70357",
        "user": {
            "login": "nataliq",
            "id": 1555713,
            "node_id": "MDQ6VXNlcjE1NTU3MTM=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1555713?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nataliq",
            "html_url": "https://github.com/nataliq",
            "followers_url": "https://api.github.com/users/nataliq/followers",
            "following_url": "https://api.github.com/users/nataliq/following{/other_user}",
            "gists_url": "https://api.github.com/users/nataliq/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nataliq/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nataliq/subscriptions",
            "organizations_url": "https://api.github.com/users/nataliq/orgs",
            "repos_url": "https://api.github.com/users/nataliq/repos",
            "events_url": "https://api.github.com/users/nataliq/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nataliq/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Actually I was able to reproduce the crash even after the `numberOfItemsInSection:` was called initially so not sure that this guarantees the expected behaviour. \n",
        "created_at": "2016-10-07T13:23:04Z",
        "updated_at": "2016-10-07T13:23:04Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/61#discussion_r82387349",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/61",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/82387349"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/61#discussion_r82387349"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/61"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/82235473",
        "pull_request_review_id": 3157195,
        "id": 82235473,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgyMjM1NDcz",
        "diff_hunk": "@@ -282,8 +281,9 @@ - (void)component:(id<HUBComponentWithChildren>)component didStopDisplayingChild\n         return;\n     }\n     \n+    HUBComponentWrapper * const childComponent = self.childrenByIndex[@(childIndex)];",
        "path": "sources/HUBComponentWrapper.m",
        "position": 35,
        "original_position": 30,
        "commit_id": "9fb001084483d88565e066c429968deff745bdf0",
        "original_commit_id": "8c13cbf998540618298aa2d22302a0bc3684ffc8",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This will break for components that are using normal `UIViews` for their child components instead of creating them through the framework. It's a usecase that we want (and need to - for legacy) support :/\n\nBasically this will be `nil` for those type fo components.\n",
        "created_at": "2016-10-06T17:02:23Z",
        "updated_at": "2016-10-07T14:52:04Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/58#discussion_r82235473",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/58",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/82235473"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/58#discussion_r82235473"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/58"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/82347591",
        "pull_request_review_id": 3261867,
        "id": 82347591,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgyMzQ3NTkx",
        "diff_hunk": "@@ -282,8 +281,9 @@ - (void)component:(id<HUBComponentWithChildren>)component didStopDisplayingChild\n         return;\n     }\n     \n+    HUBComponentWrapper * const childComponent = self.childrenByIndex[@(childIndex)];",
        "path": "sources/HUBComponentWrapper.m",
        "position": 35,
        "original_position": 30,
        "commit_id": "9fb001084483d88565e066c429968deff745bdf0",
        "original_commit_id": "8c13cbf998540618298aa2d22302a0bc3684ffc8",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@JohnSundell Oh damn, didn't know that! So would these UIView's also be able to conform to HUBComponentContentOffsetObserver, or is it alright if we only add support for content offset observing for the components created through the framework?\n",
        "created_at": "2016-10-07T08:26:30Z",
        "updated_at": "2016-10-07T14:52:04Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/58#discussion_r82347591",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/58",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/82347591"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/58#discussion_r82347591"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/58"
            }
        },
        "in_reply_to_id": 82235473
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/82379535",
        "pull_request_review_id": 3292079,
        "id": 82379535,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgyMzc5NTM1",
        "diff_hunk": "@@ -282,8 +281,9 @@ - (void)component:(id<HUBComponentWithChildren>)component didStopDisplayingChild\n         return;\n     }\n     \n+    HUBComponentWrapper * const childComponent = self.childrenByIndex[@(childIndex)];",
        "path": "sources/HUBComponentWrapper.m",
        "position": 35,
        "original_position": 30,
        "commit_id": "9fb001084483d88565e066c429968deff745bdf0",
        "original_commit_id": "8c13cbf998540618298aa2d22302a0bc3684ffc8",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yeah we need to add some tests to cover that! \ud83d\ude01 Yeah, it's definetly alright to limit the functionality for `UIView`-based components, as long as they continue working as expected \ud83d\ude00\n",
        "created_at": "2016-10-07T12:31:14Z",
        "updated_at": "2016-10-07T14:52:04Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/58#discussion_r82379535",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/58",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/82379535"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/58#discussion_r82379535"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/58"
            }
        },
        "in_reply_to_id": 82235473
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/82380184",
        "pull_request_review_id": 3292737,
        "id": 82380184,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgyMzgwMTg0",
        "diff_hunk": "@@ -54,7 +54,8 @@ NS_ASSUME_NONNULL_BEGIN\n  *  @param childIndex The index of the child component that is about to appear\n  */\n - (void)componentWrapper:(HUBComponentWrapper *)componentWrapper\n-  childComponentWithView:(UIView *)childComponentView\n+          childComponent:(nullable HUBComponentWrapper *)childComponent",
        "path": "sources/HUBComponentWrapper.h",
        "position": 10,
        "original_position": 5,
        "commit_id": "9fb001084483d88565e066c429968deff745bdf0",
        "original_commit_id": "caedd2fc65cb6d221f1ff019920f832f66b9ed5c",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Add documentation for this new parameter :)\n",
        "created_at": "2016-10-07T12:35:49Z",
        "updated_at": "2016-10-07T14:52:04Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/58#discussion_r82380184",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/58",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/82380184"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/58#discussion_r82380184"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/58"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/82408495",
        "pull_request_review_id": 3320186,
        "id": 82408495,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgyNDA4NDk1",
        "diff_hunk": "@@ -46,17 +47,37 @@ NS_ASSUME_NONNULL_BEGIN\n - (BOOL)canCreateViewControllerForViewURI:(NSURL *)viewURI;\n \n /**\n- *  Create a view controller for a certain view URI\n+ *  Create a view controller for a certain pre-registered view URI\n  *\n- *  @param viewURI The view URI to create a view controller for\n+ *  @param viewURI The view URI to create a view controller for. The URI should match a feature that\n+ *         was previously registered with `HUBFeatureRegistry`.\n  *\n  *  @return A Hub Framework-powered view controller used for rendering content provided by a feature\u2019s\n  *  content operations, using a User Interface consisting of `HUBComponent` views. If a view controller\n  *  could not be created for the supplied viewURI (because a feature registration could not be resolved\n  *  for it), this method returns `nil`.\n+ *\n+ *  To be able to create a view controller without creating a feature, you can use the other view controller\n+ *  creation method available on this protocol.\n  */\n - (nullable UIViewController<HUBViewController> *)createViewControllerForViewURI:(NSURL *)viewURI;\n \n+/**\n+ *  Create a view controller without a feature registration\n+ *\n+ *  @param viewURI The URI of the view controller to create. This view URI will not be looked up in the\n+ *         Hub Framework's feature registry, it will simply be assigned to the view controller.\n+ *  @param contentOperations The content operations to use to load the content for the view controller.\n+ *  @param featureIdentifier The identifier of the feature that the view controller will belong to. Will\n+ *         be made available to content operations as part of `HUBFeatureInfo`.\n+ *  @param featureTitle The title of the feature that the view controller will belong to. Used for its\n+ *         default title, and also made available to contnet operations as part of `HUBFeatureInfo`.\n+ */\n+- (UIViewController<HUBViewController> *)createViewControllerForViewURI:(NSURL *)viewURI\n+                                                      contentOperations:(NSArray<id<HUBContentOperation>> *)contentOperations\n+                                                      featureIdentifier:(NSString *)featureIdentifier",
        "path": "include/HubFramework/HUBViewControllerFactory.h",
        "position": 42,
        "original_position": 42,
        "commit_id": "9d94cb9e56685d74e5a52a4932a50f424d0b97ce",
        "original_commit_id": "d227303202a75c6b7cbff202bc5c9bb47fefbe4c",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "If the point of this method is to enable creating view controllers without registering a feature, does it still make sense to require a feature identifier? \n",
        "created_at": "2016-10-07T15:09:30Z",
        "updated_at": "2016-10-07T15:20:10Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/62#discussion_r82408495",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/62",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/82408495"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/62#discussion_r82408495"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/62"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/82408918",
        "pull_request_review_id": 3320186,
        "id": 82408918,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgyNDA4OTE4",
        "diff_hunk": "@@ -0,0 +1,47 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import \"HUBContentOperationFactory.h\"\n+#import \"HUBHeaderMacros.h\"\n+\n+NS_ASSUME_NONNULL_BEGIN\n+\n+/**\n+ *  A concrete content opereation factory implementation that uses a block\n+ *\n+ *  You can use this content operation factory in case you want to implement a simple factory that\n+ *  doesn't need any injected dependencies or complex logic. For more advanced use cases, see the\n+ *  `HUBContentOperationFactory` protocol, that you can implement in a custom object.\n+ */\n+@interface HUBBlockContentOperationFactory : NSObject  <HUBContentOperationFactory>\n+\n+/**\n+ *  Initialize an instance of this class with a block that creates content operations\n+ *\n+ *  @param block The block used to create content operations. The input parameter of the block will\n+ *         be the view URI that content operations should be created for. This block will be copied\n+ *         and called every time this factory is asked to create content operations.\n+ */\n+- (instancetype)initWithBlock:(NSArray<id<HUBContentOperation>> *(^)(NSURL *))block HUB_DESIGNATED_INITIALIZER;",
        "path": "include/HubFramework/HUBBlockContentOperationFactory.h",
        "position": null,
        "original_position": 43,
        "commit_id": "9d94cb9e56685d74e5a52a4932a50f424d0b97ce",
        "original_commit_id": "d227303202a75c6b7cbff202bc5c9bb47fefbe4c",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Perhaps we could typedef this block to make it more readable?\n",
        "created_at": "2016-10-07T15:11:40Z",
        "updated_at": "2016-10-07T15:20:10Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/62#discussion_r82408918",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/62",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/82408918"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/62#discussion_r82408918"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/62"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/82409303",
        "pull_request_review_id": 3320974,
        "id": 82409303,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgyNDA5MzAz",
        "diff_hunk": "@@ -46,17 +47,37 @@ NS_ASSUME_NONNULL_BEGIN\n - (BOOL)canCreateViewControllerForViewURI:(NSURL *)viewURI;\n \n /**\n- *  Create a view controller for a certain view URI\n+ *  Create a view controller for a certain pre-registered view URI\n  *\n- *  @param viewURI The view URI to create a view controller for\n+ *  @param viewURI The view URI to create a view controller for. The URI should match a feature that\n+ *         was previously registered with `HUBFeatureRegistry`.\n  *\n  *  @return A Hub Framework-powered view controller used for rendering content provided by a feature\u2019s\n  *  content operations, using a User Interface consisting of `HUBComponent` views. If a view controller\n  *  could not be created for the supplied viewURI (because a feature registration could not be resolved\n  *  for it), this method returns `nil`.\n+ *\n+ *  To be able to create a view controller without creating a feature, you can use the other view controller\n+ *  creation method available on this protocol.\n  */\n - (nullable UIViewController<HUBViewController> *)createViewControllerForViewURI:(NSURL *)viewURI;\n \n+/**\n+ *  Create a view controller without a feature registration\n+ *\n+ *  @param viewURI The URI of the view controller to create. This view URI will not be looked up in the\n+ *         Hub Framework's feature registry, it will simply be assigned to the view controller.\n+ *  @param contentOperations The content operations to use to load the content for the view controller.\n+ *  @param featureIdentifier The identifier of the feature that the view controller will belong to. Will\n+ *         be made available to content operations as part of `HUBFeatureInfo`.\n+ *  @param featureTitle The title of the feature that the view controller will belong to. Used for its\n+ *         default title, and also made available to contnet operations as part of `HUBFeatureInfo`.\n+ */\n+- (UIViewController<HUBViewController> *)createViewControllerForViewURI:(NSURL *)viewURI\n+                                                      contentOperations:(NSArray<id<HUBContentOperation>> *)contentOperations\n+                                                      featureIdentifier:(NSString *)featureIdentifier",
        "path": "include/HubFramework/HUBViewControllerFactory.h",
        "position": 42,
        "original_position": 42,
        "commit_id": "9d94cb9e56685d74e5a52a4932a50f424d0b97ce",
        "original_commit_id": "d227303202a75c6b7cbff202bc5c9bb47fefbe4c",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yeah, it's needed for other APIs, such as passing `HUBFeatureInfo` to content operations. Better to require it to enable content operations to be reusable between view controllers created this way and those created from feature registrations.\n",
        "created_at": "2016-10-07T15:13:37Z",
        "updated_at": "2016-10-07T15:20:10Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/62#discussion_r82409303",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/62",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/82409303"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/62#discussion_r82409303"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/62"
            }
        },
        "in_reply_to_id": 82408495
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/82409345",
        "pull_request_review_id": 3321018,
        "id": 82409345,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgyNDA5MzQ1",
        "diff_hunk": "@@ -0,0 +1,47 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import \"HUBContentOperationFactory.h\"\n+#import \"HUBHeaderMacros.h\"\n+\n+NS_ASSUME_NONNULL_BEGIN\n+\n+/**\n+ *  A concrete content opereation factory implementation that uses a block\n+ *\n+ *  You can use this content operation factory in case you want to implement a simple factory that\n+ *  doesn't need any injected dependencies or complex logic. For more advanced use cases, see the\n+ *  `HUBContentOperationFactory` protocol, that you can implement in a custom object.\n+ */\n+@interface HUBBlockContentOperationFactory : NSObject  <HUBContentOperationFactory>\n+\n+/**\n+ *  Initialize an instance of this class with a block that creates content operations\n+ *\n+ *  @param block The block used to create content operations. The input parameter of the block will\n+ *         be the view URI that content operations should be created for. This block will be copied\n+ *         and called every time this factory is asked to create content operations.\n+ */\n+- (instancetype)initWithBlock:(NSArray<id<HUBContentOperation>> *(^)(NSURL *))block HUB_DESIGNATED_INITIALIZER;",
        "path": "include/HubFramework/HUBBlockContentOperationFactory.h",
        "position": null,
        "original_position": 43,
        "commit_id": "9d94cb9e56685d74e5a52a4932a50f424d0b97ce",
        "original_commit_id": "d227303202a75c6b7cbff202bc5c9bb47fefbe4c",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Good suggestion, I'll do that! \ud83d\udc4d \n",
        "created_at": "2016-10-07T15:13:52Z",
        "updated_at": "2016-10-07T15:20:10Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/62#discussion_r82409345",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/62",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/82409345"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/62#discussion_r82409345"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/62"
            }
        },
        "in_reply_to_id": 82408918
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/82409470",
        "pull_request_review_id": 3321147,
        "id": 82409470,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgyNDA5NDcw",
        "diff_hunk": "@@ -46,17 +47,37 @@ NS_ASSUME_NONNULL_BEGIN\n - (BOOL)canCreateViewControllerForViewURI:(NSURL *)viewURI;\n \n /**\n- *  Create a view controller for a certain view URI\n+ *  Create a view controller for a certain pre-registered view URI\n  *\n- *  @param viewURI The view URI to create a view controller for\n+ *  @param viewURI The view URI to create a view controller for. The URI should match a feature that\n+ *         was previously registered with `HUBFeatureRegistry`.\n  *\n  *  @return A Hub Framework-powered view controller used for rendering content provided by a feature\u2019s\n  *  content operations, using a User Interface consisting of `HUBComponent` views. If a view controller\n  *  could not be created for the supplied viewURI (because a feature registration could not be resolved\n  *  for it), this method returns `nil`.\n+ *\n+ *  To be able to create a view controller without creating a feature, you can use the other view controller\n+ *  creation method available on this protocol.\n  */\n - (nullable UIViewController<HUBViewController> *)createViewControllerForViewURI:(NSURL *)viewURI;\n \n+/**\n+ *  Create a view controller without a feature registration\n+ *\n+ *  @param viewURI The URI of the view controller to create. This view URI will not be looked up in the\n+ *         Hub Framework's feature registry, it will simply be assigned to the view controller.\n+ *  @param contentOperations The content operations to use to load the content for the view controller.\n+ *  @param featureIdentifier The identifier of the feature that the view controller will belong to. Will\n+ *         be made available to content operations as part of `HUBFeatureInfo`.\n+ *  @param featureTitle The title of the feature that the view controller will belong to. Used for its\n+ *         default title, and also made available to contnet operations as part of `HUBFeatureInfo`.\n+ */\n+- (UIViewController<HUBViewController> *)createViewControllerForViewURI:(NSURL *)viewURI\n+                                                      contentOperations:(NSArray<id<HUBContentOperation>> *)contentOperations\n+                                                      featureIdentifier:(NSString *)featureIdentifier",
        "path": "include/HubFramework/HUBViewControllerFactory.h",
        "position": 42,
        "original_position": 42,
        "commit_id": "9d94cb9e56685d74e5a52a4932a50f424d0b97ce",
        "original_commit_id": "d227303202a75c6b7cbff202bc5c9bb47fefbe4c",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Gotcha \ud83d\udc4d \n",
        "created_at": "2016-10-07T15:14:33Z",
        "updated_at": "2016-10-07T15:20:10Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/62#discussion_r82409470",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/62",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/82409470"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/62#discussion_r82409470"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/62"
            }
        },
        "in_reply_to_id": 82408495
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/82410944",
        "pull_request_review_id": 3322585,
        "id": 82410944,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgyNDEwOTQ0",
        "diff_hunk": "@@ -103,6 +103,30 @@ - (void)testCreatingViewControllerForInvalidViewURIReturnsNil\n     XCTAssertNil([self.manager.viewControllerFactory createViewControllerForViewURI:viewURI]);\n }\n \n+- (void)testCreatingViewControllerWithoutFeatureRegistration\n+{\n+    NSURL * const viewURI = [NSURL URLWithString:@\"spotify:hub:framework\"];\n+    HUBContentOperationMock * const contentOperation = [HUBContentOperationMock new];\n+    \n+    __block BOOL contentOperationCalled = NO;\n+    \n+    contentOperation.contentLoadingBlock = ^(id<HUBViewModelBuilder> viewModelBuilder) {\n+        contentOperationCalled = YES;\n+        return YES;\n+    };\n+    \n+    UIViewController<HUBViewController> * const viewController = [self.manager.viewControllerFactory createViewControllerForViewURI:viewURI\n+                                                                                                                  contentOperations:@[contentOperation]\n+                                                                                                                  featureIdentifier:@\"identifier\"\n+                                                                                                                       featureTitle:@\"Title\"];\n+    \n+    [viewController viewWillAppear:NO];\n+    \n+    XCTAssertTrue(contentOperationCalled);\n+    XCTAssertEqualObjects(viewController.featureIdentifier, @\"identifier\");\n+    XCTAssertEqualObjects(viewController.navigationItem.title, @\"Title\");",
        "path": "tests/HUBViewControllerFactoryTests.m",
        "position": 25,
        "original_position": 25,
        "commit_id": "9d94cb9e56685d74e5a52a4932a50f424d0b97ce",
        "original_commit_id": "9d94cb9e56685d74e5a52a4932a50f424d0b97ce",
        "user": {
            "login": "nataliq",
            "id": 1555713,
            "node_id": "MDQ6VXNlcjE1NTU3MTM=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1555713?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nataliq",
            "html_url": "https://github.com/nataliq",
            "followers_url": "https://api.github.com/users/nataliq/followers",
            "following_url": "https://api.github.com/users/nataliq/following{/other_user}",
            "gists_url": "https://api.github.com/users/nataliq/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nataliq/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nataliq/subscriptions",
            "organizations_url": "https://api.github.com/users/nataliq/orgs",
            "repos_url": "https://api.github.com/users/nataliq/repos",
            "events_url": "https://api.github.com/users/nataliq/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nataliq/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "How about checking the feature registry for a registration for the provided URI?\n",
        "created_at": "2016-10-07T15:21:52Z",
        "updated_at": "2016-10-07T15:22:03Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/62#discussion_r82410944",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/62",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/82410944"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/62#discussion_r82410944"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/62"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/82411290",
        "pull_request_review_id": 3322909,
        "id": 82411290,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgyNDExMjkw",
        "diff_hunk": "@@ -103,6 +103,30 @@ - (void)testCreatingViewControllerForInvalidViewURIReturnsNil\n     XCTAssertNil([self.manager.viewControllerFactory createViewControllerForViewURI:viewURI]);\n }\n \n+- (void)testCreatingViewControllerWithoutFeatureRegistration\n+{\n+    NSURL * const viewURI = [NSURL URLWithString:@\"spotify:hub:framework\"];\n+    HUBContentOperationMock * const contentOperation = [HUBContentOperationMock new];\n+    \n+    __block BOOL contentOperationCalled = NO;\n+    \n+    contentOperation.contentLoadingBlock = ^(id<HUBViewModelBuilder> viewModelBuilder) {\n+        contentOperationCalled = YES;\n+        return YES;\n+    };\n+    \n+    UIViewController<HUBViewController> * const viewController = [self.manager.viewControllerFactory createViewControllerForViewURI:viewURI\n+                                                                                                                  contentOperations:@[contentOperation]\n+                                                                                                                  featureIdentifier:@\"identifier\"\n+                                                                                                                       featureTitle:@\"Title\"];\n+    \n+    [viewController viewWillAppear:NO];\n+    \n+    XCTAssertTrue(contentOperationCalled);\n+    XCTAssertEqualObjects(viewController.featureIdentifier, @\"identifier\");\n+    XCTAssertEqualObjects(viewController.navigationItem.title, @\"Title\");",
        "path": "tests/HUBViewControllerFactoryTests.m",
        "position": 25,
        "original_position": 25,
        "commit_id": "9d94cb9e56685d74e5a52a4932a50f424d0b97ce",
        "original_commit_id": "9d94cb9e56685d74e5a52a4932a50f424d0b97ce",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You mean to make sure that we indeed don't register it?\n",
        "created_at": "2016-10-07T15:23:30Z",
        "updated_at": "2016-10-07T15:23:30Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/62#discussion_r82411290",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/62",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/82411290"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/62#discussion_r82411290"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/62"
            }
        },
        "in_reply_to_id": 82410944
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/82415860",
        "pull_request_review_id": 3327351,
        "id": 82415860,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgyNDE1ODYw",
        "diff_hunk": "@@ -103,6 +103,30 @@ - (void)testCreatingViewControllerForInvalidViewURIReturnsNil\n     XCTAssertNil([self.manager.viewControllerFactory createViewControllerForViewURI:viewURI]);\n }\n \n+- (void)testCreatingViewControllerWithoutFeatureRegistration\n+{\n+    NSURL * const viewURI = [NSURL URLWithString:@\"spotify:hub:framework\"];\n+    HUBContentOperationMock * const contentOperation = [HUBContentOperationMock new];\n+    \n+    __block BOOL contentOperationCalled = NO;\n+    \n+    contentOperation.contentLoadingBlock = ^(id<HUBViewModelBuilder> viewModelBuilder) {\n+        contentOperationCalled = YES;\n+        return YES;\n+    };\n+    \n+    UIViewController<HUBViewController> * const viewController = [self.manager.viewControllerFactory createViewControllerForViewURI:viewURI\n+                                                                                                                  contentOperations:@[contentOperation]\n+                                                                                                                  featureIdentifier:@\"identifier\"\n+                                                                                                                       featureTitle:@\"Title\"];\n+    \n+    [viewController viewWillAppear:NO];\n+    \n+    XCTAssertTrue(contentOperationCalled);\n+    XCTAssertEqualObjects(viewController.featureIdentifier, @\"identifier\");\n+    XCTAssertEqualObjects(viewController.navigationItem.title, @\"Title\");",
        "path": "tests/HUBViewControllerFactoryTests.m",
        "position": 25,
        "original_position": 25,
        "commit_id": "9d94cb9e56685d74e5a52a4932a50f424d0b97ce",
        "original_commit_id": "9d94cb9e56685d74e5a52a4932a50f424d0b97ce",
        "user": {
            "login": "nataliq",
            "id": 1555713,
            "node_id": "MDQ6VXNlcjE1NTU3MTM=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1555713?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nataliq",
            "html_url": "https://github.com/nataliq",
            "followers_url": "https://api.github.com/users/nataliq/followers",
            "following_url": "https://api.github.com/users/nataliq/following{/other_user}",
            "gists_url": "https://api.github.com/users/nataliq/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nataliq/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nataliq/subscriptions",
            "organizations_url": "https://api.github.com/users/nataliq/orgs",
            "repos_url": "https://api.github.com/users/nataliq/repos",
            "events_url": "https://api.github.com/users/nataliq/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nataliq/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Never mind, I was under the impression that there is a feature registration behind the scenes and my suggestion was checking that it is not nil. My bad :) \n",
        "created_at": "2016-10-07T15:47:30Z",
        "updated_at": "2016-10-07T15:47:31Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/62#discussion_r82415860",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/62",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/82415860"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/62#discussion_r82415860"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/62"
            }
        },
        "in_reply_to_id": 82410944
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/82986864",
        "pull_request_review_id": 3855308,
        "id": 82986864,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgyOTg2ODY0",
        "diff_hunk": "@@ -94,8 +94,9 @@ @implementation HUBComponentModelBuilderImplementation\n         \n         [sortedBuilders addObject:builder];\n     }\n-    \n-    for (NSNumber * const preferredIndex in buildersByPreferredIndex) {\n+\n+    NSArray *sortedPreferredIndexes = [[buildersByPreferredIndex allKeys] sortedArrayUsingSelector: @selector(compare:)];",
        "path": "sources/HUBComponentModelBuilderImplementation.m",
        "position": null,
        "original_position": 7,
        "commit_id": "50f813c586be1aff5c84398618c5ee4eb11f8a7a",
        "original_commit_id": "026fae894a277b0449dd64c0ff203bce7feeedaf",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\ud83c\udfa8 Don't include a space between `:` and `@selector`.\n",
        "created_at": "2016-10-12T11:34:43Z",
        "updated_at": "2016-10-12T14:21:14Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/71#discussion_r82986864",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/71",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/82986864"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/71#discussion_r82986864"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/71"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/82991954",
        "pull_request_review_id": 3860368,
        "id": 82991954,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgyOTkxOTU0",
        "diff_hunk": "@@ -94,8 +94,9 @@ @implementation HUBComponentModelBuilderImplementation\n         \n         [sortedBuilders addObject:builder];\n     }\n-    \n-    for (NSNumber * const preferredIndex in buildersByPreferredIndex) {\n+\n+    NSArray *sortedPreferredIndexes = [[buildersByPreferredIndex allKeys] sortedArrayUsingSelector: @selector(compare:)];",
        "path": "sources/HUBComponentModelBuilderImplementation.m",
        "position": null,
        "original_position": 7,
        "commit_id": "50f813c586be1aff5c84398618c5ee4eb11f8a7a",
        "original_commit_id": "026fae894a277b0449dd64c0ff203bce7feeedaf",
        "user": {
            "login": "mvlasieva",
            "id": 13484496,
            "node_id": "MDQ6VXNlcjEzNDg0NDk2",
            "avatar_url": "https://avatars1.githubusercontent.com/u/13484496?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mvlasieva",
            "html_url": "https://github.com/mvlasieva",
            "followers_url": "https://api.github.com/users/mvlasieva/followers",
            "following_url": "https://api.github.com/users/mvlasieva/following{/other_user}",
            "gists_url": "https://api.github.com/users/mvlasieva/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mvlasieva/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mvlasieva/subscriptions",
            "organizations_url": "https://api.github.com/users/mvlasieva/orgs",
            "repos_url": "https://api.github.com/users/mvlasieva/repos",
            "events_url": "https://api.github.com/users/mvlasieva/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mvlasieva/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Sure, fixed\n",
        "created_at": "2016-10-12T12:14:59Z",
        "updated_at": "2016-10-12T14:21:14Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/71#discussion_r82991954",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/71",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/82991954"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/71#discussion_r82991954"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/71"
            }
        },
        "in_reply_to_id": 82986864
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/82992080",
        "pull_request_review_id": 3860507,
        "id": 82992080,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgyOTkyMDgw",
        "diff_hunk": "@@ -94,8 +94,9 @@ @implementation HUBComponentModelBuilderImplementation\n         \n         [sortedBuilders addObject:builder];\n     }\n-    \n-    for (NSNumber * const preferredIndex in buildersByPreferredIndex) {\n+\n+    NSArray *sortedPreferredIndexes = [[buildersByPreferredIndex allKeys] sortedArrayUsingSelector: @selector(compare:)];",
        "path": "sources/HUBComponentModelBuilderImplementation.m",
        "position": null,
        "original_position": 7,
        "commit_id": "50f813c586be1aff5c84398618c5ee4eb11f8a7a",
        "original_commit_id": "026fae894a277b0449dd64c0ff203bce7feeedaf",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@mvlasieva awesome, thanks! \ud83d\udc4d \n",
        "created_at": "2016-10-12T12:15:46Z",
        "updated_at": "2016-10-12T14:21:14Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/71#discussion_r82992080",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/71",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/82992080"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/71#discussion_r82992080"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/71"
            }
        },
        "in_reply_to_id": 82986864
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/83559909",
        "pull_request_review_id": 4396464,
        "id": 83559909,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzNTU5OTA5",
        "diff_hunk": "@@ -73,7 +73,7 @@ @interface HUBViewControllerImplementation () <HUBViewModelLoaderDelegate, HUBIm\n @property (nonatomic, strong, readonly) HUBComponentUIStateManager *componentUIStateManager;\n @property (nonatomic, strong, readonly) HUBComponentReusePool *childComponentReusePool;\n @property (nonatomic, strong, nullable) id<HUBViewModel> viewModel;\n-@property (nonatomic, strong, nullable) HUBViewModelDiff *lastViewModelDiff;\n+@property (nonatomic, strong, nullable) NSArray<HUBViewModelDiff *> *pendingDiffs;",
        "path": "sources/HUBViewControllerImplementation.m",
        "position": 5,
        "original_position": 5,
        "commit_id": "2df5f3d5ed1855732eb31709dfff5658622563b1",
        "original_commit_id": "2df5f3d5ed1855732eb31709dfff5658622563b1",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Seems like this never becomes `nil`, so why make it `nullable`?\n",
        "created_at": "2016-10-16T20:47:56Z",
        "updated_at": "2016-10-16T20:49:26Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/76#discussion_r83559909",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/76",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/83559909"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/76#discussion_r83559909"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/76"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/83559930",
        "pull_request_review_id": 4396464,
        "id": 83559930,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzNTU5OTMw",
        "diff_hunk": "@@ -73,7 +73,7 @@ @interface HUBViewControllerImplementation () <HUBViewModelLoaderDelegate, HUBIm\n @property (nonatomic, strong, readonly) HUBComponentUIStateManager *componentUIStateManager;\n @property (nonatomic, strong, readonly) HUBComponentReusePool *childComponentReusePool;\n @property (nonatomic, strong, nullable) id<HUBViewModel> viewModel;\n-@property (nonatomic, strong, nullable) HUBViewModelDiff *lastViewModelDiff;\n+@property (nonatomic, strong, nullable) NSArray<HUBViewModelDiff *> *pendingDiffs;",
        "path": "sources/HUBViewControllerImplementation.m",
        "position": 5,
        "original_position": 5,
        "commit_id": "2df5f3d5ed1855732eb31709dfff5658622563b1",
        "original_commit_id": "2df5f3d5ed1855732eb31709dfff5658622563b1",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Also, looking at the rest of the code, doesn't it make more sense for it to be a `NSMutableArray`?\n",
        "created_at": "2016-10-16T20:48:30Z",
        "updated_at": "2016-10-16T20:49:26Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/76#discussion_r83559930",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/76",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/83559930"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/76#discussion_r83559930"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/76"
            }
        },
        "in_reply_to_id": 83559909
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84078605",
        "pull_request_review_id": 4878092,
        "id": 84078605,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0MDc4NjA1",
        "diff_hunk": "@@ -229,6 +229,11 @@ NS_ASSUME_NONNULL_BEGIN\n @property (nonatomic, strong, nullable, readonly) NSArray<id<HUBComponentModel>> *children;\n \n /**\n+ *  The index path of this component in the `HUBComponentModel` hierarchy.\n+ */\n+@property (nonatomic, strong, readonly) NSIndexPath *indexPath;",
        "path": "include/HubFramework/HUBComponentModel.h",
        "position": null,
        "original_position": 6,
        "commit_id": "8980bcc975ada9fd1a2e08a91410d589f6a5b0ff",
        "original_commit_id": "c1ab5aa0919e79089d7e6dbe07a5cf4f54b7a8a6",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "We should add a note that this property is computed, so that it's not accessed multiple times within the same block of code. Alternatively, we could cache the value. It's up to you :)\n",
        "created_at": "2016-10-19T14:10:36Z",
        "updated_at": "2016-10-20T09:53:46Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/84#discussion_r84078605",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/84",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84078605"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/84#discussion_r84078605"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/84"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84078722",
        "pull_request_review_id": 4878092,
        "id": 84078722,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0MDc4NzIy",
        "diff_hunk": "@@ -190,6 +190,31 @@ - (NSString *)debugDescription\n \n #pragma mark - HUBComponentModel\n \n+- (NSIndexPath *)indexPath\n+{\n+    // Since we're traversing from this model through the parents, we will record the indices in reverse order.\n+    // Capture them in a mutable array for easy reversal.\n+    NSMutableArray<NSNumber *> *reversedIndexPath = [NSMutableArray array];\n+    [reversedIndexPath addObject:@(self.index)];\n+\n+    id<HUBComponentModel> parent = self.parent;\n+    while (parent) {",
        "path": "sources/HUBComponentModelImplementation.m",
        "position": null,
        "original_position": 12,
        "commit_id": "8980bcc975ada9fd1a2e08a91410d589f6a5b0ff",
        "original_commit_id": "c1ab5aa0919e79089d7e6dbe07a5cf4f54b7a8a6",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\ud83c\udfa8 Add an explicit comparison to `nil` (optional)\n",
        "created_at": "2016-10-19T14:11:09Z",
        "updated_at": "2016-10-20T09:53:46Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/84#discussion_r84078722",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/84",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84078722"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/84#discussion_r84078722"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/84"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84079110",
        "pull_request_review_id": 4878092,
        "id": 84079110,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0MDc5MTEw",
        "diff_hunk": "@@ -190,6 +190,31 @@ - (NSString *)debugDescription\n \n #pragma mark - HUBComponentModel\n \n+- (NSIndexPath *)indexPath\n+{\n+    // Since we're traversing from this model through the parents, we will record the indices in reverse order.\n+    // Capture them in a mutable array for easy reversal.\n+    NSMutableArray<NSNumber *> *reversedIndexPath = [NSMutableArray array];",
        "path": "sources/HUBComponentModelImplementation.m",
        "position": null,
        "original_position": 8,
        "commit_id": "8980bcc975ada9fd1a2e08a91410d589f6a5b0ff",
        "original_commit_id": "c1ab5aa0919e79089d7e6dbe07a5cf4f54b7a8a6",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Since this is not an index path, shouldn't we name it something like `reversedIndexes`? (just a thought)\n",
        "created_at": "2016-10-19T14:12:51Z",
        "updated_at": "2016-10-20T09:53:46Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/84#discussion_r84079110",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/84",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84079110"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/84#discussion_r84079110"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/84"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84079410",
        "pull_request_review_id": 4878092,
        "id": 84079410,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0MDc5NDEw",
        "diff_hunk": "@@ -158,6 +158,13 @@ NS_ASSUME_NONNULL_BEGIN\n  */\n - (void)saveComponentUIState;\n \n+/**\n+ *  Returns an array of all child component wrappers that are currently being displayed.\n+ *\n+ *  @discussion Only direct descendents will be returned. Visible children of children won't be returned.\n+ */\n+- (NSArray<HUBComponentWrapper *> *)visibleChildren;",
        "path": "sources/HUBComponentWrapper.h",
        "position": null,
        "original_position": 9,
        "commit_id": "8980bcc975ada9fd1a2e08a91410d589f6a5b0ff",
        "original_commit_id": "c1ab5aa0919e79089d7e6dbe07a5cf4f54b7a8a6",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Should this me made into a `readonly @property` instead? Since it's not an action, but rather data you can access.\n",
        "created_at": "2016-10-19T14:13:59Z",
        "updated_at": "2016-10-20T09:53:46Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/84#discussion_r84079410",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/84",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84079410"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/84#discussion_r84079410"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/84"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84079476",
        "pull_request_review_id": 4878092,
        "id": 84079476,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0MDc5NDc2",
        "diff_hunk": "@@ -109,6 +109,18 @@ - (void)saveComponentUIState\n     }\n }\n \n+- (NSArray<HUBComponentWrapper *> *)visibleChildren\n+{\n+    NSMutableArray<HUBComponentWrapper *> *visibleChildren = [NSMutableArray array];\n+    for (NSNumber *visibleViewID in self.visibleChildViewsByIndex) {",
        "path": "sources/HUBComponentWrapper.m",
        "position": null,
        "original_position": 7,
        "commit_id": "8980bcc975ada9fd1a2e08a91410d589f6a5b0ff",
        "original_commit_id": "c1ab5aa0919e79089d7e6dbe07a5cf4f54b7a8a6",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It's not an ID, it's an index :)\n",
        "created_at": "2016-10-19T14:14:17Z",
        "updated_at": "2016-10-20T09:53:46Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/84#discussion_r84079476",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/84",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84079476"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/84#discussion_r84079476"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/84"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84079555",
        "pull_request_review_id": 4878092,
        "id": 84079555,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0MDc5NTU1",
        "diff_hunk": "@@ -109,6 +109,18 @@ - (void)saveComponentUIState\n     }\n }\n \n+- (NSArray<HUBComponentWrapper *> *)visibleChildren\n+{\n+    NSMutableArray<HUBComponentWrapper *> *visibleChildren = [NSMutableArray array];\n+    for (NSNumber *visibleViewID in self.visibleChildViewsByIndex) {\n+        HUBComponentWrapper *childComponentWrapper = self.childrenByIndex[visibleViewID];\n+        if (childComponentWrapper) {",
        "path": "sources/HUBComponentWrapper.m",
        "position": null,
        "original_position": 9,
        "commit_id": "8980bcc975ada9fd1a2e08a91410d589f6a5b0ff",
        "original_commit_id": "c1ab5aa0919e79089d7e6dbe07a5cf4f54b7a8a6",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\ud83c\udfa8 Compare explicitly to `nil`? (optional)\n",
        "created_at": "2016-10-19T14:14:37Z",
        "updated_at": "2016-10-20T09:53:46Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/84#discussion_r84079555",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/84",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84079555"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/84#discussion_r84079555"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/84"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84079782",
        "pull_request_review_id": 4878092,
        "id": 84079782,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0MDc5Nzgy",
        "diff_hunk": "@@ -241,16 +241,30 @@ - (void)didReceiveMemoryWarning\n \n #pragma mark - HUBViewController\n \n-- (NSDictionary<NSNumber *, UIView *> *)visibleBodyComponentViews\n+- (NSDictionary<NSIndexPath *, UIView *> *)visibleBodyComponentViewIndexPaths\n {\n-    NSMutableDictionary<NSNumber *, UIView *> * const visibleViews = [NSMutableDictionary new];\n-    \n+    NSMutableDictionary<NSIndexPath *, UIView *> * const visibleViewIndexPaths = [NSMutableDictionary new];\n+    NSMutableArray<HUBComponentWrapper *> *visibleComponents = [NSMutableArray array];\n+\n     for (HUBComponentCollectionViewCell * const cell in self.collectionView.visibleCells) {\n         HUBComponentWrapper * const wrapper = [self componentWrapperFromCell:cell];\n-        visibleViews[@(wrapper.model.index)] = HUBComponentLoadViewIfNeeded(wrapper);\n+        [self addComponentWrapper:wrapper toArray:visibleComponents];",
        "path": "sources/HUBViewControllerImplementation.m",
        "position": 15,
        "original_position": 15,
        "commit_id": "8980bcc975ada9fd1a2e08a91410d589f6a5b0ff",
        "original_commit_id": "c1ab5aa0919e79089d7e6dbe07a5cf4f54b7a8a6",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Since this is acessed only from a single place, why does it need to be a method? (it could be made into a function in `HUBUtilities` if you think it warrants it).\n",
        "created_at": "2016-10-19T14:15:40Z",
        "updated_at": "2016-10-20T09:53:46Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/84#discussion_r84079782",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/84",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84079782"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/84#discussion_r84079782"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/84"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84079891",
        "pull_request_review_id": 4878092,
        "id": 84079891,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0MDc5ODkx",
        "diff_hunk": "@@ -159,10 +159,37 @@ - (void)testChildWithIdentifier\n     XCTAssertNil([parent childWithIdentifier:@\"noChild\"]);\n }\n \n+- (void)testIndexPaths\n+{\n+    HUBComponentModelImplementation * const parent = [self createComponentModelWithIdentifier:@\"parent\" index:0];\n+    HUBComponentModelImplementation * const childA = [self createComponentModelWithIdentifier:@\"childA\" index:0 parent:parent];\n+    HUBComponentModelImplementation * const childB = [self createComponentModelWithIdentifier:@\"childB\" index:1 parent:parent];\n+    HUBComponentModelImplementation * const grandchild = [self createComponentModelWithIdentifier:@\"grandchild\" index:0 parent:childB];",
        "path": "tests/HUBComponentModelTests.m",
        "position": 9,
        "original_position": 9,
        "commit_id": "8980bcc975ada9fd1a2e08a91410d589f6a5b0ff",
        "original_commit_id": "c1ab5aa0919e79089d7e6dbe07a5cf4f54b7a8a6",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Grandchild! Nice \ud83d\ude06 \n",
        "created_at": "2016-10-19T14:16:08Z",
        "updated_at": "2016-10-20T09:53:46Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/84#discussion_r84079891",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/84",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84079891"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/84#discussion_r84079891"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/84"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84080711",
        "pull_request_review_id": 4880126,
        "id": 84080711,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0MDgwNzEx",
        "diff_hunk": "@@ -229,6 +229,11 @@ NS_ASSUME_NONNULL_BEGIN\n @property (nonatomic, strong, nullable, readonly) NSArray<id<HUBComponentModel>> *children;\n \n /**\n+ *  The index path of this component in the `HUBComponentModel` hierarchy.\n+ */\n+@property (nonatomic, strong, readonly) NSIndexPath *indexPath;",
        "path": "include/HubFramework/HUBComponentModel.h",
        "position": null,
        "original_position": 6,
        "commit_id": "8980bcc975ada9fd1a2e08a91410d589f6a5b0ff",
        "original_commit_id": "c1ab5aa0919e79089d7e6dbe07a5cf4f54b7a8a6",
        "user": {
            "login": "cerihughes",
            "id": 12008876,
            "node_id": "MDQ6VXNlcjEyMDA4ODc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12008876?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cerihughes",
            "html_url": "https://github.com/cerihughes",
            "followers_url": "https://api.github.com/users/cerihughes/followers",
            "following_url": "https://api.github.com/users/cerihughes/following{/other_user}",
            "gists_url": "https://api.github.com/users/cerihughes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cerihughes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cerihughes/subscriptions",
            "organizations_url": "https://api.github.com/users/cerihughes/orgs",
            "repos_url": "https://api.github.com/users/cerihughes/repos",
            "events_url": "https://api.github.com/users/cerihughes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cerihughes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'll add a comment...\n",
        "created_at": "2016-10-19T14:19:38Z",
        "updated_at": "2016-10-20T09:53:46Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/84#discussion_r84080711",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/84",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84080711"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/84#discussion_r84080711"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/84"
            }
        },
        "in_reply_to_id": 84078605
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84080757",
        "pull_request_review_id": 4880161,
        "id": 84080757,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0MDgwNzU3",
        "diff_hunk": "@@ -190,6 +190,31 @@ - (NSString *)debugDescription\n \n #pragma mark - HUBComponentModel\n \n+- (NSIndexPath *)indexPath\n+{\n+    // Since we're traversing from this model through the parents, we will record the indices in reverse order.\n+    // Capture them in a mutable array for easy reversal.\n+    NSMutableArray<NSNumber *> *reversedIndexPath = [NSMutableArray array];",
        "path": "sources/HUBComponentModelImplementation.m",
        "position": null,
        "original_position": 8,
        "commit_id": "8980bcc975ada9fd1a2e08a91410d589f6a5b0ff",
        "original_commit_id": "c1ab5aa0919e79089d7e6dbe07a5cf4f54b7a8a6",
        "user": {
            "login": "cerihughes",
            "id": 12008876,
            "node_id": "MDQ6VXNlcjEyMDA4ODc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12008876?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cerihughes",
            "html_url": "https://github.com/cerihughes",
            "followers_url": "https://api.github.com/users/cerihughes/followers",
            "following_url": "https://api.github.com/users/cerihughes/following{/other_user}",
            "gists_url": "https://api.github.com/users/cerihughes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cerihughes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cerihughes/subscriptions",
            "organizations_url": "https://api.github.com/users/cerihughes/orgs",
            "repos_url": "https://api.github.com/users/cerihughes/repos",
            "events_url": "https://api.github.com/users/cerihughes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cerihughes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yeah, that's fair.\n",
        "created_at": "2016-10-19T14:19:51Z",
        "updated_at": "2016-10-20T09:53:46Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/84#discussion_r84080757",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/84",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84080757"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/84#discussion_r84080757"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/84"
            }
        },
        "in_reply_to_id": 84079110
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84080788",
        "pull_request_review_id": 4880188,
        "id": 84080788,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0MDgwNzg4",
        "diff_hunk": "@@ -190,6 +190,31 @@ - (NSString *)debugDescription\n \n #pragma mark - HUBComponentModel\n \n+- (NSIndexPath *)indexPath\n+{\n+    // Since we're traversing from this model through the parents, we will record the indices in reverse order.\n+    // Capture them in a mutable array for easy reversal.\n+    NSMutableArray<NSNumber *> *reversedIndexPath = [NSMutableArray array];\n+    [reversedIndexPath addObject:@(self.index)];\n+\n+    id<HUBComponentModel> parent = self.parent;\n+    while (parent) {",
        "path": "sources/HUBComponentModelImplementation.m",
        "position": null,
        "original_position": 12,
        "commit_id": "8980bcc975ada9fd1a2e08a91410d589f6a5b0ff",
        "original_commit_id": "c1ab5aa0919e79089d7e6dbe07a5cf4f54b7a8a6",
        "user": {
            "login": "cerihughes",
            "id": 12008876,
            "node_id": "MDQ6VXNlcjEyMDA4ODc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12008876?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cerihughes",
            "html_url": "https://github.com/cerihughes",
            "followers_url": "https://api.github.com/users/cerihughes/followers",
            "following_url": "https://api.github.com/users/cerihughes/following{/other_user}",
            "gists_url": "https://api.github.com/users/cerihughes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cerihughes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cerihughes/subscriptions",
            "organizations_url": "https://api.github.com/users/cerihughes/orgs",
            "repos_url": "https://api.github.com/users/cerihughes/repos",
            "events_url": "https://api.github.com/users/cerihughes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cerihughes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Will do.\n",
        "created_at": "2016-10-19T14:19:57Z",
        "updated_at": "2016-10-20T09:53:46Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/84#discussion_r84080788",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/84",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84080788"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/84#discussion_r84080788"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/84"
            }
        },
        "in_reply_to_id": 84078722
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84080909",
        "pull_request_review_id": 4880307,
        "id": 84080909,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0MDgwOTA5",
        "diff_hunk": "@@ -158,6 +158,13 @@ NS_ASSUME_NONNULL_BEGIN\n  */\n - (void)saveComponentUIState;\n \n+/**\n+ *  Returns an array of all child component wrappers that are currently being displayed.\n+ *\n+ *  @discussion Only direct descendents will be returned. Visible children of children won't be returned.\n+ */\n+- (NSArray<HUBComponentWrapper *> *)visibleChildren;",
        "path": "sources/HUBComponentWrapper.h",
        "position": null,
        "original_position": 9,
        "commit_id": "8980bcc975ada9fd1a2e08a91410d589f6a5b0ff",
        "original_commit_id": "c1ab5aa0919e79089d7e6dbe07a5cf4f54b7a8a6",
        "user": {
            "login": "cerihughes",
            "id": 12008876,
            "node_id": "MDQ6VXNlcjEyMDA4ODc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12008876?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cerihughes",
            "html_url": "https://github.com/cerihughes",
            "followers_url": "https://api.github.com/users/cerihughes/followers",
            "following_url": "https://api.github.com/users/cerihughes/following{/other_user}",
            "gists_url": "https://api.github.com/users/cerihughes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cerihughes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cerihughes/subscriptions",
            "organizations_url": "https://api.github.com/users/cerihughes/orgs",
            "repos_url": "https://api.github.com/users/cerihughes/repos",
            "events_url": "https://api.github.com/users/cerihughes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cerihughes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Will do.\n",
        "created_at": "2016-10-19T14:20:30Z",
        "updated_at": "2016-10-20T09:53:46Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/84#discussion_r84080909",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/84",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84080909"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/84#discussion_r84080909"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/84"
            }
        },
        "in_reply_to_id": 84079410
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84080987",
        "pull_request_review_id": 4880377,
        "id": 84080987,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0MDgwOTg3",
        "diff_hunk": "@@ -109,6 +109,18 @@ - (void)saveComponentUIState\n     }\n }\n \n+- (NSArray<HUBComponentWrapper *> *)visibleChildren\n+{\n+    NSMutableArray<HUBComponentWrapper *> *visibleChildren = [NSMutableArray array];\n+    for (NSNumber *visibleViewID in self.visibleChildViewsByIndex) {",
        "path": "sources/HUBComponentWrapper.m",
        "position": null,
        "original_position": 7,
        "commit_id": "8980bcc975ada9fd1a2e08a91410d589f6a5b0ff",
        "original_commit_id": "c1ab5aa0919e79089d7e6dbe07a5cf4f54b7a8a6",
        "user": {
            "login": "cerihughes",
            "id": 12008876,
            "node_id": "MDQ6VXNlcjEyMDA4ODc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12008876?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cerihughes",
            "html_url": "https://github.com/cerihughes",
            "followers_url": "https://api.github.com/users/cerihughes/followers",
            "following_url": "https://api.github.com/users/cerihughes/following{/other_user}",
            "gists_url": "https://api.github.com/users/cerihughes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cerihughes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cerihughes/subscriptions",
            "organizations_url": "https://api.github.com/users/cerihughes/orgs",
            "repos_url": "https://api.github.com/users/cerihughes/repos",
            "events_url": "https://api.github.com/users/cerihughes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cerihughes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ooops. It _used_ to be an ID before I refactored...\n",
        "created_at": "2016-10-19T14:20:48Z",
        "updated_at": "2016-10-20T09:53:46Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/84#discussion_r84080987",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/84",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84080987"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/84#discussion_r84080987"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/84"
            }
        },
        "in_reply_to_id": 84079476
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84081312",
        "pull_request_review_id": 4880664,
        "id": 84081312,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0MDgxMzEy",
        "diff_hunk": "@@ -241,16 +241,30 @@ - (void)didReceiveMemoryWarning\n \n #pragma mark - HUBViewController\n \n-- (NSDictionary<NSNumber *, UIView *> *)visibleBodyComponentViews\n+- (NSDictionary<NSIndexPath *, UIView *> *)visibleBodyComponentViewIndexPaths\n {\n-    NSMutableDictionary<NSNumber *, UIView *> * const visibleViews = [NSMutableDictionary new];\n-    \n+    NSMutableDictionary<NSIndexPath *, UIView *> * const visibleViewIndexPaths = [NSMutableDictionary new];\n+    NSMutableArray<HUBComponentWrapper *> *visibleComponents = [NSMutableArray array];\n+\n     for (HUBComponentCollectionViewCell * const cell in self.collectionView.visibleCells) {\n         HUBComponentWrapper * const wrapper = [self componentWrapperFromCell:cell];\n-        visibleViews[@(wrapper.model.index)] = HUBComponentLoadViewIfNeeded(wrapper);\n+        [self addComponentWrapper:wrapper toArray:visibleComponents];",
        "path": "sources/HUBViewControllerImplementation.m",
        "position": 15,
        "original_position": 15,
        "commit_id": "8980bcc975ada9fd1a2e08a91410d589f6a5b0ff",
        "original_commit_id": "c1ab5aa0919e79089d7e6dbe07a5cf4f54b7a8a6",
        "user": {
            "login": "cerihughes",
            "id": 12008876,
            "node_id": "MDQ6VXNlcjEyMDA4ODc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12008876?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cerihughes",
            "html_url": "https://github.com/cerihughes",
            "followers_url": "https://api.github.com/users/cerihughes/followers",
            "following_url": "https://api.github.com/users/cerihughes/following{/other_user}",
            "gists_url": "https://api.github.com/users/cerihughes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cerihughes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cerihughes/subscriptions",
            "organizations_url": "https://api.github.com/users/cerihughes/orgs",
            "repos_url": "https://api.github.com/users/cerihughes/repos",
            "events_url": "https://api.github.com/users/cerihughes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cerihughes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "... just to make the recursion easier to follow.\n",
        "created_at": "2016-10-19T14:21:59Z",
        "updated_at": "2016-10-20T09:53:46Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/84#discussion_r84081312",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/84",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84081312"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/84#discussion_r84081312"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/84"
            }
        },
        "in_reply_to_id": 84079782
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84085329",
        "pull_request_review_id": 4884417,
        "id": 84085329,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0MDg1MzI5",
        "diff_hunk": "@@ -241,16 +241,30 @@ - (void)didReceiveMemoryWarning\n \n #pragma mark - HUBViewController\n \n-- (NSDictionary<NSNumber *, UIView *> *)visibleBodyComponentViews\n+- (NSDictionary<NSIndexPath *, UIView *> *)visibleBodyComponentViewIndexPaths\n {\n-    NSMutableDictionary<NSNumber *, UIView *> * const visibleViews = [NSMutableDictionary new];\n-    \n+    NSMutableDictionary<NSIndexPath *, UIView *> * const visibleViewIndexPaths = [NSMutableDictionary new];\n+    NSMutableArray<HUBComponentWrapper *> *visibleComponents = [NSMutableArray array];\n+\n     for (HUBComponentCollectionViewCell * const cell in self.collectionView.visibleCells) {\n         HUBComponentWrapper * const wrapper = [self componentWrapperFromCell:cell];\n-        visibleViews[@(wrapper.model.index)] = HUBComponentLoadViewIfNeeded(wrapper);\n+        [self addComponentWrapper:wrapper toArray:visibleComponents];\n+    }\n+\n+    for (HUBComponentWrapper *visibleComponent in visibleComponents) {\n+        NSIndexPath *indexPath = visibleComponent.model.indexPath;\n+        visibleViewIndexPaths[indexPath] = HUBComponentLoadViewIfNeeded(visibleComponent);\n+    }\n+\n+    return [visibleViewIndexPaths copy];\n+}\n+\n+- (void)addComponentWrapper:(HUBComponentWrapper *)componentWrapper toArray:(NSMutableArray<HUBComponentWrapper *> *)array\n+{\n+    [array addObject:componentWrapper];\n+    for (HUBComponentWrapper *childComponentWrapper in [componentWrapper visibleChildren]) {",
        "path": "sources/HUBViewControllerImplementation.m",
        "position": null,
        "original_position": 29,
        "commit_id": "8980bcc975ada9fd1a2e08a91410d589f6a5b0ff",
        "original_commit_id": "0ddb5cd6de490ffdc2764095f28d06154e80346c",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\ud83c\udfa8 Now that this is a property, it should be accessed with dot notation.\n",
        "created_at": "2016-10-19T14:37:44Z",
        "updated_at": "2016-10-20T09:53:46Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/84#discussion_r84085329",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/84",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84085329"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/84#discussion_r84085329"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/84"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/83865772",
        "pull_request_review_id": 4680295,
        "id": 83865772,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzODY1Nzcy",
        "diff_hunk": "@@ -158,6 +159,36 @@ Once your component has started to render a model for which a UI state was previ\n \n Thanks to this API, you can hide the fact that components are reused for your users, as from their perspective it will look like the component was there all along.\n \n+## Responding to user interactions\n+\n+If you want your component to adapts its appearance when the user interacts with it, such as when highlighting or selecting a `UITableViewCell`, you can make it conform to `HUBComponentWithSelectionState`.",
        "path": "documentation/Component programming guide.md",
        "position": null,
        "original_position": 14,
        "commit_id": "be40282d496324d3b05083634a327f56c8e612fc",
        "original_commit_id": "969ba61693e6d0a21d33358e46eaff9741f22fe6",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "to adapt*\n",
        "created_at": "2016-10-18T14:26:08Z",
        "updated_at": "2016-10-20T10:13:59Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/80#discussion_r83865772",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/80",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/83865772"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/80#discussion_r83865772"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/80"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/83866418",
        "pull_request_review_id": 4680295,
        "id": 83866418,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzODY2NDE4",
        "diff_hunk": "@@ -97,107 +69,12 @@ - (void)prepareForReuse\n     [self.component prepareViewForReuse];\n }\n \n-- (void)setSelected:(BOOL)selected\n-{\n-    [super setSelected:selected];\n-    \n-    UIView * const componentView = self.component.view;\n-    \n-    if ([componentView isKindOfClass:[UICollectionViewCell class]]) {\n-        ((UICollectionViewCell *)componentView).selected = selected;\n-    } else if ([componentView isKindOfClass:[UITableViewCell class]]) {\n-        ((UITableViewCell *)componentView).selected = selected;\n-    }\n-}\n-\n-- (void)setHighlighted:(BOOL)highlighted\n-{\n-    [super setHighlighted:highlighted];\n-    \n-    UIView * const componentView = self.component.view;\n-    \n-    if ([componentView isKindOfClass:[UICollectionViewCell class]]) {\n-        ((UICollectionViewCell *)componentView).highlighted = highlighted;\n-    } else if ([componentView isKindOfClass:[UITableViewCell class]]) {\n-        ((UITableViewCell *)componentView).highlighted = highlighted;\n-    }\n-}\n-\n - (void)layoutSubviews\n {\n     [super layoutSubviews];\n     \n     self.component.view.bounds = self.contentView.bounds;\n     self.component.view.center = self.contentView.center;\n-    \n-    self.cellWrapperView.bounds = self.contentView.bounds;\n-    self.cellWrapperView.center = self.contentView.center;\n-}\n-\n-- (void)touchesBegan:(NSSet<UITouch *> *)touches withEvent:(nullable UIEvent *)event\n-{\n-    [super touchesBegan:touches withEvent:event];\n-    [self forwardTouches:touches event:event phase:HUBTouchPhaseBegan];\n-}\n-\n-- (void)touchesMoved:(NSSet<UITouch *> *)touches withEvent:(nullable UIEvent *)event\n-{\n-    [super touchesMoved:touches withEvent:event];\n-    [self forwardTouches:touches event:event phase:HUBTouchPhaseMoved];\n-}\n-\n-- (void)touchesEnded:(NSSet<UITouch *> *)touches withEvent:(nullable UIEvent *)event\n-{\n-    [super touchesEnded:touches withEvent:event];\n-    [self forwardTouches:touches event:event phase:HUBTouchPhaseEnded];\n-}\n-\n-- (void)touchesCancelled:(NSSet<UITouch *> *)touches withEvent:(nullable UIEvent *)event\n-{\n-    [super touchesCancelled:touches withEvent:event];\n-    [self forwardTouches:touches event:event phase:HUBTouchPhaseCancelled];\n-}\n-\n-// For the reasoning behind this code, please see the documentation for `HUBComponentCellWrapperView`\n-- (void)forwardTouches:(NSSet<UITouch *> *)touches event:(nullable UIEvent *)event phase:(HUBTouchPhase)phase",
        "path": "sources/HUBComponentCollectionViewCell.m",
        "position": 121,
        "original_position": 121,
        "commit_id": "be40282d496324d3b05083634a327f56c8e612fc",
        "original_commit_id": "969ba61693e6d0a21d33358e46eaff9741f22fe6",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "While very hacky, I'm kind of sad to see this workaround go :smile:\n",
        "created_at": "2016-10-18T14:28:43Z",
        "updated_at": "2016-10-20T10:13:59Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/80#discussion_r83866418",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/80",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/83866418"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/80#discussion_r83866418"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/80"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/83868769",
        "pull_request_review_id": 4680295,
        "id": 83868769,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzODY4NzY5",
        "diff_hunk": "@@ -315,13 +346,53 @@ - (BOOL)component:(id<HUBComponentActionPerformer>)component performActionWithId\n     return [self.delegate componentWrapper:self performActionWithIdentifier:identifier customData:customData];\n }\n \n+#pragma mark - UIGestureRecognizerDelegate\n+\n+- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer *)otherGestureRecognizer\n+{\n+    return YES;\n+}\n+\n #pragma mark - HUBComponentResizeObservingViewDelegate\n \n - (void)resizeObservingViewDidResize:(HUBComponentResizeObservingView *)view\n {\n     [(id<HUBComponentViewObserver>)self.component viewDidResize];\n }\n \n+#pragma mark - Gesture recognizer handling\n+\n+- (void)handleGestureRecognizer:(UIGestureRecognizer *)gestureRecognizer\n+{\n+    switch (gestureRecognizer.state) {\n+        case UIGestureRecognizerStatePossible:\n+        case UIGestureRecognizerStateChanged:\n+            break;\n+        case UIGestureRecognizerStateBegan: {\n+            self.shouldHighlight = YES;\n+            \n+            dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.2 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{",
        "path": "sources/HUBComponentWrapper.m",
        "position": null,
        "original_position": 95,
        "commit_id": "be40282d496324d3b05083634a327f56c8e612fc",
        "original_commit_id": "969ba61693e6d0a21d33358e46eaff9741f22fe6",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Why is this timeout necessary? \ud83d\ude2e \n",
        "created_at": "2016-10-18T14:38:31Z",
        "updated_at": "2016-10-20T10:13:59Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/80#discussion_r83868769",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/80",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/83868769"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/80#discussion_r83868769"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/80"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/83874344",
        "pull_request_review_id": 4688321,
        "id": 83874344,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzODc0MzQ0",
        "diff_hunk": "@@ -315,13 +346,53 @@ - (BOOL)component:(id<HUBComponentActionPerformer>)component performActionWithId\n     return [self.delegate componentWrapper:self performActionWithIdentifier:identifier customData:customData];\n }\n \n+#pragma mark - UIGestureRecognizerDelegate\n+\n+- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer *)otherGestureRecognizer\n+{\n+    return YES;\n+}\n+\n #pragma mark - HUBComponentResizeObservingViewDelegate\n \n - (void)resizeObservingViewDidResize:(HUBComponentResizeObservingView *)view\n {\n     [(id<HUBComponentViewObserver>)self.component viewDidResize];\n }\n \n+#pragma mark - Gesture recognizer handling\n+\n+- (void)handleGestureRecognizer:(UIGestureRecognizer *)gestureRecognizer\n+{\n+    switch (gestureRecognizer.state) {\n+        case UIGestureRecognizerStatePossible:\n+        case UIGestureRecognizerStateChanged:\n+            break;\n+        case UIGestureRecognizerStateBegan: {\n+            self.shouldHighlight = YES;\n+            \n+            dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.2 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{",
        "path": "sources/HUBComponentWrapper.m",
        "position": null,
        "original_position": 95,
        "commit_id": "be40282d496324d3b05083634a327f56c8e612fc",
        "original_commit_id": "969ba61693e6d0a21d33358e46eaff9741f22fe6",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Oh yeah, should comment on that \ud83d\ude05 It's an attempt to mimic how `UITableView` works, to slightly delay the highlighting in case the user starts scrolling, to avoid \"flashing\" the highlight \ud83d\ude04 \n",
        "created_at": "2016-10-18T15:00:23Z",
        "updated_at": "2016-10-20T10:13:59Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/80#discussion_r83874344",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/80",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/83874344"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/80#discussion_r83874344"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/80"
            }
        },
        "in_reply_to_id": 83868769
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/83874373",
        "pull_request_review_id": 4688345,
        "id": 83874373,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzODc0Mzcz",
        "diff_hunk": "@@ -97,107 +69,12 @@ - (void)prepareForReuse\n     [self.component prepareViewForReuse];\n }\n \n-- (void)setSelected:(BOOL)selected\n-{\n-    [super setSelected:selected];\n-    \n-    UIView * const componentView = self.component.view;\n-    \n-    if ([componentView isKindOfClass:[UICollectionViewCell class]]) {\n-        ((UICollectionViewCell *)componentView).selected = selected;\n-    } else if ([componentView isKindOfClass:[UITableViewCell class]]) {\n-        ((UITableViewCell *)componentView).selected = selected;\n-    }\n-}\n-\n-- (void)setHighlighted:(BOOL)highlighted\n-{\n-    [super setHighlighted:highlighted];\n-    \n-    UIView * const componentView = self.component.view;\n-    \n-    if ([componentView isKindOfClass:[UICollectionViewCell class]]) {\n-        ((UICollectionViewCell *)componentView).highlighted = highlighted;\n-    } else if ([componentView isKindOfClass:[UITableViewCell class]]) {\n-        ((UITableViewCell *)componentView).highlighted = highlighted;\n-    }\n-}\n-\n - (void)layoutSubviews\n {\n     [super layoutSubviews];\n     \n     self.component.view.bounds = self.contentView.bounds;\n     self.component.view.center = self.contentView.center;\n-    \n-    self.cellWrapperView.bounds = self.contentView.bounds;\n-    self.cellWrapperView.center = self.contentView.center;\n-}\n-\n-- (void)touchesBegan:(NSSet<UITouch *> *)touches withEvent:(nullable UIEvent *)event\n-{\n-    [super touchesBegan:touches withEvent:event];\n-    [self forwardTouches:touches event:event phase:HUBTouchPhaseBegan];\n-}\n-\n-- (void)touchesMoved:(NSSet<UITouch *> *)touches withEvent:(nullable UIEvent *)event\n-{\n-    [super touchesMoved:touches withEvent:event];\n-    [self forwardTouches:touches event:event phase:HUBTouchPhaseMoved];\n-}\n-\n-- (void)touchesEnded:(NSSet<UITouch *> *)touches withEvent:(nullable UIEvent *)event\n-{\n-    [super touchesEnded:touches withEvent:event];\n-    [self forwardTouches:touches event:event phase:HUBTouchPhaseEnded];\n-}\n-\n-- (void)touchesCancelled:(NSSet<UITouch *> *)touches withEvent:(nullable UIEvent *)event\n-{\n-    [super touchesCancelled:touches withEvent:event];\n-    [self forwardTouches:touches event:event phase:HUBTouchPhaseCancelled];\n-}\n-\n-// For the reasoning behind this code, please see the documentation for `HUBComponentCellWrapperView`\n-- (void)forwardTouches:(NSSet<UITouch *> *)touches event:(nullable UIEvent *)event phase:(HUBTouchPhase)phase",
        "path": "sources/HUBComponentCollectionViewCell.m",
        "position": 121,
        "original_position": 121,
        "commit_id": "be40282d496324d3b05083634a327f56c8e612fc",
        "original_commit_id": "969ba61693e6d0a21d33358e46eaff9741f22fe6",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It was a really awesome hack \ud83d\ude80 \n",
        "created_at": "2016-10-18T15:00:28Z",
        "updated_at": "2016-10-20T10:13:59Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/80#discussion_r83874373",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/80",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/83874373"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/80#discussion_r83874373"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/80"
            }
        },
        "in_reply_to_id": 83866418
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/83876741",
        "pull_request_review_id": 4690554,
        "id": 83876741,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzODc2NzQx",
        "diff_hunk": "@@ -158,6 +159,36 @@ Once your component has started to render a model for which a UI state was previ\n \n Thanks to this API, you can hide the fact that components are reused for your users, as from their perspective it will look like the component was there all along.\n \n+## Responding to user interactions\n+\n+If you want your component to adapts its appearance when the user interacts with it, such as when highlighting or selecting a `UITableViewCell`, you can make it conform to `HUBComponentWithSelectionState`.",
        "path": "documentation/Component programming guide.md",
        "position": null,
        "original_position": 14,
        "commit_id": "be40282d496324d3b05083634a327f56c8e612fc",
        "original_commit_id": "969ba61693e6d0a21d33358e46eaff9741f22fe6",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Thanks \ud83d\udc4d \n",
        "created_at": "2016-10-18T15:09:24Z",
        "updated_at": "2016-10-20T10:13:59Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/80#discussion_r83876741",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/80",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/83876741"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/80#discussion_r83876741"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/80"
            }
        },
        "in_reply_to_id": 83865772
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84065758",
        "pull_request_review_id": 4865785,
        "id": 84065758,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0MDY1NzU4",
        "diff_hunk": "@@ -315,13 +346,53 @@ - (BOOL)component:(id<HUBComponentActionPerformer>)component performActionWithId\n     return [self.delegate componentWrapper:self performActionWithIdentifier:identifier customData:customData];\n }\n \n+#pragma mark - UIGestureRecognizerDelegate\n+\n+- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer *)otherGestureRecognizer\n+{\n+    return YES;\n+}\n+\n #pragma mark - HUBComponentResizeObservingViewDelegate\n \n - (void)resizeObservingViewDidResize:(HUBComponentResizeObservingView *)view\n {\n     [(id<HUBComponentViewObserver>)self.component viewDidResize];\n }\n \n+#pragma mark - Gesture recognizer handling\n+\n+- (void)handleGestureRecognizer:(UIGestureRecognizer *)gestureRecognizer\n+{\n+    switch (gestureRecognizer.state) {\n+        case UIGestureRecognizerStatePossible:\n+        case UIGestureRecognizerStateChanged:\n+            break;\n+        case UIGestureRecognizerStateBegan: {\n+            self.shouldHighlight = YES;\n+            \n+            dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.2 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{",
        "path": "sources/HUBComponentWrapper.m",
        "position": null,
        "original_position": 95,
        "commit_id": "be40282d496324d3b05083634a327f56c8e612fc",
        "original_commit_id": "969ba61693e6d0a21d33358e46eaff9741f22fe6",
        "user": {
            "login": "krris",
            "id": 1786612,
            "node_id": "MDQ6VXNlcjE3ODY2MTI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1786612?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krris",
            "html_url": "https://github.com/krris",
            "followers_url": "https://api.github.com/users/krris/followers",
            "following_url": "https://api.github.com/users/krris/following{/other_user}",
            "gists_url": "https://api.github.com/users/krris/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krris/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krris/subscriptions",
            "organizations_url": "https://api.github.com/users/krris/orgs",
            "repos_url": "https://api.github.com/users/krris/repos",
            "events_url": "https://api.github.com/users/krris/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krris/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "How did you choose `0.2s` value? Does it impact animations of a component? I guess it'll delay all animations a  little... (just thinking loudly).\n",
        "created_at": "2016-10-19T13:11:10Z",
        "updated_at": "2016-10-20T10:13:59Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/80#discussion_r84065758",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/80",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84065758"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/80#discussion_r84065758"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/80"
            }
        },
        "in_reply_to_id": 83868769
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84066111",
        "pull_request_review_id": 4865785,
        "id": 84066111,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0MDY2MTEx",
        "diff_hunk": "@@ -47,10 +47,11 @@\n #import \"HUBActionRegistry.h\"\n #import \"HUBActionHandler.h\"\n #import \"HUBViewModelDiff.h\"\n+#import \"HUBComponentGestureRecognizer.h\"\n \n NS_ASSUME_NONNULL_BEGIN\n \n-@interface HUBViewControllerImplementation () <HUBViewModelLoaderDelegate, HUBImageLoaderDelegate, HUBComponentWrapperDelegate, UICollectionViewDataSource, UICollectionViewDelegate>\n+@interface HUBViewControllerImplementation () <HUBViewModelLoaderDelegate, HUBImageLoaderDelegate, HUBComponentWrapperDelegate, UICollectionViewDataSource, UICollectionViewDelegate, UIGestureRecognizerDelegate>",
        "path": "sources/HUBViewControllerImplementation.m",
        "position": 9,
        "original_position": 9,
        "commit_id": "be40282d496324d3b05083634a327f56c8e612fc",
        "original_commit_id": "641bfa9c7809db1a5eb806c35a0304273d645255",
        "user": {
            "login": "krris",
            "id": 1786612,
            "node_id": "MDQ6VXNlcjE3ODY2MTI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1786612?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krris",
            "html_url": "https://github.com/krris",
            "followers_url": "https://api.github.com/users/krris/followers",
            "following_url": "https://api.github.com/users/krris/following{/other_user}",
            "gists_url": "https://api.github.com/users/krris/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krris/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krris/subscriptions",
            "organizations_url": "https://api.github.com/users/krris/orgs",
            "repos_url": "https://api.github.com/users/krris/repos",
            "events_url": "https://api.github.com/users/krris/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krris/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "We should find a way to make `HUBViewControllerImplementation` smaller \ud83d\ude04 \n",
        "created_at": "2016-10-19T13:13:13Z",
        "updated_at": "2016-10-20T10:13:59Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/80#discussion_r84066111",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/80",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84066111"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/80#discussion_r84066111"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/80"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84067345",
        "pull_request_review_id": 4865785,
        "id": 84067345,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0MDY3MzQ1",
        "diff_hunk": "@@ -158,6 +159,36 @@ Once your component has started to render a model for which a UI state was previ\n \n Thanks to this API, you can hide the fact that components are reused for your users, as from their perspective it will look like the component was there all along.\n \n+## Responding to user interactions",
        "path": "documentation/Component programming guide.md",
        "position": 12,
        "original_position": 12,
        "commit_id": "be40282d496324d3b05083634a327f56c8e612fc",
        "original_commit_id": "661ee0e145b0b4b2f9f705713550e0d52d918b0c",
        "user": {
            "login": "krris",
            "id": 1786612,
            "node_id": "MDQ6VXNlcjE3ODY2MTI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1786612?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krris",
            "html_url": "https://github.com/krris",
            "followers_url": "https://api.github.com/users/krris/followers",
            "following_url": "https://api.github.com/users/krris/following{/other_user}",
            "gists_url": "https://api.github.com/users/krris/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krris/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krris/subscriptions",
            "organizations_url": "https://api.github.com/users/krris/orgs",
            "repos_url": "https://api.github.com/users/krris/repos",
            "events_url": "https://api.github.com/users/krris/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krris/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Guys, you made a great job with a documentation \ud83c\udf89  I really like it!\n",
        "created_at": "2016-10-19T13:19:37Z",
        "updated_at": "2016-10-20T10:13:59Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/80#discussion_r84067345",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/80",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84067345"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/80#discussion_r84067345"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/80"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84068593",
        "pull_request_review_id": 4865785,
        "id": 84068593,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0MDY4NTkz",
        "diff_hunk": "@@ -289,6 +289,40 @@ - (void)updateViewForSelectionState:(HUBComponentSelectionState)selectionState\n     \n     if ([self.component conformsToProtocol:@protocol(HUBComponentWithSelectionState)]) {\n         [(id<HUBComponentWithSelectionState>)self.component updateViewForSelectionState:selectionState];\n+    } else if ([self.view isKindOfClass:[UITableViewCell class]]) {",
        "path": "sources/HUBComponentWrapper.m",
        "position": null,
        "original_position": 4,
        "commit_id": "be40282d496324d3b05083634a327f56c8e612fc",
        "original_commit_id": "05bd00fed751ddff3da27132d5180f197d90d89f",
        "user": {
            "login": "krris",
            "id": 1786612,
            "node_id": "MDQ6VXNlcjE3ODY2MTI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1786612?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krris",
            "html_url": "https://github.com/krris",
            "followers_url": "https://api.github.com/users/krris/followers",
            "following_url": "https://api.github.com/users/krris/following{/other_user}",
            "gists_url": "https://api.github.com/users/krris/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krris/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krris/subscriptions",
            "organizations_url": "https://api.github.com/users/krris/orgs",
            "repos_url": "https://api.github.com/users/krris/repos",
            "events_url": "https://api.github.com/users/krris/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krris/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\ud83d\udc4f  for avoiding code duplication.\n",
        "created_at": "2016-10-19T13:25:40Z",
        "updated_at": "2016-10-20T10:13:59Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/80#discussion_r84068593",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/80",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84068593"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/80#discussion_r84068593"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/80"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84068996",
        "pull_request_review_id": 4865785,
        "id": 84068996,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0MDY4OTk2",
        "diff_hunk": "@@ -161,29 +161,24 @@ Thanks to this API, you can hide the fact that components are reused for your us\n \n ## Responding to user interactions\n \n-If you want your component to adapt its appearance when the user interacts with it, such as when highlighting or selecting a `UITableViewCell`, you can make it conform to `HUBComponentWithSelectionState`.\n+If you want your component to adapt its appearance when the user interacts with it (mimicking the behavior as when highlighting or selecting a `UITableViewCell`), you can make it conform to `HUBComponentWithSelectionState`.\n \n The Hub Framework supports two selection states; `Highlighted` and `Selected`. Your component will automatically be called and asked to update its view for a new selection state when the user either touches it (highlight), or taps it (selection).\n \n-Here we are implementing a component using a `UITableViewCell`, and updating its `highlighted` and `selected` properties in response to a selection state change:\n+Here we are implementing a component and modifying its view's `alpha` in response to user interactions:\n \n ```objective-c\n - (void)updateViewForSelectionState:(HUBComponentSelectionState)selectionState\n {\n-    UITableViewCell *cell = self.view;\n-    \n     switch (selectionState) {\n         case HUBComponentSelectionStateNone:\n-            cell.highlighted = NO;\n-            cell.selected = NO;\n+            self.view.alpha = 1;",
        "path": "documentation/Component programming guide.md",
        "position": null,
        "original_position": 21,
        "commit_id": "be40282d496324d3b05083634a327f56c8e612fc",
        "original_commit_id": "0cf1a7a2a11005c1aab36d16bb15ce3b7ff81e8c",
        "user": {
            "login": "krris",
            "id": 1786612,
            "node_id": "MDQ6VXNlcjE3ODY2MTI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1786612?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krris",
            "html_url": "https://github.com/krris",
            "followers_url": "https://api.github.com/users/krris/followers",
            "following_url": "https://api.github.com/users/krris/following{/other_user}",
            "gists_url": "https://api.github.com/users/krris/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krris/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krris/subscriptions",
            "organizations_url": "https://api.github.com/users/krris/orgs",
            "repos_url": "https://api.github.com/users/krris/repos",
            "events_url": "https://api.github.com/users/krris/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krris/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\ud83d\udc4d  for much more better example.\n",
        "created_at": "2016-10-19T13:27:49Z",
        "updated_at": "2016-10-20T10:13:59Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/80#discussion_r84068996",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/80",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84068996"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/80#discussion_r84068996"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/80"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84070268",
        "pull_request_review_id": 4870077,
        "id": 84070268,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0MDcwMjY4",
        "diff_hunk": "@@ -47,10 +47,11 @@\n #import \"HUBActionRegistry.h\"\n #import \"HUBActionHandler.h\"\n #import \"HUBViewModelDiff.h\"\n+#import \"HUBComponentGestureRecognizer.h\"\n \n NS_ASSUME_NONNULL_BEGIN\n \n-@interface HUBViewControllerImplementation () <HUBViewModelLoaderDelegate, HUBImageLoaderDelegate, HUBComponentWrapperDelegate, UICollectionViewDataSource, UICollectionViewDelegate>\n+@interface HUBViewControllerImplementation () <HUBViewModelLoaderDelegate, HUBImageLoaderDelegate, HUBComponentWrapperDelegate, UICollectionViewDataSource, UICollectionViewDelegate, UIGestureRecognizerDelegate>",
        "path": "sources/HUBViewControllerImplementation.m",
        "position": 9,
        "original_position": 9,
        "commit_id": "be40282d496324d3b05083634a327f56c8e612fc",
        "original_commit_id": "641bfa9c7809db1a5eb806c35a0304273d645255",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Totally! We should add a GitHub issue for it with subtasks. There's a few \"quick wins\", like moving image loading out of it.\n",
        "created_at": "2016-10-19T13:34:08Z",
        "updated_at": "2016-10-20T10:13:59Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/80#discussion_r84070268",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/80",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84070268"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/80#discussion_r84070268"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/80"
            }
        },
        "in_reply_to_id": 84066111
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84090533",
        "pull_request_review_id": 4889596,
        "id": 84090533,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0MDkwNTMz",
        "diff_hunk": "@@ -158,6 +159,36 @@ Once your component has started to render a model for which a UI state was previ\n \n Thanks to this API, you can hide the fact that components are reused for your users, as from their perspective it will look like the component was there all along.\n \n+## Responding to user interactions",
        "path": "documentation/Component programming guide.md",
        "position": 12,
        "original_position": 12,
        "commit_id": "be40282d496324d3b05083634a327f56c8e612fc",
        "original_commit_id": "661ee0e145b0b4b2f9f705713550e0d52d918b0c",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Thanks! Makes me super happy to hear \ud83c\udf89 \n",
        "created_at": "2016-10-19T14:59:20Z",
        "updated_at": "2016-10-20T10:13:59Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/80#discussion_r84090533",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/80",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84090533"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/80#discussion_r84090533"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/80"
            }
        },
        "in_reply_to_id": 84067345
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84256300",
        "pull_request_review_id": 5043965,
        "id": 84256300,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0MjU2MzAw",
        "diff_hunk": "@@ -606,67 +601,30 @@ - (void)createCollectionViewIfNeeded\n \n - (void)reloadCollectionViewWithViewModel:(id<HUBViewModel>)viewModel animated:(BOOL)animated\n {\n-    if (!self.viewModelHasChangedSinceLastLayoutUpdate) {\n-        if (CGRectEqualToRect(self.collectionView.frame, self.view.bounds)) {\n-            return;\n-        }\n-    }\n-    \n-    self.collectionView.frame = self.view.bounds;\n-    \n-    [self saveStatesForVisibleComponents];\n-    \n     if (![self.collectionView.collectionViewLayout isKindOfClass:[HUBCollectionViewLayout class]]) {\n         self.collectionView.collectionViewLayout = [[HUBCollectionViewLayout alloc] initWithComponentRegistry:self.componentRegistry\n                                                                                        componentLayoutManager:self.componentLayoutManager];\n     }\n-    \n-    HUBCollectionViewLayout * const layout = (HUBCollectionViewLayout *)self.collectionView.collectionViewLayout;\n-    \n-    /* Performing batch updates inbetween viewDidLoad and viewDidAppear is seemingly not allowed, as it\n-     causes an assertion inside a private UICollectionView method. If no diff exists, fall back to\n-     a complete reload. */\n-    if (!self.viewHasAppeared || self.lastViewModelDiff == nil) {\n-        [self.collectionView reloadData];\n-        \n-        [layout computeForCollectionViewSize:self.collectionView.frame.size viewModel:viewModel diff:self.lastViewModelDiff];\n \n-        if (self.viewHasAppeared) {\n-            /* Forcing a re-layout as the reloadData-call doesn't trigger the numberOfItemsInSection:-calls\n-             by itself, and batch update calls don't play well without having an initial item count. */\n-            [self.collectionView setNeedsLayout];\n-            [self.collectionView layoutIfNeeded];\n-        }\n-        \n-        self.lastViewModelDiff = nil;\n-    } else {\n-        void (^updateBlock)() = ^{\n-            [self.collectionView performBatchUpdates:^{\n-                HUBViewModelDiff * const lastDiff = self.lastViewModelDiff;\n-                \n-                [self.collectionView insertItemsAtIndexPaths:lastDiff.insertedBodyComponentIndexPaths];\n-                [self.collectionView deleteItemsAtIndexPaths:lastDiff.deletedBodyComponentIndexPaths];\n-                [self.collectionView reloadItemsAtIndexPaths:lastDiff.reloadedBodyComponentIndexPaths];\n-                \n-                [layout computeForCollectionViewSize:self.collectionView.frame.size viewModel:viewModel diff:self.lastViewModelDiff];\n-            } completion:^(BOOL finished) {\n-                self.lastViewModelDiff = nil;\n-            }];\n-        };\n-        \n-        if (animated) {\n-            updateBlock();\n-        } else {\n-            [UIView performWithoutAnimation:updateBlock];\n-        }\n+    if (self.viewModelRenderer == nil) {\n+        UICollectionView * const nonnullCollectionView = self.collectionView;",
        "path": "sources/HUBViewControllerImplementation.m",
        "position": 127,
        "original_position": 127,
        "commit_id": "74a42113c713d6f5be4be33993c0bbc840eaced3",
        "original_commit_id": "74a42113c713d6f5be4be33993c0bbc840eaced3",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Why not create them both at the same time?\n",
        "created_at": "2016-10-20T10:41:50Z",
        "updated_at": "2016-10-20T10:45:48Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/85#discussion_r84256300",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/85",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84256300"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/85#discussion_r84256300"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/85"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84256370",
        "pull_request_review_id": 5043965,
        "id": 84256370,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0MjU2Mzcw",
        "diff_hunk": "@@ -0,0 +1,55 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import <UIKit/UIKit.h>\n+#import \"HUBViewModel.h\"",
        "path": "sources/HUBViewModelRenderer.h",
        "position": 23,
        "original_position": 23,
        "commit_id": "74a42113c713d6f5be4be33993c0bbc840eaced3",
        "original_commit_id": "74a42113c713d6f5be4be33993c0bbc840eaced3",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Use `@protocol`\n",
        "created_at": "2016-10-20T10:42:18Z",
        "updated_at": "2016-10-20T10:45:48Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/85#discussion_r84256370",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/85",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84256370"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/85#discussion_r84256370"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/85"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84256458",
        "pull_request_review_id": 5043965,
        "id": 84256458,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0MjU2NDU4",
        "diff_hunk": "@@ -0,0 +1,55 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import <UIKit/UIKit.h>\n+#import \"HUBViewModel.h\"\n+#import \"HUBHeaderMacros.h\"\n+\n+NS_ASSUME_NONNULL_BEGIN\n+\n+/**\n+ * A class used to render view models in a collection view.\n+ */\n+@interface HUBViewModelRenderer : NSObject\n+\n+/**\n+ * Initializes a @c HUBViewModelRenderer with a provided collection view.\n+ *\n+ * @param collectionView The collection view to use for rendering.\n+ */\n+- (instancetype)initWithCollectionView:(UICollectionView *)collectionView HUB_DESIGNATED_INITIALIZER;\n+\n+/** \n+ * Renders the provided view model in the collection view.\n+ * \n+ * @param viewModel The view model to render.\n+ * @param usingBatchUpdates @c YES if the renderer should render using batch updates, @c NO otherwise.",
        "path": "sources/HUBViewModelRenderer.h",
        "position": 44,
        "original_position": 44,
        "commit_id": "74a42113c713d6f5be4be33993c0bbc840eaced3",
        "original_commit_id": "74a42113c713d6f5be4be33993c0bbc840eaced3",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This could be simplified as `Whether the renderer should render using batch updates`.\n",
        "created_at": "2016-10-20T10:43:00Z",
        "updated_at": "2016-10-20T10:45:48Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/85#discussion_r84256458",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/85",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84256458"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/85#discussion_r84256458"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/85"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84256570",
        "pull_request_review_id": 5043965,
        "id": 84256570,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0MjU2NTcw",
        "diff_hunk": "@@ -0,0 +1,93 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import \"HUBViewModelRenderer.h\"\n+#import \"HUBViewModelDiff.h\"\n+#import \"HUBCollectionViewLayout.h\"\n+\n+NS_ASSUME_NONNULL_BEGIN\n+\n+@interface HUBViewModelRenderer ()\n+\n+@property (nonatomic, strong, readonly) UICollectionView *collectionView;\n+@property (nonatomic, strong) id<HUBViewModel> lastRenderedViewModel;\n+\n+@end\n+\n+@implementation HUBViewModelRenderer\n+\n+- (instancetype)initWithCollectionView:(UICollectionView *)collectionView\n+{\n+    self = [super init];\n+    if (self) {\n+        _collectionView = collectionView;\n+    }\n+    return self;\n+}\n+\n+- (void)renderViewModel:(id<HUBViewModel>)viewModel\n+      usingBatchUpdates:(BOOL)usingBatchUpdates\n+               animated:(BOOL)animated\n+             completion:(void (^)())completionBlock\n+{\n+    HUBViewModelDiff *diff;",
        "path": "sources/HUBViewModelRenderer.m",
        "position": 51,
        "original_position": 51,
        "commit_id": "74a42113c713d6f5be4be33993c0bbc840eaced3",
        "original_commit_id": "74a42113c713d6f5be4be33993c0bbc840eaced3",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Give this an initial value of `nil`, so we don't end up using an uninitialized variable.\n",
        "created_at": "2016-10-20T10:43:41Z",
        "updated_at": "2016-10-20T10:45:48Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/85#discussion_r84256570",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/85",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84256570"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/85#discussion_r84256570"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/85"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84262960",
        "pull_request_review_id": 5050316,
        "id": 84262960,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0MjYyOTYw",
        "diff_hunk": "@@ -133,8 +133,14 @@ NS_ASSUME_NONNULL_BEGIN\n  */\n @property (nonatomic, nullable, readonly) id<HUBViewModel> viewModel;\n \n-/// The views of the root body components that are currently visible on screen, keyed by their index paths\n-@property (nonatomic, strong, readonly) NSDictionary<NSIndexPath *, UIView *> *visibleBodyComponentViewIndexPaths;\n+/**\n+ *  The views of the body components that are currently visible on screen, keyed by their index path\n+ *\n+ *  The index paths used for keys contains the indexes for the components' views, starting from the root. For example,\n+ *  a root body component at index 4 will have an index path with just the index 4, while the 3rd child of that component",
        "path": "include/HubFramework/HUBViewController.h",
        "position": null,
        "original_position": 10,
        "commit_id": "0550094089dc8e7dca5a936221bdae28008a45e8",
        "original_commit_id": "7fbfefcf5e88a89e0b206835cb20898a39606a0b",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Wording is kind of confusing as the first example says \"index 4\", whereas the second example \"3rd child\". Perhaps replace 3rd child with \"child at index 2\"? :smile:\n",
        "created_at": "2016-10-20T11:32:42Z",
        "updated_at": "2016-10-20T12:40:20Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/87#discussion_r84262960",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/87",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84262960"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/87#discussion_r84262960"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/87"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84269780",
        "pull_request_review_id": 5056953,
        "id": 84269780,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0MjY5Nzgw",
        "diff_hunk": "@@ -133,8 +133,14 @@ NS_ASSUME_NONNULL_BEGIN\n  */\n @property (nonatomic, nullable, readonly) id<HUBViewModel> viewModel;\n \n-/// The views of the root body components that are currently visible on screen, keyed by their index paths\n-@property (nonatomic, strong, readonly) NSDictionary<NSIndexPath *, UIView *> *visibleBodyComponentViewIndexPaths;\n+/**\n+ *  The views of the body components that are currently visible on screen, keyed by their index path\n+ *\n+ *  The index paths used for keys contains the indexes for the components' views, starting from the root. For example,\n+ *  a root body component at index 4 will have an index path with just the index 4, while the 3rd child of that component",
        "path": "include/HubFramework/HUBViewController.h",
        "position": null,
        "original_position": 10,
        "commit_id": "0550094089dc8e7dca5a936221bdae28008a45e8",
        "original_commit_id": "7fbfefcf5e88a89e0b206835cb20898a39606a0b",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Great point - will fix!\n",
        "created_at": "2016-10-20T12:23:03Z",
        "updated_at": "2016-10-20T12:40:20Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/87#discussion_r84269780",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/87",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84269780"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/87#discussion_r84269780"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/87"
            }
        },
        "in_reply_to_id": 84262960
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/83203423",
        "pull_request_review_id": 4060309,
        "id": 83203423,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzMjAzNDIz",
        "diff_hunk": "@@ -48,6 +48,8 @@\n #import \"HUBActionHandler.h\"\n #import \"HUBViewModelDiff.h\"\n \n+CFTimeInterval const kDownloadingTimeTreshold = 0.07;",
        "path": "sources/HUBViewControllerImplementation.m",
        "position": null,
        "original_position": 4,
        "commit_id": "5a45e280a198a83afcb1d2e2fdc29b589f1e99bd",
        "original_commit_id": "ae60b1946b02f7e50a8a8d4c006a055d8d180542",
        "user": {
            "login": "krris",
            "id": 1786612,
            "node_id": "MDQ6VXNlcjE3ODY2MTI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1786612?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krris",
            "html_url": "https://github.com/krris",
            "followers_url": "https://api.github.com/users/krris/followers",
            "following_url": "https://api.github.com/users/krris/following{/other_user}",
            "gists_url": "https://api.github.com/users/krris/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krris/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krris/subscriptions",
            "organizations_url": "https://api.github.com/users/krris/orgs",
            "repos_url": "https://api.github.com/users/krris/repos",
            "events_url": "https://api.github.com/users/krris/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krris/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Shouldn't we expose this value to the user? What do you think?\n",
        "created_at": "2016-10-13T12:26:03Z",
        "updated_at": "2016-10-20T13:00:48Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/75#discussion_r83203423",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/75",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/83203423"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/75#discussion_r83203423"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/75"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/83238734",
        "pull_request_review_id": 4094706,
        "id": 83238734,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzMjM4NzM0",
        "diff_hunk": "@@ -40,6 +40,8 @@ NS_ASSUME_NONNULL_BEGIN\n /// Any index of a child component that the image is for\n @property (nonatomic, copy, readonly, nullable) NSNumber *childIndex;\n \n+@property (nonatomic, assign, readonly) CFTimeInterval timestamp;",
        "path": "sources/HUBComponentImageLoadingContext.h",
        "position": null,
        "original_position": 4,
        "commit_id": "5a45e280a198a83afcb1d2e2fdc29b589f1e99bd",
        "original_commit_id": "ae60b1946b02f7e50a8a8d4c006a055d8d180542",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Please document this property.\n",
        "created_at": "2016-10-13T15:08:36Z",
        "updated_at": "2016-10-20T13:00:48Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/75#discussion_r83238734",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/75",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/83238734"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/75#discussion_r83238734"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/75"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/83238820",
        "pull_request_review_id": 4094706,
        "id": 83238820,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzMjM4ODIw",
        "diff_hunk": "@@ -51,7 +53,8 @@ NS_ASSUME_NONNULL_BEGIN\n - (instancetype)initWithImageType:(HUBComponentImageType)imageType\n                   imageIdentifier:(nullable NSString *)imageIdentifier\n                 wrapperIdentifier:(NSUUID *)wrapperIdentifier\n-                       childIndex:(nullable NSNumber *)childIndex HUB_DESIGNATED_INITIALIZER;\n+                       childIndex:(nullable NSNumber *)childIndex\n+                        timestamp:(CFTimeInterval)timestamp HUB_DESIGNATED_INITIALIZER;",
        "path": "sources/HUBComponentImageLoadingContext.h",
        "position": null,
        "original_position": 15,
        "commit_id": "5a45e280a198a83afcb1d2e2fdc29b589f1e99bd",
        "original_commit_id": "ae60b1946b02f7e50a8a8d4c006a055d8d180542",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Please add parameter documentation for `timestamp`.\n",
        "created_at": "2016-10-13T15:08:56Z",
        "updated_at": "2016-10-20T13:00:48Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/75#discussion_r83238820",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/75",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/83238820"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/75#discussion_r83238820"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/75"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/83239834",
        "pull_request_review_id": 4094706,
        "id": 83239834,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzMjM5ODM0",
        "diff_hunk": "@@ -51,7 +53,8 @@ NS_ASSUME_NONNULL_BEGIN\n - (instancetype)initWithImageType:(HUBComponentImageType)imageType\n                   imageIdentifier:(nullable NSString *)imageIdentifier\n                 wrapperIdentifier:(NSUUID *)wrapperIdentifier\n-                       childIndex:(nullable NSNumber *)childIndex HUB_DESIGNATED_INITIALIZER;\n+                       childIndex:(nullable NSNumber *)childIndex\n+                        timestamp:(CFTimeInterval)timestamp HUB_DESIGNATED_INITIALIZER;",
        "path": "sources/HUBComponentImageLoadingContext.h",
        "position": null,
        "original_position": 15,
        "commit_id": "5a45e280a198a83afcb1d2e2fdc29b589f1e99bd",
        "original_commit_id": "ae60b1946b02f7e50a8a8d4c006a055d8d180542",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "How about changing the type of this parameter and the associated property to `NSTimeInterval`? That would keep the API cleaner, abstracting away that we currently use Core Animation function. Should make things nicer to use from Swift.\n",
        "created_at": "2016-10-13T15:12:39Z",
        "updated_at": "2016-10-20T13:00:48Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/75#discussion_r83239834",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/75",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/83239834"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/75#discussion_r83239834"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/75"
            }
        },
        "in_reply_to_id": 83238820
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/83240564",
        "pull_request_review_id": 4094706,
        "id": 83240564,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzMjQwNTY0",
        "diff_hunk": "@@ -48,6 +48,8 @@\n #import \"HUBActionHandler.h\"\n #import \"HUBViewModelDiff.h\"\n \n+CFTimeInterval const kDownloadingTimeTreshold = 0.07;",
        "path": "sources/HUBViewControllerImplementation.m",
        "position": null,
        "original_position": 4,
        "commit_id": "5a45e280a198a83afcb1d2e2fdc29b589f1e99bd",
        "original_commit_id": "ae60b1946b02f7e50a8a8d4c006a055d8d180542",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Please rename it to `HUBDownloadTimeThreshold` to adhere to our style guidelines:\n\nOnly pure C constants used by pure C code should be prefixed with a `k`. All other constant, and symbols, should follow normal Cocoa naming guidelines. I.e. use the symbol prefix (`HUB`).\n",
        "created_at": "2016-10-13T15:15:38Z",
        "updated_at": "2016-10-20T13:00:48Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/75#discussion_r83240564",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/75",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/83240564"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/75#discussion_r83240564"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/75"
            }
        },
        "in_reply_to_id": 83203423
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/83240835",
        "pull_request_review_id": 4094706,
        "id": 83240835,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzMjQwODM1",
        "diff_hunk": "@@ -48,6 +48,8 @@\n #import \"HUBActionHandler.h\"\n #import \"HUBViewModelDiff.h\"\n \n+CFTimeInterval const kDownloadingTimeTreshold = 0.07;",
        "path": "sources/HUBViewControllerImplementation.m",
        "position": null,
        "original_position": 4,
        "commit_id": "5a45e280a198a83afcb1d2e2fdc29b589f1e99bd",
        "original_commit_id": "ae60b1946b02f7e50a8a8d4c006a055d8d180542",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I agree that it probably makes sense to expose this value via some header.\n\nIf not we need to add `static` here to not pollute the global namespace, like:\n\n``` objc\nstatic CFTimeInterval  const HUBDownloadingTimeThreshold = 0.07;\n```\n",
        "created_at": "2016-10-13T15:16:45Z",
        "updated_at": "2016-10-20T13:00:48Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/75#discussion_r83240835",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/75",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/83240835"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/75#discussion_r83240835"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/75"
            }
        },
        "in_reply_to_id": 83203423
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/83559769",
        "pull_request_review_id": 4396358,
        "id": 83559769,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzNTU5NzY5",
        "diff_hunk": "@@ -51,7 +53,8 @@ NS_ASSUME_NONNULL_BEGIN\n - (instancetype)initWithImageType:(HUBComponentImageType)imageType\n                   imageIdentifier:(nullable NSString *)imageIdentifier\n                 wrapperIdentifier:(NSUUID *)wrapperIdentifier\n-                       childIndex:(nullable NSNumber *)childIndex HUB_DESIGNATED_INITIALIZER;\n+                       childIndex:(nullable NSNumber *)childIndex\n+                        timestamp:(CFTimeInterval)timestamp HUB_DESIGNATED_INITIALIZER;",
        "path": "sources/HUBComponentImageLoadingContext.h",
        "position": null,
        "original_position": 15,
        "commit_id": "5a45e280a198a83afcb1d2e2fdc29b589f1e99bd",
        "original_commit_id": "ae60b1946b02f7e50a8a8d4c006a055d8d180542",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yeah, totally agree - I think `NSTimeInterval` should be used.\n",
        "created_at": "2016-10-16T20:42:12Z",
        "updated_at": "2016-10-20T13:00:48Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/75#discussion_r83559769",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/75",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/83559769"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/75#discussion_r83559769"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/75"
            }
        },
        "in_reply_to_id": 83238820
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/83559787",
        "pull_request_review_id": 4396358,
        "id": 83559787,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzNTU5Nzg3",
        "diff_hunk": "@@ -48,6 +48,8 @@\n #import \"HUBActionHandler.h\"\n #import \"HUBViewModelDiff.h\"\n \n+CFTimeInterval const kDownloadingTimeTreshold = 0.07;",
        "path": "sources/HUBViewControllerImplementation.m",
        "position": null,
        "original_position": 4,
        "commit_id": "5a45e280a198a83afcb1d2e2fdc29b589f1e99bd",
        "original_commit_id": "ae60b1946b02f7e50a8a8d4c006a055d8d180542",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Why does it need to be exposed? Is there any API use case for it? Otherwise I think it's better to keep it internal.\n",
        "created_at": "2016-10-16T20:42:54Z",
        "updated_at": "2016-10-20T13:00:48Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/75#discussion_r83559787",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/75",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/83559787"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/75#discussion_r83559787"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/75"
            }
        },
        "in_reply_to_id": 83203423
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/83559821",
        "pull_request_review_id": 4396358,
        "id": 83559821,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzNTU5ODIx",
        "diff_hunk": "@@ -48,6 +48,8 @@\n #import \"HUBActionHandler.h\"\n #import \"HUBViewModelDiff.h\"\n \n+CFTimeInterval const kDownloadingTimeTreshold = 0.07;",
        "path": "sources/HUBViewControllerImplementation.m",
        "position": null,
        "original_position": 4,
        "commit_id": "5a45e280a198a83afcb1d2e2fdc29b589f1e99bd",
        "original_commit_id": "ae60b1946b02f7e50a8a8d4c006a055d8d180542",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Also make it `static`. And since it's only relevant for images add that information to the variable name. Like this:\n`HUBImageDownloadTimeThreshold`.\n",
        "created_at": "2016-10-16T20:44:06Z",
        "updated_at": "2016-10-20T13:00:48Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/75#discussion_r83559821",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/75",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/83559821"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/75#discussion_r83559821"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/75"
            }
        },
        "in_reply_to_id": 83203423
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/83559838",
        "pull_request_review_id": 4396358,
        "id": 83559838,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzNTU5ODM4",
        "diff_hunk": "@@ -956,14 +958,15 @@ - (void)loadImageFromData:(id<HUBComponentImageData>)imageData\n     if (CGSizeEqualToSize(preferredSize, CGSizeZero)) {\n         return;\n     }\n-    \n+\n     HUBComponentImageLoadingContext * const context = [[HUBComponentImageLoadingContext alloc] initWithImageType:imageData.type\n                                                                                                  imageIdentifier:imageData.identifier\n                                                                                                wrapperIdentifier:componentWrapper.identifier\n-                                                                                                      childIndex:childIndex];\n+                                                                                                      childIndex:childIndex\n+                                                                                                       timestamp:CACurrentMediaTime()];",
        "path": "sources/HUBViewControllerImplementation.m",
        "position": null,
        "original_position": 37,
        "commit_id": "5a45e280a198a83afcb1d2e2fdc29b589f1e99bd",
        "original_commit_id": "ae60b1946b02f7e50a8a8d4c006a055d8d180542",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Isn't it better to use `[NSDate date].timeIntervalSinceReferenceDate`, to avoid the `CoreAnimation` dependency?\n",
        "created_at": "2016-10-16T20:44:44Z",
        "updated_at": "2016-10-20T13:00:48Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/75#discussion_r83559838",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/75",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/83559838"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/75#discussion_r83559838"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/75"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/83711210",
        "pull_request_review_id": 4537370,
        "id": 83711210,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzNzExMjEw",
        "diff_hunk": "@@ -48,6 +48,8 @@\n #import \"HUBActionHandler.h\"\n #import \"HUBViewModelDiff.h\"\n \n+CFTimeInterval const kDownloadingTimeTreshold = 0.07;",
        "path": "sources/HUBViewControllerImplementation.m",
        "position": null,
        "original_position": 4,
        "commit_id": "5a45e280a198a83afcb1d2e2fdc29b589f1e99bd",
        "original_commit_id": "ae60b1946b02f7e50a8a8d4c006a055d8d180542",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Let\u2019s go with @JohnSundell\u2019s route. Keep it private, rename it and make it static \ud83d\udc4d \n",
        "created_at": "2016-10-17T19:03:43Z",
        "updated_at": "2016-10-20T13:00:48Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/75#discussion_r83711210",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/75",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/83711210"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/75#discussion_r83711210"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/75"
            }
        },
        "in_reply_to_id": 83203423
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84033131",
        "pull_request_review_id": 4835430,
        "id": 84033131,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0MDMzMTMx",
        "diff_hunk": "@@ -956,14 +958,15 @@ - (void)loadImageFromData:(id<HUBComponentImageData>)imageData\n     if (CGSizeEqualToSize(preferredSize, CGSizeZero)) {\n         return;\n     }\n-    \n+\n     HUBComponentImageLoadingContext * const context = [[HUBComponentImageLoadingContext alloc] initWithImageType:imageData.type\n                                                                                                  imageIdentifier:imageData.identifier\n                                                                                                wrapperIdentifier:componentWrapper.identifier\n-                                                                                                      childIndex:childIndex];\n+                                                                                                      childIndex:childIndex\n+                                                                                                       timestamp:CACurrentMediaTime()];",
        "path": "sources/HUBViewControllerImplementation.m",
        "position": null,
        "original_position": 37,
        "commit_id": "5a45e280a198a83afcb1d2e2fdc29b589f1e99bd",
        "original_commit_id": "ae60b1946b02f7e50a8a8d4c006a055d8d180542",
        "user": {
            "login": "krris",
            "id": 1786612,
            "node_id": "MDQ6VXNlcjE3ODY2MTI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1786612?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krris",
            "html_url": "https://github.com/krris",
            "followers_url": "https://api.github.com/users/krris/followers",
            "following_url": "https://api.github.com/users/krris/following{/other_user}",
            "gists_url": "https://api.github.com/users/krris/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krris/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krris/subscriptions",
            "organizations_url": "https://api.github.com/users/krris/orgs",
            "repos_url": "https://api.github.com/users/krris/repos",
            "events_url": "https://api.github.com/users/krris/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krris/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It was my first idea to use `NSDate`. But then I found that using it for time measurement can lead to some bugs which are difficult to track (because `NSDate` syncs with the server). I haven't found anything about this in a documentation but there is a video from [Stanford iOS course](https://itunes.apple.com/se/course/advanced-ios-gesture-recognition/id593208016?i=1000135909516&l=en&mt=2) (Winter 2013, Advanced iOS Gesture Recognition 34:00) which explains this a little.\n\nWhat do you think about this?\n",
        "created_at": "2016-10-19T09:44:54Z",
        "updated_at": "2016-10-20T13:00:48Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/75#discussion_r84033131",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/75",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84033131"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/75#discussion_r84033131"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/75"
            }
        },
        "in_reply_to_id": 83559838
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84033312",
        "pull_request_review_id": 4835599,
        "id": 84033312,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0MDMzMzEy",
        "diff_hunk": "@@ -48,6 +48,8 @@\n #import \"HUBActionHandler.h\"\n #import \"HUBViewModelDiff.h\"\n \n+CFTimeInterval const kDownloadingTimeTreshold = 0.07;",
        "path": "sources/HUBViewControllerImplementation.m",
        "position": null,
        "original_position": 4,
        "commit_id": "5a45e280a198a83afcb1d2e2fdc29b589f1e99bd",
        "original_commit_id": "ae60b1946b02f7e50a8a8d4c006a055d8d180542",
        "user": {
            "login": "krris",
            "id": 1786612,
            "node_id": "MDQ6VXNlcjE3ODY2MTI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1786612?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krris",
            "html_url": "https://github.com/krris",
            "followers_url": "https://api.github.com/users/krris/followers",
            "following_url": "https://api.github.com/users/krris/following{/other_user}",
            "gists_url": "https://api.github.com/users/krris/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krris/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krris/subscriptions",
            "organizations_url": "https://api.github.com/users/krris/orgs",
            "repos_url": "https://api.github.com/users/krris/repos",
            "events_url": "https://api.github.com/users/krris/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krris/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Totally agree \ud83d\udc4d \n",
        "created_at": "2016-10-19T09:46:03Z",
        "updated_at": "2016-10-20T13:00:48Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/75#discussion_r84033312",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/75",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84033312"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/75#discussion_r84033312"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/75"
            }
        },
        "in_reply_to_id": 83203423
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84033398",
        "pull_request_review_id": 4835670,
        "id": 84033398,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0MDMzMzk4",
        "diff_hunk": "@@ -40,6 +40,8 @@ NS_ASSUME_NONNULL_BEGIN\n /// Any index of a child component that the image is for\n @property (nonatomic, copy, readonly, nullable) NSNumber *childIndex;\n \n+@property (nonatomic, assign, readonly) CFTimeInterval timestamp;",
        "path": "sources/HUBComponentImageLoadingContext.h",
        "position": null,
        "original_position": 4,
        "commit_id": "5a45e280a198a83afcb1d2e2fdc29b589f1e99bd",
        "original_commit_id": "ae60b1946b02f7e50a8a8d4c006a055d8d180542",
        "user": {
            "login": "krris",
            "id": 1786612,
            "node_id": "MDQ6VXNlcjE3ODY2MTI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1786612?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krris",
            "html_url": "https://github.com/krris",
            "followers_url": "https://api.github.com/users/krris/followers",
            "following_url": "https://api.github.com/users/krris/following{/other_user}",
            "gists_url": "https://api.github.com/users/krris/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krris/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krris/subscriptions",
            "organizations_url": "https://api.github.com/users/krris/orgs",
            "repos_url": "https://api.github.com/users/krris/repos",
            "events_url": "https://api.github.com/users/krris/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krris/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Sure, I forgot about this \ud83d\ude22 \n",
        "created_at": "2016-10-19T09:46:29Z",
        "updated_at": "2016-10-20T13:00:48Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/75#discussion_r84033398",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/75",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84033398"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/75#discussion_r84033398"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/75"
            }
        },
        "in_reply_to_id": 83238734
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84033603",
        "pull_request_review_id": 4835851,
        "id": 84033603,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0MDMzNjAz",
        "diff_hunk": "@@ -51,7 +53,8 @@ NS_ASSUME_NONNULL_BEGIN\n - (instancetype)initWithImageType:(HUBComponentImageType)imageType\n                   imageIdentifier:(nullable NSString *)imageIdentifier\n                 wrapperIdentifier:(NSUUID *)wrapperIdentifier\n-                       childIndex:(nullable NSNumber *)childIndex HUB_DESIGNATED_INITIALIZER;\n+                       childIndex:(nullable NSNumber *)childIndex\n+                        timestamp:(CFTimeInterval)timestamp HUB_DESIGNATED_INITIALIZER;",
        "path": "sources/HUBComponentImageLoadingContext.h",
        "position": null,
        "original_position": 15,
        "commit_id": "5a45e280a198a83afcb1d2e2fdc29b589f1e99bd",
        "original_commit_id": "ae60b1946b02f7e50a8a8d4c006a055d8d180542",
        "user": {
            "login": "krris",
            "id": 1786612,
            "node_id": "MDQ6VXNlcjE3ODY2MTI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1786612?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krris",
            "html_url": "https://github.com/krris",
            "followers_url": "https://api.github.com/users/krris/followers",
            "following_url": "https://api.github.com/users/krris/following{/other_user}",
            "gists_url": "https://api.github.com/users/krris/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krris/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krris/subscriptions",
            "organizations_url": "https://api.github.com/users/krris/orgs",
            "repos_url": "https://api.github.com/users/krris/repos",
            "events_url": "https://api.github.com/users/krris/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krris/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Good point \ud83d\udc4d \n",
        "created_at": "2016-10-19T09:47:43Z",
        "updated_at": "2016-10-20T13:00:48Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/75#discussion_r84033603",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/75",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84033603"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/75#discussion_r84033603"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/75"
            }
        },
        "in_reply_to_id": 83238820
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84044875",
        "pull_request_review_id": 4846392,
        "id": 84044875,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0MDQ0ODc1",
        "diff_hunk": "@@ -956,14 +958,15 @@ - (void)loadImageFromData:(id<HUBComponentImageData>)imageData\n     if (CGSizeEqualToSize(preferredSize, CGSizeZero)) {\n         return;\n     }\n-    \n+\n     HUBComponentImageLoadingContext * const context = [[HUBComponentImageLoadingContext alloc] initWithImageType:imageData.type\n                                                                                                  imageIdentifier:imageData.identifier\n                                                                                                wrapperIdentifier:componentWrapper.identifier\n-                                                                                                      childIndex:childIndex];\n+                                                                                                      childIndex:childIndex\n+                                                                                                       timestamp:CACurrentMediaTime()];",
        "path": "sources/HUBViewControllerImplementation.m",
        "position": null,
        "original_position": 37,
        "commit_id": "5a45e280a198a83afcb1d2e2fdc29b589f1e99bd",
        "original_commit_id": "ae60b1946b02f7e50a8a8d4c006a055d8d180542",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It doesn't sync with the server, as in the network right? I think it's fine to rely on `NSDate`.\n",
        "created_at": "2016-10-19T10:59:44Z",
        "updated_at": "2016-10-20T13:00:48Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/75#discussion_r84044875",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/75",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84044875"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/75#discussion_r84044875"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/75"
            }
        },
        "in_reply_to_id": 83559838
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84249156",
        "pull_request_review_id": 5037199,
        "id": 84249156,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0MjQ5MTU2",
        "diff_hunk": "@@ -439,18 +439,64 @@ - (void)testReloadingImage\n     NSIndexPath * const indexPath = [NSIndexPath indexPathForItem:0 inSection:0];\n     self.collectionView.cells[indexPath] = [collectionViewDataSource collectionView:self.collectionView cellForItemAtIndexPath:indexPath];\n     \n-    [imageLoaderDelegate imageLoader:self.imageLoader didLoadImage:[UIImage new] forURL:imageURL fromCache:NO];\n+    [imageLoaderDelegate imageLoader:self.imageLoader didLoadImage:[UIImage new] forURL:imageURL];\n     XCTAssertEqualObjects(self.component.mainImageData.URL, imageURL);\n     \n     [self.component prepareViewForReuse];\n     XCTAssertNil(self.component.mainImageData);\n     \n     [collectionViewDataSource collectionView:self.collectionView cellForItemAtIndexPath:indexPath];\n     \n-    [imageLoaderDelegate imageLoader:self.imageLoader didLoadImage:[UIImage new] forURL:imageURL fromCache:NO];\n+    [imageLoaderDelegate imageLoader:self.imageLoader didLoadImage:[UIImage new] forURL:imageURL];\n     XCTAssertEqualObjects(self.component.mainImageData.URL, imageURL);\n }\n \n+- (void)testDownloadFromNetworkImageAnimation\n+{\n+    NSURL * const imageURL = [NSURL URLWithString:@\"https://image.url\"];\n+\n+    self.contentOperation.contentLoadingBlock = ^(id<HUBViewModelBuilder> viewModelBuilder) {\n+        id<HUBComponentModelBuilder> const componentModelBuilder = [viewModelBuilder builderForBodyComponentModelWithIdentifier:@\"component\"];\n+        componentModelBuilder.mainImageURL = imageURL;\n+        return YES;\n+    };\n+\n+    [self simulateViewControllerLayoutCycle];\n+\n+    id<UICollectionViewDataSource> const collectionViewDataSource = self.collectionView.dataSource;\n+    id<HUBImageLoaderDelegate> const imageLoaderDelegate = self.imageLoader.delegate;\n+    \n+    NSIndexPath * const indexPath = [NSIndexPath indexPathForItem:0 inSection:0];\n+    self.collectionView.cells[indexPath] = [collectionViewDataSource collectionView:self.collectionView cellForItemAtIndexPath:indexPath];\n+\n+    NSTimeInterval downloadFromNetworkTime = 2;\n+    [NSThread sleepForTimeInterval:downloadFromNetworkTime];",
        "path": "tests/HUBViewControllerTests.m",
        "position": 55,
        "original_position": 55,
        "commit_id": "5a45e280a198a83afcb1d2e2fdc29b589f1e99bd",
        "original_commit_id": "26cb2352f3746bb40196d4195ff7776d0f82ce2e",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Clever!\n",
        "created_at": "2016-10-20T09:56:09Z",
        "updated_at": "2016-10-20T13:00:48Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/75#discussion_r84249156",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/75",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84249156"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/75#discussion_r84249156"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/75"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84249343",
        "pull_request_review_id": 5037199,
        "id": 84249343,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0MjQ5MzQz",
        "diff_hunk": "@@ -91,6 +91,9 @@ NS_ASSUME_NONNULL_BEGIN\n /// Whether the component should act like it is a content offset observer or not\n @property (nonatomic) BOOL isContentOffsetObserver;\n \n+/// Whether the component's image was recently animated\n+@property (nonatomic) BOOL isImageAnimated;",
        "path": "tests/mocks/HUBComponentMock.h",
        "position": null,
        "original_position": 5,
        "commit_id": "5a45e280a198a83afcb1d2e2fdc29b589f1e99bd",
        "original_commit_id": "26cb2352f3746bb40196d4195ff7776d0f82ce2e",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Nitpick: Make this `readonly`, so that it can't be accidentially set from the outside, and the override it as `readwrite` in the implementation.\n",
        "created_at": "2016-10-20T09:57:08Z",
        "updated_at": "2016-10-20T13:00:48Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/75#discussion_r84249343",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/75",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84249343"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/75#discussion_r84249343"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/75"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84249399",
        "pull_request_review_id": 5037199,
        "id": 84249399,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0MjQ5Mzk5",
        "diff_hunk": "@@ -91,6 +91,9 @@ NS_ASSUME_NONNULL_BEGIN\n /// Whether the component should act like it is a content offset observer or not\n @property (nonatomic) BOOL isContentOffsetObserver;\n \n+/// Whether the component's image was recently animated\n+@property (nonatomic) BOOL isImageAnimated;",
        "path": "tests/mocks/HUBComponentMock.h",
        "position": null,
        "original_position": 5,
        "commit_id": "5a45e280a198a83afcb1d2e2fdc29b589f1e99bd",
        "original_commit_id": "26cb2352f3746bb40196d4195ff7776d0f82ce2e",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Also since it refers to the past, how about `imageWasAnimated`? (just a suggestion)\n",
        "created_at": "2016-10-20T09:57:25Z",
        "updated_at": "2016-10-20T13:00:48Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/75#discussion_r84249399",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/75",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84249399"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/75#discussion_r84249399"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/75"
            }
        },
        "in_reply_to_id": 84249343
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84250279",
        "pull_request_review_id": 5038198,
        "id": 84250279,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0MjUwMjc5",
        "diff_hunk": "@@ -91,6 +91,9 @@ NS_ASSUME_NONNULL_BEGIN\n /// Whether the component should act like it is a content offset observer or not\n @property (nonatomic) BOOL isContentOffsetObserver;\n \n+/// Whether the component's image was recently animated\n+@property (nonatomic) BOOL isImageAnimated;",
        "path": "tests/mocks/HUBComponentMock.h",
        "position": null,
        "original_position": 5,
        "commit_id": "5a45e280a198a83afcb1d2e2fdc29b589f1e99bd",
        "original_commit_id": "26cb2352f3746bb40196d4195ff7776d0f82ce2e",
        "user": {
            "login": "krris",
            "id": 1786612,
            "node_id": "MDQ6VXNlcjE3ODY2MTI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1786612?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krris",
            "html_url": "https://github.com/krris",
            "followers_url": "https://api.github.com/users/krris/followers",
            "following_url": "https://api.github.com/users/krris/following{/other_user}",
            "gists_url": "https://api.github.com/users/krris/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krris/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krris/subscriptions",
            "organizations_url": "https://api.github.com/users/krris/orgs",
            "repos_url": "https://api.github.com/users/krris/repos",
            "events_url": "https://api.github.com/users/krris/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krris/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Right, I'll make these changes. \ud83d\udc4d \n",
        "created_at": "2016-10-20T10:02:24Z",
        "updated_at": "2016-10-20T13:00:48Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/75#discussion_r84250279",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/75",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84250279"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/75#discussion_r84250279"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/75"
            }
        },
        "in_reply_to_id": 84249343
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84309104",
        "pull_request_review_id": 5094655,
        "id": 84309104,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0MzA5MTA0",
        "diff_hunk": "@@ -55,7 +55,7 @@ static inline BOOL HUBPropertyIsEqual(NSObject * _Nullable objectA, NSObject * _\n  *\n  *  This function asserts that a view has been loaded after -loadView was sent to the component.\n  */\n-static inline UIView *HUBComponentLoadViewIfNeeded(id<HUBComponent> component) {\n+static inline UIView *HUBComponentLoadViewIfNeeded(id<HUBComponent> _Nullable component) {",
        "path": "sources/HUBUtilities.h",
        "position": null,
        "original_position": 5,
        "commit_id": "d0d9b06c6c00b65877ca04196173266908b39310",
        "original_commit_id": "2de3a8a3f81222acab03cdf0d14bd4fbfd712452",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Do we need to make this change? (This function is being used in many places, and it doesn't make a lot of sense to call it with `nil`)\n",
        "created_at": "2016-10-20T15:28:03Z",
        "updated_at": "2016-10-21T09:39:42Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/90#discussion_r84309104",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/90",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84309104"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/90#discussion_r84309104"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/90"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84309344",
        "pull_request_review_id": 5094655,
        "id": 84309344,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0MzA5MzQ0",
        "diff_hunk": "@@ -963,7 +963,9 @@ - (void)collectionViewCellWillAppear:(HUBComponentCollectionViewCell *)cell\n     }\n     \n     [self componentWrapperWillAppear:wrapper];\n-    [self.delegate viewController:self componentWithModel:wrapper.model willAppearInView:cell];\n+\n+    UIView * const component = HUBComponentLoadViewIfNeeded(cell.component);",
        "path": "sources/HUBViewControllerImplementation.m",
        "position": null,
        "original_position": 6,
        "commit_id": "d0d9b06c6c00b65877ca04196173266908b39310",
        "original_commit_id": "2de3a8a3f81222acab03cdf0d14bd4fbfd712452",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "So `nil` check this here first. Also `componentView` or something would be a better name, since it's a `UIView`, not a component \ud83d\ude42 \n",
        "created_at": "2016-10-20T15:29:05Z",
        "updated_at": "2016-10-21T09:39:42Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/90#discussion_r84309344",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/90",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84309344"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/90#discussion_r84309344"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/90"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84309489",
        "pull_request_review_id": 5094655,
        "id": 84309489,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0MzA5NDg5",
        "diff_hunk": "@@ -1863,6 +1864,7 @@ - (void)viewController:(UIViewController<HUBViewController> *)viewController\n       willAppearInView:(UIView *)componentView\n {\n     XCTAssertEqual(viewController, self.viewController);\n+    XCTAssertFalse([componentView isKindOfClass:[HUBComponentCollectionViewCell class]]);",
        "path": "tests/HUBViewControllerTests.m",
        "position": 48,
        "original_position": 12,
        "commit_id": "d0d9b06c6c00b65877ca04196173266908b39310",
        "original_commit_id": "2de3a8a3f81222acab03cdf0d14bd4fbfd712452",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Maybe add an assertion to make sure you get the correct view back, not only \"not a collection view cell\"?\n",
        "created_at": "2016-10-20T15:29:46Z",
        "updated_at": "2016-10-21T09:39:42Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/90#discussion_r84309489",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/90",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84309489"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/90#discussion_r84309489"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/90"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84431633",
        "pull_request_review_id": 5210619,
        "id": 84431633,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0NDMxNjMz",
        "diff_hunk": "@@ -55,7 +55,7 @@ static inline BOOL HUBPropertyIsEqual(NSObject * _Nullable objectA, NSObject * _\n  *\n  *  This function asserts that a view has been loaded after -loadView was sent to the component.\n  */\n-static inline UIView *HUBComponentLoadViewIfNeeded(id<HUBComponent> component) {\n+static inline UIView *HUBComponentLoadViewIfNeeded(id<HUBComponent> _Nullable component) {",
        "path": "sources/HUBUtilities.h",
        "position": null,
        "original_position": 5,
        "commit_id": "d0d9b06c6c00b65877ca04196173266908b39310",
        "original_commit_id": "2de3a8a3f81222acab03cdf0d14bd4fbfd712452",
        "user": {
            "login": "krris",
            "id": 1786612,
            "node_id": "MDQ6VXNlcjE3ODY2MTI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1786612?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krris",
            "html_url": "https://github.com/krris",
            "followers_url": "https://api.github.com/users/krris/followers",
            "following_url": "https://api.github.com/users/krris/following{/other_user}",
            "gists_url": "https://api.github.com/users/krris/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krris/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krris/subscriptions",
            "organizations_url": "https://api.github.com/users/krris/orgs",
            "repos_url": "https://api.github.com/users/krris/repos",
            "events_url": "https://api.github.com/users/krris/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krris/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Right, we don't need this. I was sending bad object to this function and it led to following error\n\n> Implicit conversion from nullable pointer to non-nullable pointer \n\nBut now worries, I know how to fixed this \ud83d\ude09 \n",
        "created_at": "2016-10-21T07:37:28Z",
        "updated_at": "2016-10-21T09:39:42Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/90#discussion_r84431633",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/90",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84431633"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/90#discussion_r84431633"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/90"
            }
        },
        "in_reply_to_id": 84309104
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84462452",
        "pull_request_review_id": 5240288,
        "id": 84462452,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0NDYyNDUy",
        "diff_hunk": "@@ -63,6 +81,55 @@ - (void)testComponentStateRestoring\n     XCTAssertEqualObjects([self.UIStateManager restoreUIStateForComponentModel:model], @\"Groovy\");\n }\n \n+- (void)testHighlight\n+{\n+    HUBComponentMock * const component = [HUBComponentMock new];\n+    id<HUBComponentModel> const model = [self componentModelWithIdentifier:@\"model\"];\n+    HUBComponentWrapper * const componentWrapper = [self componentWrapperForComponent:component model:model];\n+    UIView * const superview = [[UIView alloc] initWithFrame:CGRectZero];",
        "path": "tests/HUBComponentWrapperTests.m",
        "position": 52,
        "original_position": 52,
        "commit_id": "2bde99ced0e359b0f6a0b5a68373cedcebd49987",
        "original_commit_id": "785ef52cf8227846a4aa44119f9d8484e8ffc65e",
        "user": {
            "login": "krris",
            "id": 1786612,
            "node_id": "MDQ6VXNlcjE3ODY2MTI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1786612?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krris",
            "html_url": "https://github.com/krris",
            "followers_url": "https://api.github.com/users/krris/followers",
            "following_url": "https://api.github.com/users/krris/following{/other_user}",
            "gists_url": "https://api.github.com/users/krris/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krris/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krris/subscriptions",
            "organizations_url": "https://api.github.com/users/krris/orgs",
            "repos_url": "https://api.github.com/users/krris/repos",
            "events_url": "https://api.github.com/users/krris/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krris/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This is fine but there is also a shorter version: `[UIView new]` \ud83d\ude03 \n",
        "created_at": "2016-10-21T11:21:27Z",
        "updated_at": "2016-10-21T11:29:22Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/92#discussion_r84462452",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/92",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84462452"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/92#discussion_r84462452"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/92"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84462933",
        "pull_request_review_id": 5240288,
        "id": 84462933,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0NDYyOTMz",
        "diff_hunk": "@@ -63,6 +81,55 @@ - (void)testComponentStateRestoring\n     XCTAssertEqualObjects([self.UIStateManager restoreUIStateForComponentModel:model], @\"Groovy\");\n }\n \n+- (void)testHighlight\n+{\n+    HUBComponentMock * const component = [HUBComponentMock new];\n+    id<HUBComponentModel> const model = [self componentModelWithIdentifier:@\"model\"];\n+    HUBComponentWrapper * const componentWrapper = [self componentWrapperForComponent:component model:model];\n+    UIView * const superview = [[UIView alloc] initWithFrame:CGRectZero];\n+    [componentWrapper viewDidMoveToSuperview:superview];\n+    \n+    [self.gestureRecognizer touchesBegan:[NSSet setWithObject:[UITouch new]] withEvent:[UIEvent new]];\n+    [componentWrapper handleGestureRecognizer:self.gestureRecognizer];\n+    XCTAssertEqual(self.selectionStateFromWillUpdateDelegateMethod, HUBComponentSelectionStateHighlighted);\n+    XCTAssertEqual(self.selectionStateFromDidUpdateDelegateMethod, HUBComponentSelectionStateNone);\n+    \n+    XCTestExpectation * const expectation = [self expectationWithDescription:@\"Waiting for highlight\"];",
        "path": "tests/HUBComponentWrapperTests.m",
        "position": 60,
        "original_position": 60,
        "commit_id": "2bde99ced0e359b0f6a0b5a68373cedcebd49987",
        "original_commit_id": "785ef52cf8227846a4aa44119f9d8484e8ffc65e",
        "user": {
            "login": "krris",
            "id": 1786612,
            "node_id": "MDQ6VXNlcjE3ODY2MTI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1786612?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krris",
            "html_url": "https://github.com/krris",
            "followers_url": "https://api.github.com/users/krris/followers",
            "following_url": "https://api.github.com/users/krris/following{/other_user}",
            "gists_url": "https://api.github.com/users/krris/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krris/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krris/subscriptions",
            "organizations_url": "https://api.github.com/users/krris/orgs",
            "repos_url": "https://api.github.com/users/krris/repos",
            "events_url": "https://api.github.com/users/krris/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krris/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "What do you thing about using `(void)performAsynchronousTestWithDelay: block:` from `HUBViewControllerTests`? We could also extract utilities functions from `HUBViewControllerTests` and make them reusable.\n",
        "created_at": "2016-10-21T11:25:56Z",
        "updated_at": "2016-10-21T11:29:22Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/92#discussion_r84462933",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/92",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84462933"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/92#discussion_r84462933"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/92"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84463029",
        "pull_request_review_id": 5240288,
        "id": 84463029,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0NDYzMDI5",
        "diff_hunk": "@@ -101,18 +169,19 @@ - (HUBComponentWrapper *)componentWrapperForComponent:(id<HUBComponent>)componen\n \n #pragma mark - HUBComponentWrapperDelegate\n \n-// Below methods are all no-ops implemented out of necessity.\n-\n - (void)componentWrapper:(HUBComponentWrapper *)componentWrapper willUpdateSelectionState:(HUBComponentSelectionState)selectionState\n {\n+    self.selectionStateFromWillUpdateDelegateMethod = selectionState;\n }\n \n - (void)componentWrapper:(HUBComponentWrapper *)componentWrapper didUpdateSelectionState:(HUBComponentSelectionState)selectionState\n {\n+    self.selectionStateFromDidUpdateDelegateMethod = selectionState;\n }\n \n - (void)componentWrapper:(HUBComponentWrapper *)componentWrapper childSelectedAtIndex:(NSUInteger)childIndex\n {\n+    // No-op",
        "path": "tests/HUBComponentWrapperTests.m",
        "position": 125,
        "original_position": 125,
        "commit_id": "2bde99ced0e359b0f6a0b5a68373cedcebd49987",
        "original_commit_id": "785ef52cf8227846a4aa44119f9d8484e8ffc65e",
        "user": {
            "login": "krris",
            "id": 1786612,
            "node_id": "MDQ6VXNlcjE3ODY2MTI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1786612?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krris",
            "html_url": "https://github.com/krris",
            "followers_url": "https://api.github.com/users/krris/followers",
            "following_url": "https://api.github.com/users/krris/following{/other_user}",
            "gists_url": "https://api.github.com/users/krris/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krris/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krris/subscriptions",
            "organizations_url": "https://api.github.com/users/krris/orgs",
            "repos_url": "https://api.github.com/users/krris/repos",
            "events_url": "https://api.github.com/users/krris/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krris/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "What does `No-op` mean?\n",
        "created_at": "2016-10-21T11:26:59Z",
        "updated_at": "2016-10-21T11:29:22Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/92#discussion_r84463029",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/92",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84463029"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/92#discussion_r84463029"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/92"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84463524",
        "pull_request_review_id": 5241351,
        "id": 84463524,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0NDYzNTI0",
        "diff_hunk": "@@ -101,18 +169,19 @@ - (HUBComponentWrapper *)componentWrapperForComponent:(id<HUBComponent>)componen\n \n #pragma mark - HUBComponentWrapperDelegate\n \n-// Below methods are all no-ops implemented out of necessity.\n-\n - (void)componentWrapper:(HUBComponentWrapper *)componentWrapper willUpdateSelectionState:(HUBComponentSelectionState)selectionState\n {\n+    self.selectionStateFromWillUpdateDelegateMethod = selectionState;\n }\n \n - (void)componentWrapper:(HUBComponentWrapper *)componentWrapper didUpdateSelectionState:(HUBComponentSelectionState)selectionState\n {\n+    self.selectionStateFromDidUpdateDelegateMethod = selectionState;\n }\n \n - (void)componentWrapper:(HUBComponentWrapper *)componentWrapper childSelectedAtIndex:(NSUInteger)childIndex\n {\n+    // No-op",
        "path": "tests/HUBComponentWrapperTests.m",
        "position": 125,
        "original_position": 125,
        "commit_id": "2bde99ced0e359b0f6a0b5a68373cedcebd49987",
        "original_commit_id": "785ef52cf8227846a4aa44119f9d8484e8ffc65e",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\"No operation\". That this method is implemented out of neccessity to conform to a protocol, not because we need it :)\n",
        "created_at": "2016-10-21T11:31:14Z",
        "updated_at": "2016-10-21T11:31:14Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/92#discussion_r84463524",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/92",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84463524"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/92#discussion_r84463524"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/92"
            }
        },
        "in_reply_to_id": 84463029
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84463566",
        "pull_request_review_id": 5241400,
        "id": 84463566,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0NDYzNTY2",
        "diff_hunk": "@@ -63,6 +81,55 @@ - (void)testComponentStateRestoring\n     XCTAssertEqualObjects([self.UIStateManager restoreUIStateForComponentModel:model], @\"Groovy\");\n }\n \n+- (void)testHighlight\n+{\n+    HUBComponentMock * const component = [HUBComponentMock new];\n+    id<HUBComponentModel> const model = [self componentModelWithIdentifier:@\"model\"];\n+    HUBComponentWrapper * const componentWrapper = [self componentWrapperForComponent:component model:model];\n+    UIView * const superview = [[UIView alloc] initWithFrame:CGRectZero];",
        "path": "tests/HUBComponentWrapperTests.m",
        "position": 52,
        "original_position": 52,
        "commit_id": "2bde99ced0e359b0f6a0b5a68373cedcebd49987",
        "original_commit_id": "785ef52cf8227846a4aa44119f9d8484e8ffc65e",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Want to use the designated initializer :)\n",
        "created_at": "2016-10-21T11:31:37Z",
        "updated_at": "2016-10-21T11:31:37Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/92#discussion_r84463566",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/92",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84463566"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/92#discussion_r84463566"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/92"
            }
        },
        "in_reply_to_id": 84462452
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84463632",
        "pull_request_review_id": 5241467,
        "id": 84463632,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0NDYzNjMy",
        "diff_hunk": "@@ -63,6 +81,55 @@ - (void)testComponentStateRestoring\n     XCTAssertEqualObjects([self.UIStateManager restoreUIStateForComponentModel:model], @\"Groovy\");\n }\n \n+- (void)testHighlight\n+{\n+    HUBComponentMock * const component = [HUBComponentMock new];\n+    id<HUBComponentModel> const model = [self componentModelWithIdentifier:@\"model\"];\n+    HUBComponentWrapper * const componentWrapper = [self componentWrapperForComponent:component model:model];\n+    UIView * const superview = [[UIView alloc] initWithFrame:CGRectZero];\n+    [componentWrapper viewDidMoveToSuperview:superview];\n+    \n+    [self.gestureRecognizer touchesBegan:[NSSet setWithObject:[UITouch new]] withEvent:[UIEvent new]];\n+    [componentWrapper handleGestureRecognizer:self.gestureRecognizer];\n+    XCTAssertEqual(self.selectionStateFromWillUpdateDelegateMethod, HUBComponentSelectionStateHighlighted);\n+    XCTAssertEqual(self.selectionStateFromDidUpdateDelegateMethod, HUBComponentSelectionStateNone);\n+    \n+    XCTestExpectation * const expectation = [self expectationWithDescription:@\"Waiting for highlight\"];",
        "path": "tests/HUBComponentWrapperTests.m",
        "position": 60,
        "original_position": 60,
        "commit_id": "2bde99ced0e359b0f6a0b5a68373cedcebd49987",
        "original_commit_id": "785ef52cf8227846a4aa44119f9d8484e8ffc65e",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "That sounds like a great idea! \ud83d\udc4d It's a separate PR though IMO.\n",
        "created_at": "2016-10-21T11:32:09Z",
        "updated_at": "2016-10-21T11:32:09Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/92#discussion_r84463632",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/92",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84463632"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/92#discussion_r84463632"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/92"
            }
        },
        "in_reply_to_id": 84462933
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84464338",
        "pull_request_review_id": 5242130,
        "id": 84464338,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0NDY0MzM4",
        "diff_hunk": "@@ -63,6 +81,55 @@ - (void)testComponentStateRestoring\n     XCTAssertEqualObjects([self.UIStateManager restoreUIStateForComponentModel:model], @\"Groovy\");\n }\n \n+- (void)testHighlight\n+{\n+    HUBComponentMock * const component = [HUBComponentMock new];\n+    id<HUBComponentModel> const model = [self componentModelWithIdentifier:@\"model\"];\n+    HUBComponentWrapper * const componentWrapper = [self componentWrapperForComponent:component model:model];\n+    UIView * const superview = [[UIView alloc] initWithFrame:CGRectZero];\n+    [componentWrapper viewDidMoveToSuperview:superview];\n+    \n+    [self.gestureRecognizer touchesBegan:[NSSet setWithObject:[UITouch new]] withEvent:[UIEvent new]];\n+    [componentWrapper handleGestureRecognizer:self.gestureRecognizer];\n+    XCTAssertEqual(self.selectionStateFromWillUpdateDelegateMethod, HUBComponentSelectionStateHighlighted);\n+    XCTAssertEqual(self.selectionStateFromDidUpdateDelegateMethod, HUBComponentSelectionStateNone);\n+    \n+    XCTestExpectation * const expectation = [self expectationWithDescription:@\"Waiting for highlight\"];",
        "path": "tests/HUBComponentWrapperTests.m",
        "position": 60,
        "original_position": 60,
        "commit_id": "2bde99ced0e359b0f6a0b5a68373cedcebd49987",
        "original_commit_id": "785ef52cf8227846a4aa44119f9d8484e8ffc65e",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Created an issue for it: https://github.com/spotify/HubFramework/issues/93\n",
        "created_at": "2016-10-21T11:38:35Z",
        "updated_at": "2016-10-21T11:38:35Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/92#discussion_r84464338",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/92",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84464338"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/92#discussion_r84464338"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/92"
            }
        },
        "in_reply_to_id": 84462933
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84574055",
        "pull_request_review_id": 5346639,
        "id": 84574055,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0NTc0MDU1",
        "diff_hunk": "@@ -0,0 +1,93 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import \"HUBViewModelRenderer.h\"\n+#import \"HUBViewModelDiff.h\"\n+#import \"HUBCollectionViewLayout.h\"\n+\n+NS_ASSUME_NONNULL_BEGIN\n+\n+@interface HUBViewModelRenderer ()\n+\n+@property (nonatomic, strong, readonly) UICollectionView *collectionView;\n+@property (nonatomic, strong) id<HUBViewModel> lastRenderedViewModel;\n+\n+@end\n+\n+@implementation HUBViewModelRenderer\n+\n+- (instancetype)initWithCollectionView:(UICollectionView *)collectionView\n+{\n+    self = [super init];\n+    if (self) {\n+        _collectionView = collectionView;\n+    }\n+    return self;\n+}\n+\n+- (void)renderViewModel:(id<HUBViewModel>)viewModel\n+      usingBatchUpdates:(BOOL)usingBatchUpdates\n+               animated:(BOOL)animated\n+             completion:(void (^)())completionBlock\n+{\n+    HUBViewModelDiff *diff;",
        "path": "sources/HUBViewModelRenderer.m",
        "position": 51,
        "original_position": 51,
        "commit_id": "74a42113c713d6f5be4be33993c0bbc840eaced3",
        "original_commit_id": "74a42113c713d6f5be4be33993c0bbc840eaced3",
        "user": {
            "login": "tammofreese",
            "id": 15917,
            "node_id": "MDQ6VXNlcjE1OTE3",
            "avatar_url": "https://avatars3.githubusercontent.com/u/15917?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tammofreese",
            "html_url": "https://github.com/tammofreese",
            "followers_url": "https://api.github.com/users/tammofreese/followers",
            "following_url": "https://api.github.com/users/tammofreese/following{/other_user}",
            "gists_url": "https://api.github.com/users/tammofreese/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tammofreese/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tammofreese/subscriptions",
            "organizations_url": "https://api.github.com/users/tammofreese/orgs",
            "repos_url": "https://api.github.com/users/tammofreese/repos",
            "events_url": "https://api.github.com/users/tammofreese/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tammofreese/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This is not needed in ARC, as object pointers are initialized to nil.\n",
        "created_at": "2016-10-22T09:56:00Z",
        "updated_at": "2016-10-22T09:56:00Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/85#discussion_r84574055",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/85",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84574055"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/85#discussion_r84574055"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/85"
            }
        },
        "in_reply_to_id": 84256570
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84582395",
        "pull_request_review_id": 5354048,
        "id": 84582395,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0NTgyMzk1",
        "diff_hunk": "@@ -0,0 +1,93 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import \"HUBViewModelRenderer.h\"\n+#import \"HUBViewModelDiff.h\"\n+#import \"HUBCollectionViewLayout.h\"\n+\n+NS_ASSUME_NONNULL_BEGIN\n+\n+@interface HUBViewModelRenderer ()\n+\n+@property (nonatomic, strong, readonly) UICollectionView *collectionView;\n+@property (nonatomic, strong) id<HUBViewModel> lastRenderedViewModel;\n+\n+@end\n+\n+@implementation HUBViewModelRenderer\n+\n+- (instancetype)initWithCollectionView:(UICollectionView *)collectionView\n+{\n+    self = [super init];\n+    if (self) {\n+        _collectionView = collectionView;\n+    }\n+    return self;\n+}\n+\n+- (void)renderViewModel:(id<HUBViewModel>)viewModel\n+      usingBatchUpdates:(BOOL)usingBatchUpdates\n+               animated:(BOOL)animated\n+             completion:(void (^)())completionBlock\n+{\n+    HUBViewModelDiff *diff;",
        "path": "sources/HUBViewModelRenderer.m",
        "position": 51,
        "original_position": 51,
        "commit_id": "74a42113c713d6f5be4be33993c0bbc840eaced3",
        "original_commit_id": "74a42113c713d6f5be4be33993c0bbc840eaced3",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ah cool, didn't know that! Thanks @tammofreese! \ud83d\udc4d \n",
        "created_at": "2016-10-22T18:34:01Z",
        "updated_at": "2016-10-22T18:34:01Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/85#discussion_r84582395",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/85",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84582395"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/85#discussion_r84582395"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/85"
            }
        },
        "in_reply_to_id": 84256570
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84592709",
        "pull_request_review_id": 5362447,
        "id": 84592709,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0NTkyNzA5",
        "diff_hunk": "@@ -0,0 +1,93 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import \"HUBViewModelRenderer.h\"\n+#import \"HUBViewModelDiff.h\"\n+#import \"HUBCollectionViewLayout.h\"\n+\n+NS_ASSUME_NONNULL_BEGIN\n+\n+@interface HUBViewModelRenderer ()\n+\n+@property (nonatomic, strong, readonly) UICollectionView *collectionView;\n+@property (nonatomic, strong) id<HUBViewModel> lastRenderedViewModel;\n+\n+@end\n+\n+@implementation HUBViewModelRenderer\n+\n+- (instancetype)initWithCollectionView:(UICollectionView *)collectionView\n+{\n+    self = [super init];\n+    if (self) {\n+        _collectionView = collectionView;\n+    }\n+    return self;\n+}\n+\n+- (void)renderViewModel:(id<HUBViewModel>)viewModel\n+      usingBatchUpdates:(BOOL)usingBatchUpdates\n+               animated:(BOOL)animated\n+             completion:(void (^)())completionBlock\n+{\n+    HUBViewModelDiff *diff;",
        "path": "sources/HUBViewModelRenderer.m",
        "position": 51,
        "original_position": 51,
        "commit_id": "74a42113c713d6f5be4be33993c0bbc840eaced3",
        "original_commit_id": "74a42113c713d6f5be4be33993c0bbc840eaced3",
        "user": {
            "login": "tammofreese",
            "id": 15917,
            "node_id": "MDQ6VXNlcjE1OTE3",
            "avatar_url": "https://avatars3.githubusercontent.com/u/15917?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tammofreese",
            "html_url": "https://github.com/tammofreese",
            "followers_url": "https://api.github.com/users/tammofreese/followers",
            "following_url": "https://api.github.com/users/tammofreese/following{/other_user}",
            "gists_url": "https://api.github.com/users/tammofreese/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tammofreese/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tammofreese/subscriptions",
            "organizations_url": "https://api.github.com/users/tammofreese/orgs",
            "repos_url": "https://api.github.com/users/tammofreese/repos",
            "events_url": "https://api.github.com/users/tammofreese/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tammofreese/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "No worries! :)\n",
        "created_at": "2016-10-23T09:18:01Z",
        "updated_at": "2016-10-23T09:18:01Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/85#discussion_r84592709",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/85",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84592709"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/85#discussion_r84592709"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/85"
            }
        },
        "in_reply_to_id": 84256570
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84582416",
        "pull_request_review_id": 5354066,
        "id": 84582416,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0NTgyNDE2",
        "diff_hunk": "@@ -359,6 +359,15 @@ - (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldRecogni\n     return YES;\n }\n \n+- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldReceiveTouch:(UITouch *)touch\n+{\n+    if ([touch.view isKindOfClass:[UIButton class]]) {",
        "path": "sources/HUBComponentWrapper.m",
        "position": null,
        "original_position": 6,
        "commit_id": "88581995df646a75b0d4648ce748f9f2b61807b9",
        "original_commit_id": "484bf5586799963602c61b30a48e0b8db11017fa",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You can just return the negative result of this expression, turning this method into a one-liner \ud83d\ude04 \n",
        "created_at": "2016-10-22T18:34:50Z",
        "updated_at": "2016-10-23T12:58:21Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/94#discussion_r84582416",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/94",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84582416"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/94#discussion_r84582416"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/94"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84735247",
        "pull_request_review_id": 5494144,
        "id": 84735247,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0NzM1MjQ3",
        "diff_hunk": "@@ -265,6 +264,38 @@ - (void)didReceiveMemoryWarning\n     return [visibleViewIndexPaths copy];\n }\n \n+- (NSArray<HUBComponentWrapper *> *)rootComponentWrappersForComponentType:(HUBComponentType)componentType\n+{\n+    NSMutableArray<HUBComponentWrapper *> * const rootComponentWrappers = [NSMutableArray array];\n+\n+    switch (componentType) {\n+        case HUBComponentTypeHeader:\n+        {",
        "path": "sources/HUBViewControllerImplementation.m",
        "position": null,
        "original_position": 28,
        "commit_id": "8f11068df07a7311518863ec36e999057ba9d7a2",
        "original_commit_id": "a4f339a5aefd1fed85adfee647a4777fe069aa6e",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\ud83c\udfa8 `{` goes on the same line as the `case` \ud83d\ude42 \n",
        "created_at": "2016-10-24T17:11:07Z",
        "updated_at": "2016-10-24T17:18:59Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/97#discussion_r84735247",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/97",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84735247"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/97#discussion_r84735247"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/97"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84735303",
        "pull_request_review_id": 5494144,
        "id": 84735303,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0NzM1MzAz",
        "diff_hunk": "@@ -265,6 +264,38 @@ - (void)didReceiveMemoryWarning\n     return [visibleViewIndexPaths copy];\n }\n \n+- (NSArray<HUBComponentWrapper *> *)rootComponentWrappersForComponentType:(HUBComponentType)componentType",
        "path": "sources/HUBViewControllerImplementation.m",
        "position": 22,
        "original_position": 22,
        "commit_id": "8f11068df07a7311518863ec36e999057ba9d7a2",
        "original_commit_id": "a4f339a5aefd1fed85adfee647a4777fe069aa6e",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Nice abstraction! \ud83d\udc4d \n",
        "created_at": "2016-10-24T17:11:29Z",
        "updated_at": "2016-10-24T17:18:59Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/97#discussion_r84735303",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/97",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84735303"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/97#discussion_r84735303"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/97"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84735435",
        "pull_request_review_id": 5494144,
        "id": 84735435,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0NzM1NDM1",
        "diff_hunk": "@@ -1762,12 +1777,36 @@ - (void)testVisibleBodyComponents\n     UICollectionViewCell * const cellC = [collectionViewDataSource collectionView:self.collectionView cellForItemAtIndexPath:indexPathC];\n     \n     self.collectionView.mockedVisibleCells = @[cellA, cellB, cellC];\n-    \n-    NSDictionary<NSIndexPath *, UIView *> * const visibleViews = self.viewController.visibleBodyComponentViews;\n-    XCTAssertEqual(visibleViews.count, (NSUInteger)3);\n-    XCTAssertEqual(visibleViews[[NSIndexPath indexPathWithIndex:0]], componentA.view);\n-    XCTAssertEqual(visibleViews[[NSIndexPath indexPathWithIndex:1]], componentB.view);\n-    XCTAssertEqual(visibleViews[[NSIndexPath indexPathWithIndex:2]], componentC.view);\n+\n+    NSDictionary<NSIndexPath *, UIView *> * const visibleHeaderViews = [self.viewController visibleComponentViewsForComponentType:HUBComponentTypeHeader];\n+    XCTAssertEqual(visibleHeaderViews.count, (NSUInteger)1);\n+    XCTAssertEqual(visibleHeaderViews[[NSIndexPath indexPathWithIndex:0]], headerComponent.view);\n+\n+    NSDictionary<NSIndexPath *, UIView *> * const visibleBodyViews = [self.viewController visibleComponentViewsForComponentType:HUBComponentTypeBody];\n+    XCTAssertEqual(visibleBodyViews.count, (NSUInteger)3);\n+    XCTAssertEqual(visibleBodyViews[[NSIndexPath indexPathWithIndex:0]], componentA.view);\n+    XCTAssertEqual(visibleBodyViews[[NSIndexPath indexPathWithIndex:1]], componentB.view);\n+    XCTAssertEqual(visibleBodyViews[[NSIndexPath indexPathWithIndex:2]], componentC.view);\n+\n+    NSDictionary<NSIndexPath *, UIView *> * const visibleOverlayViews = [self.viewController visibleComponentViewsForComponentType:HUBComponentTypeOverlay];\n+    XCTAssertEqual(visibleOverlayViews.count, (NSUInteger)2);\n+    XCTAssertEqual(visibleOverlayViews[[NSIndexPath indexPathWithIndex:0]], component1.view);\n+    XCTAssertEqual(visibleOverlayViews[[NSIndexPath indexPathWithIndex:1]], component2.view);\n+}\n+\n+- (void)testNoVisibleComponents\n+{\n+    [self simulateViewControllerLayoutCycle];\n+\n+    self.collectionView.mockedVisibleCells = @[];\n+\n+    NSDictionary<NSIndexPath *, UIView *> * const visibleHeaderViews = [self.viewController visibleComponentViewsForComponentType:HUBComponentTypeHeader];\n+    NSDictionary<NSIndexPath *, UIView *> * const visibleBodyViews = [self.viewController visibleComponentViewsForComponentType:HUBComponentTypeBody];\n+    NSDictionary<NSIndexPath *, UIView *> * const visibleOverlayViews = [self.viewController visibleComponentViewsForComponentType:HUBComponentTypeOverlay];\n+\n+    XCTAssertEqual(visibleHeaderViews.count, 0u);",
        "path": "tests/HUBViewControllerTests.m",
        "position": 78,
        "original_position": 78,
        "commit_id": "8f11068df07a7311518863ec36e999057ba9d7a2",
        "original_commit_id": "a4f339a5aefd1fed85adfee647a4777fe069aa6e",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Oooooh! I didn't know you could do `0u`! That's great - then we can get rid of a lot of casting in the tests! \ud83d\udc4d \n",
        "created_at": "2016-10-24T17:12:16Z",
        "updated_at": "2016-10-24T17:18:59Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/97#discussion_r84735435",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/97",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84735435"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/97#discussion_r84735435"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/97"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84736139",
        "pull_request_review_id": 5494962,
        "id": 84736139,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0NzM2MTM5",
        "diff_hunk": "@@ -265,6 +264,38 @@ - (void)didReceiveMemoryWarning\n     return [visibleViewIndexPaths copy];\n }\n \n+- (NSArray<HUBComponentWrapper *> *)rootComponentWrappersForComponentType:(HUBComponentType)componentType\n+{\n+    NSMutableArray<HUBComponentWrapper *> * const rootComponentWrappers = [NSMutableArray array];\n+\n+    switch (componentType) {\n+        case HUBComponentTypeHeader:\n+        {",
        "path": "sources/HUBViewControllerImplementation.m",
        "position": null,
        "original_position": 28,
        "commit_id": "8f11068df07a7311518863ec36e999057ba9d7a2",
        "original_commit_id": "a4f339a5aefd1fed85adfee647a4777fe069aa6e",
        "user": {
            "login": "cerihughes",
            "id": 12008876,
            "node_id": "MDQ6VXNlcjEyMDA4ODc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12008876?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cerihughes",
            "html_url": "https://github.com/cerihughes",
            "followers_url": "https://api.github.com/users/cerihughes/followers",
            "following_url": "https://api.github.com/users/cerihughes/following{/other_user}",
            "gists_url": "https://api.github.com/users/cerihughes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cerihughes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cerihughes/subscriptions",
            "organizations_url": "https://api.github.com/users/cerihughes/orgs",
            "repos_url": "https://api.github.com/users/cerihughes/repos",
            "events_url": "https://api.github.com/users/cerihughes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cerihughes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Fixing...\n",
        "created_at": "2016-10-24T17:15:45Z",
        "updated_at": "2016-10-24T17:18:59Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/97#discussion_r84736139",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/97",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84736139"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/97#discussion_r84736139"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/97"
            }
        },
        "in_reply_to_id": 84735247
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84853881",
        "pull_request_review_id": 5603754,
        "id": 84853881,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0ODUzODgx",
        "diff_hunk": "@@ -0,0 +1,41 @@\n+#import <Foundation/Foundation.h>\n+\n+@class HUBIdentifier;\n+\n+NS_ASSUME_NONNULL_BEGIN\n+\n+/**\n+ *  Protocol defining the public API of an object that performs Hub Framework actions\n+ *\n+ *  You use this API to manually perform actions from either a component (conforming to\n+ *  `HUBComponentActionPerformer`) or content operation (conforming to\n+ *  `HUBContentOperationActionPerformer`).\n+ *\n+ *  Actions are used to define custom behavior and/or to communicate between the parts\n+ *  that make up a Hub Framework-powered view.\n+ *\n+ *  You don't conform to this protocol yourself. Instead, the Hub Framework will assign\n+ *  an object conforming to this protocol to the `actionPerformer` property of either a\n+ *  component or content operation.\n+ */\n+@protocol HUBActionPerformer <NSObject>",
        "path": "include/HubFramework/HUBActionPerformer.h",
        "position": 42,
        "original_position": 21,
        "commit_id": "9fb805a9bbb364cc34abc02d9d930d679b7387fe",
        "original_commit_id": "59d00155eec773b5e955d65c84fb10748c04cd1d",
        "user": {
            "login": "krris",
            "id": 1786612,
            "node_id": "MDQ6VXNlcjE3ODY2MTI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1786612?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krris",
            "html_url": "https://github.com/krris",
            "followers_url": "https://api.github.com/users/krris/followers",
            "following_url": "https://api.github.com/users/krris/following{/other_user}",
            "gists_url": "https://api.github.com/users/krris/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krris/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krris/subscriptions",
            "organizations_url": "https://api.github.com/users/krris/orgs",
            "repos_url": "https://api.github.com/users/krris/repos",
            "events_url": "https://api.github.com/users/krris/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krris/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I like this new name \ud83d\udc4d \n",
        "created_at": "2016-10-25T08:35:56Z",
        "updated_at": "2016-10-25T11:30:27Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/98#discussion_r84853881",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/98",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84853881"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/98#discussion_r84853881"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/98"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84878592",
        "pull_request_review_id": 5603754,
        "id": 84878592,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0ODc4NTky",
        "diff_hunk": "@@ -140,8 +141,9 @@ - (instancetype)initWithViewURI:(NSURL *)viewURI\n     _childComponentReusePool = [[HUBComponentReusePool alloc] initWithComponentRegistry:_componentRegistry\n                                                                          UIStateManager:_componentUIStateManager];\n     \n-    _viewModelLoader.delegate = self;\n-    _imageLoader.delegate = self;\n+    viewModelLoader.delegate = self;",
        "path": "sources/HUBViewControllerImplementation.m",
        "position": 56,
        "original_position": 41,
        "commit_id": "9fb805a9bbb364cc34abc02d9d930d679b7387fe",
        "original_commit_id": "0f314a56819c4a92e603b2030c27adf4c00c7210",
        "user": {
            "login": "krris",
            "id": 1786612,
            "node_id": "MDQ6VXNlcjE3ODY2MTI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1786612?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krris",
            "html_url": "https://github.com/krris",
            "followers_url": "https://api.github.com/users/krris/followers",
            "following_url": "https://api.github.com/users/krris/following{/other_user}",
            "gists_url": "https://api.github.com/users/krris/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krris/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krris/subscriptions",
            "organizations_url": "https://api.github.com/users/krris/orgs",
            "repos_url": "https://api.github.com/users/krris/repos",
            "events_url": "https://api.github.com/users/krris/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krris/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Shouldn't it be `_viewModelLoader` instead `viewModelLoader`? Same question about 145 and 146 lines.\n",
        "created_at": "2016-10-25T11:08:29Z",
        "updated_at": "2016-10-25T11:30:27Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/98#discussion_r84878592",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/98",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84878592"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/98#discussion_r84878592"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/98"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84881231",
        "pull_request_review_id": 5603754,
        "id": 84881231,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0ODgxMjMx",
        "diff_hunk": "@@ -0,0 +1,37 @@\n+import Foundation\n+import HubFramework\n+\n+/// Action custom data keys used by `TodoListAddAction`\n+struct TodoListAddActionCustomDataKeys {\n+    /// The title of the item to add to a todo list\n+    static var itemTitle: String { return \"item\" }\n+}\n+\n+/// Action that presents an alert to add a todo list item\n+class TodoListAddAction: NSObject, HUBAsyncAction {\n+    weak var delegate: HUBAsyncActionDelegate?\n+    \n+    func perform(with context: HUBActionContext) -> Bool {\n+        let alertController = UIAlertController(title: \"Add an item\", message: nil, preferredStyle: .alert)\n+        alertController.addTextField(configurationHandler: nil)\n+        \n+        let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel) { _ in\n+            alertController.dismiss(animated: true, completion: nil)\n+            self.delegate?.actionDidFinish(self, chainToActionWithIdentifier: nil, customData: nil)\n+        }\n+        \n+        let doneAction = UIAlertAction(title: \"Add\", style: .default) { _ in\n+            let nextActionIdentifier = HUBIdentifier(namespace: TodoListActionFactory.namespace, name: TodoListActionNames.addCompleted)\n+            let nextActionCustomData = [TodoListAddActionCustomDataKeys.itemTitle: alertController.textFields!.first!.text]\n+            self.delegate?.actionDidFinish(self, chainToActionWithIdentifier: nextActionIdentifier, customData: nextActionCustomData)",
        "path": "demo/sources/TodoListAddAction.swift",
        "position": 47,
        "original_position": 26,
        "commit_id": "9fb805a9bbb364cc34abc02d9d930d679b7387fe",
        "original_commit_id": "c794f1834bd88f090c57dc5bd5909b0187d7a274",
        "user": {
            "login": "krris",
            "id": 1786612,
            "node_id": "MDQ6VXNlcjE3ODY2MTI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1786612?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krris",
            "html_url": "https://github.com/krris",
            "followers_url": "https://api.github.com/users/krris/followers",
            "following_url": "https://api.github.com/users/krris/following{/other_user}",
            "gists_url": "https://api.github.com/users/krris/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krris/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krris/subscriptions",
            "organizations_url": "https://api.github.com/users/krris/orgs",
            "repos_url": "https://api.github.com/users/krris/repos",
            "events_url": "https://api.github.com/users/krris/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krris/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "What do you think about naming it `actionIdentifier` instead of `chainToActionWithIdentifier`?\n",
        "created_at": "2016-10-25T11:26:13Z",
        "updated_at": "2016-10-25T11:30:27Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/98#discussion_r84881231",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/98",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84881231"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/98#discussion_r84881231"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/98"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84882795",
        "pull_request_review_id": 5631082,
        "id": 84882795,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0ODgyNzk1",
        "diff_hunk": "@@ -140,8 +141,9 @@ - (instancetype)initWithViewURI:(NSURL *)viewURI\n     _childComponentReusePool = [[HUBComponentReusePool alloc] initWithComponentRegistry:_componentRegistry\n                                                                          UIStateManager:_componentUIStateManager];\n     \n-    _viewModelLoader.delegate = self;\n-    _imageLoader.delegate = self;\n+    viewModelLoader.delegate = self;",
        "path": "sources/HUBViewControllerImplementation.m",
        "position": 56,
        "original_position": 41,
        "commit_id": "9fb805a9bbb364cc34abc02d9d930d679b7387fe",
        "original_commit_id": "0f314a56819c4a92e603b2030c27adf4c00c7210",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It doesn't really matter, since they refer to the same object :)\n",
        "created_at": "2016-10-25T11:37:48Z",
        "updated_at": "2016-10-25T11:37:48Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/98#discussion_r84882795",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/98",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84882795"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/98#discussion_r84882795"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/98"
            }
        },
        "in_reply_to_id": 84878592
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84882858",
        "pull_request_review_id": 5631143,
        "id": 84882858,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0ODgyODU4",
        "diff_hunk": "@@ -0,0 +1,37 @@\n+import Foundation\n+import HubFramework\n+\n+/// Action custom data keys used by `TodoListAddAction`\n+struct TodoListAddActionCustomDataKeys {\n+    /// The title of the item to add to a todo list\n+    static var itemTitle: String { return \"item\" }\n+}\n+\n+/// Action that presents an alert to add a todo list item\n+class TodoListAddAction: NSObject, HUBAsyncAction {\n+    weak var delegate: HUBAsyncActionDelegate?\n+    \n+    func perform(with context: HUBActionContext) -> Bool {\n+        let alertController = UIAlertController(title: \"Add an item\", message: nil, preferredStyle: .alert)\n+        alertController.addTextField(configurationHandler: nil)\n+        \n+        let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel) { _ in\n+            alertController.dismiss(animated: true, completion: nil)\n+            self.delegate?.actionDidFinish(self, chainToActionWithIdentifier: nil, customData: nil)\n+        }\n+        \n+        let doneAction = UIAlertAction(title: \"Add\", style: .default) { _ in\n+            let nextActionIdentifier = HUBIdentifier(namespace: TodoListActionFactory.namespace, name: TodoListActionNames.addCompleted)\n+            let nextActionCustomData = [TodoListAddActionCustomDataKeys.itemTitle: alertController.textFields!.first!.text]\n+            self.delegate?.actionDidFinish(self, chainToActionWithIdentifier: nextActionIdentifier, customData: nextActionCustomData)",
        "path": "demo/sources/TodoListAddAction.swift",
        "position": 47,
        "original_position": 26,
        "commit_id": "9fb805a9bbb364cc34abc02d9d930d679b7387fe",
        "original_commit_id": "c794f1834bd88f090c57dc5bd5909b0187d7a274",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Because otherwise it's unclear that you are performing chaining.\n",
        "created_at": "2016-10-25T11:38:11Z",
        "updated_at": "2016-10-25T11:38:11Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/98#discussion_r84882858",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/98",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84882858"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/98#discussion_r84882858"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/98"
            }
        },
        "in_reply_to_id": 84881231
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84926002",
        "pull_request_review_id": 5672437,
        "id": 84926002,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0OTI2MDAy",
        "diff_hunk": "@@ -761,67 +757,30 @@ - (void)createCollectionViewIfNeeded\n \n - (void)reloadCollectionViewWithViewModel:(id<HUBViewModel>)viewModel animated:(BOOL)animated\n {\n-    if (!self.viewModelHasChangedSinceLastLayoutUpdate) {\n-        if (CGRectEqualToRect(self.collectionView.frame, self.view.bounds)) {\n-            return;\n-        }\n-    }\n-    \n-    self.collectionView.frame = self.view.bounds;\n-    \n-    [self saveStatesForVisibleComponents];\n-    \n     if (![self.collectionView.collectionViewLayout isKindOfClass:[HUBCollectionViewLayout class]]) {\n         self.collectionView.collectionViewLayout = [[HUBCollectionViewLayout alloc] initWithComponentRegistry:self.componentRegistry\n                                                                                        componentLayoutManager:self.componentLayoutManager];\n     }\n-    \n-    HUBCollectionViewLayout * const layout = (HUBCollectionViewLayout *)self.collectionView.collectionViewLayout;\n-    \n-    /* Performing batch updates inbetween viewDidLoad and viewDidAppear is seemingly not allowed, as it\n-     causes an assertion inside a private UICollectionView method. If no diff exists, fall back to\n-     a complete reload. */\n-    if (!self.viewHasAppeared || self.lastViewModelDiff == nil) {\n-        [self.collectionView reloadData];\n-        \n-        [layout computeForCollectionViewSize:self.collectionView.frame.size viewModel:viewModel diff:self.lastViewModelDiff];\n \n-        if (self.viewHasAppeared) {\n-            /* Forcing a re-layout as the reloadData-call doesn't trigger the numberOfItemsInSection:-calls\n-             by itself, and batch update calls don't play well without having an initial item count. */\n-            [self.collectionView setNeedsLayout];\n-            [self.collectionView layoutIfNeeded];\n-        }\n-        \n-        self.lastViewModelDiff = nil;\n-    } else {\n-        void (^updateBlock)() = ^{\n-            [self.collectionView performBatchUpdates:^{\n-                HUBViewModelDiff * const lastDiff = self.lastViewModelDiff;\n-                \n-                [self.collectionView insertItemsAtIndexPaths:lastDiff.insertedBodyComponentIndexPaths];\n-                [self.collectionView deleteItemsAtIndexPaths:lastDiff.deletedBodyComponentIndexPaths];\n-                [self.collectionView reloadItemsAtIndexPaths:lastDiff.reloadedBodyComponentIndexPaths];\n-                \n-                [layout computeForCollectionViewSize:self.collectionView.frame.size viewModel:viewModel diff:self.lastViewModelDiff];\n-            } completion:^(BOOL finished) {\n-                self.lastViewModelDiff = nil;\n-            }];\n-        };\n-        \n-        if (animated) {\n-            updateBlock();\n-        } else {\n-            [UIView performWithoutAnimation:updateBlock];\n-        }\n+    if (self.viewModelRenderer == nil) {\n+        UICollectionView * const nonnullCollectionView = self.collectionView;\n+        self.viewModelRenderer = [[HUBViewModelRenderer alloc] initWithCollectionView:nonnullCollectionView];\n     }\n+\n+    [self saveStatesForVisibleComponents];\n+\n+    [self.viewModelRenderer renderViewModel:viewModel\n+                          usingBatchUpdates:self.viewHasAppeared\n+                                   animated:animated\n+                                 completion:^{\n+        [self.delegate viewControllerDidFinishRendering:self];",
        "path": "sources/HUBViewControllerImplementation.m",
        "position": 134,
        "original_position": 134,
        "commit_id": "ed81a31409b312827498a3a7ac057847699cf178",
        "original_commit_id": "fc53a9a6fe9f18af68e546ac62fa36cfe3ae34d9",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This is so nice and clean :)\n",
        "created_at": "2016-10-25T15:12:23Z",
        "updated_at": "2016-10-25T15:23:45Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/89#discussion_r84926002",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/89",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84926002"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/89#discussion_r84926002"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/89"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84926185",
        "pull_request_review_id": 5672437,
        "id": 84926185,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0OTI2MTg1",
        "diff_hunk": "@@ -0,0 +1,55 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import <UIKit/UIKit.h>\n+#import \"HUBViewModel.h\"\n+#import \"HUBHeaderMacros.h\"\n+\n+NS_ASSUME_NONNULL_BEGIN\n+\n+/**\n+ * A class used to render view models in a collection view.\n+ */\n+@interface HUBViewModelRenderer : NSObject\n+\n+/**\n+ * Initializes a @c HUBViewModelRenderer with a provided collection view.\n+ *\n+ * @param collectionView The collection view to use for rendering.\n+ */\n+- (instancetype)initWithCollectionView:(UICollectionView *)collectionView HUB_DESIGNATED_INITIALIZER;\n+\n+/** \n+ * Renders the provided view model in the collection view.\n+ * \n+ * @param viewModel The view model to render.\n+ * @param usingBatchUpdates @c YES if the renderer should render using batch updates, @c NO otherwise.",
        "path": "sources/HUBViewModelRenderer.h",
        "position": null,
        "original_position": 44,
        "commit_id": "ed81a31409b312827498a3a7ac057847699cf178",
        "original_commit_id": "fc53a9a6fe9f18af68e546ac62fa36cfe3ae34d9",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You can simplify this by just saying `Whether the renderer should use batch updates`\n",
        "created_at": "2016-10-25T15:12:57Z",
        "updated_at": "2016-10-25T15:23:45Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/89#discussion_r84926185",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/89",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84926185"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/89#discussion_r84926185"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/89"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84926237",
        "pull_request_review_id": 5672437,
        "id": 84926237,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0OTI2MjM3",
        "diff_hunk": "@@ -0,0 +1,55 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import <UIKit/UIKit.h>\n+#import \"HUBViewModel.h\"\n+#import \"HUBHeaderMacros.h\"\n+\n+NS_ASSUME_NONNULL_BEGIN\n+\n+/**\n+ * A class used to render view models in a collection view.\n+ */\n+@interface HUBViewModelRenderer : NSObject\n+\n+/**\n+ * Initializes a @c HUBViewModelRenderer with a provided collection view.\n+ *\n+ * @param collectionView The collection view to use for rendering.\n+ */\n+- (instancetype)initWithCollectionView:(UICollectionView *)collectionView HUB_DESIGNATED_INITIALIZER;\n+\n+/** \n+ * Renders the provided view model in the collection view.\n+ * \n+ * @param viewModel The view model to render.\n+ * @param usingBatchUpdates @c YES if the renderer should render using batch updates, @c NO otherwise.\n+ * @param animated @c YES if the renderer should render with animations, @c NO otherwise.",
        "path": "sources/HUBViewModelRenderer.h",
        "position": null,
        "original_position": 45,
        "commit_id": "ed81a31409b312827498a3a7ac057847699cf178",
        "original_commit_id": "fc53a9a6fe9f18af68e546ac62fa36cfe3ae34d9",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "`Whether the renderer should use animations`?\n",
        "created_at": "2016-10-25T15:13:09Z",
        "updated_at": "2016-10-25T15:23:45Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/89#discussion_r84926237",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/89",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84926237"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/89#discussion_r84926237"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/89"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84926301",
        "pull_request_review_id": 5672437,
        "id": 84926301,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0OTI2MzAx",
        "diff_hunk": "@@ -0,0 +1,101 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import \"HUBViewModelRenderer.h\"\n+#import \"HUBViewModelDiff.h\"\n+#import \"HUBCollectionViewLayout.h\"\n+\n+NS_ASSUME_NONNULL_BEGIN\n+\n+@interface HUBViewModelRenderer ()\n+\n+@property (nonatomic, strong, readonly) UICollectionView *collectionView;\n+@property (nonatomic, strong) id<HUBViewModel> lastRenderedViewModel;",
        "path": "sources/HUBViewModelRenderer.m",
        "position": null,
        "original_position": 31,
        "commit_id": "ed81a31409b312827498a3a7ac057847699cf178",
        "original_commit_id": "fc53a9a6fe9f18af68e546ac62fa36cfe3ae34d9",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "`nullable`?\n",
        "created_at": "2016-10-25T15:13:22Z",
        "updated_at": "2016-10-25T15:23:45Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/89#discussion_r84926301",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/89",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84926301"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/89#discussion_r84926301"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/89"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84928530",
        "pull_request_review_id": 5674817,
        "id": 84928530,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0OTI4NTMw",
        "diff_hunk": "@@ -0,0 +1,55 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import <UIKit/UIKit.h>\n+#import \"HUBViewModel.h\"\n+#import \"HUBHeaderMacros.h\"\n+\n+NS_ASSUME_NONNULL_BEGIN\n+\n+/**\n+ * A class used to render view models in a collection view.\n+ */\n+@interface HUBViewModelRenderer : NSObject\n+\n+/**\n+ * Initializes a @c HUBViewModelRenderer with a provided collection view.\n+ *\n+ * @param collectionView The collection view to use for rendering.\n+ */\n+- (instancetype)initWithCollectionView:(UICollectionView *)collectionView HUB_DESIGNATED_INITIALIZER;\n+\n+/** \n+ * Renders the provided view model in the collection view.\n+ * \n+ * @param viewModel The view model to render.\n+ * @param usingBatchUpdates @c YES if the renderer should render using batch updates, @c NO otherwise.",
        "path": "sources/HUBViewModelRenderer.h",
        "position": null,
        "original_position": 44,
        "commit_id": "ed81a31409b312827498a3a7ac057847699cf178",
        "original_commit_id": "fc53a9a6fe9f18af68e546ac62fa36cfe3ae34d9",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ugh, yeah, writing javascript gives you the annoying habit of over-clarifying boolean parameters \ud83d\ude05\n",
        "created_at": "2016-10-25T15:20:59Z",
        "updated_at": "2016-10-25T15:23:45Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/89#discussion_r84928530",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/89",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84928530"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/89#discussion_r84928530"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/89"
            }
        },
        "in_reply_to_id": 84926185
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84933387",
        "pull_request_review_id": 5679404,
        "id": 84933387,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0OTMzMzg3",
        "diff_hunk": "@@ -0,0 +1,170 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+import Foundation\n+import HubFramework\n+\n+/**\n+ *  A component that renders an array of child components as a horizontally scrollable carousel\n+ *\n+ *  The carousel uses the `children` property of a `HUBComponentModel` to determine what items\n+ *  it should contain. It makes the assumption that the children are all rendered using the same\n+ *  component, to simplify its layout calculations.\n+ */\n+class CarouselComponent: NSObject, HUBComponentWithChildren, HUBComponentWithRestorableUIState, HUBComponentViewObserver, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {\n+    var view: UIView?\n+    var childDelegate: HUBComponentChildDelegate?\n+    \n+    private lazy var collectionView = UICollectionView(frame: .zero, collectionViewLayout: CarouselComponent.makeCollectionViewLayout())\n+    private var model: HUBComponentModel?\n+    private var itemSize: CGSize?\n+    private var cellReuseIdentifier: String { return \"cell\" }\n+    \n+    // MARK: - HUBComponent\n+\n+    var layoutTraits: Set<HUBComponentLayoutTrait> {\n+        return [.fullWidth]\n+    }\n+\n+    func loadView() {\n+        collectionView.register(HUBComponentCollectionViewCell.self, forCellWithReuseIdentifier: cellReuseIdentifier)\n+        collectionView.dataSource = self\n+        collectionView.delegate = self\n+        collectionView.backgroundColor = .white\n+        collectionView.showsHorizontalScrollIndicator = false\n+        collectionView.showsVerticalScrollIndicator = false\n+        \n+        view = collectionView\n+    }\n+\n+    func preferredViewSize(forDisplaying model: HUBComponentModel, containerViewSize: CGSize) -> CGSize {\n+        let itemSize = calculateItemSize(forModel: model, containerViewSize: containerViewSize)\n+        return CGSize(width: containerViewSize.width, height: itemSize.height)\n+    }\n+\n+    func prepareViewForReuse() {\n+        itemSize = nil\n+    }\n+\n+    func configureView(with model: HUBComponentModel, containerViewSize: CGSize) {\n+        self.model = model\n+        itemSize = calculateItemSize(forModel: model, containerViewSize: containerViewSize)\n+        collectionView.reloadData()\n+    }\n+    \n+    // MARK: - HUBComponentWithRestorableUIState\n+    \n+    func currentUIState() -> Any? {\n+        return collectionView.contentOffset\n+    }\n+    \n+    func restoreUIState(_ state: Any) {\n+        guard let contentOffset = state as? CGPoint else {\n+            return\n+        }\n+        \n+        collectionView.contentOffset = contentOffset\n+    }\n+    \n+    // MARK: - HUBComponentViewObserver\n+    \n+    func viewWillAppear() {\n+        // No-op\n+    }\n+    \n+    func viewDidResize() {\n+        itemSize = nil\n+        collectionView.collectionViewLayout.invalidateLayout()\n+    }\n+    \n+    // MARK: - UICollectionViewDataSource\n+    \n+    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n+        return model?.children?.count ?? 0\n+    }\n+    \n+    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n+        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: cellReuseIdentifier, for: indexPath) as! HUBComponentCollectionViewCell\n+        \n+        if let childModel = model?.child(at: UInt(indexPath.item)) {\n+            cell.component = childDelegate?.component(self, childComponentFor: childModel)\n+        } else {\n+            cell.component = nil\n+        }\n+        \n+        return cell\n+    }\n+    \n+    // MARK: - UICollectionViewDelegateFlowLayout\n+    \n+    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, insetForSectionAt section: Int) -> UIEdgeInsets {\n+        let horizontalMargin = ComponentLayoutManager.margin\n+        return UIEdgeInsets(top: 0, left: horizontalMargin, bottom: 0, right: horizontalMargin)\n+    }\n+    \n+    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {\n+        if let existingItemSize = itemSize {\n+            return existingItemSize\n+        }\n+        \n+        guard let model = self.model else {\n+            return .zero",
        "path": "demo/sources/CarouselComponent.swift",
        "position": 129,
        "original_position": 129,
        "commit_id": "87d592c0f28f335fb734a8ddc0e68d2b2256afdf",
        "original_commit_id": "3142f26affeb023b938d7fffc14c8a1a55a6befe",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Swift's elegance still catches me off-guard \ud83d\ude32 \n",
        "created_at": "2016-10-25T15:40:29Z",
        "updated_at": "2016-10-25T19:10:47Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/101#discussion_r84933387",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/101",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84933387"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/101#discussion_r84933387"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/101"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84935089",
        "pull_request_review_id": 5679404,
        "id": 84935089,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0OTM1MDg5",
        "diff_hunk": "@@ -0,0 +1,170 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+import Foundation\n+import HubFramework\n+\n+/**\n+ *  A component that renders an array of child components as a horizontally scrollable carousel\n+ *\n+ *  The carousel uses the `children` property of a `HUBComponentModel` to determine what items\n+ *  it should contain. It makes the assumption that the children are all rendered using the same\n+ *  component, to simplify its layout calculations.\n+ */\n+class CarouselComponent: NSObject, HUBComponentWithChildren, HUBComponentWithRestorableUIState, HUBComponentViewObserver, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {\n+    var view: UIView?\n+    var childDelegate: HUBComponentChildDelegate?\n+    \n+    private lazy var collectionView = UICollectionView(frame: .zero, collectionViewLayout: CarouselComponent.makeCollectionViewLayout())\n+    private var model: HUBComponentModel?\n+    private var itemSize: CGSize?\n+    private var cellReuseIdentifier: String { return \"cell\" }\n+    \n+    // MARK: - HUBComponent\n+\n+    var layoutTraits: Set<HUBComponentLayoutTrait> {\n+        return [.fullWidth]\n+    }\n+\n+    func loadView() {\n+        collectionView.register(HUBComponentCollectionViewCell.self, forCellWithReuseIdentifier: cellReuseIdentifier)\n+        collectionView.dataSource = self\n+        collectionView.delegate = self\n+        collectionView.backgroundColor = .white\n+        collectionView.showsHorizontalScrollIndicator = false\n+        collectionView.showsVerticalScrollIndicator = false\n+        \n+        view = collectionView\n+    }\n+\n+    func preferredViewSize(forDisplaying model: HUBComponentModel, containerViewSize: CGSize) -> CGSize {\n+        let itemSize = calculateItemSize(forModel: model, containerViewSize: containerViewSize)\n+        return CGSize(width: containerViewSize.width, height: itemSize.height)\n+    }\n+\n+    func prepareViewForReuse() {\n+        itemSize = nil\n+    }\n+\n+    func configureView(with model: HUBComponentModel, containerViewSize: CGSize) {\n+        self.model = model\n+        itemSize = calculateItemSize(forModel: model, containerViewSize: containerViewSize)\n+        collectionView.reloadData()\n+    }\n+    \n+    // MARK: - HUBComponentWithRestorableUIState\n+    \n+    func currentUIState() -> Any? {\n+        return collectionView.contentOffset",
        "path": "demo/sources/CarouselComponent.swift",
        "position": 76,
        "original_position": 76,
        "commit_id": "87d592c0f28f335fb734a8ddc0e68d2b2256afdf",
        "original_commit_id": "3142f26affeb023b938d7fffc14c8a1a55a6befe",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'm a bit rusty on the swift/obj-c interop \u2013 in obj-c structs these structs would need to be boxed (as the method takes an `id`). Will this work?\n",
        "created_at": "2016-10-25T15:47:46Z",
        "updated_at": "2016-10-25T19:10:47Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/101#discussion_r84935089",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/101",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84935089"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/101#discussion_r84935089"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/101"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84935998",
        "pull_request_review_id": 5681913,
        "id": 84935998,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0OTM1OTk4",
        "diff_hunk": "@@ -0,0 +1,170 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+import Foundation\n+import HubFramework\n+\n+/**\n+ *  A component that renders an array of child components as a horizontally scrollable carousel\n+ *\n+ *  The carousel uses the `children` property of a `HUBComponentModel` to determine what items\n+ *  it should contain. It makes the assumption that the children are all rendered using the same\n+ *  component, to simplify its layout calculations.\n+ */\n+class CarouselComponent: NSObject, HUBComponentWithChildren, HUBComponentWithRestorableUIState, HUBComponentViewObserver, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {\n+    var view: UIView?\n+    var childDelegate: HUBComponentChildDelegate?\n+    \n+    private lazy var collectionView = UICollectionView(frame: .zero, collectionViewLayout: CarouselComponent.makeCollectionViewLayout())\n+    private var model: HUBComponentModel?\n+    private var itemSize: CGSize?\n+    private var cellReuseIdentifier: String { return \"cell\" }\n+    \n+    // MARK: - HUBComponent\n+\n+    var layoutTraits: Set<HUBComponentLayoutTrait> {\n+        return [.fullWidth]\n+    }\n+\n+    func loadView() {\n+        collectionView.register(HUBComponentCollectionViewCell.self, forCellWithReuseIdentifier: cellReuseIdentifier)\n+        collectionView.dataSource = self\n+        collectionView.delegate = self\n+        collectionView.backgroundColor = .white\n+        collectionView.showsHorizontalScrollIndicator = false\n+        collectionView.showsVerticalScrollIndicator = false\n+        \n+        view = collectionView\n+    }\n+\n+    func preferredViewSize(forDisplaying model: HUBComponentModel, containerViewSize: CGSize) -> CGSize {\n+        let itemSize = calculateItemSize(forModel: model, containerViewSize: containerViewSize)\n+        return CGSize(width: containerViewSize.width, height: itemSize.height)\n+    }\n+\n+    func prepareViewForReuse() {\n+        itemSize = nil\n+    }\n+\n+    func configureView(with model: HUBComponentModel, containerViewSize: CGSize) {\n+        self.model = model\n+        itemSize = calculateItemSize(forModel: model, containerViewSize: containerViewSize)\n+        collectionView.reloadData()\n+    }\n+    \n+    // MARK: - HUBComponentWithRestorableUIState\n+    \n+    func currentUIState() -> Any? {\n+        return collectionView.contentOffset",
        "path": "demo/sources/CarouselComponent.swift",
        "position": 76,
        "original_position": 76,
        "commit_id": "87d592c0f28f335fb734a8ddc0e68d2b2256afdf",
        "original_commit_id": "3142f26affeb023b938d7fffc14c8a1a55a6befe",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Auto boxing FTW! \ud83d\ude0d \n",
        "created_at": "2016-10-25T15:51:33Z",
        "updated_at": "2016-10-25T19:10:47Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/101#discussion_r84935998",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/101",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84935998"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/101#discussion_r84935998"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/101"
            }
        },
        "in_reply_to_id": 84935089
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84937625",
        "pull_request_review_id": 5683434,
        "id": 84937625,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0OTM3NjI1",
        "diff_hunk": "@@ -0,0 +1,170 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+import Foundation\n+import HubFramework\n+\n+/**\n+ *  A component that renders an array of child components as a horizontally scrollable carousel\n+ *\n+ *  The carousel uses the `children` property of a `HUBComponentModel` to determine what items\n+ *  it should contain. It makes the assumption that the children are all rendered using the same\n+ *  component, to simplify its layout calculations.\n+ */\n+class CarouselComponent: NSObject, HUBComponentWithChildren, HUBComponentWithRestorableUIState, HUBComponentViewObserver, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {\n+    var view: UIView?\n+    var childDelegate: HUBComponentChildDelegate?\n+    \n+    private lazy var collectionView = UICollectionView(frame: .zero, collectionViewLayout: CarouselComponent.makeCollectionViewLayout())\n+    private var model: HUBComponentModel?\n+    private var itemSize: CGSize?\n+    private var cellReuseIdentifier: String { return \"cell\" }\n+    \n+    // MARK: - HUBComponent\n+\n+    var layoutTraits: Set<HUBComponentLayoutTrait> {\n+        return [.fullWidth]\n+    }\n+\n+    func loadView() {\n+        collectionView.register(HUBComponentCollectionViewCell.self, forCellWithReuseIdentifier: cellReuseIdentifier)\n+        collectionView.dataSource = self\n+        collectionView.delegate = self\n+        collectionView.backgroundColor = .white\n+        collectionView.showsHorizontalScrollIndicator = false\n+        collectionView.showsVerticalScrollIndicator = false\n+        \n+        view = collectionView\n+    }\n+\n+    func preferredViewSize(forDisplaying model: HUBComponentModel, containerViewSize: CGSize) -> CGSize {\n+        let itemSize = calculateItemSize(forModel: model, containerViewSize: containerViewSize)\n+        return CGSize(width: containerViewSize.width, height: itemSize.height)\n+    }\n+\n+    func prepareViewForReuse() {\n+        itemSize = nil\n+    }\n+\n+    func configureView(with model: HUBComponentModel, containerViewSize: CGSize) {\n+        self.model = model\n+        itemSize = calculateItemSize(forModel: model, containerViewSize: containerViewSize)\n+        collectionView.reloadData()\n+    }\n+    \n+    // MARK: - HUBComponentWithRestorableUIState\n+    \n+    func currentUIState() -> Any? {\n+        return collectionView.contentOffset",
        "path": "demo/sources/CarouselComponent.swift",
        "position": 76,
        "original_position": 76,
        "commit_id": "87d592c0f28f335fb734a8ddc0e68d2b2256afdf",
        "original_commit_id": "3142f26affeb023b938d7fffc14c8a1a55a6befe",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "![stop](https://i.imgur.com/QONVIyz.gif)\n",
        "created_at": "2016-10-25T15:58:18Z",
        "updated_at": "2016-10-25T19:10:47Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/101#discussion_r84937625",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/101",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/84937625"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/101#discussion_r84937625"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/101"
            }
        },
        "in_reply_to_id": 84935089
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85151213",
        "pull_request_review_id": 5882964,
        "id": 85151213,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1MTUxMjEz",
        "diff_hunk": "@@ -184,10 +184,68 @@ - (void)testComplexChangeSet\n     XCTAssert([diff.insertedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:2 inSection:0]]);\n     XCTAssert([diff.insertedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:9 inSection:0]]);\n     XCTAssert([diff.reloadedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:1 inSection:0]]);\n-    XCTAssert([diff.reloadedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:7 inSection:0]]);\n+    XCTAssert([diff.reloadedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:8 inSection:0]]);\n     XCTAssert(diff.reloadedBodyComponentIndexPaths.count == 2);\n     XCTAssert(diff.insertedBodyComponentIndexPaths.count == 2);\n     XCTAssert(diff.deletedBodyComponentIndexPaths.count == 2);\n }\n \n+- (void)testInsertionOfComponentModelAtStartWithDataChanges\n+{\n+    NSArray<id<HUBComponentModel>> *firstComponents = @[\n+                                                        [self createComponentModelWithIdentifier:@\"component-1\" customData:nil],",
        "path": "tests/HUBViewModelDiffTests.m",
        "position": null,
        "original_position": 14,
        "commit_id": "25d7706fe19984006bb055272c05a4489bfe648c",
        "original_commit_id": "efca7af8cb47bb00ae5133d8001dead2ae32d42f",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Looks like this code formatting is a bit off \ud83c\udfa8 \n",
        "created_at": "2016-10-26T15:32:17Z",
        "updated_at": "2016-10-26T19:42:25Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/104#discussion_r85151213",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/104",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85151213"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/104#discussion_r85151213"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/104"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85151328",
        "pull_request_review_id": 5882964,
        "id": 85151328,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1MTUxMzI4",
        "diff_hunk": "@@ -184,10 +184,68 @@ - (void)testComplexChangeSet\n     XCTAssert([diff.insertedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:2 inSection:0]]);\n     XCTAssert([diff.insertedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:9 inSection:0]]);\n     XCTAssert([diff.reloadedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:1 inSection:0]]);\n-    XCTAssert([diff.reloadedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:7 inSection:0]]);\n+    XCTAssert([diff.reloadedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:8 inSection:0]]);",
        "path": "tests/HUBViewModelDiffTests.m",
        "position": 5,
        "original_position": 5,
        "commit_id": "25d7706fe19984006bb055272c05a4489bfe648c",
        "original_commit_id": "efca7af8cb47bb00ae5133d8001dead2ae32d42f",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This seems a bit dangerous, or was the test incorrect?\n",
        "created_at": "2016-10-26T15:32:47Z",
        "updated_at": "2016-10-26T19:42:25Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/104#discussion_r85151328",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/104",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85151328"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/104#discussion_r85151328"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/104"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85151625",
        "pull_request_review_id": 5882964,
        "id": 85151625,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1MTUxNjI1",
        "diff_hunk": "@@ -184,10 +184,68 @@ - (void)testComplexChangeSet\n     XCTAssert([diff.insertedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:2 inSection:0]]);\n     XCTAssert([diff.insertedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:9 inSection:0]]);\n     XCTAssert([diff.reloadedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:1 inSection:0]]);\n-    XCTAssert([diff.reloadedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:7 inSection:0]]);\n+    XCTAssert([diff.reloadedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:8 inSection:0]]);\n     XCTAssert(diff.reloadedBodyComponentIndexPaths.count == 2);\n     XCTAssert(diff.insertedBodyComponentIndexPaths.count == 2);\n     XCTAssert(diff.deletedBodyComponentIndexPaths.count == 2);\n }\n \n+- (void)testInsertionOfComponentModelAtStartWithDataChanges\n+{\n+    NSArray<id<HUBComponentModel>> *firstComponents = @[\n+                                                        [self createComponentModelWithIdentifier:@\"component-1\" customData:nil],",
        "path": "tests/HUBViewModelDiffTests.m",
        "position": null,
        "original_position": 14,
        "commit_id": "25d7706fe19984006bb055272c05a4489bfe648c",
        "original_commit_id": "efca7af8cb47bb00ae5133d8001dead2ae32d42f",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "(also the same for the other array literals)\n",
        "created_at": "2016-10-26T15:34:00Z",
        "updated_at": "2016-10-26T19:42:25Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/104#discussion_r85151625",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/104",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85151625"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/104#discussion_r85151625"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/104"
            }
        },
        "in_reply_to_id": 85151213
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85152090",
        "pull_request_review_id": 5882964,
        "id": 85152090,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1MTUyMDkw",
        "diff_hunk": "@@ -184,10 +184,68 @@ - (void)testComplexChangeSet\n     XCTAssert([diff.insertedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:2 inSection:0]]);\n     XCTAssert([diff.insertedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:9 inSection:0]]);\n     XCTAssert([diff.reloadedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:1 inSection:0]]);\n-    XCTAssert([diff.reloadedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:7 inSection:0]]);\n+    XCTAssert([diff.reloadedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:8 inSection:0]]);\n     XCTAssert(diff.reloadedBodyComponentIndexPaths.count == 2);\n     XCTAssert(diff.insertedBodyComponentIndexPaths.count == 2);\n     XCTAssert(diff.deletedBodyComponentIndexPaths.count == 2);\n }\n \n+- (void)testInsertionOfComponentModelAtStartWithDataChanges\n+{\n+    NSArray<id<HUBComponentModel>> *firstComponents = @[\n+                                                        [self createComponentModelWithIdentifier:@\"component-1\" customData:nil],\n+                                                        [self createComponentModelWithIdentifier:@\"component-2\" customData:nil],\n+                                                        [self createComponentModelWithIdentifier:@\"component-3\" customData:nil]\n+                                                        ];\n+    id<HUBViewModel> firstViewModel = [self createViewModelWithIdentifier:@\"Test\"\n+                                                               components:firstComponents];\n+    NSArray<id<HUBComponentModel>> *secondComponents = @[\n+                                                         [self createComponentModelWithIdentifier:@\"component-0\" customData:nil],\n+                                                         [self createComponentModelWithIdentifier:@\"component-1\" customData:@{@\"test\": @1}],\n+                                                         [self createComponentModelWithIdentifier:@\"component-2\" customData:@{@\"test\": @1}],\n+                                                         [self createComponentModelWithIdentifier:@\"component-3\" customData:@{@\"test\": @1}]\n+                                                         ];\n+    id<HUBViewModel> secondViewModel = [self createViewModelWithIdentifier:@\"Test\"\n+                                                                components:secondComponents];\n+\n+    HUBViewModelDiff *diff = [HUBViewModelDiff diffFromViewModel:firstViewModel toViewModel:secondViewModel];\n+    XCTAssert(diff.reloadedBodyComponentIndexPaths.count == 3);\n+    XCTAssert(diff.insertedBodyComponentIndexPaths.count == 1);\n+    XCTAssert(diff.deletedBodyComponentIndexPaths.count == 0);\n+    XCTAssert([diff.insertedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:0 inSection:0]]);\n+    XCTAssert([diff.reloadedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:0 inSection:0]]);\n+    XCTAssert([diff.reloadedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:1 inSection:0]]);\n+    XCTAssert([diff.reloadedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:2 inSection:0]]);\n+}\n+\n+- (void)testInsertionOfComponentModelsAtStartWithDataChanges",
        "path": "tests/HUBViewModelDiffTests.m",
        "position": null,
        "original_position": 39,
        "commit_id": "25d7706fe19984006bb055272c05a4489bfe648c",
        "original_commit_id": "efca7af8cb47bb00ae5133d8001dead2ae32d42f",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Suggestion: I had to spend quite a few minutes to figure out what the difference was between this test and the one above. Renaming it to `testInsertionOfMultipleComponentModelsAtStartWithDataChanges` would make it a bit more explicit (IMO).\n",
        "created_at": "2016-10-26T15:35:56Z",
        "updated_at": "2016-10-26T19:42:25Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/104#discussion_r85152090",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/104",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85152090"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/104#discussion_r85152090"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/104"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85155550",
        "pull_request_review_id": 5886968,
        "id": 85155550,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1MTU1NTUw",
        "diff_hunk": "@@ -184,10 +184,68 @@ - (void)testComplexChangeSet\n     XCTAssert([diff.insertedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:2 inSection:0]]);\n     XCTAssert([diff.insertedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:9 inSection:0]]);\n     XCTAssert([diff.reloadedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:1 inSection:0]]);\n-    XCTAssert([diff.reloadedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:7 inSection:0]]);\n+    XCTAssert([diff.reloadedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:8 inSection:0]]);\n     XCTAssert(diff.reloadedBodyComponentIndexPaths.count == 2);\n     XCTAssert(diff.insertedBodyComponentIndexPaths.count == 2);\n     XCTAssert(diff.deletedBodyComponentIndexPaths.count == 2);\n }\n \n+- (void)testInsertionOfComponentModelAtStartWithDataChanges\n+{\n+    NSArray<id<HUBComponentModel>> *firstComponents = @[\n+                                                        [self createComponentModelWithIdentifier:@\"component-1\" customData:nil],\n+                                                        [self createComponentModelWithIdentifier:@\"component-2\" customData:nil],\n+                                                        [self createComponentModelWithIdentifier:@\"component-3\" customData:nil]\n+                                                        ];\n+    id<HUBViewModel> firstViewModel = [self createViewModelWithIdentifier:@\"Test\"\n+                                                               components:firstComponents];\n+    NSArray<id<HUBComponentModel>> *secondComponents = @[\n+                                                         [self createComponentModelWithIdentifier:@\"component-0\" customData:nil],\n+                                                         [self createComponentModelWithIdentifier:@\"component-1\" customData:@{@\"test\": @1}],\n+                                                         [self createComponentModelWithIdentifier:@\"component-2\" customData:@{@\"test\": @1}],\n+                                                         [self createComponentModelWithIdentifier:@\"component-3\" customData:@{@\"test\": @1}]\n+                                                         ];\n+    id<HUBViewModel> secondViewModel = [self createViewModelWithIdentifier:@\"Test\"\n+                                                                components:secondComponents];\n+\n+    HUBViewModelDiff *diff = [HUBViewModelDiff diffFromViewModel:firstViewModel toViewModel:secondViewModel];\n+    XCTAssert(diff.reloadedBodyComponentIndexPaths.count == 3);\n+    XCTAssert(diff.insertedBodyComponentIndexPaths.count == 1);\n+    XCTAssert(diff.deletedBodyComponentIndexPaths.count == 0);\n+    XCTAssert([diff.insertedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:0 inSection:0]]);\n+    XCTAssert([diff.reloadedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:0 inSection:0]]);\n+    XCTAssert([diff.reloadedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:1 inSection:0]]);\n+    XCTAssert([diff.reloadedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:2 inSection:0]]);\n+}\n+\n+- (void)testInsertionOfComponentModelsAtStartWithDataChanges",
        "path": "tests/HUBViewModelDiffTests.m",
        "position": null,
        "original_position": 39,
        "commit_id": "25d7706fe19984006bb055272c05a4489bfe648c",
        "original_commit_id": "efca7af8cb47bb00ae5133d8001dead2ae32d42f",
        "user": {
            "login": "cerihughes",
            "id": 12008876,
            "node_id": "MDQ6VXNlcjEyMDA4ODc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12008876?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cerihughes",
            "html_url": "https://github.com/cerihughes",
            "followers_url": "https://api.github.com/users/cerihughes/followers",
            "following_url": "https://api.github.com/users/cerihughes/following{/other_user}",
            "gists_url": "https://api.github.com/users/cerihughes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cerihughes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cerihughes/subscriptions",
            "organizations_url": "https://api.github.com/users/cerihughes/orgs",
            "repos_url": "https://api.github.com/users/cerihughes/repos",
            "events_url": "https://api.github.com/users/cerihughes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cerihughes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Sorry...  they were tests I put together quickly.\n",
        "created_at": "2016-10-26T15:49:30Z",
        "updated_at": "2016-10-26T19:42:25Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/104#discussion_r85155550",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/104",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85155550"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/104#discussion_r85155550"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/104"
            }
        },
        "in_reply_to_id": 85152090
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85155716",
        "pull_request_review_id": 5886968,
        "id": 85155716,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1MTU1NzE2",
        "diff_hunk": "@@ -184,10 +184,68 @@ - (void)testComplexChangeSet\n     XCTAssert([diff.insertedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:2 inSection:0]]);\n     XCTAssert([diff.insertedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:9 inSection:0]]);\n     XCTAssert([diff.reloadedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:1 inSection:0]]);\n-    XCTAssert([diff.reloadedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:7 inSection:0]]);\n+    XCTAssert([diff.reloadedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:8 inSection:0]]);\n     XCTAssert(diff.reloadedBodyComponentIndexPaths.count == 2);\n     XCTAssert(diff.insertedBodyComponentIndexPaths.count == 2);\n     XCTAssert(diff.deletedBodyComponentIndexPaths.count == 2);\n }\n \n+- (void)testInsertionOfComponentModelAtStartWithDataChanges\n+{\n+    NSArray<id<HUBComponentModel>> *firstComponents = @[\n+                                                        [self createComponentModelWithIdentifier:@\"component-1\" customData:nil],",
        "path": "tests/HUBViewModelDiffTests.m",
        "position": null,
        "original_position": 14,
        "commit_id": "25d7706fe19984006bb055272c05a4489bfe648c",
        "original_commit_id": "efca7af8cb47bb00ae5133d8001dead2ae32d42f",
        "user": {
            "login": "cerihughes",
            "id": 12008876,
            "node_id": "MDQ6VXNlcjEyMDA4ODc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12008876?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cerihughes",
            "html_url": "https://github.com/cerihughes",
            "followers_url": "https://api.github.com/users/cerihughes/followers",
            "following_url": "https://api.github.com/users/cerihughes/following{/other_user}",
            "gists_url": "https://api.github.com/users/cerihughes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cerihughes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cerihughes/subscriptions",
            "organizations_url": "https://api.github.com/users/cerihughes/orgs",
            "repos_url": "https://api.github.com/users/cerihughes/repos",
            "events_url": "https://api.github.com/users/cerihughes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cerihughes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Isn't that the default Xcode formatter settings? (it is on my setup at least)\n",
        "created_at": "2016-10-26T15:50:09Z",
        "updated_at": "2016-10-26T19:42:25Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/104#discussion_r85155716",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/104",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85155716"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/104#discussion_r85155716"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/104"
            }
        },
        "in_reply_to_id": 85151213
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85157229",
        "pull_request_review_id": 5888615,
        "id": 85157229,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1MTU3MjI5",
        "diff_hunk": "@@ -184,10 +184,68 @@ - (void)testComplexChangeSet\n     XCTAssert([diff.insertedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:2 inSection:0]]);\n     XCTAssert([diff.insertedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:9 inSection:0]]);\n     XCTAssert([diff.reloadedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:1 inSection:0]]);\n-    XCTAssert([diff.reloadedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:7 inSection:0]]);\n+    XCTAssert([diff.reloadedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:8 inSection:0]]);",
        "path": "tests/HUBViewModelDiffTests.m",
        "position": 5,
        "original_position": 5,
        "commit_id": "25d7706fe19984006bb055272c05a4489bfe648c",
        "original_commit_id": "efca7af8cb47bb00ae5133d8001dead2ae32d42f",
        "user": {
            "login": "cerihughes",
            "id": 12008876,
            "node_id": "MDQ6VXNlcjEyMDA4ODc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12008876?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cerihughes",
            "html_url": "https://github.com/cerihughes",
            "followers_url": "https://api.github.com/users/cerihughes/followers",
            "following_url": "https://api.github.com/users/cerihughes/following{/other_user}",
            "gists_url": "https://api.github.com/users/cerihughes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cerihughes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cerihughes/subscriptions",
            "organizations_url": "https://api.github.com/users/cerihughes/orgs",
            "repos_url": "https://api.github.com/users/cerihughes/repos",
            "events_url": "https://api.github.com/users/cerihughes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cerihughes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The implementation we had made some incorrect assumptions about the index paths you need to pass to `UICollectionView performBatchUpdates:completion:` so would sometimes generate incorrect index paths that caused the crash.\n\nThe new code generates correct index paths, so this test has to be updated to reflect the correct logic.\n",
        "created_at": "2016-10-26T15:56:31Z",
        "updated_at": "2016-10-26T19:42:25Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/104#discussion_r85157229",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/104",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85157229"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/104#discussion_r85157229"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/104"
            }
        },
        "in_reply_to_id": 85151328
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85158003",
        "pull_request_review_id": 5889353,
        "id": 85158003,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1MTU4MDAz",
        "diff_hunk": "@@ -184,10 +184,68 @@ - (void)testComplexChangeSet\n     XCTAssert([diff.insertedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:2 inSection:0]]);\n     XCTAssert([diff.insertedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:9 inSection:0]]);\n     XCTAssert([diff.reloadedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:1 inSection:0]]);\n-    XCTAssert([diff.reloadedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:7 inSection:0]]);\n+    XCTAssert([diff.reloadedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:8 inSection:0]]);\n     XCTAssert(diff.reloadedBodyComponentIndexPaths.count == 2);\n     XCTAssert(diff.insertedBodyComponentIndexPaths.count == 2);\n     XCTAssert(diff.deletedBodyComponentIndexPaths.count == 2);\n }\n \n+- (void)testInsertionOfComponentModelAtStartWithDataChanges\n+{\n+    NSArray<id<HUBComponentModel>> *firstComponents = @[\n+                                                        [self createComponentModelWithIdentifier:@\"component-1\" customData:nil],",
        "path": "tests/HUBViewModelDiffTests.m",
        "position": null,
        "original_position": 14,
        "commit_id": "25d7706fe19984006bb055272c05a4489bfe648c",
        "original_commit_id": "efca7af8cb47bb00ae5133d8001dead2ae32d42f",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yeah it is, but our allmighty [code style](https://github.com/spotify/ios-style) says differently \ud83d\ude04 \n",
        "created_at": "2016-10-26T15:59:35Z",
        "updated_at": "2016-10-26T19:42:25Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/104#discussion_r85158003",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/104",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85158003"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/104#discussion_r85158003"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/104"
            }
        },
        "in_reply_to_id": 85151213
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85165146",
        "pull_request_review_id": 5896056,
        "id": 85165146,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1MTY1MTQ2",
        "diff_hunk": "@@ -184,10 +184,68 @@ - (void)testComplexChangeSet\n     XCTAssert([diff.insertedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:2 inSection:0]]);\n     XCTAssert([diff.insertedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:9 inSection:0]]);\n     XCTAssert([diff.reloadedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:1 inSection:0]]);\n-    XCTAssert([diff.reloadedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:7 inSection:0]]);\n+    XCTAssert([diff.reloadedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:8 inSection:0]]);",
        "path": "tests/HUBViewModelDiffTests.m",
        "position": 5,
        "original_position": 5,
        "commit_id": "25d7706fe19984006bb055272c05a4489bfe648c",
        "original_commit_id": "efca7af8cb47bb00ae5133d8001dead2ae32d42f",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ah makes sense \ud83d\udc4d \n",
        "created_at": "2016-10-26T16:31:17Z",
        "updated_at": "2016-10-26T19:42:25Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/104#discussion_r85165146",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/104",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85165146"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/104#discussion_r85165146"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/104"
            }
        },
        "in_reply_to_id": 85151328
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85165217",
        "pull_request_review_id": 5896122,
        "id": 85165217,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1MTY1MjE3",
        "diff_hunk": "@@ -184,10 +184,68 @@ - (void)testComplexChangeSet\n     XCTAssert([diff.insertedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:2 inSection:0]]);\n     XCTAssert([diff.insertedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:9 inSection:0]]);\n     XCTAssert([diff.reloadedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:1 inSection:0]]);\n-    XCTAssert([diff.reloadedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:7 inSection:0]]);\n+    XCTAssert([diff.reloadedBodyComponentIndexPaths containsObject:[NSIndexPath indexPathForItem:8 inSection:0]]);",
        "path": "tests/HUBViewModelDiffTests.m",
        "position": 5,
        "original_position": 5,
        "commit_id": "25d7706fe19984006bb055272c05a4489bfe648c",
        "original_commit_id": "efca7af8cb47bb00ae5133d8001dead2ae32d42f",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This is due to the change \u2013 the updated item was at index 8 prior to the update :smile:\n",
        "created_at": "2016-10-26T16:31:44Z",
        "updated_at": "2016-10-26T19:42:25Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/104#discussion_r85165217",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/104",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85165217"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/104#discussion_r85165217"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/104"
            }
        },
        "in_reply_to_id": 85151328
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85194376",
        "pull_request_review_id": 5923783,
        "id": 85194376,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1MTk0Mzc2",
        "diff_hunk": "@@ -339,17 +339,17 @@ - (void)testProposedContentOffsetAfterRecomputing\n     NSRange const addedRange = NSMakeRange(0, 2);\n     NSIndexSet * const addedIndices = [NSIndexSet indexSetWithIndexesInRange:addedRange];\n \n-    [removedIndices enumerateIndexesUsingBlock:^(NSUInteger idx, BOOL *stop) {\n-        [self removeBodyComponentAtIndex:idx];\n-        if (idx <= currentIndex) {\n-            deletionHeight += self.fullWidthComponent.preferredViewSize.height;\n+    [addedIndices enumerateIndexesUsingBlock:^(NSUInteger idx, BOOL *stop) {\n+        [self addBodyComponentWithIdentifier:self.fullWidthComponentIdentifier preferredIndex:idx];\n+        if (idx < currentIndex) {\n+            insertionHeight += self.fullWidthComponent.preferredViewSize.height;\n         }\n     }];\n \n-    [addedIndices enumerateIndexesUsingBlock:^(NSUInteger idx, BOOL *stop) {\n-        [self addBodyComponentWithIdentifier:self.fullWidthComponentIdentifier preferredIndex:idx];\n+    [removedIndices enumerateIndexesUsingBlock:^(NSUInteger idx, BOOL *stop) {",
        "path": "tests/HUBCollectionViewLayoutTests.m",
        "position": 26,
        "original_position": 26,
        "commit_id": "25d7706fe19984006bb055272c05a4489bfe648c",
        "original_commit_id": "bbc5507c5dc5e6ad44eb30a86355edcc326d2c18",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Could you just give some quick context as to why these tests had to be changed? \ud83d\ude04 \n",
        "created_at": "2016-10-26T18:54:18Z",
        "updated_at": "2016-10-26T19:42:25Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/104#discussion_r85194376",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/104",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85194376"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/104#discussion_r85194376"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/104"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85196353",
        "pull_request_review_id": 5925678,
        "id": 85196353,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1MTk2MzUz",
        "diff_hunk": "@@ -339,17 +339,17 @@ - (void)testProposedContentOffsetAfterRecomputing\n     NSRange const addedRange = NSMakeRange(0, 2);\n     NSIndexSet * const addedIndices = [NSIndexSet indexSetWithIndexesInRange:addedRange];\n \n-    [removedIndices enumerateIndexesUsingBlock:^(NSUInteger idx, BOOL *stop) {\n-        [self removeBodyComponentAtIndex:idx];\n-        if (idx <= currentIndex) {\n-            deletionHeight += self.fullWidthComponent.preferredViewSize.height;\n+    [addedIndices enumerateIndexesUsingBlock:^(NSUInteger idx, BOOL *stop) {\n+        [self addBodyComponentWithIdentifier:self.fullWidthComponentIdentifier preferredIndex:idx];\n+        if (idx < currentIndex) {\n+            insertionHeight += self.fullWidthComponent.preferredViewSize.height;\n         }\n     }];\n \n-    [addedIndices enumerateIndexesUsingBlock:^(NSUInteger idx, BOOL *stop) {\n-        [self addBodyComponentWithIdentifier:self.fullWidthComponentIdentifier preferredIndex:idx];\n+    [removedIndices enumerateIndexesUsingBlock:^(NSUInteger idx, BOOL *stop) {",
        "path": "tests/HUBCollectionViewLayoutTests.m",
        "position": 26,
        "original_position": 26,
        "commit_id": "25d7706fe19984006bb055272c05a4489bfe648c",
        "original_commit_id": "bbc5507c5dc5e6ad44eb30a86355edcc326d2c18",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It was actually a problem with the test that I hadn't seen before :smile: It wasn't adding & removing the intended components as it wasn't using the preferredIndex\n",
        "created_at": "2016-10-26T19:04:02Z",
        "updated_at": "2016-10-26T19:42:25Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/104#discussion_r85196353",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/104",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85196353"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/104#discussion_r85196353"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/104"
            }
        },
        "in_reply_to_id": 85194376
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85196569",
        "pull_request_review_id": 5925891,
        "id": 85196569,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1MTk2NTY5",
        "diff_hunk": "@@ -339,17 +339,17 @@ - (void)testProposedContentOffsetAfterRecomputing\n     NSRange const addedRange = NSMakeRange(0, 2);\n     NSIndexSet * const addedIndices = [NSIndexSet indexSetWithIndexesInRange:addedRange];\n \n-    [removedIndices enumerateIndexesUsingBlock:^(NSUInteger idx, BOOL *stop) {\n-        [self removeBodyComponentAtIndex:idx];\n-        if (idx <= currentIndex) {\n-            deletionHeight += self.fullWidthComponent.preferredViewSize.height;\n+    [addedIndices enumerateIndexesUsingBlock:^(NSUInteger idx, BOOL *stop) {\n+        [self addBodyComponentWithIdentifier:self.fullWidthComponentIdentifier preferredIndex:idx];\n+        if (idx < currentIndex) {\n+            insertionHeight += self.fullWidthComponent.preferredViewSize.height;\n         }\n     }];\n \n-    [addedIndices enumerateIndexesUsingBlock:^(NSUInteger idx, BOOL *stop) {\n-        [self addBodyComponentWithIdentifier:self.fullWidthComponentIdentifier preferredIndex:idx];\n+    [removedIndices enumerateIndexesUsingBlock:^(NSUInteger idx, BOOL *stop) {",
        "path": "tests/HUBCollectionViewLayoutTests.m",
        "position": 26,
        "original_position": 26,
        "commit_id": "25d7706fe19984006bb055272c05a4489bfe648c",
        "original_commit_id": "bbc5507c5dc5e6ad44eb30a86355edcc326d2c18",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ah alright - thanks \ud83c\udf2e \n",
        "created_at": "2016-10-26T19:05:10Z",
        "updated_at": "2016-10-26T19:42:25Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/104#discussion_r85196569",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/104",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85196569"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/104#discussion_r85196569"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/104"
            }
        },
        "in_reply_to_id": 85194376
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85167965",
        "pull_request_review_id": 5898801,
        "id": 85167965,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1MTY3OTY1",
        "diff_hunk": "@@ -0,0 +1,36 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import <Foundation/Foundation.h>\n+#import \"HUBComponent.h\"\n+\n+@protocol HUBAction;\n+@protocol HUBActionContext;\n+\n+NS_ASSUME_NONNULL_BEGIN\n+\n+@protocol HUBComponentActionObserver <HUBComponent>",
        "path": "include/HubFramework/HUBComponentActionObserver.h",
        "position": null,
        "original_position": 30,
        "commit_id": "8f19a28bbed2c8b0244bfd3a0ebdb5c76fec0f91",
        "original_commit_id": "f4781d3c6db62fe57f21074161570a442a81fbcc",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Document this API. See the documentation for `HUBComponent` + `HUBContentOperationActionObserver` for inspiration \ud83d\ude04 \n",
        "created_at": "2016-10-26T16:46:27Z",
        "updated_at": "2016-10-26T21:59:42Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/105#discussion_r85167965",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/105",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85167965"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/105#discussion_r85167965"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/105"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85168076",
        "pull_request_review_id": 5898801,
        "id": 85168076,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1MTY4MDc2",
        "diff_hunk": "@@ -0,0 +1,36 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import <Foundation/Foundation.h>\n+#import \"HUBComponent.h\"",
        "path": "include/HubFramework/HUBComponentActionObserver.h",
        "position": null,
        "original_position": 23,
        "commit_id": "8f19a28bbed2c8b0244bfd3a0ebdb5c76fec0f91",
        "original_commit_id": "f4781d3c6db62fe57f21074161570a442a81fbcc",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Nitpick, you don't need to import `Foundation`  as you are already importing it by proxy through `HUBComponent`.\n",
        "created_at": "2016-10-26T16:46:57Z",
        "updated_at": "2016-10-26T21:59:42Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/105#discussion_r85168076",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/105",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85168076"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/105#discussion_r85168076"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/105"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85168155",
        "pull_request_review_id": 5898801,
        "id": 85168155,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1MTY4MTU1",
        "diff_hunk": "@@ -155,6 +157,9 @@ willUpdateSelectionState:(HUBComponentSelectionState)selectionState;\n /// Whether the wrapped component is observing the container view's content offset\n @property (nonatomic, readonly) BOOL isContentOffsetObserver;\n \n+/// Whether the wrapped component is observing the actions",
        "path": "sources/HUBComponentWrapper.h",
        "position": null,
        "original_position": 20,
        "commit_id": "8f19a28bbed2c8b0244bfd3a0ebdb5c76fec0f91",
        "original_commit_id": "f4781d3c6db62fe57f21074161570a442a81fbcc",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Typo: should be `observing actions`\n",
        "created_at": "2016-10-26T16:47:23Z",
        "updated_at": "2016-10-26T21:59:42Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/105#discussion_r85168155",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/105",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85168155"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/105#discussion_r85168155"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/105"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85168236",
        "pull_request_review_id": 5898801,
        "id": 85168236,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1MTY4MjM2",
        "diff_hunk": "@@ -503,9 +506,7 @@ - (void)componentWrapper:(HUBComponentWrapper *)componentWrapper\n     [self loadImagesForComponentWrapper:componentWrapper childIndex:@(childIndex)];\n     [self.delegate viewController:self componentWithModel:childComponentModel willAppearInView:childView];\n \n-    if (childComponent.isContentOffsetObserver) {\n-        [self.contentOffsetObservingComponentWrappers addObject:childComponent];\n-    }\n+    [self addComponentWrapperToLookupTables:childComponent];",
        "path": "sources/HUBViewControllerImplementation.m",
        "position": 31,
        "original_position": 31,
        "commit_id": "8f19a28bbed2c8b0244bfd3a0ebdb5c76fec0f91",
        "original_commit_id": "f4781d3c6db62fe57f21074161570a442a81fbcc",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Really nice abstraction \ud83d\udc4d \n",
        "created_at": "2016-10-26T16:47:51Z",
        "updated_at": "2016-10-26T21:59:42Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/105#discussion_r85168236",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/105",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85168236"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/105#discussion_r85168236"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/105"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85168329",
        "pull_request_review_id": 5898801,
        "id": 85168329,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1MTY4MzI5",
        "diff_hunk": "@@ -1205,8 +1198,37 @@ - (BOOL)performActionForTrigger:(HUBActionTrigger)trigger\n                                                                                        viewModel:viewModel\n                                                                                   componentModel:componentModel\n                                                                                   viewController:self];\n-    \n-    return [self.actionHandler handleActionWithContext:context];\n+\n+    BOOL isActionHandled = [self.actionHandler handleActionWithContext:context];",
        "path": "sources/HUBViewControllerImplementation.m",
        "position": null,
        "original_position": 92,
        "commit_id": "8f19a28bbed2c8b0244bfd3a0ebdb5c76fec0f91",
        "original_commit_id": "f4781d3c6db62fe57f21074161570a442a81fbcc",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Nitpick, since this is in the past, it should be `actionWasHandled` (or similar)\n",
        "created_at": "2016-10-26T16:48:24Z",
        "updated_at": "2016-10-26T21:59:42Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/105#discussion_r85168329",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/105",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85168329"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/105#discussion_r85168329"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/105"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85168788",
        "pull_request_review_id": 5898801,
        "id": 85168788,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1MTY4Nzg4",
        "diff_hunk": "@@ -39,7 +41,8 @@ NS_ASSUME_NONNULL_BEGIN\n     HUBComponentWithSelectionState,\n     HUBComponentViewObserver,\n     HUBComponentContentOffsetObserver,\n-    HUBComponentActionPerformer\n+    HUBComponentActionPerformer,\n+    HUBComponentActionObserver",
        "path": "tests/mocks/HUBComponentMock.h",
        "position": 15,
        "original_position": 15,
        "commit_id": "8f19a28bbed2c8b0244bfd3a0ebdb5c76fec0f91",
        "original_commit_id": "f4781d3c6db62fe57f21074161570a442a81fbcc",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Suggestion: Make this configurable, so that not **all** mocks conform to this protocol. See how this was done for the other protocols. Otherwise you're essentially only testing the success code path, not the failure one.\n",
        "created_at": "2016-10-26T16:51:01Z",
        "updated_at": "2016-10-26T21:59:42Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/105#discussion_r85168788",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/105",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85168788"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/105#discussion_r85168788"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/105"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85169486",
        "pull_request_review_id": 5900313,
        "id": 85169486,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1MTY5NDg2",
        "diff_hunk": "@@ -0,0 +1,36 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import <Foundation/Foundation.h>\n+#import \"HUBComponent.h\"",
        "path": "include/HubFramework/HUBComponentActionObserver.h",
        "position": null,
        "original_position": 23,
        "commit_id": "8f19a28bbed2c8b0244bfd3a0ebdb5c76fec0f91",
        "original_commit_id": "f4781d3c6db62fe57f21074161570a442a81fbcc",
        "user": {
            "login": "krris",
            "id": 1786612,
            "node_id": "MDQ6VXNlcjE3ODY2MTI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1786612?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krris",
            "html_url": "https://github.com/krris",
            "followers_url": "https://api.github.com/users/krris/followers",
            "following_url": "https://api.github.com/users/krris/following{/other_user}",
            "gists_url": "https://api.github.com/users/krris/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krris/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krris/subscriptions",
            "organizations_url": "https://api.github.com/users/krris/orgs",
            "repos_url": "https://api.github.com/users/krris/repos",
            "events_url": "https://api.github.com/users/krris/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krris/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Right!\n",
        "created_at": "2016-10-26T16:54:27Z",
        "updated_at": "2016-10-26T21:59:42Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/105#discussion_r85169486",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/105",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85169486"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/105#discussion_r85169486"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/105"
            }
        },
        "in_reply_to_id": 85168076
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85169552",
        "pull_request_review_id": 5900376,
        "id": 85169552,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1MTY5NTUy",
        "diff_hunk": "@@ -0,0 +1,36 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import <Foundation/Foundation.h>\n+#import \"HUBComponent.h\"\n+\n+@protocol HUBAction;\n+@protocol HUBActionContext;\n+\n+NS_ASSUME_NONNULL_BEGIN\n+\n+@protocol HUBComponentActionObserver <HUBComponent>",
        "path": "include/HubFramework/HUBComponentActionObserver.h",
        "position": null,
        "original_position": 30,
        "commit_id": "8f19a28bbed2c8b0244bfd3a0ebdb5c76fec0f91",
        "original_commit_id": "f4781d3c6db62fe57f21074161570a442a81fbcc",
        "user": {
            "login": "krris",
            "id": 1786612,
            "node_id": "MDQ6VXNlcjE3ODY2MTI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1786612?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krris",
            "html_url": "https://github.com/krris",
            "followers_url": "https://api.github.com/users/krris/followers",
            "following_url": "https://api.github.com/users/krris/following{/other_user}",
            "gists_url": "https://api.github.com/users/krris/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krris/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krris/subscriptions",
            "organizations_url": "https://api.github.com/users/krris/orgs",
            "repos_url": "https://api.github.com/users/krris/repos",
            "events_url": "https://api.github.com/users/krris/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krris/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I knew I forgot about something \ud83d\ude09 \n",
        "created_at": "2016-10-26T16:54:48Z",
        "updated_at": "2016-10-26T21:59:42Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/105#discussion_r85169552",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/105",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85169552"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/105#discussion_r85169552"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/105"
            }
        },
        "in_reply_to_id": 85167965
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85170225",
        "pull_request_review_id": 5901057,
        "id": 85170225,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1MTcwMjI1",
        "diff_hunk": "@@ -39,7 +41,8 @@ NS_ASSUME_NONNULL_BEGIN\n     HUBComponentWithSelectionState,\n     HUBComponentViewObserver,\n     HUBComponentContentOffsetObserver,\n-    HUBComponentActionPerformer\n+    HUBComponentActionPerformer,\n+    HUBComponentActionObserver",
        "path": "tests/mocks/HUBComponentMock.h",
        "position": 15,
        "original_position": 15,
        "commit_id": "8f19a28bbed2c8b0244bfd3a0ebdb5c76fec0f91",
        "original_commit_id": "f4781d3c6db62fe57f21074161570a442a81fbcc",
        "user": {
            "login": "krris",
            "id": 1786612,
            "node_id": "MDQ6VXNlcjE3ODY2MTI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1786612?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krris",
            "html_url": "https://github.com/krris",
            "followers_url": "https://api.github.com/users/krris/followers",
            "following_url": "https://api.github.com/users/krris/following{/other_user}",
            "gists_url": "https://api.github.com/users/krris/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krris/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krris/subscriptions",
            "organizations_url": "https://api.github.com/users/krris/orgs",
            "repos_url": "https://api.github.com/users/krris/repos",
            "events_url": "https://api.github.com/users/krris/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krris/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yup, good idea.\n",
        "created_at": "2016-10-26T16:58:34Z",
        "updated_at": "2016-10-26T21:59:42Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/105#discussion_r85170225",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/105",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85170225"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/105#discussion_r85170225"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/105"
            }
        },
        "in_reply_to_id": 85168788
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85173827",
        "pull_request_review_id": 5904429,
        "id": 85173827,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1MTczODI3",
        "diff_hunk": "@@ -0,0 +1,50 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import \"HUBComponent.h\"\n+\n+@protocol HUBAction;\n+@protocol HUBActionContext;\n+\n+NS_ASSUME_NONNULL_BEGIN\n+\n+/**\n+ *  Extended component protocol that adds the ability to observe whenever an action was performed\n+ *\n+ *  You can use this protocol to be able to react to an action being performed in your component.\n+ *\n+ *  See `HUBComponent` and `HUBAction` for more information.",
        "path": "include/HubFramework/HUBComponentActionObserver.h",
        "position": 34,
        "original_position": 34,
        "commit_id": "8f19a28bbed2c8b0244bfd3a0ebdb5c76fec0f91",
        "original_commit_id": "f6e24fe9ff006ce3ce7b16803e9cbcc8f1aa12d2",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Beautiful! \ud83d\ude0d \n",
        "created_at": "2016-10-26T17:17:01Z",
        "updated_at": "2016-10-26T21:59:42Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/105#discussion_r85173827",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/105",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85173827"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/105#discussion_r85173827"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/105"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85174025",
        "pull_request_review_id": 5904429,
        "id": 85174025,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1MTc0MDI1",
        "diff_hunk": "@@ -96,6 +102,9 @@ NS_ASSUME_NONNULL_BEGIN\n /// Whether the component should act like it is a content offset observer or not\n @property (nonatomic) BOOL isContentOffsetObserver;\n \n+/// Whether the component should act like it is a component action observer or not\n+@property (nonatomic) BOOL isComponentActionObserver;",
        "path": "tests/mocks/HUBComponentMock.h",
        "position": null,
        "original_position": 34,
        "commit_id": "8f19a28bbed2c8b0244bfd3a0ebdb5c76fec0f91",
        "original_commit_id": "f6e24fe9ff006ce3ce7b16803e9cbcc8f1aa12d2",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Nitpick, we already know it's a component, so no need to include it in the property name. `isActionObserver` is enough, and also more consistent with the rest of the API \ud83d\ude42 \n",
        "created_at": "2016-10-26T17:18:04Z",
        "updated_at": "2016-10-26T21:59:43Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/105#discussion_r85174025",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/105",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85174025"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/105#discussion_r85174025"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/105"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85173663",
        "pull_request_review_id": 5904285,
        "id": 85173663,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1MTczNjYz",
        "diff_hunk": "@@ -86,21 +87,25 @@ NS_ASSUME_NONNULL_BEGIN\n  *\n  *  @param viewController The view controller in which a component is about to appear\n  *  @param componentModel The model of the component that is about to appear\n+ *  @param layoutTraits The layou traits of the component that is about to appear",
        "path": "include/HubFramework/HUBViewController.h",
        "position": null,
        "original_position": 12,
        "commit_id": "c9c33421d96ba2c134f8a915fa8c90291be6fc42",
        "original_commit_id": "926c98baf7da85862c9dbe452f024ecb82e21722",
        "user": {
            "login": "krris",
            "id": 1786612,
            "node_id": "MDQ6VXNlcjE3ODY2MTI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1786612?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krris",
            "html_url": "https://github.com/krris",
            "followers_url": "https://api.github.com/users/krris/followers",
            "following_url": "https://api.github.com/users/krris/following{/other_user}",
            "gists_url": "https://api.github.com/users/krris/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krris/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krris/subscriptions",
            "organizations_url": "https://api.github.com/users/krris/orgs",
            "repos_url": "https://api.github.com/users/krris/repos",
            "events_url": "https://api.github.com/users/krris/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krris/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Missing `t` in  `layou` \ud83d\ude04 \n",
        "created_at": "2016-10-26T17:16:09Z",
        "updated_at": "2016-10-27T09:26:17Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/106#discussion_r85173663",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/106",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85173663"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/106#discussion_r85173663"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/106"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85173760",
        "pull_request_review_id": 5904285,
        "id": 85173760,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1MTczNzYw",
        "diff_hunk": "@@ -86,21 +87,25 @@ NS_ASSUME_NONNULL_BEGIN\n  *\n  *  @param viewController The view controller in which a component is about to appear\n  *  @param componentModel The model of the component that is about to appear\n+ *  @param layoutTraits The layou traits of the component that is about to appear\n  *  @param componentView The view that the component is about to appear in\n  */\n - (void)viewController:(UIViewController<HUBViewController> *)viewController\n     componentWithModel:(id<HUBComponentModel>)componentModel\n+          layoutTraits:(NSSet<HUBComponentLayoutTrait> *)layoutTraits\n       willAppearInView:(UIView *)componentView;\n \n /**\n  *  Sent to a Hub Framework view controller's delegate when a component disappeared from the screen\n  *\n  *  @param viewController The view controller in which a component disappeared\n  *  @param componentModel The model of the component that disappeared\n+ *  @param layoutTraits The layou traits of the component that disappeared",
        "path": "include/HubFramework/HUBViewController.h",
        "position": null,
        "original_position": 25,
        "commit_id": "c9c33421d96ba2c134f8a915fa8c90291be6fc42",
        "original_commit_id": "926c98baf7da85862c9dbe452f024ecb82e21722",
        "user": {
            "login": "krris",
            "id": 1786612,
            "node_id": "MDQ6VXNlcjE3ODY2MTI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1786612?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krris",
            "html_url": "https://github.com/krris",
            "followers_url": "https://api.github.com/users/krris/followers",
            "following_url": "https://api.github.com/users/krris/following{/other_user}",
            "gists_url": "https://api.github.com/users/krris/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krris/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krris/subscriptions",
            "organizations_url": "https://api.github.com/users/krris/orgs",
            "repos_url": "https://api.github.com/users/krris/repos",
            "events_url": "https://api.github.com/users/krris/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krris/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Same here \ud83d\ude09 \n",
        "created_at": "2016-10-26T17:16:40Z",
        "updated_at": "2016-10-27T09:26:17Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/106#discussion_r85173760",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/106",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85173760"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/106#discussion_r85173760"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/106"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85175244",
        "pull_request_review_id": 5904285,
        "id": 85175244,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1MTc1MjQ0",
        "diff_hunk": "@@ -1126,17 +1131,21 @@ - (void)testComponentNotifiedOfViewWillAppearWhenCellIsDisplayed\n     [collectionViewDelegate collectionView:self.collectionView willDisplayCell:cell forItemAtIndexPath:indexPath];\n     [collectionViewDelegate collectionView:self.collectionView willDisplayCell:cell forItemAtIndexPath:indexPath];\n     \n-    XCTAssertEqual(self.component.numberOfAppearances, (NSUInteger)1);\n-    XCTAssertEqual(self.componentModelsFromAppearanceDelegateMethod.count, (NSUInteger)1);\n+    XCTAssertEqual(self.component.numberOfAppearances, 1u);",
        "path": "tests/HUBViewControllerTests.m",
        "position": 34,
        "original_position": 34,
        "commit_id": "c9c33421d96ba2c134f8a915fa8c90291be6fc42",
        "original_commit_id": "926c98baf7da85862c9dbe452f024ecb82e21722",
        "user": {
            "login": "krris",
            "id": 1786612,
            "node_id": "MDQ6VXNlcjE3ODY2MTI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1786612?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krris",
            "html_url": "https://github.com/krris",
            "followers_url": "https://api.github.com/users/krris/followers",
            "following_url": "https://api.github.com/users/krris/following{/other_user}",
            "gists_url": "https://api.github.com/users/krris/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krris/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krris/subscriptions",
            "organizations_url": "https://api.github.com/users/krris/orgs",
            "repos_url": "https://api.github.com/users/krris/repos",
            "events_url": "https://api.github.com/users/krris/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krris/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Oh, I didn't know about this: `1u` == `(NSUInteger)1`\n",
        "created_at": "2016-10-26T17:24:01Z",
        "updated_at": "2016-10-27T09:26:17Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/106#discussion_r85175244",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/106",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85175244"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/106#discussion_r85175244"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/106"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85176108",
        "pull_request_review_id": 5906589,
        "id": 85176108,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1MTc2MTA4",
        "diff_hunk": "@@ -86,21 +87,25 @@ NS_ASSUME_NONNULL_BEGIN\n  *\n  *  @param viewController The view controller in which a component is about to appear\n  *  @param componentModel The model of the component that is about to appear\n+ *  @param layoutTraits The layou traits of the component that is about to appear",
        "path": "include/HubFramework/HUBViewController.h",
        "position": null,
        "original_position": 12,
        "commit_id": "c9c33421d96ba2c134f8a915fa8c90291be6fc42",
        "original_commit_id": "926c98baf7da85862c9dbe452f024ecb82e21722",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ah nice find! \ud83d\udc4d \n",
        "created_at": "2016-10-26T17:28:00Z",
        "updated_at": "2016-10-27T09:26:17Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/106#discussion_r85176108",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/106",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85176108"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/106#discussion_r85176108"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/106"
            }
        },
        "in_reply_to_id": 85173663
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85176178",
        "pull_request_review_id": 5906655,
        "id": 85176178,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1MTc2MTc4",
        "diff_hunk": "@@ -1126,17 +1131,21 @@ - (void)testComponentNotifiedOfViewWillAppearWhenCellIsDisplayed\n     [collectionViewDelegate collectionView:self.collectionView willDisplayCell:cell forItemAtIndexPath:indexPath];\n     [collectionViewDelegate collectionView:self.collectionView willDisplayCell:cell forItemAtIndexPath:indexPath];\n     \n-    XCTAssertEqual(self.component.numberOfAppearances, (NSUInteger)1);\n-    XCTAssertEqual(self.componentModelsFromAppearanceDelegateMethod.count, (NSUInteger)1);\n+    XCTAssertEqual(self.component.numberOfAppearances, 1u);",
        "path": "tests/HUBViewControllerTests.m",
        "position": 34,
        "original_position": 34,
        "commit_id": "c9c33421d96ba2c134f8a915fa8c90291be6fc42",
        "original_commit_id": "926c98baf7da85862c9dbe452f024ecb82e21722",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@cerihughes taught me about it! So awesome \ud83d\ude04 \n",
        "created_at": "2016-10-26T17:28:17Z",
        "updated_at": "2016-10-27T09:26:17Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/106#discussion_r85176178",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/106",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85176178"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/106#discussion_r85176178"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/106"
            }
        },
        "in_reply_to_id": 85175244
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85616940",
        "pull_request_review_id": 6325857,
        "id": 85616940,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjE2OTQw",
        "diff_hunk": "@@ -0,0 +1,46 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#ifdef DEBUG",
        "path": "sources/HUBLiveContentOperation.h",
        "position": null,
        "original_position": 22,
        "commit_id": "2c869fa73360067f61df8ffea70f449a5d3b9e25",
        "original_commit_id": "e706a3a4c64ff5db02a50b3e7cc127a9c21b50f8",
        "user": {
            "login": "8W9aG",
            "id": 2834638,
            "node_id": "MDQ6VXNlcjI4MzQ2Mzg=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/2834638?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/8W9aG",
            "html_url": "https://github.com/8W9aG",
            "followers_url": "https://api.github.com/users/8W9aG/followers",
            "following_url": "https://api.github.com/users/8W9aG/following{/other_user}",
            "gists_url": "https://api.github.com/users/8W9aG/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/8W9aG/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/8W9aG/subscriptions",
            "organizations_url": "https://api.github.com/users/8W9aG/orgs",
            "repos_url": "https://api.github.com/users/8W9aG/repos",
            "events_url": "https://api.github.com/users/8W9aG/events{/privacy}",
            "received_events_url": "https://api.github.com/users/8W9aG/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Shouldn't this be if DEBUG rather than ifdef? DEBUG should be 1 presumably. Although perhaps make a different flag that gets set when DEBUG = 1?\n",
        "created_at": "2016-10-28T21:55:58Z",
        "updated_at": "2016-10-29T21:44:52Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/118#discussion_r85616940",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/118",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85616940"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/118#discussion_r85616940"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/118"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85640703",
        "pull_request_review_id": 6347781,
        "id": 85640703,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjQwNzAz",
        "diff_hunk": "@@ -0,0 +1,46 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#ifdef DEBUG",
        "path": "sources/HUBLiveContentOperation.h",
        "position": null,
        "original_position": 22,
        "commit_id": "2c869fa73360067f61df8ffea70f449a5d3b9e25",
        "original_commit_id": "e706a3a4c64ff5db02a50b3e7cc127a9c21b50f8",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "No if you do that then the build will fail when compiled for release (see https://travis-ci.org/spotify/HubFramework/jobs/171415875) where the build failed because `/Users/travis/build/spotify/HubFramework/sources/HUBLiveContentOperation.m:22:5: 'DEBUG' is not defined, evaluates to 0 [-Werror,-Wundef]`.\n",
        "created_at": "2016-10-29T14:10:00Z",
        "updated_at": "2016-10-29T21:44:52Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/118#discussion_r85640703",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/118",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85640703"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/118#discussion_r85640703"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/118"
            }
        },
        "in_reply_to_id": 85616940
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85642950",
        "pull_request_review_id": 6349709,
        "id": 85642950,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjQyOTUw",
        "diff_hunk": "@@ -0,0 +1,46 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#ifdef DEBUG",
        "path": "sources/HUBLiveContentOperation.h",
        "position": null,
        "original_position": 22,
        "commit_id": "2c869fa73360067f61df8ffea70f449a5d3b9e25",
        "original_commit_id": "e706a3a4c64ff5db02a50b3e7cc127a9c21b50f8",
        "user": {
            "login": "8W9aG",
            "id": 2834638,
            "node_id": "MDQ6VXNlcjI4MzQ2Mzg=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/2834638?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/8W9aG",
            "html_url": "https://github.com/8W9aG",
            "followers_url": "https://api.github.com/users/8W9aG/followers",
            "following_url": "https://api.github.com/users/8W9aG/following{/other_user}",
            "gists_url": "https://api.github.com/users/8W9aG/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/8W9aG/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/8W9aG/subscriptions",
            "organizations_url": "https://api.github.com/users/8W9aG/orgs",
            "repos_url": "https://api.github.com/users/8W9aG/repos",
            "events_url": "https://api.github.com/users/8W9aG/events{/privacy}",
            "received_events_url": "https://api.github.com/users/8W9aG/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "If that is the case shouldn't we do ifdef then if rather ifdef only? What if DEBUG=0, doesn't that mean DEBUG isn't on semantically?\n",
        "created_at": "2016-10-29T15:53:09Z",
        "updated_at": "2016-10-29T21:44:52Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/118#discussion_r85642950",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/118",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85642950"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/118#discussion_r85642950"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/118"
            }
        },
        "in_reply_to_id": 85616940
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85642958",
        "pull_request_review_id": 6349717,
        "id": 85642958,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjQyOTU4",
        "diff_hunk": "@@ -0,0 +1,46 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#ifdef DEBUG",
        "path": "sources/HUBLiveContentOperation.h",
        "position": null,
        "original_position": 22,
        "commit_id": "2c869fa73360067f61df8ffea70f449a5d3b9e25",
        "original_commit_id": "e706a3a4c64ff5db02a50b3e7cc127a9c21b50f8",
        "user": {
            "login": "8W9aG",
            "id": 2834638,
            "node_id": "MDQ6VXNlcjI4MzQ2Mzg=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/2834638?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/8W9aG",
            "html_url": "https://github.com/8W9aG",
            "followers_url": "https://api.github.com/users/8W9aG/followers",
            "following_url": "https://api.github.com/users/8W9aG/following{/other_user}",
            "gists_url": "https://api.github.com/users/8W9aG/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/8W9aG/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/8W9aG/subscriptions",
            "organizations_url": "https://api.github.com/users/8W9aG/orgs",
            "repos_url": "https://api.github.com/users/8W9aG/repos",
            "events_url": "https://api.github.com/users/8W9aG/events{/privacy}",
            "received_events_url": "https://api.github.com/users/8W9aG/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Better yet create a header where ifndef DEBUG then define it to 0?\n",
        "created_at": "2016-10-29T15:53:31Z",
        "updated_at": "2016-10-29T21:44:52Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/118#discussion_r85642958",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/118",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85642958"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/118#discussion_r85642958"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/118"
            }
        },
        "in_reply_to_id": 85616940
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85642960",
        "pull_request_review_id": 6349720,
        "id": 85642960,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjQyOTYw",
        "diff_hunk": "@@ -0,0 +1,46 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#ifdef DEBUG",
        "path": "sources/HUBLiveContentOperation.h",
        "position": null,
        "original_position": 22,
        "commit_id": "2c869fa73360067f61df8ffea70f449a5d3b9e25",
        "original_commit_id": "e706a3a4c64ff5db02a50b3e7cc127a9c21b50f8",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Good idea - I'll do that \ud83d\udc4d \n",
        "created_at": "2016-10-29T15:53:47Z",
        "updated_at": "2016-10-29T21:44:52Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/118#discussion_r85642960",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/118",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85642960"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/118#discussion_r85642960"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/118"
            }
        },
        "in_reply_to_id": 85616940
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85657701",
        "pull_request_review_id": 6361993,
        "id": 85657701,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjU3NzAx",
        "diff_hunk": "@@ -64,16 +64,36 @@ class SocketClient {\n             return\n         }\n         \n+        switch stream.streamStatus {\n+        case .notOpen:\n+            printError(message: \"Stream is not open\")\n+        case .opening, .writing:\n+            DispatchQueue(label: \"Awaiting stream setup\").async {",
        "path": "live/sources/SocketClient.swift",
        "position": null,
        "original_position": 8,
        "commit_id": "26a631df9780eb17f368e065f6a5b4357e701a12",
        "original_commit_id": "1ad111ed8ec56efd1cefec5d95341d4ad23317bc",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Wouldn't it be better to create a dedicated queue when initializing or using the global queue rather than creating a new one each write?\n",
        "created_at": "2016-10-30T11:19:23Z",
        "updated_at": "2016-10-30T11:27:25Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/120#discussion_r85657701",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/120",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85657701"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/120#discussion_r85657701"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/120"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85657780",
        "pull_request_review_id": 6362056,
        "id": 85657780,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjU3Nzgw",
        "diff_hunk": "@@ -64,16 +64,36 @@ class SocketClient {\n             return\n         }\n         \n+        switch stream.streamStatus {\n+        case .notOpen:\n+            printError(message: \"Stream is not open\")\n+        case .opening, .writing:\n+            DispatchQueue(label: \"Awaiting stream setup\").async {",
        "path": "live/sources/SocketClient.swift",
        "position": null,
        "original_position": 8,
        "commit_id": "26a631df9780eb17f368e065f6a5b4357e701a12",
        "original_commit_id": "1ad111ed8ec56efd1cefec5d95341d4ad23317bc",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Sure, I can do that. Can lazily initialize it when needed. Good idea \ud83d\udc4d \n",
        "created_at": "2016-10-30T11:24:06Z",
        "updated_at": "2016-10-30T11:27:25Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/120#discussion_r85657780",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/120",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85657780"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/120#discussion_r85657780"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/120"
            }
        },
        "in_reply_to_id": 85657701
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85657798",
        "pull_request_review_id": 6362072,
        "id": 85657798,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjU3Nzk4",
        "diff_hunk": "@@ -64,16 +64,36 @@ class SocketClient {\n             return\n         }\n         \n+        switch stream.streamStatus {\n+        case .notOpen:\n+            printError(message: \"Stream is not open\")\n+        case .opening, .writing:\n+            DispatchQueue(label: \"Awaiting stream setup\").async {",
        "path": "live/sources/SocketClient.swift",
        "position": null,
        "original_position": 8,
        "commit_id": "26a631df9780eb17f368e065f6a5b4357e701a12",
        "original_commit_id": "1ad111ed8ec56efd1cefec5d95341d4ad23317bc",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Awesome \ud83d\udc4c\n",
        "created_at": "2016-10-30T11:25:37Z",
        "updated_at": "2016-10-30T11:27:25Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/120#discussion_r85657798",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/120",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85657798"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/120#discussion_r85657798"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/120"
            }
        },
        "in_reply_to_id": 85657701
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85647155",
        "pull_request_review_id": 6353152,
        "id": 85647155,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjQ3MTU1",
        "diff_hunk": "@@ -26,10 +26,30 @@\n \n @protocol HUBComponentImageDataBuilder;\n @protocol HUBComponentTargetBuilder;\n+@protocol HUBComponentModelBuilder;\n \n NS_ASSUME_NONNULL_BEGIN\n \n /**\n+ *  Protocol defining the public delegate API for a builder that builds component model objects",
        "path": "include/HubFramework/HUBComponentModelBuilder.h",
        "position": null,
        "original_position": 9,
        "commit_id": "fb2b5a7a01e2bb646939fb876f6b8e8f35b6076e",
        "original_commit_id": "312458cbe2129f6d4f4489e83f730df7c0b5ed4f",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The delegate should not be part of the public API, as it's only needed internally. So move this to `HUBComponentModelBuilderImplementation.h`.\n",
        "created_at": "2016-10-29T20:01:01Z",
        "updated_at": "2016-10-31T15:52:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/117#discussion_r85647155",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/117",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85647155"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/117#discussion_r85647155"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/117"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85647162",
        "pull_request_review_id": 6353152,
        "id": 85647162,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjQ3MTYy",
        "diff_hunk": "@@ -41,6 +61,10 @@ NS_ASSUME_NONNULL_BEGIN\n  */\n @protocol HUBComponentModelBuilder <HUBJSONCompatibleBuilder>\n \n+#pragma mark - Delegate\n+\n+@property (nonatomic, weak) id<HUBComponentModelBuilderDelegate> delegate;",
        "path": "include/HubFramework/HUBComponentModelBuilder.h",
        "position": null,
        "original_position": 37,
        "commit_id": "fb2b5a7a01e2bb646939fb876f6b8e8f35b6076e",
        "original_commit_id": "312458cbe2129f6d4f4489e83f730df7c0b5ed4f",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Document this property (but should also be moved to the implementation class)\n",
        "created_at": "2016-10-29T20:01:24Z",
        "updated_at": "2016-10-31T15:52:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/117#discussion_r85647162",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/117",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85647162"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/117#discussion_r85647162"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/117"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85647170",
        "pull_request_review_id": 6353152,
        "id": 85647170,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjQ3MTcw",
        "diff_hunk": "@@ -191,6 +215,13 @@ NS_ASSUME_NONNULL_BEGIN\n - (id<HUBComponentModelBuilder>)builderForChildWithIdentifier:(NSString *)identifier NS_SWIFT_NAME(builderForChild(withIdentifier:));\n \n /**\n+ *  Return child component model builders with a certain group identifier\n+ *\n+ *  @return All the existing child component model builders with the same group identifier, in the order that they were created.\n+ */\n+- (nullable NSArray<id<HUBComponentModelBuilder>> *)buildersForChildrenInGroupWithIdentifier:(NSString *)groupIdentifier;",
        "path": "include/HubFramework/HUBComponentModelBuilder.h",
        "position": null,
        "original_position": 50,
        "commit_id": "fb2b5a7a01e2bb646939fb876f6b8e8f35b6076e",
        "original_commit_id": "312458cbe2129f6d4f4489e83f730df7c0b5ed4f",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Missing parameter documentation for `groupIdentifier`\n",
        "created_at": "2016-10-29T20:01:55Z",
        "updated_at": "2016-10-31T15:52:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/117#discussion_r85647170",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/117",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85647170"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/117#discussion_r85647170"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/117"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85647177",
        "pull_request_review_id": 6353152,
        "id": 85647177,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjQ3MTc3",
        "diff_hunk": "@@ -48,13 +48,15 @@ @interface HUBComponentModelBuilderImplementation ()\n @property (nonatomic, strong, nullable) HUBComponentTargetBuilderImplementation *targetBuilderImplementation;\n @property (nonatomic, strong, readonly) NSMutableDictionary<NSString *, HUBComponentModelBuilderImplementation *> *childBuilders;\n @property (nonatomic, strong, readonly) NSMutableArray<NSString *> *childIdentifierOrder;\n+@property (nonatomic, strong, nullable) NSMutableDictionary<NSString *, NSMutableArray<id<HUBComponentModelBuilder>> *> *childBuildersByGroupIdentifier;",
        "path": "sources/HUBComponentModelBuilderImplementation.m",
        "position": null,
        "original_position": 13,
        "commit_id": "fb2b5a7a01e2bb646939fb876f6b8e8f35b6076e",
        "original_commit_id": "312458cbe2129f6d4f4489e83f730df7c0b5ed4f",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Since this is created in the initializer, it should be `readonly` instead of `nullable`.\n",
        "created_at": "2016-10-29T20:02:26Z",
        "updated_at": "2016-10-31T15:52:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/117#discussion_r85647177",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/117",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85647177"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/117#discussion_r85647177"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/117"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85647208",
        "pull_request_review_id": 6353152,
        "id": 85647208,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjQ3MjA4",
        "diff_hunk": "@@ -259,19 +262,33 @@ - (BOOL)builderExistsForChildWithIdentifier:(NSString *)identifier\n \n - (id<HUBComponentModelBuilder>)builderForChildWithIdentifier:(NSString *)identifier\n {\n-    return [self getOrCreateBuilderForChildWithIdentifier:identifier];\n+    return [self getOrCreateBuilderForChildWithIdentifier:identifier groupIdentifier:nil];\n+}\n+\n+- (nullable NSArray<id<HUBComponentModelBuilder>> *)buildersForChildrenInGroupWithIdentifier:(NSString *)groupIdentifier\n+{\n+    return self.childBuildersByGroupIdentifier[groupIdentifier];\n }\n \n - (void)removeBuilderForChildWithIdentifier:(NSString *)identifier\n {\n+    id<HUBComponentModelBuilder> builder = self.childBuilders[identifier];\n     self.childBuilders[identifier] = nil;\n     [self.childIdentifierOrder removeObject:identifier];\n+    for (NSString *groupIdentifier in self.childBuildersByGroupIdentifier) {",
        "path": "sources/HUBComponentModelBuilderImplementation.m",
        "position": null,
        "original_position": 51,
        "commit_id": "fb2b5a7a01e2bb646939fb876f6b8e8f35b6076e",
        "original_commit_id": "312458cbe2129f6d4f4489e83f730df7c0b5ed4f",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\ud83c\udfa8 Leave a blank line before all control statements (such as `if`, `for` etc).\n",
        "created_at": "2016-10-29T20:04:12Z",
        "updated_at": "2016-10-31T15:52:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/117#discussion_r85647208",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/117",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85647208"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/117#discussion_r85647208"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/117"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85647237",
        "pull_request_review_id": 6353152,
        "id": 85647237,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjQ3MjM3",
        "diff_hunk": "@@ -441,7 +459,19 @@ - (id)copyWithZone:(nullable NSZone *)zone\n     for (NSString * const childIdentifier in self.childBuilders) {\n         copy.childBuilders[childIdentifier] = [self.childBuilders[childIdentifier] copy];\n     }\n-    \n+\n+    for (NSString * const groupIdentifier in self.childBuildersByGroupIdentifier) {\n+        NSArray *childBuildersInGroup = self.childBuildersByGroupIdentifier[groupIdentifier];\n+        NSMutableArray *childBuildersInGroupToSet = [NSMutableArray array];\n+        for (id<HUBComponentModelBuilder> childBuilder in childBuildersInGroup) {",
        "path": "sources/HUBComponentModelBuilderImplementation.m",
        "position": null,
        "original_position": 96,
        "commit_id": "fb2b5a7a01e2bb646939fb876f6b8e8f35b6076e",
        "original_commit_id": "312458cbe2129f6d4f4489e83f730df7c0b5ed4f",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\ud83c\udfa8 Add a new line above this statement\n",
        "created_at": "2016-10-29T20:05:38Z",
        "updated_at": "2016-10-31T15:52:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/117#discussion_r85647237",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/117",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85647237"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/117#discussion_r85647237"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/117"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85647239",
        "pull_request_review_id": 6353152,
        "id": 85647239,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjQ3MjM5",
        "diff_hunk": "@@ -441,7 +459,19 @@ - (id)copyWithZone:(nullable NSZone *)zone\n     for (NSString * const childIdentifier in self.childBuilders) {\n         copy.childBuilders[childIdentifier] = [self.childBuilders[childIdentifier] copy];\n     }\n-    \n+\n+    for (NSString * const groupIdentifier in self.childBuildersByGroupIdentifier) {\n+        NSArray *childBuildersInGroup = self.childBuildersByGroupIdentifier[groupIdentifier];\n+        NSMutableArray *childBuildersInGroupToSet = [NSMutableArray array];\n+        for (id<HUBComponentModelBuilder> childBuilder in childBuildersInGroup) {\n+            id<HUBComponentModelBuilder> builderToAdd = copy.childBuilders[childBuilder.modelIdentifier];\n+            if (builderToAdd) {",
        "path": "sources/HUBComponentModelBuilderImplementation.m",
        "position": null,
        "original_position": 98,
        "commit_id": "fb2b5a7a01e2bb646939fb876f6b8e8f35b6076e",
        "original_commit_id": "312458cbe2129f6d4f4489e83f730df7c0b5ed4f",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\ud83c\udfa8 Add a new line above this statement\n",
        "created_at": "2016-10-29T20:05:51Z",
        "updated_at": "2016-10-31T15:52:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/117#discussion_r85647239",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/117",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85647239"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/117#discussion_r85647239"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/117"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85647242",
        "pull_request_review_id": 6353152,
        "id": 85647242,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjQ3MjQy",
        "diff_hunk": "@@ -441,7 +459,19 @@ - (id)copyWithZone:(nullable NSZone *)zone\n     for (NSString * const childIdentifier in self.childBuilders) {\n         copy.childBuilders[childIdentifier] = [self.childBuilders[childIdentifier] copy];\n     }\n-    \n+\n+    for (NSString * const groupIdentifier in self.childBuildersByGroupIdentifier) {\n+        NSArray *childBuildersInGroup = self.childBuildersByGroupIdentifier[groupIdentifier];\n+        NSMutableArray *childBuildersInGroupToSet = [NSMutableArray array];\n+        for (id<HUBComponentModelBuilder> childBuilder in childBuildersInGroup) {\n+            id<HUBComponentModelBuilder> builderToAdd = copy.childBuilders[childBuilder.modelIdentifier];\n+            if (builderToAdd) {",
        "path": "sources/HUBComponentModelBuilderImplementation.m",
        "position": null,
        "original_position": 98,
        "commit_id": "fb2b5a7a01e2bb646939fb876f6b8e8f35b6076e",
        "original_commit_id": "312458cbe2129f6d4f4489e83f730df7c0b5ed4f",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\ud83c\udfa8 Explcitly check against `nil`?\n",
        "created_at": "2016-10-29T20:06:04Z",
        "updated_at": "2016-10-31T15:52:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/117#discussion_r85647242",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/117",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85647242"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/117#discussion_r85647242"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/117"
            }
        },
        "in_reply_to_id": 85647239
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85647275",
        "pull_request_review_id": 6353152,
        "id": 85647275,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjQ3Mjc1",
        "diff_hunk": "@@ -441,7 +459,19 @@ - (id)copyWithZone:(nullable NSZone *)zone\n     for (NSString * const childIdentifier in self.childBuilders) {\n         copy.childBuilders[childIdentifier] = [self.childBuilders[childIdentifier] copy];\n     }\n-    \n+\n+    for (NSString * const groupIdentifier in self.childBuildersByGroupIdentifier) {",
        "path": "sources/HUBComponentModelBuilderImplementation.m",
        "position": null,
        "original_position": 93,
        "commit_id": "fb2b5a7a01e2bb646939fb876f6b8e8f35b6076e",
        "original_commit_id": "312458cbe2129f6d4f4489e83f730df7c0b5ed4f",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You could make this more efficient by moving re-building the `childBuildersByGroupIdentifier` map into the lop above, where we are already iterating through all child builders.\n",
        "created_at": "2016-10-29T20:08:06Z",
        "updated_at": "2016-10-31T15:52:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/117#discussion_r85647275",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/117",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85647275"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/117#discussion_r85647275"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/117"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85647286",
        "pull_request_review_id": 6353152,
        "id": 85647286,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjQ3Mjg2",
        "diff_hunk": "@@ -532,7 +562,21 @@ - (HUBComponentImageDataBuilderImplementation *)getOrCreateBuilderForCustomImage\n     return newBuilder;\n }\n \n-- (HUBComponentModelBuilderImplementation *)getOrCreateBuilderForChildWithIdentifier:(nullable NSString *)identifier\n+#pragma clang diagnostic push\n+#pragma clang diagnostic ignored \"-Wdirect-ivar-access\"",
        "path": "sources/HUBComponentModelBuilderImplementation.m",
        "position": null,
        "original_position": 114,
        "commit_id": "fb2b5a7a01e2bb646939fb876f6b8e8f35b6076e",
        "original_commit_id": "312458cbe2129f6d4f4489e83f730df7c0b5ed4f",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Move this into the method instead, just around where you need it, so it's clear why you are doing this.\n",
        "created_at": "2016-10-29T20:08:30Z",
        "updated_at": "2016-10-31T15:52:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/117#discussion_r85647286",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/117",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85647286"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/117#discussion_r85647286"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/117"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85647310",
        "pull_request_review_id": 6353152,
        "id": 85647310,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjQ3MzEw",
        "diff_hunk": "@@ -550,9 +594,18 @@ - (HUBComponentModelBuilderImplementation *)getOrCreateBuilderForChildWithIdenti\n                                                                                                                       iconImageResolver:self.iconImageResolver\n                                                                                                                    mainImageDataBuilder:nil\n                                                                                                              backgroundImageDataBuilder:nil];\n+    newBuilder.delegate = self;\n     \n     self.childBuilders[newBuilder.modelIdentifier] = newBuilder;\n     [self.childIdentifierOrder addObject:newBuilder.modelIdentifier];\n+    if (groupIdentifier) {",
        "path": "sources/HUBComponentModelBuilderImplementation.m",
        "position": null,
        "original_position": 139,
        "commit_id": "fb2b5a7a01e2bb646939fb876f6b8e8f35b6076e",
        "original_commit_id": "312458cbe2129f6d4f4489e83f730df7c0b5ed4f",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\ud83c\udfa8 New line above, and explicitly compare against `nil`\n",
        "created_at": "2016-10-29T20:09:37Z",
        "updated_at": "2016-10-31T15:52:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/117#discussion_r85647310",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/117",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85647310"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/117#discussion_r85647310"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/117"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85647319",
        "pull_request_review_id": 6353152,
        "id": 85647319,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjQ3MzE5",
        "diff_hunk": "@@ -550,9 +594,18 @@ - (HUBComponentModelBuilderImplementation *)getOrCreateBuilderForChildWithIdenti\n                                                                                                                       iconImageResolver:self.iconImageResolver\n                                                                                                                    mainImageDataBuilder:nil\n                                                                                                              backgroundImageDataBuilder:nil];\n+    newBuilder.delegate = self;\n     \n     self.childBuilders[newBuilder.modelIdentifier] = newBuilder;\n     [self.childIdentifierOrder addObject:newBuilder.modelIdentifier];\n+    if (groupIdentifier) {\n+        NSString *nonNilGroupIdentifier = groupIdentifier;\n+        if (!self.childBuildersByGroupIdentifier[nonNilGroupIdentifier]) {",
        "path": "sources/HUBComponentModelBuilderImplementation.m",
        "position": null,
        "original_position": 141,
        "commit_id": "fb2b5a7a01e2bb646939fb876f6b8e8f35b6076e",
        "original_commit_id": "312458cbe2129f6d4f4489e83f730df7c0b5ed4f",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\ud83c\udfa8 New line above, and explicitly compare against `nil`\n",
        "created_at": "2016-10-29T20:10:04Z",
        "updated_at": "2016-10-31T15:52:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/117#discussion_r85647319",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/117",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85647319"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/117#discussion_r85647319"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/117"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85647338",
        "pull_request_review_id": 6353152,
        "id": 85647338,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjQ3MzM4",
        "diff_hunk": "@@ -550,9 +594,18 @@ - (HUBComponentModelBuilderImplementation *)getOrCreateBuilderForChildWithIdenti\n                                                                                                                       iconImageResolver:self.iconImageResolver\n                                                                                                                    mainImageDataBuilder:nil\n                                                                                                              backgroundImageDataBuilder:nil];\n+    newBuilder.delegate = self;\n     \n     self.childBuilders[newBuilder.modelIdentifier] = newBuilder;\n     [self.childIdentifierOrder addObject:newBuilder.modelIdentifier];\n+    if (groupIdentifier) {\n+        NSString *nonNilGroupIdentifier = groupIdentifier;\n+        if (!self.childBuildersByGroupIdentifier[nonNilGroupIdentifier]) {",
        "path": "sources/HUBComponentModelBuilderImplementation.m",
        "position": null,
        "original_position": 141,
        "commit_id": "fb2b5a7a01e2bb646939fb876f6b8e8f35b6076e",
        "original_commit_id": "312458cbe2129f6d4f4489e83f730df7c0b5ed4f",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Do you need this? The delegate will be called whenever the group identifier is changed anyway, which will add the builder to the right group.\n",
        "created_at": "2016-10-29T20:11:08Z",
        "updated_at": "2016-10-31T15:52:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/117#discussion_r85647338",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/117",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85647338"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/117#discussion_r85647338"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/117"
            }
        },
        "in_reply_to_id": 85647319
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85647351",
        "pull_request_review_id": 6353152,
        "id": 85647351,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjQ3MzUx",
        "diff_hunk": "@@ -26,10 +26,30 @@\n \n @protocol HUBComponentImageDataBuilder;\n @protocol HUBComponentTargetBuilder;\n+@protocol HUBComponentModelBuilder;\n \n NS_ASSUME_NONNULL_BEGIN\n \n /**\n+ *  Protocol defining the public delegate API for a builder that builds component model objects\n+ *\n+ *  This delegate protocol can be implemented to react to changes happening to a \n+ *  component model builder.\n+ */\n+@protocol HUBComponentModelBuilderDelegate <NSObject>\n+\n+/**\n+ *  Notifies the delegate that the group identifier for a component model builder did change\n+ *\n+ *  @param componentModelBuilder The component model builder whose group identifier did change\n+ *  @param groupIdentifier The new group identifier\n+ *  @param oldGroupIdentifier The old group identifier\n+ */\n+- (void)componentModelBuilder:(id<HUBComponentModelBuilder>)componentModelBuilder groupIdentifierDidChange:(nullable NSString *)groupIdentifier oldGroupIdentifier:(nullable NSString *)oldGroupIdentifier;",
        "path": "include/HubFramework/HUBComponentModelBuilder.h",
        "position": null,
        "original_position": 23,
        "commit_id": "fb2b5a7a01e2bb646939fb876f6b8e8f35b6076e",
        "original_commit_id": "312458cbe2129f6d4f4489e83f730df7c0b5ed4f",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "To make it crystal clear, how about renaming `groupIdentifier` to `newGroupIdentifier`?\n",
        "created_at": "2016-10-29T20:11:59Z",
        "updated_at": "2016-10-31T15:52:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/117#discussion_r85647351",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/117",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85647351"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/117#discussion_r85647351"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/117"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85647369",
        "pull_request_review_id": 6353152,
        "id": 85647369,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjQ3MzY5",
        "diff_hunk": "@@ -574,6 +627,26 @@ - (HUBComponentModelBuilderImplementation *)getOrCreateBuilderForChildWithIdenti\n     return [[HUBIconImplementation alloc] initWithIdentifier:iconIdentifier imageResolver:iconImageResolver isPlaceholder:forPlaceholder];\n }\n \n+#pragma mark - HUBComponentModelBuilderDelegate\n+\n+- (void)componentModelBuilder:(id<HUBComponentModelBuilder>)componentModelBuilder groupIdentifierDidChange:(nullable NSString *)groupIdentifier oldGroupIdentifier:(nullable NSString *)oldGroupIdentifier\n+{\n+    if (oldGroupIdentifier) {",
        "path": "sources/HUBComponentModelBuilderImplementation.m",
        "position": null,
        "original_position": 158,
        "commit_id": "fb2b5a7a01e2bb646939fb876f6b8e8f35b6076e",
        "original_commit_id": "312458cbe2129f6d4f4489e83f730df7c0b5ed4f",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\ud83c\udfa8 Compare against `nil`\n",
        "created_at": "2016-10-29T20:12:32Z",
        "updated_at": "2016-10-31T15:52:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/117#discussion_r85647369",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/117",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85647369"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/117#discussion_r85647369"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/117"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85647372",
        "pull_request_review_id": 6353152,
        "id": 85647372,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjQ3Mzcy",
        "diff_hunk": "@@ -574,6 +627,26 @@ - (HUBComponentModelBuilderImplementation *)getOrCreateBuilderForChildWithIdenti\n     return [[HUBIconImplementation alloc] initWithIdentifier:iconIdentifier imageResolver:iconImageResolver isPlaceholder:forPlaceholder];\n }\n \n+#pragma mark - HUBComponentModelBuilderDelegate\n+\n+- (void)componentModelBuilder:(id<HUBComponentModelBuilder>)componentModelBuilder groupIdentifierDidChange:(nullable NSString *)groupIdentifier oldGroupIdentifier:(nullable NSString *)oldGroupIdentifier\n+{\n+    if (oldGroupIdentifier) {\n+        NSString *nonNilOldGroupIdentifier = oldGroupIdentifier;\n+        NSMutableArray *childBuildersInOldGroup = self.childBuildersByGroupIdentifier[nonNilOldGroupIdentifier];\n+        [childBuildersInOldGroup removeObject:componentModelBuilder];\n+    }\n+\n+    if  (groupIdentifier) {",
        "path": "sources/HUBComponentModelBuilderImplementation.m",
        "position": null,
        "original_position": 164,
        "commit_id": "fb2b5a7a01e2bb646939fb876f6b8e8f35b6076e",
        "original_commit_id": "312458cbe2129f6d4f4489e83f730df7c0b5ed4f",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\ud83c\udfa8 Compare against `nil`\n",
        "created_at": "2016-10-29T20:12:35Z",
        "updated_at": "2016-10-31T15:52:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/117#discussion_r85647372",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/117",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85647372"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/117#discussion_r85647372"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/117"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85647389",
        "pull_request_review_id": 6353152,
        "id": 85647389,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjQ3Mzg5",
        "diff_hunk": "@@ -592,4 +592,88 @@ - (void)testCopying\n     XCTAssertEqualObjects(copiedCustomImageDataBuilder.placeholderIconIdentifier, @\"customPlaceholder\");\n }\n \n+- (void)testBuildersForChildrenInGroupWhenAddingChildBuilder\n+{\n+    NSString * const firstChildModelIdentifier = @\"firstIdentifier\";\n+    NSString * const secondChildModelIdentifier = @\"secondIdentifier\";\n+    NSString * const firstChildGroupIdentifier = @\"firstGroup\";\n+    NSString * const secondChildGroupIdentifier = @\"secondGroup\";\n+\n+    id<HUBComponentModelBuilder> const childBuilder = [self.builder builderForChildWithIdentifier:firstChildModelIdentifier];\n+    childBuilder.groupIdentifier = firstChildGroupIdentifier;\n+    id<HUBComponentModelBuilder> const childBuilder2 = [self.builder builderForChildWithIdentifier:secondChildModelIdentifier];\n+    childBuilder2.groupIdentifier = secondChildGroupIdentifier;\n+\n+    NSArray *buildersForChildrenInGroup = [self.builder buildersForChildrenInGroupWithIdentifier:firstChildGroupIdentifier];",
        "path": "tests/HUBComponentModelBuilderTests.m",
        "position": null,
        "original_position": 16,
        "commit_id": "fb2b5a7a01e2bb646939fb876f6b8e8f35b6076e",
        "original_commit_id": "312458cbe2129f6d4f4489e83f730df7c0b5ed4f",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You're only verifying `firstChildGroupIdentifier`. How about verifying the second one too?\n",
        "created_at": "2016-10-29T20:13:29Z",
        "updated_at": "2016-10-31T15:52:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/117#discussion_r85647389",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/117",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85647389"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/117#discussion_r85647389"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/117"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85647464",
        "pull_request_review_id": 6353152,
        "id": 85647464,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjQ3NDY0",
        "diff_hunk": "@@ -592,4 +592,88 @@ - (void)testCopying\n     XCTAssertEqualObjects(copiedCustomImageDataBuilder.placeholderIconIdentifier, @\"customPlaceholder\");\n }\n \n+- (void)testBuildersForChildrenInGroupWhenAddingChildBuilder\n+{\n+    NSString * const firstChildModelIdentifier = @\"firstIdentifier\";\n+    NSString * const secondChildModelIdentifier = @\"secondIdentifier\";\n+    NSString * const firstChildGroupIdentifier = @\"firstGroup\";\n+    NSString * const secondChildGroupIdentifier = @\"secondGroup\";\n+\n+    id<HUBComponentModelBuilder> const childBuilder = [self.builder builderForChildWithIdentifier:firstChildModelIdentifier];\n+    childBuilder.groupIdentifier = firstChildGroupIdentifier;\n+    id<HUBComponentModelBuilder> const childBuilder2 = [self.builder builderForChildWithIdentifier:secondChildModelIdentifier];\n+    childBuilder2.groupIdentifier = secondChildGroupIdentifier;\n+\n+    NSArray *buildersForChildrenInGroup = [self.builder buildersForChildrenInGroupWithIdentifier:firstChildGroupIdentifier];\n+    XCTAssertTrue(buildersForChildrenInGroup.count == 1);\n+    XCTAssertEqualObjects(buildersForChildrenInGroup.firstObject, childBuilder);\n+}\n+\n+- (void)testBuildersForChildrenInGroupWhenRemovingChildBuilder\n+{\n+    NSString * const firstChildModelIdentifier = @\"firstIdentifier\";\n+    NSString * const secondChildModelIdentifier = @\"secondIdentifier\";\n+    NSString * const firstChildGroupIdentifier = @\"firstGroup\";\n+    NSString * const secondChildGroupIdentifier = @\"secondGroup\";\n+\n+    id<HUBComponentModelBuilder> const childBuilder = [self.builder builderForChildWithIdentifier:firstChildModelIdentifier];\n+    childBuilder.groupIdentifier = firstChildGroupIdentifier;\n+    id<HUBComponentModelBuilder> const childBuilder2 = [self.builder builderForChildWithIdentifier:secondChildModelIdentifier];\n+    childBuilder2.groupIdentifier = secondChildGroupIdentifier;\n+\n+    [self.builder removeBuilderForChildWithIdentifier:firstChildModelIdentifier];\n+\n+    NSArray *buildersForFirstGroup = [self.builder buildersForChildrenInGroupWithIdentifier:firstChildGroupIdentifier];\n+    NSArray *buildersForSecondGroup = [self.builder buildersForChildrenInGroupWithIdentifier:secondChildGroupIdentifier];\n+\n+    XCTAssertTrue(buildersForFirstGroup.count == 0);",
        "path": "tests/HUBComponentModelBuilderTests.m",
        "position": null,
        "original_position": 38,
        "commit_id": "fb2b5a7a01e2bb646939fb876f6b8e8f35b6076e",
        "original_commit_id": "312458cbe2129f6d4f4489e83f730df7c0b5ed4f",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "How about using `XCTAssertNil` instead, since that's what the API tells us that it will return.\n",
        "created_at": "2016-10-29T20:15:04Z",
        "updated_at": "2016-10-31T15:52:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/117#discussion_r85647464",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/117",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85647464"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/117#discussion_r85647464"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/117"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85647479",
        "pull_request_review_id": 6353152,
        "id": 85647479,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjQ3NDc5",
        "diff_hunk": "@@ -592,4 +592,88 @@ - (void)testCopying\n     XCTAssertEqualObjects(copiedCustomImageDataBuilder.placeholderIconIdentifier, @\"customPlaceholder\");\n }\n \n+- (void)testBuildersForChildrenInGroupWhenAddingChildBuilder\n+{\n+    NSString * const firstChildModelIdentifier = @\"firstIdentifier\";\n+    NSString * const secondChildModelIdentifier = @\"secondIdentifier\";\n+    NSString * const firstChildGroupIdentifier = @\"firstGroup\";\n+    NSString * const secondChildGroupIdentifier = @\"secondGroup\";\n+\n+    id<HUBComponentModelBuilder> const childBuilder = [self.builder builderForChildWithIdentifier:firstChildModelIdentifier];\n+    childBuilder.groupIdentifier = firstChildGroupIdentifier;\n+    id<HUBComponentModelBuilder> const childBuilder2 = [self.builder builderForChildWithIdentifier:secondChildModelIdentifier];\n+    childBuilder2.groupIdentifier = secondChildGroupIdentifier;\n+\n+    NSArray *buildersForChildrenInGroup = [self.builder buildersForChildrenInGroupWithIdentifier:firstChildGroupIdentifier];\n+    XCTAssertTrue(buildersForChildrenInGroup.count == 1);\n+    XCTAssertEqualObjects(buildersForChildrenInGroup.firstObject, childBuilder);\n+}\n+\n+- (void)testBuildersForChildrenInGroupWhenRemovingChildBuilder\n+{\n+    NSString * const firstChildModelIdentifier = @\"firstIdentifier\";\n+    NSString * const secondChildModelIdentifier = @\"secondIdentifier\";\n+    NSString * const firstChildGroupIdentifier = @\"firstGroup\";\n+    NSString * const secondChildGroupIdentifier = @\"secondGroup\";\n+\n+    id<HUBComponentModelBuilder> const childBuilder = [self.builder builderForChildWithIdentifier:firstChildModelIdentifier];\n+    childBuilder.groupIdentifier = firstChildGroupIdentifier;\n+    id<HUBComponentModelBuilder> const childBuilder2 = [self.builder builderForChildWithIdentifier:secondChildModelIdentifier];\n+    childBuilder2.groupIdentifier = secondChildGroupIdentifier;\n+\n+    [self.builder removeBuilderForChildWithIdentifier:firstChildModelIdentifier];\n+\n+    NSArray *buildersForFirstGroup = [self.builder buildersForChildrenInGroupWithIdentifier:firstChildGroupIdentifier];\n+    NSArray *buildersForSecondGroup = [self.builder buildersForChildrenInGroupWithIdentifier:secondChildGroupIdentifier];\n+\n+    XCTAssertTrue(buildersForFirstGroup.count == 0);\n+    XCTAssertTrue(buildersForSecondGroup.count == 1);\n+    XCTAssertEqualObjects(buildersForSecondGroup.firstObject, childBuilder2);\n+}\n+\n+- (void)testBuildersForChildrenInGroupWhenRemovingAllChildBuilders\n+{\n+    NSString * const firstChildModelIdentifier = @\"firstIdentifier\";\n+    NSString * const secondChildModelIdentifier = @\"secondIdentifier\";\n+    NSString * const firstChildGroupIdentifier = @\"firstGroup\";\n+    NSString * const secondChildGroupIdentifier = @\"secondGroup\";\n+\n+    id<HUBComponentModelBuilder> const childBuilder = [self.builder builderForChildWithIdentifier:firstChildModelIdentifier];\n+    childBuilder.groupIdentifier = firstChildGroupIdentifier;\n+    id<HUBComponentModelBuilder> const childBuilder2 = [self.builder builderForChildWithIdentifier:secondChildModelIdentifier];\n+    childBuilder2.groupIdentifier = secondChildGroupIdentifier;\n+\n+    [self.builder removeAllChildBuilders];\n+\n+    NSArray *buildersInFirstGroup = [self.builder buildersForChildrenInGroupWithIdentifier:firstChildGroupIdentifier];\n+    NSArray *buildersInSecondGroup = [self.builder buildersForChildrenInGroupWithIdentifier:secondChildGroupIdentifier];\n+\n+    XCTAssertTrue(buildersInFirstGroup.count == 0);",
        "path": "tests/HUBComponentModelBuilderTests.m",
        "position": null,
        "original_position": 60,
        "commit_id": "fb2b5a7a01e2bb646939fb876f6b8e8f35b6076e",
        "original_commit_id": "312458cbe2129f6d4f4489e83f730df7c0b5ed4f",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Same here, use `XCTAssertNil` instead.\n",
        "created_at": "2016-10-29T20:15:42Z",
        "updated_at": "2016-10-31T15:52:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/117#discussion_r85647479",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/117",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85647479"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/117#discussion_r85647479"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/117"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85647488",
        "pull_request_review_id": 6353152,
        "id": 85647488,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjQ3NDg4",
        "diff_hunk": "@@ -592,4 +592,88 @@ - (void)testCopying\n     XCTAssertEqualObjects(copiedCustomImageDataBuilder.placeholderIconIdentifier, @\"customPlaceholder\");\n }\n \n+- (void)testBuildersForChildrenInGroupWhenAddingChildBuilder\n+{\n+    NSString * const firstChildModelIdentifier = @\"firstIdentifier\";\n+    NSString * const secondChildModelIdentifier = @\"secondIdentifier\";\n+    NSString * const firstChildGroupIdentifier = @\"firstGroup\";\n+    NSString * const secondChildGroupIdentifier = @\"secondGroup\";\n+\n+    id<HUBComponentModelBuilder> const childBuilder = [self.builder builderForChildWithIdentifier:firstChildModelIdentifier];\n+    childBuilder.groupIdentifier = firstChildGroupIdentifier;\n+    id<HUBComponentModelBuilder> const childBuilder2 = [self.builder builderForChildWithIdentifier:secondChildModelIdentifier];\n+    childBuilder2.groupIdentifier = secondChildGroupIdentifier;\n+\n+    NSArray *buildersForChildrenInGroup = [self.builder buildersForChildrenInGroupWithIdentifier:firstChildGroupIdentifier];\n+    XCTAssertTrue(buildersForChildrenInGroup.count == 1);\n+    XCTAssertEqualObjects(buildersForChildrenInGroup.firstObject, childBuilder);\n+}\n+\n+- (void)testBuildersForChildrenInGroupWhenRemovingChildBuilder\n+{\n+    NSString * const firstChildModelIdentifier = @\"firstIdentifier\";\n+    NSString * const secondChildModelIdentifier = @\"secondIdentifier\";\n+    NSString * const firstChildGroupIdentifier = @\"firstGroup\";\n+    NSString * const secondChildGroupIdentifier = @\"secondGroup\";\n+\n+    id<HUBComponentModelBuilder> const childBuilder = [self.builder builderForChildWithIdentifier:firstChildModelIdentifier];\n+    childBuilder.groupIdentifier = firstChildGroupIdentifier;\n+    id<HUBComponentModelBuilder> const childBuilder2 = [self.builder builderForChildWithIdentifier:secondChildModelIdentifier];\n+    childBuilder2.groupIdentifier = secondChildGroupIdentifier;\n+\n+    [self.builder removeBuilderForChildWithIdentifier:firstChildModelIdentifier];\n+\n+    NSArray *buildersForFirstGroup = [self.builder buildersForChildrenInGroupWithIdentifier:firstChildGroupIdentifier];\n+    NSArray *buildersForSecondGroup = [self.builder buildersForChildrenInGroupWithIdentifier:secondChildGroupIdentifier];\n+\n+    XCTAssertTrue(buildersForFirstGroup.count == 0);\n+    XCTAssertTrue(buildersForSecondGroup.count == 1);\n+    XCTAssertEqualObjects(buildersForSecondGroup.firstObject, childBuilder2);\n+}\n+\n+- (void)testBuildersForChildrenInGroupWhenRemovingAllChildBuilders\n+{\n+    NSString * const firstChildModelIdentifier = @\"firstIdentifier\";\n+    NSString * const secondChildModelIdentifier = @\"secondIdentifier\";\n+    NSString * const firstChildGroupIdentifier = @\"firstGroup\";\n+    NSString * const secondChildGroupIdentifier = @\"secondGroup\";\n+\n+    id<HUBComponentModelBuilder> const childBuilder = [self.builder builderForChildWithIdentifier:firstChildModelIdentifier];\n+    childBuilder.groupIdentifier = firstChildGroupIdentifier;\n+    id<HUBComponentModelBuilder> const childBuilder2 = [self.builder builderForChildWithIdentifier:secondChildModelIdentifier];\n+    childBuilder2.groupIdentifier = secondChildGroupIdentifier;\n+\n+    [self.builder removeAllChildBuilders];\n+\n+    NSArray *buildersInFirstGroup = [self.builder buildersForChildrenInGroupWithIdentifier:firstChildGroupIdentifier];\n+    NSArray *buildersInSecondGroup = [self.builder buildersForChildrenInGroupWithIdentifier:secondChildGroupIdentifier];\n+\n+    XCTAssertTrue(buildersInFirstGroup.count == 0);\n+    XCTAssertTrue(buildersInSecondGroup.count == 0);\n+}\n+\n+- (void)testBuildersForChildrenInGroupWhenChangingGroupIdentifierToChild",
        "path": "tests/HUBComponentModelBuilderTests.m",
        "position": null,
        "original_position": 64,
        "commit_id": "fb2b5a7a01e2bb646939fb876f6b8e8f35b6076e",
        "original_commit_id": "312458cbe2129f6d4f4489e83f730df7c0b5ed4f",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "`OfChild` instead of `ToChild`.\n",
        "created_at": "2016-10-29T20:16:07Z",
        "updated_at": "2016-10-31T15:52:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/117#discussion_r85647488",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/117",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85647488"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/117#discussion_r85647488"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/117"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85647517",
        "pull_request_review_id": 6353152,
        "id": 85647517,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjQ3NTE3",
        "diff_hunk": "@@ -592,4 +592,88 @@ - (void)testCopying\n     XCTAssertEqualObjects(copiedCustomImageDataBuilder.placeholderIconIdentifier, @\"customPlaceholder\");\n }\n \n+- (void)testBuildersForChildrenInGroupWhenAddingChildBuilder\n+{\n+    NSString * const firstChildModelIdentifier = @\"firstIdentifier\";\n+    NSString * const secondChildModelIdentifier = @\"secondIdentifier\";\n+    NSString * const firstChildGroupIdentifier = @\"firstGroup\";\n+    NSString * const secondChildGroupIdentifier = @\"secondGroup\";\n+\n+    id<HUBComponentModelBuilder> const childBuilder = [self.builder builderForChildWithIdentifier:firstChildModelIdentifier];\n+    childBuilder.groupIdentifier = firstChildGroupIdentifier;\n+    id<HUBComponentModelBuilder> const childBuilder2 = [self.builder builderForChildWithIdentifier:secondChildModelIdentifier];\n+    childBuilder2.groupIdentifier = secondChildGroupIdentifier;\n+\n+    NSArray *buildersForChildrenInGroup = [self.builder buildersForChildrenInGroupWithIdentifier:firstChildGroupIdentifier];\n+    XCTAssertTrue(buildersForChildrenInGroup.count == 1);\n+    XCTAssertEqualObjects(buildersForChildrenInGroup.firstObject, childBuilder);\n+}\n+\n+- (void)testBuildersForChildrenInGroupWhenRemovingChildBuilder\n+{\n+    NSString * const firstChildModelIdentifier = @\"firstIdentifier\";\n+    NSString * const secondChildModelIdentifier = @\"secondIdentifier\";\n+    NSString * const firstChildGroupIdentifier = @\"firstGroup\";\n+    NSString * const secondChildGroupIdentifier = @\"secondGroup\";\n+\n+    id<HUBComponentModelBuilder> const childBuilder = [self.builder builderForChildWithIdentifier:firstChildModelIdentifier];\n+    childBuilder.groupIdentifier = firstChildGroupIdentifier;\n+    id<HUBComponentModelBuilder> const childBuilder2 = [self.builder builderForChildWithIdentifier:secondChildModelIdentifier];\n+    childBuilder2.groupIdentifier = secondChildGroupIdentifier;\n+\n+    [self.builder removeBuilderForChildWithIdentifier:firstChildModelIdentifier];\n+\n+    NSArray *buildersForFirstGroup = [self.builder buildersForChildrenInGroupWithIdentifier:firstChildGroupIdentifier];\n+    NSArray *buildersForSecondGroup = [self.builder buildersForChildrenInGroupWithIdentifier:secondChildGroupIdentifier];\n+\n+    XCTAssertTrue(buildersForFirstGroup.count == 0);\n+    XCTAssertTrue(buildersForSecondGroup.count == 1);\n+    XCTAssertEqualObjects(buildersForSecondGroup.firstObject, childBuilder2);\n+}\n+\n+- (void)testBuildersForChildrenInGroupWhenRemovingAllChildBuilders\n+{\n+    NSString * const firstChildModelIdentifier = @\"firstIdentifier\";\n+    NSString * const secondChildModelIdentifier = @\"secondIdentifier\";\n+    NSString * const firstChildGroupIdentifier = @\"firstGroup\";\n+    NSString * const secondChildGroupIdentifier = @\"secondGroup\";\n+\n+    id<HUBComponentModelBuilder> const childBuilder = [self.builder builderForChildWithIdentifier:firstChildModelIdentifier];\n+    childBuilder.groupIdentifier = firstChildGroupIdentifier;\n+    id<HUBComponentModelBuilder> const childBuilder2 = [self.builder builderForChildWithIdentifier:secondChildModelIdentifier];\n+    childBuilder2.groupIdentifier = secondChildGroupIdentifier;\n+\n+    [self.builder removeAllChildBuilders];\n+\n+    NSArray *buildersInFirstGroup = [self.builder buildersForChildrenInGroupWithIdentifier:firstChildGroupIdentifier];\n+    NSArray *buildersInSecondGroup = [self.builder buildersForChildrenInGroupWithIdentifier:secondChildGroupIdentifier];\n+\n+    XCTAssertTrue(buildersInFirstGroup.count == 0);\n+    XCTAssertTrue(buildersInSecondGroup.count == 0);\n+}\n+\n+- (void)testBuildersForChildrenInGroupWhenChangingGroupIdentifierToChild\n+{\n+    NSString * const firstChildModelIdentifier = @\"firstIdentifier\";",
        "path": "tests/HUBComponentModelBuilderTests.m",
        "position": null,
        "original_position": 66,
        "commit_id": "fb2b5a7a01e2bb646939fb876f6b8e8f35b6076e",
        "original_commit_id": "312458cbe2129f6d4f4489e83f730df7c0b5ed4f",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Does it make sense to name this `firstChildModelIdentifier`, since in this test you only have a single child. How about `childModelIdentifier` instead?\n",
        "created_at": "2016-10-29T20:16:57Z",
        "updated_at": "2016-10-31T15:52:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/117#discussion_r85647517",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/117",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85647517"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/117#discussion_r85647517"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/117"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85647524",
        "pull_request_review_id": 6353152,
        "id": 85647524,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjQ3NTI0",
        "diff_hunk": "@@ -592,4 +592,88 @@ - (void)testCopying\n     XCTAssertEqualObjects(copiedCustomImageDataBuilder.placeholderIconIdentifier, @\"customPlaceholder\");\n }\n \n+- (void)testBuildersForChildrenInGroupWhenAddingChildBuilder\n+{\n+    NSString * const firstChildModelIdentifier = @\"firstIdentifier\";\n+    NSString * const secondChildModelIdentifier = @\"secondIdentifier\";\n+    NSString * const firstChildGroupIdentifier = @\"firstGroup\";\n+    NSString * const secondChildGroupIdentifier = @\"secondGroup\";\n+\n+    id<HUBComponentModelBuilder> const childBuilder = [self.builder builderForChildWithIdentifier:firstChildModelIdentifier];\n+    childBuilder.groupIdentifier = firstChildGroupIdentifier;\n+    id<HUBComponentModelBuilder> const childBuilder2 = [self.builder builderForChildWithIdentifier:secondChildModelIdentifier];\n+    childBuilder2.groupIdentifier = secondChildGroupIdentifier;\n+\n+    NSArray *buildersForChildrenInGroup = [self.builder buildersForChildrenInGroupWithIdentifier:firstChildGroupIdentifier];\n+    XCTAssertTrue(buildersForChildrenInGroup.count == 1);\n+    XCTAssertEqualObjects(buildersForChildrenInGroup.firstObject, childBuilder);\n+}\n+\n+- (void)testBuildersForChildrenInGroupWhenRemovingChildBuilder\n+{\n+    NSString * const firstChildModelIdentifier = @\"firstIdentifier\";\n+    NSString * const secondChildModelIdentifier = @\"secondIdentifier\";\n+    NSString * const firstChildGroupIdentifier = @\"firstGroup\";\n+    NSString * const secondChildGroupIdentifier = @\"secondGroup\";\n+\n+    id<HUBComponentModelBuilder> const childBuilder = [self.builder builderForChildWithIdentifier:firstChildModelIdentifier];\n+    childBuilder.groupIdentifier = firstChildGroupIdentifier;\n+    id<HUBComponentModelBuilder> const childBuilder2 = [self.builder builderForChildWithIdentifier:secondChildModelIdentifier];\n+    childBuilder2.groupIdentifier = secondChildGroupIdentifier;\n+\n+    [self.builder removeBuilderForChildWithIdentifier:firstChildModelIdentifier];\n+\n+    NSArray *buildersForFirstGroup = [self.builder buildersForChildrenInGroupWithIdentifier:firstChildGroupIdentifier];\n+    NSArray *buildersForSecondGroup = [self.builder buildersForChildrenInGroupWithIdentifier:secondChildGroupIdentifier];\n+\n+    XCTAssertTrue(buildersForFirstGroup.count == 0);\n+    XCTAssertTrue(buildersForSecondGroup.count == 1);\n+    XCTAssertEqualObjects(buildersForSecondGroup.firstObject, childBuilder2);\n+}\n+\n+- (void)testBuildersForChildrenInGroupWhenRemovingAllChildBuilders\n+{\n+    NSString * const firstChildModelIdentifier = @\"firstIdentifier\";\n+    NSString * const secondChildModelIdentifier = @\"secondIdentifier\";\n+    NSString * const firstChildGroupIdentifier = @\"firstGroup\";\n+    NSString * const secondChildGroupIdentifier = @\"secondGroup\";\n+\n+    id<HUBComponentModelBuilder> const childBuilder = [self.builder builderForChildWithIdentifier:firstChildModelIdentifier];\n+    childBuilder.groupIdentifier = firstChildGroupIdentifier;\n+    id<HUBComponentModelBuilder> const childBuilder2 = [self.builder builderForChildWithIdentifier:secondChildModelIdentifier];\n+    childBuilder2.groupIdentifier = secondChildGroupIdentifier;\n+\n+    [self.builder removeAllChildBuilders];\n+\n+    NSArray *buildersInFirstGroup = [self.builder buildersForChildrenInGroupWithIdentifier:firstChildGroupIdentifier];\n+    NSArray *buildersInSecondGroup = [self.builder buildersForChildrenInGroupWithIdentifier:secondChildGroupIdentifier];\n+\n+    XCTAssertTrue(buildersInFirstGroup.count == 0);\n+    XCTAssertTrue(buildersInSecondGroup.count == 0);\n+}\n+\n+- (void)testBuildersForChildrenInGroupWhenChangingGroupIdentifierToChild\n+{\n+    NSString * const firstChildModelIdentifier = @\"firstIdentifier\";\n+    NSString * const firstChildGroupIdentifier = @\"firstGroup\";\n+    NSString * const secondChildGroupIdentifier = @\"secondGroup\";\n+\n+    id<HUBComponentModelBuilder> const childBuilder = [self.builder builderForChildWithIdentifier:firstChildModelIdentifier];\n+    childBuilder.groupIdentifier = firstChildGroupIdentifier;\n+\n+    NSArray *buildersInFirstGroup = [self.builder buildersForChildrenInGroupWithIdentifier:firstChildGroupIdentifier];\n+    NSArray *buildersInSecondGroup = [self.builder buildersForChildrenInGroupWithIdentifier:secondChildGroupIdentifier];\n+    XCTAssertTrue(buildersInFirstGroup.count == 1);\n+    XCTAssertEqualObjects(buildersInFirstGroup.firstObject, childBuilder);\n+    XCTAssertTrue(buildersInSecondGroup.count == 0);",
        "path": "tests/HUBComponentModelBuilderTests.m",
        "position": null,
        "original_position": 77,
        "commit_id": "fb2b5a7a01e2bb646939fb876f6b8e8f35b6076e",
        "original_commit_id": "312458cbe2129f6d4f4489e83f730df7c0b5ed4f",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "`XCTAssertNil`.\n",
        "created_at": "2016-10-29T20:17:14Z",
        "updated_at": "2016-10-31T15:52:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/117#discussion_r85647524",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/117",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85647524"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/117#discussion_r85647524"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/117"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85647530",
        "pull_request_review_id": 6353152,
        "id": 85647530,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjQ3NTMw",
        "diff_hunk": "@@ -592,4 +592,88 @@ - (void)testCopying\n     XCTAssertEqualObjects(copiedCustomImageDataBuilder.placeholderIconIdentifier, @\"customPlaceholder\");\n }\n \n+- (void)testBuildersForChildrenInGroupWhenAddingChildBuilder\n+{\n+    NSString * const firstChildModelIdentifier = @\"firstIdentifier\";\n+    NSString * const secondChildModelIdentifier = @\"secondIdentifier\";\n+    NSString * const firstChildGroupIdentifier = @\"firstGroup\";\n+    NSString * const secondChildGroupIdentifier = @\"secondGroup\";\n+\n+    id<HUBComponentModelBuilder> const childBuilder = [self.builder builderForChildWithIdentifier:firstChildModelIdentifier];\n+    childBuilder.groupIdentifier = firstChildGroupIdentifier;\n+    id<HUBComponentModelBuilder> const childBuilder2 = [self.builder builderForChildWithIdentifier:secondChildModelIdentifier];\n+    childBuilder2.groupIdentifier = secondChildGroupIdentifier;\n+\n+    NSArray *buildersForChildrenInGroup = [self.builder buildersForChildrenInGroupWithIdentifier:firstChildGroupIdentifier];\n+    XCTAssertTrue(buildersForChildrenInGroup.count == 1);\n+    XCTAssertEqualObjects(buildersForChildrenInGroup.firstObject, childBuilder);\n+}\n+\n+- (void)testBuildersForChildrenInGroupWhenRemovingChildBuilder\n+{\n+    NSString * const firstChildModelIdentifier = @\"firstIdentifier\";\n+    NSString * const secondChildModelIdentifier = @\"secondIdentifier\";\n+    NSString * const firstChildGroupIdentifier = @\"firstGroup\";\n+    NSString * const secondChildGroupIdentifier = @\"secondGroup\";\n+\n+    id<HUBComponentModelBuilder> const childBuilder = [self.builder builderForChildWithIdentifier:firstChildModelIdentifier];\n+    childBuilder.groupIdentifier = firstChildGroupIdentifier;\n+    id<HUBComponentModelBuilder> const childBuilder2 = [self.builder builderForChildWithIdentifier:secondChildModelIdentifier];\n+    childBuilder2.groupIdentifier = secondChildGroupIdentifier;\n+\n+    [self.builder removeBuilderForChildWithIdentifier:firstChildModelIdentifier];\n+\n+    NSArray *buildersForFirstGroup = [self.builder buildersForChildrenInGroupWithIdentifier:firstChildGroupIdentifier];\n+    NSArray *buildersForSecondGroup = [self.builder buildersForChildrenInGroupWithIdentifier:secondChildGroupIdentifier];\n+\n+    XCTAssertTrue(buildersForFirstGroup.count == 0);\n+    XCTAssertTrue(buildersForSecondGroup.count == 1);\n+    XCTAssertEqualObjects(buildersForSecondGroup.firstObject, childBuilder2);\n+}\n+\n+- (void)testBuildersForChildrenInGroupWhenRemovingAllChildBuilders\n+{\n+    NSString * const firstChildModelIdentifier = @\"firstIdentifier\";\n+    NSString * const secondChildModelIdentifier = @\"secondIdentifier\";\n+    NSString * const firstChildGroupIdentifier = @\"firstGroup\";\n+    NSString * const secondChildGroupIdentifier = @\"secondGroup\";\n+\n+    id<HUBComponentModelBuilder> const childBuilder = [self.builder builderForChildWithIdentifier:firstChildModelIdentifier];\n+    childBuilder.groupIdentifier = firstChildGroupIdentifier;\n+    id<HUBComponentModelBuilder> const childBuilder2 = [self.builder builderForChildWithIdentifier:secondChildModelIdentifier];\n+    childBuilder2.groupIdentifier = secondChildGroupIdentifier;\n+\n+    [self.builder removeAllChildBuilders];\n+\n+    NSArray *buildersInFirstGroup = [self.builder buildersForChildrenInGroupWithIdentifier:firstChildGroupIdentifier];\n+    NSArray *buildersInSecondGroup = [self.builder buildersForChildrenInGroupWithIdentifier:secondChildGroupIdentifier];\n+\n+    XCTAssertTrue(buildersInFirstGroup.count == 0);\n+    XCTAssertTrue(buildersInSecondGroup.count == 0);\n+}\n+\n+- (void)testBuildersForChildrenInGroupWhenChangingGroupIdentifierToChild\n+{\n+    NSString * const firstChildModelIdentifier = @\"firstIdentifier\";\n+    NSString * const firstChildGroupIdentifier = @\"firstGroup\";\n+    NSString * const secondChildGroupIdentifier = @\"secondGroup\";\n+\n+    id<HUBComponentModelBuilder> const childBuilder = [self.builder builderForChildWithIdentifier:firstChildModelIdentifier];\n+    childBuilder.groupIdentifier = firstChildGroupIdentifier;\n+\n+    NSArray *buildersInFirstGroup = [self.builder buildersForChildrenInGroupWithIdentifier:firstChildGroupIdentifier];\n+    NSArray *buildersInSecondGroup = [self.builder buildersForChildrenInGroupWithIdentifier:secondChildGroupIdentifier];\n+    XCTAssertTrue(buildersInFirstGroup.count == 1);\n+    XCTAssertEqualObjects(buildersInFirstGroup.firstObject, childBuilder);\n+    XCTAssertTrue(buildersInSecondGroup.count == 0);\n+\n+    childBuilder.groupIdentifier = secondChildGroupIdentifier;\n+\n+    buildersInFirstGroup = [self.builder buildersForChildrenInGroupWithIdentifier:firstChildGroupIdentifier];\n+    buildersInSecondGroup = [self.builder buildersForChildrenInGroupWithIdentifier:secondChildGroupIdentifier];\n+    XCTAssertTrue(buildersInSecondGroup.count == 1);\n+    XCTAssertEqualObjects(buildersInSecondGroup.firstObject, childBuilder);\n+    XCTAssertTrue(buildersInFirstGroup.count == 0);",
        "path": "tests/HUBComponentModelBuilderTests.m",
        "position": null,
        "original_position": 85,
        "commit_id": "fb2b5a7a01e2bb646939fb876f6b8e8f35b6076e",
        "original_commit_id": "312458cbe2129f6d4f4489e83f730df7c0b5ed4f",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "`XCTAssertNil`\n",
        "created_at": "2016-10-29T20:17:32Z",
        "updated_at": "2016-10-31T15:52:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/117#discussion_r85647530",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/117",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85647530"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/117#discussion_r85647530"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/117"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85665207",
        "pull_request_review_id": 6368284,
        "id": 85665207,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjY1MjA3",
        "diff_hunk": "@@ -441,7 +459,19 @@ - (id)copyWithZone:(nullable NSZone *)zone\n     for (NSString * const childIdentifier in self.childBuilders) {\n         copy.childBuilders[childIdentifier] = [self.childBuilders[childIdentifier] copy];\n     }\n-    \n+\n+    for (NSString * const groupIdentifier in self.childBuildersByGroupIdentifier) {",
        "path": "sources/HUBComponentModelBuilderImplementation.m",
        "position": null,
        "original_position": 93,
        "commit_id": "fb2b5a7a01e2bb646939fb876f6b8e8f35b6076e",
        "original_commit_id": "312458cbe2129f6d4f4489e83f730df7c0b5ed4f",
        "user": {
            "login": "FranGamb",
            "id": 2427809,
            "node_id": "MDQ6VXNlcjI0Mjc4MDk=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/2427809?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/FranGamb",
            "html_url": "https://github.com/FranGamb",
            "followers_url": "https://api.github.com/users/FranGamb/followers",
            "following_url": "https://api.github.com/users/FranGamb/following{/other_user}",
            "gists_url": "https://api.github.com/users/FranGamb/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/FranGamb/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/FranGamb/subscriptions",
            "organizations_url": "https://api.github.com/users/FranGamb/orgs",
            "repos_url": "https://api.github.com/users/FranGamb/repos",
            "events_url": "https://api.github.com/users/FranGamb/events{/privacy}",
            "received_events_url": "https://api.github.com/users/FranGamb/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Good point! Will do\n",
        "created_at": "2016-10-30T18:01:06Z",
        "updated_at": "2016-10-31T15:52:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/117#discussion_r85665207",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/117",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85665207"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/117#discussion_r85665207"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/117"
            }
        },
        "in_reply_to_id": 85647275
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85740249",
        "pull_request_review_id": 6437598,
        "id": 85740249,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NzQwMjQ5",
        "diff_hunk": "@@ -26,6 +26,7 @@\n \n @protocol HUBComponentImageDataBuilder;\n @protocol HUBComponentTargetBuilder;\n+@protocol HUBComponentModelBuilder;",
        "path": "include/HubFramework/HUBComponentModelBuilder.h",
        "position": null,
        "original_position": 4,
        "commit_id": "fb2b5a7a01e2bb646939fb876f6b8e8f35b6076e",
        "original_commit_id": "52e5dbf5fd2b1d451a98e38c0a291b403a8c7bf2",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Not needed anymore, right?\n",
        "created_at": "2016-10-31T13:45:44Z",
        "updated_at": "2016-10-31T15:52:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/117#discussion_r85740249",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/117",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85740249"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/117#discussion_r85740249"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/117"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85740353",
        "pull_request_review_id": 6437598,
        "id": 85740353,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NzQwMzUz",
        "diff_hunk": "@@ -36,8 +36,15 @@\n \n NS_ASSUME_NONNULL_BEGIN\n \n-@interface HUBComponentModelBuilderImplementation ()\n+@protocol HUBComponentModelBuilderDelegate <NSObject>\n \n+- (void)componentModelBuilder:(id<HUBComponentModelBuilder>)componentModelBuilder groupIdentifierDidChange:(nullable NSString *)newGroupIdentifier oldGroupIdentifier:(nullable NSString *)oldGroupIdentifier;",
        "path": "sources/HUBComponentModelBuilderImplementation.m",
        "position": null,
        "original_position": 7,
        "commit_id": "fb2b5a7a01e2bb646939fb876f6b8e8f35b6076e",
        "original_commit_id": "52e5dbf5fd2b1d451a98e38c0a291b403a8c7bf2",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\ud83c\udfa8 Split this up unto multiple lines?\n",
        "created_at": "2016-10-31T13:46:17Z",
        "updated_at": "2016-10-31T15:52:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/117#discussion_r85740353",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/117",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85740353"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/117#discussion_r85740353"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/117"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85740534",
        "pull_request_review_id": 6437598,
        "id": 85740534,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NzQwNTM0",
        "diff_hunk": "@@ -259,19 +269,38 @@ - (BOOL)builderExistsForChildWithIdentifier:(NSString *)identifier\n \n - (id<HUBComponentModelBuilder>)builderForChildWithIdentifier:(NSString *)identifier\n {\n-    return [self getOrCreateBuilderForChildWithIdentifier:identifier];\n+    return [self getOrCreateBuilderForChildWithIdentifier:identifier groupIdentifier:nil];\n+}\n+\n+- (nullable NSArray<id<HUBComponentModelBuilder>> *)buildersForChildrenInGroupWithIdentifier:(NSString *)groupIdentifier\n+{\n+    return self.childBuildersByGroupIdentifier[groupIdentifier];\n }\n \n - (void)removeBuilderForChildWithIdentifier:(NSString *)identifier\n {\n+    id<HUBComponentModelBuilder> builder = self.childBuilders[identifier];\n     self.childBuilders[identifier] = nil;\n     [self.childIdentifierOrder removeObject:identifier];\n+\n+    for (NSString *groupIdentifier in self.childBuildersByGroupIdentifier) {",
        "path": "sources/HUBComponentModelBuilderImplementation.m",
        "position": null,
        "original_position": 60,
        "commit_id": "fb2b5a7a01e2bb646939fb876f6b8e8f35b6076e",
        "original_commit_id": "52e5dbf5fd2b1d451a98e38c0a291b403a8c7bf2",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Why do you need to iterate through all groups? You already know the group you're looking for (`builder.groupIdentifier`), right?\n",
        "created_at": "2016-10-31T13:47:24Z",
        "updated_at": "2016-10-31T15:52:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/117#discussion_r85740534",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/117",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85740534"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/117#discussion_r85740534"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/117"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85740872",
        "pull_request_review_id": 6437598,
        "id": 85740872,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NzQwODcy",
        "diff_hunk": "@@ -437,11 +467,23 @@ - (id)copyWithZone:(nullable NSZone *)zone\n     for (NSString * const customImageIdentifier in self.customImageDataBuilders) {\n         copy.customImageDataBuilders[customImageIdentifier] = [self.customImageDataBuilders[customImageIdentifier] copy];\n     }\n-    \n+\n     for (NSString * const childIdentifier in self.childBuilders) {\n-        copy.childBuilders[childIdentifier] = [self.childBuilders[childIdentifier] copy];\n+        HUBComponentModelBuilderImplementation *childBuilder = self.childBuilders[childIdentifier];",
        "path": "sources/HUBComponentModelBuilderImplementation.m",
        "position": null,
        "original_position": 108,
        "commit_id": "fb2b5a7a01e2bb646939fb876f6b8e8f35b6076e",
        "original_commit_id": "52e5dbf5fd2b1d451a98e38c0a291b403a8c7bf2",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Suggestion: Merge this statement with the one on the next line, making it:\n\n``` objective-c\nHUBComponentModelBuilderImplementation *childBuilder = [self.childBuilders[childIdentifier] copy];\n```\n\nNot just for style reasons, but makes the code a bit more \"safe\", as you might not accidentially use `childBuilder` when it really shouldn't be used at all in this scope.\n",
        "created_at": "2016-10-31T13:49:08Z",
        "updated_at": "2016-10-31T15:52:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/117#discussion_r85740872",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/117",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85740872"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/117#discussion_r85740872"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/117"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85740924",
        "pull_request_review_id": 6437598,
        "id": 85740924,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NzQwOTI0",
        "diff_hunk": "@@ -437,11 +467,23 @@ - (id)copyWithZone:(nullable NSZone *)zone\n     for (NSString * const customImageIdentifier in self.customImageDataBuilders) {\n         copy.customImageDataBuilders[customImageIdentifier] = [self.customImageDataBuilders[customImageIdentifier] copy];\n     }\n-    \n+\n     for (NSString * const childIdentifier in self.childBuilders) {\n-        copy.childBuilders[childIdentifier] = [self.childBuilders[childIdentifier] copy];\n+        HUBComponentModelBuilderImplementation *childBuilder = self.childBuilders[childIdentifier];\n+        HUBComponentModelBuilderImplementation *childBuilderCopy = [childBuilder copy];\n+        copy.childBuilders[childIdentifier] = childBuilderCopy;\n+\n+        if (childBuilder.groupIdentifier) {",
        "path": "sources/HUBComponentModelBuilderImplementation.m",
        "position": null,
        "original_position": 112,
        "commit_id": "fb2b5a7a01e2bb646939fb876f6b8e8f35b6076e",
        "original_commit_id": "52e5dbf5fd2b1d451a98e38c0a291b403a8c7bf2",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\ud83c\udfa8 Compare explicitly against `nil`\n",
        "created_at": "2016-10-31T13:49:27Z",
        "updated_at": "2016-10-31T15:52:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/117#discussion_r85740924",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/117",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85740924"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/117#discussion_r85740924"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/117"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85741143",
        "pull_request_review_id": 6437598,
        "id": 85741143,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NzQxMTQz",
        "diff_hunk": "@@ -532,7 +574,22 @@ - (HUBComponentImageDataBuilderImplementation *)getOrCreateBuilderForCustomImage\n     return newBuilder;\n }\n \n-- (HUBComponentModelBuilderImplementation *)getOrCreateBuilderForChildWithIdentifier:(nullable NSString *)identifier\n+\n+- (void)setGroupIdentifier:(nullable NSString *)groupIdentifier\n+{\n+#pragma clang diagnostic push\n+#pragma clang diagnostic ignored \"-Wdirect-ivar-access\"\n+\n+    NSString *oldGroupIdentifier = _groupIdentifier;\n+\n+    _groupIdentifier = groupIdentifier;\n+\n+#pragma clang diagnostic pop\n+\n+    [self.delegate componentModelBuilder:self groupIdentifierDidChange:self.groupIdentifier oldGroupIdentifier:oldGroupIdentifier];\n+}\n+\n+- (HUBComponentModelBuilderImplementation *)getOrCreateBuilderForChildWithIdentifier:(nullable NSString *)identifier groupIdentifier:(nullable NSString *)groupIdentifier",
        "path": "sources/HUBComponentModelBuilderImplementation.m",
        "position": null,
        "original_position": 147,
        "commit_id": "fb2b5a7a01e2bb646939fb876f6b8e8f35b6076e",
        "original_commit_id": "52e5dbf5fd2b1d451a98e38c0a291b403a8c7bf2",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Doesn't seem like the `groupIdentifier` parameter is used anymore.\n",
        "created_at": "2016-10-31T13:50:27Z",
        "updated_at": "2016-10-31T15:52:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/117#discussion_r85741143",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/117",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85741143"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/117#discussion_r85741143"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/117"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85751551",
        "pull_request_review_id": 6448190,
        "id": 85751551,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NzUxNTUx",
        "diff_hunk": "@@ -259,19 +269,38 @@ - (BOOL)builderExistsForChildWithIdentifier:(NSString *)identifier\n \n - (id<HUBComponentModelBuilder>)builderForChildWithIdentifier:(NSString *)identifier\n {\n-    return [self getOrCreateBuilderForChildWithIdentifier:identifier];\n+    return [self getOrCreateBuilderForChildWithIdentifier:identifier groupIdentifier:nil];\n+}\n+\n+- (nullable NSArray<id<HUBComponentModelBuilder>> *)buildersForChildrenInGroupWithIdentifier:(NSString *)groupIdentifier\n+{\n+    return self.childBuildersByGroupIdentifier[groupIdentifier];\n }\n \n - (void)removeBuilderForChildWithIdentifier:(NSString *)identifier\n {\n+    id<HUBComponentModelBuilder> builder = self.childBuilders[identifier];\n     self.childBuilders[identifier] = nil;\n     [self.childIdentifierOrder removeObject:identifier];\n+\n+    for (NSString *groupIdentifier in self.childBuildersByGroupIdentifier) {",
        "path": "sources/HUBComponentModelBuilderImplementation.m",
        "position": null,
        "original_position": 60,
        "commit_id": "fb2b5a7a01e2bb646939fb876f6b8e8f35b6076e",
        "original_commit_id": "52e5dbf5fd2b1d451a98e38c0a291b403a8c7bf2",
        "user": {
            "login": "FranGamb",
            "id": 2427809,
            "node_id": "MDQ6VXNlcjI0Mjc4MDk=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/2427809?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/FranGamb",
            "html_url": "https://github.com/FranGamb",
            "followers_url": "https://api.github.com/users/FranGamb/followers",
            "following_url": "https://api.github.com/users/FranGamb/following{/other_user}",
            "gists_url": "https://api.github.com/users/FranGamb/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/FranGamb/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/FranGamb/subscriptions",
            "organizations_url": "https://api.github.com/users/FranGamb/orgs",
            "repos_url": "https://api.github.com/users/FranGamb/repos",
            "events_url": "https://api.github.com/users/FranGamb/events{/privacy}",
            "received_events_url": "https://api.github.com/users/FranGamb/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Correct\n",
        "created_at": "2016-10-31T14:40:58Z",
        "updated_at": "2016-10-31T15:52:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/117#discussion_r85751551",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/117",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85751551"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/117#discussion_r85751551"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/117"
            }
        },
        "in_reply_to_id": 85740534
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85757219",
        "pull_request_review_id": 6453472,
        "id": 85757219,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NzU3MjE5",
        "diff_hunk": "@@ -574,6 +630,29 @@ - (HUBComponentModelBuilderImplementation *)getOrCreateBuilderForChildWithIdenti\n     return [[HUBIconImplementation alloc] initWithIdentifier:iconIdentifier imageResolver:iconImageResolver isPlaceholder:forPlaceholder];\n }\n \n+#pragma mark - HUBComponentModelBuilderDelegate\n+\n+- (void)componentModelBuilder:(id<HUBComponentModelBuilder>)componentModelBuilder groupIdentifierDidChange:(nullable NSString *)newGroupIdentifier oldGroupIdentifier:(nullable NSString *)oldGroupIdentifier\n+{\n+    if (oldGroupIdentifier != nil) {\n+        NSString *nonNilOldGroupIdentifier = oldGroupIdentifier;\n+        NSMutableArray *childBuildersInOldGroup = self.childBuildersByGroupIdentifier[nonNilOldGroupIdentifier];\n+        [childBuildersInOldGroup removeObject:componentModelBuilder];\n+        if (childBuildersInOldGroup.count == 0) {",
        "path": "sources/HUBComponentModelBuilderImplementation.m",
        "position": null,
        "original_position": 154,
        "commit_id": "fb2b5a7a01e2bb646939fb876f6b8e8f35b6076e",
        "original_commit_id": "cb7cf8a8a83825fca6dcadae8ffe59c0189b8ac5",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\ud83c\udfa8 New line above\n",
        "created_at": "2016-10-31T15:04:59Z",
        "updated_at": "2016-10-31T15:52:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/117#discussion_r85757219",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/117",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85757219"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/117#discussion_r85757219"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/117"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85757261",
        "pull_request_review_id": 6453472,
        "id": 85757261,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NzU3MjYx",
        "diff_hunk": "@@ -574,6 +630,29 @@ - (HUBComponentModelBuilderImplementation *)getOrCreateBuilderForChildWithIdenti\n     return [[HUBIconImplementation alloc] initWithIdentifier:iconIdentifier imageResolver:iconImageResolver isPlaceholder:forPlaceholder];\n }\n \n+#pragma mark - HUBComponentModelBuilderDelegate\n+\n+- (void)componentModelBuilder:(id<HUBComponentModelBuilder>)componentModelBuilder groupIdentifierDidChange:(nullable NSString *)newGroupIdentifier oldGroupIdentifier:(nullable NSString *)oldGroupIdentifier\n+{\n+    if (oldGroupIdentifier != nil) {\n+        NSString *nonNilOldGroupIdentifier = oldGroupIdentifier;\n+        NSMutableArray *childBuildersInOldGroup = self.childBuildersByGroupIdentifier[nonNilOldGroupIdentifier];\n+        [childBuildersInOldGroup removeObject:componentModelBuilder];\n+        if (childBuildersInOldGroup.count == 0) {\n+            self.childBuildersByGroupIdentifier[nonNilOldGroupIdentifier] = nil;\n+        }\n+    }\n+\n+    if  (newGroupIdentifier != nil) {\n+        NSString *nonNilGroupIdentifier = newGroupIdentifier;\n+        if (!self.childBuildersByGroupIdentifier[nonNilGroupIdentifier]) {",
        "path": "sources/HUBComponentModelBuilderImplementation.m",
        "position": null,
        "original_position": 161,
        "commit_id": "fb2b5a7a01e2bb646939fb876f6b8e8f35b6076e",
        "original_commit_id": "cb7cf8a8a83825fca6dcadae8ffe59c0189b8ac5",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\ud83c\udfa8 New line above\n",
        "created_at": "2016-10-31T15:05:08Z",
        "updated_at": "2016-10-31T15:52:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/117#discussion_r85757261",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/117",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85757261"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/117#discussion_r85757261"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/117"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86180666",
        "pull_request_review_id": 6850722,
        "id": 86180666,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg2MTgwNjY2",
        "diff_hunk": "@@ -84,11 +84,13 @@ NS_ASSUME_NONNULL_BEGIN\n  *\n  *  @param component The parent component\n  *  @param childIndex The index of the child component that was selected\n+ *  @param customData Any custom data to send to the action. Will be available on the",
        "path": "include/HubFramework/HUBComponentWithChildren.h",
        "position": null,
        "original_position": 4,
        "commit_id": "29f5effef6f7a1a146ab1c40f6168cbf42619794",
        "original_commit_id": "4ccc3104b680108a8a45bcf380c9bfd5df9391f8",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The rest of the API doesn't mention anything about actions. So this documentation is a bit out of context. How about doing something like:\n\n```\nAny custom data to use when the selection is handled. Will be available on the `HUBActionContext` passed to any actions handling the selection.\n```\n",
        "created_at": "2016-11-02T16:15:07Z",
        "updated_at": "2016-11-03T08:59:47Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/124#discussion_r86180666",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/124",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86180666"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/124#discussion_r86180666"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/124"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86180860",
        "pull_request_review_id": 6850722,
        "id": 86180860,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg2MTgwODYw",
        "diff_hunk": "@@ -201,14 +201,16 @@ NS_ASSUME_NONNULL_BEGIN\n  *  Perform a programmatic selection of a component with a given model\n  *\n  *  @param componentModel The model of the component to select\n+ *  @param customData Any custom data to send to the action. Will be available on the",
        "path": "include/HubFramework/HUBViewController.h",
        "position": null,
        "original_position": 4,
        "commit_id": "29f5effef6f7a1a146ab1c40f6168cbf42619794",
        "original_commit_id": "4ccc3104b680108a8a45bcf380c9bfd5df9391f8",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Same comment here as for the documentation for `HUBComponentWithChildren`.\n",
        "created_at": "2016-11-02T16:15:57Z",
        "updated_at": "2016-11-03T08:59:47Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/124#discussion_r86180860",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/124",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86180860"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/124#discussion_r86180860"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/124"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85998224",
        "pull_request_review_id": 6679580,
        "id": 85998224,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1OTk4MjI0",
        "diff_hunk": "@@ -110,6 +110,21 @@ NS_ASSUME_NONNULL_BEGIN\n  */\n @property (nonatomic, weak, nullable) id<HUBComponentChildDelegate> childDelegate;\n \n+@optional\n+\n+/**\n+ * Called when programmatically scrolling to a child within this parent component.\n+ *\n+ * @param childIndex The index of the component that is being scrolled to.\n+ * @param scrollPosition The preferred position of the component after scrolling.\n+ * @param animated Whether or not the scrolling should be animated.\n+ * @param completionHandler The block to call once the component is visible.\n+ */\n+- (void)scrollToComponentAtIndex:(NSUInteger)childIndex\n+                atScrollPosition:(UICollectionViewScrollPosition)scrollPosition",
        "path": "include/HubFramework/HUBComponentWithChildren.h",
        "position": null,
        "original_position": 15,
        "commit_id": "e1350d47c3c20252cc46b13fdce52f077fdc3133",
        "original_commit_id": "89ced78e204ad2676a0086e0d57a147b62510f84",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Not entirely sure if we should keep this parameter or just let them decide where to put it themselves\n",
        "created_at": "2016-11-01T18:51:30Z",
        "updated_at": "2016-11-04T13:35:51Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/123#discussion_r85998224",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/123",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85998224"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/123#discussion_r85998224"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/123"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85999394",
        "pull_request_review_id": 6680732,
        "id": 85999394,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1OTk5Mzk0",
        "diff_hunk": "@@ -110,6 +110,21 @@ NS_ASSUME_NONNULL_BEGIN\n  */\n @property (nonatomic, weak, nullable) id<HUBComponentChildDelegate> childDelegate;\n \n+@optional",
        "path": "include/HubFramework/HUBComponentWithChildren.h",
        "position": null,
        "original_position": 4,
        "commit_id": "e1350d47c3c20252cc46b13fdce52f077fdc3133",
        "original_commit_id": "89ced78e204ad2676a0086e0d57a147b62510f84",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Don't use optional methods \ud83d\ude31 They're not compile time safe and make the API loose its explicitness. In fact, as part of https://github.com/spotify/HubFramework/issues/70 we will start linting for `@optional` and fail the build if they're used. Instead, either make it a required method (if it should be strongly coupled with this API), or make a new protocol that extends `HUBComponent`.\n",
        "created_at": "2016-11-01T18:57:00Z",
        "updated_at": "2016-11-04T13:35:51Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/123#discussion_r85999394",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/123",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/85999394"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/123#discussion_r85999394"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/123"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86144713",
        "pull_request_review_id": 6816232,
        "id": 86144713,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg2MTQ0NzEz",
        "diff_hunk": "@@ -307,6 +314,21 @@ - (void)updateViewForSelectionState:(HUBComponentSelectionState)selectionState\n     [self updateViewForSelectionState:selectionState notifyDelegate:NO];\n }\n \n+#pragma mark - HUBComponentWithScrolling\n+\n+- (void)scrollToComponentAtIndex:(NSUInteger)childIndex\n+                  scrollPosition:(UICollectionViewScrollPosition)scrollPosition\n+                        animated:(BOOL)animated\n+                      completion:(void (^)())completionHandler\n+{\n+    if ([self.component conformsToProtocol:@protocol(HUBComponentWithScrolling)]) {\n+        [(id<HUBComponentWithScrolling>)self.component scrollToComponentAtIndex:childIndex\n+                                                                 scrollPosition:scrollPosition\n+                                                                      animated:animated",
        "path": "sources/HUBComponentWrapper.m",
        "position": null,
        "original_position": 35,
        "commit_id": "e1350d47c3c20252cc46b13fdce52f077fdc3133",
        "original_commit_id": "cafbfcd10fec06db325f184130ef8a3bedaeb94e",
        "user": {
            "login": "ShervinS",
            "id": 3473562,
            "node_id": "MDQ6VXNlcjM0NzM1NjI=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/3473562?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ShervinS",
            "html_url": "https://github.com/ShervinS",
            "followers_url": "https://api.github.com/users/ShervinS/followers",
            "following_url": "https://api.github.com/users/ShervinS/following{/other_user}",
            "gists_url": "https://api.github.com/users/ShervinS/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ShervinS/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ShervinS/subscriptions",
            "organizations_url": "https://api.github.com/users/ShervinS/orgs",
            "repos_url": "https://api.github.com/users/ShervinS/repos",
            "events_url": "https://api.github.com/users/ShervinS/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ShervinS/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Indentation? :D \n",
        "created_at": "2016-11-02T13:51:26Z",
        "updated_at": "2016-11-04T13:35:51Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/123#discussion_r86144713",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/123",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86144713"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/123#discussion_r86144713"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/123"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86153926",
        "pull_request_review_id": 6825192,
        "id": 86153926,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg2MTUzOTI2",
        "diff_hunk": "@@ -1314,6 +1337,103 @@ - (void)removeComponentWrapperFromLookupTables:(nullable HUBComponentWrapper *)c\n     }\n }\n \n+- (void)scrollToRootComponentAtIndex:(NSUInteger)componentIndex\n+                      scrollPosition:(UICollectionViewScrollPosition)scrollPosition\n+                            animated:(BOOL)animated\n+                          completion:(void (^)())completionHandler\n+{\n+    NSUInteger const componentCount = (NSUInteger)[self.collectionView numberOfItemsInSection:0];\n+    if (componentIndex == NSNotFound || componentIndex >= componentCount) {",
        "path": "sources/HUBViewControllerImplementation.m",
        "position": null,
        "original_position": 61,
        "commit_id": "e1350d47c3c20252cc46b13fdce52f077fdc3133",
        "original_commit_id": "cafbfcd10fec06db325f184130ef8a3bedaeb94e",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@JohnSundell \u2013 do we prefer asserting these things or failing silently?\n",
        "created_at": "2016-11-02T14:31:22Z",
        "updated_at": "2016-11-04T13:35:51Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/123#discussion_r86153926",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/123",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86153926"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/123#discussion_r86153926"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/123"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86155746",
        "pull_request_review_id": 6826998,
        "id": 86155746,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg2MTU1NzQ2",
        "diff_hunk": "@@ -1314,6 +1337,103 @@ - (void)removeComponentWrapperFromLookupTables:(nullable HUBComponentWrapper *)c\n     }\n }\n \n+- (void)scrollToRootComponentAtIndex:(NSUInteger)componentIndex\n+                      scrollPosition:(UICollectionViewScrollPosition)scrollPosition\n+                            animated:(BOOL)animated\n+                          completion:(void (^)())completionHandler\n+{\n+    NSUInteger const componentCount = (NSUInteger)[self.collectionView numberOfItemsInSection:0];\n+    if (componentIndex == NSNotFound || componentIndex >= componentCount) {",
        "path": "sources/HUBViewControllerImplementation.m",
        "position": null,
        "original_position": 61,
        "commit_id": "e1350d47c3c20252cc46b13fdce52f077fdc3133",
        "original_commit_id": "cafbfcd10fec06db325f184130ef8a3bedaeb94e",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Normally, we assert - since it's an incorrect use of the API. Failing silently has the downside that no-one knows that they did something wrong, until we get a bug report \ud83d\ude04 \n",
        "created_at": "2016-11-02T14:38:30Z",
        "updated_at": "2016-11-04T13:35:51Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/123#discussion_r86155746",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/123",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86155746"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/123#discussion_r86155746"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/123"
            }
        },
        "in_reply_to_id": 86153926
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86184504",
        "pull_request_review_id": 6854546,
        "id": 86184504,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg2MTg0NTA0",
        "diff_hunk": "@@ -0,0 +1,45 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import \"HUBComponentWithChildren.h\"\n+\n+/**\n+ * Extended Hub component protocol that adds the ability scroll between child components.\n+ *\n+ * Use this protocol if your component supports scrolling between components within it. \n+ * See `HUBComponent` for more info.\n+ */\n+@protocol HUBComponentWithScrolling <HUBComponentWithChildren>\n+\n+/**\n+ * Called when programmatically scrolling to a child within this parent component.\n+ *\n+ * @param childIndex The index of the component that is being scrolled to.\n+ * @param scrollPosition The preferred position of the component after scrolling.\n+ * @param animated Whether or not the scrolling should be animated.\n+ * @param completionHandler The block to call once the component is visible.\n+ */\n+- (void)scrollToComponentAtIndex:(NSUInteger)childIndex\n+                  scrollPosition:(UICollectionViewScrollPosition)scrollPosition",
        "path": "include/HubFramework/HUBComponentWithScrolling.h",
        "position": null,
        "original_position": 41,
        "commit_id": "e1350d47c3c20252cc46b13fdce52f077fdc3133",
        "original_commit_id": "cafa9757dc5a23780e60696939afcab33db7f10a",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "With this, we're kind of assuming that the component will be implemented using `UICollectionView`, which is not always true. Do we need to support multiple scroll positions at this point? If so - I'd say make a custom `enum` that is not tied to `UICollectionView`.\n",
        "created_at": "2016-11-02T16:30:20Z",
        "updated_at": "2016-11-04T13:35:51Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/123#discussion_r86184504",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/123",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86184504"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/123#discussion_r86184504"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/123"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86184544",
        "pull_request_review_id": 6854546,
        "id": 86184544,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg2MTg0NTQ0",
        "diff_hunk": "@@ -0,0 +1,45 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import \"HUBComponentWithChildren.h\"\n+\n+/**\n+ * Extended Hub component protocol that adds the ability scroll between child components.\n+ *\n+ * Use this protocol if your component supports scrolling between components within it. \n+ * See `HUBComponent` for more info.\n+ */\n+@protocol HUBComponentWithScrolling <HUBComponentWithChildren>\n+\n+/**\n+ * Called when programmatically scrolling to a child within this parent component.\n+ *\n+ * @param childIndex The index of the component that is being scrolled to.\n+ * @param scrollPosition The preferred position of the component after scrolling.\n+ * @param animated Whether or not the scrolling should be animated.\n+ * @param completionHandler The block to call once the component is visible.\n+ */\n+- (void)scrollToComponentAtIndex:(NSUInteger)childIndex\n+                  scrollPosition:(UICollectionViewScrollPosition)scrollPosition\n+                        animated:(BOOL)animated\n+                      completion:(void (^)())completionHandler;",
        "path": "include/HubFramework/HUBComponentWithScrolling.h",
        "position": null,
        "original_position": 43,
        "commit_id": "e1350d47c3c20252cc46b13fdce52f077fdc3133",
        "original_commit_id": "cafa9757dc5a23780e60696939afcab33db7f10a",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Make the external parameter name match the documentation and the internal name - `completionHandler`.\n",
        "created_at": "2016-11-02T16:30:30Z",
        "updated_at": "2016-11-04T13:35:51Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/123#discussion_r86184544",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/123",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86184544"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/123#discussion_r86184544"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/123"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86184637",
        "pull_request_review_id": 6854546,
        "id": 86184637,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg2MTg0NjM3",
        "diff_hunk": "@@ -171,6 +171,19 @@ NS_ASSUME_NONNULL_BEGIN\n - (void)scrollToContentOffset:(CGPoint)contentOffset animated:(BOOL)animated;\n \n /**\n+ *  Scroll to a desired content offset.",
        "path": "include/HubFramework/HUBViewController.h",
        "position": null,
        "original_position": 4,
        "commit_id": "e1350d47c3c20252cc46b13fdce52f077fdc3133",
        "original_commit_id": "cafa9757dc5a23780e60696939afcab33db7f10a",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Not content offset, right? To a component at a given index path?\n",
        "created_at": "2016-11-02T16:31:02Z",
        "updated_at": "2016-11-04T13:35:51Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/123#discussion_r86184637",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/123",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86184637"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/123#discussion_r86184637"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/123"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86184781",
        "pull_request_review_id": 6854546,
        "id": 86184781,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg2MTg0Nzgx",
        "diff_hunk": "@@ -171,6 +171,19 @@ NS_ASSUME_NONNULL_BEGIN\n - (void)scrollToContentOffset:(CGPoint)contentOffset animated:(BOOL)animated;\n \n /**\n+ *  Scroll to a desired content offset.\n+ *\n+ *  @param componentIndexPath The index path of the component to scroll to.\n+ *  @param scrollPosition The preferred position of the component after scrolling.\n+ *  @param animated Whether or not the scrolling should be animated.\n+ *  @param completionHandler A block that is called once the component at the provided index path is visible.\n+ */\n+- (void)scrollToComponentAtIndexPath:(NSIndexPath *)componentIndexPath\n+                      scrollPosition:(UICollectionViewScrollPosition)scrollPosition\n+                            animated:(BOOL)animated\n+                          completion:(void (^ _Nullable)())completionHandler;",
        "path": "include/HubFramework/HUBViewController.h",
        "position": null,
        "original_position": 14,
        "commit_id": "e1350d47c3c20252cc46b13fdce52f077fdc3133",
        "original_commit_id": "cafa9757dc5a23780e60696939afcab33db7f10a",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Same here - `completionHandler`\n",
        "created_at": "2016-11-02T16:31:39Z",
        "updated_at": "2016-11-04T13:35:51Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/123#discussion_r86184781",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/123",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86184781"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/123#discussion_r86184781"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/123"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86185025",
        "pull_request_review_id": 6854546,
        "id": 86185025,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg2MTg1MDI1",
        "diff_hunk": "@@ -110,4 +110,15 @@\n                                         currentContentOffset:(CGPoint)currentContentOffset\n                                        proposedContentOffset:(CGPoint)proposedContentOffset;\n \n+/**\n+ * Return the content offset for displaying a component at a certain scroll position.\n+ * \n+ * @param componentIndex The index of the component to display.\n+ * @param scrollPosition The position to display the component at.\n+ * @param viewController The view controller in question.\n+ */\n+- (CGPoint)contentOffsetForDisplayingComponentAtIndex:(NSUInteger)componentIndex",
        "path": "include/HubFramework/HUBViewControllerScrollHandler.h",
        "position": null,
        "original_position": 11,
        "commit_id": "e1350d47c3c20252cc46b13fdce52f077fdc3133",
        "original_commit_id": "cafa9757dc5a23780e60696939afcab33db7f10a",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Hmmm, why is this needed? \ud83e\udd14 Should the scroll handler have an opinion on where the children are?\n",
        "created_at": "2016-11-02T16:32:43Z",
        "updated_at": "2016-11-04T13:35:51Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/123#discussion_r86185025",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/123",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86185025"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/123#discussion_r86185025"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/123"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86185150",
        "pull_request_review_id": 6854546,
        "id": 86185150,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg2MTg1MTUw",
        "diff_hunk": "@@ -196,6 +198,12 @@ willUpdateSelectionState:(HUBComponentSelectionState)selectionState;\n  */\n - (void)saveComponentUIState;\n \n+/** \n+ *  Returns the child component wrapper located at the provided index \u2013\u00a0if visible. \n+ *  @param index The index of the component to retrieve.",
        "path": "sources/HUBComponentWrapper.h",
        "position": null,
        "original_position": 24,
        "commit_id": "e1350d47c3c20252cc46b13fdce52f077fdc3133",
        "original_commit_id": "cafa9757dc5a23780e60696939afcab33db7f10a",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\ud83c\udfa8 New line between method description and `@param`\n",
        "created_at": "2016-11-02T16:33:21Z",
        "updated_at": "2016-11-04T13:35:51Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/123#discussion_r86185150",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/123",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86185150"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/123#discussion_r86185150"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/123"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86185265",
        "pull_request_review_id": 6854546,
        "id": 86185265,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg2MTg1MjY1",
        "diff_hunk": "@@ -196,6 +198,12 @@ willUpdateSelectionState:(HUBComponentSelectionState)selectionState;\n  */\n - (void)saveComponentUIState;\n \n+/** \n+ *  Returns the child component wrapper located at the provided index \u2013\u00a0if visible. \n+ *  @param index The index of the component to retrieve.\n+ */\n+- (nullable HUBComponentWrapper *)childComponentAtIndex:(NSUInteger)index;",
        "path": "sources/HUBComponentWrapper.h",
        "position": null,
        "original_position": 26,
        "commit_id": "e1350d47c3c20252cc46b13fdce52f077fdc3133",
        "original_commit_id": "cafa9757dc5a23780e60696939afcab33db7f10a",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Since this is only returning visible components - how about naming it `visibleChildComponentAtIndex:`?\n",
        "created_at": "2016-11-02T16:33:50Z",
        "updated_at": "2016-11-04T13:35:51Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/123#discussion_r86185265",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/123",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86185265"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/123#discussion_r86185265"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/123"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86185421",
        "pull_request_review_id": 6854546,
        "id": 86185421,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg2MTg1NDIx",
        "diff_hunk": "@@ -118,6 +120,11 @@ - (void)saveComponentUIState\n     }\n }\n \n+- (nullable HUBComponentWrapper *)childComponentAtIndex:(NSUInteger)index\n+{\n+    return self.childrenByIndex[@(index)];",
        "path": "sources/HUBComponentWrapper.m",
        "position": null,
        "original_position": 15,
        "commit_id": "e1350d47c3c20252cc46b13fdce52f077fdc3133",
        "original_commit_id": "cafa9757dc5a23780e60696939afcab33db7f10a",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This doesn't only contain visible children. It contains all children created. So the docs doesn't match \ud83d\ude42 \n",
        "created_at": "2016-11-02T16:34:24Z",
        "updated_at": "2016-11-04T13:35:51Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/123#discussion_r86185421",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/123",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86185421"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/123#discussion_r86185421"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/123"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86185483",
        "pull_request_review_id": 6854546,
        "id": 86185483,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg2MTg1NDgz",
        "diff_hunk": "@@ -307,6 +314,21 @@ - (void)updateViewForSelectionState:(HUBComponentSelectionState)selectionState\n     [self updateViewForSelectionState:selectionState notifyDelegate:NO];\n }\n \n+#pragma mark - HUBComponentWithScrolling\n+\n+- (void)scrollToComponentAtIndex:(NSUInteger)childIndex\n+                  scrollPosition:(UICollectionViewScrollPosition)scrollPosition\n+                        animated:(BOOL)animated\n+                      completion:(void (^)())completionHandler\n+{\n+    if ([self.component conformsToProtocol:@protocol(HUBComponentWithScrolling)]) {",
        "path": "sources/HUBComponentWrapper.m",
        "position": null,
        "original_position": 32,
        "commit_id": "e1350d47c3c20252cc46b13fdce52f077fdc3133",
        "original_commit_id": "cafa9757dc5a23780e60696939afcab33db7f10a",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\ud83c\udfa8 Return early instead of indenting method?\n",
        "created_at": "2016-11-02T16:34:43Z",
        "updated_at": "2016-11-04T13:35:51Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/123#discussion_r86185483",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/123",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86185483"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/123#discussion_r86185483"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/123"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86185642",
        "pull_request_review_id": 6854546,
        "id": 86185642,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg2MTg1NjQy",
        "diff_hunk": "@@ -68,6 +69,26 @@ - (CGPoint)targetContentOffsetForEndedScrollInViewController:(UIViewController<H\n     return proposedContentOffset;\n }\n \n+- (CGPoint)contentOffsetForDisplayingComponentAtIndex:(NSUInteger)componentIndex\n+                                       scrollPosition:(UICollectionViewScrollPosition)scrollPosition\n+                                       viewController:(UIViewController<HUBViewController> *)viewController\n+{\n+    CGRect const componentFrame = [viewController frameForBodyComponentAtIndex:componentIndex];",
        "path": "sources/HUBViewControllerDefaultScrollHandler.m",
        "position": null,
        "original_position": 16,
        "commit_id": "e1350d47c3c20252cc46b13fdce52f077fdc3133",
        "original_commit_id": "cafa9757dc5a23780e60696939afcab33db7f10a",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Really cuirous as to why this should be the responsibility of the scroll handler. Seems like something the view controller should do.\n",
        "created_at": "2016-11-02T16:35:21Z",
        "updated_at": "2016-11-04T13:35:51Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/123#discussion_r86185642",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/123",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86185642"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/123#discussion_r86185642"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/123"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86185968",
        "pull_request_review_id": 6854546,
        "id": 86185968,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg2MTg1OTY4",
        "diff_hunk": "@@ -1314,6 +1337,105 @@ - (void)removeComponentWrapperFromLookupTables:(nullable HUBComponentWrapper *)c\n     }\n }\n \n+- (void)scrollToRootComponentAtIndex:(NSUInteger)componentIndex\n+                      scrollPosition:(UICollectionViewScrollPosition)scrollPosition\n+                            animated:(BOOL)animated\n+                          completion:(void (^)())completionHandler\n+{\n+    NSUInteger const componentCount = (NSUInteger)[self.collectionView numberOfItemsInSection:0];\n+\n+    NSParameterAssert(componentIndex != NSNotFound);",
        "path": "sources/HUBViewControllerImplementation.m",
        "position": null,
        "original_position": 62,
        "commit_id": "e1350d47c3c20252cc46b13fdce52f077fdc3133",
        "original_commit_id": "cafa9757dc5a23780e60696939afcab33db7f10a",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This is not needed as your next check will fail if the value is `NSNotFound` (since it's `INT_MAX`)\n",
        "created_at": "2016-11-02T16:36:40Z",
        "updated_at": "2016-11-04T13:35:51Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/123#discussion_r86185968",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/123",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86185968"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/123#discussion_r86185968"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/123"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86186501",
        "pull_request_review_id": 6854546,
        "id": 86186501,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg2MTg2NTAx",
        "diff_hunk": "@@ -1314,6 +1337,105 @@ - (void)removeComponentWrapperFromLookupTables:(nullable HUBComponentWrapper *)c\n     }\n }\n \n+- (void)scrollToRootComponentAtIndex:(NSUInteger)componentIndex\n+                      scrollPosition:(UICollectionViewScrollPosition)scrollPosition\n+                            animated:(BOOL)animated\n+                          completion:(void (^)())completionHandler\n+{\n+    NSUInteger const componentCount = (NSUInteger)[self.collectionView numberOfItemsInSection:0];\n+\n+    NSParameterAssert(componentIndex != NSNotFound);\n+    NSParameterAssert(componentIndex <= componentCount);\n+\n+    NSIndexPath * const rootIndexPath = [NSIndexPath indexPathForItem:(NSInteger)componentIndex inSection:0];\n+    CGPoint const contentOffset = [self.scrollHandler contentOffsetForDisplayingComponentAtIndex:componentIndex\n+                                                                                  scrollPosition:scrollPosition\n+                                                                                  viewController:self];\n+\n+    CGRect const initialContentRect = [self contentRectForScrollView:self.collectionView];\n+    [self.scrollHandler scrollingWillStartInViewController:self currentContentRect:initialContentRect];\n+\n+    __weak HUBViewControllerImplementation *weakSelf = self;\n+    void (^completionWrapper)() = ^{\n+        HUBViewControllerImplementation *strongSelf = weakSelf;\n+        CGRect const destinationContentRect = [strongSelf contentRectForScrollView:strongSelf.collectionView];\n+        [strongSelf.scrollHandler scrollingDidEndInViewController:strongSelf currentContentRect:destinationContentRect];\n+        completionHandler();\n+    };\n+    \n+    // If the component is already visible, the completion handler can be called instantly.\n+    if ([self.collectionView.indexPathsForVisibleItems containsObject:rootIndexPath]) {\n+        [self.collectionView setContentOffset:contentOffset animated:animated];\n+        completionWrapper();\n+    // If the scrolling is animated, the animation has to end before the new component can be retrieved.\n+    } else if (animated) {\n+        self.pendingScrollAnimationCallback = completionWrapper;\n+        [self.collectionView setContentOffset:contentOffset animated:animated];\n+    // If there's no animations, the UICollectionView will still defer updating the content offset to the next runloop cycle.\n+    } else {\n+        [self.collectionView setContentOffset:contentOffset animated:animated];\n+        [[NSRunLoop currentRunLoop] runUntilDate:[NSDate date]];\n+        completionWrapper();\n+    }\n+}\n+\n+- (void)scrollToRemainingComponentsStartingAtPosition:(NSUInteger)indexPosition\n+                                            indexPath:(NSIndexPath *)indexPath\n+                                            component:(nullable HUBComponentWrapper *)componentWrapper\n+                                       scrollPosition:(UICollectionViewScrollPosition)scrollPosition\n+                                             animated:(BOOL)animated\n+                                           completion:(void (^ _Nullable)())completionHandler\n+{\n+    NSUInteger const childIndex = [indexPath indexAtPosition:indexPosition];\n+\n+    NSParameterAssert(childIndex != NSNotFound);\n+    if (indexPosition > 0) {\n+        NSParameterAssert(childIndex <= componentWrapper.model.children.count);\n+    }\n+\n+    __weak HUBViewControllerImplementation *weakSelf = self;\n+    void (^stepCompletionHandler)() = ^{\n+        HUBViewControllerImplementation *strongSelf = weakSelf;\n+        // If the scrolling isn't animated we have to wait for a runloop cycle, as scrolling is deferred.\n+        if (!animated) {\n+            [[NSRunLoop currentRunLoop] runUntilDate:[NSDate date]];",
        "path": "sources/HUBViewControllerImplementation.m",
        "position": null,
        "original_position": 116,
        "commit_id": "e1350d47c3c20252cc46b13fdce52f077fdc3133",
        "original_commit_id": "cafa9757dc5a23780e60696939afcab33db7f10a",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Won't this block the main thread for the remainder of the cycle? Wouldn't it be better to `dispatch_async()`?\n",
        "created_at": "2016-11-02T16:38:47Z",
        "updated_at": "2016-11-04T13:35:51Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/123#discussion_r86186501",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/123",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86186501"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/123#discussion_r86186501"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/123"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86188673",
        "pull_request_review_id": 6858749,
        "id": 86188673,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg2MTg4Njcz",
        "diff_hunk": "@@ -110,4 +110,15 @@\n                                         currentContentOffset:(CGPoint)currentContentOffset\n                                        proposedContentOffset:(CGPoint)proposedContentOffset;\n \n+/**\n+ * Return the content offset for displaying a component at a certain scroll position.\n+ * \n+ * @param componentIndex The index of the component to display.\n+ * @param scrollPosition The position to display the component at.\n+ * @param viewController The view controller in question.\n+ */\n+- (CGPoint)contentOffsetForDisplayingComponentAtIndex:(NSUInteger)componentIndex",
        "path": "include/HubFramework/HUBViewControllerScrollHandler.h",
        "position": null,
        "original_position": 11,
        "commit_id": "e1350d47c3c20252cc46b13fdce52f077fdc3133",
        "original_commit_id": "cafa9757dc5a23780e60696939afcab33db7f10a",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I figured it made sense that the scroll handler had a say in all kinds of scrolling (i.e. programmatic and interactive scrolling) :smile:\n",
        "created_at": "2016-11-02T16:49:00Z",
        "updated_at": "2016-11-04T13:35:51Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/123#discussion_r86188673",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/123",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86188673"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/123#discussion_r86188673"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/123"
            }
        },
        "in_reply_to_id": 86185025
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86221931",
        "pull_request_review_id": 6890394,
        "id": 86221931,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg2MjIxOTMx",
        "diff_hunk": "@@ -0,0 +1,45 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import \"HUBComponentWithChildren.h\"\n+\n+/**\n+ * Extended Hub component protocol that adds the ability scroll between child components.\n+ *\n+ * Use this protocol if your component supports scrolling between components within it. \n+ * See `HUBComponent` for more info.\n+ */\n+@protocol HUBComponentWithScrolling <HUBComponentWithChildren>\n+\n+/**\n+ * Called when programmatically scrolling to a child within this parent component.\n+ *\n+ * @param childIndex The index of the component that is being scrolled to.\n+ * @param scrollPosition The preferred position of the component after scrolling.\n+ * @param animated Whether or not the scrolling should be animated.\n+ * @param completionHandler The block to call once the component is visible.\n+ */\n+- (void)scrollToComponentAtIndex:(NSUInteger)childIndex\n+                  scrollPosition:(UICollectionViewScrollPosition)scrollPosition\n+                        animated:(BOOL)animated\n+                      completion:(void (^)())completionHandler;",
        "path": "include/HubFramework/HUBComponentWithScrolling.h",
        "position": null,
        "original_position": 43,
        "commit_id": "e1350d47c3c20252cc46b13fdce52f077fdc3133",
        "original_commit_id": "cafa9757dc5a23780e60696939afcab33db7f10a",
        "user": {
            "login": "tammofreese",
            "id": 15917,
            "node_id": "MDQ6VXNlcjE1OTE3",
            "avatar_url": "https://avatars3.githubusercontent.com/u/15917?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tammofreese",
            "html_url": "https://github.com/tammofreese",
            "followers_url": "https://api.github.com/users/tammofreese/followers",
            "following_url": "https://api.github.com/users/tammofreese/following{/other_user}",
            "gists_url": "https://api.github.com/users/tammofreese/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tammofreese/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tammofreese/subscriptions",
            "organizations_url": "https://api.github.com/users/tammofreese/orgs",
            "repos_url": "https://api.github.com/users/tammofreese/repos",
            "events_url": "https://api.github.com/users/tammofreese/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tammofreese/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "How about making the block type more concrete by using `void (^)(void)` instead of `void (^)()`?\n",
        "created_at": "2016-11-02T19:18:03Z",
        "updated_at": "2016-11-04T13:35:51Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/123#discussion_r86221931",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/123",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86221931"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/123#discussion_r86221931"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/123"
            }
        },
        "in_reply_to_id": 86184544
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86534443",
        "pull_request_review_id": 7189319,
        "id": 86534443,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg2NTM0NDQz",
        "diff_hunk": "@@ -171,6 +172,28 @@ NS_ASSUME_NONNULL_BEGIN\n - (void)scrollToContentOffset:(CGPoint)contentOffset animated:(BOOL)animated;\n \n /**\n+ *  Scroll to a desired component. Each index in the index path refers to one level of children.\n+ *  For example, in order to scroll to a root component at an index, you would provide an index\n+ *  path with that single index. If that component in turn has children, you can scroll between\n+ *  those by providing an index path with two index, starting with the root index, and so on.\n+ *\n+ *  In order for child components to support nested scrolling, they must implement @c HUBComponentWithScrolling.",
        "path": "include/HubFramework/HUBViewController.h",
        "position": 17,
        "original_position": 17,
        "commit_id": "e1350d47c3c20252cc46b13fdce52f077fdc3133",
        "original_commit_id": "77a9ae87d4be68f0d02f65a687c7c66cc121a94c",
        "user": {
            "login": "krris",
            "id": 1786612,
            "node_id": "MDQ6VXNlcjE3ODY2MTI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1786612?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krris",
            "html_url": "https://github.com/krris",
            "followers_url": "https://api.github.com/users/krris/followers",
            "following_url": "https://api.github.com/users/krris/following{/other_user}",
            "gists_url": "https://api.github.com/users/krris/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krris/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krris/subscriptions",
            "organizations_url": "https://api.github.com/users/krris/orgs",
            "repos_url": "https://api.github.com/users/krris/repos",
            "events_url": "https://api.github.com/users/krris/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krris/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "What is `@c`?\n",
        "created_at": "2016-11-04T12:24:20Z",
        "updated_at": "2016-11-04T13:35:51Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/123#discussion_r86534443",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/123",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86534443"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/123#discussion_r86534443"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/123"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86534579",
        "pull_request_review_id": 7189319,
        "id": 86534579,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg2NTM0NTc5",
        "diff_hunk": "@@ -0,0 +1,46 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import \"HUBComponentWithChildren.h\"\n+#import \"HUBScrollPosition.h\"\n+\n+/**\n+ * Extended Hub component protocol that adds the ability scroll between child components.",
        "path": "include/HubFramework/HUBComponentWithScrolling.h",
        "position": null,
        "original_position": 26,
        "commit_id": "e1350d47c3c20252cc46b13fdce52f077fdc3133",
        "original_commit_id": "77a9ae87d4be68f0d02f65a687c7c66cc121a94c",
        "user": {
            "login": "krris",
            "id": 1786612,
            "node_id": "MDQ6VXNlcjE3ODY2MTI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1786612?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krris",
            "html_url": "https://github.com/krris",
            "followers_url": "https://api.github.com/users/krris/followers",
            "following_url": "https://api.github.com/users/krris/following{/other_user}",
            "gists_url": "https://api.github.com/users/krris/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krris/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krris/subscriptions",
            "organizations_url": "https://api.github.com/users/krris/orgs",
            "repos_url": "https://api.github.com/users/krris/repos",
            "events_url": "https://api.github.com/users/krris/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krris/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\ud83d\udd2c  ... ability **to** scroll \n",
        "created_at": "2016-11-04T12:25:38Z",
        "updated_at": "2016-11-04T13:35:51Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/123#discussion_r86534579",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/123",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86534579"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/123#discussion_r86534579"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/123"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86535109",
        "pull_request_review_id": 7189983,
        "id": 86535109,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg2NTM1MTA5",
        "diff_hunk": "@@ -0,0 +1,36 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import <UIKit/UIKit.h>\n+\n+/**\n+ * An enumeration to be used when scrolling to a specific position within a scrollable component.\n+ * For ease of use, the different options map to their corresponding UICollectionViewScrollPosition. ",
        "path": "include/HubFramework/HUBScrollPosition.h",
        "position": 26,
        "original_position": 26,
        "commit_id": "e1350d47c3c20252cc46b13fdce52f077fdc3133",
        "original_commit_id": "77a9ae87d4be68f0d02f65a687c7c66cc121a94c",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Smart! \ud83d\udc4d \n",
        "created_at": "2016-11-04T12:30:11Z",
        "updated_at": "2016-11-04T13:35:51Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/123#discussion_r86535109",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/123",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86535109"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/123#discussion_r86535109"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/123"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86535246",
        "pull_request_review_id": 7189983,
        "id": 86535246,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg2NTM1MjQ2",
        "diff_hunk": "@@ -171,6 +172,28 @@ NS_ASSUME_NONNULL_BEGIN\n - (void)scrollToContentOffset:(CGPoint)contentOffset animated:(BOOL)animated;\n \n /**\n+ *  Scroll to a desired component. Each index in the index path refers to one level of children.\n+ *  For example, in order to scroll to a root component at an index, you would provide an index\n+ *  path with that single index. If that component in turn has children, you can scroll between\n+ *  those by providing an index path with two index, starting with the root index, and so on.\n+ *\n+ *  In order for child components to support nested scrolling, they must implement @c HUBComponentWithScrolling.\n+ *\n+ *  @param componentType The type of component you want to scroll to.\n+ *  @param indexPath The index path of the component to scroll to.\n+ *  @param scrollPosition The preferred position of the component after scrolling.\n+ *  @param animated Whether or not the scrolling should be animated.\n+ *  @param completion A block that is called once the component at the provided index path is visible.\n+ *\n+ *  @seealso HUBComponentWithScrolling\n+ */\n+- (void)scrollToComponentOfType:(HUBComponentType)componentType",
        "path": "include/HubFramework/HUBViewController.h",
        "position": 27,
        "original_position": 27,
        "commit_id": "e1350d47c3c20252cc46b13fdce52f077fdc3133",
        "original_commit_id": "77a9ae87d4be68f0d02f65a687c7c66cc121a94c",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Awesome \ud83d\ude80 \n",
        "created_at": "2016-11-04T12:31:13Z",
        "updated_at": "2016-11-04T13:35:51Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/123#discussion_r86535246",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/123",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86535246"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/123#discussion_r86535246"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/123"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86535772",
        "pull_request_review_id": 7189983,
        "id": 86535772,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg2NTM1Nzcy",
        "diff_hunk": "@@ -110,4 +110,15 @@\n                                         currentContentOffset:(CGPoint)currentContentOffset\n                                        proposedContentOffset:(CGPoint)proposedContentOffset;\n \n+/**\n+ * Return the content offset for displaying a component at a certain scroll position.\n+ * \n+ * @param componentIndex The index of the component to display.\n+ * @param scrollPosition The position to display the component at.\n+ * @param viewController The view controller in question.\n+ */\n+- (CGPoint)contentOffsetForDisplayingComponentAtIndex:(NSUInteger)componentIndex",
        "path": "include/HubFramework/HUBViewControllerScrollHandler.h",
        "position": null,
        "original_position": 11,
        "commit_id": "e1350d47c3c20252cc46b13fdce52f077fdc3133",
        "original_commit_id": "cafa9757dc5a23780e60696939afcab33db7f10a",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "If we don't need this API - why add it? \ud83d\ude04 It just makes the scroll handler more complicated. Why can't we use the normal content offset calculating method? \ud83d\ude42\n",
        "created_at": "2016-11-04T12:35:42Z",
        "updated_at": "2016-11-04T13:35:51Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/123#discussion_r86535772",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/123",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86535772"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/123#discussion_r86535772"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/123"
            }
        },
        "in_reply_to_id": 86185025
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86537186",
        "pull_request_review_id": 7191936,
        "id": 86537186,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg2NTM3MTg2",
        "diff_hunk": "@@ -171,6 +172,28 @@ NS_ASSUME_NONNULL_BEGIN\n - (void)scrollToContentOffset:(CGPoint)contentOffset animated:(BOOL)animated;\n \n /**\n+ *  Scroll to a desired component. Each index in the index path refers to one level of children.\n+ *  For example, in order to scroll to a root component at an index, you would provide an index\n+ *  path with that single index. If that component in turn has children, you can scroll between\n+ *  those by providing an index path with two index, starting with the root index, and so on.\n+ *\n+ *  In order for child components to support nested scrolling, they must implement @c HUBComponentWithScrolling.",
        "path": "include/HubFramework/HUBViewController.h",
        "position": 17,
        "original_position": 17,
        "commit_id": "e1350d47c3c20252cc46b13fdce52f077fdc3133",
        "original_commit_id": "77a9ae87d4be68f0d02f65a687c7c66cc121a94c",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It gives the following word a monospaced font :smile:\n",
        "created_at": "2016-11-04T12:47:04Z",
        "updated_at": "2016-11-04T13:35:51Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/123#discussion_r86537186",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/123",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86537186"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/123#discussion_r86537186"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/123"
            }
        },
        "in_reply_to_id": 86534443
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/87167892",
        "pull_request_review_id": 7789634,
        "id": 87167892,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg3MTY3ODky",
        "diff_hunk": "@@ -324,6 +368,26 @@ - (void)contentOperationQueueDidBecomeEmpty\n     [delegate viewModelLoader:self didLoadViewModel:viewModel];\n }\n \n+- (HUBContentOperationWrapper *)getOrCreateWrapperForContentOperationAtIndex:(NSUInteger)operationIndex\n+{\n+    HUBContentOperationWrapper * const existingOperationWrapper = self.contentOperationWrappers[@(operationIndex)];\n+    \n+    if (existingOperationWrapper != nil) {\n+        return existingOperationWrapper;\n+    }\n+    \n+    id<HUBContentOperation> const operation = self.contentOperations[operationIndex];\n+    HUBContentOperationWrapper * const newOperationWrapper = [[HUBContentOperationWrapper alloc] initWithContentOperation:operation index:operationIndex];\n+    newOperationWrapper.delegate = self;\n+    self.contentOperationWrappers[@(operationIndex)] = newOperationWrapper;\n+    \n+    if ([operation conformsToProtocol:@protocol(HUBContentOperationWithPaginatedContent)]) {\n+        self.anyContentOperationSupportsPagination = YES;",
        "path": "sources/HUBViewModelLoaderImplementation.m",
        "position": 282,
        "original_position": 282,
        "commit_id": "f37ea31e487bb7eaa9021acac4375b8e3b93345a",
        "original_commit_id": "f37ea31e487bb7eaa9021acac4375b8e3b93345a",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Can the content operations ever change within a view model loader (and if so, is this property ever set to false?)\n",
        "created_at": "2016-11-09T10:37:35Z",
        "updated_at": "2016-11-09T11:07:35Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/132#discussion_r87167892",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/132",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/87167892"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/132#discussion_r87167892"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/132"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/87171258",
        "pull_request_review_id": 7789634,
        "id": 87171258,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg3MTcxMjU4",
        "diff_hunk": "@@ -674,6 +674,254 @@ - (void)testNilReloadPolicyAlwaysResultingInReload\n     XCTAssertEqual(contentOperation.performCount, (NSUInteger)3);\n }\n \n+- (void)testAppendingPaginatedContent\n+{\n+    HUBContentOperationMock * const contentOperationA = [HUBContentOperationMock new];\n+    HUBContentOperationMock * const contentOperationB = [HUBContentOperationMock new];\n+    \n+    __block id<HUBViewModelBuilder> firstViewModelBuilderA;\n+    __block id<HUBViewModelBuilder> firstViewModelBuilderB;\n+    \n+    contentOperationA.contentLoadingBlock = ^(id<HUBViewModelBuilder> builder) {\n+        firstViewModelBuilderA = builder;\n+        [builder builderForBodyComponentModelWithIdentifier:@\"A-0\"].title = @\"First component A\";\n+        return YES;\n+    };\n+    \n+    contentOperationA.paginatedContentLoadingBlock = ^(id<HUBViewModelBuilder> builder, NSUInteger pageIndex) {\n+        XCTAssertNotNil(firstViewModelBuilderA);\n+        XCTAssertNotNil(firstViewModelBuilderB);\n+        XCTAssertNotEqual(builder, firstViewModelBuilderA);\n+        XCTAssertNotEqual(builder, firstViewModelBuilderB);\n+        XCTAssertEqual(pageIndex, 1u);\n+        \n+        id<HUBComponentModelBuilder> const existingComponentModelBuilderA = [builder builderForBodyComponentModelWithIdentifier:@\"A-0\"];\n+        XCTAssertEqualObjects(existingComponentModelBuilderA.title, @\"First component A\");\n+        \n+        id<HUBComponentModelBuilder> const existingComponentModelBuilderB = [builder builderForBodyComponentModelWithIdentifier:@\"B-0\"];\n+        XCTAssertEqualObjects(existingComponentModelBuilderB.title, @\"First component B\");\n+        \n+        [builder builderForBodyComponentModelWithIdentifier:@\"A-1\"].title = @\"Second component A\";\n+        return YES;\n+    };\n+    \n+    contentOperationB.contentLoadingBlock = ^(id<HUBViewModelBuilder> builder) {\n+        firstViewModelBuilderB = builder;\n+        [builder builderForBodyComponentModelWithIdentifier:@\"B-0\"].title = @\"First component B\";\n+        return YES;\n+    };\n+    \n+    [self createLoaderWithContentOperations:@[contentOperationA, contentOperationB]\n+                          connectivityState:HUBConnectivityStateOnline\n+                           initialViewModel:nil];\n+    \n+    [self.loader loadViewModel];\n+    \n+    NSArray<id<HUBComponentModel>> * const componentModelsA = self.viewModelFromSuccessDelegateMethod.bodyComponentModels;\n+    XCTAssertEqual(componentModelsA.count, 2u);\n+    XCTAssertEqualObjects(componentModelsA[0].title, @\"First component A\");\n+    XCTAssertEqualObjects(componentModelsA[1].title, @\"First component B\");\n+    \n+    [self.loader loadNextPageForCurrentViewModel];\n+    \n+    NSArray<id<HUBComponentModel>> * const componentModelsB = self.viewModelFromSuccessDelegateMethod.bodyComponentModels;\n+    XCTAssertEqual(componentModelsB.count, 3u);\n+    XCTAssertEqualObjects(componentModelsB[0].title, @\"First component A\");\n+    XCTAssertEqualObjects(componentModelsB[1].title, @\"First component B\");\n+    XCTAssertEqualObjects(componentModelsB[2].title, @\"Second component A\");\n+}\n+\n+- (void)testPageIndexIncrementedForEachPaginatedLoadingChain\n+{\n+    HUBContentOperationMock * const contentOperation = [HUBContentOperationMock new];\n+    \n+    __block NSUInteger pageIndex = 0;\n+    \n+    contentOperation.paginatedContentLoadingBlock = ^(id<HUBViewModelBuilder> builder, NSUInteger newPageIndex) {\n+        pageIndex = newPageIndex;\n+        return YES;\n+    };\n+    \n+    [self createLoaderWithContentOperations:@[contentOperation]\n+                          connectivityState:HUBConnectivityStateOnline\n+                           initialViewModel:nil];\n+    \n+    [self.loader loadViewModel];\n+    \n+    [self.loader loadNextPageForCurrentViewModel];\n+    XCTAssertEqual(pageIndex, 1u);\n+    \n+    [self.loader loadNextPageForCurrentViewModel];\n+    XCTAssertEqual(pageIndex, 2u);\n+    \n+    [self.loader loadNextPageForCurrentViewModel];\n+    XCTAssertEqual(pageIndex, 3u);\n+}\n+\n+- (void)testLoadingPaginatedContentMultipleTimesAppendsToQueue\n+{\n+    HUBContentOperationMock * const contentOperation = [HUBContentOperationMock new];\n+    \n+    contentOperation.paginatedContentLoadingBlock = ^(id<HUBViewModelBuilder> builder, NSUInteger pageIndex) {\n+        NSString * const componentIdentifier = [NSString stringWithFormat:@\"%@\", @(pageIndex)];\n+        [builder builderForBodyComponentModelWithIdentifier:componentIdentifier].title = @\"Component\";\n+        return NO;\n+    };\n+    \n+    [self createLoaderWithContentOperations:@[contentOperation]\n+                          connectivityState:HUBConnectivityStateOnline\n+                           initialViewModel:nil];\n+    \n+    [self.loader loadViewModel];\n+    [self.loader loadNextPageForCurrentViewModel];\n+    [self.loader loadNextPageForCurrentViewModel];\n+    [self.loader loadNextPageForCurrentViewModel];\n+    \n+    id<HUBContentOperationDelegate> const contentOperationDelegate = contentOperation.delegate;\n+    [contentOperationDelegate contentOperationDidFinish:contentOperation];\n+    [contentOperationDelegate contentOperationDidFinish:contentOperation];\n+    \n+    // Make sure that we don't have any component models until the last operation is finished",
        "path": "tests/HUBViewModelLoaderTests.m",
        "position": 120,
        "original_position": 120,
        "commit_id": "f37ea31e487bb7eaa9021acac4375b8e3b93345a",
        "original_commit_id": "f37ea31e487bb7eaa9021acac4375b8e3b93345a",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Does this mean that if multiple page loads are queued, the view model won't render until _all_ the queued pages are finished loading? If so, why couldn't it re-render after each page is loaded?\n",
        "created_at": "2016-11-09T10:59:10Z",
        "updated_at": "2016-11-09T11:07:35Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/132#discussion_r87171258",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/132",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/87171258"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/132#discussion_r87171258"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/132"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/87172524",
        "pull_request_review_id": 7793976,
        "id": 87172524,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg3MTcyNTI0",
        "diff_hunk": "@@ -324,6 +368,26 @@ - (void)contentOperationQueueDidBecomeEmpty\n     [delegate viewModelLoader:self didLoadViewModel:viewModel];\n }\n \n+- (HUBContentOperationWrapper *)getOrCreateWrapperForContentOperationAtIndex:(NSUInteger)operationIndex\n+{\n+    HUBContentOperationWrapper * const existingOperationWrapper = self.contentOperationWrappers[@(operationIndex)];\n+    \n+    if (existingOperationWrapper != nil) {\n+        return existingOperationWrapper;\n+    }\n+    \n+    id<HUBContentOperation> const operation = self.contentOperations[operationIndex];\n+    HUBContentOperationWrapper * const newOperationWrapper = [[HUBContentOperationWrapper alloc] initWithContentOperation:operation index:operationIndex];\n+    newOperationWrapper.delegate = self;\n+    self.contentOperationWrappers[@(operationIndex)] = newOperationWrapper;\n+    \n+    if ([operation conformsToProtocol:@protocol(HUBContentOperationWithPaginatedContent)]) {\n+        self.anyContentOperationSupportsPagination = YES;",
        "path": "sources/HUBViewModelLoaderImplementation.m",
        "position": 282,
        "original_position": 282,
        "commit_id": "f37ea31e487bb7eaa9021acac4375b8e3b93345a",
        "original_commit_id": "f37ea31e487bb7eaa9021acac4375b8e3b93345a",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Nope, they're immutable \ud83d\ude04 \n",
        "created_at": "2016-11-09T11:08:08Z",
        "updated_at": "2016-11-09T11:08:08Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/132#discussion_r87172524",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/132",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/87172524"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/132#discussion_r87172524"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/132"
            }
        },
        "in_reply_to_id": 87167892
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/87172739",
        "pull_request_review_id": 7794169,
        "id": 87172739,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg3MTcyNzM5",
        "diff_hunk": "@@ -674,6 +674,254 @@ - (void)testNilReloadPolicyAlwaysResultingInReload\n     XCTAssertEqual(contentOperation.performCount, (NSUInteger)3);\n }\n \n+- (void)testAppendingPaginatedContent\n+{\n+    HUBContentOperationMock * const contentOperationA = [HUBContentOperationMock new];\n+    HUBContentOperationMock * const contentOperationB = [HUBContentOperationMock new];\n+    \n+    __block id<HUBViewModelBuilder> firstViewModelBuilderA;\n+    __block id<HUBViewModelBuilder> firstViewModelBuilderB;\n+    \n+    contentOperationA.contentLoadingBlock = ^(id<HUBViewModelBuilder> builder) {\n+        firstViewModelBuilderA = builder;\n+        [builder builderForBodyComponentModelWithIdentifier:@\"A-0\"].title = @\"First component A\";\n+        return YES;\n+    };\n+    \n+    contentOperationA.paginatedContentLoadingBlock = ^(id<HUBViewModelBuilder> builder, NSUInteger pageIndex) {\n+        XCTAssertNotNil(firstViewModelBuilderA);\n+        XCTAssertNotNil(firstViewModelBuilderB);\n+        XCTAssertNotEqual(builder, firstViewModelBuilderA);\n+        XCTAssertNotEqual(builder, firstViewModelBuilderB);\n+        XCTAssertEqual(pageIndex, 1u);\n+        \n+        id<HUBComponentModelBuilder> const existingComponentModelBuilderA = [builder builderForBodyComponentModelWithIdentifier:@\"A-0\"];\n+        XCTAssertEqualObjects(existingComponentModelBuilderA.title, @\"First component A\");\n+        \n+        id<HUBComponentModelBuilder> const existingComponentModelBuilderB = [builder builderForBodyComponentModelWithIdentifier:@\"B-0\"];\n+        XCTAssertEqualObjects(existingComponentModelBuilderB.title, @\"First component B\");\n+        \n+        [builder builderForBodyComponentModelWithIdentifier:@\"A-1\"].title = @\"Second component A\";\n+        return YES;\n+    };\n+    \n+    contentOperationB.contentLoadingBlock = ^(id<HUBViewModelBuilder> builder) {\n+        firstViewModelBuilderB = builder;\n+        [builder builderForBodyComponentModelWithIdentifier:@\"B-0\"].title = @\"First component B\";\n+        return YES;\n+    };\n+    \n+    [self createLoaderWithContentOperations:@[contentOperationA, contentOperationB]\n+                          connectivityState:HUBConnectivityStateOnline\n+                           initialViewModel:nil];\n+    \n+    [self.loader loadViewModel];\n+    \n+    NSArray<id<HUBComponentModel>> * const componentModelsA = self.viewModelFromSuccessDelegateMethod.bodyComponentModels;\n+    XCTAssertEqual(componentModelsA.count, 2u);\n+    XCTAssertEqualObjects(componentModelsA[0].title, @\"First component A\");\n+    XCTAssertEqualObjects(componentModelsA[1].title, @\"First component B\");\n+    \n+    [self.loader loadNextPageForCurrentViewModel];\n+    \n+    NSArray<id<HUBComponentModel>> * const componentModelsB = self.viewModelFromSuccessDelegateMethod.bodyComponentModels;\n+    XCTAssertEqual(componentModelsB.count, 3u);\n+    XCTAssertEqualObjects(componentModelsB[0].title, @\"First component A\");\n+    XCTAssertEqualObjects(componentModelsB[1].title, @\"First component B\");\n+    XCTAssertEqualObjects(componentModelsB[2].title, @\"Second component A\");\n+}\n+\n+- (void)testPageIndexIncrementedForEachPaginatedLoadingChain\n+{\n+    HUBContentOperationMock * const contentOperation = [HUBContentOperationMock new];\n+    \n+    __block NSUInteger pageIndex = 0;\n+    \n+    contentOperation.paginatedContentLoadingBlock = ^(id<HUBViewModelBuilder> builder, NSUInteger newPageIndex) {\n+        pageIndex = newPageIndex;\n+        return YES;\n+    };\n+    \n+    [self createLoaderWithContentOperations:@[contentOperation]\n+                          connectivityState:HUBConnectivityStateOnline\n+                           initialViewModel:nil];\n+    \n+    [self.loader loadViewModel];\n+    \n+    [self.loader loadNextPageForCurrentViewModel];\n+    XCTAssertEqual(pageIndex, 1u);\n+    \n+    [self.loader loadNextPageForCurrentViewModel];\n+    XCTAssertEqual(pageIndex, 2u);\n+    \n+    [self.loader loadNextPageForCurrentViewModel];\n+    XCTAssertEqual(pageIndex, 3u);\n+}\n+\n+- (void)testLoadingPaginatedContentMultipleTimesAppendsToQueue\n+{\n+    HUBContentOperationMock * const contentOperation = [HUBContentOperationMock new];\n+    \n+    contentOperation.paginatedContentLoadingBlock = ^(id<HUBViewModelBuilder> builder, NSUInteger pageIndex) {\n+        NSString * const componentIdentifier = [NSString stringWithFormat:@\"%@\", @(pageIndex)];\n+        [builder builderForBodyComponentModelWithIdentifier:componentIdentifier].title = @\"Component\";\n+        return NO;\n+    };\n+    \n+    [self createLoaderWithContentOperations:@[contentOperation]\n+                          connectivityState:HUBConnectivityStateOnline\n+                           initialViewModel:nil];\n+    \n+    [self.loader loadViewModel];\n+    [self.loader loadNextPageForCurrentViewModel];\n+    [self.loader loadNextPageForCurrentViewModel];\n+    [self.loader loadNextPageForCurrentViewModel];\n+    \n+    id<HUBContentOperationDelegate> const contentOperationDelegate = contentOperation.delegate;\n+    [contentOperationDelegate contentOperationDidFinish:contentOperation];\n+    [contentOperationDelegate contentOperationDidFinish:contentOperation];\n+    \n+    // Make sure that we don't have any component models until the last operation is finished",
        "path": "tests/HUBViewModelLoaderTests.m",
        "position": 120,
        "original_position": 120,
        "commit_id": "f37ea31e487bb7eaa9021acac4375b8e3b93345a",
        "original_commit_id": "f37ea31e487bb7eaa9021acac4375b8e3b93345a",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Well, we trust the API user. If they tell us to load multiple pages at once - we will. If not, they should load a new page, let Hubs render it - and then load another one. We want appending content using pagination to work in the same way as the normal content loading chain - that is - we only render once the queue is empty.\n",
        "created_at": "2016-11-09T11:09:29Z",
        "updated_at": "2016-11-09T11:09:29Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/132#discussion_r87172739",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/132",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/87172739"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/132#discussion_r87172739"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/132"
            }
        },
        "in_reply_to_id": 87171258
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/87173634",
        "pull_request_review_id": 7795022,
        "id": 87173634,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg3MTczNjM0",
        "diff_hunk": "@@ -674,6 +674,254 @@ - (void)testNilReloadPolicyAlwaysResultingInReload\n     XCTAssertEqual(contentOperation.performCount, (NSUInteger)3);\n }\n \n+- (void)testAppendingPaginatedContent\n+{\n+    HUBContentOperationMock * const contentOperationA = [HUBContentOperationMock new];\n+    HUBContentOperationMock * const contentOperationB = [HUBContentOperationMock new];\n+    \n+    __block id<HUBViewModelBuilder> firstViewModelBuilderA;\n+    __block id<HUBViewModelBuilder> firstViewModelBuilderB;\n+    \n+    contentOperationA.contentLoadingBlock = ^(id<HUBViewModelBuilder> builder) {\n+        firstViewModelBuilderA = builder;\n+        [builder builderForBodyComponentModelWithIdentifier:@\"A-0\"].title = @\"First component A\";\n+        return YES;\n+    };\n+    \n+    contentOperationA.paginatedContentLoadingBlock = ^(id<HUBViewModelBuilder> builder, NSUInteger pageIndex) {\n+        XCTAssertNotNil(firstViewModelBuilderA);\n+        XCTAssertNotNil(firstViewModelBuilderB);\n+        XCTAssertNotEqual(builder, firstViewModelBuilderA);\n+        XCTAssertNotEqual(builder, firstViewModelBuilderB);\n+        XCTAssertEqual(pageIndex, 1u);\n+        \n+        id<HUBComponentModelBuilder> const existingComponentModelBuilderA = [builder builderForBodyComponentModelWithIdentifier:@\"A-0\"];\n+        XCTAssertEqualObjects(existingComponentModelBuilderA.title, @\"First component A\");\n+        \n+        id<HUBComponentModelBuilder> const existingComponentModelBuilderB = [builder builderForBodyComponentModelWithIdentifier:@\"B-0\"];\n+        XCTAssertEqualObjects(existingComponentModelBuilderB.title, @\"First component B\");\n+        \n+        [builder builderForBodyComponentModelWithIdentifier:@\"A-1\"].title = @\"Second component A\";\n+        return YES;\n+    };\n+    \n+    contentOperationB.contentLoadingBlock = ^(id<HUBViewModelBuilder> builder) {\n+        firstViewModelBuilderB = builder;\n+        [builder builderForBodyComponentModelWithIdentifier:@\"B-0\"].title = @\"First component B\";\n+        return YES;\n+    };\n+    \n+    [self createLoaderWithContentOperations:@[contentOperationA, contentOperationB]\n+                          connectivityState:HUBConnectivityStateOnline\n+                           initialViewModel:nil];\n+    \n+    [self.loader loadViewModel];\n+    \n+    NSArray<id<HUBComponentModel>> * const componentModelsA = self.viewModelFromSuccessDelegateMethod.bodyComponentModels;\n+    XCTAssertEqual(componentModelsA.count, 2u);\n+    XCTAssertEqualObjects(componentModelsA[0].title, @\"First component A\");\n+    XCTAssertEqualObjects(componentModelsA[1].title, @\"First component B\");\n+    \n+    [self.loader loadNextPageForCurrentViewModel];\n+    \n+    NSArray<id<HUBComponentModel>> * const componentModelsB = self.viewModelFromSuccessDelegateMethod.bodyComponentModels;\n+    XCTAssertEqual(componentModelsB.count, 3u);\n+    XCTAssertEqualObjects(componentModelsB[0].title, @\"First component A\");\n+    XCTAssertEqualObjects(componentModelsB[1].title, @\"First component B\");\n+    XCTAssertEqualObjects(componentModelsB[2].title, @\"Second component A\");\n+}\n+\n+- (void)testPageIndexIncrementedForEachPaginatedLoadingChain\n+{\n+    HUBContentOperationMock * const contentOperation = [HUBContentOperationMock new];\n+    \n+    __block NSUInteger pageIndex = 0;\n+    \n+    contentOperation.paginatedContentLoadingBlock = ^(id<HUBViewModelBuilder> builder, NSUInteger newPageIndex) {\n+        pageIndex = newPageIndex;\n+        return YES;\n+    };\n+    \n+    [self createLoaderWithContentOperations:@[contentOperation]\n+                          connectivityState:HUBConnectivityStateOnline\n+                           initialViewModel:nil];\n+    \n+    [self.loader loadViewModel];\n+    \n+    [self.loader loadNextPageForCurrentViewModel];\n+    XCTAssertEqual(pageIndex, 1u);\n+    \n+    [self.loader loadNextPageForCurrentViewModel];\n+    XCTAssertEqual(pageIndex, 2u);\n+    \n+    [self.loader loadNextPageForCurrentViewModel];\n+    XCTAssertEqual(pageIndex, 3u);\n+}\n+\n+- (void)testLoadingPaginatedContentMultipleTimesAppendsToQueue\n+{\n+    HUBContentOperationMock * const contentOperation = [HUBContentOperationMock new];\n+    \n+    contentOperation.paginatedContentLoadingBlock = ^(id<HUBViewModelBuilder> builder, NSUInteger pageIndex) {\n+        NSString * const componentIdentifier = [NSString stringWithFormat:@\"%@\", @(pageIndex)];\n+        [builder builderForBodyComponentModelWithIdentifier:componentIdentifier].title = @\"Component\";\n+        return NO;\n+    };\n+    \n+    [self createLoaderWithContentOperations:@[contentOperation]\n+                          connectivityState:HUBConnectivityStateOnline\n+                           initialViewModel:nil];\n+    \n+    [self.loader loadViewModel];\n+    [self.loader loadNextPageForCurrentViewModel];\n+    [self.loader loadNextPageForCurrentViewModel];\n+    [self.loader loadNextPageForCurrentViewModel];\n+    \n+    id<HUBContentOperationDelegate> const contentOperationDelegate = contentOperation.delegate;\n+    [contentOperationDelegate contentOperationDidFinish:contentOperation];\n+    [contentOperationDelegate contentOperationDidFinish:contentOperation];\n+    \n+    // Make sure that we don't have any component models until the last operation is finished",
        "path": "tests/HUBViewModelLoaderTests.m",
        "position": 120,
        "original_position": 120,
        "commit_id": "f37ea31e487bb7eaa9021acac4375b8e3b93345a",
        "original_commit_id": "f37ea31e487bb7eaa9021acac4375b8e3b93345a",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Gotcha \ud83d\udc4d  \n",
        "created_at": "2016-11-09T11:16:03Z",
        "updated_at": "2016-11-09T11:16:03Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/132#discussion_r87173634",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/132",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/87173634"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/132#discussion_r87173634"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/132"
            }
        },
        "in_reply_to_id": 87171258
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/87174266",
        "pull_request_review_id": 7795639,
        "id": 87174266,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg3MTc0MjY2",
        "diff_hunk": "@@ -324,6 +368,26 @@ - (void)contentOperationQueueDidBecomeEmpty\n     [delegate viewModelLoader:self didLoadViewModel:viewModel];\n }\n \n+- (HUBContentOperationWrapper *)getOrCreateWrapperForContentOperationAtIndex:(NSUInteger)operationIndex\n+{\n+    HUBContentOperationWrapper * const existingOperationWrapper = self.contentOperationWrappers[@(operationIndex)];\n+    \n+    if (existingOperationWrapper != nil) {\n+        return existingOperationWrapper;\n+    }\n+    \n+    id<HUBContentOperation> const operation = self.contentOperations[operationIndex];\n+    HUBContentOperationWrapper * const newOperationWrapper = [[HUBContentOperationWrapper alloc] initWithContentOperation:operation index:operationIndex];\n+    newOperationWrapper.delegate = self;\n+    self.contentOperationWrappers[@(operationIndex)] = newOperationWrapper;\n+    \n+    if ([operation conformsToProtocol:@protocol(HUBContentOperationWithPaginatedContent)]) {\n+        self.anyContentOperationSupportsPagination = YES;",
        "path": "sources/HUBViewModelLoaderImplementation.m",
        "position": 282,
        "original_position": 282,
        "commit_id": "f37ea31e487bb7eaa9021acac4375b8e3b93345a",
        "original_commit_id": "f37ea31e487bb7eaa9021acac4375b8e3b93345a",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Awesome :smile:\n",
        "created_at": "2016-11-09T11:20:55Z",
        "updated_at": "2016-11-09T11:20:55Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/132#discussion_r87174266",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/132",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/87174266"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/132#discussion_r87174266"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/132"
            }
        },
        "in_reply_to_id": 87167892
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/87008532",
        "pull_request_review_id": 7637483,
        "id": 87008532,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg3MDA4NTMy",
        "diff_hunk": "@@ -26,6 +26,9 @@ NS_ASSUME_NONNULL_BEGIN\n /// View that acts as a container view for a Hub Framework view controller\n @interface HUBContainerView : UIView\n \n+/// Collection view contained by the container",
        "path": "sources/HUBContainerView.h",
        "position": null,
        "original_position": 4,
        "commit_id": "3bbd394128878c8feb218fd4bc492f79cc368855",
        "original_commit_id": "0e36e61236bf2ea375905f960d3da74ac1cb291f",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Suggestion: Add a note that setting this property also adds the collection view to the container view as a subview?\n",
        "created_at": "2016-11-08T15:14:52Z",
        "updated_at": "2016-11-09T11:49:41Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/130#discussion_r87008532",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/130",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/87008532"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/130#discussion_r87008532"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/130"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/87008669",
        "pull_request_review_id": 7637483,
        "id": 87008669,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg3MDA4NjY5",
        "diff_hunk": "@@ -25,18 +25,28 @@\n \n @implementation HUBContainerView\n \n-- (void)setBackgroundColor:(nullable UIColor *)backgroundColor\n+- (void)setCollectionView:(nullable UICollectionView *)collectionView\n {\n-    [super setBackgroundColor:backgroundColor];\n-    \n-    for (UIView * const view in self.subviews) {\n-        view.backgroundColor = backgroundColor;\n+    if (collectionView == nil) {",
        "path": "sources/HUBContainerView.m",
        "position": null,
        "original_position": 11,
        "commit_id": "3bbd394128878c8feb218fd4bc492f79cc368855",
        "original_commit_id": "0e36e61236bf2ea375905f960d3da74ac1cb291f",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You can avoid some code duplication here by removing the previous collection view before adding the new one (regardless of if the new one is `nil`).\n",
        "created_at": "2016-11-08T15:15:32Z",
        "updated_at": "2016-11-09T11:49:41Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/130#discussion_r87008669",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/130",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/87008669"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/130#discussion_r87008669"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/130"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/87008911",
        "pull_request_review_id": 7637483,
        "id": 87008911,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg3MDA4OTEx",
        "diff_hunk": "@@ -173,8 +173,11 @@ - (void)dealloc\n \n - (void)loadView\n {\n-    self.view = [[HUBContainerView alloc] initWithFrame:CGRectZero];\n+    HUBContainerView *hubContainerView = [[HUBContainerView alloc] initWithFrame:CGRectZero];\n+    self.view = hubContainerView;\n+\n     [self createCollectionViewIfNeeded];\n+    hubContainerView.collectionView = self.collectionView;",
        "path": "sources/HUBViewControllerImplementation.m",
        "position": null,
        "original_position": 9,
        "commit_id": "3bbd394128878c8feb218fd4bc492f79cc368855",
        "original_commit_id": "0e36e61236bf2ea375905f960d3da74ac1cb291f",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Move this into `createCollectionViewIfNeeded` instead? That way, when the collection view is re-created (for example after a memory warning), the container view's reference will be updated.\n",
        "created_at": "2016-11-08T15:16:25Z",
        "updated_at": "2016-11-09T11:49:41Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/130#discussion_r87008911",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/130",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/87008911"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/130#discussion_r87008911"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/130"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/87013114",
        "pull_request_review_id": 7642105,
        "id": 87013114,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg3MDEzMTE0",
        "diff_hunk": "@@ -865,6 +866,9 @@ - (void)createCollectionViewIfNeeded\n     collectionView.delegate = self;\n     \n     [self.view insertSubview:collectionView atIndex:0];",
        "path": "sources/HUBViewControllerImplementation.m",
        "position": null,
        "original_position": 11,
        "commit_id": "3bbd394128878c8feb218fd4bc492f79cc368855",
        "original_commit_id": "3bce7f0b9712e42457740c1c25963eee521e173d",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You're now already doing this in `HUBContainerView`. So remove this to avoid doing this twice.\n",
        "created_at": "2016-11-08T15:34:11Z",
        "updated_at": "2016-11-09T11:49:41Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/130#discussion_r87013114",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/130",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/87013114"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/130#discussion_r87013114"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/130"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86373236",
        "pull_request_review_id": 7035466,
        "id": 86373236,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg2MzczMjM2",
        "diff_hunk": "@@ -58,6 +58,40 @@ platform :ios do\n   end\n \n \n+  desc 'Run ui tests'\n+  lane :uitest do\n+    system('pkill', '-9', '-x', 'Simulator')\n+    UI.success('Simulator app killed')\n+\n+    device = ENV['TEST_DEVICE_NAME'] || 'iPhone 6s'\n+    UI.message(\"Simulator testing device set to '#{device}'\")\n+\n+    output_directory = 'build/tests'",
        "path": "fastlane/Fastfile",
        "position": null,
        "original_position": 12,
        "commit_id": "b960df4fb814ca5e8adcd62b6e8d53b2ee7b6356",
        "original_commit_id": "4937c0a00d278b0e730ac8fe15d5b47ded59a999",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Change to `'build/ui-tests'` so we don\u2019t overwrite the results of the unit tests.\n\nSuggested fix in https://github.com/spotify/HubFramework/pull/125#discussion_r86376889\n",
        "created_at": "2016-11-03T15:41:01Z",
        "updated_at": "2016-11-09T14:07:44Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/125#discussion_r86373236",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/125",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86373236"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/125#discussion_r86373236"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/125"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86376889",
        "pull_request_review_id": 7035466,
        "id": 86376889,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg2Mzc2ODg5",
        "diff_hunk": "@@ -58,6 +58,40 @@ platform :ios do\n   end\n \n \n+  desc 'Run ui tests'\n+  lane :uitest do",
        "path": "fastlane/Fastfile",
        "position": null,
        "original_position": 5,
        "commit_id": "b960df4fb814ca5e8adcd62b6e8d53b2ee7b6356",
        "original_commit_id": "4937c0a00d278b0e730ac8fe15d5b47ded59a999",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This looks like an identical copy-paste of the `:test` lane. Except the value passed for the `:scheme` parameter. Could we instead make both of these use a shared lane that takes a `:scheme` parameter?\n\nSee https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Advanced.md#passing-parameters for more info on passing parameters to lanes.\n\n---\n\nMaybe something like:\n\n``` ruby\nlane :test do\n  run_tests(scheme: 'HubFramework', output_label: 'tests')\nend\n\nlane :test_ui do\n  run_tests(scheme: 'HubFrameworkDemo', output_label: 'ui-tests')\nend\n\nprivate_lane :run_tests do |options|\n  scheme = options[:scheme]\n  output_label = options[:output_label]\n\n  UI.user_error!(\"No Xcode scheme provided\") unless scheme\n  UI.user_error!(\"No label for the output was provided\") unless output_label\n\n  system('pkill', '-9', '-x', 'Simulator')\n  UI.success('Simulator app killed')\n\n  device = ENV['TEST_DEVICE_NAME'] || 'iPhone 6s'\n  UI.message(\"Simulator testing device set to '#{device}'\")\n\n  output_directory = \"build/#{output_label}\"\n  ENV['XCPRETTY_JSON_FILE_OUTPUT'] = \"#{output_directory}/summary.json\"\n\n  scan(\n    :workspace => 'HubFramework.xcworkspace',\n    :scheme => scheme,\n    :devices => [device],\n    :derived_data_path => 'build/DerivedData',\n    :output_directory => output_directory,\n    :buildlog_path => 'build/logs/tests',\n    :code_coverage => true,\n    :output_types => '',\n    :fail_build => false,\n    :formatter => 'xcpretty-json-formatter'\n  )\n\n  trainer(\n    path: 'build',\n    output_directory: output_directory,\n    extension: '.junit'\n  )\n\n  codecov() if ENV['CODECOV_TOKEN'] or ENV['TRAVIS'] == 'true'\nend\n```\n",
        "created_at": "2016-11-03T15:54:28Z",
        "updated_at": "2016-11-09T14:07:44Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/125#discussion_r86376889",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/125",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86376889"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/125#discussion_r86376889"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/125"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86462544",
        "pull_request_review_id": 7122045,
        "id": 86462544,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg2NDYyNTQ0",
        "diff_hunk": "@@ -0,0 +1,50 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+import XCTest\n+\n+class HubFrameworkDemoUITests: XCTestCase {\n+\n+    override func setUp() {\n+        super.setUp()\n+        \n+        continueAfterFailure = false\n+        XCUIApplication().launch()\n+\n+        XCUIDevice.shared().orientation = .portrait\n+    }\n+    \n+    func testTappingTopLevelComponent() {\n+        let app = XCUIApplication()\n+\n+        // Tap \"Pretty pictures\" and make sure we navigate to that page.\n+        app.collectionViews.staticTexts[\"Pretty pictures\"].tap()\n+        XCTAssertTrue(app.navigationBars[\"Pretty Pictures\"].exists)\n+\n+        // Tap the 2nd cell\n+        let collectionView = rootCollectionView(for:app)\n+        collectionView.cells.collectionViews.children(matching: .cell).element(boundBy: 0).otherElements.children(matching: .image).element.tap()\n+    }\n+\n+    private func rootCollectionView(for app:XCUIApplication) -> XCUIElement {\n+        return app.otherElements.containing(.navigationBar, identifier:\"Pretty Pictures\").children(matching: .other).element.children(matching: .other).element.children(matching: .other).element.children(matching: .collectionView).element",
        "path": "demo/tests/HubFrameworkDemoUITests.swift",
        "position": null,
        "original_position": 48,
        "commit_id": "b960df4fb814ca5e8adcd62b6e8d53b2ee7b6356",
        "original_commit_id": "4937c0a00d278b0e730ac8fe15d5b47ded59a999",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This is a very long statement. Maybe it can be split up into multiple lines for easier readability? \ud83e\udd14\n",
        "created_at": "2016-11-03T23:09:01Z",
        "updated_at": "2016-11-09T14:07:44Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/125#discussion_r86462544",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/125",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86462544"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/125#discussion_r86462544"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/125"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86462601",
        "pull_request_review_id": 7122045,
        "id": 86462601,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg2NDYyNjAx",
        "diff_hunk": "@@ -0,0 +1,50 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+import XCTest\n+\n+class HubFrameworkDemoUITests: XCTestCase {\n+\n+    override func setUp() {\n+        super.setUp()\n+        \n+        continueAfterFailure = false\n+        XCUIApplication().launch()\n+\n+        XCUIDevice.shared().orientation = .portrait\n+    }\n+    \n+    func testTappingTopLevelComponent() {\n+        let app = XCUIApplication()\n+\n+        // Tap \"Pretty pictures\" and make sure we navigate to that page.\n+        app.collectionViews.staticTexts[\"Pretty pictures\"].tap()\n+        XCTAssertTrue(app.navigationBars[\"Pretty Pictures\"].exists)\n+\n+        // Tap the 2nd cell\n+        let collectionView = rootCollectionView(for:app)\n+        collectionView.cells.collectionViews.children(matching: .cell).element(boundBy: 0).otherElements.children(matching: .image).element.tap()\n+    }\n+\n+    private func rootCollectionView(for app:XCUIApplication) -> XCUIElement {",
        "path": "demo/tests/HubFrameworkDemoUITests.swift",
        "position": null,
        "original_position": 47,
        "commit_id": "b960df4fb814ca5e8adcd62b6e8d53b2ee7b6356",
        "original_commit_id": "4937c0a00d278b0e730ac8fe15d5b47ded59a999",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\ud83c\udfa8 Space between parameter label (`app`) and type (`XCUIApplication`).\n",
        "created_at": "2016-11-03T23:09:27Z",
        "updated_at": "2016-11-09T14:07:44Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/125#discussion_r86462601",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/125",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86462601"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/125#discussion_r86462601"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/125"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86762301",
        "pull_request_review_id": 7402189,
        "id": 86762301,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg2NzYyMzAx",
        "diff_hunk": "@@ -0,0 +1,50 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+import XCTest\n+\n+class HubFrameworkDemoUITests: XCTestCase {\n+\n+    override func setUp() {\n+        super.setUp()\n+        \n+        continueAfterFailure = false\n+        XCUIApplication().launch()\n+\n+        XCUIDevice.shared().orientation = .portrait\n+    }\n+    \n+    func testTappingTopLevelComponent() {\n+        let app = XCUIApplication()\n+\n+        // Tap \"Pretty pictures\" and make sure we navigate to that page.\n+        app.collectionViews.staticTexts[\"Pretty pictures\"].tap()\n+        XCTAssertTrue(app.navigationBars[\"Pretty Pictures\"].exists)\n+\n+        // Tap the 2nd cell\n+        let collectionView = rootCollectionView(for:app)\n+        collectionView.cells.collectionViews.children(matching: .cell).element(boundBy: 0).otherElements.children(matching: .image).element.tap()\n+    }\n+\n+    private func rootCollectionView(for app:XCUIApplication) -> XCUIElement {\n+        return app.otherElements.containing(.navigationBar, identifier:\"Pretty Pictures\").children(matching: .other).element.children(matching: .other).element.children(matching: .other).element.children(matching: .collectionView).element",
        "path": "demo/tests/HubFrameworkDemoUITests.swift",
        "position": null,
        "original_position": 48,
        "commit_id": "b960df4fb814ca5e8adcd62b6e8d53b2ee7b6356",
        "original_commit_id": "4937c0a00d278b0e730ac8fe15d5b47ded59a999",
        "user": {
            "login": "cerihughes",
            "id": 12008876,
            "node_id": "MDQ6VXNlcjEyMDA4ODc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12008876?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cerihughes",
            "html_url": "https://github.com/cerihughes",
            "followers_url": "https://api.github.com/users/cerihughes/followers",
            "following_url": "https://api.github.com/users/cerihughes/following{/other_user}",
            "gists_url": "https://api.github.com/users/cerihughes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cerihughes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cerihughes/subscriptions",
            "organizations_url": "https://api.github.com/users/cerihughes/orgs",
            "repos_url": "https://api.github.com/users/cerihughes/repos",
            "events_url": "https://api.github.com/users/cerihughes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cerihughes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Agreed, but this is how Xcode generates these tests. It actually takes longer to format the generated code into readable lines than it does to generate the test code :O\n\nI will tidy this up though...\n",
        "created_at": "2016-11-07T12:03:29Z",
        "updated_at": "2016-11-09T14:07:44Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/125#discussion_r86762301",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/125",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86762301"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/125#discussion_r86762301"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/125"
            }
        },
        "in_reply_to_id": 86462544
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86762319",
        "pull_request_review_id": 7402203,
        "id": 86762319,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg2NzYyMzE5",
        "diff_hunk": "@@ -0,0 +1,50 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+import XCTest\n+\n+class HubFrameworkDemoUITests: XCTestCase {\n+\n+    override func setUp() {\n+        super.setUp()\n+        \n+        continueAfterFailure = false\n+        XCUIApplication().launch()\n+\n+        XCUIDevice.shared().orientation = .portrait\n+    }\n+    \n+    func testTappingTopLevelComponent() {\n+        let app = XCUIApplication()\n+\n+        // Tap \"Pretty pictures\" and make sure we navigate to that page.\n+        app.collectionViews.staticTexts[\"Pretty pictures\"].tap()\n+        XCTAssertTrue(app.navigationBars[\"Pretty Pictures\"].exists)\n+\n+        // Tap the 2nd cell\n+        let collectionView = rootCollectionView(for:app)\n+        collectionView.cells.collectionViews.children(matching: .cell).element(boundBy: 0).otherElements.children(matching: .image).element.tap()\n+    }\n+\n+    private func rootCollectionView(for app:XCUIApplication) -> XCUIElement {",
        "path": "demo/tests/HubFrameworkDemoUITests.swift",
        "position": null,
        "original_position": 47,
        "commit_id": "b960df4fb814ca5e8adcd62b6e8d53b2ee7b6356",
        "original_commit_id": "4937c0a00d278b0e730ac8fe15d5b47ded59a999",
        "user": {
            "login": "cerihughes",
            "id": 12008876,
            "node_id": "MDQ6VXNlcjEyMDA4ODc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12008876?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cerihughes",
            "html_url": "https://github.com/cerihughes",
            "followers_url": "https://api.github.com/users/cerihughes/followers",
            "following_url": "https://api.github.com/users/cerihughes/following{/other_user}",
            "gists_url": "https://api.github.com/users/cerihughes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cerihughes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cerihughes/subscriptions",
            "organizations_url": "https://api.github.com/users/cerihughes/orgs",
            "repos_url": "https://api.github.com/users/cerihughes/repos",
            "events_url": "https://api.github.com/users/cerihughes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cerihughes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Will fix...\n",
        "created_at": "2016-11-07T12:03:38Z",
        "updated_at": "2016-11-09T14:07:44Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/125#discussion_r86762319",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/125",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/86762319"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/125#discussion_r86762319"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/125"
            }
        },
        "in_reply_to_id": 86462601
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/87204140",
        "pull_request_review_id": 7824527,
        "id": 87204140,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg3MjA0MTQw",
        "diff_hunk": "@@ -864,6 +870,7 @@ - (void)createCollectionViewIfNeeded\n     collectionView.dataSource = self;\n     collectionView.delegate = self;\n     \n+    [self.view addGestureRecognizer:collectionView.panGestureRecognizer];",
        "path": "sources/HUBViewControllerImplementation.m",
        "position": null,
        "original_position": 21,
        "commit_id": "0868dc9dc16587641070878c0fb5085ff0356d0e",
        "original_commit_id": "64f658473dc0c2fd08b648037f3d7f6d6dd25caf",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Could this ever cause the gesture to be recognized twice? E.g. once in the UICollectionView, and once in its superview?\n",
        "created_at": "2016-11-09T14:42:18Z",
        "updated_at": "2016-11-09T15:21:47Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/133#discussion_r87204140",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/133",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/87204140"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/133#discussion_r87204140"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/133"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/87208915",
        "pull_request_review_id": 7829305,
        "id": 87208915,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg3MjA4OTE1",
        "diff_hunk": "@@ -864,6 +870,7 @@ - (void)createCollectionViewIfNeeded\n     collectionView.dataSource = self;\n     collectionView.delegate = self;\n     \n+    [self.view addGestureRecognizer:collectionView.panGestureRecognizer];",
        "path": "sources/HUBViewControllerImplementation.m",
        "position": null,
        "original_position": 21,
        "commit_id": "0868dc9dc16587641070878c0fb5085ff0356d0e",
        "original_commit_id": "64f658473dc0c2fd08b648037f3d7f6d6dd25caf",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Nope, since a gesture recognizer can only be part of a single view, it will be removed from the collection view \ud83d\ude42 \n",
        "created_at": "2016-11-09T15:06:03Z",
        "updated_at": "2016-11-09T15:21:47Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/133#discussion_r87208915",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/133",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/87208915"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/133#discussion_r87208915"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/133"
            }
        },
        "in_reply_to_id": 87204140
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/87436307",
        "pull_request_review_id": 8049999,
        "id": 87436307,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg3NDM2MzA3",
        "diff_hunk": "@@ -2536,4 +2559,9 @@ - (void)registerAndGenerateComponentsWithNamespace:(NSString *)namespace\n     };\n }\n \n+- (void)assertEdgeInsetsEqualInsets:(UIEdgeInsets)insets",
        "path": "tests/HUBViewControllerTests.m",
        "position": null,
        "original_position": 34,
        "commit_id": "d2abc093d19ac94d6caad75fff1b666d9935b10c",
        "original_commit_id": "2d5b0cd60517d3791e22609be54a53e6203550ef",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Taken out of context this method name looks a bit off. I would suggest either just using a local block to perform these calculations, or naming it a bit more descriptive (like `assertCollectionViewContentInsetEqualToEdgeInsets`). What do you think?\n",
        "created_at": "2016-11-10T16:51:50Z",
        "updated_at": "2016-11-10T19:47:59Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/140#discussion_r87436307",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/140",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/87436307"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/140#discussion_r87436307"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/140"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/87436467",
        "pull_request_review_id": 8049999,
        "id": 87436467,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg3NDM2NDY3",
        "diff_hunk": "@@ -1511,6 +1511,29 @@ - (void)testSetScrollOffsetForwardsAnimatedFlagToCollectionView\n     XCTAssertTrue(self.collectionView.appliedScrollViewOffsetAnimatedFlag);\n }\n \n+- (void)testRenderingUpdatesContentInsetBeforeAndAfterRendering\n+{\n+    UIEdgeInsets const firstInsets = UIEdgeInsetsMake(100, 30, 40, 200);\n+    UIEdgeInsets const secondInsets = UIEdgeInsetsMake(50, 0, 0, 0);\n+    __block NSUInteger calls = 0;\n+    \n+    __weak HUBViewControllerTests *weakSelf = self;\n+    self.scrollHandler.contentInsetHandler = ^UIEdgeInsets(UIViewController<HUBViewController> *controller, UIEdgeInsets insets) {\n+        HUBViewControllerTests *strongSelf = weakSelf;\n+        if (++calls == 1) {",
        "path": "tests/HUBViewControllerTests.m",
        "position": null,
        "original_position": 13,
        "commit_id": "d2abc093d19ac94d6caad75fff1b666d9935b10c",
        "original_commit_id": "2d5b0cd60517d3791e22609be54a53e6203550ef",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I can see why they removed these operators from Swift now \ud83d\ude05 This is a bit hard to read, could you make the increment outside of the `if` statement instead? \ud83d\ude07 \n",
        "created_at": "2016-11-10T16:52:32Z",
        "updated_at": "2016-11-10T19:47:59Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/140#discussion_r87436467",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/140",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/87436467"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/140#discussion_r87436467"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/140"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/87436550",
        "pull_request_review_id": 8049999,
        "id": 87436550,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg3NDM2NTUw",
        "diff_hunk": "@@ -1511,6 +1511,29 @@ - (void)testSetScrollOffsetForwardsAnimatedFlagToCollectionView\n     XCTAssertTrue(self.collectionView.appliedScrollViewOffsetAnimatedFlag);\n }\n \n+- (void)testRenderingUpdatesContentInsetBeforeAndAfterRendering\n+{\n+    UIEdgeInsets const firstInsets = UIEdgeInsetsMake(100, 30, 40, 200);\n+    UIEdgeInsets const secondInsets = UIEdgeInsetsMake(50, 0, 0, 0);\n+    __block NSUInteger calls = 0;",
        "path": "tests/HUBViewControllerTests.m",
        "position": null,
        "original_position": 8,
        "commit_id": "d2abc093d19ac94d6caad75fff1b666d9935b10c",
        "original_commit_id": "2d5b0cd60517d3791e22609be54a53e6203550ef",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Name this a bit more descriptively?\n",
        "created_at": "2016-11-10T16:52:56Z",
        "updated_at": "2016-11-10T19:47:59Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/140#discussion_r87436550",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/140",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/87436550"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/140#discussion_r87436550"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/140"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/87438588",
        "pull_request_review_id": 8052319,
        "id": 87438588,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg3NDM4NTg4",
        "diff_hunk": "@@ -2536,4 +2559,9 @@ - (void)registerAndGenerateComponentsWithNamespace:(NSString *)namespace\n     };\n }\n \n+- (void)assertEdgeInsetsEqualInsets:(UIEdgeInsets)insets",
        "path": "tests/HUBViewControllerTests.m",
        "position": null,
        "original_position": 34,
        "commit_id": "d2abc093d19ac94d6caad75fff1b666d9935b10c",
        "original_commit_id": "2d5b0cd60517d3791e22609be54a53e6203550ef",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yeah it's a workaround to not being able to use `XCTAssert`s while inside the content inset blocks due to retain loop warnings, since that macro uses self inside \ud83d\ude11  but using another block makes more sense, I'll do that\n",
        "created_at": "2016-11-10T17:02:16Z",
        "updated_at": "2016-11-10T19:47:59Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/140#discussion_r87438588",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/140",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/87438588"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/140#discussion_r87438588"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/140"
            }
        },
        "in_reply_to_id": 87436307
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/87508493",
        "pull_request_review_id": 8120271,
        "id": 87508493,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg3NTA4NDkz",
        "diff_hunk": "@@ -2536,4 +2559,9 @@ - (void)registerAndGenerateComponentsWithNamespace:(NSString *)namespace\n     };\n }\n \n+- (void)assertEdgeInsetsEqualInsets:(UIEdgeInsets)insets",
        "path": "tests/HUBViewControllerTests.m",
        "position": null,
        "original_position": 34,
        "commit_id": "d2abc093d19ac94d6caad75fff1b666d9935b10c",
        "original_commit_id": "2d5b0cd60517d3791e22609be54a53e6203550ef",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You can always just use `NSCAssert` :)\n",
        "created_at": "2016-11-10T23:21:45Z",
        "updated_at": "2016-11-10T23:22:12Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/140#discussion_r87508493",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/140",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/87508493"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/140#discussion_r87508493"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/140"
            }
        },
        "in_reply_to_id": 87436307
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/87444085",
        "pull_request_review_id": 8057719,
        "id": 87444085,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg3NDQ0MDg1",
        "diff_hunk": "@@ -266,6 +266,22 @@ - (void)removeAllComponentModelBuilders\n                                                        customData:[self.customData copy]];\n }\n \n+#pragma mark - Manipulate custom data\n+\n+- (void)setCustomDataValue:(nullable id)value forKey:(nonnull NSString *)key\n+{\n+    NSMutableDictionary *customData = self.customData.mutableCopy;",
        "path": "sources/HUBViewModelBuilderImplementation.m",
        "position": null,
        "original_position": 8,
        "commit_id": "546c88824fa6570d65825718cef0a347a7971d34",
        "original_commit_id": "fe62f53bf399621ea6387d40eee37d238306728a",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Since mutable copy is an action being taken on the dictionary, call it as a method with `[]` notation.\n",
        "created_at": "2016-11-10T17:29:25Z",
        "updated_at": "2016-11-11T08:04:42Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/145#discussion_r87444085",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/145",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/87444085"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/145#discussion_r87444085"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/145"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/87444275",
        "pull_request_review_id": 8057719,
        "id": 87444275,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg3NDQ0Mjc1",
        "diff_hunk": "@@ -266,6 +266,22 @@ - (void)removeAllComponentModelBuilders\n                                                        customData:[self.customData copy]];\n }\n \n+#pragma mark - Manipulate custom data\n+\n+- (void)setCustomDataValue:(nullable id)value forKey:(nonnull NSString *)key\n+{\n+    NSMutableDictionary *customData = self.customData.mutableCopy;\n+    customData = customData ?: [[NSMutableDictionary alloc] init];",
        "path": "sources/HUBViewModelBuilderImplementation.m",
        "position": null,
        "original_position": 9,
        "commit_id": "546c88824fa6570d65825718cef0a347a7971d34",
        "original_commit_id": "fe62f53bf399621ea6387d40eee37d238306728a",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Suggestion: You could avoid `customData` becoming `nullable` by combining this statement with the one above:\n\n``` objective-c\nNSMutableDictionary * const customData = [self.customData mutableCopy] ?: [NSMutableDictionary new];\n```\n",
        "created_at": "2016-11-10T17:30:18Z",
        "updated_at": "2016-11-11T08:04:42Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/145#discussion_r87444275",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/145",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/87444275"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/145#discussion_r87444275"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/145"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/87444341",
        "pull_request_review_id": 8057719,
        "id": 87444341,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg3NDQ0MzQx",
        "diff_hunk": "@@ -266,6 +266,22 @@ - (void)removeAllComponentModelBuilders\n                                                        customData:[self.customData copy]];\n }\n \n+#pragma mark - Manipulate custom data\n+\n+- (void)setCustomDataValue:(nullable id)value forKey:(nonnull NSString *)key\n+{\n+    NSMutableDictionary *customData = self.customData.mutableCopy;\n+    customData = customData ?: [[NSMutableDictionary alloc] init];",
        "path": "sources/HUBViewModelBuilderImplementation.m",
        "position": null,
        "original_position": 9,
        "commit_id": "546c88824fa6570d65825718cef0a347a7971d34",
        "original_commit_id": "fe62f53bf399621ea6387d40eee37d238306728a",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Or maybe the compiler won't let you do that? \ud83e\udd14 \n",
        "created_at": "2016-11-10T17:30:38Z",
        "updated_at": "2016-11-11T08:04:42Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/145#discussion_r87444341",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/145",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/87444341"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/145#discussion_r87444341"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/145"
            }
        },
        "in_reply_to_id": 87444275
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/87444563",
        "pull_request_review_id": 8057719,
        "id": 87444563,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg3NDQ0NTYz",
        "diff_hunk": "@@ -73,6 +73,17 @@ - (void)testPropertyAssignment\n     XCTAssertEqualObjects(model.customData, self.builder.customData);\n }\n \n+- (void)testCustomDataUpdates\n+{\n+    [self.builder setCustomDataValue:@\"test_object\" forKey:@\"test_key\"];\n+\n+    XCTAssertEqual([self.builder.customData objectForKey:@\"test_key\"], @\"test_object\");",
        "path": "tests/HUBViewModelBuilderTests.m",
        "position": null,
        "original_position": 8,
        "commit_id": "546c88824fa6570d65825718cef0a347a7971d34",
        "original_commit_id": "fe62f53bf399621ea6387d40eee37d238306728a",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Use `XCTAssertEqualObjects` to avoid comparing against the exact same string instance.\n",
        "created_at": "2016-11-10T17:31:14Z",
        "updated_at": "2016-11-11T08:04:42Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/145#discussion_r87444563",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/145",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/87444563"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/145#discussion_r87444563"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/145"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/88197045",
        "pull_request_review_id": 8776392,
        "id": 88197045,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4MTk3MDQ1",
        "diff_hunk": "@@ -46,7 +47,8 @@ NS_ASSUME_NONNULL_BEGIN\n                               type:(HUBComponentImageType)type\n                                URL:(nullable NSURL *)URL\n                    placeholderIcon:(nullable id<HUBIcon>)placeholderIcon\n-                        localImage:(nullable UIImage *)localImage HUB_DESIGNATED_INITIALIZER;\n+                        localImage:(nullable UIImage *)localImage\n+                        customData:(nullable NSDictionary *) customData HUB_DESIGNATED_INITIALIZER;",
        "path": "sources/HUBComponentImageDataImplementation.h",
        "position": null,
        "original_position": 14,
        "commit_id": "46100e1c88e8a6e42269ce6e65b4c6b574cfc71f",
        "original_commit_id": "5329900ab33a9c8fb584920966a05d63426c2480",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\ud83c\udfa8 Can you remove the space between `)` and `customData`? \ud83d\ude07 \n",
        "created_at": "2016-11-16T09:24:03Z",
        "updated_at": "2016-11-16T12:43:25Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/157#discussion_r88197045",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/157",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/88197045"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/157#discussion_r88197045"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/157"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/88233992",
        "pull_request_review_id": 8812334,
        "id": 88233992,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4MjMzOTky",
        "diff_hunk": "@@ -114,23 +116,26 @@ - (BOOL)handleActionWithContext:(id<HUBActionContext>)context\n     return actionPerformed;\n }\n \n-#pragma mark - HUBAsyncActionDelegate\n+#pragma mark - HUBAsyncActionWrapperDelegate\n \n-- (void)actionDidFinish:(id<HUBAsyncAction>)action\n+- (void)actionDidFinish:(HUBAsyncActionWrapper *)action\n+        withContext:(id<HUBActionContext>)context\n         chainToActionWithIdentifier:(nullable HUBIdentifier *)nextActionIdentifier\n-        customData:(nullable NSDictionary<NSString *, id> *)nextActionCustomData\n+        customData:(nullable NSDictionary<NSString *,id> *)nextActionCustomData",
        "path": "sources/HUBActionHandlerWrapper.m",
        "position": null,
        "original_position": 52,
        "commit_id": "ecd5eacf4600fc5a540921277e14a5dc46fc07b8",
        "original_commit_id": "0aab98b4c13c1c304cc26505da9ee1485cc83e13",
        "user": {
            "login": "krris",
            "id": 1786612,
            "node_id": "MDQ6VXNlcjE3ODY2MTI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1786612?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krris",
            "html_url": "https://github.com/krris",
            "followers_url": "https://api.github.com/users/krris/followers",
            "following_url": "https://api.github.com/users/krris/following{/other_user}",
            "gists_url": "https://api.github.com/users/krris/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krris/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krris/subscriptions",
            "organizations_url": "https://api.github.com/users/krris/orgs",
            "repos_url": "https://api.github.com/users/krris/repos",
            "events_url": "https://api.github.com/users/krris/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krris/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Shouldn't be a space between `NSString` and `id`? \ud83d\udd2c \n",
        "created_at": "2016-11-16T13:19:53Z",
        "updated_at": "2016-11-17T10:41:21Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/159#discussion_r88233992",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/159",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/88233992"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/159#discussion_r88233992"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/159"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/88234429",
        "pull_request_review_id": 8812334,
        "id": 88234429,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4MjM0NDI5",
        "diff_hunk": "@@ -0,0 +1,53 @@\n+#import \"HUBHeaderMacros.h\"\n+\n+@class HUBAsyncActionWrapper;\n+@class HUBIdentifier;\n+@protocol HUBAsyncAction;\n+@protocol HUBActionContext;\n+\n+NS_ASSUME_NONNULL_BEGIN\n+\n+/// Delegate protocol for `HUBAsyncActionWrapper`\n+@protocol HUBAsyncActionWrapperDelegate <NSObject>\n+\n+/**\n+ *  Notify an async action wrapper's delegate that it finished\n+ *\n+ *  @param action The action that finished\n+ *  @param context The context that the action was performed using\n+ *  @param nextActionIdentifier The identifier of any chained action to perform\n+ *  @param nextActionCustomData Any custom data to pass to the chained action\n+ */\n+- (void)actionDidFinish:(HUBAsyncActionWrapper *)action\n+            withContext:(id<HUBActionContext>)context\n+        chainToActionWithIdentifier:(nullable HUBIdentifier *)nextActionIdentifier",
        "path": "sources/HUBAsyncActionWrapper.h",
        "position": null,
        "original_position": 23,
        "commit_id": "ecd5eacf4600fc5a540921277e14a5dc46fc07b8",
        "original_commit_id": "0aab98b4c13c1c304cc26505da9ee1485cc83e13",
        "user": {
            "login": "krris",
            "id": 1786612,
            "node_id": "MDQ6VXNlcjE3ODY2MTI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1786612?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krris",
            "html_url": "https://github.com/krris",
            "followers_url": "https://api.github.com/users/krris/followers",
            "following_url": "https://api.github.com/users/krris/following{/other_user}",
            "gists_url": "https://api.github.com/users/krris/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krris/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krris/subscriptions",
            "organizations_url": "https://api.github.com/users/krris/orgs",
            "repos_url": "https://api.github.com/users/krris/repos",
            "events_url": "https://api.github.com/users/krris/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krris/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Strange indentation but there's no way to fix this \ud83d\ude05 \n",
        "created_at": "2016-11-16T13:22:10Z",
        "updated_at": "2016-11-17T10:41:21Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/159#discussion_r88234429",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/159",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/88234429"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/159#discussion_r88234429"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/159"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/88238785",
        "pull_request_review_id": 8817053,
        "id": 88238785,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4MjM4Nzg1",
        "diff_hunk": "@@ -0,0 +1,53 @@\n+#import \"HUBHeaderMacros.h\"\n+\n+@class HUBAsyncActionWrapper;\n+@class HUBIdentifier;\n+@protocol HUBAsyncAction;\n+@protocol HUBActionContext;\n+\n+NS_ASSUME_NONNULL_BEGIN\n+\n+/// Delegate protocol for `HUBAsyncActionWrapper`\n+@protocol HUBAsyncActionWrapperDelegate <NSObject>\n+\n+/**\n+ *  Notify an async action wrapper's delegate that it finished\n+ *\n+ *  @param action The action that finished\n+ *  @param context The context that the action was performed using\n+ *  @param nextActionIdentifier The identifier of any chained action to perform\n+ *  @param nextActionCustomData Any custom data to pass to the chained action\n+ */\n+- (void)actionDidFinish:(HUBAsyncActionWrapper *)action\n+            withContext:(id<HUBActionContext>)context\n+        chainToActionWithIdentifier:(nullable HUBIdentifier *)nextActionIdentifier",
        "path": "sources/HUBAsyncActionWrapper.h",
        "position": null,
        "original_position": 23,
        "commit_id": "ecd5eacf4600fc5a540921277e14a5dc46fc07b8",
        "original_commit_id": "0aab98b4c13c1c304cc26505da9ee1485cc83e13",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Oh, I should actually align them better \ud83d\ude04 \n",
        "created_at": "2016-11-16T13:48:24Z",
        "updated_at": "2016-11-17T10:41:21Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/159#discussion_r88238785",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/159",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/88238785"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/159#discussion_r88238785"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/159"
            }
        },
        "in_reply_to_id": 88234429
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/88238836",
        "pull_request_review_id": 8817095,
        "id": 88238836,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4MjM4ODM2",
        "diff_hunk": "@@ -114,23 +116,26 @@ - (BOOL)handleActionWithContext:(id<HUBActionContext>)context\n     return actionPerformed;\n }\n \n-#pragma mark - HUBAsyncActionDelegate\n+#pragma mark - HUBAsyncActionWrapperDelegate\n \n-- (void)actionDidFinish:(id<HUBAsyncAction>)action\n+- (void)actionDidFinish:(HUBAsyncActionWrapper *)action\n+        withContext:(id<HUBActionContext>)context\n         chainToActionWithIdentifier:(nullable HUBIdentifier *)nextActionIdentifier\n-        customData:(nullable NSDictionary<NSString *, id> *)nextActionCustomData\n+        customData:(nullable NSDictionary<NSString *,id> *)nextActionCustomData",
        "path": "sources/HUBActionHandlerWrapper.m",
        "position": null,
        "original_position": 52,
        "commit_id": "ecd5eacf4600fc5a540921277e14a5dc46fc07b8",
        "original_commit_id": "0aab98b4c13c1c304cc26505da9ee1485cc83e13",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "There should! Great catch \ud83d\udc4d \n",
        "created_at": "2016-11-16T13:48:36Z",
        "updated_at": "2016-11-17T10:41:21Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/159#discussion_r88238836",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/159",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/88238836"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/159#discussion_r88238836"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/159"
            }
        },
        "in_reply_to_id": 88233992
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/88103816",
        "pull_request_review_id": 8687275,
        "id": 88103816,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4MTAzODE2",
        "diff_hunk": "@@ -1334,6 +1334,19 @@\n \t\t\t\tGCC_DYNAMIC_NO_PIC = NO;\n \t\t\t\tMTL_ENABLE_DEBUG_INFO = YES;\n \t\t\t\tSDKROOT = iphoneos;\n+\t\t\t\tWARNING_CFLAGS = (",
        "path": "HubFramework.xcodeproj/project.pbxproj",
        "position": null,
        "original_position": 4,
        "commit_id": "29d1675e201044d5a2f40a6e0b9e5faba3ef37e2",
        "original_commit_id": "b89fadcf7712b7a30a516e320787600860bc88f2",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "All warnings should be added via the [`spotify_os.xcconfig`](https://github.com/spotify/HubFramework/blob/master/spotify_os.xcconfig) otherwise we can\u2019t override the settings internally.\n",
        "created_at": "2016-11-15T20:18:01Z",
        "updated_at": "2016-11-17T12:26:29Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/156#discussion_r88103816",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/156",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/88103816"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/156#discussion_r88103816"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/156"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/88024703",
        "pull_request_review_id": 8610642,
        "id": 88024703,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4MDI0NzAz",
        "diff_hunk": "@@ -392,7 +392,8 @@ - (CGRect)frameForBodyComponentAtIndex:(NSUInteger)index\n     }\n     \n     NSIndexPath * const indexPath = [NSIndexPath indexPathForItem:(NSInteger)index inSection:0];\n-    return [self.collectionView layoutAttributesForItemAtIndexPath:indexPath].frame;\n+    HUBCollectionViewLayout * const layout = (HUBCollectionViewLayout *)self.collectionView.collectionViewLayout;",
        "path": "sources/HUBViewControllerImplementation.m",
        "position": null,
        "original_position": 5,
        "commit_id": "b078e76c47f4c3881fbf5935fb482bb3641fc58a",
        "original_commit_id": "2da77d418c2bc0636309babadef4923c5d216888",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Why do you need this casting?\n",
        "created_at": "2016-11-15T14:20:24Z",
        "updated_at": "2016-11-17T17:25:47Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/155#discussion_r88024703",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/155",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/88024703"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/155#discussion_r88024703"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/155"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/88031204",
        "pull_request_review_id": 8617003,
        "id": 88031204,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4MDMxMjA0",
        "diff_hunk": "@@ -392,7 +392,8 @@ - (CGRect)frameForBodyComponentAtIndex:(NSUInteger)index\n     }\n     \n     NSIndexPath * const indexPath = [NSIndexPath indexPathForItem:(NSInteger)index inSection:0];\n-    return [self.collectionView layoutAttributesForItemAtIndexPath:indexPath].frame;\n+    HUBCollectionViewLayout * const layout = (HUBCollectionViewLayout *)self.collectionView.collectionViewLayout;",
        "path": "sources/HUBViewControllerImplementation.m",
        "position": null,
        "original_position": 5,
        "commit_id": "b078e76c47f4c3881fbf5935fb482bb3641fc58a",
        "original_commit_id": "2da77d418c2bc0636309babadef4923c5d216888",
        "user": {
            "login": "ShervinS",
            "id": 3473562,
            "node_id": "MDQ6VXNlcjM0NzM1NjI=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/3473562?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ShervinS",
            "html_url": "https://github.com/ShervinS",
            "followers_url": "https://api.github.com/users/ShervinS/followers",
            "following_url": "https://api.github.com/users/ShervinS/following{/other_user}",
            "gists_url": "https://api.github.com/users/ShervinS/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ShervinS/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ShervinS/subscriptions",
            "organizations_url": "https://api.github.com/users/ShervinS/orgs",
            "repos_url": "https://api.github.com/users/ShervinS/repos",
            "events_url": "https://api.github.com/users/ShervinS/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ShervinS/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I could skip the casting, I just added it for clarity to understand that it differs from a UICollectionViewLayout. \n\nIf you call `layoutAttributesForItemAtIndexPath` on a collectionView directly, the collection view asserts if there is no layout for that indexpath.\n\nBut in our own `HUBCollectionViewLayout` class, we do this: \n\n``` objc\n- (nullable UICollectionViewLayoutAttributes *)layoutAttributesForItemAtIndexPath:(NSIndexPath *)indexPath\n{\n    return self.layoutAttributesByIndexPath[indexPath];\n}\n```\n\nwhich just returns nil if there are no layout attributes for the given index path. \nAnd this method can be called before the layout is done if called while the app is in the background. By using our method, we just return nil instead of asserting.\n",
        "created_at": "2016-11-15T14:51:19Z",
        "updated_at": "2016-11-17T17:25:47Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/155#discussion_r88031204",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/155",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/88031204"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/155#discussion_r88031204"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/155"
            }
        },
        "in_reply_to_id": 88024703
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/88209010",
        "pull_request_review_id": 8787977,
        "id": 88209010,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4MjA5MDEw",
        "diff_hunk": "@@ -392,7 +392,8 @@ - (CGRect)frameForBodyComponentAtIndex:(NSUInteger)index\n     }\n     \n     NSIndexPath * const indexPath = [NSIndexPath indexPathForItem:(NSInteger)index inSection:0];\n-    return [self.collectionView layoutAttributesForItemAtIndexPath:indexPath].frame;\n+    HUBCollectionViewLayout * const layout = (HUBCollectionViewLayout *)self.collectionView.collectionViewLayout;",
        "path": "sources/HUBViewControllerImplementation.m",
        "position": null,
        "original_position": 5,
        "commit_id": "b078e76c47f4c3881fbf5935fb482bb3641fc58a",
        "original_commit_id": "2da77d418c2bc0636309babadef4923c5d216888",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ah, I understand. You should be able to get rid of the casting sine you're just calling a `UICollectionViewLayout` API.\n",
        "created_at": "2016-11-16T10:33:05Z",
        "updated_at": "2016-11-17T17:25:47Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/155#discussion_r88209010",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/155",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/88209010"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/155#discussion_r88209010"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/155"
            }
        },
        "in_reply_to_id": 88024703
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/88873701",
        "pull_request_review_id": 9431810,
        "id": 88873701,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4ODczNzAx",
        "diff_hunk": "@@ -135,6 +135,14 @@ NS_ASSUME_NONNULL_BEGIN\n  */\n - (void)viewController:(HUBViewController *)viewController componentSelectedWithModel:(id<HUBComponentModel>)componentModel;\n \n+/**\n+ *  Sent to a Hub Framework view controller's delegate to ask if content inset for header\n+ *  component should be ignored\n+ *\n+ *  @param viewController The view controller which displays header component",
        "path": "include/HubFramework/HUBViewController.h",
        "position": null,
        "original_position": 8,
        "commit_id": "66baf2d989c329014e21ac2412e699bae2b09dab",
        "original_commit_id": "ea3c1ec64aa32d43959f985fe10b8bfaf66fde59",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Should be `displays a header component`",
        "created_at": "2016-11-21T11:15:01Z",
        "updated_at": "2016-11-21T11:42:37Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/173#discussion_r88873701",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/173",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/88873701"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/173#discussion_r88873701"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/173"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/88649322",
        "pull_request_review_id": 9217264,
        "id": 88649322,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4NjQ5MzIy",
        "diff_hunk": "@@ -0,0 +1,61 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+import UIKit\n+import HubFramework\n+\n+/// Navigation controller used for the Hub Framework demo app\n+class NavigationController: UINavigationController, HUBViewControllerDelegate {\n+    func viewController(_ viewController: HUBViewController, willUpdateWith viewModel: HUBViewModel) {\n+        let navigationBarImage: UIImage? = (viewModel.headerComponentModel == nil ? nil : UIImage())\n+        navigationBar.setBackgroundImage(navigationBarImage, for: .default)\n+        navigationBar.setBackgroundImage(navigationBarImage, for: .compact)\n+        navigationBar.shadowImage = navigationBarImage\n+    }\n+    \n+    func viewControllerDidUpdate(_ viewController: HUBViewController) {\n+        // No-op\n+    }\n+    \n+    func viewController(_ viewController: HUBViewController, didFailToUpdateWithError error: Error) {\n+        // No-op\n+    }\n+    \n+    func viewControllerDidFinishRendering(_ viewController: HUBViewController) {\n+        // No-op\n+    }\n+    \n+    func viewControllerShouldStartScrolling(_ viewController: HUBViewController) -> Bool {\n+        return true\n+    }\n+    \n+    func viewController(_ viewController: HUBViewController, componentWith componentModel: HUBComponentModel, layoutTraits: Set<HUBComponentLayoutTrait>, willAppearIn componentView: UIView) {\n+        // No-op\n+    }\n+    \n+    func viewController(_ viewController: HUBViewController, componentWith componentModel: HUBComponentModel, layoutTraits: Set<HUBComponentLayoutTrait>, didDisappearFrom componentView: UIView) {\n+        ",
        "path": "demo/sources/NavigationController.swift",
        "position": null,
        "original_position": 55,
        "commit_id": "66e83e94f32785654e0abd512e8215995e458d8c",
        "original_commit_id": "73cd13e394cc2af755c9e302fa3e5732b627bca5",
        "user": {
            "login": "krris",
            "id": 1786612,
            "node_id": "MDQ6VXNlcjE3ODY2MTI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1786612?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krris",
            "html_url": "https://github.com/krris",
            "followers_url": "https://api.github.com/users/krris/followers",
            "following_url": "https://api.github.com/users/krris/following{/other_user}",
            "gists_url": "https://api.github.com/users/krris/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krris/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krris/subscriptions",
            "organizations_url": "https://api.github.com/users/krris/orgs",
            "repos_url": "https://api.github.com/users/krris/repos",
            "events_url": "https://api.github.com/users/krris/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krris/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "`// No-op` is missing?\n",
        "created_at": "2016-11-18T12:34:14Z",
        "updated_at": "2016-11-21T15:48:06Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/169#discussion_r88649322",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/169",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/88649322"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/169#discussion_r88649322"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/169"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89113010",
        "pull_request_review_id": 9661327,
        "id": 89113010,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg5MTEzMDEw",
        "diff_hunk": "@@ -128,6 +128,15 @@ NS_ASSUME_NONNULL_BEGIN\n   didDisappearFromView:(UIView *)componentView;\n \n /**\n+ *  Sent to a Hub Framework view controller's delegate when a component view will be reused\n+ *\n+ *  @param viewController The view controller in which a component disappeared",
        "path": "include/HubFramework/HUBViewController.h",
        "position": null,
        "original_position": 6,
        "commit_id": "425390f27b8b5880976b50d1075c66ef18c98680",
        "original_commit_id": "abbd97f564d8409a6d14f9a1740f0a020860d289",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Seems copy/pasted \ud83d\ude04 ",
        "created_at": "2016-11-22T13:19:22Z",
        "updated_at": "2016-11-22T13:55:29Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/177#discussion_r89113010",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/177",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89113010"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/177#discussion_r89113010"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/177"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89113053",
        "pull_request_review_id": 9661327,
        "id": 89113053,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg5MTEzMDUz",
        "diff_hunk": "@@ -128,6 +128,15 @@ NS_ASSUME_NONNULL_BEGIN\n   didDisappearFromView:(UIView *)componentView;\n \n /**\n+ *  Sent to a Hub Framework view controller's delegate when a component view will be reused\n+ *\n+ *  @param viewController The view controller in which a component disappeared\n+ *  @param componentView The view that the component disappeared from",
        "path": "include/HubFramework/HUBViewController.h",
        "position": null,
        "original_position": 7,
        "commit_id": "425390f27b8b5880976b50d1075c66ef18c98680",
        "original_commit_id": "abbd97f564d8409a6d14f9a1740f0a020860d289",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Here too",
        "created_at": "2016-11-22T13:19:35Z",
        "updated_at": "2016-11-22T13:55:29Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/177#discussion_r89113053",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/177",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89113053"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/177#discussion_r89113053"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/177"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89113159",
        "pull_request_review_id": 9661327,
        "id": 89113159,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg5MTEzMTU5",
        "diff_hunk": "@@ -128,6 +128,15 @@ NS_ASSUME_NONNULL_BEGIN\n   didDisappearFromView:(UIView *)componentView;\n \n /**\n+ *  Sent to a Hub Framework view controller's delegate when a component view will be reused\n+ *\n+ *  @param viewController The view controller in which a component disappeared\n+ *  @param componentView The view that the component disappeared from\n+ */\n+- (void)viewController:(HUBViewController *)viewController\n+         willReuseView:(UIView *)componentView;",
        "path": "include/HubFramework/HUBViewController.h",
        "position": null,
        "original_position": 10,
        "commit_id": "425390f27b8b5880976b50d1075c66ef18c98680",
        "original_commit_id": "abbd97f564d8409a6d14f9a1740f0a020860d289",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "How about `willReuseComponentWithView:`, to make it clear that it's a component view, not the main view of the view controller?",
        "created_at": "2016-11-22T13:20:18Z",
        "updated_at": "2016-11-22T13:55:29Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/177#discussion_r89113159",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/177",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89113159"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/177#discussion_r89113159"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/177"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89113941",
        "pull_request_review_id": 9662260,
        "id": 89113941,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg5MTEzOTQx",
        "diff_hunk": "@@ -128,6 +128,15 @@ NS_ASSUME_NONNULL_BEGIN\n   didDisappearFromView:(UIView *)componentView;\n \n /**\n+ *  Sent to a Hub Framework view controller's delegate when a component view will be reused\n+ *\n+ *  @param viewController The view controller in which a component disappeared\n+ *  @param componentView The view that the component disappeared from\n+ */\n+- (void)viewController:(HUBViewController *)viewController\n+         willReuseView:(UIView *)componentView;",
        "path": "include/HubFramework/HUBViewController.h",
        "position": null,
        "original_position": 10,
        "commit_id": "425390f27b8b5880976b50d1075c66ef18c98680",
        "original_commit_id": "abbd97f564d8409a6d14f9a1740f0a020860d289",
        "user": {
            "login": "hallski",
            "id": 541,
            "node_id": "MDQ6VXNlcjU0MQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/541?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hallski",
            "html_url": "https://github.com/hallski",
            "followers_url": "https://api.github.com/users/hallski/followers",
            "following_url": "https://api.github.com/users/hallski/following{/other_user}",
            "gists_url": "https://api.github.com/users/hallski/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hallski/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hallski/subscriptions",
            "organizations_url": "https://api.github.com/users/hallski/orgs",
            "repos_url": "https://api.github.com/users/hallski/repos",
            "events_url": "https://api.github.com/users/hallski/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hallski/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Sounds good, will make the change.",
        "created_at": "2016-11-22T13:25:18Z",
        "updated_at": "2016-11-22T13:55:29Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/177#discussion_r89113941",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/177",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89113941"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/177#discussion_r89113941"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/177"
            }
        },
        "in_reply_to_id": 89113159
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89113957",
        "pull_request_review_id": 9662281,
        "id": 89113957,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg5MTEzOTU3",
        "diff_hunk": "@@ -128,6 +128,15 @@ NS_ASSUME_NONNULL_BEGIN\n   didDisappearFromView:(UIView *)componentView;\n \n /**\n+ *  Sent to a Hub Framework view controller's delegate when a component view will be reused\n+ *\n+ *  @param viewController The view controller in which a component disappeared\n+ *  @param componentView The view that the component disappeared from",
        "path": "include/HubFramework/HUBViewController.h",
        "position": null,
        "original_position": 7,
        "commit_id": "425390f27b8b5880976b50d1075c66ef18c98680",
        "original_commit_id": "abbd97f564d8409a6d14f9a1740f0a020860d289",
        "user": {
            "login": "hallski",
            "id": 541,
            "node_id": "MDQ6VXNlcjU0MQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/541?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hallski",
            "html_url": "https://github.com/hallski",
            "followers_url": "https://api.github.com/users/hallski/followers",
            "following_url": "https://api.github.com/users/hallski/following{/other_user}",
            "gists_url": "https://api.github.com/users/hallski/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hallski/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hallski/subscriptions",
            "organizations_url": "https://api.github.com/users/hallski/orgs",
            "repos_url": "https://api.github.com/users/hallski/repos",
            "events_url": "https://api.github.com/users/hallski/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hallski/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ehum... :blush:",
        "created_at": "2016-11-22T13:25:24Z",
        "updated_at": "2016-11-22T13:55:29Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/177#discussion_r89113957",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/177",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89113957"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/177#discussion_r89113957"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/177"
            }
        },
        "in_reply_to_id": 89113053
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89114372",
        "pull_request_review_id": 9662691,
        "id": 89114372,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg5MTE0Mzcy",
        "diff_hunk": "@@ -128,6 +128,15 @@ NS_ASSUME_NONNULL_BEGIN\n   didDisappearFromView:(UIView *)componentView;\n \n /**\n+ *  Sent to a Hub Framework view controller's delegate when a component view will be reused\n+ *\n+ *  @param viewController The view controller in which a component view will be reused\n+ *  @param componentView The component view that will be reused\n+ */\n+- (void)viewController:(HUBViewController *)viewController\n+willReuseComponentWithView:(UIView *)componentView;",
        "path": "include/HubFramework/HUBViewController.h",
        "position": null,
        "original_position": 10,
        "commit_id": "425390f27b8b5880976b50d1075c66ef18c98680",
        "original_commit_id": "12367c425f4183b0c78677f2be8ab5712a4b94ba",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\ud83c\udfa8 Super optional very nitpicky style comment: Align this with the line above like this:\r\n```objective-c\r\n- (void)viewController:(HUBViewController *)viewController\r\n        willReuseComponentWithView:(UIView *)componentView;\r\n```",
        "created_at": "2016-11-22T13:27:51Z",
        "updated_at": "2016-11-22T13:55:29Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/177#discussion_r89114372",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/177",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89114372"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/177#discussion_r89114372"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/177"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89114586",
        "pull_request_review_id": 9662691,
        "id": 89114586,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg5MTE0NTg2",
        "diff_hunk": "@@ -1470,6 +1472,27 @@ - (void)testSavingAndRestoringBodyComponentUIState\n     XCTAssertEqual(self.component.numberOfReuses, (NSUInteger)2);\n }\n \n+- (void)testViewControllerDelegateIsNotifiedWhenComponentIsReused\n+{\n+    self.contentOperation.contentLoadingBlock = ^(id<HUBViewModelBuilder> viewModelBuilder) {\n+        [viewModelBuilder builderForBodyComponentModelWithIdentifier:@\"one\"].title = @\"One\";\n+        return YES;\n+    };\n+\n+    [self simulateViewControllerLayoutCycle];\n+\n+    id<UICollectionViewDataSource> const collectionViewDataSource = self.collectionView.dataSource;",
        "path": "tests/HUBViewControllerTests.m",
        "position": null,
        "original_position": 29,
        "commit_id": "425390f27b8b5880976b50d1075c66ef18c98680",
        "original_commit_id": "12367c425f4183b0c78677f2be8ab5712a4b94ba",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You don't need this as you're only accessing the data source once. Can just inline `self.collectionView.dataSource` on row `1487`.",
        "created_at": "2016-11-22T13:28:50Z",
        "updated_at": "2016-11-22T13:55:29Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/177#discussion_r89114586",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/177",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89114586"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/177#discussion_r89114586"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/177"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89115483",
        "pull_request_review_id": 9663824,
        "id": 89115483,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg5MTE1NDgz",
        "diff_hunk": "@@ -128,6 +128,15 @@ NS_ASSUME_NONNULL_BEGIN\n   didDisappearFromView:(UIView *)componentView;\n \n /**\n+ *  Sent to a Hub Framework view controller's delegate when a component view will be reused\n+ *\n+ *  @param viewController The view controller in which a component view will be reused\n+ *  @param componentView The component view that will be reused\n+ */\n+- (void)viewController:(HUBViewController *)viewController\n+willReuseComponentWithView:(UIView *)componentView;",
        "path": "include/HubFramework/HUBViewController.h",
        "position": null,
        "original_position": 10,
        "commit_id": "425390f27b8b5880976b50d1075c66ef18c98680",
        "original_commit_id": "12367c425f4183b0c78677f2be8ab5712a4b94ba",
        "user": {
            "login": "hallski",
            "id": 541,
            "node_id": "MDQ6VXNlcjU0MQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/541?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hallski",
            "html_url": "https://github.com/hallski",
            "followers_url": "https://api.github.com/users/hallski/followers",
            "following_url": "https://api.github.com/users/hallski/following{/other_user}",
            "gists_url": "https://api.github.com/users/hallski/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hallski/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hallski/subscriptions",
            "organizations_url": "https://api.github.com/users/hallski/orgs",
            "repos_url": "https://api.github.com/users/hallski/repos",
            "events_url": "https://api.github.com/users/hallski/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hallski/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Alright",
        "created_at": "2016-11-22T13:34:50Z",
        "updated_at": "2016-11-22T13:55:29Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/177#discussion_r89115483",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/177",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89115483"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/177#discussion_r89115483"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/177"
            }
        },
        "in_reply_to_id": 89114372
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89115525",
        "pull_request_review_id": 9663867,
        "id": 89115525,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg5MTE1NTI1",
        "diff_hunk": "@@ -1470,6 +1472,27 @@ - (void)testSavingAndRestoringBodyComponentUIState\n     XCTAssertEqual(self.component.numberOfReuses, (NSUInteger)2);\n }\n \n+- (void)testViewControllerDelegateIsNotifiedWhenComponentIsReused\n+{\n+    self.contentOperation.contentLoadingBlock = ^(id<HUBViewModelBuilder> viewModelBuilder) {\n+        [viewModelBuilder builderForBodyComponentModelWithIdentifier:@\"one\"].title = @\"One\";\n+        return YES;\n+    };\n+\n+    [self simulateViewControllerLayoutCycle];\n+\n+    id<UICollectionViewDataSource> const collectionViewDataSource = self.collectionView.dataSource;",
        "path": "tests/HUBViewControllerTests.m",
        "position": null,
        "original_position": 29,
        "commit_id": "425390f27b8b5880976b50d1075c66ef18c98680",
        "original_commit_id": "12367c425f4183b0c78677f2be8ab5712a4b94ba",
        "user": {
            "login": "hallski",
            "id": 541,
            "node_id": "MDQ6VXNlcjU0MQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/541?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hallski",
            "html_url": "https://github.com/hallski",
            "followers_url": "https://api.github.com/users/hallski/followers",
            "following_url": "https://api.github.com/users/hallski/following{/other_user}",
            "gists_url": "https://api.github.com/users/hallski/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hallski/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hallski/subscriptions",
            "organizations_url": "https://api.github.com/users/hallski/orgs",
            "repos_url": "https://api.github.com/users/hallski/repos",
            "events_url": "https://api.github.com/users/hallski/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hallski/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Will update.",
        "created_at": "2016-11-22T13:35:08Z",
        "updated_at": "2016-11-22T13:55:29Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/177#discussion_r89115525",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/177",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89115525"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/177#discussion_r89115525"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/177"
            }
        },
        "in_reply_to_id": 89114586
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89125767",
        "pull_request_review_id": 9674428,
        "id": 89125767,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg5MTI1NzY3",
        "diff_hunk": "@@ -411,7 +412,7 @@ - (void)scrollToContentOffset:(CGPoint)contentOffset animated:(BOOL)animated\n     const CGFloat x = contentOffset.x;\n     const CGFloat y = contentOffset.y - self.collectionView.contentInset.top;\n     \n-    [self.collectionView setContentOffset:CGPointMake(x, y) animated:animated];\n+    [self setContentOffset:CGPointMake(x, y) inCollectionView:self.collectionView animated:animated];",
        "path": "sources/HUBViewController.m",
        "position": null,
        "original_position": 13,
        "commit_id": "d9b56e5c3794b9780119217f3b4cbdea406044ae",
        "original_commit_id": "af775deabdaa53ab0e0c4376e8513385b94bc663",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Why do you need to send the collection view here? The view controller already knows about it.",
        "created_at": "2016-11-22T14:29:05Z",
        "updated_at": "2016-11-23T07:35:03Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/178#discussion_r89125767",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/178",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89125767"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/178#discussion_r89125767"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/178"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89125852",
        "pull_request_review_id": 9674428,
        "id": 89125852,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg5MTI1ODUy",
        "diff_hunk": "@@ -1174,8 +1175,10 @@ - (void)headerAndOverlayComponentViewsWillAppear\n - (void)componentWrapperWillAppear:(HUBComponentWrapper *)componentWrapper\n {\n     [componentWrapper viewWillAppear];\n-    \n-    if (componentWrapper.isContentOffsetObserver) {\n+\n+    BOOL wasContentOffsetUpdated = !self.lastContentOffset || !CGPointEqualToPoint([self.lastContentOffset CGPointValue], self.collectionView.contentOffset);",
        "path": "sources/HUBViewController.m",
        "position": null,
        "original_position": 33,
        "commit_id": "d9b56e5c3794b9780119217f3b4cbdea406044ae",
        "original_commit_id": "af775deabdaa53ab0e0c4376e8513385b94bc663",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\ud83c\udfa8 Compare explicitly to `nil`",
        "created_at": "2016-11-22T14:29:27Z",
        "updated_at": "2016-11-23T07:35:03Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/178#discussion_r89125852",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/178",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89125852"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/178#discussion_r89125852"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/178"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89126895",
        "pull_request_review_id": 9675563,
        "id": 89126895,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg5MTI2ODk1",
        "diff_hunk": "@@ -1174,8 +1175,10 @@ - (void)headerAndOverlayComponentViewsWillAppear\n - (void)componentWrapperWillAppear:(HUBComponentWrapper *)componentWrapper\n {\n     [componentWrapper viewWillAppear];\n-    \n-    if (componentWrapper.isContentOffsetObserver) {\n+\n+    BOOL wasContentOffsetUpdated = !self.lastContentOffset || !CGPointEqualToPoint([self.lastContentOffset CGPointValue], self.collectionView.contentOffset);",
        "path": "sources/HUBViewController.m",
        "position": null,
        "original_position": 33,
        "commit_id": "d9b56e5c3794b9780119217f3b4cbdea406044ae",
        "original_commit_id": "af775deabdaa53ab0e0c4376e8513385b94bc663",
        "user": {
            "login": "krris",
            "id": 1786612,
            "node_id": "MDQ6VXNlcjE3ODY2MTI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1786612?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krris",
            "html_url": "https://github.com/krris",
            "followers_url": "https://api.github.com/users/krris/followers",
            "following_url": "https://api.github.com/users/krris/following{/other_user}",
            "gists_url": "https://api.github.com/users/krris/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krris/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krris/subscriptions",
            "organizations_url": "https://api.github.com/users/krris/orgs",
            "repos_url": "https://api.github.com/users/krris/repos",
            "events_url": "https://api.github.com/users/krris/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krris/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Sure, will do. Can you tell me why do you prefer to compare explicitly to `nil`?",
        "created_at": "2016-11-22T14:34:13Z",
        "updated_at": "2016-11-23T07:35:03Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/178#discussion_r89126895",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/178",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89126895"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/178#discussion_r89126895"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/178"
            }
        },
        "in_reply_to_id": 89125852
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89127297",
        "pull_request_review_id": 9675972,
        "id": 89127297,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg5MTI3Mjk3",
        "diff_hunk": "@@ -411,7 +412,7 @@ - (void)scrollToContentOffset:(CGPoint)contentOffset animated:(BOOL)animated\n     const CGFloat x = contentOffset.x;\n     const CGFloat y = contentOffset.y - self.collectionView.contentInset.top;\n     \n-    [self.collectionView setContentOffset:CGPointMake(x, y) animated:animated];\n+    [self setContentOffset:CGPointMake(x, y) inCollectionView:self.collectionView animated:animated];",
        "path": "sources/HUBViewController.m",
        "position": null,
        "original_position": 13,
        "commit_id": "d9b56e5c3794b9780119217f3b4cbdea406044ae",
        "original_commit_id": "af775deabdaa53ab0e0c4376e8513385b94bc663",
        "user": {
            "login": "krris",
            "id": 1786612,
            "node_id": "MDQ6VXNlcjE3ODY2MTI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1786612?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krris",
            "html_url": "https://github.com/krris",
            "followers_url": "https://api.github.com/users/krris/followers",
            "following_url": "https://api.github.com/users/krris/following{/other_user}",
            "gists_url": "https://api.github.com/users/krris/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krris/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krris/subscriptions",
            "organizations_url": "https://api.github.com/users/krris/orgs",
            "repos_url": "https://api.github.com/users/krris/repos",
            "events_url": "https://api.github.com/users/krris/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krris/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I was thinking about it. I wanted to make it explicit, but maybe it's better to keep functions short \ud83d\ude04 ",
        "created_at": "2016-11-22T14:36:05Z",
        "updated_at": "2016-11-23T07:35:03Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/178#discussion_r89127297",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/178",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89127297"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/178#discussion_r89127297"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/178"
            }
        },
        "in_reply_to_id": 89125767
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89127584",
        "pull_request_review_id": 9676264,
        "id": 89127584,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg5MTI3NTg0",
        "diff_hunk": "@@ -1174,8 +1175,10 @@ - (void)headerAndOverlayComponentViewsWillAppear\n - (void)componentWrapperWillAppear:(HUBComponentWrapper *)componentWrapper\n {\n     [componentWrapper viewWillAppear];\n-    \n-    if (componentWrapper.isContentOffsetObserver) {\n+\n+    BOOL wasContentOffsetUpdated = !self.lastContentOffset || !CGPointEqualToPoint([self.lastContentOffset CGPointValue], self.collectionView.contentOffset);",
        "path": "sources/HUBViewController.m",
        "position": null,
        "original_position": 33,
        "commit_id": "d9b56e5c3794b9780119217f3b4cbdea406044ae",
        "original_commit_id": "af775deabdaa53ab0e0c4376e8513385b94bc663",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Sure. Basically otherwise you're relying on implicit integer conversion between a pointer and `nil`, which means that you are technically comparing across different types (it only so happens to work because `nil` gets implicitly converted to `0`, both as a pointer and as a literal). This is why Swift prohibits these type of comparisons, as it has a much more static and thorough type system.",
        "created_at": "2016-11-22T14:37:22Z",
        "updated_at": "2016-11-23T07:35:03Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/178#discussion_r89127584",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/178",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89127584"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/178#discussion_r89127584"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/178"
            }
        },
        "in_reply_to_id": 89125852
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/88202709",
        "pull_request_review_id": 8781958,
        "id": 88202709,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4MjAyNzA5",
        "diff_hunk": "@@ -270,6 +270,32 @@ - (void)testDelegateNotifiedOfUpdatedViewModel\n     XCTAssertEqualObjects(self.viewModelFromDelegateMethod.navigationItem.title, viewModelNavBarTitleB);\n }\n \n+- (void)testReloadViewModel\n+{\n+    NSString * const viewModelNavBarTitleA = @\"View model A\";\n+    NSString * const viewModelNavBarTitleB = @\"View model B\";\n+    \n+    self.contentOperation.contentLoadingBlock = ^(id<HUBViewModelBuilder> builder) {\n+        builder.navigationBarTitle = viewModelNavBarTitleA;\n+        return YES;\n+    };\n+    \n+    [self simulateViewControllerLayoutCycle];\n+    \n+    XCTAssertEqualObjects(self.viewModelFromDelegateMethod.navigationItem.title, viewModelNavBarTitleA);\n+    \n+    self.contentOperation.contentLoadingBlock = ^(id<HUBViewModelBuilder> builder) {\n+        builder.navigationBarTitle = viewModelNavBarTitleB;\n+        return YES;\n+    };\n+    \n+    self.contentReloadPolicy.shouldReload = YES;",
        "path": "tests/HUBViewControllerTests.m",
        "position": null,
        "original_position": 23,
        "commit_id": "a33eaadc5aae16a07013b158f565eccc2fca04d6",
        "original_commit_id": "4bbb43ced4608868807ce3cefd423429eb77766d",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You shouldn't need to set this here. I don't think the reload policy shouldn't be taken into account if the API user explicitly reloads the view controller - it should just reload no matter what.\n",
        "created_at": "2016-11-16T09:57:35Z",
        "updated_at": "2016-11-23T10:00:03Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/153#discussion_r88202709",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/153",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/88202709"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/153#discussion_r88202709"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/153"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/88224046",
        "pull_request_review_id": 8802516,
        "id": 88224046,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4MjI0MDQ2",
        "diff_hunk": "@@ -270,6 +270,32 @@ - (void)testDelegateNotifiedOfUpdatedViewModel\n     XCTAssertEqualObjects(self.viewModelFromDelegateMethod.navigationItem.title, viewModelNavBarTitleB);\n }\n \n+- (void)testReloadViewModel\n+{\n+    NSString * const viewModelNavBarTitleA = @\"View model A\";\n+    NSString * const viewModelNavBarTitleB = @\"View model B\";\n+    \n+    self.contentOperation.contentLoadingBlock = ^(id<HUBViewModelBuilder> builder) {\n+        builder.navigationBarTitle = viewModelNavBarTitleA;\n+        return YES;\n+    };\n+    \n+    [self simulateViewControllerLayoutCycle];\n+    \n+    XCTAssertEqualObjects(self.viewModelFromDelegateMethod.navigationItem.title, viewModelNavBarTitleA);\n+    \n+    self.contentOperation.contentLoadingBlock = ^(id<HUBViewModelBuilder> builder) {\n+        builder.navigationBarTitle = viewModelNavBarTitleB;\n+        return YES;\n+    };\n+    \n+    self.contentReloadPolicy.shouldReload = YES;",
        "path": "tests/HUBViewControllerTests.m",
        "position": null,
        "original_position": 23,
        "commit_id": "a33eaadc5aae16a07013b158f565eccc2fca04d6",
        "original_commit_id": "4bbb43ced4608868807ce3cefd423429eb77766d",
        "user": {
            "login": "zhubofei",
            "id": 770482,
            "node_id": "MDQ6VXNlcjc3MDQ4Mg==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/770482?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zhubofei",
            "html_url": "https://github.com/zhubofei",
            "followers_url": "https://api.github.com/users/zhubofei/followers",
            "following_url": "https://api.github.com/users/zhubofei/following{/other_user}",
            "gists_url": "https://api.github.com/users/zhubofei/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zhubofei/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zhubofei/subscriptions",
            "organizations_url": "https://api.github.com/users/zhubofei/orgs",
            "repos_url": "https://api.github.com/users/zhubofei/repos",
            "events_url": "https://api.github.com/users/zhubofei/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zhubofei/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@JohnSundell Weird thing is if I remove this line the test would not pass. \n",
        "created_at": "2016-11-16T12:10:15Z",
        "updated_at": "2016-11-23T10:00:03Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/153#discussion_r88224046",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/153",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/88224046"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/153#discussion_r88224046"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/153"
            }
        },
        "in_reply_to_id": 88202709
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/88228779",
        "pull_request_review_id": 8807218,
        "id": 88228779,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4MjI4Nzc5",
        "diff_hunk": "@@ -270,6 +270,32 @@ - (void)testDelegateNotifiedOfUpdatedViewModel\n     XCTAssertEqualObjects(self.viewModelFromDelegateMethod.navigationItem.title, viewModelNavBarTitleB);\n }\n \n+- (void)testReloadViewModel\n+{\n+    NSString * const viewModelNavBarTitleA = @\"View model A\";\n+    NSString * const viewModelNavBarTitleB = @\"View model B\";\n+    \n+    self.contentOperation.contentLoadingBlock = ^(id<HUBViewModelBuilder> builder) {\n+        builder.navigationBarTitle = viewModelNavBarTitleA;\n+        return YES;\n+    };\n+    \n+    [self simulateViewControllerLayoutCycle];\n+    \n+    XCTAssertEqualObjects(self.viewModelFromDelegateMethod.navigationItem.title, viewModelNavBarTitleA);\n+    \n+    self.contentOperation.contentLoadingBlock = ^(id<HUBViewModelBuilder> builder) {\n+        builder.navigationBarTitle = viewModelNavBarTitleB;\n+        return YES;\n+    };\n+    \n+    self.contentReloadPolicy.shouldReload = YES;",
        "path": "tests/HUBViewControllerTests.m",
        "position": null,
        "original_position": 23,
        "commit_id": "a33eaadc5aae16a07013b158f565eccc2fca04d6",
        "original_commit_id": "4bbb43ced4608868807ce3cefd423429eb77766d",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@zhubofei Yeah, so I think `HUBViewModelLoaderImplementation` needs to be slightly modified as well. We probably need a new method that has an argument for whether the reload policy should be taken into account.\n",
        "created_at": "2016-11-16T12:45:30Z",
        "updated_at": "2016-11-23T10:00:03Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/153#discussion_r88228779",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/153",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/88228779"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/153#discussion_r88228779"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/153"
            }
        },
        "in_reply_to_id": 88202709
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/88257862",
        "pull_request_review_id": 8836148,
        "id": 88257862,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4MjU3ODYy",
        "diff_hunk": "@@ -270,6 +270,32 @@ - (void)testDelegateNotifiedOfUpdatedViewModel\n     XCTAssertEqualObjects(self.viewModelFromDelegateMethod.navigationItem.title, viewModelNavBarTitleB);\n }\n \n+- (void)testReloadViewModel\n+{\n+    NSString * const viewModelNavBarTitleA = @\"View model A\";\n+    NSString * const viewModelNavBarTitleB = @\"View model B\";\n+    \n+    self.contentOperation.contentLoadingBlock = ^(id<HUBViewModelBuilder> builder) {\n+        builder.navigationBarTitle = viewModelNavBarTitleA;\n+        return YES;\n+    };\n+    \n+    [self simulateViewControllerLayoutCycle];\n+    \n+    XCTAssertEqualObjects(self.viewModelFromDelegateMethod.navigationItem.title, viewModelNavBarTitleA);\n+    \n+    self.contentOperation.contentLoadingBlock = ^(id<HUBViewModelBuilder> builder) {\n+        builder.navigationBarTitle = viewModelNavBarTitleB;\n+        return YES;\n+    };\n+    \n+    self.contentReloadPolicy.shouldReload = YES;",
        "path": "tests/HUBViewControllerTests.m",
        "position": null,
        "original_position": 23,
        "commit_id": "a33eaadc5aae16a07013b158f565eccc2fca04d6",
        "original_commit_id": "4bbb43ced4608868807ce3cefd423429eb77766d",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@zhubofei Basically this is what's preventing the reload:\n\n```\nif (self.contentReloadPolicy != nil) {\n        if (self.previouslyLoadedViewModel != nil) {\n            id<HUBViewModel> const previouslyLoadedViewModel = self.previouslyLoadedViewModel;\n\n            if (![self.contentReloadPolicy shouldReloadContentForViewURI:self.viewURI currentViewModel:previouslyLoadedViewModel]) {\n                return;\n            }\n        }\n    }\n```\n\nIn `HUBViewModelLoaderImplementation.loadViewModel`.\n\nWe can fix it by adding a new method: `loadViewModelRegardlessOfReloadPolicy` or something \ud83d\ude04 \n",
        "created_at": "2016-11-16T15:28:12Z",
        "updated_at": "2016-11-23T10:00:03Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/153#discussion_r88257862",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/153",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/88257862"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/153#discussion_r88257862"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/153"
            }
        },
        "in_reply_to_id": 88202709
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89097194",
        "pull_request_review_id": 9646047,
        "id": 89097194,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg5MDk3MTk0",
        "diff_hunk": "@@ -103,6 +103,11 @@ NS_ASSUME_NONNULL_BEGIN\n - (void)loadViewModel;\n \n /**\n+ *  Load a view model using this loader regard less of reload policy\n+ */\n+- (void)loadViewModelRegardlessOfReloadPolicy;",
        "path": "include/HubFramework/HUBViewModelLoader.h",
        "position": null,
        "original_position": 6,
        "commit_id": "a33eaadc5aae16a07013b158f565eccc2fca04d6",
        "original_commit_id": "d54cf7959063644f49a97fcc2576dd465c077dc1",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Could this method be moved to `HUBViewModelLoaderImplementation` instead? That way we don't have to make the public API more complicated, because this should really be seen as an implementation detail.",
        "created_at": "2016-11-22T11:37:53Z",
        "updated_at": "2016-11-23T10:00:03Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/153#discussion_r89097194",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/153",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89097194"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/153#discussion_r89097194"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/153"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89108920",
        "pull_request_review_id": 9657361,
        "id": 89108920,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg5MTA4OTIw",
        "diff_hunk": "@@ -441,6 +441,11 @@ - (void)scrollToComponentOfType:(HUBComponentType)componentType\n                                  completion:completion];\n }\n \n+-(void)reload\n+{\n+    [(HUBViewModelLoaderImplementation*)self.viewModelLoader loadViewModelRegardlessOfReloadPolicy];",
        "path": "sources/HUBViewController.m",
        "position": null,
        "original_position": 6,
        "commit_id": "a33eaadc5aae16a07013b158f565eccc2fca04d6",
        "original_commit_id": "bf8d1ab20e8683e975b9a3491b8d5fd72bed645f",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Instead of casting, can you update the `viewModelLoader` property to be typed as `HUBViewModelLoaderImplementation *`? (It's already that type in the initializer)",
        "created_at": "2016-11-22T12:53:52Z",
        "updated_at": "2016-11-23T10:00:03Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/153#discussion_r89108920",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/153",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89108920"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/153#discussion_r89108920"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/153"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/88810611",
        "pull_request_review_id": 9372413,
        "id": 88810611,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4ODEwNjEx",
        "diff_hunk": "@@ -1258,7 +1258,7 @@ - (void)loadImageFromData:(id<HUBComponentImageData>)imageData\n         contextsForURL = [NSMutableArray arrayWithObject:context];\n         self.componentImageLoadingContexts[imageURL] = contextsForURL;\n         \n-        dispatch_async(dispatch_get_main_queue(), ^{\n+        HUBPerformOnMainQueue(^{",
        "path": "sources/HUBViewController.m",
        "position": null,
        "original_position": 5,
        "commit_id": "b79811a9f46fad4baf8a5eea02af230d09939b5d",
        "original_commit_id": "342e059f907da0ef374b168540e13b74dc0782b0",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Actually, here we want to always run the code async, to make sure that the cell that the image is for is registered with `UICollectionView` before it is loaded. We should add a test for that, that would've failed this change.\n",
        "created_at": "2016-11-20T20:37:04Z",
        "updated_at": "2016-11-23T10:22:20Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/170#discussion_r88810611",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/170",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/88810611"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/170#discussion_r88810611"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/170"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/88810626",
        "pull_request_review_id": 9372413,
        "id": 88810626,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4ODEwNjI2",
        "diff_hunk": "@@ -1490,7 +1490,7 @@ - (void)scrollToRemainingComponentsOfType:(HUBComponentType)componentType\n             /* This solves a case where the UICollectionView hasn't updated its visible cells until the next cycle\n                when changing the content offset without animations. */\n             if (!animated) {\n-                dispatch_async(dispatch_get_main_queue(), stepCompletionHandler);\n+                HUBPerformOnMainQueue(stepCompletionHandler);",
        "path": "sources/HUBViewController.m",
        "position": null,
        "original_position": 14,
        "commit_id": "b79811a9f46fad4baf8a5eea02af230d09939b5d",
        "original_commit_id": "342e059f907da0ef374b168540e13b74dc0782b0",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Same thing here. We want to do it async (the comment here says why)\n",
        "created_at": "2016-11-20T20:37:40Z",
        "updated_at": "2016-11-23T10:22:20Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/170#discussion_r88810626",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/170",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/88810626"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/170#discussion_r88810626"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/170"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89283097",
        "pull_request_review_id": 9828963,
        "id": 89283097,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg5MjgzMDk3",
        "diff_hunk": "@@ -152,6 +152,14 @@ NS_ASSUME_NONNULL_BEGIN\n  */\n - (BOOL)viewControllerShouldIgnoreHeaderComponentContentInset:(HUBViewController *)viewController;\n \n+/**\n+ *  Sent to a Hub Framework view controller's delegate to ask if content inset for top bar\n+ *  (navigation bar and status bar) should be ignored\n+ *\n+ *  @param viewController The view controller which displays a header component\n+ */\n+- (BOOL)viewControllerShouldIgnoreTopBarContentInset:(HUBViewController *)viewController;",
        "path": "include/HubFramework/HUBViewController.h",
        "position": null,
        "original_position": 10,
        "commit_id": "6dcc424db49a2930982b7d450b4ecf3d4e35c21d",
        "original_commit_id": "e48681e37fb3b69cd8d7f75acad0dc712367f214",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Could this be merged into the API that was previously introduced for header components, and be something like `viewControllerShouldAutomaticallyManageTopContentInset:`?",
        "created_at": "2016-11-23T09:56:37Z",
        "updated_at": "2016-11-24T13:34:25Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/179#discussion_r89283097",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/179",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89283097"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/179#discussion_r89283097"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/179"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89355088",
        "pull_request_review_id": 9901232,
        "id": 89355088,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg5MzU1MDg4",
        "diff_hunk": "@@ -91,7 +91,7 @@ @interface HUBViewControllerTests : XCTestCase <HUBViewControllerDelegate>\n @property (nonatomic, assign) BOOL didReceiveViewControllerDidFinishRendering;\n @property (nonatomic, copy) void (^viewControllerDidFinishRenderingBlock)(void);\n @property (nonatomic, copy) BOOL (^viewControllerShouldStartScrollingBlock)(void);\n-@property (nonatomic, copy) BOOL (^viewControllerShouldIgnoreHeaderComponentInset)(void);\n+@property (nonatomic, copy) BOOL (^viewControllerShouldAutomaticallyManageTopContentInset)(void);",
        "path": "tests/HUBViewControllerTests.m",
        "position": 5,
        "original_position": 5,
        "commit_id": "6dcc424db49a2930982b7d450b4ecf3d4e35c21d",
        "original_commit_id": "7043e518898b775dfe7db5edce6282c8d200d071",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Just out of curiosity, how come these are blocks instead of `BOOL` properties?",
        "created_at": "2016-11-23T16:42:19Z",
        "updated_at": "2016-11-24T13:34:25Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/179#discussion_r89355088",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/179",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89355088"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/179#discussion_r89355088"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/179"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89356995",
        "pull_request_review_id": 9903185,
        "id": 89356995,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg5MzU2OTk1",
        "diff_hunk": "@@ -91,7 +91,7 @@ @interface HUBViewControllerTests : XCTestCase <HUBViewControllerDelegate>\n @property (nonatomic, assign) BOOL didReceiveViewControllerDidFinishRendering;\n @property (nonatomic, copy) void (^viewControllerDidFinishRenderingBlock)(void);\n @property (nonatomic, copy) BOOL (^viewControllerShouldStartScrollingBlock)(void);\n-@property (nonatomic, copy) BOOL (^viewControllerShouldIgnoreHeaderComponentInset)(void);\n+@property (nonatomic, copy) BOOL (^viewControllerShouldAutomaticallyManageTopContentInset)(void);",
        "path": "tests/HUBViewControllerTests.m",
        "position": 5,
        "original_position": 5,
        "commit_id": "6dcc424db49a2930982b7d450b4ecf3d4e35c21d",
        "original_commit_id": "7043e518898b775dfe7db5edce6282c8d200d071",
        "user": {
            "login": "Lumenela",
            "id": 1918818,
            "node_id": "MDQ6VXNlcjE5MTg4MTg=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1918818?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Lumenela",
            "html_url": "https://github.com/Lumenela",
            "followers_url": "https://api.github.com/users/Lumenela/followers",
            "following_url": "https://api.github.com/users/Lumenela/following{/other_user}",
            "gists_url": "https://api.github.com/users/Lumenela/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Lumenela/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Lumenela/subscriptions",
            "organizations_url": "https://api.github.com/users/Lumenela/orgs",
            "repos_url": "https://api.github.com/users/Lumenela/repos",
            "events_url": "https://api.github.com/users/Lumenela/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Lumenela/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Frankly speaking, I don't know. It's a pattern used here. @JohnSundell what's the story behind it?",
        "created_at": "2016-11-23T16:52:09Z",
        "updated_at": "2016-11-24T13:34:25Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/179#discussion_r89356995",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/179",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89356995"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/179#discussion_r89356995"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/179"
            }
        },
        "in_reply_to_id": 89355088
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89493031",
        "pull_request_review_id": 10037897,
        "id": 89493031,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg5NDkzMDMx",
        "diff_hunk": "@@ -973,21 +973,26 @@ - (nullable HUBComponentWrapper *)componentWrapperFromCell:(HUBComponentCollecti\n \n - (CGFloat)calculateTopContentInset\n {\n+    id<HUBViewControllerDelegate> delegate = self.delegate;\n+\n+    if (![delegate viewControllerShouldAutomaticallyManageTopContentInset:self]) {",
        "path": "sources/HUBViewController.m",
        "position": null,
        "original_position": 6,
        "commit_id": "6dcc424db49a2930982b7d450b4ecf3d4e35c21d",
        "original_commit_id": "beb1759c837fbbbbb4357218d0527af550f14f4c",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This means that if the delegate is `nil`, the view controller won't manage content inset, which is not the behavior we want (the default should be to automatically manage). So you'll need to `nil`-check the delegate first.",
        "created_at": "2016-11-24T12:56:37Z",
        "updated_at": "2016-11-24T13:34:25Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/179#discussion_r89493031",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/179",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89493031"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/179#discussion_r89493031"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/179"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89493195",
        "pull_request_review_id": 10037897,
        "id": 89493195,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg5NDkzMTk1",
        "diff_hunk": "@@ -91,7 +91,7 @@ @interface HUBViewControllerTests : XCTestCase <HUBViewControllerDelegate>\n @property (nonatomic, assign) BOOL didReceiveViewControllerDidFinishRendering;\n @property (nonatomic, copy) void (^viewControllerDidFinishRenderingBlock)(void);\n @property (nonatomic, copy) BOOL (^viewControllerShouldStartScrollingBlock)(void);\n-@property (nonatomic, copy) BOOL (^viewControllerShouldIgnoreHeaderComponentInset)(void);\n+@property (nonatomic, copy) BOOL (^viewControllerShouldAutomaticallyManageTopContentInset)(void);",
        "path": "tests/HUBViewControllerTests.m",
        "position": 5,
        "original_position": 5,
        "commit_id": "6dcc424db49a2930982b7d450b4ecf3d4e35c21d",
        "original_commit_id": "7043e518898b775dfe7db5edce6282c8d200d071",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think we started doing it because we needed flexibility of controlling the implementation in some places, and then as multiple devs have added new tests they've stuck to that convention. I'm fine with changing these to simple `BOOL`s, but it should be done in a separate PR that doesn't contain any logic changes, for satefy \ud83d\ude04 ",
        "created_at": "2016-11-24T12:57:54Z",
        "updated_at": "2016-11-24T13:34:25Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/179#discussion_r89493195",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/179",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89493195"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/179#discussion_r89493195"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/179"
            }
        },
        "in_reply_to_id": 89355088
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89471027",
        "pull_request_review_id": 10015780,
        "id": 89471027,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg5NDcxMDI3",
        "diff_hunk": "@@ -1407,31 +1407,25 @@ - (void)scrollToRootBodyComponentAtIndex:(NSUInteger)componentIndex\n {\n     NSParameterAssert(componentIndex <= (NSUInteger)[self.collectionView numberOfItemsInSection:0]);\n \n-    NSIndexPath * const rootIndexPath = [NSIndexPath indexPathForItem:(NSInteger)componentIndex inSection:0];\n     CGPoint const contentOffset = [self.scrollHandler contentOffsetForDisplayingComponentAtIndex:componentIndex\n                                                                                   scrollPosition:scrollPosition\n                                                                                     contentInset:self.collectionView.contentInset\n                                                                                      contentSize:self.collectionView.contentSize\n                                                                                   viewController:self];\n-\n-    void (^completionWrapper)() = ^{\n-        completion();\n-    };\n     \n-    // If the component is already visible, the completion handler can be called instantly.\n-    if ([self.collectionView.indexPathsForVisibleItems containsObject:rootIndexPath]) {\n-        [self setContentOffset:contentOffset animated:animated];\n-        completionWrapper();\n+    // If the target offset is the same, the completion handler can be called instantly.\n+    if (CGPointEqualToPoint(contentOffset, self.collectionView.contentOffset)) {\n+        completion();\n     // If the scrolling is animated, the animation has to end before the new component can be retrieved.\n     } else if (animated) {\n-        self.pendingScrollAnimationCallback = completionWrapper;\n-        [self setContentOffset:contentOffset animated:animated];\n+        self.pendingScrollAnimationCallback = completion;\n+        [self.collectionView setContentOffset:contentOffset animated:animated];",
        "path": "sources/HUBViewController.m",
        "position": null,
        "original_position": 27,
        "commit_id": "6dd410ee4a806609a96aca753dfbaa4df323f345",
        "original_commit_id": "62d92c667458ceaa0401d562d660e700e717715a",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Think this might break the bug fix that @krris was working on yesterday, that caches content offset. Hopefully the tests will catch it \ud83d\ude01 ",
        "created_at": "2016-11-24T10:31:01Z",
        "updated_at": "2016-11-24T14:46:15Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/183#discussion_r89471027",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/183",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89471027"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/183#discussion_r89471027"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/183"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89476488",
        "pull_request_review_id": 10021173,
        "id": 89476488,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg5NDc2NDg4",
        "diff_hunk": "@@ -1407,31 +1407,25 @@ - (void)scrollToRootBodyComponentAtIndex:(NSUInteger)componentIndex\n {\n     NSParameterAssert(componentIndex <= (NSUInteger)[self.collectionView numberOfItemsInSection:0]);\n \n-    NSIndexPath * const rootIndexPath = [NSIndexPath indexPathForItem:(NSInteger)componentIndex inSection:0];\n     CGPoint const contentOffset = [self.scrollHandler contentOffsetForDisplayingComponentAtIndex:componentIndex\n                                                                                   scrollPosition:scrollPosition\n                                                                                     contentInset:self.collectionView.contentInset\n                                                                                      contentSize:self.collectionView.contentSize\n                                                                                   viewController:self];\n-\n-    void (^completionWrapper)() = ^{\n-        completion();\n-    };\n     \n-    // If the component is already visible, the completion handler can be called instantly.\n-    if ([self.collectionView.indexPathsForVisibleItems containsObject:rootIndexPath]) {\n-        [self setContentOffset:contentOffset animated:animated];\n-        completionWrapper();\n+    // If the target offset is the same, the completion handler can be called instantly.\n+    if (CGPointEqualToPoint(contentOffset, self.collectionView.contentOffset)) {\n+        completion();\n     // If the scrolling is animated, the animation has to end before the new component can be retrieved.\n     } else if (animated) {\n-        self.pendingScrollAnimationCallback = completionWrapper;\n-        [self setContentOffset:contentOffset animated:animated];\n+        self.pendingScrollAnimationCallback = completion;\n+        [self.collectionView setContentOffset:contentOffset animated:animated];",
        "path": "sources/HUBViewController.m",
        "position": null,
        "original_position": 27,
        "commit_id": "6dd410ee4a806609a96aca753dfbaa4df323f345",
        "original_commit_id": "62d92c667458ceaa0401d562d660e700e717715a",
        "user": {
            "login": "krris",
            "id": 1786612,
            "node_id": "MDQ6VXNlcjE3ODY2MTI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1786612?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krris",
            "html_url": "https://github.com/krris",
            "followers_url": "https://api.github.com/users/krris/followers",
            "following_url": "https://api.github.com/users/krris/following{/other_user}",
            "gists_url": "https://api.github.com/users/krris/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krris/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krris/subscriptions",
            "organizations_url": "https://api.github.com/users/krris/orgs",
            "repos_url": "https://api.github.com/users/krris/repos",
            "events_url": "https://api.github.com/users/krris/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krris/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Josu is right. It might break this bug fix: https://github.com/spotify/HubFramework/pull/178\r\nPlease use `[self setContentOffset:contentOffset animated:animated];` instead.",
        "created_at": "2016-11-24T11:00:23Z",
        "updated_at": "2016-11-24T14:46:15Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/183#discussion_r89476488",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/183",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89476488"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/183#discussion_r89476488"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/183"
            }
        },
        "in_reply_to_id": 89471027
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89489925",
        "pull_request_review_id": 10034869,
        "id": 89489925,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg5NDg5OTI1",
        "diff_hunk": "@@ -1407,31 +1407,25 @@ - (void)scrollToRootBodyComponentAtIndex:(NSUInteger)componentIndex\n {\n     NSParameterAssert(componentIndex <= (NSUInteger)[self.collectionView numberOfItemsInSection:0]);\n \n-    NSIndexPath * const rootIndexPath = [NSIndexPath indexPathForItem:(NSInteger)componentIndex inSection:0];\n     CGPoint const contentOffset = [self.scrollHandler contentOffsetForDisplayingComponentAtIndex:componentIndex\n                                                                                   scrollPosition:scrollPosition\n                                                                                     contentInset:self.collectionView.contentInset\n                                                                                      contentSize:self.collectionView.contentSize\n                                                                                   viewController:self];\n-\n-    void (^completionWrapper)() = ^{\n-        completion();\n-    };\n     \n-    // If the component is already visible, the completion handler can be called instantly.\n-    if ([self.collectionView.indexPathsForVisibleItems containsObject:rootIndexPath]) {\n-        [self setContentOffset:contentOffset animated:animated];\n-        completionWrapper();\n+    // If the target offset is the same, the completion handler can be called instantly.\n+    if (CGPointEqualToPoint(contentOffset, self.collectionView.contentOffset)) {\n+        completion();\n     // If the scrolling is animated, the animation has to end before the new component can be retrieved.\n     } else if (animated) {\n-        self.pendingScrollAnimationCallback = completionWrapper;\n-        [self setContentOffset:contentOffset animated:animated];\n+        self.pendingScrollAnimationCallback = completion;\n+        [self.collectionView setContentOffset:contentOffset animated:animated];",
        "path": "sources/HUBViewController.m",
        "position": null,
        "original_position": 27,
        "commit_id": "6dd410ee4a806609a96aca753dfbaa4df323f345",
        "original_commit_id": "62d92c667458ceaa0401d562d660e700e717715a",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "If the tests do not fail because of this, we should improve the tests. What do you think @krris? \ud83d\ude04 ",
        "created_at": "2016-11-24T12:35:22Z",
        "updated_at": "2016-11-24T14:46:15Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/183#discussion_r89489925",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/183",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89489925"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/183#discussion_r89489925"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/183"
            }
        },
        "in_reply_to_id": 89471027
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89490908",
        "pull_request_review_id": 10035823,
        "id": 89490908,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg5NDkwOTA4",
        "diff_hunk": "@@ -1407,31 +1407,25 @@ - (void)scrollToRootBodyComponentAtIndex:(NSUInteger)componentIndex\n {\n     NSParameterAssert(componentIndex <= (NSUInteger)[self.collectionView numberOfItemsInSection:0]);\n \n-    NSIndexPath * const rootIndexPath = [NSIndexPath indexPathForItem:(NSInteger)componentIndex inSection:0];\n     CGPoint const contentOffset = [self.scrollHandler contentOffsetForDisplayingComponentAtIndex:componentIndex\n                                                                                   scrollPosition:scrollPosition\n                                                                                     contentInset:self.collectionView.contentInset\n                                                                                      contentSize:self.collectionView.contentSize\n                                                                                   viewController:self];\n-\n-    void (^completionWrapper)() = ^{\n-        completion();\n-    };\n     \n-    // If the component is already visible, the completion handler can be called instantly.\n-    if ([self.collectionView.indexPathsForVisibleItems containsObject:rootIndexPath]) {\n-        [self setContentOffset:contentOffset animated:animated];\n-        completionWrapper();\n+    // If the target offset is the same, the completion handler can be called instantly.\n+    if (CGPointEqualToPoint(contentOffset, self.collectionView.contentOffset)) {\n+        completion();\n     // If the scrolling is animated, the animation has to end before the new component can be retrieved.\n     } else if (animated) {\n-        self.pendingScrollAnimationCallback = completionWrapper;\n-        [self setContentOffset:contentOffset animated:animated];\n+        self.pendingScrollAnimationCallback = completion;\n+        [self.collectionView setContentOffset:contentOffset animated:animated];",
        "path": "sources/HUBViewController.m",
        "position": null,
        "original_position": 27,
        "commit_id": "6dd410ee4a806609a96aca753dfbaa4df323f345",
        "original_commit_id": "62d92c667458ceaa0401d562d660e700e717715a",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@JohnSundell, @krris good catch, will fix \ud83d\udc4d ",
        "created_at": "2016-11-24T12:41:54Z",
        "updated_at": "2016-11-24T14:46:15Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/183#discussion_r89490908",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/183",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89490908"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/183#discussion_r89490908"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/183"
            }
        },
        "in_reply_to_id": 89471027
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89491820",
        "pull_request_review_id": 10036717,
        "id": 89491820,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg5NDkxODIw",
        "diff_hunk": "@@ -1407,31 +1407,25 @@ - (void)scrollToRootBodyComponentAtIndex:(NSUInteger)componentIndex\n {\n     NSParameterAssert(componentIndex <= (NSUInteger)[self.collectionView numberOfItemsInSection:0]);\n \n-    NSIndexPath * const rootIndexPath = [NSIndexPath indexPathForItem:(NSInteger)componentIndex inSection:0];\n     CGPoint const contentOffset = [self.scrollHandler contentOffsetForDisplayingComponentAtIndex:componentIndex\n                                                                                   scrollPosition:scrollPosition\n                                                                                     contentInset:self.collectionView.contentInset\n                                                                                      contentSize:self.collectionView.contentSize\n                                                                                   viewController:self];\n-\n-    void (^completionWrapper)() = ^{\n-        completion();\n-    };\n     \n-    // If the component is already visible, the completion handler can be called instantly.\n-    if ([self.collectionView.indexPathsForVisibleItems containsObject:rootIndexPath]) {\n-        [self setContentOffset:contentOffset animated:animated];\n-        completionWrapper();\n+    // If the target offset is the same, the completion handler can be called instantly.\n+    if (CGPointEqualToPoint(contentOffset, self.collectionView.contentOffset)) {\n+        completion();\n     // If the scrolling is animated, the animation has to end before the new component can be retrieved.\n     } else if (animated) {\n-        self.pendingScrollAnimationCallback = completionWrapper;\n-        [self setContentOffset:contentOffset animated:animated];\n+        self.pendingScrollAnimationCallback = completion;\n+        [self.collectionView setContentOffset:contentOffset animated:animated];",
        "path": "sources/HUBViewController.m",
        "position": null,
        "original_position": 27,
        "commit_id": "6dd410ee4a806609a96aca753dfbaa4df323f345",
        "original_commit_id": "62d92c667458ceaa0401d562d660e700e717715a",
        "user": {
            "login": "krris",
            "id": 1786612,
            "node_id": "MDQ6VXNlcjE3ODY2MTI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1786612?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krris",
            "html_url": "https://github.com/krris",
            "followers_url": "https://api.github.com/users/krris/followers",
            "following_url": "https://api.github.com/users/krris/following{/other_user}",
            "gists_url": "https://api.github.com/users/krris/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krris/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krris/subscriptions",
            "organizations_url": "https://api.github.com/users/krris/orgs",
            "repos_url": "https://api.github.com/users/krris/repos",
            "events_url": "https://api.github.com/users/krris/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krris/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@JohnSundell We should definitely improve tests. It's so sad it didn't catch that \ud83d\ude22 ",
        "created_at": "2016-11-24T12:47:45Z",
        "updated_at": "2016-11-24T14:46:15Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/183#discussion_r89491820",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/183",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89491820"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/183#discussion_r89491820"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/183"
            }
        },
        "in_reply_to_id": 89471027
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89599058",
        "pull_request_review_id": 10143391,
        "id": 89599058,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg5NTk5MDU4",
        "diff_hunk": "@@ -0,0 +1,85 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+import XCTest\n+\n+class ReloadUITests: UITestCase {\n+    func testReloadingContent() {\n+        let app = XCUIApplication()\n+        app.collectionViews.staticTexts[\"Todo list\"].tap()\n+        \n+        // Search bar should not appear until we add our first item\n+        let searchBar = XCUIApplication().searchFields.element(boundBy: 0)\n+        XCTAssertFalse(searchBar.exists)\n+        \n+        // Add an item, which should make both the item and the search bar appear\n+        addItem(named: \"First item\")\n+        \n+        let firstItem = app.collectionViews.staticTexts[\"First item\"]\n+        XCTAssertTrue(firstItem.exists)\n+        XCTAssertTrue(searchBar.exists)\n+        \n+        // Add a couple of more items\n+        addItem(named: \"Second item\")\n+        addItem(named: \"Third item\")\n+        \n+        let secondItem = app.collectionViews.staticTexts[\"Second item\"]\n+        let thirdItem = app.collectionViews.staticTexts[\"Third item\"]\n+        XCTAssertTrue(secondItem.exists)\n+        XCTAssertTrue(thirdItem.exists)\n+        \n+        // Filter away all but the second item\n+        searchBar.tap()\n+        searchBar.typeText(\"Second\")\n+        XCTAssertTrue(secondItem.exists)\n+        XCTAssertFalse(firstItem.exists)\n+        XCTAssertFalse(thirdItem.exists)\n+        \n+        // Clear filter = all items should appear\n+        searchBar.buttons.element(boundBy: 0).tap()\n+        XCTAssertTrue(firstItem.exists)\n+        XCTAssertTrue(secondItem.exists)\n+        XCTAssertTrue(thirdItem.exists)\n+        \n+        // Now apply filter for the first item, but type one character at the time to trigger rapid reloads\n+        searchBar.tap()\n+        searchBar.typeText(\"F\")\n+        searchBar.typeText(\"i\")\n+        searchBar.typeText(\"r\")\n+        searchBar.typeText(\"s\")\n+        searchBar.typeText(\"t\")\n+        XCTAssertTrue(firstItem.exists)\n+        XCTAssertFalse(secondItem.exists)\n+        XCTAssertFalse(thirdItem.exists)\n+    }\n+    \n+    private func addItem(named itemName: String) {\n+        let app = XCUIApplication()\n+        app.navigationBars[\"Todo List\"].buttons[\"Add\"].tap()",
        "path": "demo/tests/ReloadUITests.swift",
        "position": null,
        "original_position": 76,
        "commit_id": "505b574bd67eba677b5362b4e701350b0d7bb41f",
        "original_commit_id": "77aee9dcf9237edce7094c9b95e6400886c438af",
        "user": {
            "login": "cerihughes",
            "id": 12008876,
            "node_id": "MDQ6VXNlcjEyMDA4ODc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12008876?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cerihughes",
            "html_url": "https://github.com/cerihughes",
            "followers_url": "https://api.github.com/users/cerihughes/followers",
            "following_url": "https://api.github.com/users/cerihughes/following{/other_user}",
            "gists_url": "https://api.github.com/users/cerihughes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cerihughes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cerihughes/subscriptions",
            "organizations_url": "https://api.github.com/users/cerihughes/orgs",
            "repos_url": "https://api.github.com/users/cerihughes/repos",
            "events_url": "https://api.github.com/users/cerihughes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cerihughes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Should probably assert that the button exists before we tap it.",
        "created_at": "2016-11-25T10:51:20Z",
        "updated_at": "2016-11-25T11:16:14Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/189#discussion_r89599058",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/189",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89599058"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/189#discussion_r89599058"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/189"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89599122",
        "pull_request_review_id": 10143391,
        "id": 89599122,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg5NTk5MTIy",
        "diff_hunk": "@@ -0,0 +1,85 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+import XCTest\n+\n+class ReloadUITests: UITestCase {\n+    func testReloadingContent() {\n+        let app = XCUIApplication()\n+        app.collectionViews.staticTexts[\"Todo list\"].tap()\n+        \n+        // Search bar should not appear until we add our first item\n+        let searchBar = XCUIApplication().searchFields.element(boundBy: 0)\n+        XCTAssertFalse(searchBar.exists)\n+        \n+        // Add an item, which should make both the item and the search bar appear\n+        addItem(named: \"First item\")\n+        \n+        let firstItem = app.collectionViews.staticTexts[\"First item\"]\n+        XCTAssertTrue(firstItem.exists)\n+        XCTAssertTrue(searchBar.exists)\n+        \n+        // Add a couple of more items\n+        addItem(named: \"Second item\")\n+        addItem(named: \"Third item\")\n+        \n+        let secondItem = app.collectionViews.staticTexts[\"Second item\"]\n+        let thirdItem = app.collectionViews.staticTexts[\"Third item\"]\n+        XCTAssertTrue(secondItem.exists)\n+        XCTAssertTrue(thirdItem.exists)\n+        \n+        // Filter away all but the second item\n+        searchBar.tap()\n+        searchBar.typeText(\"Second\")\n+        XCTAssertTrue(secondItem.exists)\n+        XCTAssertFalse(firstItem.exists)\n+        XCTAssertFalse(thirdItem.exists)\n+        \n+        // Clear filter = all items should appear\n+        searchBar.buttons.element(boundBy: 0).tap()\n+        XCTAssertTrue(firstItem.exists)\n+        XCTAssertTrue(secondItem.exists)\n+        XCTAssertTrue(thirdItem.exists)\n+        \n+        // Now apply filter for the first item, but type one character at the time to trigger rapid reloads\n+        searchBar.tap()\n+        searchBar.typeText(\"F\")\n+        searchBar.typeText(\"i\")\n+        searchBar.typeText(\"r\")\n+        searchBar.typeText(\"s\")\n+        searchBar.typeText(\"t\")\n+        XCTAssertTrue(firstItem.exists)\n+        XCTAssertFalse(secondItem.exists)\n+        XCTAssertFalse(thirdItem.exists)\n+    }\n+    \n+    private func addItem(named itemName: String) {\n+        let app = XCUIApplication()\n+        app.navigationBars[\"Todo List\"].buttons[\"Add\"].tap()\n+        \n+        let alert = app.alerts[\"Add an item\"]\n+        let textField = alert.textFields.element(boundBy: 0)\n+        textField.tap()",
        "path": "demo/tests/ReloadUITests.swift",
        "position": null,
        "original_position": 80,
        "commit_id": "505b574bd67eba677b5362b4e701350b0d7bb41f",
        "original_commit_id": "77aee9dcf9237edce7094c9b95e6400886c438af",
        "user": {
            "login": "cerihughes",
            "id": 12008876,
            "node_id": "MDQ6VXNlcjEyMDA4ODc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12008876?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cerihughes",
            "html_url": "https://github.com/cerihughes",
            "followers_url": "https://api.github.com/users/cerihughes/followers",
            "following_url": "https://api.github.com/users/cerihughes/following{/other_user}",
            "gists_url": "https://api.github.com/users/cerihughes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cerihughes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cerihughes/subscriptions",
            "organizations_url": "https://api.github.com/users/cerihughes/orgs",
            "repos_url": "https://api.github.com/users/cerihughes/repos",
            "events_url": "https://api.github.com/users/cerihughes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cerihughes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Assert this exists first",
        "created_at": "2016-11-25T10:51:49Z",
        "updated_at": "2016-11-25T11:16:14Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/189#discussion_r89599122",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/189",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89599122"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/189#discussion_r89599122"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/189"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89982202",
        "pull_request_review_id": 10507118,
        "id": 89982202,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg5OTgyMjAy",
        "diff_hunk": "@@ -50,7 +50,7 @@ - (instancetype)initWithIdentifier:(nullable NSString *)identifier\n         _URL = [URL copy];\n         _placeholderIcon = placeholderIcon;\n         _localImage = localImage;\n-        _customData = customData;\n+        _customData = [customData copy];",
        "path": "sources/HUBComponentImageDataImplementation.m",
        "position": 5,
        "original_position": 5,
        "commit_id": "7c3d5edbf26b7418f983a9ad62739780ee09ae31",
        "original_commit_id": "36567834f61924ff83b17d4779d86fa203355a2c",
        "user": {
            "login": "cerihughes",
            "id": 12008876,
            "node_id": "MDQ6VXNlcjEyMDA4ODc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12008876?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cerihughes",
            "html_url": "https://github.com/cerihughes",
            "followers_url": "https://api.github.com/users/cerihughes/followers",
            "following_url": "https://api.github.com/users/cerihughes/following{/other_user}",
            "gists_url": "https://api.github.com/users/cerihughes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cerihughes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cerihughes/subscriptions",
            "organizations_url": "https://api.github.com/users/cerihughes/orgs",
            "repos_url": "https://api.github.com/users/cerihughes/repos",
            "events_url": "https://api.github.com/users/cerihughes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cerihughes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "If you're `copy`ing here, should the property be marked with `copy` in the header?",
        "created_at": "2016-11-29T10:34:33Z",
        "updated_at": "2016-11-29T13:16:16Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/191#discussion_r89982202",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/191",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89982202"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/191#discussion_r89982202"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/191"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89982536",
        "pull_request_review_id": 10507434,
        "id": 89982536,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg5OTgyNTM2",
        "diff_hunk": "@@ -50,7 +50,7 @@ - (instancetype)initWithIdentifier:(nullable NSString *)identifier\n         _URL = [URL copy];\n         _placeholderIcon = placeholderIcon;\n         _localImage = localImage;\n-        _customData = customData;\n+        _customData = [customData copy];",
        "path": "sources/HUBComponentImageDataImplementation.m",
        "position": 5,
        "original_position": 5,
        "commit_id": "7c3d5edbf26b7418f983a9ad62739780ee09ae31",
        "original_commit_id": "36567834f61924ff83b17d4779d86fa203355a2c",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@cerihughes Good call, it totally should!",
        "created_at": "2016-11-29T10:36:21Z",
        "updated_at": "2016-11-29T13:16:16Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/191#discussion_r89982536",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/191",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/89982536"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/191#discussion_r89982536"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/191"
            }
        },
        "in_reply_to_id": 89982202
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90056892",
        "pull_request_review_id": 10582125,
        "id": 90056892,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwMDU2ODky",
        "diff_hunk": "@@ -82,6 +82,13 @@ - (void)addDataFromJSONDictionary:(NSDictionary<NSString *, NSObject *> *)dictio\n         self.placeholderIconIdentifier = placeholderIconIdentifier;\n     }\n     \n+    NSString * const localImageName = [imageDataSchema.localImageNamePath stringFromJSONDictionary:dictionary];\n+    \n+    if (localImageName != nil) {\n+        NSBundle * const bundle = [NSBundle bundleForClass:[self class]];\n+        self.localImage = [UIImage imageNamed:localImageName inBundle:bundle compatibleWithTraitCollection:nil];",
        "path": "sources/HUBComponentImageDataBuilderImplementation.m",
        "position": 8,
        "original_position": 8,
        "commit_id": "c92e760e943e92e75cdb2e78eeadb93ac5b4b133",
        "original_commit_id": "c92e760e943e92e75cdb2e78eeadb93ac5b4b133",
        "user": {
            "login": "8W9aG",
            "id": 2834638,
            "node_id": "MDQ6VXNlcjI4MzQ2Mzg=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/2834638?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/8W9aG",
            "html_url": "https://github.com/8W9aG",
            "followers_url": "https://api.github.com/users/8W9aG/followers",
            "following_url": "https://api.github.com/users/8W9aG/following{/other_user}",
            "gists_url": "https://api.github.com/users/8W9aG/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/8W9aG/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/8W9aG/subscriptions",
            "organizations_url": "https://api.github.com/users/8W9aG/orgs",
            "repos_url": "https://api.github.com/users/8W9aG/repos",
            "events_url": "https://api.github.com/users/8W9aG/events{/privacy}",
            "received_events_url": "https://api.github.com/users/8W9aG/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "UIImage imageNamed means we cannot lint for images in use on the client",
        "created_at": "2016-11-29T17:11:33Z",
        "updated_at": "2016-11-29T17:11:33Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/196#discussion_r90056892",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/196",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90056892"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/196#discussion_r90056892"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/196"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90057078",
        "pull_request_review_id": 10582336,
        "id": 90057078,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwMDU3MDc4",
        "diff_hunk": "@@ -82,6 +82,13 @@ - (void)addDataFromJSONDictionary:(NSDictionary<NSString *, NSObject *> *)dictio\n         self.placeholderIconIdentifier = placeholderIconIdentifier;\n     }\n     \n+    NSString * const localImageName = [imageDataSchema.localImageNamePath stringFromJSONDictionary:dictionary];\n+    \n+    if (localImageName != nil) {\n+        NSBundle * const bundle = [NSBundle bundleForClass:[self class]];\n+        self.localImage = [UIImage imageNamed:localImageName inBundle:bundle compatibleWithTraitCollection:nil];",
        "path": "sources/HUBComponentImageDataBuilderImplementation.m",
        "position": 8,
        "original_position": 8,
        "commit_id": "c92e760e943e92e75cdb2e78eeadb93ac5b4b133",
        "original_commit_id": "c92e760e943e92e75cdb2e78eeadb93ac5b4b133",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You won't be able to lint for this anyway, since it's coming from JSON \ud83d\ude42 ",
        "created_at": "2016-11-29T17:12:27Z",
        "updated_at": "2016-11-29T17:12:27Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/196#discussion_r90057078",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/196",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90057078"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/196#discussion_r90057078"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/196"
            }
        },
        "in_reply_to_id": 90056892
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90080542",
        "pull_request_review_id": 10605482,
        "id": 90080542,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwMDgwNTQy",
        "diff_hunk": "@@ -112,6 +114,18 @@ typedef NS_ENUM(NSUInteger, HUBComponentLayoutContentEdge) {\n - (CGFloat)horizontalOffsetForComponentsWithLayoutTraits:(NSArray<NSSet<HUBComponentLayoutTrait> *> *)componentsTraits\n                    firstComponentLeadingHorizontalOffset:(CGFloat)firstComponentLeadingOffsetX\n                    lastComponentTrailingHorizontalOffset:(CGFloat)lastComponentTrailingOffsetX;\n+\n+/**\n+ *  Return top margin for overlay component with the specified model\n+ *\n+ *  @param componentModel The component model for the overlay component\n+ *\n+ *  @discussion If you want the overlay component to be centered top margin should be 0.\n+ *  In case you want it to be shifted down, e.g. to reveal header component, return corresponding top margin\n+ *  from this delegate method.\n+ */\n+- (CGFloat)topMarginForOverlayComponentWithModel:(id<HUBComponentModel>)componentModel;",
        "path": "include/HubFramework/HUBComponentLayoutManager.h",
        "position": 23,
        "original_position": 23,
        "commit_id": "600bf63b45b63a0b83c3e47bbbf1806a9e709ae8",
        "original_commit_id": "600bf63b45b63a0b83c3e47bbbf1806a9e709ae8",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "We shouldn't expose the component model itself to the layout manager. That will quickly lead to very hard-coded messy rules around layout. Instead, we should use layout traits to make all layout decisions. This scales very well across a large code base, and enables more succinct rules to be defined. See the [Layout programming guide](https://spotify.github.io/HubFramework/layout-programming-guide.html) for more context. Feel free to introduce a new layout trait if you need to to accomplish your task \ud83d\ude42 ",
        "created_at": "2016-11-29T18:55:41Z",
        "updated_at": "2016-11-29T18:55:50Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/195#discussion_r90080542",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/195",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90080542"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/195#discussion_r90080542"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/195"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90080746",
        "pull_request_review_id": 10605675,
        "id": 90080746,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwMDgwNzQ2",
        "diff_hunk": "@@ -39,4 +39,6 @@\n /// Map of horizontal component offsets to use for an array of sets of layout traits\n @property (nonatomic, strong, readonly) NSMutableDictionary<NSArray<NSSet<HUBComponentLayoutTrait> *> *, NSNumber *> *horizontalComponentOffsetsForArrayOfLayoutTraits;\n \n+@property (nonatomic, assign) CGFloat topMarginForOverlayComponent;",
        "path": "tests/mocks/HUBComponentLayoutManagerMock.h",
        "position": 4,
        "original_position": 4,
        "commit_id": "600bf63b45b63a0b83c3e47bbbf1806a9e709ae8",
        "original_commit_id": "600bf63b45b63a0b83c3e47bbbf1806a9e709ae8",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Document",
        "created_at": "2016-11-29T18:56:24Z",
        "updated_at": "2016-11-29T18:56:24Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/195#discussion_r90080746",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/195",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90080746"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/195#discussion_r90080746"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/195"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90122940",
        "pull_request_review_id": 10647374,
        "id": 90122940,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwMTIyOTQw",
        "diff_hunk": "@@ -62,6 +62,15 @@ HF_IGNORED_WARNINGS_0820 = $(HF_IGNORED_WARNINGS_0810)\n \n WARNING_CFLAGS = -Weverything -Wno-error=deprecated -Wno-objc-missing-property-synthesis -Wno-gnu-conditional-omitted-operand -Wno-gnu -Wno-reserved-id-macro -Wno-auto-import -Wno-missing-variable-declarations -Wno-vla -Werror $(HF_IGNORED_WARNINGS_$(XCODE_VERSION_MINOR))\n \n+// Apple LLVM 8.0 - Warnings - All languages",
        "path": "spotify_os.xcconfig",
        "position": 4,
        "original_position": 4,
        "commit_id": "29ac481f9aa10827f0066eaa0f33172300b4bf65",
        "original_commit_id": "29ac481f9aa10827f0066eaa0f33172300b4bf65",
        "user": {
            "login": "8W9aG",
            "id": 2834638,
            "node_id": "MDQ6VXNlcjI4MzQ2Mzg=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/2834638?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/8W9aG",
            "html_url": "https://github.com/8W9aG",
            "followers_url": "https://api.github.com/users/8W9aG/followers",
            "following_url": "https://api.github.com/users/8W9aG/following{/other_user}",
            "gists_url": "https://api.github.com/users/8W9aG/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/8W9aG/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/8W9aG/subscriptions",
            "organizations_url": "https://api.github.com/users/8W9aG/orgs",
            "repos_url": "https://api.github.com/users/8W9aG/repos",
            "events_url": "https://api.github.com/users/8W9aG/events{/privacy}",
            "received_events_url": "https://api.github.com/users/8W9aG/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Shouldn't these be done in the ci module?",
        "created_at": "2016-11-29T21:53:40Z",
        "updated_at": "2016-11-29T21:53:40Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/197#discussion_r90122940",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/197",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90122940"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/197#discussion_r90122940"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/197"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90123624",
        "pull_request_review_id": 10648061,
        "id": 90123624,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwMTIzNjI0",
        "diff_hunk": "@@ -62,6 +62,15 @@ HF_IGNORED_WARNINGS_0820 = $(HF_IGNORED_WARNINGS_0810)\n \n WARNING_CFLAGS = -Weverything -Wno-error=deprecated -Wno-objc-missing-property-synthesis -Wno-gnu-conditional-omitted-operand -Wno-gnu -Wno-reserved-id-macro -Wno-auto-import -Wno-missing-variable-declarations -Wno-vla -Werror $(HF_IGNORED_WARNINGS_$(XCODE_VERSION_MINOR))\n \n+// Apple LLVM 8.0 - Warnings - All languages",
        "path": "spotify_os.xcconfig",
        "position": 4,
        "original_position": 4,
        "commit_id": "29ac481f9aa10827f0066eaa0f33172300b4bf65",
        "original_commit_id": "29ac481f9aa10827f0066eaa0f33172300b4bf65",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Don't think we're using it yet, right @rastersize?",
        "created_at": "2016-11-29T21:56:54Z",
        "updated_at": "2016-11-29T21:56:54Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/197#discussion_r90123624",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/197",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90123624"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/197#discussion_r90123624"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/197"
            }
        },
        "in_reply_to_id": 90122940
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90127031",
        "pull_request_review_id": 10651495,
        "id": 90127031,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwMTI3MDMx",
        "diff_hunk": "@@ -62,6 +62,15 @@ HF_IGNORED_WARNINGS_0820 = $(HF_IGNORED_WARNINGS_0810)\n \n WARNING_CFLAGS = -Weverything -Wno-error=deprecated -Wno-objc-missing-property-synthesis -Wno-gnu-conditional-omitted-operand -Wno-gnu -Wno-reserved-id-macro -Wno-auto-import -Wno-missing-variable-declarations -Wno-vla -Werror $(HF_IGNORED_WARNINGS_$(XCODE_VERSION_MINOR))\n \n+// Apple LLVM 8.0 - Warnings - All languages",
        "path": "spotify_os.xcconfig",
        "position": 4,
        "original_position": 4,
        "commit_id": "29ac481f9aa10827f0066eaa0f33172300b4bf65",
        "original_commit_id": "29ac481f9aa10827f0066eaa0f33172300b4bf65",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yeah true. Will open a PR for ios-ci for those changes and then we can do bump.",
        "created_at": "2016-11-29T22:15:13Z",
        "updated_at": "2016-11-29T22:15:13Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/197#discussion_r90127031",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/197",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90127031"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/197#discussion_r90127031"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/197"
            }
        },
        "in_reply_to_id": 90122940
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90128074",
        "pull_request_review_id": 10652528,
        "id": 90128074,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwMTI4MDc0",
        "diff_hunk": "@@ -62,6 +62,15 @@ HF_IGNORED_WARNINGS_0820 = $(HF_IGNORED_WARNINGS_0810)\n \n WARNING_CFLAGS = -Weverything -Wno-error=deprecated -Wno-objc-missing-property-synthesis -Wno-gnu-conditional-omitted-operand -Wno-gnu -Wno-reserved-id-macro -Wno-auto-import -Wno-missing-variable-declarations -Wno-vla -Werror $(HF_IGNORED_WARNINGS_$(XCODE_VERSION_MINOR))\n \n+// Apple LLVM 8.0 - Warnings - All languages",
        "path": "spotify_os.xcconfig",
        "position": 4,
        "original_position": 4,
        "commit_id": "29ac481f9aa10827f0066eaa0f33172300b4bf65",
        "original_commit_id": "29ac481f9aa10827f0066eaa0f33172300b4bf65",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@JohnSundell You have a better memory than I do. We\u2019re not actually using ios-ci for Hubs (more like ios-ci v2.0, yes I\u2019d like to merge this one day). So will have to update in both places.\r\n\r\n@8W9aG I\u2019ve sent a PR for ios-ci: https://github.com/spotify/ios-ci/pull/19",
        "created_at": "2016-11-29T22:20:40Z",
        "updated_at": "2016-11-29T22:21:12Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/197#discussion_r90128074",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/197",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90128074"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/197#discussion_r90128074"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/197"
            }
        },
        "in_reply_to_id": 90122940
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90311628",
        "pull_request_review_id": 10832880,
        "id": 90311628,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwMzExNjI4",
        "diff_hunk": "@@ -29,6 +29,7 @@ extension String {\n      *  - Parameter color: The color to print the string using\n      */\n     func print(withColor color: AnsiColor) {\n-        Swift.print(color.rawValue + self)\n+        /// Append a white color code to the string, to reset the console color\n+        Swift.print(color.rawValue + self + AnsiColor.white.rawValue)",
        "path": "live/sources/String+PrintWithColor.swift",
        "position": null,
        "original_position": 6,
        "commit_id": "ffb7ae15e28da4844192467be2522fccd8d110df",
        "original_commit_id": "b47c125c2eb3b3e8317fe6378d34f8f7b69aaf73",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "How about using the \u201creset\u201d ANSI value instead? Setting it to white might cause issues for user\u2019s that use a white background color and black foreground. The \u201creset\u201d value instead just clears any custom formatting. Returning the text that comes afterwards to the terminals default colors.\r\n\r\nThe ansi value is:\r\n`[0m`\r\n\r\nSo we\u2019d add a enum value like:\r\n```swift\r\ncase reset = \"\\u{001B}[0m\"\r\n```\r\n\r\n",
        "created_at": "2016-11-30T19:43:05Z",
        "updated_at": "2016-11-30T20:45:00Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/200#discussion_r90311628",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/200",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90311628"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/200#discussion_r90311628"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/200"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90314876",
        "pull_request_review_id": 10836076,
        "id": 90314876,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwMzE0ODc2",
        "diff_hunk": "@@ -29,6 +29,7 @@ extension String {\n      *  - Parameter color: The color to print the string using\n      */\n     func print(withColor color: AnsiColor) {\n-        Swift.print(color.rawValue + self)\n+        /// Append a white color code to the string, to reset the console color\n+        Swift.print(color.rawValue + self + AnsiColor.white.rawValue)",
        "path": "live/sources/String+PrintWithColor.swift",
        "position": null,
        "original_position": 6,
        "commit_id": "ffb7ae15e28da4844192467be2522fccd8d110df",
        "original_commit_id": "b47c125c2eb3b3e8317fe6378d34f8f7b69aaf73",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ah, that sounds a lot better! \ud83d\udc4d We actually don't need a case for it, we can just inline the string at the end of the `print` call.",
        "created_at": "2016-11-30T19:58:31Z",
        "updated_at": "2016-11-30T20:45:00Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/200#discussion_r90314876",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/200",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90314876"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/200#discussion_r90314876"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/200"
            }
        },
        "in_reply_to_id": 90311628
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90134599",
        "pull_request_review_id": 10658830,
        "id": 90134599,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwMTM0NTk5",
        "diff_hunk": "@@ -58,12 +58,25 @@ NS_ASSUME_NONNULL_BEGIN\n  *  for it), this method returns `nil`.\n  *\n  *  To be able to create a view controller without creating a feature, you can use the other view controller\n- *  creation method available on this protocol.\n+ *  creation methods available on this protocol.\n  */\n - (nullable HUBViewController *)createViewControllerForViewURI:(NSURL *)viewURI;\n \n /**\n- *  Create a view controller without a feature registration\n+ *  Create a view controller without a feature registration, with implicit identifiers\n+ *\n+ *  @param contentOperations The content operations to use to load the content for the view controller.\n+ *  @param featureTitle The title of the feature that the view controller will belong to. Used for its\n+ *         default title, and also made available to contnet operations as part of `HUBFeatureInfo`.",
        "path": "include/HubFramework/HUBViewControllerFactory.h",
        "position": null,
        "original_position": 15,
        "commit_id": "04e4ab76e201bfa30a701dc8d90a32b7dd02742f",
        "original_commit_id": "3ef84e3a252684ccbb551e6eea67e65564f7066b",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "`contnet` -> `content`",
        "created_at": "2016-11-29T22:58:04Z",
        "updated_at": "2016-12-01T09:40:59Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/198#discussion_r90134599",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/198",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90134599"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/198#discussion_r90134599"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/198"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90134823",
        "pull_request_review_id": 10659051,
        "id": 90134823,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwMTM0ODIz",
        "diff_hunk": "@@ -58,12 +58,25 @@ NS_ASSUME_NONNULL_BEGIN\n  *  for it), this method returns `nil`.\n  *\n  *  To be able to create a view controller without creating a feature, you can use the other view controller\n- *  creation method available on this protocol.\n+ *  creation methods available on this protocol.\n  */\n - (nullable HUBViewController *)createViewControllerForViewURI:(NSURL *)viewURI;\n \n /**\n- *  Create a view controller without a feature registration\n+ *  Create a view controller without a feature registration, with implicit identifiers\n+ *\n+ *  @param contentOperations The content operations to use to load the content for the view controller.\n+ *  @param featureTitle The title of the feature that the view controller will belong to. Used for its\n+ *         default title, and also made available to contnet operations as part of `HUBFeatureInfo`.",
        "path": "include/HubFramework/HUBViewControllerFactory.h",
        "position": null,
        "original_position": 15,
        "commit_id": "04e4ab76e201bfa30a701dc8d90a32b7dd02742f",
        "original_commit_id": "3ef84e3a252684ccbb551e6eea67e65564f7066b",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ah, I've spelled this word a million times and still I get it wrong \ud83d\ude1d Nice catch!",
        "created_at": "2016-11-29T22:59:34Z",
        "updated_at": "2016-12-01T09:40:59Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/198#discussion_r90134823",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/198",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90134823"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/198#discussion_r90134823"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/198"
            }
        },
        "in_reply_to_id": 90134599
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90163434",
        "pull_request_review_id": 10686257,
        "id": 90163434,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwMTYzNDM0",
        "diff_hunk": "@@ -0,0 +1,51 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import \"HUBContentOperation.h\"\n+#import \"HUBHeaderMacros.h\"\n+\n+@protocol HUBContentOperationContext;\n+\n+NS_ASSUME_NONNULL_BEGIN\n+\n+/**\n+ *  A concrete content operation type that is executed using a block\n+ *\n+ *  You can use this type to implement lightweight content operations, that don't have the need\n+ *  to be asynchronous or support rescheduling. You simply give a block when initializing an\n+ *  instance of this class, and that block becomes the body of the content operation.\n+ *\n+ *  For more flexibility, implement your own content operation using `HUBContentOperation`.\n+ */\n+@interface HUBBlockContentOperation : NSObject <HUBContentOperation>\n+\n+/**\n+ *  Initialize an instance of this class\n+ *\n+ *  @param block The block to use for the operation. The block will be copied by the operation and\n+ *         invoked each time the operation is performed. The contextual object passed to the block\n+ *         will contain all execution parameters that are passed to any `HUBContentOperation`.\n+ */\n+- (instancetype)initWithBlock:(void(^)(id<HUBContentOperationContext>))block HUB_DESIGNATED_INITIALIZER;",
        "path": "include/HubFramework/HUBBlockContentOperation.h",
        "position": null,
        "original_position": 47,
        "commit_id": "2a46a5433643e085744d81602b3d4339d1ee31c3",
        "original_commit_id": "67a0db8eca600b62c466678e5dc297f3770e5c5d",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "How about adding `NS_SWIFT_NAME(init(closure:))` as well?",
        "created_at": "2016-11-30T03:31:53Z",
        "updated_at": "2016-12-01T13:21:18Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/199#discussion_r90163434",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/199",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90163434"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/199#discussion_r90163434"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/199"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90163517",
        "pull_request_review_id": 10686257,
        "id": 90163517,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwMTYzNTE3",
        "diff_hunk": "@@ -0,0 +1,55 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import \"HUBConnectivityState.h\"\n+\n+@protocol HUBFeatureInfo;\n+@protocol HUBViewModelBuilder;\n+\n+NS_ASSUME_NONNULL_BEGIN\n+\n+/**\n+ *  Protocol defining the public API of a content operation context\n+ *\n+ *  This API is currently only used with `HUBBlockContentOperation`. For more information",
        "path": "include/HubFramework/HUBContentOperationContext.h",
        "position": 32,
        "original_position": 32,
        "commit_id": "2a46a5433643e085744d81602b3d4339d1ee31c3",
        "original_commit_id": "67a0db8eca600b62c466678e5dc297f3770e5c5d",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Do we intend to send these context to \u201cnormal\u201d content operations as well? In the future that is. In other words could we unify all operations by changing:\r\n```objc\r\n- (void)performForViewURI:(NSURL *)viewURI\r\n              featureInfo:(id<HUBFeatureInfo>)featureInfo\r\n        connectivityState:(HUBConnectivityState)connectivityState\r\n         viewModelBuilder:(id<HUBViewModelBuilder>)viewModelBuilder\r\n            previousError:(nullable NSError *)previousError;\r\n```\r\n\r\nTo:\r\n```objc\r\n- (void)performWithContext:(id<HUBContentOperationContext>)context;\r\n```\r\n\r\n---\r\n\r\nIt would have the benefit of not just unifying the API. Making sure this isn\u2019t some special on-off edge case but a first class member. As well as making it _much_ easier to introduce, deprecate and remove \u201cparameters\u201d in the future.",
        "created_at": "2016-11-30T03:33:05Z",
        "updated_at": "2016-12-01T13:21:18Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/199#discussion_r90163517",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/199",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90163517"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/199#discussion_r90163517"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/199"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90163701",
        "pull_request_review_id": 10686257,
        "id": 90163701,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwMTYzNzAx",
        "diff_hunk": "@@ -0,0 +1,73 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import \"HUBBlockContentOperation.h\"\n+\n+#import \"HUBContentOperationContextImplementation.h\"\n+\n+NS_ASSUME_NONNULL_BEGIN\n+\n+@interface HUBBlockContentOperation ()\n+\n+@property (nonatomic, copy) void(^block)(id<HUBContentOperationContext>);",
        "path": "sources/HUBBlockContentOperation.m",
        "position": null,
        "original_position": 30,
        "commit_id": "2a46a5433643e085744d81602b3d4339d1ee31c3",
        "original_commit_id": "67a0db8eca600b62c466678e5dc297f3770e5c5d",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Add `readonly`",
        "created_at": "2016-11-30T03:35:21Z",
        "updated_at": "2016-12-01T13:21:18Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/199#discussion_r90163701",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/199",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90163701"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/199#discussion_r90163701"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/199"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90163939",
        "pull_request_review_id": 10686257,
        "id": 90163939,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwMTYzOTM5",
        "diff_hunk": "@@ -0,0 +1,55 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import \"HUBConnectivityState.h\"\n+\n+@protocol HUBFeatureInfo;\n+@protocol HUBViewModelBuilder;\n+\n+NS_ASSUME_NONNULL_BEGIN\n+\n+/**\n+ *  Protocol defining the public API of a content operation context\n+ *\n+ *  This API is currently only used with `HUBBlockContentOperation`. For more information\n+ *  about the properties that are part of this API, refer to `HUBContentOperation`, or to\n+ *  the \"Content programming guide\".\n+ */\n+@protocol HUBContentOperationContext <NSObject>",
        "path": "include/HubFramework/HUBContentOperationContext.h",
        "position": 36,
        "original_position": 36,
        "commit_id": "2a46a5433643e085744d81602b3d4339d1ee31c3",
        "original_commit_id": "67a0db8eca600b62c466678e5dc297f3770e5c5d",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Does this have to be exposed as a protocol? Seems like it\u2019s just a \u201cmodel\u201d object and could as such, just as easily, be a readonly class. Benefit would that we\u2019d have less symbols and code.\r\n\r\n(If only we had Swift style structs in ObjC, hehe \ud83d\ude38)",
        "created_at": "2016-11-30T03:39:18Z",
        "updated_at": "2016-12-01T13:21:18Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/199#discussion_r90163939",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/199",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90163939"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/199#discussion_r90163939"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/199"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90200858",
        "pull_request_review_id": 10722030,
        "id": 90200858,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwMjAwODU4",
        "diff_hunk": "@@ -0,0 +1,55 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import \"HUBConnectivityState.h\"\n+\n+@protocol HUBFeatureInfo;\n+@protocol HUBViewModelBuilder;\n+\n+NS_ASSUME_NONNULL_BEGIN\n+\n+/**\n+ *  Protocol defining the public API of a content operation context\n+ *\n+ *  This API is currently only used with `HUBBlockContentOperation`. For more information",
        "path": "include/HubFramework/HUBContentOperationContext.h",
        "position": 32,
        "original_position": 32,
        "commit_id": "2a46a5433643e085744d81602b3d4339d1ee31c3",
        "original_commit_id": "67a0db8eca600b62c466678e5dc297f3770e5c5d",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yeah, I wrote this in the PR description \ud83d\ude09 \r\n\r\n> This contextual object API is currently only used for the newly introduced block operations, but the plan is to migrate all HUBContentOperations to using it, instead of having multiple parameters as input.",
        "created_at": "2016-11-30T10:00:45Z",
        "updated_at": "2016-12-01T13:21:18Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/199#discussion_r90200858",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/199",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90200858"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/199#discussion_r90200858"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/199"
            }
        },
        "in_reply_to_id": 90163517
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90201052",
        "pull_request_review_id": 10722227,
        "id": 90201052,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwMjAxMDUy",
        "diff_hunk": "@@ -0,0 +1,55 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import \"HUBConnectivityState.h\"\n+\n+@protocol HUBFeatureInfo;\n+@protocol HUBViewModelBuilder;\n+\n+NS_ASSUME_NONNULL_BEGIN\n+\n+/**\n+ *  Protocol defining the public API of a content operation context\n+ *\n+ *  This API is currently only used with `HUBBlockContentOperation`. For more information\n+ *  about the properties that are part of this API, refer to `HUBContentOperation`, or to\n+ *  the \"Content programming guide\".\n+ */\n+@protocol HUBContentOperationContext <NSObject>",
        "path": "include/HubFramework/HUBContentOperationContext.h",
        "position": 36,
        "original_position": 36,
        "commit_id": "2a46a5433643e085744d81602b3d4339d1ee31c3",
        "original_commit_id": "67a0db8eca600b62c466678e5dc297f3770e5c5d",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "No, it can just be a plain old class. Just followed the same convention as we've been using so far (protocols for APIs, classes for implementations), but in this case - I agree - let's just make it a class \ud83d\udc4d ",
        "created_at": "2016-11-30T10:02:02Z",
        "updated_at": "2016-12-01T13:21:18Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/199#discussion_r90201052",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/199",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90201052"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/199#discussion_r90201052"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/199"
            }
        },
        "in_reply_to_id": 90163939
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90201093",
        "pull_request_review_id": 10722270,
        "id": 90201093,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwMjAxMDkz",
        "diff_hunk": "@@ -0,0 +1,73 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import \"HUBBlockContentOperation.h\"\n+\n+#import \"HUBContentOperationContextImplementation.h\"\n+\n+NS_ASSUME_NONNULL_BEGIN\n+\n+@interface HUBBlockContentOperation ()\n+\n+@property (nonatomic, copy) void(^block)(id<HUBContentOperationContext>);",
        "path": "sources/HUBBlockContentOperation.m",
        "position": null,
        "original_position": 30,
        "commit_id": "2a46a5433643e085744d81602b3d4339d1ee31c3",
        "original_commit_id": "67a0db8eca600b62c466678e5dc297f3770e5c5d",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Do'h. What a rookie mistake! \ud83d\ude05 ",
        "created_at": "2016-11-30T10:02:16Z",
        "updated_at": "2016-12-01T13:21:18Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/199#discussion_r90201093",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/199",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90201093"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/199#discussion_r90201093"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/199"
            }
        },
        "in_reply_to_id": 90163701
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90201134",
        "pull_request_review_id": 10722308,
        "id": 90201134,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwMjAxMTM0",
        "diff_hunk": "@@ -0,0 +1,51 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import \"HUBContentOperation.h\"\n+#import \"HUBHeaderMacros.h\"\n+\n+@protocol HUBContentOperationContext;\n+\n+NS_ASSUME_NONNULL_BEGIN\n+\n+/**\n+ *  A concrete content operation type that is executed using a block\n+ *\n+ *  You can use this type to implement lightweight content operations, that don't have the need\n+ *  to be asynchronous or support rescheduling. You simply give a block when initializing an\n+ *  instance of this class, and that block becomes the body of the content operation.\n+ *\n+ *  For more flexibility, implement your own content operation using `HUBContentOperation`.\n+ */\n+@interface HUBBlockContentOperation : NSObject <HUBContentOperation>\n+\n+/**\n+ *  Initialize an instance of this class\n+ *\n+ *  @param block The block to use for the operation. The block will be copied by the operation and\n+ *         invoked each time the operation is performed. The contextual object passed to the block\n+ *         will contain all execution parameters that are passed to any `HUBContentOperation`.\n+ */\n+- (instancetype)initWithBlock:(void(^)(id<HUBContentOperationContext>))block HUB_DESIGNATED_INITIALIZER;",
        "path": "include/HubFramework/HUBBlockContentOperation.h",
        "position": null,
        "original_position": 47,
        "commit_id": "2a46a5433643e085744d81602b3d4339d1ee31c3",
        "original_commit_id": "67a0db8eca600b62c466678e5dc297f3770e5c5d",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Totally missed that, thanks \ud83d\udc4d ",
        "created_at": "2016-11-30T10:02:30Z",
        "updated_at": "2016-12-01T13:21:18Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/199#discussion_r90201134",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/199",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90201134"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/199#discussion_r90201134"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/199"
            }
        },
        "in_reply_to_id": 90163434
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90208740",
        "pull_request_review_id": 10729894,
        "id": 90208740,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwMjA4NzQw",
        "diff_hunk": "@@ -0,0 +1,55 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import \"HUBConnectivityState.h\"\n+\n+@protocol HUBFeatureInfo;\n+@protocol HUBViewModelBuilder;\n+\n+NS_ASSUME_NONNULL_BEGIN\n+\n+/**\n+ *  Protocol defining the public API of a content operation context\n+ *\n+ *  This API is currently only used with `HUBBlockContentOperation`. For more information\n+ *  about the properties that are part of this API, refer to `HUBContentOperation`, or to\n+ *  the \"Content programming guide\".\n+ */\n+@protocol HUBContentOperationContext <NSObject>",
        "path": "include/HubFramework/HUBContentOperationContext.h",
        "position": 36,
        "original_position": 36,
        "commit_id": "2a46a5433643e085744d81602b3d4339d1ee31c3",
        "original_commit_id": "67a0db8eca600b62c466678e5dc297f3770e5c5d",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Actually, I think I prefer to keep it the way it is currently implemented. The reason is that it creates a very clear separation between the API and the implementation. It clearly signals to the API user that this is not a class that you are supposed to instantiate yourself - since the initialzier is not accessible.",
        "created_at": "2016-11-30T10:48:06Z",
        "updated_at": "2016-12-01T13:21:18Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/199#discussion_r90208740",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/199",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90208740"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/199#discussion_r90208740"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/199"
            }
        },
        "in_reply_to_id": 90163939
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90295596",
        "pull_request_review_id": 10817003,
        "id": 90295596,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwMjk1NTk2",
        "diff_hunk": "@@ -0,0 +1,55 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import \"HUBConnectivityState.h\"\n+\n+@protocol HUBFeatureInfo;\n+@protocol HUBViewModelBuilder;\n+\n+NS_ASSUME_NONNULL_BEGIN\n+\n+/**\n+ *  Protocol defining the public API of a content operation context\n+ *\n+ *  This API is currently only used with `HUBBlockContentOperation`. For more information",
        "path": "include/HubFramework/HUBContentOperationContext.h",
        "position": 32,
        "original_position": 32,
        "commit_id": "2a46a5433643e085744d81602b3d4339d1ee31c3",
        "original_commit_id": "67a0db8eca600b62c466678e5dc297f3770e5c5d",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ooooooh, haha. Well sorry about that! I should work on my readying skills \ud83d\ude04 ",
        "created_at": "2016-11-30T18:27:48Z",
        "updated_at": "2016-12-01T13:21:18Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/199#discussion_r90295596",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/199",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90295596"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/199#discussion_r90295596"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/199"
            }
        },
        "in_reply_to_id": 90163517
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90295672",
        "pull_request_review_id": 10817091,
        "id": 90295672,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwMjk1Njcy",
        "diff_hunk": "@@ -0,0 +1,55 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import \"HUBConnectivityState.h\"\n+\n+@protocol HUBFeatureInfo;\n+@protocol HUBViewModelBuilder;\n+\n+NS_ASSUME_NONNULL_BEGIN\n+\n+/**\n+ *  Protocol defining the public API of a content operation context\n+ *\n+ *  This API is currently only used with `HUBBlockContentOperation`. For more information\n+ *  about the properties that are part of this API, refer to `HUBContentOperation`, or to\n+ *  the \"Content programming guide\".\n+ */\n+@protocol HUBContentOperationContext <NSObject>",
        "path": "include/HubFramework/HUBContentOperationContext.h",
        "position": 36,
        "original_position": 36,
        "commit_id": "2a46a5433643e085744d81602b3d4339d1ee31c3",
        "original_commit_id": "67a0db8eca600b62c466678e5dc297f3770e5c5d",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Alright that\u2019s a pretty good reason! \ud83d\udc4d ",
        "created_at": "2016-11-30T18:28:14Z",
        "updated_at": "2016-12-01T13:21:18Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/199#discussion_r90295672",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/199",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90295672"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/199#discussion_r90295672"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/199"
            }
        },
        "in_reply_to_id": 90163939
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90272174",
        "pull_request_review_id": 10793611,
        "id": 90272174,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwMjcyMTc0",
        "diff_hunk": "@@ -167,6 +167,9 @@ willUpdateSelectionState:(HUBComponentSelectionState)selectionState;\n /// Whether the wrapped component's view has appeared since the model was last changed\n @property (nonatomic, readonly) BOOL viewHasAppearedSinceLastModelChange;\n \n+/// Whether the wrapped component's view has appeared for the first time\n+@property (nonatomic, assign, nullable, readonly) NSNumber *viewHasAppearedForTheFirstTime;",
        "path": "sources/HUBComponentWrapper.h",
        "position": null,
        "original_position": 5,
        "commit_id": "ed914465abd3df4c0305ec90026fbbc90190b945",
        "original_commit_id": "b7164f6c73cdcaecfb6e621319f9aa5bbb8081a0",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Why is it an `NSNumber` and not simply a `BOOL`? (also, how about shortening it down to `viewHasAppeared` - since `ForTheFirstTime` is implied).",
        "created_at": "2016-11-30T16:38:10Z",
        "updated_at": "2016-12-01T13:54:52Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/202#discussion_r90272174",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/202",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90272174"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/202#discussion_r90272174"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/202"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90272314",
        "pull_request_review_id": 10793611,
        "id": 90272314,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwMjcyMzE0",
        "diff_hunk": "@@ -551,6 +554,15 @@ - (void)updateViewForSelectionState:(HUBComponentSelectionState)selectionState n\n     }\n }\n \n+- (void)configureViewHasAppearedForTheFirstTime\n+{\n+    if ([self.viewHasAppearedForTheFirstTime boolValue] == YES) {",
        "path": "sources/HUBComponentWrapper.m",
        "position": null,
        "original_position": 23,
        "commit_id": "ed914465abd3df4c0305ec90026fbbc90190b945",
        "original_commit_id": "b7164f6c73cdcaecfb6e621319f9aa5bbb8081a0",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Can't this simply be replaced with `self.viewHasAppeared = YES`?",
        "created_at": "2016-11-30T16:38:50Z",
        "updated_at": "2016-12-01T13:54:52Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/202#discussion_r90272314",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/202",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90272314"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/202#discussion_r90272314"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/202"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90431972",
        "pull_request_review_id": 10949365,
        "id": 90431972,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwNDMxOTcy",
        "diff_hunk": "@@ -167,6 +167,9 @@ willUpdateSelectionState:(HUBComponentSelectionState)selectionState;\n /// Whether the wrapped component's view has appeared since the model was last changed\n @property (nonatomic, readonly) BOOL viewHasAppearedSinceLastModelChange;\n \n+/// Whether the wrapped component's view has appeared for the first time\n+@property (nonatomic, assign, nullable, readonly) NSNumber *viewHasAppearedForTheFirstTime;",
        "path": "sources/HUBComponentWrapper.h",
        "position": null,
        "original_position": 5,
        "commit_id": "ed914465abd3df4c0305ec90026fbbc90190b945",
        "original_commit_id": "b7164f6c73cdcaecfb6e621319f9aa5bbb8081a0",
        "user": {
            "login": "krris",
            "id": 1786612,
            "node_id": "MDQ6VXNlcjE3ODY2MTI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1786612?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krris",
            "html_url": "https://github.com/krris",
            "followers_url": "https://api.github.com/users/krris/followers",
            "following_url": "https://api.github.com/users/krris/following{/other_user}",
            "gists_url": "https://api.github.com/users/krris/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krris/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krris/subscriptions",
            "organizations_url": "https://api.github.com/users/krris/orgs",
            "repos_url": "https://api.github.com/users/krris/repos",
            "events_url": "https://api.github.com/users/krris/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krris/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Because it can have 3 states:\r\n* `nil` - `viewWillAppear` hasn't been called,\r\n* `true` - `viewWillAppear` has been called only once,\r\n* `false` - `viewWillAppear` has been called more than 1 time.\r\n\r\nIt's needed for example when a content operation is rescheduled. In the situation, when the component has appeared before and `contentOffset` hasn't been changed, we don't want to notify a `contentOffsetObserver`. We want to only notify it on the first appearance.",
        "created_at": "2016-12-01T11:52:10Z",
        "updated_at": "2016-12-01T13:54:52Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/202#discussion_r90431972",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/202",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90431972"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/202#discussion_r90431972"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/202"
            }
        },
        "in_reply_to_id": 90272174
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90432174",
        "pull_request_review_id": 10949565,
        "id": 90432174,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwNDMyMTc0",
        "diff_hunk": "@@ -551,6 +554,15 @@ - (void)updateViewForSelectionState:(HUBComponentSelectionState)selectionState n\n     }\n }\n \n+- (void)configureViewHasAppearedForTheFirstTime\n+{\n+    if ([self.viewHasAppearedForTheFirstTime boolValue] == YES) {",
        "path": "sources/HUBComponentWrapper.m",
        "position": null,
        "original_position": 23,
        "commit_id": "ed914465abd3df4c0305ec90026fbbc90190b945",
        "original_commit_id": "b7164f6c73cdcaecfb6e621319f9aa5bbb8081a0",
        "user": {
            "login": "krris",
            "id": 1786612,
            "node_id": "MDQ6VXNlcjE3ODY2MTI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1786612?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krris",
            "html_url": "https://github.com/krris",
            "followers_url": "https://api.github.com/users/krris/followers",
            "following_url": "https://api.github.com/users/krris/following{/other_user}",
            "gists_url": "https://api.github.com/users/krris/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krris/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krris/subscriptions",
            "organizations_url": "https://api.github.com/users/krris/orgs",
            "repos_url": "https://api.github.com/users/krris/repos",
            "events_url": "https://api.github.com/users/krris/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krris/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "IMO it doesn't describe well this property. See my previous comment.",
        "created_at": "2016-12-01T11:53:17Z",
        "updated_at": "2016-12-01T13:54:52Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/202#discussion_r90432174",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/202",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90432174"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/202#discussion_r90432174"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/202"
            }
        },
        "in_reply_to_id": 90272314
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90432590",
        "pull_request_review_id": 10950011,
        "id": 90432590,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwNDMyNTkw",
        "diff_hunk": "@@ -167,6 +167,9 @@ willUpdateSelectionState:(HUBComponentSelectionState)selectionState;\n /// Whether the wrapped component's view has appeared since the model was last changed\n @property (nonatomic, readonly) BOOL viewHasAppearedSinceLastModelChange;\n \n+/// Whether the wrapped component's view has appeared for the first time\n+@property (nonatomic, assign, nullable, readonly) NSNumber *viewHasAppearedForTheFirstTime;",
        "path": "sources/HUBComponentWrapper.h",
        "position": null,
        "original_position": 5,
        "commit_id": "ed914465abd3df4c0305ec90026fbbc90190b945",
        "original_commit_id": "b7164f6c73cdcaecfb6e621319f9aa5bbb8081a0",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "How about using an integer to keep track of the apperance count instead? More explicit than relying on `nil` semantics (IMO).",
        "created_at": "2016-12-01T11:55:22Z",
        "updated_at": "2016-12-01T13:54:52Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/202#discussion_r90432590",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/202",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90432590"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/202#discussion_r90432590"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/202"
            }
        },
        "in_reply_to_id": 90272174
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90432746",
        "pull_request_review_id": 10950173,
        "id": 90432746,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwNDMyNzQ2",
        "diff_hunk": "@@ -167,6 +167,9 @@ willUpdateSelectionState:(HUBComponentSelectionState)selectionState;\n /// Whether the wrapped component's view has appeared since the model was last changed\n @property (nonatomic, readonly) BOOL viewHasAppearedSinceLastModelChange;\n \n+/// Whether the wrapped component's view has appeared for the first time\n+@property (nonatomic, assign, nullable, readonly) NSNumber *viewHasAppearedForTheFirstTime;",
        "path": "sources/HUBComponentWrapper.h",
        "position": null,
        "original_position": 5,
        "commit_id": "ed914465abd3df4c0305ec90026fbbc90190b945",
        "original_commit_id": "b7164f6c73cdcaecfb6e621319f9aa5bbb8081a0",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Alternatively, an enum:\r\n```\r\nenum ApperanceState {\r\n    case hasNotAppeared\r\n    case hasAppearedOnce\r\n    case hasAppearedMultipleTimes\r\n}\r\n```\r\n\r\nPersonally, I think I prefer the integer approach (if possible). Simpler \ud83d\ude04 ",
        "created_at": "2016-12-01T11:56:11Z",
        "updated_at": "2016-12-01T13:54:52Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/202#discussion_r90432746",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/202",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90432746"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/202#discussion_r90432746"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/202"
            }
        },
        "in_reply_to_id": 90272174
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90433248",
        "pull_request_review_id": 10950701,
        "id": 90433248,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwNDMzMjQ4",
        "diff_hunk": "@@ -167,6 +167,9 @@ willUpdateSelectionState:(HUBComponentSelectionState)selectionState;\n /// Whether the wrapped component's view has appeared since the model was last changed\n @property (nonatomic, readonly) BOOL viewHasAppearedSinceLastModelChange;\n \n+/// Whether the wrapped component's view has appeared for the first time\n+@property (nonatomic, assign, nullable, readonly) NSNumber *viewHasAppearedForTheFirstTime;",
        "path": "sources/HUBComponentWrapper.h",
        "position": null,
        "original_position": 5,
        "commit_id": "ed914465abd3df4c0305ec90026fbbc90190b945",
        "original_commit_id": "b7164f6c73cdcaecfb6e621319f9aa5bbb8081a0",
        "user": {
            "login": "krris",
            "id": 1786612,
            "node_id": "MDQ6VXNlcjE3ODY2MTI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1786612?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krris",
            "html_url": "https://github.com/krris",
            "followers_url": "https://api.github.com/users/krris/followers",
            "following_url": "https://api.github.com/users/krris/following{/other_user}",
            "gists_url": "https://api.github.com/users/krris/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krris/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krris/subscriptions",
            "organizations_url": "https://api.github.com/users/krris/orgs",
            "repos_url": "https://api.github.com/users/krris/repos",
            "events_url": "https://api.github.com/users/krris/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krris/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "After writing my comment I got the same idea \ud83d\ude04  Will do this \ud83d\udc4d ",
        "created_at": "2016-12-01T11:58:46Z",
        "updated_at": "2016-12-01T13:54:52Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/202#discussion_r90433248",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/202",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90433248"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/202#discussion_r90433248"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/202"
            }
        },
        "in_reply_to_id": 90272174
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90433328",
        "pull_request_review_id": 10950792,
        "id": 90433328,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwNDMzMzI4",
        "diff_hunk": "@@ -167,6 +167,9 @@ willUpdateSelectionState:(HUBComponentSelectionState)selectionState;\n /// Whether the wrapped component's view has appeared since the model was last changed\n @property (nonatomic, readonly) BOOL viewHasAppearedSinceLastModelChange;\n \n+/// Whether the wrapped component's view has appeared for the first time\n+@property (nonatomic, assign, nullable, readonly) NSNumber *viewHasAppearedForTheFirstTime;",
        "path": "sources/HUBComponentWrapper.h",
        "position": null,
        "original_position": 5,
        "commit_id": "ed914465abd3df4c0305ec90026fbbc90190b945",
        "original_commit_id": "b7164f6c73cdcaecfb6e621319f9aa5bbb8081a0",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\ud83d\udc4d ",
        "created_at": "2016-12-01T11:59:15Z",
        "updated_at": "2016-12-01T13:54:52Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/202#discussion_r90433328",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/202",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90433328"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/202#discussion_r90433328"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/202"
            }
        },
        "in_reply_to_id": 90272174
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90440458",
        "pull_request_review_id": 10958160,
        "id": 90440458,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwNDQwNDU4",
        "diff_hunk": "@@ -167,6 +167,9 @@ willUpdateSelectionState:(HUBComponentSelectionState)selectionState;\n /// Whether the wrapped component's view has appeared since the model was last changed\n @property (nonatomic, readonly) BOOL viewHasAppearedSinceLastModelChange;\n \n+/// The wrapped component's appearance count",
        "path": "sources/HUBComponentWrapper.h",
        "position": null,
        "original_position": 4,
        "commit_id": "ed914465abd3df4c0305ec90026fbbc90190b945",
        "original_commit_id": "ae6a766efc4ebd5e9a12504e7a4f392bc34eb03a",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Maybe explain a bit more what this actually does? So it's not just simply re-stating the property name \ud83d\ude05 How about:\r\n```\r\n/**\r\n *    The number of times the wrapped component has appeared on the screen\r\n *\r\n *    Incremented every time the component gets sent the -viewWillAppear message.\r\n */\r\n```",
        "created_at": "2016-12-01T12:53:32Z",
        "updated_at": "2016-12-01T13:54:52Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/202#discussion_r90440458",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/202",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90440458"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/202#discussion_r90440458"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/202"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90441261",
        "pull_request_review_id": 10958975,
        "id": 90441261,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwNDQxMjYx",
        "diff_hunk": "@@ -167,6 +167,9 @@ willUpdateSelectionState:(HUBComponentSelectionState)selectionState;\n /// Whether the wrapped component's view has appeared since the model was last changed\n @property (nonatomic, readonly) BOOL viewHasAppearedSinceLastModelChange;\n \n+/// The wrapped component's appearance count",
        "path": "sources/HUBComponentWrapper.h",
        "position": null,
        "original_position": 4,
        "commit_id": "ed914465abd3df4c0305ec90026fbbc90190b945",
        "original_commit_id": "ae6a766efc4ebd5e9a12504e7a4f392bc34eb03a",
        "user": {
            "login": "krris",
            "id": 1786612,
            "node_id": "MDQ6VXNlcjE3ODY2MTI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1786612?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krris",
            "html_url": "https://github.com/krris",
            "followers_url": "https://api.github.com/users/krris/followers",
            "following_url": "https://api.github.com/users/krris/following{/other_user}",
            "gists_url": "https://api.github.com/users/krris/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krris/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krris/subscriptions",
            "organizations_url": "https://api.github.com/users/krris/orgs",
            "repos_url": "https://api.github.com/users/krris/repos",
            "events_url": "https://api.github.com/users/krris/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krris/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yes, yes, yes \ud83d\ude04 ",
        "created_at": "2016-12-01T12:58:56Z",
        "updated_at": "2016-12-01T13:54:52Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/202#discussion_r90441261",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/202",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90441261"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/202#discussion_r90441261"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/202"
            }
        },
        "in_reply_to_id": 90440458
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90462304",
        "pull_request_review_id": 10980283,
        "id": 90462304,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwNDYyMzA0",
        "diff_hunk": "@@ -0,0 +1,157 @@\n+# Hub Framework concept guide\n+\n+Welcome to the Hub Framework concept guide! This guide aims to give you an easy to navigate, alphabetical reference that explains all the key concepts of the framework. It also contains links to other guides and code that will give you more in-depth knowledge about the various concepts and how they relate.\n+\n+**Table of contents**\n+\n+- [Action](#action)\n+- [Action handler](#action-handler)\n+- [Backend-driven UIs](#backend-driven-uis)\n+- [Builder](#builder)\n+- [Component](#component)\n+- [Component-driven UIs](#component-driven-uis)\n+- [Component identifier](#component-identifier)\n+- [Component model](#component-model)\n+- [Content loading chain](#content-loading-chain)\n+- [Content operation](#content-operation)\n+- [Factory](#factory)\n+- [Layout trait](#layout-trait)\n+- [View model](#view-model)\n+\n+## Action\n+\n+An object implementing `HUBAction` - which can be used to define custom behavior for components & content operations. Actions can be both observed and triggered by content operations & components, meaning that they can be used to bridge the gap between content operations and components.\n+\n+Actions are integrated with the Hub Framework through a [factory](#factory) (`HUBActionFactory`) that is registered using `HUBActionRegistry`.\n+\n+For more information see:\n+\n+- The `HUBAction` protocol.\n+- The `HUBActionFactory` protocol.\n+- The [Action programming guide](https://spotify.github.io/HubFramework/action-programming-guide.html).\n+\n+## Action handler\n+\n+An object that handles actions, either on a global or feature level. Action handlers are defined using `HUBActionHandler` and can be supplied either when setting up `HUBManager` (as `defaultActionHandler`) or when setting up a feature (as `actionHandler`).\n+\n+An action handler is called each time an action is about to be performed in a view, and can chose to handle that action itself, or simply returning `NO` to let the action take place.\n+\n+For more information see:\n+\n+- The `HUBAction` protocol.\n+- The `HUBActionHandler` protocol.\n+- The [Action programming guide](https://spotify.github.io/HubFramework/action-programming-guide.html).\n+\n+## Backend-driven UIs\n+\n+A phrase used to describe UIs that are essentially controlled by a backend service. While most apps these days have their content provided by some form of backend, UIs that are considered \"backend-driven\" also have their structure & layout driven from the backend.\n+\n+The Hub Framework faciliates the creation of \"backend-driven UIs\" through its JSON API and declarative characteristics.\n+\n+For more information see:\n+\n+- The [Content programming guide](https://spotify.github.io/HubFramework/content-programming-guide.html).\n+- The [JSON programming guide](https://spotify.github.io/HubFramework/json-programming-guide.html).\n+- The talk [\"Backend-driven UIs\"](https://atscaleconference.com/videos/backend-driven-native-uis/) from Mobile@Scale London 2016.\n+\n+## Builder\n+\n+An object that is responsible for constructing a model. Builders are used in [content operations](#content-operation) to declare content (like components, images, targets, etc). They act like a mutable counterpart to the model that they build - with the key difference that they're not related by inheritance. Each model in the Hub Framework has a builder associated with it.\n+\n+You can add content to a builder either through code, or through JSON.\n+\n+For more information see:\n+\n+- The `HUBViewModelBuilder` protocol.\n+- The `HUBComponentModelBuilder` protocol.\n+- The `HUBComponentImageDataBuilder` protocol.\n+- The `HUBComponentTargetBuilder` protocol.\n+- The [Content programming guide](https://spotify.github.io/HubFramework/content-programming-guide.html).\n+\n+## Component\n+\n+An object that manages a view that is rendered in a `HUBViewController`. Components are defined using `HUBComponent` (or related protocols) and are registered with the Hub Framework using a [factory](#factory) (`HUBComponentFactory`) through `HUBComponentRegistry`. A component is the controller between a [component model](#component-model) and a `UIView`. All views that are rendered in a `HUBViewController` are components.\n+\n+For more information see:\n+\n+- The `HUBComponent` protocol.\n+- The `HUBComponentFactory` protocol.\n+- The `HUBComponentModel` protocol.\n+- The [Component programming guide](https://spotify.github.io/HubFramework/component-programming-guide.html).\n+\n+## Component-driven UIs\n+\n+A phrase used to describe UIs that consists entirely of components. Instead of creating hard-wired layout relationships between subviews, components are fully decoupled, atomic pieces of a UI. In the Hub Framework, a [component](#component) in a thin wrapper around a `UIView`, that enables existing views to be easily imported into the framework.\n+\n+For more information see:\n+\n+- The `HUBComponent` protocol.\n+- The `HUBComponentModel` protocol.\n+- The [Component programming guide](https://spotify.github.io/HubFramework/component-programming-guide.html).\n+- The talk [\"Building component-driven UIs\"](https://vimeo.com/190713343) from MobileEra 2016.\n+\n+## Component model\n+\n+A model that is used to render a component. Component models are created using [builders](#builder) in [content operations](#content-operation) and are generic representations of data, for rendering purposes. Each component model has a [component identifier](#component-identifier) associated with it, which is used to resolve which component instance that will render it. It also contains properties like `title`, `subtitle`, `mainImage`, `target`, etc. that a component can be used to populate its view.\n+\n+For more information see:\n+\n+- The `HUBComponentModel` protocol.\n+- The `HUBComponent` protocol.\n+- The [Component programming guide](https://spotify.github.io/HubFramework/component-programming-guide.html).\n+- The [Content programming guide](https://spotify.github.io/HubFramework/content-programming-guide.html).\n+\n+## Content loading chain\n+\n+An array of [content operations](#content-operation) that are chained together to load the content for a view. A chain is automatically formed when a `HUBViewController` (or `HUBViewModelLoader`) is created with multiple content operations. In a chain, each operation is called sequentially, and its output state is transferred (by copying) to the next operation.\n+\n+For more information see:\n+\n+- The `HUBContentOperation` protocol.\n+- The [Content programming guide](https://spotify.github.io/HubFramework/content-programming-guide.html).\n+\n+## Content operation\n+\n+An operation that is resposible for loading the content for a view. A single content operation can be resonsible for the entire content, or multiple ones can be chained together (to form a [content loading chain](#content-loading-chain)), each performing a specific mutation of the view's content.\n+\n+Content operations use a view model [builder](#builder) (`HUBViewModelBuilder`) to add, remove or change component models for a view. How they execute, and whether they load remote JSON or use local content is up to you. They are defined using the `HUBContentOperation` protocol (and optionally, sub-protocols).\n+\n+For more information see:\n+\n+- The `HUBContentOperation` protocol.\n+- The `HUBViewModelBuilder` protocol.\n+- The [Content programming guide](https://spotify.github.io/HubFramework/content-programming-guide.html).\n+\n+## Factory\n+\n+An object that is responsible for creating implementations of a certain protocol. The [factory pattern](https://en.wikipedia.org/wiki/Factory_method_pattern) is used extensively throughout the Hub Framework to avoid shared state. By always creating unique object instances for each context - no state is ever shared. While this requires a bit more code to be written (you have to write both an implementation **and a factory**, for example for [components](#component)), it makes the framework a lot more predictable and less error prone.\n+\n+For more information see:\n+\n+- [\"Factory method pattern\" on Wikipedia](https://en.wikipedia.org/wiki/Factory_method_pattern).\n+- The  `HUBComponentFactory` protocol.",
        "path": "documentation/Concept guide.md",
        "position": null,
        "original_position": 132,
        "commit_id": "abcaa96b8568ebee4c050341d18678cad07d9075",
        "original_commit_id": "77680f58d5e95411af2fcfe77a70735dbc005409",
        "user": {
            "login": "cerihughes",
            "id": 12008876,
            "node_id": "MDQ6VXNlcjEyMDA4ODc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12008876?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cerihughes",
            "html_url": "https://github.com/cerihughes",
            "followers_url": "https://api.github.com/users/cerihughes/followers",
            "following_url": "https://api.github.com/users/cerihughes/following{/other_user}",
            "gists_url": "https://api.github.com/users/cerihughes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cerihughes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cerihughes/subscriptions",
            "organizations_url": "https://api.github.com/users/cerihughes/orgs",
            "repos_url": "https://api.github.com/users/cerihughes/repos",
            "events_url": "https://api.github.com/users/cerihughes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cerihughes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Nitpick: Extra space after `The`",
        "created_at": "2016-12-01T14:56:22Z",
        "updated_at": "2016-12-01T17:08:33Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/204#discussion_r90462304",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/204",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90462304"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/204#discussion_r90462304"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/204"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90462499",
        "pull_request_review_id": 10980283,
        "id": 90462499,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwNDYyNDk5",
        "diff_hunk": "@@ -0,0 +1,157 @@\n+# Hub Framework concept guide\n+\n+Welcome to the Hub Framework concept guide! This guide aims to give you an easy to navigate, alphabetical reference that explains all the key concepts of the framework. It also contains links to other guides and code that will give you more in-depth knowledge about the various concepts and how they relate.\n+\n+**Table of contents**\n+\n+- [Action](#action)\n+- [Action handler](#action-handler)\n+- [Backend-driven UIs](#backend-driven-uis)\n+- [Builder](#builder)\n+- [Component](#component)\n+- [Component-driven UIs](#component-driven-uis)\n+- [Component identifier](#component-identifier)\n+- [Component model](#component-model)\n+- [Content loading chain](#content-loading-chain)\n+- [Content operation](#content-operation)\n+- [Factory](#factory)\n+- [Layout trait](#layout-trait)\n+- [View model](#view-model)\n+\n+## Action\n+\n+An object implementing `HUBAction` - which can be used to define custom behavior for components & content operations. Actions can be both observed and triggered by content operations & components, meaning that they can be used to bridge the gap between content operations and components.\n+\n+Actions are integrated with the Hub Framework through a [factory](#factory) (`HUBActionFactory`) that is registered using `HUBActionRegistry`.\n+\n+For more information see:\n+\n+- The `HUBAction` protocol.\n+- The `HUBActionFactory` protocol.\n+- The [Action programming guide](https://spotify.github.io/HubFramework/action-programming-guide.html).\n+\n+## Action handler\n+\n+An object that handles actions, either on a global or feature level. Action handlers are defined using `HUBActionHandler` and can be supplied either when setting up `HUBManager` (as `defaultActionHandler`) or when setting up a feature (as `actionHandler`).\n+\n+An action handler is called each time an action is about to be performed in a view, and can chose to handle that action itself, or simply returning `NO` to let the action take place.\n+\n+For more information see:\n+\n+- The `HUBAction` protocol.\n+- The `HUBActionHandler` protocol.\n+- The [Action programming guide](https://spotify.github.io/HubFramework/action-programming-guide.html).\n+\n+## Backend-driven UIs\n+\n+A phrase used to describe UIs that are essentially controlled by a backend service. While most apps these days have their content provided by some form of backend, UIs that are considered \"backend-driven\" also have their structure & layout driven from the backend.\n+\n+The Hub Framework faciliates the creation of \"backend-driven UIs\" through its JSON API and declarative characteristics.\n+\n+For more information see:\n+\n+- The [Content programming guide](https://spotify.github.io/HubFramework/content-programming-guide.html).\n+- The [JSON programming guide](https://spotify.github.io/HubFramework/json-programming-guide.html).\n+- The talk [\"Backend-driven UIs\"](https://atscaleconference.com/videos/backend-driven-native-uis/) from Mobile@Scale London 2016.\n+\n+## Builder\n+\n+An object that is responsible for constructing a model. Builders are used in [content operations](#content-operation) to declare content (like components, images, targets, etc). They act like a mutable counterpart to the model that they build - with the key difference that they're not related by inheritance. Each model in the Hub Framework has a builder associated with it.\n+\n+You can add content to a builder either through code, or through JSON.\n+\n+For more information see:\n+\n+- The `HUBViewModelBuilder` protocol.\n+- The `HUBComponentModelBuilder` protocol.\n+- The `HUBComponentImageDataBuilder` protocol.\n+- The `HUBComponentTargetBuilder` protocol.\n+- The [Content programming guide](https://spotify.github.io/HubFramework/content-programming-guide.html).\n+\n+## Component\n+\n+An object that manages a view that is rendered in a `HUBViewController`. Components are defined using `HUBComponent` (or related protocols) and are registered with the Hub Framework using a [factory](#factory) (`HUBComponentFactory`) through `HUBComponentRegistry`. A component is the controller between a [component model](#component-model) and a `UIView`. All views that are rendered in a `HUBViewController` are components.\n+\n+For more information see:\n+\n+- The `HUBComponent` protocol.\n+- The `HUBComponentFactory` protocol.\n+- The `HUBComponentModel` protocol.\n+- The [Component programming guide](https://spotify.github.io/HubFramework/component-programming-guide.html).\n+\n+## Component-driven UIs\n+\n+A phrase used to describe UIs that consists entirely of components. Instead of creating hard-wired layout relationships between subviews, components are fully decoupled, atomic pieces of a UI. In the Hub Framework, a [component](#component) in a thin wrapper around a `UIView`, that enables existing views to be easily imported into the framework.\n+\n+For more information see:\n+\n+- The `HUBComponent` protocol.\n+- The `HUBComponentModel` protocol.\n+- The [Component programming guide](https://spotify.github.io/HubFramework/component-programming-guide.html).\n+- The talk [\"Building component-driven UIs\"](https://vimeo.com/190713343) from MobileEra 2016.\n+\n+## Component model\n+\n+A model that is used to render a component. Component models are created using [builders](#builder) in [content operations](#content-operation) and are generic representations of data, for rendering purposes. Each component model has a [component identifier](#component-identifier) associated with it, which is used to resolve which component instance that will render it. It also contains properties like `title`, `subtitle`, `mainImage`, `target`, etc. that a component can be used to populate its view.\n+\n+For more information see:\n+\n+- The `HUBComponentModel` protocol.\n+- The `HUBComponent` protocol.\n+- The [Component programming guide](https://spotify.github.io/HubFramework/component-programming-guide.html).\n+- The [Content programming guide](https://spotify.github.io/HubFramework/content-programming-guide.html).\n+\n+## Content loading chain\n+\n+An array of [content operations](#content-operation) that are chained together to load the content for a view. A chain is automatically formed when a `HUBViewController` (or `HUBViewModelLoader`) is created with multiple content operations. In a chain, each operation is called sequentially, and its output state is transferred (by copying) to the next operation.\n+\n+For more information see:\n+\n+- The `HUBContentOperation` protocol.\n+- The [Content programming guide](https://spotify.github.io/HubFramework/content-programming-guide.html).\n+\n+## Content operation\n+\n+An operation that is resposible for loading the content for a view. A single content operation can be resonsible for the entire content, or multiple ones can be chained together (to form a [content loading chain](#content-loading-chain)), each performing a specific mutation of the view's content.\n+\n+Content operations use a view model [builder](#builder) (`HUBViewModelBuilder`) to add, remove or change component models for a view. How they execute, and whether they load remote JSON or use local content is up to you. They are defined using the `HUBContentOperation` protocol (and optionally, sub-protocols).\n+\n+For more information see:\n+\n+- The `HUBContentOperation` protocol.\n+- The `HUBViewModelBuilder` protocol.\n+- The [Content programming guide](https://spotify.github.io/HubFramework/content-programming-guide.html).\n+\n+## Factory\n+\n+An object that is responsible for creating implementations of a certain protocol. The [factory pattern](https://en.wikipedia.org/wiki/Factory_method_pattern) is used extensively throughout the Hub Framework to avoid shared state. By always creating unique object instances for each context - no state is ever shared. While this requires a bit more code to be written (you have to write both an implementation **and a factory**, for example for [components](#component)), it makes the framework a lot more predictable and less error prone.\n+\n+For more information see:\n+\n+- [\"Factory method pattern\" on Wikipedia](https://en.wikipedia.org/wiki/Factory_method_pattern).\n+- The  `HUBComponentFactory` protocol.\n+- The `HUBActionFactory` protocol.\n+- The `HUBViewControllerFactory` protocol.\n+- The `HUBViewModelLoaderFactory` protocol.\n+\n+## Layout trait\n+\n+Layout traits are used to define layout relationships between components. Instead of hard-coding margins and relationships between concrete component implementations - layout traits enables components to work with layout in a more abstract way. Each component simply defines which layout traits that best describe it, in terms of layout, and then an implementation of `HUBComponentLayoutManager` computes the exact margins that should be applied to it.",
        "path": "documentation/Concept guide.md",
        "position": null,
        "original_position": 139,
        "commit_id": "abcaa96b8568ebee4c050341d18678cad07d9075",
        "original_commit_id": "77680f58d5e95411af2fcfe77a70735dbc005409",
        "user": {
            "login": "cerihughes",
            "id": 12008876,
            "node_id": "MDQ6VXNlcjEyMDA4ODc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12008876?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cerihughes",
            "html_url": "https://github.com/cerihughes",
            "followers_url": "https://api.github.com/users/cerihughes/followers",
            "following_url": "https://api.github.com/users/cerihughes/following{/other_user}",
            "gists_url": "https://api.github.com/users/cerihughes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cerihughes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cerihughes/subscriptions",
            "organizations_url": "https://api.github.com/users/cerihughes/orgs",
            "repos_url": "https://api.github.com/users/cerihughes/repos",
            "events_url": "https://api.github.com/users/cerihughes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cerihughes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Either `Each component simply defines which layout traits best describe it` or `Each component simply defines the layout traits that best describe it`",
        "created_at": "2016-12-01T14:57:23Z",
        "updated_at": "2016-12-01T17:08:33Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/204#discussion_r90462499",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/204",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90462499"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/204#discussion_r90462499"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/204"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90461206",
        "pull_request_review_id": 10979188,
        "id": 90461206,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwNDYxMjA2",
        "diff_hunk": "@@ -2866,6 +2874,68 @@ - (void)testThatDelegateIsNotifiedWhenHeaderAppears\n     XCTAssertEqualObjects(self.componentViewsFromApperanceDelegateMethod, @[self.component.view]);\n }\n \n+- (void)testThatModelIsSetImmediatelyOnInitialRenderRequest\n+{\n+    HUBViewModelRendererMock *viewModelRenderer = [HUBViewModelRendererMock new];\n+    [self createViewControllerWithViewModelRenderer:viewModelRenderer];\n+\n+    self.contentOperation.contentLoadingBlock = ^(id<HUBViewModelBuilder> viewModelBuilder) {\n+        [viewModelBuilder headerComponentModelBuilder].title = @\"title1\";\n+        return YES;\n+    };\n+\n+    [self.viewController.view layoutIfNeeded];\n+    [self.viewController reload];",
        "path": "tests/HUBViewControllerTests.m",
        "position": null,
        "original_position": 118,
        "commit_id": "e14f034298bf843b8afd49a982b2674f36cc13fd",
        "original_commit_id": "464eba53d2a9e1cae1b969993f6bcf7866d7917e",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Instead of this, how about calling `[self simulateViewControllerLayoutCycle]`? (to be consistent with the other tests)",
        "created_at": "2016-12-01T14:51:00Z",
        "updated_at": "2016-12-02T07:10:34Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/205#discussion_r90461206",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/205",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90461206"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/205#discussion_r90461206"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/205"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90461373",
        "pull_request_review_id": 10979188,
        "id": 90461373,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwNDYxMzcz",
        "diff_hunk": "@@ -0,0 +1,34 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import \"HUBViewModelRenderer.h\"\n+\n+NS_ASSUME_NONNULL_BEGIN\n+\n+/// Mocked renderer that gives the test control over when to fire the completion block. For use in tests only.\n+@interface HUBViewModelRendererMock : HUBViewModelRenderer\n+\n+/// All completion blocks passed to the render method\n+@property (nonatomic, readonly) NSMutableArray<void(^)(void)> *completionBlocks;",
        "path": "tests/mocks/HUBViewModelRendererMock.h",
        "position": null,
        "original_position": 30,
        "commit_id": "e14f034298bf843b8afd49a982b2674f36cc13fd",
        "original_commit_id": "464eba53d2a9e1cae1b969993f6bcf7866d7917e",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "`strong`?",
        "created_at": "2016-12-01T14:51:56Z",
        "updated_at": "2016-12-02T07:10:34Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/205#discussion_r90461373",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/205",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90461373"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/205#discussion_r90461373"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/205"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90461640",
        "pull_request_review_id": 10979611,
        "id": 90461640,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwNDYxNjQw",
        "diff_hunk": "@@ -2866,6 +2874,68 @@ - (void)testThatDelegateIsNotifiedWhenHeaderAppears\n     XCTAssertEqualObjects(self.componentViewsFromApperanceDelegateMethod, @[self.component.view]);\n }\n \n+- (void)testThatModelIsSetImmediatelyOnInitialRenderRequest\n+{\n+    HUBViewModelRendererMock *viewModelRenderer = [HUBViewModelRendererMock new];\n+    [self createViewControllerWithViewModelRenderer:viewModelRenderer];\n+\n+    self.contentOperation.contentLoadingBlock = ^(id<HUBViewModelBuilder> viewModelBuilder) {\n+        [viewModelBuilder headerComponentModelBuilder].title = @\"title1\";\n+        return YES;\n+    };\n+\n+    [self.viewController.view layoutIfNeeded];\n+    [self.viewController reload];\n+\n+    // The model should be set at this point as there's no existing render in progress\n+    XCTAssertEqualObjects(self.viewController.viewModel.headerComponentModel.title, @\"title1\");\n+\n+    // Only 1 render request was made\n+    XCTAssertEqual(viewModelRenderer.completionBlocks.count, 1);\n+\n+    // Don't finish the test until rendering has stopped.\n+    viewModelRenderer.completionBlocks[0]();\n+}\n+\n+- (void)testThatModelIsNotSetImmediatelyOnOverlappingRenderRequests\n+{\n+    HUBViewModelRendererMock *viewModelRenderer = [HUBViewModelRendererMock new];\n+    [self createViewControllerWithViewModelRenderer:viewModelRenderer];\n+\n+    self.contentOperation.contentLoadingBlock = ^(id<HUBViewModelBuilder> viewModelBuilder) {\n+        [viewModelBuilder headerComponentModelBuilder].title = @\"title1\";\n+        return YES;\n+    };\n+\n+    [self.viewController.view layoutIfNeeded];",
        "path": "tests/HUBViewControllerTests.m",
        "position": null,
        "original_position": 140,
        "commit_id": "e14f034298bf843b8afd49a982b2674f36cc13fd",
        "original_commit_id": "464eba53d2a9e1cae1b969993f6bcf7866d7917e",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The above comment also applies here \ud83d\ude42 ",
        "created_at": "2016-12-01T14:53:16Z",
        "updated_at": "2016-12-02T07:10:34Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/205#discussion_r90461640",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/205",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90461640"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/205#discussion_r90461640"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/205"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90083173",
        "pull_request_review_id": 10607933,
        "id": 90083173,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwMDgzMTcz",
        "diff_hunk": "@@ -0,0 +1,14 @@\n+#import \"UIViewController+HUBSimulateLayoutCycle.h\"\n+\n+@implementation UIViewController (HUBSimulateLayoutCycle)\n+\n+- (void)hub_simulateLayoutCycle\n+{\n+    [self loadView];",
        "path": "tests/utilities/UIViewController+HUBSimulateLayoutCycle.m",
        "position": null,
        "original_position": 7,
        "commit_id": "72d0c882a4e6fa27e01227dbea5b7be1e48476a1",
        "original_commit_id": "b1f49be511fae79a5b3de64e25cee3e74ef8a5ee",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "How about:\r\n```objc\r\nself.view; // TODO: Replace with [self loadViewIfNeeded] when we\u2019ve dropped iOS 8 \ud83d\ude2c\r\n```\r\n\r\nSince `-loadView` is documented as a \u201cYou should never call this method directly.\u201d.",
        "created_at": "2016-11-29T19:04:43Z",
        "updated_at": "2016-12-02T10:56:36Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/193#discussion_r90083173",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/193",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90083173"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/193#discussion_r90083173"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/193"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90546423",
        "pull_request_review_id": 11066248,
        "id": 90546423,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwNTQ2NDIz",
        "diff_hunk": "@@ -0,0 +1,9 @@\n+#import <UIKit/UIKit.h>",
        "path": "tests/utilities/UIViewController+HUBSimulateLayoutCycle.h",
        "position": 22,
        "original_position": 1,
        "commit_id": "72d0c882a4e6fa27e01227dbea5b7be1e48476a1",
        "original_commit_id": "d18bb0b7b6b6b18ebccf60b6e5cc501f077eccb1",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Missing the license header:\r\n```\r\n/*\r\n *  Copyright (c) 2016 Spotify AB.\r\n *\r\n *  Licensed to the Apache Software Foundation (ASF) under one\r\n *  or more contributor license agreements.  See the NOTICE file\r\n *  distributed with this work for additional information\r\n *  regarding copyright ownership.  The ASF licenses this file\r\n *  to you under the Apache License, Version 2.0 (the\r\n *  \"License\"); you may not use this file except in compliance\r\n *  with the License.  You may obtain a copy of the License at\r\n *\r\n *  http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n *  Unless required by applicable law or agreed to in writing,\r\n *  software distributed under the License is distributed on an\r\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n *  KIND, either express or implied.  See the License for the\r\n *  specific language governing permissions and limitations\r\n *  under the License.\r\n */\r\n```",
        "created_at": "2016-12-01T21:57:45Z",
        "updated_at": "2016-12-02T10:56:36Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/193#discussion_r90546423",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/193",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90546423"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/193#discussion_r90546423"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/193"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90546442",
        "pull_request_review_id": 11066248,
        "id": 90546442,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwNTQ2NDQy",
        "diff_hunk": "@@ -0,0 +1,15 @@\n+#import \"UIViewController+HUBSimulateLayoutCycle.h\"",
        "path": "tests/utilities/UIViewController+HUBSimulateLayoutCycle.m",
        "position": 6,
        "original_position": 1,
        "commit_id": "72d0c882a4e6fa27e01227dbea5b7be1e48476a1",
        "original_commit_id": "d18bb0b7b6b6b18ebccf60b6e5cc501f077eccb1",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Missing the license header:\r\n```\r\n/*\r\n *  Copyright (c) 2016 Spotify AB.\r\n *\r\n *  Licensed to the Apache Software Foundation (ASF) under one\r\n *  or more contributor license agreements.  See the NOTICE file\r\n *  distributed with this work for additional information\r\n *  regarding copyright ownership.  The ASF licenses this file\r\n *  to you under the Apache License, Version 2.0 (the\r\n *  \"License\"); you may not use this file except in compliance\r\n *  with the License.  You may obtain a copy of the License at\r\n *\r\n *  http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n *  Unless required by applicable law or agreed to in writing,\r\n *  software distributed under the License is distributed on an\r\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n *  KIND, either express or implied.  See the License for the\r\n *  specific language governing permissions and limitations\r\n *  under the License.\r\n */\r\n```",
        "created_at": "2016-12-01T21:57:53Z",
        "updated_at": "2016-12-02T10:56:36Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/193#discussion_r90546442",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/193",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90546442"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/193#discussion_r90546442"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/193"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90853470",
        "pull_request_review_id": 11367010,
        "id": 90853470,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwODUzNDcw",
        "diff_hunk": "@@ -28,12 +28,12 @@ The Hub Framework requires you to link with Apple's `SystemConfiguration` framew\n \n Each application using the Hub Framework will have one instance of the `HUBManager` class, which manages an instance of the framework. It\u2019s recommended that you create this object early in your application\u2019s lifecycle and keep it somewhere accessible - for example in your `AppDelegate`.\n \n-In order to create a `HUBManager` instance, you need to supply implementations of the following 2 protocols:\n+There are a few different ways to setup `HUBManager`, each providing different levels of customizability. The simplest way is to use the defaults, and just supply the following two parameters:\n \n-- `HUBComponentLayoutManager`: For calculating margins and other layout attributes for components based on their layout traits.\n-- `HUBComponentFallbackHandler`: For providing fallback information in case a component model\u2019s component couldn\u2019t be resolved by the framework.\n+- `componentMargin`: What margin that should be used in between components.\n+- `componentFallbackBlock/Closure`: A block/closure that returns a component to use for fallback, in case a default one couldn't be matched.",
        "path": "documentation/Setup guide.md",
        "position": 10,
        "original_position": 10,
        "commit_id": "42f416202d0314bf67865e5ffcf4fb5ae8e55944",
        "original_commit_id": "42f416202d0314bf67865e5ffcf4fb5ae8e55944",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Perhaps \r\n> in case a default one couldn't be matched\r\n\r\ncould be clarified with something like\r\n\r\n> in case a component identifier with no matching component factory is provided",
        "created_at": "2016-12-05T12:17:12Z",
        "updated_at": "2016-12-05T12:17:45Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/215#discussion_r90853470",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/215",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90853470"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/215#discussion_r90853470"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/215"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90855236",
        "pull_request_review_id": 11368704,
        "id": 90855236,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwODU1MjM2",
        "diff_hunk": "@@ -28,12 +28,12 @@ The Hub Framework requires you to link with Apple's `SystemConfiguration` framew\n \n Each application using the Hub Framework will have one instance of the `HUBManager` class, which manages an instance of the framework. It\u2019s recommended that you create this object early in your application\u2019s lifecycle and keep it somewhere accessible - for example in your `AppDelegate`.\n \n-In order to create a `HUBManager` instance, you need to supply implementations of the following 2 protocols:\n+There are a few different ways to setup `HUBManager`, each providing different levels of customizability. The simplest way is to use the defaults, and just supply the following two parameters:\n \n-- `HUBComponentLayoutManager`: For calculating margins and other layout attributes for components based on their layout traits.\n-- `HUBComponentFallbackHandler`: For providing fallback information in case a component model\u2019s component couldn\u2019t be resolved by the framework.\n+- `componentMargin`: What margin that should be used in between components.\n+- `componentFallbackBlock/Closure`: A block/closure that returns a component to use for fallback, in case a default one couldn't be matched.",
        "path": "documentation/Setup guide.md",
        "position": 10,
        "original_position": 10,
        "commit_id": "42f416202d0314bf67865e5ffcf4fb5ae8e55944",
        "original_commit_id": "42f416202d0314bf67865e5ffcf4fb5ae8e55944",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yeah, true. Wanted to keep things short and sweet here though, since the other guides (and the documentation for components & their factories) go into a lot more detail \ud83d\ude04 ",
        "created_at": "2016-12-05T12:31:01Z",
        "updated_at": "2016-12-05T12:31:01Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/215#discussion_r90855236",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/215",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90855236"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/215#discussion_r90855236"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/215"
            }
        },
        "in_reply_to_id": 90853470
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/91055670",
        "pull_request_review_id": 11565471,
        "id": 91055670,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxMDU1Njcw",
        "diff_hunk": "@@ -56,6 +54,26 @@ class SelectionUITests: UITestCase {\n         // Assert we've navigated away...\n         XCTAssertFalse(app.navigationBars[\"Pretty Pictures\"].exists)\n     }\n+    \n+    func testChildSelectionCancelledOnParentScrolling() {\n+        let app = XCUIApplication()\n+        navigateToPrettyPictures()\n+        \n+        let collectionView = rootCollectionView(for: app)\n+        XCTAssertTrue(collectionView.exists)\n+        \n+        let rootCell = collectionView.children(matching: .cell).element(boundBy: 0)\n+        XCTAssertTrue(rootCell.exists)\n+        \n+        let carouselCellA = rootCell.cells.element(boundBy: 0)\n+        let carouselCellB = rootCell.cells.element(boundBy: 1)\n+        XCTAssertTrue(carouselCellA.exists)\n+        XCTAssertTrue(carouselCellB.exists)\n+        \n+        // Start pressing, then move to the next cell. No selection should happen = we're still in pretty pictures",
        "path": "demo/tests/SelectionUITests.swift",
        "position": null,
        "original_position": 50,
        "commit_id": "aa75a13e6fe16714fab5ee892970507947f2e4e9",
        "original_commit_id": "2e4f6e519409ee1e0389a9277ea1b12d84d7f1aa",
        "user": {
            "login": "krris",
            "id": 1786612,
            "node_id": "MDQ6VXNlcjE3ODY2MTI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1786612?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krris",
            "html_url": "https://github.com/krris",
            "followers_url": "https://api.github.com/users/krris/followers",
            "following_url": "https://api.github.com/users/krris/following{/other_user}",
            "gists_url": "https://api.github.com/users/krris/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krris/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krris/subscriptions",
            "organizations_url": "https://api.github.com/users/krris/orgs",
            "repos_url": "https://api.github.com/users/krris/repos",
            "events_url": "https://api.github.com/users/krris/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krris/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Nice test case \ud83d\udc4d ",
        "created_at": "2016-12-06T11:04:10Z",
        "updated_at": "2016-12-06T11:59:31Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/216#discussion_r91055670",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/216",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/91055670"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/216#discussion_r91055670"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/216"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90462332",
        "pull_request_review_id": 10980315,
        "id": 90462332,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwNDYyMzMy",
        "diff_hunk": "@@ -708,19 +706,16 @@ - (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cell\n     \n     HUBComponentCollectionViewCell * const cell = [collectionView dequeueReusableCellWithReuseIdentifier:cellReuseIdentifier\n                                                                                             forIndexPath:indexPath];\n-    \n-    if (cell.component == nil) {\n-        HUBComponentWrapper * const componentWrapper = [self.componentReusePool componentWrapperForModel:componentModel\n-                                                                                                delegate:self\n-                                                                                                  parent:nil];\n-        \n-        self.componentWrappersByCellIdentifier[cell.identifier] = componentWrapper;\n-        cell.component = componentWrapper;\n-        [componentWrapper viewDidMoveToSuperview:cell];\n-        [self didAddComponentWrapper:componentWrapper];\n-    }\n-    \n-    HUBComponentWrapper * const componentWrapper = [self componentWrapperFromCell:cell];\n+\n+    HUBComponentWrapper * const componentWrapper = [self.componentReusePool componentWrapperForModel:componentModel\n+                                                                                            delegate:self\n+                                                                                              parent:nil];\n+\n+    self.componentWrappersByCellIdentifier[cell.identifier] = componentWrapper;",
        "path": "sources/HUBViewController.m",
        "position": 33,
        "original_position": 33,
        "commit_id": "ad82924cc8fbeb22e9aa9ff10b3686a56c34b97e",
        "original_commit_id": "8e1f896eaf18de8ab2064b21ea9c4906abdd5f1e",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Are we ever clearing this up? That is, before we assign a new wrapper to the cell, we should do:\r\n```\r\nself.componentWrappersByCellIdentifier[cell.identifier] = nil;\r\n```",
        "created_at": "2016-12-01T14:56:30Z",
        "updated_at": "2016-12-07T09:26:47Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/206#discussion_r90462332",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/206",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90462332"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/206#discussion_r90462332"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/206"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90464715",
        "pull_request_review_id": 10982733,
        "id": 90464715,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwNDY0NzE1",
        "diff_hunk": "@@ -708,19 +706,16 @@ - (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cell\n     \n     HUBComponentCollectionViewCell * const cell = [collectionView dequeueReusableCellWithReuseIdentifier:cellReuseIdentifier\n                                                                                             forIndexPath:indexPath];\n-    \n-    if (cell.component == nil) {\n-        HUBComponentWrapper * const componentWrapper = [self.componentReusePool componentWrapperForModel:componentModel\n-                                                                                                delegate:self\n-                                                                                                  parent:nil];\n-        \n-        self.componentWrappersByCellIdentifier[cell.identifier] = componentWrapper;\n-        cell.component = componentWrapper;\n-        [componentWrapper viewDidMoveToSuperview:cell];\n-        [self didAddComponentWrapper:componentWrapper];\n-    }\n-    \n-    HUBComponentWrapper * const componentWrapper = [self componentWrapperFromCell:cell];\n+\n+    HUBComponentWrapper * const componentWrapper = [self.componentReusePool componentWrapperForModel:componentModel\n+                                                                                            delegate:self\n+                                                                                              parent:nil];\n+\n+    self.componentWrappersByCellIdentifier[cell.identifier] = componentWrapper;",
        "path": "sources/HUBViewController.m",
        "position": 33,
        "original_position": 33,
        "commit_id": "ad82924cc8fbeb22e9aa9ff10b3686a56c34b97e",
        "original_commit_id": "8e1f896eaf18de8ab2064b21ea9c4906abdd5f1e",
        "user": {
            "login": "mvlasieva",
            "id": 13484496,
            "node_id": "MDQ6VXNlcjEzNDg0NDk2",
            "avatar_url": "https://avatars1.githubusercontent.com/u/13484496?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mvlasieva",
            "html_url": "https://github.com/mvlasieva",
            "followers_url": "https://api.github.com/users/mvlasieva/followers",
            "following_url": "https://api.github.com/users/mvlasieva/following{/other_user}",
            "gists_url": "https://api.github.com/users/mvlasieva/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mvlasieva/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mvlasieva/subscriptions",
            "organizations_url": "https://api.github.com/users/mvlasieva/orgs",
            "repos_url": "https://api.github.com/users/mvlasieva/repos",
            "events_url": "https://api.github.com/users/mvlasieva/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mvlasieva/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Sorry, I don't get it. What is the point of removing object from the dictionary right before setting a new object for the same key?",
        "created_at": "2016-12-01T15:07:55Z",
        "updated_at": "2016-12-07T09:26:47Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/206#discussion_r90464715",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/206",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90464715"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/206#discussion_r90464715"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/206"
            }
        },
        "in_reply_to_id": 90462332
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90478457",
        "pull_request_review_id": 10997065,
        "id": 90478457,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwNDc4NDU3",
        "diff_hunk": "@@ -708,19 +706,16 @@ - (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cell\n     \n     HUBComponentCollectionViewCell * const cell = [collectionView dequeueReusableCellWithReuseIdentifier:cellReuseIdentifier\n                                                                                             forIndexPath:indexPath];\n-    \n-    if (cell.component == nil) {\n-        HUBComponentWrapper * const componentWrapper = [self.componentReusePool componentWrapperForModel:componentModel\n-                                                                                                delegate:self\n-                                                                                                  parent:nil];\n-        \n-        self.componentWrappersByCellIdentifier[cell.identifier] = componentWrapper;\n-        cell.component = componentWrapper;\n-        [componentWrapper viewDidMoveToSuperview:cell];\n-        [self didAddComponentWrapper:componentWrapper];\n-    }\n-    \n-    HUBComponentWrapper * const componentWrapper = [self componentWrapperFromCell:cell];\n+\n+    HUBComponentWrapper * const componentWrapper = [self.componentReusePool componentWrapperForModel:componentModel\n+                                                                                            delegate:self\n+                                                                                              parent:nil];\n+\n+    self.componentWrappersByCellIdentifier[cell.identifier] = componentWrapper;",
        "path": "sources/HUBViewController.m",
        "position": 33,
        "original_position": 33,
        "commit_id": "ad82924cc8fbeb22e9aa9ff10b3686a56c34b97e",
        "original_commit_id": "8e1f896eaf18de8ab2064b21ea9c4906abdd5f1e",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You are completely right, sorry - I was confused \ud83d\ude06 ",
        "created_at": "2016-12-01T16:07:46Z",
        "updated_at": "2016-12-07T09:26:47Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/206#discussion_r90478457",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/206",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90478457"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/206#discussion_r90478457"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/206"
            }
        },
        "in_reply_to_id": 90462332
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/91101592",
        "pull_request_review_id": 11611336,
        "id": 91101592,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxMTAxNTky",
        "diff_hunk": "@@ -0,0 +1,24 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n+<plist version=\"1.0\">\n+<dict>\n+\t<key>CFBundleDevelopmentRegion</key>\n+\t<string>en</string>\n+\t<key>CFBundleExecutable</key>\n+\t<string>$(EXECUTABLE_NAME)</string>\n+\t<key>CFBundleIdentifier</key>\n+\t<string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>\n+\t<key>CFBundleInfoDictionaryVersion</key>\n+\t<string>6.0</string>\n+\t<key>CFBundleName</key>\n+\t<string>$(PRODUCT_NAME)</string>\n+\t<key>CFBundlePackageType</key>\n+\t<string>FMWK</string>\n+\t<key>CFBundleShortVersionString</key>\n+\t<string>1.0</string>",
        "path": "sources/Info.plist",
        "position": 18,
        "original_position": 18,
        "commit_id": "a66c52781452c5ecf2dd38590031ffcc7fea25e3",
        "original_commit_id": "eb9ccb6d1d3aad2eae27cb5f016736d8bd0ebd96",
        "user": {
            "login": "8W9aG",
            "id": 2834638,
            "node_id": "MDQ6VXNlcjI4MzQ2Mzg=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/2834638?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/8W9aG",
            "html_url": "https://github.com/8W9aG",
            "followers_url": "https://api.github.com/users/8W9aG/followers",
            "following_url": "https://api.github.com/users/8W9aG/following{/other_user}",
            "gists_url": "https://api.github.com/users/8W9aG/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/8W9aG/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/8W9aG/subscriptions",
            "organizations_url": "https://api.github.com/users/8W9aG/orgs",
            "repos_url": "https://api.github.com/users/8W9aG/repos",
            "events_url": "https://api.github.com/users/8W9aG/events{/privacy}",
            "received_events_url": "https://api.github.com/users/8W9aG/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Should we make this the current version?",
        "created_at": "2016-12-06T15:32:35Z",
        "updated_at": "2016-12-07T10:44:36Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/219#discussion_r91101592",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/219",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/91101592"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/219#discussion_r91101592"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/219"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/91101922",
        "pull_request_review_id": 11611666,
        "id": 91101922,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxMTAxOTIy",
        "diff_hunk": "@@ -0,0 +1,24 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n+<plist version=\"1.0\">\n+<dict>\n+\t<key>CFBundleDevelopmentRegion</key>\n+\t<string>en</string>\n+\t<key>CFBundleExecutable</key>\n+\t<string>$(EXECUTABLE_NAME)</string>\n+\t<key>CFBundleIdentifier</key>\n+\t<string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>\n+\t<key>CFBundleInfoDictionaryVersion</key>\n+\t<string>6.0</string>\n+\t<key>CFBundleName</key>\n+\t<string>$(PRODUCT_NAME)</string>\n+\t<key>CFBundlePackageType</key>\n+\t<string>FMWK</string>\n+\t<key>CFBundleShortVersionString</key>\n+\t<string>1.0</string>",
        "path": "sources/Info.plist",
        "position": 18,
        "original_position": 18,
        "commit_id": "a66c52781452c5ecf2dd38590031ffcc7fea25e3",
        "original_commit_id": "eb9ccb6d1d3aad2eae27cb5f016736d8bd0ebd96",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yeah that's a good idea. Is there a magic variable for that?",
        "created_at": "2016-12-06T15:33:57Z",
        "updated_at": "2016-12-07T10:44:36Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/219#discussion_r91101922",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/219",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/91101922"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/219#discussion_r91101922"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/219"
            }
        },
        "in_reply_to_id": 91101592
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/91102114",
        "pull_request_review_id": 11611881,
        "id": 91102114,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxMTAyMTE0",
        "diff_hunk": "@@ -0,0 +1,24 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n+<plist version=\"1.0\">\n+<dict>\n+\t<key>CFBundleDevelopmentRegion</key>\n+\t<string>en</string>\n+\t<key>CFBundleExecutable</key>\n+\t<string>$(EXECUTABLE_NAME)</string>\n+\t<key>CFBundleIdentifier</key>\n+\t<string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>\n+\t<key>CFBundleInfoDictionaryVersion</key>\n+\t<string>6.0</string>\n+\t<key>CFBundleName</key>\n+\t<string>$(PRODUCT_NAME)</string>\n+\t<key>CFBundlePackageType</key>\n+\t<string>FMWK</string>\n+\t<key>CFBundleShortVersionString</key>\n+\t<string>1.0</string>",
        "path": "sources/Info.plist",
        "position": 18,
        "original_position": 18,
        "commit_id": "a66c52781452c5ecf2dd38590031ffcc7fea25e3",
        "original_commit_id": "eb9ccb6d1d3aad2eae27cb5f016736d8bd0ebd96",
        "user": {
            "login": "8W9aG",
            "id": 2834638,
            "node_id": "MDQ6VXNlcjI4MzQ2Mzg=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/2834638?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/8W9aG",
            "html_url": "https://github.com/8W9aG",
            "followers_url": "https://api.github.com/users/8W9aG/followers",
            "following_url": "https://api.github.com/users/8W9aG/following{/other_user}",
            "gists_url": "https://api.github.com/users/8W9aG/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/8W9aG/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/8W9aG/subscriptions",
            "organizations_url": "https://api.github.com/users/8W9aG/orgs",
            "repos_url": "https://api.github.com/users/8W9aG/repos",
            "events_url": "https://api.github.com/users/8W9aG/events{/privacy}",
            "received_events_url": "https://api.github.com/users/8W9aG/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Unfortunately I don't think so, in our other frameworks its set manually, but I could absolutely be wrong",
        "created_at": "2016-12-06T15:34:50Z",
        "updated_at": "2016-12-07T10:44:36Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/219#discussion_r91102114",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/219",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/91102114"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/219#discussion_r91102114"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/219"
            }
        },
        "in_reply_to_id": 91101592
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/91108829",
        "pull_request_review_id": 11618543,
        "id": 91108829,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxMTA4ODI5",
        "diff_hunk": "@@ -1473,6 +2161,121 @@\n \t\t\t};\n \t\t\tname = Release;\n \t\t};\n+\t\t8AE6C0051DF6E3110063B2B1 /* Debug */ = {\n+\t\t\tisa = XCBuildConfiguration;\n+\t\t\tbuildSettings = {",
        "path": "HubFramework.xcodeproj/project.pbxproj",
        "position": 831,
        "original_position": 831,
        "commit_id": "a66c52781452c5ecf2dd38590031ffcc7fea25e3",
        "original_commit_id": "eb9ccb6d1d3aad2eae27cb5f016736d8bd0ebd96",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "All of these should preferably live in the, or another, xcconfig file. Since our spotify_os file is a bit\u2026 unwieldy\u2026 we can do this change in a subsequent PR. It would basically be nice to split it up. Or use a [better set of configs](https://github.com/jspahrsummers/xcconfigs) for the framework, live and demo targets. I\u2019ll take that task.",
        "created_at": "2016-12-06T16:02:32Z",
        "updated_at": "2016-12-07T10:44:36Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/219#discussion_r91108829",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/219",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/91108829"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/219#discussion_r91108829"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/219"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/91109316",
        "pull_request_review_id": 11618543,
        "id": 91109316,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxMTA5MzE2",
        "diff_hunk": "@@ -1473,6 +2161,121 @@\n \t\t\t};\n \t\t\tname = Release;\n \t\t};\n+\t\t8AE6C0051DF6E3110063B2B1 /* Debug */ = {\n+\t\t\tisa = XCBuildConfiguration;\n+\t\t\tbuildSettings = {\n+\t\t\t\tALWAYS_SEARCH_USER_PATHS = NO;\n+\t\t\t\tCLANG_ANALYZER_NONNULL = YES;\n+\t\t\t\tCLANG_CXX_LANGUAGE_STANDARD = \"gnu++0x\";\n+\t\t\t\tCLANG_CXX_LIBRARY = \"libc++\";\n+\t\t\t\tCLANG_ENABLE_MODULES = YES;\n+\t\t\t\tCLANG_ENABLE_OBJC_ARC = YES;\n+\t\t\t\tCLANG_WARN_BOOL_CONVERSION = YES;\n+\t\t\t\tCLANG_WARN_CONSTANT_CONVERSION = YES;\n+\t\t\t\tCLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;\n+\t\t\t\tCLANG_WARN_DOCUMENTATION_COMMENTS = YES;\n+\t\t\t\tCLANG_WARN_EMPTY_BODY = YES;\n+\t\t\t\tCLANG_WARN_ENUM_CONVERSION = YES;\n+\t\t\t\tCLANG_WARN_INFINITE_RECURSION = YES;\n+\t\t\t\tCLANG_WARN_INT_CONVERSION = YES;\n+\t\t\t\tCLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;\n+\t\t\t\tCLANG_WARN_SUSPICIOUS_MOVES = YES;\n+\t\t\t\tCLANG_WARN_UNREACHABLE_CODE = YES;\n+\t\t\t\tCLANG_WARN__DUPLICATE_METHOD_MATCH = YES;\n+\t\t\t\tCODE_SIGN_IDENTITY = \"\";\n+\t\t\t\tCOPY_PHASE_STRIP = NO;\n+\t\t\t\tCURRENT_PROJECT_VERSION = 1;\n+\t\t\t\tDEBUG_INFORMATION_FORMAT = dwarf;\n+\t\t\t\tDEFINES_MODULE = YES;\n+\t\t\t\tDYLIB_COMPATIBILITY_VERSION = 1;\n+\t\t\t\tDYLIB_CURRENT_VERSION = 1;\n+\t\t\t\tDYLIB_INSTALL_NAME_BASE = \"@rpath\";\n+\t\t\t\tENABLE_STRICT_OBJC_MSGSEND = YES;\n+\t\t\t\tENABLE_TESTABILITY = YES;\n+\t\t\t\tGCC_C_LANGUAGE_STANDARD = gnu99;",
        "path": "HubFramework.xcodeproj/project.pbxproj",
        "position": null,
        "original_position": 860,
        "commit_id": "a66c52781452c5ecf2dd38590031ffcc7fea25e3",
        "original_commit_id": "eb9ccb6d1d3aad2eae27cb5f016736d8bd0ebd96",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "We use `gnu11`.",
        "created_at": "2016-12-06T16:04:39Z",
        "updated_at": "2016-12-07T10:44:36Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/219#discussion_r91109316",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/219",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/91109316"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/219#discussion_r91109316"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/219"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/91109395",
        "pull_request_review_id": 11618543,
        "id": 91109395,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxMTA5Mzk1",
        "diff_hunk": "@@ -1473,6 +2161,121 @@\n \t\t\t};\n \t\t\tname = Release;\n \t\t};\n+\t\t8AE6C0051DF6E3110063B2B1 /* Debug */ = {\n+\t\t\tisa = XCBuildConfiguration;\n+\t\t\tbuildSettings = {\n+\t\t\t\tALWAYS_SEARCH_USER_PATHS = NO;\n+\t\t\t\tCLANG_ANALYZER_NONNULL = YES;\n+\t\t\t\tCLANG_CXX_LANGUAGE_STANDARD = \"gnu++0x\";\n+\t\t\t\tCLANG_CXX_LIBRARY = \"libc++\";\n+\t\t\t\tCLANG_ENABLE_MODULES = YES;\n+\t\t\t\tCLANG_ENABLE_OBJC_ARC = YES;\n+\t\t\t\tCLANG_WARN_BOOL_CONVERSION = YES;\n+\t\t\t\tCLANG_WARN_CONSTANT_CONVERSION = YES;\n+\t\t\t\tCLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;\n+\t\t\t\tCLANG_WARN_DOCUMENTATION_COMMENTS = YES;\n+\t\t\t\tCLANG_WARN_EMPTY_BODY = YES;\n+\t\t\t\tCLANG_WARN_ENUM_CONVERSION = YES;\n+\t\t\t\tCLANG_WARN_INFINITE_RECURSION = YES;\n+\t\t\t\tCLANG_WARN_INT_CONVERSION = YES;\n+\t\t\t\tCLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;\n+\t\t\t\tCLANG_WARN_SUSPICIOUS_MOVES = YES;\n+\t\t\t\tCLANG_WARN_UNREACHABLE_CODE = YES;\n+\t\t\t\tCLANG_WARN__DUPLICATE_METHOD_MATCH = YES;\n+\t\t\t\tCODE_SIGN_IDENTITY = \"\";\n+\t\t\t\tCOPY_PHASE_STRIP = NO;\n+\t\t\t\tCURRENT_PROJECT_VERSION = 1;\n+\t\t\t\tDEBUG_INFORMATION_FORMAT = dwarf;\n+\t\t\t\tDEFINES_MODULE = YES;\n+\t\t\t\tDYLIB_COMPATIBILITY_VERSION = 1;\n+\t\t\t\tDYLIB_CURRENT_VERSION = 1;\n+\t\t\t\tDYLIB_INSTALL_NAME_BASE = \"@rpath\";\n+\t\t\t\tENABLE_STRICT_OBJC_MSGSEND = YES;\n+\t\t\t\tENABLE_TESTABILITY = YES;\n+\t\t\t\tGCC_C_LANGUAGE_STANDARD = gnu99;\n+\t\t\t\tGCC_NO_COMMON_BLOCKS = YES;\n+\t\t\t\tGCC_OPTIMIZATION_LEVEL = 0;\n+\t\t\t\tGCC_PREPROCESSOR_DEFINITIONS = (\n+\t\t\t\t\t\"DEBUG=1\",\n+\t\t\t\t\t\"$(inherited)\",\n+\t\t\t\t);\n+\t\t\t\tGCC_WARN_64_TO_32_BIT_CONVERSION = YES;\n+\t\t\t\tGCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;\n+\t\t\t\tGCC_WARN_UNDECLARED_SELECTOR = YES;\n+\t\t\t\tGCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;\n+\t\t\t\tGCC_WARN_UNUSED_FUNCTION = YES;\n+\t\t\t\tGCC_WARN_UNUSED_VARIABLE = YES;\n+\t\t\t\tINFOPLIST_FILE = \"$(SRCROOT)/sources/Info.plist\";\n+\t\t\t\tINSTALL_PATH = \"$(LOCAL_LIBRARY_DIR)/Frameworks\";\n+\t\t\t\tIPHONEOS_DEPLOYMENT_TARGET = 10.1;",
        "path": "HubFramework.xcodeproj/project.pbxproj",
        "position": null,
        "original_position": 875,
        "commit_id": "a66c52781452c5ecf2dd38590031ffcc7fea25e3",
        "original_commit_id": "eb9ccb6d1d3aad2eae27cb5f016736d8bd0ebd96",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The deployment target should be iOS 8.",
        "created_at": "2016-12-06T16:04:57Z",
        "updated_at": "2016-12-07T10:44:36Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/219#discussion_r91109395",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/219",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/91109395"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/219#discussion_r91109395"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/219"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/91109470",
        "pull_request_review_id": 11618543,
        "id": 91109470,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxMTA5NDcw",
        "diff_hunk": "@@ -1473,6 +2161,121 @@\n \t\t\t};\n \t\t\tname = Release;\n \t\t};\n+\t\t8AE6C0051DF6E3110063B2B1 /* Debug */ = {\n+\t\t\tisa = XCBuildConfiguration;\n+\t\t\tbuildSettings = {\n+\t\t\t\tALWAYS_SEARCH_USER_PATHS = NO;\n+\t\t\t\tCLANG_ANALYZER_NONNULL = YES;\n+\t\t\t\tCLANG_CXX_LANGUAGE_STANDARD = \"gnu++0x\";\n+\t\t\t\tCLANG_CXX_LIBRARY = \"libc++\";\n+\t\t\t\tCLANG_ENABLE_MODULES = YES;\n+\t\t\t\tCLANG_ENABLE_OBJC_ARC = YES;\n+\t\t\t\tCLANG_WARN_BOOL_CONVERSION = YES;\n+\t\t\t\tCLANG_WARN_CONSTANT_CONVERSION = YES;\n+\t\t\t\tCLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;\n+\t\t\t\tCLANG_WARN_DOCUMENTATION_COMMENTS = YES;\n+\t\t\t\tCLANG_WARN_EMPTY_BODY = YES;\n+\t\t\t\tCLANG_WARN_ENUM_CONVERSION = YES;\n+\t\t\t\tCLANG_WARN_INFINITE_RECURSION = YES;\n+\t\t\t\tCLANG_WARN_INT_CONVERSION = YES;\n+\t\t\t\tCLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;\n+\t\t\t\tCLANG_WARN_SUSPICIOUS_MOVES = YES;\n+\t\t\t\tCLANG_WARN_UNREACHABLE_CODE = YES;\n+\t\t\t\tCLANG_WARN__DUPLICATE_METHOD_MATCH = YES;\n+\t\t\t\tCODE_SIGN_IDENTITY = \"\";\n+\t\t\t\tCOPY_PHASE_STRIP = NO;\n+\t\t\t\tCURRENT_PROJECT_VERSION = 1;\n+\t\t\t\tDEBUG_INFORMATION_FORMAT = dwarf;\n+\t\t\t\tDEFINES_MODULE = YES;\n+\t\t\t\tDYLIB_COMPATIBILITY_VERSION = 1;\n+\t\t\t\tDYLIB_CURRENT_VERSION = 1;\n+\t\t\t\tDYLIB_INSTALL_NAME_BASE = \"@rpath\";\n+\t\t\t\tENABLE_STRICT_OBJC_MSGSEND = YES;\n+\t\t\t\tENABLE_TESTABILITY = YES;\n+\t\t\t\tGCC_C_LANGUAGE_STANDARD = gnu99;\n+\t\t\t\tGCC_NO_COMMON_BLOCKS = YES;\n+\t\t\t\tGCC_OPTIMIZATION_LEVEL = 0;\n+\t\t\t\tGCC_PREPROCESSOR_DEFINITIONS = (\n+\t\t\t\t\t\"DEBUG=1\",\n+\t\t\t\t\t\"$(inherited)\",\n+\t\t\t\t);\n+\t\t\t\tGCC_WARN_64_TO_32_BIT_CONVERSION = YES;\n+\t\t\t\tGCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;\n+\t\t\t\tGCC_WARN_UNDECLARED_SELECTOR = YES;\n+\t\t\t\tGCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;\n+\t\t\t\tGCC_WARN_UNUSED_FUNCTION = YES;\n+\t\t\t\tGCC_WARN_UNUSED_VARIABLE = YES;\n+\t\t\t\tINFOPLIST_FILE = \"$(SRCROOT)/sources/Info.plist\";\n+\t\t\t\tINSTALL_PATH = \"$(LOCAL_LIBRARY_DIR)/Frameworks\";\n+\t\t\t\tIPHONEOS_DEPLOYMENT_TARGET = 10.1;\n+\t\t\t\tLD_RUNPATH_SEARCH_PATHS = \"$(inherited) @executable_path/Frameworks @loader_path/Frameworks\";\n+\t\t\t\tONLY_ACTIVE_ARCH = YES;\n+\t\t\t\tPRODUCT_BUNDLE_IDENTIFIER = \"com.spotify.HubFramework-iOS\";\n+\t\t\t\tPRODUCT_NAME = HubFramework;\n+\t\t\t\tSKIP_INSTALL = YES;\n+\t\t\t\tSWIFT_ACTIVE_COMPILATION_CONDITIONS = DEBUG;\n+\t\t\t\tSWIFT_OPTIMIZATION_LEVEL = \"-Onone\";\n+\t\t\t\tSWIFT_VERSION = 3.0;",
        "path": "HubFramework.xcodeproj/project.pbxproj",
        "position": null,
        "original_position": 883,
        "commit_id": "a66c52781452c5ecf2dd38590031ffcc7fea25e3",
        "original_commit_id": "eb9ccb6d1d3aad2eae27cb5f016736d8bd0ebd96",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Change to `3.0.1`, otherwise we get \u201cuse legacy version\u201d",
        "created_at": "2016-12-06T16:05:20Z",
        "updated_at": "2016-12-07T10:44:36Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/219#discussion_r91109470",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/219",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/91109470"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/219#discussion_r91109470"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/219"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/91109800",
        "pull_request_review_id": 11618543,
        "id": 91109800,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxMTA5ODAw",
        "diff_hunk": "@@ -31,6 +31,9 @@ NS_ASSUME_NONNULL_BEGIN\n /// Concrete implementation of the `HUBComponentImageDataBuilder` API\n @interface HUBComponentImageDataBuilderImplementation : NSObject <HUBComponentImageDataBuilder, NSCopying>\n \n+/// Any specific bundle that the builder should use to load local images (defaults to the main bundle)\n+@property (nonatomic, weak, nullable) NSBundle *bundle;",
        "path": "sources/HUBComponentImageDataBuilderImplementation.h",
        "position": 5,
        "original_position": 5,
        "commit_id": "a66c52781452c5ecf2dd38590031ffcc7fea25e3",
        "original_commit_id": "eb9ccb6d1d3aad2eae27cb5f016736d8bd0ebd96",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Any reason this is `weak`?",
        "created_at": "2016-12-06T16:06:42Z",
        "updated_at": "2016-12-07T10:44:36Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/219#discussion_r91109800",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/219",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/91109800"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/219#discussion_r91109800"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/219"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/91110074",
        "pull_request_review_id": 11618543,
        "id": 91110074,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxMTEwMDc0",
        "diff_hunk": "@@ -49,6 +49,7 @@ - (void)setUp\n                                                                                       iconImageResolver:iconImageResolver];\n     \n     self.builder = [[HUBComponentImageDataBuilderImplementation alloc] initWithJSONSchema:JSONSchema iconImageResolver:iconImageResolver];\n+    self.builder.bundle = [NSBundle bundleForClass:[self class]];",
        "path": "tests/HUBComponentImageDataBuilderTests.m",
        "position": null,
        "original_position": 4,
        "commit_id": "a66c52781452c5ecf2dd38590031ffcc7fea25e3",
        "original_commit_id": "eb9ccb6d1d3aad2eae27cb5f016736d8bd0ebd96",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Nit: `class` is a property on `NSObject` instances. As such dot-notation should be used according to our style guide.",
        "created_at": "2016-12-06T16:07:52Z",
        "updated_at": "2016-12-07T10:44:36Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/219#discussion_r91110074",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/219",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/91110074"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/219#discussion_r91110074"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/219"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/91110753",
        "pull_request_review_id": 11620464,
        "id": 91110753,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxMTEwNzUz",
        "diff_hunk": "@@ -31,6 +31,9 @@ NS_ASSUME_NONNULL_BEGIN\n /// Concrete implementation of the `HUBComponentImageDataBuilder` API\n @interface HUBComponentImageDataBuilderImplementation : NSObject <HUBComponentImageDataBuilder, NSCopying>\n \n+/// Any specific bundle that the builder should use to load local images (defaults to the main bundle)\n+@property (nonatomic, weak, nullable) NSBundle *bundle;",
        "path": "sources/HUBComponentImageDataBuilderImplementation.h",
        "position": 5,
        "original_position": 5,
        "commit_id": "a66c52781452c5ecf2dd38590031ffcc7fea25e3",
        "original_commit_id": "eb9ccb6d1d3aad2eae27cb5f016736d8bd0ebd96",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Didn't feel right for the image data builder to retain the bundle, since it shouldn't assume any ownership over it.",
        "created_at": "2016-12-06T16:10:38Z",
        "updated_at": "2016-12-07T10:44:36Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/219#discussion_r91110753",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/219",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/91110753"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/219#discussion_r91110753"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/219"
            }
        },
        "in_reply_to_id": 91109800
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/91110786",
        "pull_request_review_id": 11620510,
        "id": 91110786,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxMTEwNzg2",
        "diff_hunk": "@@ -49,6 +49,7 @@ - (void)setUp\n                                                                                       iconImageResolver:iconImageResolver];\n     \n     self.builder = [[HUBComponentImageDataBuilderImplementation alloc] initWithJSONSchema:JSONSchema iconImageResolver:iconImageResolver];\n+    self.builder.bundle = [NSBundle bundleForClass:[self class]];",
        "path": "tests/HUBComponentImageDataBuilderTests.m",
        "position": null,
        "original_position": 4,
        "commit_id": "a66c52781452c5ecf2dd38590031ffcc7fea25e3",
        "original_commit_id": "eb9ccb6d1d3aad2eae27cb5f016736d8bd0ebd96",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Aha, will fix!",
        "created_at": "2016-12-06T16:10:49Z",
        "updated_at": "2016-12-07T10:44:36Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/219#discussion_r91110786",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/219",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/91110786"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/219#discussion_r91110786"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/219"
            }
        },
        "in_reply_to_id": 91110074
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/91111031",
        "pull_request_review_id": 11620776,
        "id": 91111031,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxMTExMDMx",
        "diff_hunk": "@@ -1473,6 +2161,121 @@\n \t\t\t};\n \t\t\tname = Release;\n \t\t};\n+\t\t8AE6C0051DF6E3110063B2B1 /* Debug */ = {\n+\t\t\tisa = XCBuildConfiguration;\n+\t\t\tbuildSettings = {",
        "path": "HubFramework.xcodeproj/project.pbxproj",
        "position": 831,
        "original_position": 831,
        "commit_id": "a66c52781452c5ecf2dd38590031ffcc7fea25e3",
        "original_commit_id": "eb9ccb6d1d3aad2eae27cb5f016736d8bd0ebd96",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ok awesome \ud83d\udc4d ",
        "created_at": "2016-12-06T16:11:59Z",
        "updated_at": "2016-12-07T10:44:36Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/219#discussion_r91111031",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/219",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/91111031"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/219#discussion_r91111031"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/219"
            }
        },
        "in_reply_to_id": 91108829
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/91120106",
        "pull_request_review_id": 11629756,
        "id": 91120106,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxMTIwMTA2",
        "diff_hunk": "@@ -31,6 +31,9 @@ NS_ASSUME_NONNULL_BEGIN\n /// Concrete implementation of the `HUBComponentImageDataBuilder` API\n @interface HUBComponentImageDataBuilderImplementation : NSObject <HUBComponentImageDataBuilder, NSCopying>\n \n+/// Any specific bundle that the builder should use to load local images (defaults to the main bundle)\n+@property (nonatomic, weak, nullable) NSBundle *bundle;",
        "path": "sources/HUBComponentImageDataBuilderImplementation.h",
        "position": 5,
        "original_position": 5,
        "commit_id": "a66c52781452c5ecf2dd38590031ffcc7fea25e3",
        "original_commit_id": "eb9ccb6d1d3aad2eae27cb5f016736d8bd0ebd96",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Well that means the user of the framework will have to retain the `NSBundle` object on behalf of the framework. Which makes it a bit more hairy and tricky to use. Since there\u2019s no guarantee that the system will retain it for you.",
        "created_at": "2016-12-06T16:50:03Z",
        "updated_at": "2016-12-07T10:44:36Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/219#discussion_r91120106",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/219",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/91120106"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/219#discussion_r91120106"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/219"
            }
        },
        "in_reply_to_id": 91109800
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/91120146",
        "pull_request_review_id": 11629797,
        "id": 91120146,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxMTIwMTQ2",
        "diff_hunk": "@@ -31,6 +31,9 @@ NS_ASSUME_NONNULL_BEGIN\n /// Concrete implementation of the `HUBComponentImageDataBuilder` API\n @interface HUBComponentImageDataBuilderImplementation : NSObject <HUBComponentImageDataBuilder, NSCopying>\n \n+/// Any specific bundle that the builder should use to load local images (defaults to the main bundle)\n+@property (nonatomic, weak, nullable) NSBundle *bundle;",
        "path": "sources/HUBComponentImageDataBuilderImplementation.h",
        "position": 5,
        "original_position": 5,
        "commit_id": "a66c52781452c5ecf2dd38590031ffcc7fea25e3",
        "original_commit_id": "eb9ccb6d1d3aad2eae27cb5f016736d8bd0ebd96",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@JohnSundell \u261d\ufe0f ",
        "created_at": "2016-12-06T16:50:14Z",
        "updated_at": "2016-12-07T10:44:36Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/219#discussion_r91120146",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/219",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/91120146"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/219#discussion_r91120146"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/219"
            }
        },
        "in_reply_to_id": 91109800
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/91120864",
        "pull_request_review_id": 11630464,
        "id": 91120864,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxMTIwODY0",
        "diff_hunk": "@@ -31,6 +31,9 @@ NS_ASSUME_NONNULL_BEGIN\n /// Concrete implementation of the `HUBComponentImageDataBuilder` API\n @interface HUBComponentImageDataBuilderImplementation : NSObject <HUBComponentImageDataBuilder, NSCopying>\n \n+/// Any specific bundle that the builder should use to load local images (defaults to the main bundle)\n+@property (nonatomic, weak, nullable) NSBundle *bundle;",
        "path": "sources/HUBComponentImageDataBuilderImplementation.h",
        "position": 5,
        "original_position": 5,
        "commit_id": "a66c52781452c5ecf2dd38590031ffcc7fea25e3",
        "original_commit_id": "eb9ccb6d1d3aad2eae27cb5f016736d8bd0ebd96",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It's not part of the public API, it's just a utility for testing. See how it's in the implementation class' header \ud83d\ude42 ",
        "created_at": "2016-12-06T16:52:56Z",
        "updated_at": "2016-12-07T10:44:36Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/219#discussion_r91120864",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/219",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/91120864"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/219#discussion_r91120864"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/219"
            }
        },
        "in_reply_to_id": 91109800
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/91120960",
        "pull_request_review_id": 11630558,
        "id": 91120960,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxMTIwOTYw",
        "diff_hunk": "@@ -31,6 +31,9 @@ NS_ASSUME_NONNULL_BEGIN\n /// Concrete implementation of the `HUBComponentImageDataBuilder` API\n @interface HUBComponentImageDataBuilderImplementation : NSObject <HUBComponentImageDataBuilder, NSCopying>\n \n+/// Any specific bundle that the builder should use to load local images (defaults to the main bundle)\n+@property (nonatomic, weak, nullable) NSBundle *bundle;",
        "path": "sources/HUBComponentImageDataBuilderImplementation.h",
        "position": 5,
        "original_position": 5,
        "commit_id": "a66c52781452c5ecf2dd38590031ffcc7fea25e3",
        "original_commit_id": "eb9ccb6d1d3aad2eae27cb5f016736d8bd0ebd96",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@JohnSundell Okay.",
        "created_at": "2016-12-06T16:53:22Z",
        "updated_at": "2016-12-07T10:44:36Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/219#discussion_r91120960",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/219",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/91120960"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/219#discussion_r91120960"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/219"
            }
        },
        "in_reply_to_id": 91109800
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90552045",
        "pull_request_review_id": 11071907,
        "id": 90552045,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwNTUyMDQ1",
        "diff_hunk": "@@ -24,6 +24,29 @@\n \n NS_ASSUME_NONNULL_BEGIN\n \n+@class HUBViewModelDiff;\n+\n+typedef HUBViewModelDiff *(HUBDiffAlgorithm)(id<HUBViewModel>, id<HUBViewModel>);",
        "path": "sources/HUBViewModelDiff.h",
        "position": null,
        "original_position": 6,
        "commit_id": "11c41eb0200161d5715a37e0c0844df27f44c48e",
        "original_commit_id": "714185b26b14f1b17060e48f7c4bfc26f983e47c",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Document please",
        "created_at": "2016-12-01T22:31:25Z",
        "updated_at": "2016-12-09T09:46:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/208#discussion_r90552045",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/208",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90552045"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/208#discussion_r90552045"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/208"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90552601",
        "pull_request_review_id": 11071907,
        "id": 90552601,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwNTUyNjAx",
        "diff_hunk": "@@ -24,6 +24,29 @@\n \n NS_ASSUME_NONNULL_BEGIN\n \n+@class HUBViewModelDiff;\n+\n+typedef HUBViewModelDiff *(HUBDiffAlgorithm)(id<HUBViewModel>, id<HUBViewModel>);",
        "path": "sources/HUBViewModelDiff.h",
        "position": null,
        "original_position": 6,
        "commit_id": "11c41eb0200161d5715a37e0c0844df27f44c48e",
        "original_commit_id": "714185b26b14f1b17060e48f7c4bfc26f983e47c",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "How come this is implemented as (_long_) C functions? Did you consider making this into a protocol instead? Such as:\r\n```objc\r\n@protocol HUBDiffAlgorithm\r\n- (HUBViewModelDiff *)differenceGoingFromViewModel:(id<HUBViewModel>)fromViewModel\r\n                                       toViewModel:(id<HUBViewModel>)toViewModel;\r\n@end\r\n```\r\n\r\nIt would, imo, allow for more flexibility. For example a `debugName` property could be added allowing the `-debugDescription` method further down to print which algorithm is used. It might also make the code feel less scary for non-C developers.\r\n\r\nNot opposed to using passing function pointers like this. Just interested in your reasoning @Goos.",
        "created_at": "2016-12-01T22:34:49Z",
        "updated_at": "2016-12-09T09:46:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/208#discussion_r90552601",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/208",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90552601"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/208#discussion_r90552601"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/208"
            }
        },
        "in_reply_to_id": 90552045
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90552766",
        "pull_request_review_id": 11071907,
        "id": 90552766,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwNTUyNzY2",
        "diff_hunk": "@@ -52,24 +52,42 @@ - (instancetype)initWithInserts:(NSIndexSet *)inserts\n     return self;\n }\n \n-+ (NSArray<NSString *> *)componentIdentifiersFromViewModel:(id<HUBViewModel>)viewModel\n++ (instancetype)diffFromViewModel:(id<HUBViewModel>)fromViewModel\n+                      toViewModel:(id<HUBViewModel>)toViewModel\n+                        algorithm:(HUBDiffAlgorithm)algorithm\n+{\n+    return algorithm(fromViewModel, toViewModel);",
        "path": "sources/HUBViewModelDiff.m",
        "position": null,
        "original_position": 9,
        "commit_id": "11c41eb0200161d5715a37e0c0844df27f44c48e",
        "original_commit_id": "714185b26b14f1b17060e48f7c4bfc26f983e47c",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "How about asserting that the function pointer isn\u2019t `NULL` first?",
        "created_at": "2016-12-01T22:35:56Z",
        "updated_at": "2016-12-09T09:46:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/208#discussion_r90552766",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/208",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90552766"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/208#discussion_r90552766"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/208"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90553781",
        "pull_request_review_id": 11071907,
        "id": 90553781,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwNTUzNzgx",
        "diff_hunk": "@@ -145,15 +163,234 @@ + (instancetype)diffFromViewModel:(id<HUBViewModel>)fromViewModel\n                                              reloads:[reloads copy]];\n }\n \n-- (NSString *)debugDescription\n+typedef struct {\n+    NSInteger x;\n+    NSInteger y;\n+} HUBDiffPoint;\n+\n+static inline HUBDiffPoint HUBDiffPointMake(NSInteger x, NSInteger y) {\n+    return (HUBDiffPoint){ .x = x, .y = y};\n+}\n+\n+typedef struct {\n+    NSInteger D;\n+    NSInteger k;\n+    NSInteger previousX;\n+    NSInteger nextX;\n+} HUBDiffTraceStep;\n+\n+static inline HUBDiffTraceStep HUBDiffTraceStepMake(NSInteger D, NSInteger k, NSInteger previousX, NSInteger nextX) {\n+    return (HUBDiffTraceStep){ .D = D, .k = k, .previousX = previousX, .nextX = nextX };\n+}\n+\n+typedef NS_ENUM(NSUInteger, HUBDiffTraceType) {\n+    HUBDiffTraceTypeInsert,\n+    HUBDiffTraceTypeDelete,\n+    HUBDiffTraceTypeMatchPoint\n+};\n+\n+@interface HUBDiffTrace : NSObject\n+\n+@property (nonatomic, assign, readonly) HUBDiffPoint from;\n+@property (nonatomic, assign, readonly) HUBDiffPoint to;\n+@property (nonatomic, assign, readonly) NSInteger D;\n+\n+@property (nonatomic, assign, readonly) HUBDiffTraceType type;\n+\n+@end\n+\n+@implementation HUBDiffTrace\n+\n++ (instancetype)nextTraceFromStep:(HUBDiffTraceStep)step\n {\n-    return [NSString stringWithFormat:@\"\\t{\\n\\\n-        deletions: %@\\n\\\n-        insertions: %@\\n\\\n-        reloads: %@\\n\\\n-    \\t}\", self.deletedBodyComponentIndexPaths, self.insertedBodyComponentIndexPaths, self.reloadedBodyComponentIndexPaths];\n+    HUBDiffTraceType type;\n+    if (step.k == -(step.D)) {\n+        type = HUBDiffTraceTypeInsert;\n+    } else if (step.k != step.D) {\n+        if (step.previousX < step.nextX) {\n+            type = HUBDiffTraceTypeInsert;\n+        } else {\n+            type = HUBDiffTraceTypeDelete;\n+        }\n+    } else {\n+        type = HUBDiffTraceTypeDelete;\n+    }\n+    \n+    if (type == HUBDiffTraceTypeInsert) {\n+        NSInteger x = step.nextX;\n+        \n+        return [[self alloc] initWithFromPoint:HUBDiffPointMake(x, x - step.k - 1) toPoint:HUBDiffPointMake(x, x - step.k) D:step.D];\n+    } else {\n+        NSInteger x = step.previousX + 1;\n+\n+        return [[self alloc] initWithFromPoint:HUBDiffPointMake(x - 1, x - step.k) toPoint:HUBDiffPointMake(x, x - step.k) D:step.D];\n+    }\n+}\n+\n+- (instancetype)initWithFromPoint:(HUBDiffPoint)fromPoint toPoint:(HUBDiffPoint)toPoint D:(NSInteger)D",
        "path": "sources/HUBViewModelDiff.m",
        "position": null,
        "original_position": 126,
        "commit_id": "11c41eb0200161d5715a37e0c0844df27f44c48e",
        "original_commit_id": "714185b26b14f1b17060e48f7c4bfc26f983e47c",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "How about naming the `D` parameter `minimumNumberOfChanges` instead? Since that\u2019s what it represents if I understand your API docs further up correctly? Would make the code a bit more readable \ud83d\ude04 ",
        "created_at": "2016-12-01T22:42:23Z",
        "updated_at": "2016-12-09T09:46:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/208#discussion_r90553781",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/208",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90553781"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/208#discussion_r90553781"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/208"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90553908",
        "pull_request_review_id": 11071907,
        "id": 90553908,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwNTUzOTA4",
        "diff_hunk": "@@ -145,15 +163,234 @@ + (instancetype)diffFromViewModel:(id<HUBViewModel>)fromViewModel\n                                              reloads:[reloads copy]];\n }\n \n-- (NSString *)debugDescription\n+typedef struct {\n+    NSInteger x;\n+    NSInteger y;\n+} HUBDiffPoint;\n+\n+static inline HUBDiffPoint HUBDiffPointMake(NSInteger x, NSInteger y) {\n+    return (HUBDiffPoint){ .x = x, .y = y};\n+}\n+\n+typedef struct {\n+    NSInteger D;",
        "path": "sources/HUBViewModelDiff.m",
        "position": null,
        "original_position": 67,
        "commit_id": "11c41eb0200161d5715a37e0c0844df27f44c48e",
        "original_commit_id": "714185b26b14f1b17060e48f7c4bfc26f983e47c",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "How about naming it `minimumNumberOfChanges`? Makes it a bit more readable \ud83d\ude38 ",
        "created_at": "2016-12-01T22:43:21Z",
        "updated_at": "2016-12-09T09:46:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/208#discussion_r90553908",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/208",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90553908"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/208#discussion_r90553908"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/208"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90553932",
        "pull_request_review_id": 11071907,
        "id": 90553932,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwNTUzOTMy",
        "diff_hunk": "@@ -145,15 +163,234 @@ + (instancetype)diffFromViewModel:(id<HUBViewModel>)fromViewModel\n                                              reloads:[reloads copy]];\n }\n \n-- (NSString *)debugDescription\n+typedef struct {\n+    NSInteger x;\n+    NSInteger y;\n+} HUBDiffPoint;\n+\n+static inline HUBDiffPoint HUBDiffPointMake(NSInteger x, NSInteger y) {\n+    return (HUBDiffPoint){ .x = x, .y = y};\n+}\n+\n+typedef struct {\n+    NSInteger D;\n+    NSInteger k;\n+    NSInteger previousX;\n+    NSInteger nextX;\n+} HUBDiffTraceStep;\n+\n+static inline HUBDiffTraceStep HUBDiffTraceStepMake(NSInteger D, NSInteger k, NSInteger previousX, NSInteger nextX) {\n+    return (HUBDiffTraceStep){ .D = D, .k = k, .previousX = previousX, .nextX = nextX };\n+}\n+\n+typedef NS_ENUM(NSUInteger, HUBDiffTraceType) {\n+    HUBDiffTraceTypeInsert,\n+    HUBDiffTraceTypeDelete,\n+    HUBDiffTraceTypeMatchPoint\n+};\n+\n+@interface HUBDiffTrace : NSObject\n+\n+@property (nonatomic, assign, readonly) HUBDiffPoint from;\n+@property (nonatomic, assign, readonly) HUBDiffPoint to;\n+@property (nonatomic, assign, readonly) NSInteger D;",
        "path": "sources/HUBViewModelDiff.m",
        "position": null,
        "original_position": 87,
        "commit_id": "11c41eb0200161d5715a37e0c0844df27f44c48e",
        "original_commit_id": "714185b26b14f1b17060e48f7c4bfc26f983e47c",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "`minimumNumberOfChanges`?",
        "created_at": "2016-12-01T22:43:30Z",
        "updated_at": "2016-12-09T09:46:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/208#discussion_r90553932",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/208",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90553932"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/208#discussion_r90553932"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/208"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90554239",
        "pull_request_review_id": 11071907,
        "id": 90554239,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwNTU0MjM5",
        "diff_hunk": "@@ -145,15 +163,234 @@ + (instancetype)diffFromViewModel:(id<HUBViewModel>)fromViewModel\n                                              reloads:[reloads copy]];\n }\n \n-- (NSString *)debugDescription\n+typedef struct {\n+    NSInteger x;\n+    NSInteger y;\n+} HUBDiffPoint;\n+\n+static inline HUBDiffPoint HUBDiffPointMake(NSInteger x, NSInteger y) {\n+    return (HUBDiffPoint){ .x = x, .y = y};\n+}\n+\n+typedef struct {\n+    NSInteger D;\n+    NSInteger k;\n+    NSInteger previousX;\n+    NSInteger nextX;\n+} HUBDiffTraceStep;\n+\n+static inline HUBDiffTraceStep HUBDiffTraceStepMake(NSInteger D, NSInteger k, NSInteger previousX, NSInteger nextX) {\n+    return (HUBDiffTraceStep){ .D = D, .k = k, .previousX = previousX, .nextX = nextX };\n+}\n+\n+typedef NS_ENUM(NSUInteger, HUBDiffTraceType) {\n+    HUBDiffTraceTypeInsert,\n+    HUBDiffTraceTypeDelete,\n+    HUBDiffTraceTypeMatchPoint\n+};\n+\n+@interface HUBDiffTrace : NSObject\n+\n+@property (nonatomic, assign, readonly) HUBDiffPoint from;\n+@property (nonatomic, assign, readonly) HUBDiffPoint to;\n+@property (nonatomic, assign, readonly) NSInteger D;\n+\n+@property (nonatomic, assign, readonly) HUBDiffTraceType type;\n+\n+@end\n+\n+@implementation HUBDiffTrace\n+\n++ (instancetype)nextTraceFromStep:(HUBDiffTraceStep)step\n {\n-    return [NSString stringWithFormat:@\"\\t{\\n\\\n-        deletions: %@\\n\\\n-        insertions: %@\\n\\\n-        reloads: %@\\n\\\n-    \\t}\", self.deletedBodyComponentIndexPaths, self.insertedBodyComponentIndexPaths, self.reloadedBodyComponentIndexPaths];\n+    HUBDiffTraceType type;\n+    if (step.k == -(step.D)) {\n+        type = HUBDiffTraceTypeInsert;\n+    } else if (step.k != step.D) {\n+        if (step.previousX < step.nextX) {\n+            type = HUBDiffTraceTypeInsert;\n+        } else {\n+            type = HUBDiffTraceTypeDelete;\n+        }\n+    } else {\n+        type = HUBDiffTraceTypeDelete;\n+    }\n+    \n+    if (type == HUBDiffTraceTypeInsert) {\n+        NSInteger x = step.nextX;\n+        \n+        return [[self alloc] initWithFromPoint:HUBDiffPointMake(x, x - step.k - 1) toPoint:HUBDiffPointMake(x, x - step.k) D:step.D];\n+    } else {\n+        NSInteger x = step.previousX + 1;\n+\n+        return [[self alloc] initWithFromPoint:HUBDiffPointMake(x - 1, x - step.k) toPoint:HUBDiffPointMake(x, x - step.k) D:step.D];\n+    }\n+}\n+\n+- (instancetype)initWithFromPoint:(HUBDiffPoint)fromPoint toPoint:(HUBDiffPoint)toPoint D:(NSInteger)D\n+{\n+    self = [super init];\n+    if (self) {\n+        _from = fromPoint;\n+        _to = toPoint;\n+        _D = D;\n+    }\n+    return self;\n+}\n+\n+- (HUBDiffTraceType)type\n+{\n+    if (self.from.x + 1 == self.to.x && self.from.y + 1 == self.to.y) {\n+        return HUBDiffTraceTypeMatchPoint;\n+    } else if (self.from.y < self.to.y) {\n+        return HUBDiffTraceTypeInsert;\n+    } else {\n+        return HUBDiffTraceTypeDelete;\n+    }\n }\n \n @end\n \n+static NSArray<HUBDiffTrace *> *HUBDiffInsertionTracesFromViewModel(id<HUBViewModel> viewModel) {\n+    NSInteger toCount = (NSInteger)viewModel.bodyComponentModels.count;\n+    NSMutableArray<HUBDiffTrace *> *traces = [NSMutableArray arrayWithCapacity:(NSUInteger)toCount];\n+\n+    for (NSInteger i = 0; i < toCount; i++) {\n+        HUBDiffTrace *trace = [[HUBDiffTrace alloc] initWithFromPoint:HUBDiffPointMake(0, i) toPoint:HUBDiffPointMake(0, i + 1) D:0];\n+        [traces addObject:trace];\n+    }\n+    \n+    return traces;\n+}\n+\n+static NSArray<HUBDiffTrace *> *HUBDiffDeletionTracesFromViewModel(id<HUBViewModel> viewModel) {\n+    NSInteger fromCount = (NSInteger)viewModel.bodyComponentModels.count;\n+    NSMutableArray<HUBDiffTrace *> *traces = [NSMutableArray arrayWithCapacity:(NSUInteger)fromCount];\n+\n+    for (NSInteger i = 0; i < fromCount; i++) {\n+        HUBDiffTrace *trace = [[HUBDiffTrace alloc] initWithFromPoint:HUBDiffPointMake(i, 0) toPoint:HUBDiffPointMake(i + 1, 0) D:0];\n+        [traces addObject:trace];\n+    }\n+    \n+    return traces;\n+}\n+\n+static NSArray<HUBDiffTrace *> *HUBDiffMyersTracesBetweenViewModels(id<HUBViewModel> fromViewModel, id<HUBViewModel> toViewModel) {\n+    NSInteger fromCount = (NSInteger)fromViewModel.bodyComponentModels.count;\n+    NSInteger toCount = (NSInteger)toViewModel.bodyComponentModels.count;\n+    NSInteger max = fromCount + toCount;\n+\n+    NSMutableArray *traces = [NSMutableArray arrayWithCapacity:(NSUInteger)max];\n+\n+    NSInteger vertexCount = 2 * max + 1;\n+    NSInteger vertices[vertexCount];\n+    for (NSInteger i = 0; i < vertexCount; i++) {\n+        vertices[i] = -1;\n+    }\n+    vertices[max + 1] = 0;\n+\n+    for (NSInteger numberOfDifferences = 0; numberOfDifferences <= max; numberOfDifferences++) {\n+        for (NSInteger k = -numberOfDifferences; k <= numberOfDifferences; k += 2) {\n+            NSInteger index = k + max;\n+\n+            HUBDiffTraceStep step = HUBDiffTraceStepMake(numberOfDifferences, k, vertices[index - 1], vertices[index + 1]);\n+            HUBDiffTrace *trace = [HUBDiffTrace nextTraceFromStep:step];\n+\n+            if (trace.to.x <= fromCount && trace.to.y <= toCount) {\n+                [traces addObject:trace];\n+\n+                NSInteger x = trace.to.x;\n+                NSInteger y = trace.to.y;\n+                \n+                while (x >= 0 && y >= 0 && x < fromCount && y < toCount) {\n+                    id<HUBComponentModel> target = toViewModel.bodyComponentModels[(NSUInteger)y];\n+                    id<HUBComponentModel> base = fromViewModel.bodyComponentModels[(NSUInteger)x];\n+\n+                    if ([base.identifier isEqual:target.identifier]) {\n+                        x += 1;\n+                        y += 1;\n+\n+                        HUBDiffTrace *nextTrace = [[HUBDiffTrace alloc] initWithFromPoint:HUBDiffPointMake(x - 1, y - 1) toPoint:HUBDiffPointMake(x, y) D:numberOfDifferences];\n+                        \n+                        [traces addObject:nextTrace];\n+                    } else {\n+                        break;\n+                    }\n+                }\n+\n+                vertices[index] = x;\n+\n+                if (x >= fromCount && y >= toCount) {\n+                    return traces;\n+                }\n+            }\n+        }\n+    }\n+\n+    return @[];\n+}\n+\n+static NSArray<HUBDiffTrace *> *HUBDiffTracesBetweenViewModels(id<HUBViewModel> fromViewModel, id<HUBViewModel> toViewModel) {\n+    if (fromViewModel.bodyComponentModels.count == 0 && toViewModel.bodyComponentModels.count == 0) {\n+        return @[];\n+    } else if (fromViewModel.bodyComponentModels.count == 0) {\n+        return  HUBDiffInsertionTracesFromViewModel(toViewModel);\n+    } else if (toViewModel.bodyComponentModels.count == 0) {\n+        return HUBDiffDeletionTracesFromViewModel(fromViewModel);\n+    } else {\n+        return HUBDiffMyersTracesBetweenViewModels(fromViewModel, toViewModel);\n+    }\n+}\n+\n+static NSArray<HUBDiffTrace *> *HUBDiffFindPathFromTraces(NSArray *traces) {",
        "path": "sources/HUBViewModelDiff.m",
        "position": null,
        "original_position": 241,
        "commit_id": "11c41eb0200161d5715a37e0c0844df27f44c48e",
        "original_commit_id": "714185b26b14f1b17060e48f7c4bfc26f983e47c",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Can we make the argument have the type `NSArray<HUBDiffTrace *> *`?",
        "created_at": "2016-12-01T22:45:46Z",
        "updated_at": "2016-12-09T09:46:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/208#discussion_r90554239",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/208",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90554239"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/208#discussion_r90554239"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/208"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90555099",
        "pull_request_review_id": 11074916,
        "id": 90555099,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwNTU1MDk5",
        "diff_hunk": "@@ -24,6 +24,29 @@\n \n NS_ASSUME_NONNULL_BEGIN\n \n+@class HUBViewModelDiff;\n+\n+typedef HUBViewModelDiff *(HUBDiffAlgorithm)(id<HUBViewModel>, id<HUBViewModel>);",
        "path": "sources/HUBViewModelDiff.h",
        "position": null,
        "original_position": 6,
        "commit_id": "11c41eb0200161d5715a37e0c0844df27f44c48e",
        "original_commit_id": "714185b26b14f1b17060e48f7c4bfc26f983e47c",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@rastersize I thought about adding them as protocols first, but I kind of like having them as C functions as a way to enforce statelessness, as we might be doing diffing on different threads in the future. \r\n\r\nGood point about the debuggability, hadn't thought about that :smile: I agree it does feel more user-friendly to use protocols, I'm open to either approach.",
        "created_at": "2016-12-01T22:51:29Z",
        "updated_at": "2016-12-09T09:46:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/208#discussion_r90555099",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/208",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/90555099"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/208#discussion_r90555099"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/208"
            }
        },
        "in_reply_to_id": 90552045
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/91294330",
        "pull_request_review_id": 11802025,
        "id": 91294330,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxMjk0MzMw",
        "diff_hunk": "@@ -24,6 +24,33 @@\n \n NS_ASSUME_NONNULL_BEGIN\n \n+@class HUBViewModelDiff;\n+\n+/**\n+ * The prototype of a function used to calculate a list of changes to get from\n+ * the one view model to another.",
        "path": "sources/HUBViewModelDiff.h",
        "position": 8,
        "original_position": 8,
        "commit_id": "11c41eb0200161d5715a37e0c0844df27f44c48e",
        "original_commit_id": "1cd041340aed460c973e349de5c69fec739a7564",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "How about documenting the parameters, so it's clear which one is the from & to view models?",
        "created_at": "2016-12-07T13:43:28Z",
        "updated_at": "2016-12-09T09:46:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/208#discussion_r91294330",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/208",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/91294330"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/208#discussion_r91294330"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/208"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/91294544",
        "pull_request_review_id": 11802025,
        "id": 91294544,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxMjk0NTQ0",
        "diff_hunk": "@@ -145,15 +164,237 @@ + (instancetype)diffFromViewModel:(id<HUBViewModel>)fromViewModel\n                                              reloads:[reloads copy]];\n }\n \n-- (NSString *)debugDescription\n+typedef struct {\n+    NSInteger x;\n+    NSInteger y;\n+} HUBDiffPoint;\n+\n+static inline HUBDiffPoint HUBDiffPointMake(NSInteger x, NSInteger y) {\n+    return (HUBDiffPoint){ .x = x, .y = y};",
        "path": "sources/HUBViewModelDiff.m",
        "position": null,
        "original_position": 64,
        "commit_id": "11c41eb0200161d5715a37e0c0844df27f44c48e",
        "original_commit_id": "1cd041340aed460c973e349de5c69fec739a7564",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\ud83c\udfa8 Style is a bit inconsitent here, you have a leading space but not a trailing one \ud83d\ude04 ",
        "created_at": "2016-12-07T13:44:49Z",
        "updated_at": "2016-12-09T09:46:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/208#discussion_r91294544",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/208",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/91294544"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/208#discussion_r91294544"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/208"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/91294644",
        "pull_request_review_id": 11802025,
        "id": 91294644,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxMjk0NjQ0",
        "diff_hunk": "@@ -145,15 +164,237 @@ + (instancetype)diffFromViewModel:(id<HUBViewModel>)fromViewModel\n                                              reloads:[reloads copy]];\n }\n \n-- (NSString *)debugDescription\n+typedef struct {\n+    NSInteger x;\n+    NSInteger y;\n+} HUBDiffPoint;\n+\n+static inline HUBDiffPoint HUBDiffPointMake(NSInteger x, NSInteger y) {\n+    return (HUBDiffPoint){ .x = x, .y = y};\n+}\n+\n+typedef struct {\n+    NSInteger changes;\n+    NSInteger diagonal;\n+    NSInteger previousX;\n+    NSInteger nextX;\n+} HUBDiffTraceStep;\n+\n+static inline HUBDiffTraceStep HUBDiffTraceStepMake(NSInteger changes, NSInteger diagonal, NSInteger previousX, NSInteger nextX) {\n+    return (HUBDiffTraceStep){ .changes = changes, .diagonal = diagonal, .previousX = previousX, .nextX = nextX };\n+}\n+\n+typedef NS_ENUM(NSUInteger, HUBDiffTraceType) {\n+    HUBDiffTraceTypeInsert,\n+    HUBDiffTraceTypeDelete,\n+    HUBDiffTraceTypeMatchPoint\n+};\n+\n+@interface HUBDiffTrace : NSObject\n+\n+@property (nonatomic, assign, readonly) HUBDiffPoint from;\n+@property (nonatomic, assign, readonly) HUBDiffPoint to;\n+@property (nonatomic, assign, readonly) NSInteger changes;\n+",
        "path": "sources/HUBViewModelDiff.m",
        "position": null,
        "original_position": 89,
        "commit_id": "11c41eb0200161d5715a37e0c0844df27f44c48e",
        "original_commit_id": "1cd041340aed460c973e349de5c69fec739a7564",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Why this empty row? \ud83d\ude31 ",
        "created_at": "2016-12-07T13:45:21Z",
        "updated_at": "2016-12-09T09:46:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/208#discussion_r91294644",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/208",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/91294644"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/208#discussion_r91294644"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/208"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/91294763",
        "pull_request_review_id": 11802025,
        "id": 91294763,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxMjk0NzYz",
        "diff_hunk": "@@ -145,15 +164,237 @@ + (instancetype)diffFromViewModel:(id<HUBViewModel>)fromViewModel\n                                              reloads:[reloads copy]];\n }\n \n-- (NSString *)debugDescription\n+typedef struct {\n+    NSInteger x;\n+    NSInteger y;\n+} HUBDiffPoint;\n+\n+static inline HUBDiffPoint HUBDiffPointMake(NSInteger x, NSInteger y) {\n+    return (HUBDiffPoint){ .x = x, .y = y};\n+}\n+\n+typedef struct {\n+    NSInteger changes;\n+    NSInteger diagonal;\n+    NSInteger previousX;\n+    NSInteger nextX;\n+} HUBDiffTraceStep;\n+\n+static inline HUBDiffTraceStep HUBDiffTraceStepMake(NSInteger changes, NSInteger diagonal, NSInteger previousX, NSInteger nextX) {\n+    return (HUBDiffTraceStep){ .changes = changes, .diagonal = diagonal, .previousX = previousX, .nextX = nextX };\n+}\n+\n+typedef NS_ENUM(NSUInteger, HUBDiffTraceType) {\n+    HUBDiffTraceTypeInsert,\n+    HUBDiffTraceTypeDelete,\n+    HUBDiffTraceTypeMatchPoint\n+};\n+\n+@interface HUBDiffTrace : NSObject\n+\n+@property (nonatomic, assign, readonly) HUBDiffPoint from;\n+@property (nonatomic, assign, readonly) HUBDiffPoint to;\n+@property (nonatomic, assign, readonly) NSInteger changes;\n+\n+@property (nonatomic, assign, readonly) HUBDiffTraceType type;\n+\n+@end\n+\n+@implementation HUBDiffTrace\n+\n++ (instancetype)nextTraceFromStep:(HUBDiffTraceStep)step\n {\n-    return [NSString stringWithFormat:@\"\\t{\\n\\\n-        deletions: %@\\n\\\n-        insertions: %@\\n\\\n-        reloads: %@\\n\\\n-    \\t}\", self.deletedBodyComponentIndexPaths, self.insertedBodyComponentIndexPaths, self.reloadedBodyComponentIndexPaths];\n+    HUBDiffTraceType type;\n+    if (step.diagonal == -(step.changes)) {\n+        type = HUBDiffTraceTypeInsert;\n+    } else if (step.diagonal != step.changes) {\n+        if (step.previousX < step.nextX) {\n+            type = HUBDiffTraceTypeInsert;\n+        } else {\n+            type = HUBDiffTraceTypeDelete;\n+        }\n+    } else {\n+        type = HUBDiffTraceTypeDelete;\n+    }\n+    \n+    if (type == HUBDiffTraceTypeInsert) {\n+        NSInteger x = step.nextX;\n+        \n+        return [[self alloc] initWithFromPoint:HUBDiffPointMake(x, x - step.diagonal - 1) toPoint:HUBDiffPointMake(x, x - step.diagonal) changes:step.changes];\n+    } else {\n+        NSInteger x = step.previousX + 1;\n+\n+        return [[self alloc] initWithFromPoint:HUBDiffPointMake(x - 1, x - step.diagonal) toPoint:HUBDiffPointMake(x, x - step.diagonal) changes:step.changes];\n+    }\n+}\n+\n+- (instancetype)initWithFromPoint:(HUBDiffPoint)fromPoint toPoint:(HUBDiffPoint)toPoint changes:(NSInteger)changes",
        "path": "sources/HUBViewModelDiff.m",
        "position": null,
        "original_position": 127,
        "commit_id": "11c41eb0200161d5715a37e0c0844df27f44c48e",
        "original_commit_id": "1cd041340aed460c973e349de5c69fec739a7564",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "What about `type`?",
        "created_at": "2016-12-07T13:46:01Z",
        "updated_at": "2016-12-09T09:46:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/208#discussion_r91294763",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/208",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/91294763"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/208#discussion_r91294763"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/208"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/91310619",
        "pull_request_review_id": 11818574,
        "id": 91310619,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxMzEwNjE5",
        "diff_hunk": "@@ -145,15 +164,237 @@ + (instancetype)diffFromViewModel:(id<HUBViewModel>)fromViewModel\n                                              reloads:[reloads copy]];\n }\n \n-- (NSString *)debugDescription\n+typedef struct {\n+    NSInteger x;\n+    NSInteger y;\n+} HUBDiffPoint;\n+\n+static inline HUBDiffPoint HUBDiffPointMake(NSInteger x, NSInteger y) {\n+    return (HUBDiffPoint){ .x = x, .y = y};\n+}\n+\n+typedef struct {\n+    NSInteger changes;\n+    NSInteger diagonal;\n+    NSInteger previousX;\n+    NSInteger nextX;\n+} HUBDiffTraceStep;\n+\n+static inline HUBDiffTraceStep HUBDiffTraceStepMake(NSInteger changes, NSInteger diagonal, NSInteger previousX, NSInteger nextX) {\n+    return (HUBDiffTraceStep){ .changes = changes, .diagonal = diagonal, .previousX = previousX, .nextX = nextX };\n+}\n+\n+typedef NS_ENUM(NSUInteger, HUBDiffTraceType) {\n+    HUBDiffTraceTypeInsert,\n+    HUBDiffTraceTypeDelete,\n+    HUBDiffTraceTypeMatchPoint\n+};\n+\n+@interface HUBDiffTrace : NSObject\n+\n+@property (nonatomic, assign, readonly) HUBDiffPoint from;\n+@property (nonatomic, assign, readonly) HUBDiffPoint to;\n+@property (nonatomic, assign, readonly) NSInteger changes;\n+\n+@property (nonatomic, assign, readonly) HUBDiffTraceType type;\n+\n+@end\n+\n+@implementation HUBDiffTrace\n+\n++ (instancetype)nextTraceFromStep:(HUBDiffTraceStep)step\n {\n-    return [NSString stringWithFormat:@\"\\t{\\n\\\n-        deletions: %@\\n\\\n-        insertions: %@\\n\\\n-        reloads: %@\\n\\\n-    \\t}\", self.deletedBodyComponentIndexPaths, self.insertedBodyComponentIndexPaths, self.reloadedBodyComponentIndexPaths];\n+    HUBDiffTraceType type;\n+    if (step.diagonal == -(step.changes)) {\n+        type = HUBDiffTraceTypeInsert;\n+    } else if (step.diagonal != step.changes) {\n+        if (step.previousX < step.nextX) {\n+            type = HUBDiffTraceTypeInsert;\n+        } else {\n+            type = HUBDiffTraceTypeDelete;\n+        }\n+    } else {\n+        type = HUBDiffTraceTypeDelete;\n+    }\n+    \n+    if (type == HUBDiffTraceTypeInsert) {\n+        NSInteger x = step.nextX;\n+        \n+        return [[self alloc] initWithFromPoint:HUBDiffPointMake(x, x - step.diagonal - 1) toPoint:HUBDiffPointMake(x, x - step.diagonal) changes:step.changes];\n+    } else {\n+        NSInteger x = step.previousX + 1;\n+\n+        return [[self alloc] initWithFromPoint:HUBDiffPointMake(x - 1, x - step.diagonal) toPoint:HUBDiffPointMake(x, x - step.diagonal) changes:step.changes];\n+    }\n+}\n+\n+- (instancetype)initWithFromPoint:(HUBDiffPoint)fromPoint toPoint:(HUBDiffPoint)toPoint changes:(NSInteger)changes",
        "path": "sources/HUBViewModelDiff.m",
        "position": null,
        "original_position": 127,
        "commit_id": "11c41eb0200161d5715a37e0c0844df27f44c48e",
        "original_commit_id": "1cd041340aed460c973e349de5c69fec739a7564",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It's lazily inferred since it's not accessed on all traces (only the ones in the final path)",
        "created_at": "2016-12-07T15:05:43Z",
        "updated_at": "2016-12-09T09:46:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/208#discussion_r91310619",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/208",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/91310619"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/208#discussion_r91310619"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/208"
            }
        },
        "in_reply_to_id": 91294763
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/91316377",
        "pull_request_review_id": 11824460,
        "id": 91316377,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxMzE2Mzc3",
        "diff_hunk": "@@ -24,6 +24,33 @@\n \n NS_ASSUME_NONNULL_BEGIN\n \n+@class HUBViewModelDiff;\n+\n+/**\n+ * The prototype of a function used to calculate a list of changes to get from\n+ * the one view model to another.",
        "path": "sources/HUBViewModelDiff.h",
        "position": 8,
        "original_position": 8,
        "commit_id": "11c41eb0200161d5715a37e0c0844df27f44c48e",
        "original_commit_id": "1cd041340aed460c973e349de5c69fec739a7564",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "added below!",
        "created_at": "2016-12-07T15:30:19Z",
        "updated_at": "2016-12-09T09:46:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/208#discussion_r91316377",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/208",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/91316377"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/208#discussion_r91316377"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/208"
            }
        },
        "in_reply_to_id": 91294330
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/91935221",
        "pull_request_review_id": 12443472,
        "id": 91935221,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxOTM1MjIx",
        "diff_hunk": "@@ -55,6 +55,17 @@\n - (BOOL)shouldAutomaticallyAdjustContentInsetsInViewController:(HUBViewController *)viewController;\n \n /**\n+ *  Return the manner in which the keyboard is dismissed when a drag begins in the view controller\n+ *\n+ *  @param viewController The view controller in question\n+ *\n+ *  The Hub Framework will call this method when a view controller is being set up. The returned value will be\n+ *  assigned to the `keyboardDismissMode` property of the used scroll view, so see the documentation for that property\n+ *  on `UIScrollView` for more information.\n+ */\n+- (UIScrollViewKeyboardDismissMode)keyboardDismissModeForDraggingViewController:(HUBViewController *)viewController;",
        "path": "include/HubFramework/HUBViewControllerScrollHandler.h",
        "position": null,
        "original_position": 12,
        "commit_id": "4036f1569aacf94adfd836ab2c74018da76d2572",
        "original_commit_id": "8c578b2b06ff729737d88b0d308d20e1c459e811",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Since this is only called once, I think it makes more sense to name this method `keyboardDismissModeForViewController:`. With the current naming, it sounds like it will be called once dragging starts. Also, the view controller is not really being dragged \ud83d\ude04 ",
        "created_at": "2016-12-12T12:12:43Z",
        "updated_at": "2016-12-12T14:14:46Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/228#discussion_r91935221",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/228",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/91935221"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/228#discussion_r91935221"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/228"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/91729715",
        "pull_request_review_id": 12240980,
        "id": 91729715,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxNzI5NzE1",
        "diff_hunk": "@@ -0,0 +1,126 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import <XCTest/XCTest.h>\n+\n+#import \"HUBCollectionViewLayoutMock.h\"\n+#import \"HUBCollectionViewMock.h\"\n+#import \"HUBComponentLayoutManagerMock.h\"\n+#import \"HUBViewModelDiff.h\"\n+#import \"HUBViewModelRenderer.h\"\n+#import \"HUBViewModelUtilities.h\"\n+\n+/**\n+ *  We don't want these tests to be concerned with the inner workings of the batch update process, as this invokes\n+ *  a lot of collection view logic that over-complicates the test (e.g. checking that the items rendered before\n+ *  the batch update tallies with the number of items after the batch update).\n+ *\n+ *  To get around this, we override the insert, delete and reload methods to do nothing.\n+ */\n+@interface HUBCollectionViewMockWithoutBatchUpdates : HUBCollectionViewMock\n+\n+@end\n+\n+@implementation HUBCollectionViewMockWithoutBatchUpdates\n+\n+- (void)insertItemsAtIndexPaths:(NSArray<NSIndexPath *> *)indexPaths\n+{\n+}\n+\n+- (void)deleteItemsAtIndexPaths:(NSArray<NSIndexPath *> *)indexPaths\n+{\n+}\n+\n+- (void)reloadItemsAtIndexPaths:(NSArray<NSIndexPath *> *)indexPaths\n+{\n+}\n+\n+@end\n+\n+@interface HUBViewModelRendererTests : XCTestCase\n+\n+@property (nonatomic, strong) HUBCollectionViewMockWithoutBatchUpdates *collectionView;\n+@property (nonatomic, strong) HUBCollectionViewLayoutMock *collectionViewLayout;\n+@property (nonatomic, strong) HUBViewModelRenderer *viewModelRenderer;\n+\n+@end\n+\n+@implementation HUBViewModelRendererTests\n+\n+- (void)setUp\n+{\n+    [super setUp];\n+\n+    self.collectionView = [HUBCollectionViewMockWithoutBatchUpdates new];\n+    self.collectionViewLayout = [[HUBCollectionViewLayoutMock alloc] init];\n+    self.collectionView.collectionViewLayout = self.collectionViewLayout;\n+    self.viewModelRenderer = [HUBViewModelRenderer new];\n+}\n+\n+- (void)tearDown\n+{\n+    self.collectionView = nil;\n+    self.collectionViewLayout = nil;\n+    self.viewModelRenderer = nil;\n+\n+    [super tearDown];\n+}\n+\n+- (void)testTwoSubsequentRenders\n+{\n+    NSArray<id<HUBComponentModel>> *firstComponents = @[\n+        [HUBViewModelUtilities createComponentModelWithIdentifier:@\"component-1\" customData:nil],\n+    ];\n+    id<HUBViewModel> firstViewModel = [HUBViewModelUtilities createViewModelWithIdentifier:@\"Test\" components:firstComponents];\n+\n+    NSArray<id<HUBComponentModel>> *secondComponents = @[\n+        [HUBViewModelUtilities createComponentModelWithIdentifier:@\"component-2\" customData:nil],\n+    ];\n+    id<HUBViewModel> secondViewModel = [HUBViewModelUtilities createViewModelWithIdentifier:@\"Test2\" components:secondComponents];\n+\n+    __weak XCTestExpectation * const expectation = [self expectationWithDescription:@\"Waiting for render\"];\n+\n+    [self.viewModelRenderer renderViewModel:firstViewModel inCollectionView:self.collectionView usingBatchUpdates:YES animated:YES addHeaderMargin:YES completion:^{\n+        // Immediately trigger another render.\n+        [self.viewModelRenderer renderViewModel:secondViewModel inCollectionView:self.collectionView usingBatchUpdates:YES animated:YES addHeaderMargin:YES completion:^{\n+            [expectation fulfill];\n+        }];\n+    }];\n+\n+    [self waitForExpectationsWithTimeout:2 handler:nil];\n+\n+    XCTAssertEqual(self.collectionViewLayout.capturedViewModels.count, 2u);\n+    XCTAssertEqualObjects(self.collectionViewLayout.capturedViewModels[0], firstViewModel);\n+    XCTAssertEqualObjects(self.collectionViewLayout.capturedViewModels[1], secondViewModel);\n+\n+    XCTAssertEqual(self.collectionViewLayout.capturedViewModelDiffs.count, 2u);\n+    // The first invocation shouldn't generate a diff.\n+    XCTAssertEqualObjects(self.collectionViewLayout.capturedViewModelDiffs[0], [NSNull null]);",
        "path": "tests/HUBViewModelRendererTests.m",
        "position": null,
        "original_position": 116,
        "commit_id": "fec2ba819bf638e020d5458f678e2f7a5401b75e",
        "original_commit_id": "462f67564a56d6df06045bc67c68b0986ac16feb",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Isn\u2019t there a risk this code will crash if the previous XCTest assert fails? Since the execution will still continue. Could we, and should we, guard against this?\r\n\r\nTo make the test read as nice as it does right now, how about adding a `-capturedViewModelDiffAtIndex:` method to `HUBCollectionViewLayoutMock`?",
        "created_at": "2016-12-09T14:57:08Z",
        "updated_at": "2016-12-13T16:43:11Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/226#discussion_r91729715",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/226",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/91729715"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/226#discussion_r91729715"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/226"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/91729816",
        "pull_request_review_id": 12240980,
        "id": 91729816,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxNzI5ODE2",
        "diff_hunk": "@@ -0,0 +1,126 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import <XCTest/XCTest.h>\n+\n+#import \"HUBCollectionViewLayoutMock.h\"\n+#import \"HUBCollectionViewMock.h\"\n+#import \"HUBComponentLayoutManagerMock.h\"\n+#import \"HUBViewModelDiff.h\"\n+#import \"HUBViewModelRenderer.h\"\n+#import \"HUBViewModelUtilities.h\"\n+\n+/**\n+ *  We don't want these tests to be concerned with the inner workings of the batch update process, as this invokes\n+ *  a lot of collection view logic that over-complicates the test (e.g. checking that the items rendered before\n+ *  the batch update tallies with the number of items after the batch update).\n+ *\n+ *  To get around this, we override the insert, delete and reload methods to do nothing.\n+ */\n+@interface HUBCollectionViewMockWithoutBatchUpdates : HUBCollectionViewMock\n+\n+@end\n+\n+@implementation HUBCollectionViewMockWithoutBatchUpdates\n+\n+- (void)insertItemsAtIndexPaths:(NSArray<NSIndexPath *> *)indexPaths\n+{\n+}\n+\n+- (void)deleteItemsAtIndexPaths:(NSArray<NSIndexPath *> *)indexPaths\n+{\n+}\n+\n+- (void)reloadItemsAtIndexPaths:(NSArray<NSIndexPath *> *)indexPaths\n+{\n+}\n+\n+@end\n+\n+@interface HUBViewModelRendererTests : XCTestCase\n+\n+@property (nonatomic, strong) HUBCollectionViewMockWithoutBatchUpdates *collectionView;\n+@property (nonatomic, strong) HUBCollectionViewLayoutMock *collectionViewLayout;\n+@property (nonatomic, strong) HUBViewModelRenderer *viewModelRenderer;\n+\n+@end\n+\n+@implementation HUBViewModelRendererTests\n+\n+- (void)setUp\n+{\n+    [super setUp];\n+\n+    self.collectionView = [HUBCollectionViewMockWithoutBatchUpdates new];\n+    self.collectionViewLayout = [[HUBCollectionViewLayoutMock alloc] init];\n+    self.collectionView.collectionViewLayout = self.collectionViewLayout;\n+    self.viewModelRenderer = [HUBViewModelRenderer new];\n+}\n+\n+- (void)tearDown\n+{\n+    self.collectionView = nil;\n+    self.collectionViewLayout = nil;\n+    self.viewModelRenderer = nil;\n+\n+    [super tearDown];\n+}\n+\n+- (void)testTwoSubsequentRenders\n+{\n+    NSArray<id<HUBComponentModel>> *firstComponents = @[\n+        [HUBViewModelUtilities createComponentModelWithIdentifier:@\"component-1\" customData:nil],\n+    ];\n+    id<HUBViewModel> firstViewModel = [HUBViewModelUtilities createViewModelWithIdentifier:@\"Test\" components:firstComponents];\n+\n+    NSArray<id<HUBComponentModel>> *secondComponents = @[\n+        [HUBViewModelUtilities createComponentModelWithIdentifier:@\"component-2\" customData:nil],\n+    ];\n+    id<HUBViewModel> secondViewModel = [HUBViewModelUtilities createViewModelWithIdentifier:@\"Test2\" components:secondComponents];\n+\n+    __weak XCTestExpectation * const expectation = [self expectationWithDescription:@\"Waiting for render\"];\n+\n+    [self.viewModelRenderer renderViewModel:firstViewModel inCollectionView:self.collectionView usingBatchUpdates:YES animated:YES addHeaderMargin:YES completion:^{\n+        // Immediately trigger another render.\n+        [self.viewModelRenderer renderViewModel:secondViewModel inCollectionView:self.collectionView usingBatchUpdates:YES animated:YES addHeaderMargin:YES completion:^{\n+            [expectation fulfill];\n+        }];\n+    }];\n+\n+    [self waitForExpectationsWithTimeout:2 handler:nil];\n+\n+    XCTAssertEqual(self.collectionViewLayout.capturedViewModels.count, 2u);\n+    XCTAssertEqualObjects(self.collectionViewLayout.capturedViewModels[0], firstViewModel);\n+    XCTAssertEqualObjects(self.collectionViewLayout.capturedViewModels[1], secondViewModel);\n+\n+    XCTAssertEqual(self.collectionViewLayout.capturedViewModelDiffs.count, 2u);\n+    // The first invocation shouldn't generate a diff.\n+    XCTAssertEqualObjects(self.collectionViewLayout.capturedViewModelDiffs[0], [NSNull null]);\n+    // The second invocation should generate a diff.\n+    HUBViewModelDiff *diff = self.collectionViewLayout.capturedViewModelDiffs[1];",
        "path": "tests/HUBViewModelRendererTests.m",
        "position": null,
        "original_position": 118,
        "commit_id": "fec2ba819bf638e020d5458f678e2f7a5401b75e",
        "original_commit_id": "462f67564a56d6df06045bc67c68b0986ac16feb",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Same with this access, isn\u2019t it possible this will crash if a regression is introduced?",
        "created_at": "2016-12-09T14:57:41Z",
        "updated_at": "2016-12-13T16:43:11Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/226#discussion_r91729816",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/226",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/91729816"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/226#discussion_r91729816"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/226"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/92121481",
        "pull_request_review_id": 12629566,
        "id": 92121481,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkyMTIxNDgx",
        "diff_hunk": "@@ -0,0 +1,126 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import <XCTest/XCTest.h>\n+\n+#import \"HUBCollectionViewLayoutMock.h\"\n+#import \"HUBCollectionViewMock.h\"\n+#import \"HUBComponentLayoutManagerMock.h\"\n+#import \"HUBViewModelDiff.h\"\n+#import \"HUBViewModelRenderer.h\"\n+#import \"HUBViewModelUtilities.h\"\n+\n+/**\n+ *  We don't want these tests to be concerned with the inner workings of the batch update process, as this invokes\n+ *  a lot of collection view logic that over-complicates the test (e.g. checking that the items rendered before\n+ *  the batch update tallies with the number of items after the batch update).\n+ *\n+ *  To get around this, we override the insert, delete and reload methods to do nothing.\n+ */\n+@interface HUBCollectionViewMockWithoutBatchUpdates : HUBCollectionViewMock\n+\n+@end\n+\n+@implementation HUBCollectionViewMockWithoutBatchUpdates\n+\n+- (void)insertItemsAtIndexPaths:(NSArray<NSIndexPath *> *)indexPaths\n+{\n+}\n+\n+- (void)deleteItemsAtIndexPaths:(NSArray<NSIndexPath *> *)indexPaths\n+{\n+}\n+\n+- (void)reloadItemsAtIndexPaths:(NSArray<NSIndexPath *> *)indexPaths\n+{\n+}\n+\n+@end\n+\n+@interface HUBViewModelRendererTests : XCTestCase\n+\n+@property (nonatomic, strong) HUBCollectionViewMockWithoutBatchUpdates *collectionView;\n+@property (nonatomic, strong) HUBCollectionViewLayoutMock *collectionViewLayout;\n+@property (nonatomic, strong) HUBViewModelRenderer *viewModelRenderer;\n+\n+@end\n+\n+@implementation HUBViewModelRendererTests\n+\n+- (void)setUp\n+{\n+    [super setUp];\n+\n+    self.collectionView = [HUBCollectionViewMockWithoutBatchUpdates new];\n+    self.collectionViewLayout = [[HUBCollectionViewLayoutMock alloc] init];\n+    self.collectionView.collectionViewLayout = self.collectionViewLayout;\n+    self.viewModelRenderer = [HUBViewModelRenderer new];\n+}\n+\n+- (void)tearDown\n+{\n+    self.collectionView = nil;\n+    self.collectionViewLayout = nil;\n+    self.viewModelRenderer = nil;\n+\n+    [super tearDown];\n+}\n+\n+- (void)testTwoSubsequentRenders\n+{\n+    NSArray<id<HUBComponentModel>> *firstComponents = @[\n+        [HUBViewModelUtilities createComponentModelWithIdentifier:@\"component-1\" customData:nil],\n+    ];\n+    id<HUBViewModel> firstViewModel = [HUBViewModelUtilities createViewModelWithIdentifier:@\"Test\" components:firstComponents];\n+\n+    NSArray<id<HUBComponentModel>> *secondComponents = @[\n+        [HUBViewModelUtilities createComponentModelWithIdentifier:@\"component-2\" customData:nil],\n+    ];\n+    id<HUBViewModel> secondViewModel = [HUBViewModelUtilities createViewModelWithIdentifier:@\"Test2\" components:secondComponents];\n+\n+    __weak XCTestExpectation * const expectation = [self expectationWithDescription:@\"Waiting for render\"];\n+\n+    [self.viewModelRenderer renderViewModel:firstViewModel inCollectionView:self.collectionView usingBatchUpdates:YES animated:YES addHeaderMargin:YES completion:^{\n+        // Immediately trigger another render.\n+        [self.viewModelRenderer renderViewModel:secondViewModel inCollectionView:self.collectionView usingBatchUpdates:YES animated:YES addHeaderMargin:YES completion:^{\n+            [expectation fulfill];\n+        }];\n+    }];\n+\n+    [self waitForExpectationsWithTimeout:2 handler:nil];\n+\n+    XCTAssertEqual(self.collectionViewLayout.capturedViewModels.count, 2u);\n+    XCTAssertEqualObjects(self.collectionViewLayout.capturedViewModels[0], firstViewModel);\n+    XCTAssertEqualObjects(self.collectionViewLayout.capturedViewModels[1], secondViewModel);\n+\n+    XCTAssertEqual(self.collectionViewLayout.capturedViewModelDiffs.count, 2u);\n+    // The first invocation shouldn't generate a diff.\n+    XCTAssertEqualObjects(self.collectionViewLayout.capturedViewModelDiffs[0], [NSNull null]);",
        "path": "tests/HUBViewModelRendererTests.m",
        "position": null,
        "original_position": 116,
        "commit_id": "fec2ba819bf638e020d5458f678e2f7a5401b75e",
        "original_commit_id": "462f67564a56d6df06045bc67c68b0986ac16feb",
        "user": {
            "login": "cerihughes",
            "id": 12008876,
            "node_id": "MDQ6VXNlcjEyMDA4ODc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12008876?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cerihughes",
            "html_url": "https://github.com/cerihughes",
            "followers_url": "https://api.github.com/users/cerihughes/followers",
            "following_url": "https://api.github.com/users/cerihughes/following{/other_user}",
            "gists_url": "https://api.github.com/users/cerihughes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cerihughes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cerihughes/subscriptions",
            "organizations_url": "https://api.github.com/users/cerihughes/orgs",
            "repos_url": "https://api.github.com/users/cerihughes/repos",
            "events_url": "https://api.github.com/users/cerihughes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cerihughes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@rastersize That's a good point, and most likely the reason why the builds are crashing on Travis. I'll fix it.",
        "created_at": "2016-12-13T08:53:53Z",
        "updated_at": "2016-12-13T16:43:11Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/226#discussion_r92121481",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/226",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/92121481"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/226#discussion_r92121481"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/226"
            }
        },
        "in_reply_to_id": 91729715
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/92121581",
        "pull_request_review_id": 12629667,
        "id": 92121581,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkyMTIxNTgx",
        "diff_hunk": "@@ -0,0 +1,126 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import <XCTest/XCTest.h>\n+\n+#import \"HUBCollectionViewLayoutMock.h\"\n+#import \"HUBCollectionViewMock.h\"\n+#import \"HUBComponentLayoutManagerMock.h\"\n+#import \"HUBViewModelDiff.h\"\n+#import \"HUBViewModelRenderer.h\"\n+#import \"HUBViewModelUtilities.h\"\n+\n+/**\n+ *  We don't want these tests to be concerned with the inner workings of the batch update process, as this invokes\n+ *  a lot of collection view logic that over-complicates the test (e.g. checking that the items rendered before\n+ *  the batch update tallies with the number of items after the batch update).\n+ *\n+ *  To get around this, we override the insert, delete and reload methods to do nothing.\n+ */\n+@interface HUBCollectionViewMockWithoutBatchUpdates : HUBCollectionViewMock\n+\n+@end\n+\n+@implementation HUBCollectionViewMockWithoutBatchUpdates\n+\n+- (void)insertItemsAtIndexPaths:(NSArray<NSIndexPath *> *)indexPaths\n+{\n+}\n+\n+- (void)deleteItemsAtIndexPaths:(NSArray<NSIndexPath *> *)indexPaths\n+{\n+}\n+\n+- (void)reloadItemsAtIndexPaths:(NSArray<NSIndexPath *> *)indexPaths\n+{\n+}\n+\n+@end\n+\n+@interface HUBViewModelRendererTests : XCTestCase\n+\n+@property (nonatomic, strong) HUBCollectionViewMockWithoutBatchUpdates *collectionView;\n+@property (nonatomic, strong) HUBCollectionViewLayoutMock *collectionViewLayout;\n+@property (nonatomic, strong) HUBViewModelRenderer *viewModelRenderer;\n+\n+@end\n+\n+@implementation HUBViewModelRendererTests\n+\n+- (void)setUp\n+{\n+    [super setUp];\n+\n+    self.collectionView = [HUBCollectionViewMockWithoutBatchUpdates new];\n+    self.collectionViewLayout = [[HUBCollectionViewLayoutMock alloc] init];\n+    self.collectionView.collectionViewLayout = self.collectionViewLayout;\n+    self.viewModelRenderer = [HUBViewModelRenderer new];\n+}\n+\n+- (void)tearDown\n+{\n+    self.collectionView = nil;\n+    self.collectionViewLayout = nil;\n+    self.viewModelRenderer = nil;\n+\n+    [super tearDown];\n+}\n+\n+- (void)testTwoSubsequentRenders\n+{\n+    NSArray<id<HUBComponentModel>> *firstComponents = @[\n+        [HUBViewModelUtilities createComponentModelWithIdentifier:@\"component-1\" customData:nil],\n+    ];\n+    id<HUBViewModel> firstViewModel = [HUBViewModelUtilities createViewModelWithIdentifier:@\"Test\" components:firstComponents];\n+\n+    NSArray<id<HUBComponentModel>> *secondComponents = @[\n+        [HUBViewModelUtilities createComponentModelWithIdentifier:@\"component-2\" customData:nil],\n+    ];\n+    id<HUBViewModel> secondViewModel = [HUBViewModelUtilities createViewModelWithIdentifier:@\"Test2\" components:secondComponents];\n+\n+    __weak XCTestExpectation * const expectation = [self expectationWithDescription:@\"Waiting for render\"];\n+\n+    [self.viewModelRenderer renderViewModel:firstViewModel inCollectionView:self.collectionView usingBatchUpdates:YES animated:YES addHeaderMargin:YES completion:^{\n+        // Immediately trigger another render.\n+        [self.viewModelRenderer renderViewModel:secondViewModel inCollectionView:self.collectionView usingBatchUpdates:YES animated:YES addHeaderMargin:YES completion:^{\n+            [expectation fulfill];\n+        }];\n+    }];\n+\n+    [self waitForExpectationsWithTimeout:2 handler:nil];\n+\n+    XCTAssertEqual(self.collectionViewLayout.capturedViewModels.count, 2u);\n+    XCTAssertEqualObjects(self.collectionViewLayout.capturedViewModels[0], firstViewModel);\n+    XCTAssertEqualObjects(self.collectionViewLayout.capturedViewModels[1], secondViewModel);\n+\n+    XCTAssertEqual(self.collectionViewLayout.capturedViewModelDiffs.count, 2u);\n+    // The first invocation shouldn't generate a diff.\n+    XCTAssertEqualObjects(self.collectionViewLayout.capturedViewModelDiffs[0], [NSNull null]);",
        "path": "tests/HUBViewModelRendererTests.m",
        "position": null,
        "original_position": 116,
        "commit_id": "fec2ba819bf638e020d5458f678e2f7a5401b75e",
        "original_commit_id": "462f67564a56d6df06045bc67c68b0986ac16feb",
        "user": {
            "login": "cerihughes",
            "id": 12008876,
            "node_id": "MDQ6VXNlcjEyMDA4ODc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12008876?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cerihughes",
            "html_url": "https://github.com/cerihughes",
            "followers_url": "https://api.github.com/users/cerihughes/followers",
            "following_url": "https://api.github.com/users/cerihughes/following{/other_user}",
            "gists_url": "https://api.github.com/users/cerihughes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cerihughes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cerihughes/subscriptions",
            "organizations_url": "https://api.github.com/users/cerihughes/orgs",
            "repos_url": "https://api.github.com/users/cerihughes/repos",
            "events_url": "https://api.github.com/users/cerihughes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cerihughes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "(although, I'm not sure why the test runs differently on the server and produces different results)",
        "created_at": "2016-12-13T08:54:31Z",
        "updated_at": "2016-12-13T16:43:11Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/226#discussion_r92121581",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/226",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/92121581"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/226#discussion_r92121581"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/226"
            }
        },
        "in_reply_to_id": 91729715
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/92356105",
        "pull_request_review_id": 12868538,
        "id": 92356105,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkyMzU2MTA1",
        "diff_hunk": "@@ -78,6 +78,17 @@\n - (UIEdgeInsets)contentInsetsForViewController:(HUBViewController *)viewController\n                          proposedContentInsets:(UIEdgeInsets)proposedContentInsets;\n \n+\n+/**\n+ *  Return the center point of an overlay coponent used in a view controller\n+ *\n+ *  @param viewController The view controller in question\n+ *  @param proposedCenterPoint The center point that the Hub Framework is proposing\n+ *\n+ */\n+- (CGPoint)centerPointForOverlayComponentInViewController:(HUBViewController *)viewController",
        "path": "include/HubFramework/HUBViewControllerScrollHandler.h",
        "position": 12,
        "original_position": 12,
        "commit_id": "7e43a5c4beebbbcb0eeca0027c5aa19456cc3a66",
        "original_commit_id": "7e43a5c4beebbbcb0eeca0027c5aa19456cc3a66",
        "user": {
            "login": "Lumenela",
            "id": 1918818,
            "node_id": "MDQ6VXNlcjE5MTg4MTg=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1918818?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Lumenela",
            "html_url": "https://github.com/Lumenela",
            "followers_url": "https://api.github.com/users/Lumenela/followers",
            "following_url": "https://api.github.com/users/Lumenela/following{/other_user}",
            "gists_url": "https://api.github.com/users/Lumenela/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Lumenela/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Lumenela/subscriptions",
            "organizations_url": "https://api.github.com/users/Lumenela/orgs",
            "repos_url": "https://api.github.com/users/Lumenela/repos",
            "events_url": "https://api.github.com/users/Lumenela/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Lumenela/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@krris It doesn't sound like this method is related to scrolling. All the methods in the protocol have clear connection to scrolling, but `centerPointForOverlayComponentInViewController : proposedCenterPoint:` is more related to layout.",
        "created_at": "2016-12-14T09:52:59Z",
        "updated_at": "2016-12-14T09:52:59Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/237#discussion_r92356105",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/237",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/92356105"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/237#discussion_r92356105"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/237"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/92356187",
        "pull_request_review_id": 12868627,
        "id": 92356187,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkyMzU2MTg3",
        "diff_hunk": "@@ -78,6 +78,17 @@\n - (UIEdgeInsets)contentInsetsForViewController:(HUBViewController *)viewController\n                          proposedContentInsets:(UIEdgeInsets)proposedContentInsets;\n \n+\n+/**\n+ *  Return the center point of an overlay coponent used in a view controller\n+ *\n+ *  @param viewController The view controller in question\n+ *  @param proposedCenterPoint The center point that the Hub Framework is proposing\n+ *\n+ */\n+- (CGPoint)centerPointForOverlayComponentInViewController:(HUBViewController *)viewController",
        "path": "include/HubFramework/HUBViewControllerScrollHandler.h",
        "position": 12,
        "original_position": 12,
        "commit_id": "7e43a5c4beebbbcb0eeca0027c5aa19456cc3a66",
        "original_commit_id": "7e43a5c4beebbbcb0eeca0027c5aa19456cc3a66",
        "user": {
            "login": "Lumenela",
            "id": 1918818,
            "node_id": "MDQ6VXNlcjE5MTg4MTg=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1918818?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Lumenela",
            "html_url": "https://github.com/Lumenela",
            "followers_url": "https://api.github.com/users/Lumenela/followers",
            "following_url": "https://api.github.com/users/Lumenela/following{/other_user}",
            "gists_url": "https://api.github.com/users/Lumenela/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Lumenela/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Lumenela/subscriptions",
            "organizations_url": "https://api.github.com/users/Lumenela/orgs",
            "repos_url": "https://api.github.com/users/Lumenela/repos",
            "events_url": "https://api.github.com/users/Lumenela/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Lumenela/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@JohnSundell What do you think about it?",
        "created_at": "2016-12-14T09:53:30Z",
        "updated_at": "2016-12-14T09:53:30Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/237#discussion_r92356187",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/237",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/92356187"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/237#discussion_r92356187"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/237"
            }
        },
        "in_reply_to_id": 92356105
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/92356854",
        "pull_request_review_id": 12869307,
        "id": 92356854,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkyMzU2ODU0",
        "diff_hunk": "@@ -78,6 +78,17 @@\n - (UIEdgeInsets)contentInsetsForViewController:(HUBViewController *)viewController\n                          proposedContentInsets:(UIEdgeInsets)proposedContentInsets;\n \n+\n+/**\n+ *  Return the center point of an overlay coponent used in a view controller\n+ *\n+ *  @param viewController The view controller in question\n+ *  @param proposedCenterPoint The center point that the Hub Framework is proposing\n+ *\n+ */\n+- (CGPoint)centerPointForOverlayComponentInViewController:(HUBViewController *)viewController",
        "path": "include/HubFramework/HUBViewControllerScrollHandler.h",
        "position": 12,
        "original_position": 12,
        "commit_id": "7e43a5c4beebbbcb0eeca0027c5aa19456cc3a66",
        "original_commit_id": "7e43a5c4beebbbcb0eeca0027c5aa19456cc3a66",
        "user": {
            "login": "krris",
            "id": 1786612,
            "node_id": "MDQ6VXNlcjE3ODY2MTI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1786612?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krris",
            "html_url": "https://github.com/krris",
            "followers_url": "https://api.github.com/users/krris/followers",
            "following_url": "https://api.github.com/users/krris/following{/other_user}",
            "gists_url": "https://api.github.com/users/krris/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krris/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krris/subscriptions",
            "organizations_url": "https://api.github.com/users/krris/orgs",
            "repos_url": "https://api.github.com/users/krris/repos",
            "events_url": "https://api.github.com/users/krris/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krris/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@Lumenela So what would you recommend to do?",
        "created_at": "2016-12-14T09:56:45Z",
        "updated_at": "2016-12-14T09:56:45Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/237#discussion_r92356854",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/237",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/92356854"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/237#discussion_r92356854"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/237"
            }
        },
        "in_reply_to_id": 92356105
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/92365014",
        "pull_request_review_id": 12877749,
        "id": 92365014,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkyMzY1MDE0",
        "diff_hunk": "@@ -78,6 +78,17 @@\n - (UIEdgeInsets)contentInsetsForViewController:(HUBViewController *)viewController\n                          proposedContentInsets:(UIEdgeInsets)proposedContentInsets;\n \n+\n+/**\n+ *  Return the center point of an overlay coponent used in a view controller\n+ *\n+ *  @param viewController The view controller in question\n+ *  @param proposedCenterPoint The center point that the Hub Framework is proposing\n+ *\n+ */\n+- (CGPoint)centerPointForOverlayComponentInViewController:(HUBViewController *)viewController",
        "path": "include/HubFramework/HUBViewControllerScrollHandler.h",
        "position": 12,
        "original_position": 12,
        "commit_id": "7e43a5c4beebbbcb0eeca0027c5aa19456cc3a66",
        "original_commit_id": "7e43a5c4beebbbcb0eeca0027c5aa19456cc3a66",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I totally agree with @Lumenela, I don't see how this has anything to do with scrolling. We want to stick to the single responsibility principle as much as possible.",
        "created_at": "2016-12-14T10:33:07Z",
        "updated_at": "2016-12-14T10:33:07Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/237#discussion_r92365014",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/237",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/92365014"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/237#discussion_r92365014"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/237"
            }
        },
        "in_reply_to_id": 92356105
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/92365078",
        "pull_request_review_id": 12877804,
        "id": 92365078,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkyMzY1MDc4",
        "diff_hunk": "@@ -78,6 +78,17 @@\n - (UIEdgeInsets)contentInsetsForViewController:(HUBViewController *)viewController\n                          proposedContentInsets:(UIEdgeInsets)proposedContentInsets;\n \n+\n+/**\n+ *  Return the center point of an overlay coponent used in a view controller\n+ *\n+ *  @param viewController The view controller in question\n+ *  @param proposedCenterPoint The center point that the Hub Framework is proposing\n+ *\n+ */\n+- (CGPoint)centerPointForOverlayComponentInViewController:(HUBViewController *)viewController",
        "path": "include/HubFramework/HUBViewControllerScrollHandler.h",
        "position": 12,
        "original_position": 12,
        "commit_id": "7e43a5c4beebbbcb0eeca0027c5aa19456cc3a66",
        "original_commit_id": "7e43a5c4beebbbcb0eeca0027c5aa19456cc3a66",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@krris What problem is it that you want to solve?",
        "created_at": "2016-12-14T10:33:26Z",
        "updated_at": "2016-12-14T10:33:26Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/237#discussion_r92365078",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/237",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/92365078"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/237#discussion_r92365078"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/237"
            }
        },
        "in_reply_to_id": 92356105
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/92371516",
        "pull_request_review_id": 12884496,
        "id": 92371516,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkyMzcxNTE2",
        "diff_hunk": "@@ -78,6 +78,17 @@\n - (UIEdgeInsets)contentInsetsForViewController:(HUBViewController *)viewController\n                          proposedContentInsets:(UIEdgeInsets)proposedContentInsets;\n \n+\n+/**\n+ *  Return the center point of an overlay coponent used in a view controller\n+ *\n+ *  @param viewController The view controller in question\n+ *  @param proposedCenterPoint The center point that the Hub Framework is proposing\n+ *\n+ */\n+- (CGPoint)centerPointForOverlayComponentInViewController:(HUBViewController *)viewController",
        "path": "include/HubFramework/HUBViewControllerScrollHandler.h",
        "position": 12,
        "original_position": 12,
        "commit_id": "7e43a5c4beebbbcb0eeca0027c5aa19456cc3a66",
        "original_commit_id": "7e43a5c4beebbbcb0eeca0027c5aa19456cc3a66",
        "user": {
            "login": "krris",
            "id": 1786612,
            "node_id": "MDQ6VXNlcjE3ODY2MTI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1786612?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krris",
            "html_url": "https://github.com/krris",
            "followers_url": "https://api.github.com/users/krris/followers",
            "following_url": "https://api.github.com/users/krris/following{/other_user}",
            "gists_url": "https://api.github.com/users/krris/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krris/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krris/subscriptions",
            "organizations_url": "https://api.github.com/users/krris/orgs",
            "repos_url": "https://api.github.com/users/krris/repos",
            "events_url": "https://api.github.com/users/krris/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krris/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@JohnSundell I want to center an overlay component when the keyboard is visible. Probably this approach is not the best.\r\n\r\n I've just looked at the code once more again. I'm not sure if the following function in `HubViewController` works just like it should:\r\n```\r\n- (CGPoint)overlayComponentCenterPoint\r\n{\r\n    CGRect frame = self.view.bounds;\r\n    frame.origin.y = self.collectionView.contentInset.top;\r\n    frame.size.height -= self.visibleKeyboardHeight + CGRectGetMinY(frame);\r\n\r\n    CGPoint proposedCenterPoint = CGPointMake(CGRectGetMidX(frame), CGRectGetMidY(frame));\r\n    return [self.scrollHandler centerPointForOverlayComponentInViewController:self\r\n                                                          proposedCenterPoint:proposedCenterPoint];\r\n}\r\n```\r\nIt doesn't compute correctly middle point if the keyboard is visible. Removing following lines would sort this problem because view automatically changes its size if the keyboard is displayed. \r\n```\r\n    frame.origin.y = self.collectionView.contentInset.top;\r\n    frame.size.height -= self.visibleKeyboardHeight + CGRectGetMinY(frame);\r\n```\r\n\r\n**Edit**\r\nOk. I've checked DemoApp and centering an overlay component works fine there. Probably we have an error somewhere in integration layer in our app. It's need more investigation.",
        "created_at": "2016-12-14T11:11:01Z",
        "updated_at": "2016-12-14T11:52:32Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/237#discussion_r92371516",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/237",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/92371516"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/237#discussion_r92371516"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/237"
            }
        },
        "in_reply_to_id": 92356105
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/92603261",
        "pull_request_review_id": 13121582,
        "id": 92603261,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkyNjAzMjYx",
        "diff_hunk": "@@ -1051,7 +1051,10 @@ - (CGPoint)overlayComponentCenterPoint\n     CGRect frame = self.view.bounds;\n     frame.origin.y = self.collectionView.contentInset.top;\n     frame.size.height -= self.visibleKeyboardHeight + CGRectGetMinY(frame);\n-    return CGPointMake(CGRectGetMidX(frame), CGRectGetMidY(frame));\n+\n+    CGPoint proposedCenterPoint = CGPointMake(CGRectGetMidX(frame), CGRectGetMidY(frame));\n+    return [self.delegate centerPointForOverlayComponentInViewController:self",
        "path": "sources/HUBViewController.m",
        "position": null,
        "original_position": 7,
        "commit_id": "dec29780182ee280486ef1960ab9b4b2ac07b65c",
        "original_commit_id": "0cd0369fab2abd8c2d030e0ac7d6855465e59664",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "If the delegate is `nil` this will return `CGPointZero`, which is not what we want :)",
        "created_at": "2016-12-15T12:55:59Z",
        "updated_at": "2016-12-15T13:48:02Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/243#discussion_r92603261",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/243",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/92603261"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/243#discussion_r92603261"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/243"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/92603766",
        "pull_request_review_id": 13122144,
        "id": 92603766,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkyNjAzNzY2",
        "diff_hunk": "@@ -1051,7 +1051,10 @@ - (CGPoint)overlayComponentCenterPoint\n     CGRect frame = self.view.bounds;\n     frame.origin.y = self.collectionView.contentInset.top;\n     frame.size.height -= self.visibleKeyboardHeight + CGRectGetMinY(frame);\n-    return CGPointMake(CGRectGetMidX(frame), CGRectGetMidY(frame));\n+\n+    CGPoint proposedCenterPoint = CGPointMake(CGRectGetMidX(frame), CGRectGetMidY(frame));\n+    return [self.delegate centerPointForOverlayComponentInViewController:self",
        "path": "sources/HUBViewController.m",
        "position": null,
        "original_position": 7,
        "commit_id": "dec29780182ee280486ef1960ab9b4b2ac07b65c",
        "original_commit_id": "0cd0369fab2abd8c2d030e0ac7d6855465e59664",
        "user": {
            "login": "krris",
            "id": 1786612,
            "node_id": "MDQ6VXNlcjE3ODY2MTI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1786612?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krris",
            "html_url": "https://github.com/krris",
            "followers_url": "https://api.github.com/users/krris/followers",
            "following_url": "https://api.github.com/users/krris/following{/other_user}",
            "gists_url": "https://api.github.com/users/krris/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krris/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krris/subscriptions",
            "organizations_url": "https://api.github.com/users/krris/orgs",
            "repos_url": "https://api.github.com/users/krris/repos",
            "events_url": "https://api.github.com/users/krris/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krris/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Right. I'll fix that.",
        "created_at": "2016-12-15T12:59:40Z",
        "updated_at": "2016-12-15T13:48:02Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/243#discussion_r92603766",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/243",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/92603766"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/243#discussion_r92603766"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/243"
            }
        },
        "in_reply_to_id": 92603261
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/93097177",
        "pull_request_review_id": 13618875,
        "id": 93097177,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkzMDk3MTc3",
        "diff_hunk": "@@ -0,0 +1,63 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import <Foundation/Foundation.h>\n+\n+NS_ASSUME_NONNULL_BEGIN\n+\n+#pragma mark - JSON Serialization Errors\n+\n+#pragma mark Error Domain\n+/// Error domain for JSON serialization errors.\n+static NSErrorDomain const HUBJSONSerializationErrorDomain = @\"com.spotify.hubframework.json-serialization\";",
        "path": "include/HubFramework/HUBErrors.h",
        "position": null,
        "original_position": 30,
        "commit_id": "9dcab418bf54e55f2e31ed834b5a0e8a43f7aeca",
        "original_commit_id": "37d518554b60b938c6e89f127555768e189f2283",
        "user": {
            "login": "8W9aG",
            "id": 2834638,
            "node_id": "MDQ6VXNlcjI4MzQ2Mzg=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/2834638?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/8W9aG",
            "html_url": "https://github.com/8W9aG",
            "followers_url": "https://api.github.com/users/8W9aG/followers",
            "following_url": "https://api.github.com/users/8W9aG/following{/other_user}",
            "gists_url": "https://api.github.com/users/8W9aG/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/8W9aG/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/8W9aG/subscriptions",
            "organizations_url": "https://api.github.com/users/8W9aG/orgs",
            "repos_url": "https://api.github.com/users/8W9aG/repos",
            "events_url": "https://api.github.com/users/8W9aG/events{/privacy}",
            "received_events_url": "https://api.github.com/users/8W9aG/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Shouldn't this be an extern const?",
        "created_at": "2016-12-19T19:03:40Z",
        "updated_at": "2016-12-20T14:31:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/246#discussion_r93097177",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/246",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/93097177"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/246#discussion_r93097177"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/246"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/93098949",
        "pull_request_review_id": 13620724,
        "id": 93098949,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkzMDk4OTQ5",
        "diff_hunk": "@@ -0,0 +1,63 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import <Foundation/Foundation.h>\n+\n+NS_ASSUME_NONNULL_BEGIN\n+\n+#pragma mark - JSON Serialization Errors\n+\n+#pragma mark Error Domain\n+/// Error domain for JSON serialization errors.\n+static NSErrorDomain const HUBJSONSerializationErrorDomain = @\"com.spotify.hubframework.json-serialization\";",
        "path": "include/HubFramework/HUBErrors.h",
        "position": null,
        "original_position": 30,
        "commit_id": "9dcab418bf54e55f2e31ed834b5a0e8a43f7aeca",
        "original_commit_id": "37d518554b60b938c6e89f127555768e189f2283",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I was thinking that too, but then all string constants were static. So followed the same pattern. That said I think it\u2019d make sense to change to extern const. Can do so here.",
        "created_at": "2016-12-19T19:12:46Z",
        "updated_at": "2016-12-20T14:31:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/246#discussion_r93098949",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/246",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/93098949"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/246#discussion_r93098949"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/246"
            }
        },
        "in_reply_to_id": 93097177
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/93430575",
        "pull_request_review_id": 13957096,
        "id": 93430575,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkzNDMwNTc1",
        "diff_hunk": "@@ -0,0 +1,92 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import \"HUBOperationQueue.h\"\n+",
        "path": "sources/HUBOperationQueue.m",
        "position": 23,
        "original_position": 23,
        "commit_id": "94208ee3990fae99007d14bd2d344a5a8d65f27a",
        "original_commit_id": "7163797795ffdf2b67299476935c1cfb63ec3c99",
        "user": {
            "login": "ynmehel",
            "id": 638741,
            "node_id": "MDQ6VXNlcjYzODc0MQ==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/638741?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ynmehel",
            "html_url": "https://github.com/ynmehel",
            "followers_url": "https://api.github.com/users/ynmehel/followers",
            "following_url": "https://api.github.com/users/ynmehel/following{/other_user}",
            "gists_url": "https://api.github.com/users/ynmehel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ynmehel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ynmehel/subscriptions",
            "organizations_url": "https://api.github.com/users/ynmehel/orgs",
            "repos_url": "https://api.github.com/users/ynmehel/repos",
            "events_url": "https://api.github.com/users/ynmehel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ynmehel/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Is the line between import statements intentional here? Can be removed otherwise",
        "created_at": "2016-12-21T12:37:49Z",
        "updated_at": "2016-12-21T13:01:08Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/251#discussion_r93430575",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/251",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/93430575"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/251#discussion_r93430575"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/251"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/93431590",
        "pull_request_review_id": 13958134,
        "id": 93431590,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkzNDMxNTkw",
        "diff_hunk": "@@ -0,0 +1,92 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import \"HUBOperationQueue.h\"\n+\n+#import \"HUBOperation.h\"\n+\n+NS_ASSUME_NONNULL_BEGIN\n+\n+@interface HUBOperationQueue ()\n+\n+@property (nonatomic, strong, readonly) NSMutableArray<HUBOperation *> *operations;\n+\n+@end\n+\n+@implementation HUBOperationQueue\n+\n+#pragma mark - Initializer\n+\n+- (instancetype)init\n+{\n+    self = [super init];\n+    \n+    if (self) {\n+        _operations = [NSMutableArray new];\n+    }\n+    \n+    return self;\n+}\n+\n+#pragma mark - API\n+\n+- (void)addOperation:(HUBOperation *)operation\n+{\n+    [self addOperations:@[operation]];\n+}\n+\n+- (void)addOperations:(NSArray<HUBOperation *> *)operations\n+{\n+    BOOL shouldPerformFirstOperation = (self.operations.count == 0);\n+    [self.operations addObjectsFromArray:operations];\n+    \n+    if (shouldPerformFirstOperation) {\n+        [self performFirstOperation];\n+    }\n+}\n+\n+#pragma mark - Private utilities\n+\n+- (void)performFirstOperation\n+{\n+    HUBOperation * const operation = self.operations.firstObject;\n+    \n+    if (operation == nil) {\n+        return;\n+    }\n+    \n+    __weak __typeof(self) weakSelf = self;\n+    \n+    [operation performWithCompletionHandler:^{\n+        __typeof(self) strongSelf = weakSelf;\n+        \n+        if (strongSelf == nil) {\n+            return;\n+        }\n+        \n+        [strongSelf.operations removeObjectAtIndex:0];",
        "path": "sources/HUBOperationQueue.m",
        "position": null,
        "original_position": 85,
        "commit_id": "94208ee3990fae99007d14bd2d344a5a8d65f27a",
        "original_commit_id": "7163797795ffdf2b67299476935c1cfb63ec3c99",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Perhaps we should use a more thread-safe way of manipulating the operation queue here, as we could technically insert an operation on the main queue while simultaneously popping one in the completion handler (which, I assume, is up to the asynchronous block to call on whichever thread it pleases?).",
        "created_at": "2016-12-21T12:45:41Z",
        "updated_at": "2016-12-21T13:01:08Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/251#discussion_r93431590",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/251",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/93431590"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/251#discussion_r93431590"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/251"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/93432526",
        "pull_request_review_id": 13959040,
        "id": 93432526,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkzNDMyNTI2",
        "diff_hunk": "@@ -0,0 +1,92 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import \"HUBOperationQueue.h\"\n+\n+#import \"HUBOperation.h\"\n+\n+NS_ASSUME_NONNULL_BEGIN\n+\n+@interface HUBOperationQueue ()\n+\n+@property (nonatomic, strong, readonly) NSMutableArray<HUBOperation *> *operations;\n+\n+@end\n+\n+@implementation HUBOperationQueue\n+\n+#pragma mark - Initializer\n+\n+- (instancetype)init\n+{\n+    self = [super init];\n+    \n+    if (self) {\n+        _operations = [NSMutableArray new];\n+    }\n+    \n+    return self;\n+}\n+\n+#pragma mark - API\n+\n+- (void)addOperation:(HUBOperation *)operation\n+{\n+    [self addOperations:@[operation]];\n+}\n+\n+- (void)addOperations:(NSArray<HUBOperation *> *)operations\n+{\n+    BOOL shouldPerformFirstOperation = (self.operations.count == 0);\n+    [self.operations addObjectsFromArray:operations];\n+    \n+    if (shouldPerformFirstOperation) {\n+        [self performFirstOperation];\n+    }\n+}\n+\n+#pragma mark - Private utilities\n+\n+- (void)performFirstOperation\n+{\n+    HUBOperation * const operation = self.operations.firstObject;\n+    \n+    if (operation == nil) {\n+        return;\n+    }\n+    \n+    __weak __typeof(self) weakSelf = self;\n+    \n+    [operation performWithCompletionHandler:^{\n+        __typeof(self) strongSelf = weakSelf;\n+        \n+        if (strongSelf == nil) {\n+            return;\n+        }\n+        \n+        [strongSelf.operations removeObjectAtIndex:0];",
        "path": "sources/HUBOperationQueue.m",
        "position": null,
        "original_position": 85,
        "commit_id": "94208ee3990fae99007d14bd2d344a5a8d65f27a",
        "original_commit_id": "7163797795ffdf2b67299476935c1cfb63ec3c99",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "`HUBOperationQueue` is designed to be single theaded for now though. But could wrap it in `HUBPerformOnMainQueue` to guard us if any background operations are introduced in the future.",
        "created_at": "2016-12-21T12:52:48Z",
        "updated_at": "2016-12-21T13:01:08Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/251#discussion_r93432526",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/251",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/93432526"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/251#discussion_r93432526"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/251"
            }
        },
        "in_reply_to_id": 93431590
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/93432622",
        "pull_request_review_id": 13959139,
        "id": 93432622,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkzNDMyNjIy",
        "diff_hunk": "@@ -0,0 +1,92 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import \"HUBOperationQueue.h\"\n+",
        "path": "sources/HUBOperationQueue.m",
        "position": 23,
        "original_position": 23,
        "commit_id": "94208ee3990fae99007d14bd2d344a5a8d65f27a",
        "original_commit_id": "7163797795ffdf2b67299476935c1cfb63ec3c99",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yeah, it's intentional. The first is the header matching the implementation file, the second is the first dependency \ud83d\ude42 ",
        "created_at": "2016-12-21T12:53:34Z",
        "updated_at": "2016-12-21T13:01:08Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/251#discussion_r93432622",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/251",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/93432622"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/251#discussion_r93432622"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/251"
            }
        },
        "in_reply_to_id": 93430575
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/93433235",
        "pull_request_review_id": 13959795,
        "id": 93433235,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkzNDMzMjM1",
        "diff_hunk": "@@ -0,0 +1,92 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import \"HUBOperationQueue.h\"\n+\n+#import \"HUBOperation.h\"\n+\n+NS_ASSUME_NONNULL_BEGIN\n+\n+@interface HUBOperationQueue ()\n+\n+@property (nonatomic, strong, readonly) NSMutableArray<HUBOperation *> *operations;\n+\n+@end\n+\n+@implementation HUBOperationQueue\n+\n+#pragma mark - Initializer\n+\n+- (instancetype)init\n+{\n+    self = [super init];\n+    \n+    if (self) {\n+        _operations = [NSMutableArray new];\n+    }\n+    \n+    return self;\n+}\n+\n+#pragma mark - API\n+\n+- (void)addOperation:(HUBOperation *)operation\n+{\n+    [self addOperations:@[operation]];\n+}\n+\n+- (void)addOperations:(NSArray<HUBOperation *> *)operations\n+{\n+    BOOL shouldPerformFirstOperation = (self.operations.count == 0);\n+    [self.operations addObjectsFromArray:operations];\n+    \n+    if (shouldPerformFirstOperation) {\n+        [self performFirstOperation];\n+    }\n+}\n+\n+#pragma mark - Private utilities\n+\n+- (void)performFirstOperation\n+{\n+    HUBOperation * const operation = self.operations.firstObject;\n+    \n+    if (operation == nil) {\n+        return;\n+    }\n+    \n+    __weak __typeof(self) weakSelf = self;\n+    \n+    [operation performWithCompletionHandler:^{\n+        __typeof(self) strongSelf = weakSelf;\n+        \n+        if (strongSelf == nil) {\n+            return;\n+        }\n+        \n+        [strongSelf.operations removeObjectAtIndex:0];",
        "path": "sources/HUBOperationQueue.m",
        "position": null,
        "original_position": 85,
        "commit_id": "94208ee3990fae99007d14bd2d344a5a8d65f27a",
        "original_commit_id": "7163797795ffdf2b67299476935c1cfb63ec3c99",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ah right. But yeah, that sounds great if we plan on using the HUBOperationQueue for other things in the future \ud83d\udc4d ",
        "created_at": "2016-12-21T12:58:36Z",
        "updated_at": "2016-12-21T13:01:08Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/251#discussion_r93433235",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/251",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/93433235"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/251#discussion_r93433235"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/251"
            }
        },
        "in_reply_to_id": 93431590
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/93433581",
        "pull_request_review_id": 13960165,
        "id": 93433581,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkzNDMzNTgx",
        "diff_hunk": "@@ -0,0 +1,92 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import \"HUBOperationQueue.h\"\n+\n+#import \"HUBOperation.h\"\n+\n+NS_ASSUME_NONNULL_BEGIN\n+\n+@interface HUBOperationQueue ()\n+\n+@property (nonatomic, strong, readonly) NSMutableArray<HUBOperation *> *operations;\n+\n+@end\n+\n+@implementation HUBOperationQueue\n+\n+#pragma mark - Initializer\n+\n+- (instancetype)init\n+{\n+    self = [super init];\n+    \n+    if (self) {\n+        _operations = [NSMutableArray new];\n+    }\n+    \n+    return self;\n+}\n+\n+#pragma mark - API\n+\n+- (void)addOperation:(HUBOperation *)operation\n+{\n+    [self addOperations:@[operation]];\n+}\n+\n+- (void)addOperations:(NSArray<HUBOperation *> *)operations\n+{\n+    BOOL shouldPerformFirstOperation = (self.operations.count == 0);\n+    [self.operations addObjectsFromArray:operations];\n+    \n+    if (shouldPerformFirstOperation) {\n+        [self performFirstOperation];\n+    }\n+}\n+\n+#pragma mark - Private utilities\n+\n+- (void)performFirstOperation\n+{\n+    HUBOperation * const operation = self.operations.firstObject;\n+    \n+    if (operation == nil) {\n+        return;\n+    }\n+    \n+    __weak __typeof(self) weakSelf = self;\n+    \n+    [operation performWithCompletionHandler:^{\n+        __typeof(self) strongSelf = weakSelf;\n+        \n+        if (strongSelf == nil) {\n+            return;\n+        }\n+        \n+        [strongSelf.operations removeObjectAtIndex:0];",
        "path": "sources/HUBOperationQueue.m",
        "position": null,
        "original_position": 85,
        "commit_id": "94208ee3990fae99007d14bd2d344a5a8d65f27a",
        "original_commit_id": "7163797795ffdf2b67299476935c1cfb63ec3c99",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Added this: https://github.com/spotify/HubFramework/pull/251/commits/94208ee3990fae99007d14bd2d344a5a8d65f27a \ud83d\ude04 ",
        "created_at": "2016-12-21T13:01:35Z",
        "updated_at": "2016-12-21T13:01:36Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/251#discussion_r93433581",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/251",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/93433581"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/251#discussion_r93433581"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/251"
            }
        },
        "in_reply_to_id": 93431590
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/93434121",
        "pull_request_review_id": 13960779,
        "id": 93434121,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkzNDM0MTIx",
        "diff_hunk": "@@ -0,0 +1,92 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import \"HUBOperationQueue.h\"\n+\n+#import \"HUBOperation.h\"\n+\n+NS_ASSUME_NONNULL_BEGIN\n+\n+@interface HUBOperationQueue ()\n+\n+@property (nonatomic, strong, readonly) NSMutableArray<HUBOperation *> *operations;\n+\n+@end\n+\n+@implementation HUBOperationQueue\n+\n+#pragma mark - Initializer\n+\n+- (instancetype)init\n+{\n+    self = [super init];\n+    \n+    if (self) {\n+        _operations = [NSMutableArray new];\n+    }\n+    \n+    return self;\n+}\n+\n+#pragma mark - API\n+\n+- (void)addOperation:(HUBOperation *)operation\n+{\n+    [self addOperations:@[operation]];\n+}\n+\n+- (void)addOperations:(NSArray<HUBOperation *> *)operations\n+{\n+    BOOL shouldPerformFirstOperation = (self.operations.count == 0);\n+    [self.operations addObjectsFromArray:operations];\n+    \n+    if (shouldPerformFirstOperation) {\n+        [self performFirstOperation];\n+    }\n+}\n+\n+#pragma mark - Private utilities\n+\n+- (void)performFirstOperation\n+{\n+    HUBOperation * const operation = self.operations.firstObject;\n+    \n+    if (operation == nil) {\n+        return;\n+    }\n+    \n+    __weak __typeof(self) weakSelf = self;\n+    \n+    [operation performWithCompletionHandler:^{\n+        __typeof(self) strongSelf = weakSelf;\n+        \n+        if (strongSelf == nil) {\n+            return;\n+        }\n+        \n+        [strongSelf.operations removeObjectAtIndex:0];",
        "path": "sources/HUBOperationQueue.m",
        "position": null,
        "original_position": 85,
        "commit_id": "94208ee3990fae99007d14bd2d344a5a8d65f27a",
        "original_commit_id": "7163797795ffdf2b67299476935c1cfb63ec3c99",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\ud83d\udc4c \ud83d\udc4c ",
        "created_at": "2016-12-21T13:06:25Z",
        "updated_at": "2016-12-21T13:06:25Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/251#discussion_r93434121",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/251",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/93434121"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/251#discussion_r93434121"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/251"
            }
        },
        "in_reply_to_id": 93431590
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/93636557",
        "pull_request_review_id": 14168239,
        "id": 93636557,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkzNjM2NTU3",
        "diff_hunk": "@@ -58,7 +58,7 @@ - (void)testRegisteringFactoryAndCreatingAction\n     HUBActionFactoryMock * const factory = [[HUBActionFactoryMock alloc] initWithActions:@{actionIdentifier.namePart: action}];\n     [self.actionRegistry registerActionFactory:factory forNamespace:actionIdentifier.namespacePart];\n     \n-    XCTAssertEqual([self.actionRegistry createCustomActionForIdentifier:actionIdentifier], action);\n+    XCTAssertEqualObjects([self.actionRegistry createCustomActionForIdentifier:actionIdentifier], action);",
        "path": "tests/HUBActionRegistryTests.m",
        "position": null,
        "original_position": 5,
        "commit_id": "fd6d6edb83e0ad6cdcfa75372829c90cd002b98a",
        "original_commit_id": "bb2606253b7ef8c6a19b78bb66621a8597e3cc6b",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Here we actually want to make sure that the objects are the same **instance** so `XCTAssertEqual` should be used.",
        "created_at": "2016-12-22T14:55:45Z",
        "updated_at": "2016-12-22T15:07:12Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/259#discussion_r93636557",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/259",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/93636557"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/259#discussion_r93636557"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/259"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/93637854",
        "pull_request_review_id": 14169597,
        "id": 93637854,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkzNjM3ODU0",
        "diff_hunk": "@@ -58,7 +58,7 @@ - (void)testRegisteringFactoryAndCreatingAction\n     HUBActionFactoryMock * const factory = [[HUBActionFactoryMock alloc] initWithActions:@{actionIdentifier.namePart: action}];\n     [self.actionRegistry registerActionFactory:factory forNamespace:actionIdentifier.namespacePart];\n     \n-    XCTAssertEqual([self.actionRegistry createCustomActionForIdentifier:actionIdentifier], action);\n+    XCTAssertEqualObjects([self.actionRegistry createCustomActionForIdentifier:actionIdentifier], action);",
        "path": "tests/HUBActionRegistryTests.m",
        "position": null,
        "original_position": 5,
        "commit_id": "fd6d6edb83e0ad6cdcfa75372829c90cd002b98a",
        "original_commit_id": "bb2606253b7ef8c6a19b78bb66621a8597e3cc6b",
        "user": {
            "login": "cerihughes",
            "id": 12008876,
            "node_id": "MDQ6VXNlcjEyMDA4ODc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12008876?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cerihughes",
            "html_url": "https://github.com/cerihughes",
            "followers_url": "https://api.github.com/users/cerihughes/followers",
            "following_url": "https://api.github.com/users/cerihughes/following{/other_user}",
            "gists_url": "https://api.github.com/users/cerihughes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cerihughes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cerihughes/subscriptions",
            "organizations_url": "https://api.github.com/users/cerihughes/orgs",
            "repos_url": "https://api.github.com/users/cerihughes/repos",
            "events_url": "https://api.github.com/users/cerihughes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cerihughes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I wonder if we should use `XCTAssertTrue([self.actionRegistry createCustomActionForIdentifier:actionIdentifier] == action)` for that then, just to be explicit about it.",
        "created_at": "2016-12-22T15:03:18Z",
        "updated_at": "2016-12-22T15:07:12Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/259#discussion_r93637854",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/259",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/93637854"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/259#discussion_r93637854"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/259"
            }
        },
        "in_reply_to_id": 93636557
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/93637917",
        "pull_request_review_id": 14169666,
        "id": 93637917,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkzNjM3OTE3",
        "diff_hunk": "@@ -58,7 +58,7 @@ - (void)testRegisteringFactoryAndCreatingAction\n     HUBActionFactoryMock * const factory = [[HUBActionFactoryMock alloc] initWithActions:@{actionIdentifier.namePart: action}];\n     [self.actionRegistry registerActionFactory:factory forNamespace:actionIdentifier.namespacePart];\n     \n-    XCTAssertEqual([self.actionRegistry createCustomActionForIdentifier:actionIdentifier], action);\n+    XCTAssertEqualObjects([self.actionRegistry createCustomActionForIdentifier:actionIdentifier], action);",
        "path": "tests/HUBActionRegistryTests.m",
        "position": null,
        "original_position": 5,
        "commit_id": "fd6d6edb83e0ad6cdcfa75372829c90cd002b98a",
        "original_commit_id": "bb2606253b7ef8c6a19b78bb66621a8597e3cc6b",
        "user": {
            "login": "cerihughes",
            "id": 12008876,
            "node_id": "MDQ6VXNlcjEyMDA4ODc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12008876?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cerihughes",
            "html_url": "https://github.com/cerihughes",
            "followers_url": "https://api.github.com/users/cerihughes/followers",
            "following_url": "https://api.github.com/users/cerihughes/following{/other_user}",
            "gists_url": "https://api.github.com/users/cerihughes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cerihughes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cerihughes/subscriptions",
            "organizations_url": "https://api.github.com/users/cerihughes/orgs",
            "repos_url": "https://api.github.com/users/cerihughes/repos",
            "events_url": "https://api.github.com/users/cerihughes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cerihughes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Hamcrest has a \"same instance\" matcher that is good for these scenarios. XCTest doesn't seem to though :(",
        "created_at": "2016-12-22T15:03:42Z",
        "updated_at": "2016-12-22T15:07:12Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/259#discussion_r93637917",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/259",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/93637917"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/259#discussion_r93637917"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/259"
            }
        },
        "in_reply_to_id": 93636557
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/93638121",
        "pull_request_review_id": 14169881,
        "id": 93638121,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkzNjM4MTIx",
        "diff_hunk": "@@ -58,7 +58,7 @@ - (void)testRegisteringFactoryAndCreatingAction\n     HUBActionFactoryMock * const factory = [[HUBActionFactoryMock alloc] initWithActions:@{actionIdentifier.namePart: action}];\n     [self.actionRegistry registerActionFactory:factory forNamespace:actionIdentifier.namespacePart];\n     \n-    XCTAssertEqual([self.actionRegistry createCustomActionForIdentifier:actionIdentifier], action);\n+    XCTAssertEqualObjects([self.actionRegistry createCustomActionForIdentifier:actionIdentifier], action);",
        "path": "tests/HUBActionRegistryTests.m",
        "position": null,
        "original_position": 5,
        "commit_id": "fd6d6edb83e0ad6cdcfa75372829c90cd002b98a",
        "original_commit_id": "bb2606253b7ef8c6a19b78bb66621a8597e3cc6b",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Isn't it more explicit to use `XCTAssertEqual` that does exactly that? \ud83d\ude05 ",
        "created_at": "2016-12-22T15:04:53Z",
        "updated_at": "2016-12-22T15:07:12Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/259#discussion_r93638121",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/259",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/93638121"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/259#discussion_r93638121"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/259"
            }
        },
        "in_reply_to_id": 93636557
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/93639114",
        "pull_request_review_id": 14170970,
        "id": 93639114,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkzNjM5MTE0",
        "diff_hunk": "@@ -58,7 +58,7 @@ - (void)testRegisteringFactoryAndCreatingAction\n     HUBActionFactoryMock * const factory = [[HUBActionFactoryMock alloc] initWithActions:@{actionIdentifier.namePart: action}];\n     [self.actionRegistry registerActionFactory:factory forNamespace:actionIdentifier.namespacePart];\n     \n-    XCTAssertEqual([self.actionRegistry createCustomActionForIdentifier:actionIdentifier], action);\n+    XCTAssertEqualObjects([self.actionRegistry createCustomActionForIdentifier:actionIdentifier], action);",
        "path": "tests/HUBActionRegistryTests.m",
        "position": null,
        "original_position": 5,
        "commit_id": "fd6d6edb83e0ad6cdcfa75372829c90cd002b98a",
        "original_commit_id": "bb2606253b7ef8c6a19b78bb66621a8597e3cc6b",
        "user": {
            "login": "cerihughes",
            "id": 12008876,
            "node_id": "MDQ6VXNlcjEyMDA4ODc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12008876?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cerihughes",
            "html_url": "https://github.com/cerihughes",
            "followers_url": "https://api.github.com/users/cerihughes/followers",
            "following_url": "https://api.github.com/users/cerihughes/following{/other_user}",
            "gists_url": "https://api.github.com/users/cerihughes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cerihughes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cerihughes/subscriptions",
            "organizations_url": "https://api.github.com/users/cerihughes/orgs",
            "repos_url": "https://api.github.com/users/cerihughes/repos",
            "events_url": "https://api.github.com/users/cerihughes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cerihughes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yeah, possibly. I have a problem with `XCTAssertEqual` as it's often misused, and people often aren't asserting what they think. If you *do* want to test instance equality, then using `XCTAssertEqual` just feels wrong as actually tests \"more\" than equality.",
        "created_at": "2016-12-22T15:10:48Z",
        "updated_at": "2016-12-22T15:10:48Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/259#discussion_r93639114",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/259",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/93639114"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/259#discussion_r93639114"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/259"
            }
        },
        "in_reply_to_id": 93636557
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/93639223",
        "pull_request_review_id": 14171083,
        "id": 93639223,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkzNjM5MjIz",
        "diff_hunk": "@@ -58,7 +58,7 @@ - (void)testRegisteringFactoryAndCreatingAction\n     HUBActionFactoryMock * const factory = [[HUBActionFactoryMock alloc] initWithActions:@{actionIdentifier.namePart: action}];\n     [self.actionRegistry registerActionFactory:factory forNamespace:actionIdentifier.namespacePart];\n     \n-    XCTAssertEqual([self.actionRegistry createCustomActionForIdentifier:actionIdentifier], action);\n+    XCTAssertEqualObjects([self.actionRegistry createCustomActionForIdentifier:actionIdentifier], action);",
        "path": "tests/HUBActionRegistryTests.m",
        "position": null,
        "original_position": 5,
        "commit_id": "fd6d6edb83e0ad6cdcfa75372829c90cd002b98a",
        "original_commit_id": "bb2606253b7ef8c6a19b78bb66621a8597e3cc6b",
        "user": {
            "login": "cerihughes",
            "id": 12008876,
            "node_id": "MDQ6VXNlcjEyMDA4ODc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12008876?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cerihughes",
            "html_url": "https://github.com/cerihughes",
            "followers_url": "https://api.github.com/users/cerihughes/followers",
            "following_url": "https://api.github.com/users/cerihughes/following{/other_user}",
            "gists_url": "https://api.github.com/users/cerihughes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cerihughes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cerihughes/subscriptions",
            "organizations_url": "https://api.github.com/users/cerihughes/orgs",
            "repos_url": "https://api.github.com/users/cerihughes/repos",
            "events_url": "https://api.github.com/users/cerihughes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cerihughes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "If we are testing instance equality `XCTAssertTrue(a == b)` is far more explicit. `XCTAssertEqual` is just too vague and has different behaviour depending on what you pass it, and that irks me :)",
        "created_at": "2016-12-22T15:11:20Z",
        "updated_at": "2016-12-22T15:12:02Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/259#discussion_r93639223",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/259",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/93639223"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/259#discussion_r93639223"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/259"
            }
        },
        "in_reply_to_id": 93636557
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/93641021",
        "pull_request_review_id": 14172955,
        "id": 93641021,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkzNjQxMDIx",
        "diff_hunk": "@@ -57,8 +57,9 @@ - (void)testRegisteringFactoryAndCreatingAction\n     HUBActionMock * const action = [[HUBActionMock alloc] initWithBlock:nil];\n     HUBActionFactoryMock * const factory = [[HUBActionFactoryMock alloc] initWithActions:@{actionIdentifier.namePart: action}];\n     [self.actionRegistry registerActionFactory:factory forNamespace:actionIdentifier.namespacePart];\n-    \n-    XCTAssertEqual([self.actionRegistry createCustomActionForIdentifier:actionIdentifier], action);\n+\n+    // These should be the same instance.\n+    XCTAssertTrue([self.actionRegistry createCustomActionForIdentifier:actionIdentifier] == action);",
        "path": "tests/HUBActionRegistryTests.m",
        "position": 8,
        "original_position": 8,
        "commit_id": "fd6d6edb83e0ad6cdcfa75372829c90cd002b98a",
        "original_commit_id": "fd6d6edb83e0ad6cdcfa75372829c90cd002b98a",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I really fail to understand why this is better than `XCTAssertEqual` which is meant for exactly these type of comparisons.",
        "created_at": "2016-12-22T15:21:23Z",
        "updated_at": "2016-12-22T15:21:27Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/259#discussion_r93641021",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/259",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/93641021"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/259#discussion_r93641021"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/259"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/93641657",
        "pull_request_review_id": 14173620,
        "id": 93641657,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkzNjQxNjU3",
        "diff_hunk": "@@ -57,8 +57,9 @@ - (void)testRegisteringFactoryAndCreatingAction\n     HUBActionMock * const action = [[HUBActionMock alloc] initWithBlock:nil];\n     HUBActionFactoryMock * const factory = [[HUBActionFactoryMock alloc] initWithActions:@{actionIdentifier.namePart: action}];\n     [self.actionRegistry registerActionFactory:factory forNamespace:actionIdentifier.namespacePart];\n-    \n-    XCTAssertEqual([self.actionRegistry createCustomActionForIdentifier:actionIdentifier], action);\n+\n+    // These should be the same instance.\n+    XCTAssertTrue([self.actionRegistry createCustomActionForIdentifier:actionIdentifier] == action);",
        "path": "tests/HUBActionRegistryTests.m",
        "position": 8,
        "original_position": 8,
        "commit_id": "fd6d6edb83e0ad6cdcfa75372829c90cd002b98a",
        "original_commit_id": "fd6d6edb83e0ad6cdcfa75372829c90cd002b98a",
        "user": {
            "login": "JensAyton",
            "id": 34759,
            "node_id": "MDQ6VXNlcjM0NzU5",
            "avatar_url": "https://avatars1.githubusercontent.com/u/34759?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JensAyton",
            "html_url": "https://github.com/JensAyton",
            "followers_url": "https://api.github.com/users/JensAyton/followers",
            "following_url": "https://api.github.com/users/JensAyton/following{/other_user}",
            "gists_url": "https://api.github.com/users/JensAyton/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JensAyton/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JensAyton/subscriptions",
            "organizations_url": "https://api.github.com/users/JensAyton/orgs",
            "repos_url": "https://api.github.com/users/JensAyton/repos",
            "events_url": "https://api.github.com/users/JensAyton/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JensAyton/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I agree with Ceri; `XCTAssertEqual` is a smell for non-scalar types.",
        "created_at": "2016-12-22T15:24:55Z",
        "updated_at": "2016-12-22T15:24:56Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/259#discussion_r93641657",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/259",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/93641657"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/259#discussion_r93641657"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/259"
            }
        },
        "in_reply_to_id": 93641021
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/93643026",
        "pull_request_review_id": 14175001,
        "id": 93643026,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkzNjQzMDI2",
        "diff_hunk": "@@ -57,8 +57,9 @@ - (void)testRegisteringFactoryAndCreatingAction\n     HUBActionMock * const action = [[HUBActionMock alloc] initWithBlock:nil];\n     HUBActionFactoryMock * const factory = [[HUBActionFactoryMock alloc] initWithActions:@{actionIdentifier.namePart: action}];\n     [self.actionRegistry registerActionFactory:factory forNamespace:actionIdentifier.namespacePart];\n-    \n-    XCTAssertEqual([self.actionRegistry createCustomActionForIdentifier:actionIdentifier], action);\n+\n+    // These should be the same instance.\n+    XCTAssertTrue([self.actionRegistry createCustomActionForIdentifier:actionIdentifier] == action);",
        "path": "tests/HUBActionRegistryTests.m",
        "position": 8,
        "original_position": 8,
        "commit_id": "fd6d6edb83e0ad6cdcfa75372829c90cd002b98a",
        "original_commit_id": "fd6d6edb83e0ad6cdcfa75372829c90cd002b98a",
        "user": {
            "login": "cerihughes",
            "id": 12008876,
            "node_id": "MDQ6VXNlcjEyMDA4ODc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12008876?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cerihughes",
            "html_url": "https://github.com/cerihughes",
            "followers_url": "https://api.github.com/users/cerihughes/followers",
            "following_url": "https://api.github.com/users/cerihughes/following{/other_user}",
            "gists_url": "https://api.github.com/users/cerihughes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cerihughes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cerihughes/subscriptions",
            "organizations_url": "https://api.github.com/users/cerihughes/orgs",
            "repos_url": "https://api.github.com/users/cerihughes/repos",
            "events_url": "https://api.github.com/users/cerihughes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cerihughes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I guess it's because in a test, if I look at a line that says `XCTAssertEqual(objA, obj2)`, I immediately think \"do we really want to check equality here, or is this a typo\".\r\n\r\nAdmittedly `XCTAssertTrue(obj1 == obj2)` doesn't do a great deal to fix that ambiguity, which is why I like Hamcrest's approach of providing a \"same instance\" matcher for objects so that it's obvious by looking at it whether you want to check for equality or instance equivalence.",
        "created_at": "2016-12-22T15:32:07Z",
        "updated_at": "2016-12-22T15:32:07Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/259#discussion_r93643026",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/259",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/93643026"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/259#discussion_r93643026"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/259"
            }
        },
        "in_reply_to_id": 93641021
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/93643195",
        "pull_request_review_id": 14175191,
        "id": 93643195,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkzNjQzMTk1",
        "diff_hunk": "@@ -57,8 +57,9 @@ - (void)testRegisteringFactoryAndCreatingAction\n     HUBActionMock * const action = [[HUBActionMock alloc] initWithBlock:nil];\n     HUBActionFactoryMock * const factory = [[HUBActionFactoryMock alloc] initWithActions:@{actionIdentifier.namePart: action}];\n     [self.actionRegistry registerActionFactory:factory forNamespace:actionIdentifier.namespacePart];\n-    \n-    XCTAssertEqual([self.actionRegistry createCustomActionForIdentifier:actionIdentifier], action);\n+\n+    // These should be the same instance.\n+    XCTAssertTrue([self.actionRegistry createCustomActionForIdentifier:actionIdentifier] == action);",
        "path": "tests/HUBActionRegistryTests.m",
        "position": 8,
        "original_position": 8,
        "commit_id": "fd6d6edb83e0ad6cdcfa75372829c90cd002b98a",
        "original_commit_id": "fd6d6edb83e0ad6cdcfa75372829c90cd002b98a",
        "user": {
            "login": "cerihughes",
            "id": 12008876,
            "node_id": "MDQ6VXNlcjEyMDA4ODc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12008876?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cerihughes",
            "html_url": "https://github.com/cerihughes",
            "followers_url": "https://api.github.com/users/cerihughes/followers",
            "following_url": "https://api.github.com/users/cerihughes/following{/other_user}",
            "gists_url": "https://api.github.com/users/cerihughes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cerihughes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cerihughes/subscriptions",
            "organizations_url": "https://api.github.com/users/cerihughes/orgs",
            "repos_url": "https://api.github.com/users/cerihughes/repos",
            "events_url": "https://api.github.com/users/cerihughes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cerihughes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think the comment is the most useful thing here. I'll revert the assert and keep the comment.",
        "created_at": "2016-12-22T15:33:10Z",
        "updated_at": "2016-12-22T15:33:10Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/259#discussion_r93643195",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/259",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/93643195"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/259#discussion_r93643195"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/259"
            }
        },
        "in_reply_to_id": 93641021
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/93614804",
        "pull_request_review_id": 14145968,
        "id": 93614804,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkzNjE0ODA0",
        "diff_hunk": "@@ -3101,6 +3101,58 @@ - (void)testThatModelIsNotSetImmediatelyOnOverlappingRenderRequests\n     viewModelRenderer.completionBlocks[1]();\n }\n \n+- (void)testThatModelIsNotSetImmediatelyOnOverlappingRenderAndLayoutRequests\n+{\n+    HUBViewModelRendererMock *viewModelRenderer = [HUBViewModelRendererMock new];\n+    [self createViewControllerWithViewModelRenderer:viewModelRenderer];\n+\n+    self.contentOperation.contentLoadingBlock = ^(id<HUBViewModelBuilder> viewModelBuilder) {\n+        [viewModelBuilder headerComponentModelBuilder].title = @\"title1\";\n+        return YES;\n+    };\n+\n+    [self simulateViewControllerLayoutCycle];\n+\n+    // The model should be set at this point as there's no existing render in progress\n+    XCTAssertEqualObjects(self.viewController.viewModel.headerComponentModel.title, @\"title1\");\n+\n+    self.contentOperation.contentLoadingBlock = ^(id<HUBViewModelBuilder> viewModelBuilder) {\n+        [viewModelBuilder headerComponentModelBuilder].title = @\"title2\";\n+        return YES;\n+    };\n+\n+    // While the 1st render is in progress, a 2nd render request comes in\n+    [self.viewController reload];\n+\n+    // The 2nd model should NOT be set at this point as the 1st render hasn't finished\n+    XCTAssertEqualObjects(self.viewController.viewModel.headerComponentModel.title, @\"title1\");\n+    // Only 1 render request has been made at this point (the 2nd is pending)\n+    XCTAssertEqual(viewModelRenderer.completionBlocks.count, (NSUInteger)1);",
        "path": "tests/HUBViewControllerTests.m",
        "position": null,
        "original_position": 30,
        "commit_id": "dcfd66f6981861530955757176e07d66d780942b",
        "original_commit_id": "63852f055a8002c1d121d37c3b4e3faaa609df37",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You can use `1u` to avoid the casting (same for the other integer literals).",
        "created_at": "2016-12-22T12:30:07Z",
        "updated_at": "2016-12-22T16:18:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/256#discussion_r93614804",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/256",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/93614804"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/256#discussion_r93614804"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/256"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/93615010",
        "pull_request_review_id": 14146196,
        "id": 93615010,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkzNjE1MDEw",
        "diff_hunk": "@@ -3101,6 +3101,58 @@ - (void)testThatModelIsNotSetImmediatelyOnOverlappingRenderRequests\n     viewModelRenderer.completionBlocks[1]();\n }\n \n+- (void)testThatModelIsNotSetImmediatelyOnOverlappingRenderAndLayoutRequests\n+{\n+    HUBViewModelRendererMock *viewModelRenderer = [HUBViewModelRendererMock new];\n+    [self createViewControllerWithViewModelRenderer:viewModelRenderer];\n+\n+    self.contentOperation.contentLoadingBlock = ^(id<HUBViewModelBuilder> viewModelBuilder) {\n+        [viewModelBuilder headerComponentModelBuilder].title = @\"title1\";\n+        return YES;\n+    };\n+\n+    [self simulateViewControllerLayoutCycle];\n+\n+    // The model should be set at this point as there's no existing render in progress\n+    XCTAssertEqualObjects(self.viewController.viewModel.headerComponentModel.title, @\"title1\");\n+\n+    self.contentOperation.contentLoadingBlock = ^(id<HUBViewModelBuilder> viewModelBuilder) {\n+        [viewModelBuilder headerComponentModelBuilder].title = @\"title2\";\n+        return YES;\n+    };\n+\n+    // While the 1st render is in progress, a 2nd render request comes in\n+    [self.viewController reload];\n+\n+    // The 2nd model should NOT be set at this point as the 1st render hasn't finished\n+    XCTAssertEqualObjects(self.viewController.viewModel.headerComponentModel.title, @\"title1\");\n+    // Only 1 render request has been made at this point (the 2nd is pending)\n+    XCTAssertEqual(viewModelRenderer.completionBlocks.count, (NSUInteger)1);\n+    // Complete the 1st render request\n+    viewModelRenderer.completionBlocks[0]();\n+\n+    // The 2nd model should now be set as the 1st render has finished and the 2nd is in progress\n+    XCTAssertEqualObjects(self.viewController.viewModel.headerComponentModel.title, @\"title2\");\n+    // 2 render requests have now been made\n+    XCTAssertEqual(viewModelRenderer.completionBlocks.count, (NSUInteger)2);\n+\n+    // While the 2nd render is in progress, a layout requests comes in.\n+    CGRect rect = self.viewController.view.bounds;\n+    CGRect offsetRect = CGRectOffset(rect, 1, 1);\n+    self.viewController.view.bounds = offsetRect;\n+    [self.viewController.view layoutIfNeeded];",
        "path": "tests/HUBViewControllerTests.m",
        "position": 43,
        "original_position": 43,
        "commit_id": "dcfd66f6981861530955757176e07d66d780942b",
        "original_commit_id": "63852f055a8002c1d121d37c3b4e3faaa609df37",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Wouldn't it be better to call `[viewController layoutSubviews]` directly? That way you're sure of the execution flow, so the test becomes more predictable.",
        "created_at": "2016-12-22T12:31:59Z",
        "updated_at": "2016-12-22T16:18:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/256#discussion_r93615010",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/256",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/93615010"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/256#discussion_r93615010"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/256"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/93619762",
        "pull_request_review_id": 14151149,
        "id": 93619762,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkzNjE5NzYy",
        "diff_hunk": "@@ -3101,6 +3101,58 @@ - (void)testThatModelIsNotSetImmediatelyOnOverlappingRenderRequests\n     viewModelRenderer.completionBlocks[1]();\n }\n \n+- (void)testThatModelIsNotSetImmediatelyOnOverlappingRenderAndLayoutRequests\n+{\n+    HUBViewModelRendererMock *viewModelRenderer = [HUBViewModelRendererMock new];\n+    [self createViewControllerWithViewModelRenderer:viewModelRenderer];\n+\n+    self.contentOperation.contentLoadingBlock = ^(id<HUBViewModelBuilder> viewModelBuilder) {\n+        [viewModelBuilder headerComponentModelBuilder].title = @\"title1\";\n+        return YES;\n+    };\n+\n+    [self simulateViewControllerLayoutCycle];\n+\n+    // The model should be set at this point as there's no existing render in progress\n+    XCTAssertEqualObjects(self.viewController.viewModel.headerComponentModel.title, @\"title1\");\n+\n+    self.contentOperation.contentLoadingBlock = ^(id<HUBViewModelBuilder> viewModelBuilder) {\n+        [viewModelBuilder headerComponentModelBuilder].title = @\"title2\";\n+        return YES;\n+    };\n+\n+    // While the 1st render is in progress, a 2nd render request comes in\n+    [self.viewController reload];\n+\n+    // The 2nd model should NOT be set at this point as the 1st render hasn't finished\n+    XCTAssertEqualObjects(self.viewController.viewModel.headerComponentModel.title, @\"title1\");\n+    // Only 1 render request has been made at this point (the 2nd is pending)\n+    XCTAssertEqual(viewModelRenderer.completionBlocks.count, (NSUInteger)1);",
        "path": "tests/HUBViewControllerTests.m",
        "position": null,
        "original_position": 30,
        "commit_id": "dcfd66f6981861530955757176e07d66d780942b",
        "original_commit_id": "63852f055a8002c1d121d37c3b4e3faaa609df37",
        "user": {
            "login": "cerihughes",
            "id": 12008876,
            "node_id": "MDQ6VXNlcjEyMDA4ODc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12008876?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cerihughes",
            "html_url": "https://github.com/cerihughes",
            "followers_url": "https://api.github.com/users/cerihughes/followers",
            "following_url": "https://api.github.com/users/cerihughes/following{/other_user}",
            "gists_url": "https://api.github.com/users/cerihughes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cerihughes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cerihughes/subscriptions",
            "organizations_url": "https://api.github.com/users/cerihughes/orgs",
            "repos_url": "https://api.github.com/users/cerihughes/repos",
            "events_url": "https://api.github.com/users/cerihughes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cerihughes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ooops. Cut and pasted that. Will fix, and also create a separate PR to clean this up everywhere else.",
        "created_at": "2016-12-22T13:11:29Z",
        "updated_at": "2016-12-22T16:18:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/256#discussion_r93619762",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/256",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/93619762"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/256#discussion_r93619762"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/256"
            }
        },
        "in_reply_to_id": 93614804
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/93619782",
        "pull_request_review_id": 14151170,
        "id": 93619782,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkzNjE5Nzgy",
        "diff_hunk": "@@ -3101,6 +3101,58 @@ - (void)testThatModelIsNotSetImmediatelyOnOverlappingRenderRequests\n     viewModelRenderer.completionBlocks[1]();\n }\n \n+- (void)testThatModelIsNotSetImmediatelyOnOverlappingRenderAndLayoutRequests\n+{\n+    HUBViewModelRendererMock *viewModelRenderer = [HUBViewModelRendererMock new];\n+    [self createViewControllerWithViewModelRenderer:viewModelRenderer];\n+\n+    self.contentOperation.contentLoadingBlock = ^(id<HUBViewModelBuilder> viewModelBuilder) {\n+        [viewModelBuilder headerComponentModelBuilder].title = @\"title1\";\n+        return YES;\n+    };\n+\n+    [self simulateViewControllerLayoutCycle];\n+\n+    // The model should be set at this point as there's no existing render in progress\n+    XCTAssertEqualObjects(self.viewController.viewModel.headerComponentModel.title, @\"title1\");\n+\n+    self.contentOperation.contentLoadingBlock = ^(id<HUBViewModelBuilder> viewModelBuilder) {\n+        [viewModelBuilder headerComponentModelBuilder].title = @\"title2\";\n+        return YES;\n+    };\n+\n+    // While the 1st render is in progress, a 2nd render request comes in\n+    [self.viewController reload];\n+\n+    // The 2nd model should NOT be set at this point as the 1st render hasn't finished\n+    XCTAssertEqualObjects(self.viewController.viewModel.headerComponentModel.title, @\"title1\");\n+    // Only 1 render request has been made at this point (the 2nd is pending)\n+    XCTAssertEqual(viewModelRenderer.completionBlocks.count, (NSUInteger)1);\n+    // Complete the 1st render request\n+    viewModelRenderer.completionBlocks[0]();\n+\n+    // The 2nd model should now be set as the 1st render has finished and the 2nd is in progress\n+    XCTAssertEqualObjects(self.viewController.viewModel.headerComponentModel.title, @\"title2\");\n+    // 2 render requests have now been made\n+    XCTAssertEqual(viewModelRenderer.completionBlocks.count, (NSUInteger)2);\n+\n+    // While the 2nd render is in progress, a layout requests comes in.\n+    CGRect rect = self.viewController.view.bounds;\n+    CGRect offsetRect = CGRectOffset(rect, 1, 1);\n+    self.viewController.view.bounds = offsetRect;\n+    [self.viewController.view layoutIfNeeded];",
        "path": "tests/HUBViewControllerTests.m",
        "position": 43,
        "original_position": 43,
        "commit_id": "dcfd66f6981861530955757176e07d66d780942b",
        "original_commit_id": "63852f055a8002c1d121d37c3b4e3faaa609df37",
        "user": {
            "login": "cerihughes",
            "id": 12008876,
            "node_id": "MDQ6VXNlcjEyMDA4ODc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12008876?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cerihughes",
            "html_url": "https://github.com/cerihughes",
            "followers_url": "https://api.github.com/users/cerihughes/followers",
            "following_url": "https://api.github.com/users/cerihughes/following{/other_user}",
            "gists_url": "https://api.github.com/users/cerihughes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cerihughes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cerihughes/subscriptions",
            "organizations_url": "https://api.github.com/users/cerihughes/orgs",
            "repos_url": "https://api.github.com/users/cerihughes/repos",
            "events_url": "https://api.github.com/users/cerihughes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cerihughes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Will do.",
        "created_at": "2016-12-22T13:11:39Z",
        "updated_at": "2016-12-22T16:18:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/256#discussion_r93619782",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/256",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/93619782"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/256#discussion_r93619782"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/256"
            }
        },
        "in_reply_to_id": 93615010
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/93636012",
        "pull_request_review_id": 14167659,
        "id": 93636012,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkzNjM2MDEy",
        "diff_hunk": "@@ -3101,6 +3101,58 @@ - (void)testThatModelIsNotSetImmediatelyOnOverlappingRenderRequests\n     viewModelRenderer.completionBlocks[1]();\n }\n \n+- (void)testThatModelIsNotSetImmediatelyOnOverlappingRenderAndLayoutRequests\n+{\n+    HUBViewModelRendererMock *viewModelRenderer = [HUBViewModelRendererMock new];\n+    [self createViewControllerWithViewModelRenderer:viewModelRenderer];\n+\n+    self.contentOperation.contentLoadingBlock = ^(id<HUBViewModelBuilder> viewModelBuilder) {\n+        [viewModelBuilder headerComponentModelBuilder].title = @\"title1\";\n+        return YES;\n+    };\n+\n+    [self simulateViewControllerLayoutCycle];\n+\n+    // The model should be set at this point as there's no existing render in progress\n+    XCTAssertEqualObjects(self.viewController.viewModel.headerComponentModel.title, @\"title1\");\n+\n+    self.contentOperation.contentLoadingBlock = ^(id<HUBViewModelBuilder> viewModelBuilder) {\n+        [viewModelBuilder headerComponentModelBuilder].title = @\"title2\";\n+        return YES;\n+    };\n+\n+    // While the 1st render is in progress, a 2nd render request comes in\n+    [self.viewController reload];\n+\n+    // The 2nd model should NOT be set at this point as the 1st render hasn't finished\n+    XCTAssertEqualObjects(self.viewController.viewModel.headerComponentModel.title, @\"title1\");\n+    // Only 1 render request has been made at this point (the 2nd is pending)\n+    XCTAssertEqual(viewModelRenderer.completionBlocks.count, (NSUInteger)1);\n+    // Complete the 1st render request\n+    viewModelRenderer.completionBlocks[0]();\n+\n+    // The 2nd model should now be set as the 1st render has finished and the 2nd is in progress\n+    XCTAssertEqualObjects(self.viewController.viewModel.headerComponentModel.title, @\"title2\");\n+    // 2 render requests have now been made\n+    XCTAssertEqual(viewModelRenderer.completionBlocks.count, (NSUInteger)2);\n+\n+    // While the 2nd render is in progress, a layout requests comes in.\n+    CGRect rect = self.viewController.view.bounds;\n+    CGRect offsetRect = CGRectOffset(rect, 1, 1);\n+    self.viewController.view.bounds = offsetRect;\n+    [self.viewController.view layoutIfNeeded];",
        "path": "tests/HUBViewControllerTests.m",
        "position": 43,
        "original_position": 43,
        "commit_id": "dcfd66f6981861530955757176e07d66d780942b",
        "original_commit_id": "63852f055a8002c1d121d37c3b4e3faaa609df37",
        "user": {
            "login": "cerihughes",
            "id": 12008876,
            "node_id": "MDQ6VXNlcjEyMDA4ODc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12008876?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cerihughes",
            "html_url": "https://github.com/cerihughes",
            "followers_url": "https://api.github.com/users/cerihughes/followers",
            "following_url": "https://api.github.com/users/cerihughes/following{/other_user}",
            "gists_url": "https://api.github.com/users/cerihughes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cerihughes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cerihughes/subscriptions",
            "organizations_url": "https://api.github.com/users/cerihughes/orgs",
            "repos_url": "https://api.github.com/users/cerihughes/repos",
            "events_url": "https://api.github.com/users/cerihughes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cerihughes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Oh, actually, we can't do that as we need to trigger `viewDidLayoutSubviews` which isn't called when you directly call `layoutSubviews`.",
        "created_at": "2016-12-22T14:52:17Z",
        "updated_at": "2016-12-22T16:18:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/256#discussion_r93636012",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/256",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/93636012"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/256#discussion_r93636012"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/256"
            }
        },
        "in_reply_to_id": 93615010
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/93636298",
        "pull_request_review_id": 14167955,
        "id": 93636298,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkzNjM2Mjk4",
        "diff_hunk": "@@ -3101,6 +3101,58 @@ - (void)testThatModelIsNotSetImmediatelyOnOverlappingRenderRequests\n     viewModelRenderer.completionBlocks[1]();\n }\n \n+- (void)testThatModelIsNotSetImmediatelyOnOverlappingRenderAndLayoutRequests\n+{\n+    HUBViewModelRendererMock *viewModelRenderer = [HUBViewModelRendererMock new];\n+    [self createViewControllerWithViewModelRenderer:viewModelRenderer];\n+\n+    self.contentOperation.contentLoadingBlock = ^(id<HUBViewModelBuilder> viewModelBuilder) {\n+        [viewModelBuilder headerComponentModelBuilder].title = @\"title1\";\n+        return YES;\n+    };\n+\n+    [self simulateViewControllerLayoutCycle];\n+\n+    // The model should be set at this point as there's no existing render in progress\n+    XCTAssertEqualObjects(self.viewController.viewModel.headerComponentModel.title, @\"title1\");\n+\n+    self.contentOperation.contentLoadingBlock = ^(id<HUBViewModelBuilder> viewModelBuilder) {\n+        [viewModelBuilder headerComponentModelBuilder].title = @\"title2\";\n+        return YES;\n+    };\n+\n+    // While the 1st render is in progress, a 2nd render request comes in\n+    [self.viewController reload];\n+\n+    // The 2nd model should NOT be set at this point as the 1st render hasn't finished\n+    XCTAssertEqualObjects(self.viewController.viewModel.headerComponentModel.title, @\"title1\");\n+    // Only 1 render request has been made at this point (the 2nd is pending)\n+    XCTAssertEqual(viewModelRenderer.completionBlocks.count, (NSUInteger)1);\n+    // Complete the 1st render request\n+    viewModelRenderer.completionBlocks[0]();\n+\n+    // The 2nd model should now be set as the 1st render has finished and the 2nd is in progress\n+    XCTAssertEqualObjects(self.viewController.viewModel.headerComponentModel.title, @\"title2\");\n+    // 2 render requests have now been made\n+    XCTAssertEqual(viewModelRenderer.completionBlocks.count, (NSUInteger)2);\n+\n+    // While the 2nd render is in progress, a layout requests comes in.\n+    CGRect rect = self.viewController.view.bounds;\n+    CGRect offsetRect = CGRectOffset(rect, 1, 1);\n+    self.viewController.view.bounds = offsetRect;\n+    [self.viewController.view layoutIfNeeded];",
        "path": "tests/HUBViewControllerTests.m",
        "position": 43,
        "original_position": 43,
        "commit_id": "dcfd66f6981861530955757176e07d66d780942b",
        "original_commit_id": "63852f055a8002c1d121d37c3b4e3faaa609df37",
        "user": {
            "login": "JohnSundell",
            "id": 2466701,
            "node_id": "MDQ6VXNlcjI0NjY3MDE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2466701?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnSundell",
            "html_url": "https://github.com/JohnSundell",
            "followers_url": "https://api.github.com/users/JohnSundell/followers",
            "following_url": "https://api.github.com/users/JohnSundell/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnSundell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnSundell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnSundell/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnSundell/orgs",
            "repos_url": "https://api.github.com/users/JohnSundell/repos",
            "events_url": "https://api.github.com/users/JohnSundell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnSundell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Sure, sounds good \ud83d\udc4d ",
        "created_at": "2016-12-22T14:54:11Z",
        "updated_at": "2016-12-22T16:18:57Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/256#discussion_r93636298",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/256",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/93636298"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/256#discussion_r93636298"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/256"
            }
        },
        "in_reply_to_id": 93615010
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/94662381",
        "pull_request_review_id": 15194811,
        "id": 94662381,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk0NjYyMzgx",
        "diff_hunk": "@@ -57,8 +57,9 @@ - (void)testRegisteringFactoryAndCreatingAction\n     HUBActionMock * const action = [[HUBActionMock alloc] initWithBlock:nil];\n     HUBActionFactoryMock * const factory = [[HUBActionFactoryMock alloc] initWithActions:@{actionIdentifier.namePart: action}];\n     [self.actionRegistry registerActionFactory:factory forNamespace:actionIdentifier.namespacePart];\n-    \n-    XCTAssertEqual([self.actionRegistry createCustomActionForIdentifier:actionIdentifier], action);\n+\n+    // These should be the same instance.\n+    XCTAssertTrue([self.actionRegistry createCustomActionForIdentifier:actionIdentifier] == action);",
        "path": "tests/HUBActionRegistryTests.m",
        "position": 8,
        "original_position": 8,
        "commit_id": "fd6d6edb83e0ad6cdcfa75372829c90cd002b98a",
        "original_commit_id": "fd6d6edb83e0ad6cdcfa75372829c90cd002b98a",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "How about adding a description to the assert? That is:\r\n```objc\r\nXCTAssertTrue([self.actionRegistry createCustomActionForIdentifier:actionIdentifier] == action,\r\n              @\"The action should be the same instance as the factory mock vends\");\r\n```\r\n\r\nThat way the comment will be directly attached to the assert. Making sure it also shows up when the test fails.",
        "created_at": "2017-01-04T20:49:25Z",
        "updated_at": "2017-01-04T20:49:46Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/259#discussion_r94662381",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/259",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/94662381"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/259#discussion_r94662381"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/259"
            }
        },
        "in_reply_to_id": 93641021
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/94663198",
        "pull_request_review_id": 15195692,
        "id": 94663198,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk0NjYzMTk4",
        "diff_hunk": "@@ -108,8 +108,8 @@ - (void)testTwoSubsequentRenders\n     [self waitForExpectationsWithTimeout:2 handler:nil];\n \n     XCTAssertEqual([self.collectionViewLayout numberOfInvocations], 2u);\n-    XCTAssertEqualObjects([self.collectionViewLayout capturedViewModelAtIndex:0], firstViewModel);\n-    XCTAssertEqualObjects([self.collectionViewLayout capturedViewModelAtIndex:1], secondViewModel);\n+    XCTAssertEqual([self.collectionViewLayout capturedViewModelAtIndex:0], firstViewModel);",
        "path": "tests/HUBViewModelRendererTests.m",
        "position": 6,
        "original_position": 6,
        "commit_id": "fd6d6edb83e0ad6cdcfa75372829c90cd002b98a",
        "original_commit_id": "fd6d6edb83e0ad6cdcfa75372829c90cd002b98a",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Shouldn\u2019t we use `XCTAssertTrue([self.collectionViewLayout capturedViewModelAtIndex:0] == firstViewModel)` here as well? As well as adding an assert description stating that we really do want to check for instance equality.\r\n\r\nJust like at https://github.com/spotify/HubFramework/pull/259/files#diff-51a93e5f57aabdf96df5027e93c75d58R62",
        "created_at": "2017-01-04T20:54:39Z",
        "updated_at": "2017-01-04T20:54:39Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/259#discussion_r94663198",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/259",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/94663198"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/259#discussion_r94663198"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/259"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/94663231",
        "pull_request_review_id": 15195728,
        "id": 94663231,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk0NjYzMjMx",
        "diff_hunk": "@@ -108,8 +108,8 @@ - (void)testTwoSubsequentRenders\n     [self waitForExpectationsWithTimeout:2 handler:nil];\n \n     XCTAssertEqual([self.collectionViewLayout numberOfInvocations], 2u);\n-    XCTAssertEqualObjects([self.collectionViewLayout capturedViewModelAtIndex:0], firstViewModel);\n-    XCTAssertEqualObjects([self.collectionViewLayout capturedViewModelAtIndex:1], secondViewModel);\n+    XCTAssertEqual([self.collectionViewLayout capturedViewModelAtIndex:0], firstViewModel);\n+    XCTAssertEqual([self.collectionViewLayout capturedViewModelAtIndex:1], secondViewModel);",
        "path": "tests/HUBViewModelRendererTests.m",
        "position": 7,
        "original_position": 7,
        "commit_id": "fd6d6edb83e0ad6cdcfa75372829c90cd002b98a",
        "original_commit_id": "fd6d6edb83e0ad6cdcfa75372829c90cd002b98a",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Same as https://github.com/spotify/HubFramework/pull/259/files#r94663198",
        "created_at": "2017-01-04T20:54:53Z",
        "updated_at": "2017-01-04T20:54:53Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/259#discussion_r94663231",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/259",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/94663231"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/259#discussion_r94663231"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/259"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/94330833",
        "pull_request_review_id": 14857999,
        "id": 94330833,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk0MzMwODMz",
        "diff_hunk": "@@ -1849,6 +1849,7 @@ - (void)testRenderingUpdatesContentInsetBeforeAndAfterRendering\n \n - (void)testProposedContentInsetIsDefaultIfHeaderMissing\n {\n+    #if !TARGET_OS_TV",
        "path": "tests/HUBViewControllerTests.m",
        "position": null,
        "original_position": 4,
        "commit_id": "43eb2c48db1ebe6430732a2912a9850494836e1e",
        "original_commit_id": "ade56161a5b60cd439a25f40e596a79103040861",
        "user": {
            "login": "cerihughes",
            "id": 12008876,
            "node_id": "MDQ6VXNlcjEyMDA4ODc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12008876?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cerihughes",
            "html_url": "https://github.com/cerihughes",
            "followers_url": "https://api.github.com/users/cerihughes/followers",
            "following_url": "https://api.github.com/users/cerihughes/following{/other_user}",
            "gists_url": "https://api.github.com/users/cerihughes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cerihughes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cerihughes/subscriptions",
            "organizations_url": "https://api.github.com/users/cerihughes/orgs",
            "repos_url": "https://api.github.com/users/cerihughes/repos",
            "events_url": "https://api.github.com/users/cerihughes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cerihughes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Should this encompass the whole test (including the method signature) as with `testAdaptingOverlayComponentCenterPointToKeyboard`?",
        "created_at": "2017-01-02T16:16:14Z",
        "updated_at": "2017-01-10T09:07:34Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/263#discussion_r94330833",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/263",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/94330833"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/263#discussion_r94330833"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/263"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/94420149",
        "pull_request_review_id": 14946880,
        "id": 94420149,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk0NDIwMTQ5",
        "diff_hunk": "@@ -2128,13 +2800,172 @@\n /* End PBXTargetDependency section */\n \n /* Begin XCBuildConfiguration section */\n+\t\t344C5F101E09CF9A00597B61 /* Debug */ = {\n+\t\t\tisa = XCBuildConfiguration;\n+\t\t\tbuildSettings = {\n+\t\t\t\tALWAYS_SEARCH_USER_PATHS = NO;",
        "path": "HubFramework.xcodeproj/project.pbxproj",
        "position": null,
        "original_position": 775,
        "commit_id": "43eb2c48db1ebe6430732a2912a9850494836e1e",
        "original_commit_id": "ade56161a5b60cd439a25f40e596a79103040861",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "We keep all of these settings in our `spotify_os.xcconfig` file. Could you instead set the target to use the `project.xcconfig` file and then remove all of these overrides.\r\n\r\nUnless a config option is specifically required for a framework or differs from the normal xcconfig. We\u2019ll later look into moving those values to an xcconfig as well.",
        "created_at": "2017-01-03T15:13:21Z",
        "updated_at": "2017-01-10T09:07:34Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/263#discussion_r94420149",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/263",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/94420149"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/263#discussion_r94420149"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/263"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/94420232",
        "pull_request_review_id": 14946880,
        "id": 94420232,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk0NDIwMjMy",
        "diff_hunk": "@@ -2128,13 +2800,172 @@\n /* End PBXTargetDependency section */\n \n /* Begin XCBuildConfiguration section */\n+\t\t344C5F101E09CF9A00597B61 /* Debug */ = {\n+\t\t\tisa = XCBuildConfiguration;\n+\t\t\tbuildSettings = {\n+\t\t\t\tALWAYS_SEARCH_USER_PATHS = NO;\n+\t\t\t\tCLANG_ANALYZER_NONNULL = YES;\n+\t\t\t\tCLANG_CXX_LANGUAGE_STANDARD = \"gnu++0x\";\n+\t\t\t\tCLANG_CXX_LIBRARY = \"libc++\";\n+\t\t\t\tCLANG_ENABLE_MODULES = YES;\n+\t\t\t\tCLANG_ENABLE_OBJC_ARC = YES;\n+\t\t\t\tCLANG_WARN_BOOL_CONVERSION = YES;\n+\t\t\t\tCLANG_WARN_CONSTANT_CONVERSION = YES;\n+\t\t\t\tCLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;\n+\t\t\t\tCLANG_WARN_DOCUMENTATION_COMMENTS = YES;\n+\t\t\t\tCLANG_WARN_EMPTY_BODY = YES;\n+\t\t\t\tCLANG_WARN_ENUM_CONVERSION = YES;\n+\t\t\t\tCLANG_WARN_INFINITE_RECURSION = YES;\n+\t\t\t\tCLANG_WARN_INT_CONVERSION = YES;\n+\t\t\t\tCLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;\n+\t\t\t\tCLANG_WARN_SUSPICIOUS_MOVES = YES;\n+\t\t\t\tCLANG_WARN_UNREACHABLE_CODE = YES;\n+\t\t\t\tCLANG_WARN__DUPLICATE_METHOD_MATCH = YES;\n+\t\t\t\tCODE_SIGN_IDENTITY = \"\";\n+\t\t\t\tCOPY_PHASE_STRIP = NO;\n+\t\t\t\tCURRENT_PROJECT_VERSION = 1;\n+\t\t\t\tDEBUG_INFORMATION_FORMAT = dwarf;\n+\t\t\t\tDEFINES_MODULE = YES;\n+\t\t\t\tDYLIB_COMPATIBILITY_VERSION = 1;\n+\t\t\t\tDYLIB_CURRENT_VERSION = 1;\n+\t\t\t\tDYLIB_INSTALL_NAME_BASE = \"@rpath\";\n+\t\t\t\tENABLE_STRICT_OBJC_MSGSEND = YES;\n+\t\t\t\tENABLE_TESTABILITY = YES;\n+\t\t\t\tGCC_C_LANGUAGE_STANDARD = gnu11;\n+\t\t\t\tGCC_NO_COMMON_BLOCKS = YES;\n+\t\t\t\tGCC_OPTIMIZATION_LEVEL = 0;\n+\t\t\t\tGCC_PREPROCESSOR_DEFINITIONS = (\n+\t\t\t\t\t\"DEBUG=1\",\n+\t\t\t\t\t\"$(inherited)\",\n+\t\t\t\t);\n+\t\t\t\tGCC_WARN_64_TO_32_BIT_CONVERSION = YES;\n+\t\t\t\tGCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;\n+\t\t\t\tGCC_WARN_UNDECLARED_SELECTOR = YES;\n+\t\t\t\tGCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;\n+\t\t\t\tGCC_WARN_UNUSED_FUNCTION = YES;\n+\t\t\t\tGCC_WARN_UNUSED_VARIABLE = YES;\n+\t\t\t\tINFOPLIST_FILE = \"$(SRCROOT)/sources/Info-tvOS.plist\";\n+\t\t\t\tINSTALL_PATH = \"$(LOCAL_LIBRARY_DIR)/Frameworks\";\n+\t\t\t\tIPHONEOS_DEPLOYMENT_TARGET = 8.0;\n+\t\t\t\tLD_RUNPATH_SEARCH_PATHS = \"$(inherited) @executable_path/Frameworks @loader_path/Frameworks\";\n+\t\t\t\tONLY_ACTIVE_ARCH = YES;\n+\t\t\t\tPRODUCT_BUNDLE_IDENTIFIER = \"com.spotify.HubFramework-tvOS\";\n+\t\t\t\tPRODUCT_NAME = HubFramework;\n+\t\t\t\tSDKROOT = appletvos;\n+\t\t\t\tSKIP_INSTALL = YES;\n+\t\t\t\tSUPPORTED_PLATFORMS = \"appletvsimulator appletvos\";\n+\t\t\t\tSWIFT_ACTIVE_COMPILATION_CONDITIONS = DEBUG;\n+\t\t\t\tSWIFT_OPTIMIZATION_LEVEL = \"-Onone\";\n+\t\t\t\tSWIFT_VERSION = 3.0.1;\n+\t\t\t\tTARGETED_DEVICE_FAMILY = 3;\n+\t\t\t\tTVOS_DEPLOYMENT_TARGET = 9.0;\n+\t\t\t\tVERSIONING_SYSTEM = \"apple-generic\";\n+\t\t\t\tVERSION_INFO_PREFIX = \"\";\n+\t\t\t};\n+\t\t\tname = Debug;\n+\t\t};\n+\t\t344C5F111E09CF9A00597B61 /* Release */ = {\n+\t\t\tisa = XCBuildConfiguration;\n+\t\t\tbuildSettings = {\n+\t\t\t\tALWAYS_SEARCH_USER_PATHS = NO;",
        "path": "HubFramework.xcodeproj/project.pbxproj",
        "position": null,
        "original_position": 839,
        "commit_id": "43eb2c48db1ebe6430732a2912a9850494836e1e",
        "original_commit_id": "ade56161a5b60cd439a25f40e596a79103040861",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Same for release as for debug :)",
        "created_at": "2017-01-03T15:13:46Z",
        "updated_at": "2017-01-10T09:07:34Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/263#discussion_r94420232",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/263",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/94420232"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/263#discussion_r94420232"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/263"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/94420353",
        "pull_request_review_id": 14946880,
        "id": 94420353,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk0NDIwMzUz",
        "diff_hunk": "@@ -2128,13 +2800,172 @@\n /* End PBXTargetDependency section */\n \n /* Begin XCBuildConfiguration section */\n+\t\t344C5F101E09CF9A00597B61 /* Debug */ = {\n+\t\t\tisa = XCBuildConfiguration;\n+\t\t\tbuildSettings = {\n+\t\t\t\tALWAYS_SEARCH_USER_PATHS = NO;\n+\t\t\t\tCLANG_ANALYZER_NONNULL = YES;\n+\t\t\t\tCLANG_CXX_LANGUAGE_STANDARD = \"gnu++0x\";\n+\t\t\t\tCLANG_CXX_LIBRARY = \"libc++\";\n+\t\t\t\tCLANG_ENABLE_MODULES = YES;\n+\t\t\t\tCLANG_ENABLE_OBJC_ARC = YES;\n+\t\t\t\tCLANG_WARN_BOOL_CONVERSION = YES;\n+\t\t\t\tCLANG_WARN_CONSTANT_CONVERSION = YES;\n+\t\t\t\tCLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;\n+\t\t\t\tCLANG_WARN_DOCUMENTATION_COMMENTS = YES;\n+\t\t\t\tCLANG_WARN_EMPTY_BODY = YES;\n+\t\t\t\tCLANG_WARN_ENUM_CONVERSION = YES;\n+\t\t\t\tCLANG_WARN_INFINITE_RECURSION = YES;\n+\t\t\t\tCLANG_WARN_INT_CONVERSION = YES;\n+\t\t\t\tCLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;\n+\t\t\t\tCLANG_WARN_SUSPICIOUS_MOVES = YES;\n+\t\t\t\tCLANG_WARN_UNREACHABLE_CODE = YES;\n+\t\t\t\tCLANG_WARN__DUPLICATE_METHOD_MATCH = YES;\n+\t\t\t\tCODE_SIGN_IDENTITY = \"\";\n+\t\t\t\tCOPY_PHASE_STRIP = NO;\n+\t\t\t\tCURRENT_PROJECT_VERSION = 1;\n+\t\t\t\tDEBUG_INFORMATION_FORMAT = dwarf;\n+\t\t\t\tDEFINES_MODULE = YES;\n+\t\t\t\tDYLIB_COMPATIBILITY_VERSION = 1;\n+\t\t\t\tDYLIB_CURRENT_VERSION = 1;\n+\t\t\t\tDYLIB_INSTALL_NAME_BASE = \"@rpath\";\n+\t\t\t\tENABLE_STRICT_OBJC_MSGSEND = YES;\n+\t\t\t\tENABLE_TESTABILITY = YES;\n+\t\t\t\tGCC_C_LANGUAGE_STANDARD = gnu11;\n+\t\t\t\tGCC_NO_COMMON_BLOCKS = YES;\n+\t\t\t\tGCC_OPTIMIZATION_LEVEL = 0;\n+\t\t\t\tGCC_PREPROCESSOR_DEFINITIONS = (\n+\t\t\t\t\t\"DEBUG=1\",\n+\t\t\t\t\t\"$(inherited)\",\n+\t\t\t\t);\n+\t\t\t\tGCC_WARN_64_TO_32_BIT_CONVERSION = YES;\n+\t\t\t\tGCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;\n+\t\t\t\tGCC_WARN_UNDECLARED_SELECTOR = YES;\n+\t\t\t\tGCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;\n+\t\t\t\tGCC_WARN_UNUSED_FUNCTION = YES;\n+\t\t\t\tGCC_WARN_UNUSED_VARIABLE = YES;\n+\t\t\t\tINFOPLIST_FILE = \"$(SRCROOT)/sources/Info-tvOS.plist\";\n+\t\t\t\tINSTALL_PATH = \"$(LOCAL_LIBRARY_DIR)/Frameworks\";\n+\t\t\t\tIPHONEOS_DEPLOYMENT_TARGET = 8.0;\n+\t\t\t\tLD_RUNPATH_SEARCH_PATHS = \"$(inherited) @executable_path/Frameworks @loader_path/Frameworks\";\n+\t\t\t\tONLY_ACTIVE_ARCH = YES;\n+\t\t\t\tPRODUCT_BUNDLE_IDENTIFIER = \"com.spotify.HubFramework-tvOS\";\n+\t\t\t\tPRODUCT_NAME = HubFramework;\n+\t\t\t\tSDKROOT = appletvos;\n+\t\t\t\tSKIP_INSTALL = YES;\n+\t\t\t\tSUPPORTED_PLATFORMS = \"appletvsimulator appletvos\";\n+\t\t\t\tSWIFT_ACTIVE_COMPILATION_CONDITIONS = DEBUG;\n+\t\t\t\tSWIFT_OPTIMIZATION_LEVEL = \"-Onone\";\n+\t\t\t\tSWIFT_VERSION = 3.0.1;\n+\t\t\t\tTARGETED_DEVICE_FAMILY = 3;\n+\t\t\t\tTVOS_DEPLOYMENT_TARGET = 9.0;\n+\t\t\t\tVERSIONING_SYSTEM = \"apple-generic\";\n+\t\t\t\tVERSION_INFO_PREFIX = \"\";\n+\t\t\t};\n+\t\t\tname = Debug;\n+\t\t};\n+\t\t344C5F111E09CF9A00597B61 /* Release */ = {\n+\t\t\tisa = XCBuildConfiguration;\n+\t\t\tbuildSettings = {\n+\t\t\t\tALWAYS_SEARCH_USER_PATHS = NO;\n+\t\t\t\tCLANG_ANALYZER_NONNULL = YES;\n+\t\t\t\tCLANG_CXX_LANGUAGE_STANDARD = \"gnu++0x\";\n+\t\t\t\tCLANG_CXX_LIBRARY = \"libc++\";\n+\t\t\t\tCLANG_ENABLE_MODULES = YES;\n+\t\t\t\tCLANG_ENABLE_OBJC_ARC = YES;\n+\t\t\t\tCLANG_WARN_BOOL_CONVERSION = YES;\n+\t\t\t\tCLANG_WARN_CONSTANT_CONVERSION = YES;\n+\t\t\t\tCLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;\n+\t\t\t\tCLANG_WARN_DOCUMENTATION_COMMENTS = YES;\n+\t\t\t\tCLANG_WARN_EMPTY_BODY = YES;\n+\t\t\t\tCLANG_WARN_ENUM_CONVERSION = YES;\n+\t\t\t\tCLANG_WARN_INFINITE_RECURSION = YES;\n+\t\t\t\tCLANG_WARN_INT_CONVERSION = YES;\n+\t\t\t\tCLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;\n+\t\t\t\tCLANG_WARN_SUSPICIOUS_MOVES = YES;\n+\t\t\t\tCLANG_WARN_UNREACHABLE_CODE = YES;\n+\t\t\t\tCLANG_WARN__DUPLICATE_METHOD_MATCH = YES;\n+\t\t\t\tCODE_SIGN_IDENTITY = \"\";\n+\t\t\t\tCOPY_PHASE_STRIP = NO;\n+\t\t\t\tCURRENT_PROJECT_VERSION = 1;\n+\t\t\t\tDEBUG_INFORMATION_FORMAT = \"dwarf-with-dsym\";\n+\t\t\t\tDEFINES_MODULE = YES;\n+\t\t\t\tDYLIB_COMPATIBILITY_VERSION = 1;\n+\t\t\t\tDYLIB_CURRENT_VERSION = 1;\n+\t\t\t\tDYLIB_INSTALL_NAME_BASE = \"@rpath\";\n+\t\t\t\tENABLE_NS_ASSERTIONS = NO;\n+\t\t\t\tENABLE_STRICT_OBJC_MSGSEND = YES;\n+\t\t\t\tGCC_C_LANGUAGE_STANDARD = gnu11;\n+\t\t\t\tGCC_NO_COMMON_BLOCKS = YES;\n+\t\t\t\tGCC_WARN_64_TO_32_BIT_CONVERSION = YES;\n+\t\t\t\tGCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;\n+\t\t\t\tGCC_WARN_UNDECLARED_SELECTOR = YES;\n+\t\t\t\tGCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;\n+\t\t\t\tGCC_WARN_UNUSED_FUNCTION = YES;\n+\t\t\t\tGCC_WARN_UNUSED_VARIABLE = YES;\n+\t\t\t\tINFOPLIST_FILE = \"$(SRCROOT)/sources/Info-tvOS.plist\";\n+\t\t\t\tINSTALL_PATH = \"$(LOCAL_LIBRARY_DIR)/Frameworks\";\n+\t\t\t\tIPHONEOS_DEPLOYMENT_TARGET = 8.0;\n+\t\t\t\tLD_RUNPATH_SEARCH_PATHS = \"$(inherited) @executable_path/Frameworks @loader_path/Frameworks\";\n+\t\t\t\tPRODUCT_BUNDLE_IDENTIFIER = \"com.spotify.HubFramework-tvOS\";\n+\t\t\t\tPRODUCT_NAME = HubFramework;\n+\t\t\t\tSDKROOT = appletvos;\n+\t\t\t\tSKIP_INSTALL = YES;\n+\t\t\t\tSUPPORTED_PLATFORMS = \"appletvsimulator appletvos\";\n+\t\t\t\tSWIFT_OPTIMIZATION_LEVEL = \"-Owholemodule\";\n+\t\t\t\tSWIFT_VERSION = 3.0.1;\n+\t\t\t\tTARGETED_DEVICE_FAMILY = 3;\n+\t\t\t\tTVOS_DEPLOYMENT_TARGET = 9.0;\n+\t\t\t\tVERSIONING_SYSTEM = \"apple-generic\";\n+\t\t\t\tVERSION_INFO_PREFIX = \"\";\n+\t\t\t};\n+\t\t\tname = Release;\n+\t\t};\n+\t\t345AFE1E1E10797B00807DCC /* Debug */ = {\n+\t\t\tisa = XCBuildConfiguration;\n+\t\t\tbuildSettings = {\n+\t\t\t\tHUB_NON_ERROR_WARNINGS_0720 = \"\";\n+\t\t\t\tHUB_NON_ERROR_WARNINGS_0730 = \"$(HUB_NON_ERROR_WARNING_0720) -Wno-error=partial-availability\";\n+\t\t\t\tINFOPLIST_FILE = \"$(SRCROOT)/sources/Info.plist\";\n+\t\t\t\tPRODUCT_BUNDLE_IDENTIFIER = com.spotify.HubFrameworkTests;\n+\t\t\t\tPRODUCT_NAME = \"$(TARGET_NAME)\";\n+\t\t\t\tSDKROOT = appletvos10.1;\n+\t\t\t\tSUPPORTED_PLATFORMS = \"appletvsimulator appletvos\";\n+\t\t\t\tWARNING_CFLAGS = (\n+\t\t\t\t\t\"$(inherited)\",",
        "path": "HubFramework.xcodeproj/project.pbxproj",
        "position": null,
        "original_position": 904,
        "commit_id": "43eb2c48db1ebe6430732a2912a9850494836e1e",
        "original_commit_id": "ade56161a5b60cd439a25f40e596a79103040861",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Same here as for the debug commands (remove overrides and use xcconfig values).",
        "created_at": "2017-01-03T15:14:26Z",
        "updated_at": "2017-01-10T09:07:34Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/263#discussion_r94420353",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/263",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/94420353"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/263#discussion_r94420353"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/263"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/94420436",
        "pull_request_review_id": 14946880,
        "id": 94420436,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk0NDIwNDM2",
        "diff_hunk": "@@ -2128,13 +2800,172 @@\n /* End PBXTargetDependency section */\n \n /* Begin XCBuildConfiguration section */\n+\t\t344C5F101E09CF9A00597B61 /* Debug */ = {\n+\t\t\tisa = XCBuildConfiguration;\n+\t\t\tbuildSettings = {\n+\t\t\t\tALWAYS_SEARCH_USER_PATHS = NO;\n+\t\t\t\tCLANG_ANALYZER_NONNULL = YES;\n+\t\t\t\tCLANG_CXX_LANGUAGE_STANDARD = \"gnu++0x\";\n+\t\t\t\tCLANG_CXX_LIBRARY = \"libc++\";\n+\t\t\t\tCLANG_ENABLE_MODULES = YES;\n+\t\t\t\tCLANG_ENABLE_OBJC_ARC = YES;\n+\t\t\t\tCLANG_WARN_BOOL_CONVERSION = YES;\n+\t\t\t\tCLANG_WARN_CONSTANT_CONVERSION = YES;\n+\t\t\t\tCLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;\n+\t\t\t\tCLANG_WARN_DOCUMENTATION_COMMENTS = YES;\n+\t\t\t\tCLANG_WARN_EMPTY_BODY = YES;\n+\t\t\t\tCLANG_WARN_ENUM_CONVERSION = YES;\n+\t\t\t\tCLANG_WARN_INFINITE_RECURSION = YES;\n+\t\t\t\tCLANG_WARN_INT_CONVERSION = YES;\n+\t\t\t\tCLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;\n+\t\t\t\tCLANG_WARN_SUSPICIOUS_MOVES = YES;\n+\t\t\t\tCLANG_WARN_UNREACHABLE_CODE = YES;\n+\t\t\t\tCLANG_WARN__DUPLICATE_METHOD_MATCH = YES;\n+\t\t\t\tCODE_SIGN_IDENTITY = \"\";\n+\t\t\t\tCOPY_PHASE_STRIP = NO;\n+\t\t\t\tCURRENT_PROJECT_VERSION = 1;\n+\t\t\t\tDEBUG_INFORMATION_FORMAT = dwarf;\n+\t\t\t\tDEFINES_MODULE = YES;\n+\t\t\t\tDYLIB_COMPATIBILITY_VERSION = 1;\n+\t\t\t\tDYLIB_CURRENT_VERSION = 1;\n+\t\t\t\tDYLIB_INSTALL_NAME_BASE = \"@rpath\";\n+\t\t\t\tENABLE_STRICT_OBJC_MSGSEND = YES;\n+\t\t\t\tENABLE_TESTABILITY = YES;\n+\t\t\t\tGCC_C_LANGUAGE_STANDARD = gnu11;\n+\t\t\t\tGCC_NO_COMMON_BLOCKS = YES;\n+\t\t\t\tGCC_OPTIMIZATION_LEVEL = 0;\n+\t\t\t\tGCC_PREPROCESSOR_DEFINITIONS = (\n+\t\t\t\t\t\"DEBUG=1\",\n+\t\t\t\t\t\"$(inherited)\",\n+\t\t\t\t);\n+\t\t\t\tGCC_WARN_64_TO_32_BIT_CONVERSION = YES;\n+\t\t\t\tGCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;\n+\t\t\t\tGCC_WARN_UNDECLARED_SELECTOR = YES;\n+\t\t\t\tGCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;\n+\t\t\t\tGCC_WARN_UNUSED_FUNCTION = YES;\n+\t\t\t\tGCC_WARN_UNUSED_VARIABLE = YES;\n+\t\t\t\tINFOPLIST_FILE = \"$(SRCROOT)/sources/Info-tvOS.plist\";\n+\t\t\t\tINSTALL_PATH = \"$(LOCAL_LIBRARY_DIR)/Frameworks\";\n+\t\t\t\tIPHONEOS_DEPLOYMENT_TARGET = 8.0;\n+\t\t\t\tLD_RUNPATH_SEARCH_PATHS = \"$(inherited) @executable_path/Frameworks @loader_path/Frameworks\";\n+\t\t\t\tONLY_ACTIVE_ARCH = YES;\n+\t\t\t\tPRODUCT_BUNDLE_IDENTIFIER = \"com.spotify.HubFramework-tvOS\";\n+\t\t\t\tPRODUCT_NAME = HubFramework;\n+\t\t\t\tSDKROOT = appletvos;\n+\t\t\t\tSKIP_INSTALL = YES;\n+\t\t\t\tSUPPORTED_PLATFORMS = \"appletvsimulator appletvos\";\n+\t\t\t\tSWIFT_ACTIVE_COMPILATION_CONDITIONS = DEBUG;\n+\t\t\t\tSWIFT_OPTIMIZATION_LEVEL = \"-Onone\";\n+\t\t\t\tSWIFT_VERSION = 3.0.1;\n+\t\t\t\tTARGETED_DEVICE_FAMILY = 3;\n+\t\t\t\tTVOS_DEPLOYMENT_TARGET = 9.0;\n+\t\t\t\tVERSIONING_SYSTEM = \"apple-generic\";\n+\t\t\t\tVERSION_INFO_PREFIX = \"\";\n+\t\t\t};\n+\t\t\tname = Debug;\n+\t\t};\n+\t\t344C5F111E09CF9A00597B61 /* Release */ = {\n+\t\t\tisa = XCBuildConfiguration;\n+\t\t\tbuildSettings = {\n+\t\t\t\tALWAYS_SEARCH_USER_PATHS = NO;\n+\t\t\t\tCLANG_ANALYZER_NONNULL = YES;\n+\t\t\t\tCLANG_CXX_LANGUAGE_STANDARD = \"gnu++0x\";\n+\t\t\t\tCLANG_CXX_LIBRARY = \"libc++\";\n+\t\t\t\tCLANG_ENABLE_MODULES = YES;\n+\t\t\t\tCLANG_ENABLE_OBJC_ARC = YES;\n+\t\t\t\tCLANG_WARN_BOOL_CONVERSION = YES;\n+\t\t\t\tCLANG_WARN_CONSTANT_CONVERSION = YES;\n+\t\t\t\tCLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;\n+\t\t\t\tCLANG_WARN_DOCUMENTATION_COMMENTS = YES;\n+\t\t\t\tCLANG_WARN_EMPTY_BODY = YES;\n+\t\t\t\tCLANG_WARN_ENUM_CONVERSION = YES;\n+\t\t\t\tCLANG_WARN_INFINITE_RECURSION = YES;\n+\t\t\t\tCLANG_WARN_INT_CONVERSION = YES;\n+\t\t\t\tCLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;\n+\t\t\t\tCLANG_WARN_SUSPICIOUS_MOVES = YES;\n+\t\t\t\tCLANG_WARN_UNREACHABLE_CODE = YES;\n+\t\t\t\tCLANG_WARN__DUPLICATE_METHOD_MATCH = YES;\n+\t\t\t\tCODE_SIGN_IDENTITY = \"\";\n+\t\t\t\tCOPY_PHASE_STRIP = NO;\n+\t\t\t\tCURRENT_PROJECT_VERSION = 1;\n+\t\t\t\tDEBUG_INFORMATION_FORMAT = \"dwarf-with-dsym\";\n+\t\t\t\tDEFINES_MODULE = YES;\n+\t\t\t\tDYLIB_COMPATIBILITY_VERSION = 1;\n+\t\t\t\tDYLIB_CURRENT_VERSION = 1;\n+\t\t\t\tDYLIB_INSTALL_NAME_BASE = \"@rpath\";\n+\t\t\t\tENABLE_NS_ASSERTIONS = NO;\n+\t\t\t\tENABLE_STRICT_OBJC_MSGSEND = YES;\n+\t\t\t\tGCC_C_LANGUAGE_STANDARD = gnu11;\n+\t\t\t\tGCC_NO_COMMON_BLOCKS = YES;\n+\t\t\t\tGCC_WARN_64_TO_32_BIT_CONVERSION = YES;\n+\t\t\t\tGCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;\n+\t\t\t\tGCC_WARN_UNDECLARED_SELECTOR = YES;\n+\t\t\t\tGCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;\n+\t\t\t\tGCC_WARN_UNUSED_FUNCTION = YES;\n+\t\t\t\tGCC_WARN_UNUSED_VARIABLE = YES;\n+\t\t\t\tINFOPLIST_FILE = \"$(SRCROOT)/sources/Info-tvOS.plist\";\n+\t\t\t\tINSTALL_PATH = \"$(LOCAL_LIBRARY_DIR)/Frameworks\";\n+\t\t\t\tIPHONEOS_DEPLOYMENT_TARGET = 8.0;\n+\t\t\t\tLD_RUNPATH_SEARCH_PATHS = \"$(inherited) @executable_path/Frameworks @loader_path/Frameworks\";\n+\t\t\t\tPRODUCT_BUNDLE_IDENTIFIER = \"com.spotify.HubFramework-tvOS\";\n+\t\t\t\tPRODUCT_NAME = HubFramework;\n+\t\t\t\tSDKROOT = appletvos;\n+\t\t\t\tSKIP_INSTALL = YES;\n+\t\t\t\tSUPPORTED_PLATFORMS = \"appletvsimulator appletvos\";\n+\t\t\t\tSWIFT_OPTIMIZATION_LEVEL = \"-Owholemodule\";\n+\t\t\t\tSWIFT_VERSION = 3.0.1;\n+\t\t\t\tTARGETED_DEVICE_FAMILY = 3;\n+\t\t\t\tTVOS_DEPLOYMENT_TARGET = 9.0;\n+\t\t\t\tVERSIONING_SYSTEM = \"apple-generic\";\n+\t\t\t\tVERSION_INFO_PREFIX = \"\";\n+\t\t\t};\n+\t\t\tname = Release;\n+\t\t};\n+\t\t345AFE1E1E10797B00807DCC /* Debug */ = {\n+\t\t\tisa = XCBuildConfiguration;\n+\t\t\tbuildSettings = {\n+\t\t\t\tHUB_NON_ERROR_WARNINGS_0720 = \"\";\n+\t\t\t\tHUB_NON_ERROR_WARNINGS_0730 = \"$(HUB_NON_ERROR_WARNING_0720) -Wno-error=partial-availability\";\n+\t\t\t\tINFOPLIST_FILE = \"$(SRCROOT)/sources/Info.plist\";\n+\t\t\t\tPRODUCT_BUNDLE_IDENTIFIER = com.spotify.HubFrameworkTests;\n+\t\t\t\tPRODUCT_NAME = \"$(TARGET_NAME)\";\n+\t\t\t\tSDKROOT = appletvos10.1;",
        "path": "HubFramework.xcodeproj/project.pbxproj",
        "position": null,
        "original_position": 901,
        "commit_id": "43eb2c48db1ebe6430732a2912a9850494836e1e",
        "original_commit_id": "ade56161a5b60cd439a25f40e596a79103040861",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This should probably be set to just `appletvos`, right? Since we want to always use the latests SDK to build with.",
        "created_at": "2017-01-03T15:14:57Z",
        "updated_at": "2017-01-10T09:07:35Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/263#discussion_r94420436",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/263",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/94420436"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/263#discussion_r94420436"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/263"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/94420575",
        "pull_request_review_id": 14946880,
        "id": 94420575,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk0NDIwNTc1",
        "diff_hunk": "@@ -2128,13 +2800,172 @@\n /* End PBXTargetDependency section */\n \n /* Begin XCBuildConfiguration section */\n+\t\t344C5F101E09CF9A00597B61 /* Debug */ = {\n+\t\t\tisa = XCBuildConfiguration;\n+\t\t\tbuildSettings = {\n+\t\t\t\tALWAYS_SEARCH_USER_PATHS = NO;\n+\t\t\t\tCLANG_ANALYZER_NONNULL = YES;\n+\t\t\t\tCLANG_CXX_LANGUAGE_STANDARD = \"gnu++0x\";\n+\t\t\t\tCLANG_CXX_LIBRARY = \"libc++\";\n+\t\t\t\tCLANG_ENABLE_MODULES = YES;\n+\t\t\t\tCLANG_ENABLE_OBJC_ARC = YES;\n+\t\t\t\tCLANG_WARN_BOOL_CONVERSION = YES;\n+\t\t\t\tCLANG_WARN_CONSTANT_CONVERSION = YES;\n+\t\t\t\tCLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;\n+\t\t\t\tCLANG_WARN_DOCUMENTATION_COMMENTS = YES;\n+\t\t\t\tCLANG_WARN_EMPTY_BODY = YES;\n+\t\t\t\tCLANG_WARN_ENUM_CONVERSION = YES;\n+\t\t\t\tCLANG_WARN_INFINITE_RECURSION = YES;\n+\t\t\t\tCLANG_WARN_INT_CONVERSION = YES;\n+\t\t\t\tCLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;\n+\t\t\t\tCLANG_WARN_SUSPICIOUS_MOVES = YES;\n+\t\t\t\tCLANG_WARN_UNREACHABLE_CODE = YES;\n+\t\t\t\tCLANG_WARN__DUPLICATE_METHOD_MATCH = YES;\n+\t\t\t\tCODE_SIGN_IDENTITY = \"\";\n+\t\t\t\tCOPY_PHASE_STRIP = NO;\n+\t\t\t\tCURRENT_PROJECT_VERSION = 1;\n+\t\t\t\tDEBUG_INFORMATION_FORMAT = dwarf;\n+\t\t\t\tDEFINES_MODULE = YES;\n+\t\t\t\tDYLIB_COMPATIBILITY_VERSION = 1;\n+\t\t\t\tDYLIB_CURRENT_VERSION = 1;\n+\t\t\t\tDYLIB_INSTALL_NAME_BASE = \"@rpath\";\n+\t\t\t\tENABLE_STRICT_OBJC_MSGSEND = YES;\n+\t\t\t\tENABLE_TESTABILITY = YES;\n+\t\t\t\tGCC_C_LANGUAGE_STANDARD = gnu11;\n+\t\t\t\tGCC_NO_COMMON_BLOCKS = YES;\n+\t\t\t\tGCC_OPTIMIZATION_LEVEL = 0;\n+\t\t\t\tGCC_PREPROCESSOR_DEFINITIONS = (\n+\t\t\t\t\t\"DEBUG=1\",\n+\t\t\t\t\t\"$(inherited)\",\n+\t\t\t\t);\n+\t\t\t\tGCC_WARN_64_TO_32_BIT_CONVERSION = YES;\n+\t\t\t\tGCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;\n+\t\t\t\tGCC_WARN_UNDECLARED_SELECTOR = YES;\n+\t\t\t\tGCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;\n+\t\t\t\tGCC_WARN_UNUSED_FUNCTION = YES;\n+\t\t\t\tGCC_WARN_UNUSED_VARIABLE = YES;\n+\t\t\t\tINFOPLIST_FILE = \"$(SRCROOT)/sources/Info-tvOS.plist\";\n+\t\t\t\tINSTALL_PATH = \"$(LOCAL_LIBRARY_DIR)/Frameworks\";\n+\t\t\t\tIPHONEOS_DEPLOYMENT_TARGET = 8.0;\n+\t\t\t\tLD_RUNPATH_SEARCH_PATHS = \"$(inherited) @executable_path/Frameworks @loader_path/Frameworks\";\n+\t\t\t\tONLY_ACTIVE_ARCH = YES;\n+\t\t\t\tPRODUCT_BUNDLE_IDENTIFIER = \"com.spotify.HubFramework-tvOS\";\n+\t\t\t\tPRODUCT_NAME = HubFramework;\n+\t\t\t\tSDKROOT = appletvos;\n+\t\t\t\tSKIP_INSTALL = YES;\n+\t\t\t\tSUPPORTED_PLATFORMS = \"appletvsimulator appletvos\";\n+\t\t\t\tSWIFT_ACTIVE_COMPILATION_CONDITIONS = DEBUG;\n+\t\t\t\tSWIFT_OPTIMIZATION_LEVEL = \"-Onone\";\n+\t\t\t\tSWIFT_VERSION = 3.0.1;\n+\t\t\t\tTARGETED_DEVICE_FAMILY = 3;\n+\t\t\t\tTVOS_DEPLOYMENT_TARGET = 9.0;\n+\t\t\t\tVERSIONING_SYSTEM = \"apple-generic\";\n+\t\t\t\tVERSION_INFO_PREFIX = \"\";\n+\t\t\t};\n+\t\t\tname = Debug;\n+\t\t};\n+\t\t344C5F111E09CF9A00597B61 /* Release */ = {\n+\t\t\tisa = XCBuildConfiguration;\n+\t\t\tbuildSettings = {\n+\t\t\t\tALWAYS_SEARCH_USER_PATHS = NO;\n+\t\t\t\tCLANG_ANALYZER_NONNULL = YES;\n+\t\t\t\tCLANG_CXX_LANGUAGE_STANDARD = \"gnu++0x\";\n+\t\t\t\tCLANG_CXX_LIBRARY = \"libc++\";\n+\t\t\t\tCLANG_ENABLE_MODULES = YES;\n+\t\t\t\tCLANG_ENABLE_OBJC_ARC = YES;\n+\t\t\t\tCLANG_WARN_BOOL_CONVERSION = YES;\n+\t\t\t\tCLANG_WARN_CONSTANT_CONVERSION = YES;\n+\t\t\t\tCLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;\n+\t\t\t\tCLANG_WARN_DOCUMENTATION_COMMENTS = YES;\n+\t\t\t\tCLANG_WARN_EMPTY_BODY = YES;\n+\t\t\t\tCLANG_WARN_ENUM_CONVERSION = YES;\n+\t\t\t\tCLANG_WARN_INFINITE_RECURSION = YES;\n+\t\t\t\tCLANG_WARN_INT_CONVERSION = YES;\n+\t\t\t\tCLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;\n+\t\t\t\tCLANG_WARN_SUSPICIOUS_MOVES = YES;\n+\t\t\t\tCLANG_WARN_UNREACHABLE_CODE = YES;\n+\t\t\t\tCLANG_WARN__DUPLICATE_METHOD_MATCH = YES;\n+\t\t\t\tCODE_SIGN_IDENTITY = \"\";\n+\t\t\t\tCOPY_PHASE_STRIP = NO;\n+\t\t\t\tCURRENT_PROJECT_VERSION = 1;\n+\t\t\t\tDEBUG_INFORMATION_FORMAT = \"dwarf-with-dsym\";\n+\t\t\t\tDEFINES_MODULE = YES;\n+\t\t\t\tDYLIB_COMPATIBILITY_VERSION = 1;\n+\t\t\t\tDYLIB_CURRENT_VERSION = 1;\n+\t\t\t\tDYLIB_INSTALL_NAME_BASE = \"@rpath\";\n+\t\t\t\tENABLE_NS_ASSERTIONS = NO;\n+\t\t\t\tENABLE_STRICT_OBJC_MSGSEND = YES;\n+\t\t\t\tGCC_C_LANGUAGE_STANDARD = gnu11;\n+\t\t\t\tGCC_NO_COMMON_BLOCKS = YES;\n+\t\t\t\tGCC_WARN_64_TO_32_BIT_CONVERSION = YES;\n+\t\t\t\tGCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;\n+\t\t\t\tGCC_WARN_UNDECLARED_SELECTOR = YES;\n+\t\t\t\tGCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;\n+\t\t\t\tGCC_WARN_UNUSED_FUNCTION = YES;\n+\t\t\t\tGCC_WARN_UNUSED_VARIABLE = YES;\n+\t\t\t\tINFOPLIST_FILE = \"$(SRCROOT)/sources/Info-tvOS.plist\";\n+\t\t\t\tINSTALL_PATH = \"$(LOCAL_LIBRARY_DIR)/Frameworks\";\n+\t\t\t\tIPHONEOS_DEPLOYMENT_TARGET = 8.0;\n+\t\t\t\tLD_RUNPATH_SEARCH_PATHS = \"$(inherited) @executable_path/Frameworks @loader_path/Frameworks\";\n+\t\t\t\tPRODUCT_BUNDLE_IDENTIFIER = \"com.spotify.HubFramework-tvOS\";\n+\t\t\t\tPRODUCT_NAME = HubFramework;\n+\t\t\t\tSDKROOT = appletvos;\n+\t\t\t\tSKIP_INSTALL = YES;\n+\t\t\t\tSUPPORTED_PLATFORMS = \"appletvsimulator appletvos\";\n+\t\t\t\tSWIFT_OPTIMIZATION_LEVEL = \"-Owholemodule\";\n+\t\t\t\tSWIFT_VERSION = 3.0.1;\n+\t\t\t\tTARGETED_DEVICE_FAMILY = 3;\n+\t\t\t\tTVOS_DEPLOYMENT_TARGET = 9.0;\n+\t\t\t\tVERSIONING_SYSTEM = \"apple-generic\";\n+\t\t\t\tVERSION_INFO_PREFIX = \"\";\n+\t\t\t};\n+\t\t\tname = Release;\n+\t\t};\n+\t\t345AFE1E1E10797B00807DCC /* Debug */ = {\n+\t\t\tisa = XCBuildConfiguration;\n+\t\t\tbuildSettings = {\n+\t\t\t\tHUB_NON_ERROR_WARNINGS_0720 = \"\";\n+\t\t\t\tHUB_NON_ERROR_WARNINGS_0730 = \"$(HUB_NON_ERROR_WARNING_0720) -Wno-error=partial-availability\";\n+\t\t\t\tINFOPLIST_FILE = \"$(SRCROOT)/sources/Info.plist\";",
        "path": "HubFramework.xcodeproj/project.pbxproj",
        "position": null,
        "original_position": 898,
        "commit_id": "43eb2c48db1ebe6430732a2912a9850494836e1e",
        "original_commit_id": "ade56161a5b60cd439a25f40e596a79103040861",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Shouldn\u2019t we use `Info-tvOS.plist`?",
        "created_at": "2017-01-03T15:15:45Z",
        "updated_at": "2017-01-10T09:07:35Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/263#discussion_r94420575",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/263",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/94420575"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/263#discussion_r94420575"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/263"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/94502136",
        "pull_request_review_id": 14946880,
        "id": 94502136,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk0NTAyMTM2",
        "diff_hunk": "@@ -0,0 +1,50 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import \"HUBComponent.h\"\n+\n+/// Enum defining various focus states that a component can be in\n+typedef NS_ENUM(NSUInteger, HUBComponentFocusState) {",
        "path": "include/HubFramework/HUBComponentWithFocusState.h",
        "position": null,
        "original_position": 25,
        "commit_id": "43eb2c48db1ebe6430732a2912a9850494836e1e",
        "original_commit_id": "ade56161a5b60cd439a25f40e596a79103040861",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "`NS_ENUM` should use `NSInteger` as the backing value, unless there\u2019s a specific reason for it being unsigned?",
        "created_at": "2017-01-03T22:59:28Z",
        "updated_at": "2017-01-10T09:07:35Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/263#discussion_r94502136",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/263",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/94502136"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/263#discussion_r94502136"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/263"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/95262536",
        "pull_request_review_id": 15812314,
        "id": 95262536,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1MjYyNTM2",
        "diff_hunk": "@@ -0,0 +1,50 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import \"HUBComponent.h\"\n+\n+/// Enum defining various focus states that a component can be in\n+typedef NS_ENUM(NSUInteger, HUBComponentFocusState) {",
        "path": "include/HubFramework/HUBComponentWithFocusState.h",
        "position": null,
        "original_position": 25,
        "commit_id": "43eb2c48db1ebe6430732a2912a9850494836e1e",
        "original_commit_id": "ade56161a5b60cd439a25f40e596a79103040861",
        "user": {
            "login": "marmelroy",
            "id": 889949,
            "node_id": "MDQ6VXNlcjg4OTk0OQ==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/889949?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/marmelroy",
            "html_url": "https://github.com/marmelroy",
            "followers_url": "https://api.github.com/users/marmelroy/followers",
            "following_url": "https://api.github.com/users/marmelroy/following{/other_user}",
            "gists_url": "https://api.github.com/users/marmelroy/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/marmelroy/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/marmelroy/subscriptions",
            "organizations_url": "https://api.github.com/users/marmelroy/orgs",
            "repos_url": "https://api.github.com/users/marmelroy/repos",
            "events_url": "https://api.github.com/users/marmelroy/events{/privacy}",
            "received_events_url": "https://api.github.com/users/marmelroy/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Erm... I was just being consistent with most of the other NS_ENUMs in the project (see HUBComponentSelectionState, HUBActionTrigger, HUBComponentLayoutContentEdge, HUBComponentType, HUBConnectivityState etc). \r\n\r\nThere's no specific reason I can think of for any of them to be unsigned. Should we change all enums?",
        "created_at": "2017-01-09T22:35:11Z",
        "updated_at": "2017-01-10T09:07:35Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/263#discussion_r95262536",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/263",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/95262536"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/263#discussion_r95262536"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/263"
            }
        },
        "in_reply_to_id": 94502136
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/95305190",
        "pull_request_review_id": 15854457,
        "id": 95305190,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1MzA1MTkw",
        "diff_hunk": "@@ -2128,13 +2800,172 @@\n /* End PBXTargetDependency section */\n \n /* Begin XCBuildConfiguration section */\n+\t\t344C5F101E09CF9A00597B61 /* Debug */ = {\n+\t\t\tisa = XCBuildConfiguration;\n+\t\t\tbuildSettings = {\n+\t\t\t\tALWAYS_SEARCH_USER_PATHS = NO;",
        "path": "HubFramework.xcodeproj/project.pbxproj",
        "position": null,
        "original_position": 775,
        "commit_id": "43eb2c48db1ebe6430732a2912a9850494836e1e",
        "original_commit_id": "ade56161a5b60cd439a25f40e596a79103040861",
        "user": {
            "login": "marmelroy",
            "id": 889949,
            "node_id": "MDQ6VXNlcjg4OTk0OQ==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/889949?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/marmelroy",
            "html_url": "https://github.com/marmelroy",
            "followers_url": "https://api.github.com/users/marmelroy/followers",
            "following_url": "https://api.github.com/users/marmelroy/following{/other_user}",
            "gists_url": "https://api.github.com/users/marmelroy/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/marmelroy/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/marmelroy/subscriptions",
            "organizations_url": "https://api.github.com/users/marmelroy/orgs",
            "repos_url": "https://api.github.com/users/marmelroy/repos",
            "events_url": "https://api.github.com/users/marmelroy/events{/privacy}",
            "received_events_url": "https://api.github.com/users/marmelroy/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Finally had the chance to look into this. So... I basically just duplicated the setup of the current HubFramework-iOS dynamic target and made my tvOS modifications. All of these overrides are currently in production. \r\n\r\nI will make this modification to both dynamic targets then. ",
        "created_at": "2017-01-10T06:13:04Z",
        "updated_at": "2017-01-10T09:07:35Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/263#discussion_r95305190",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/263",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/95305190"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/263#discussion_r95305190"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/263"
            }
        },
        "in_reply_to_id": 94420149
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/94651486",
        "pull_request_review_id": 15183469,
        "id": 94651486,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk0NjUxNDg2",
        "diff_hunk": "@@ -0,0 +1,48 @@\n+# Hub Framework architectual overview\n+\n+Welcome to the Hub Framework architectual overview. This document is aimed at developers who are looking to contribute to the framework, as well as people who want to get a more thorough understanding of how the internals of the framework work. It's also meant to document what patterns that are used and why.",
        "path": "documentation/Architectual overview.md",
        "position": null,
        "original_position": 3,
        "commit_id": "8a89e8009b53556a56d467180d76ea6656121e32",
        "original_commit_id": "5829c7919f4708190b27115aae8fc57bb6e768ca",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "1. Change `It's` to `It\u2019s` (typographic apostrophe)\r\n2. The \u201cwhat patterns that are\u201d part reads a bit difficult; how about \u201cIt\u2019s also meant to document the patterns that are used and why.\u201d",
        "created_at": "2017-01-04T19:45:23Z",
        "updated_at": "2017-01-12T14:48:33Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/262#discussion_r94651486",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/262",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/94651486"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/262#discussion_r94651486"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/262"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/94651611",
        "pull_request_review_id": 15183469,
        "id": 94651611,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk0NjUxNjEx",
        "diff_hunk": "@@ -0,0 +1,48 @@\n+# Hub Framework architectual overview\n+\n+Welcome to the Hub Framework architectual overview. This document is aimed at developers who are looking to contribute to the framework, as well as people who want to get a more thorough understanding of how the internals of the framework work. It's also meant to document what patterns that are used and why.\n+\n+For information on how to actually use the framework - see the other available guides, that will each introduce you to the various aspects of the API.",
        "path": "documentation/Architectual overview.md",
        "position": null,
        "original_position": 5,
        "commit_id": "8a89e8009b53556a56d467180d76ea6656121e32",
        "original_commit_id": "5829c7919f4708190b27115aae8fc57bb6e768ca",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Let\u2019s remove `actually`, to keep the sentence simpler and more clear.",
        "created_at": "2017-01-04T19:46:02Z",
        "updated_at": "2017-01-12T14:48:33Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/262#discussion_r94651611",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/262",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/94651611"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/262#discussion_r94651611"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/262"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/94653015",
        "pull_request_review_id": 15183469,
        "id": 94653015,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk0NjUzMDE1",
        "diff_hunk": "@@ -0,0 +1,48 @@\n+# Hub Framework architectual overview\n+\n+Welcome to the Hub Framework architectual overview. This document is aimed at developers who are looking to contribute to the framework, as well as people who want to get a more thorough understanding of how the internals of the framework work. It's also meant to document what patterns that are used and why.\n+\n+For information on how to actually use the framework - see the other available guides, that will each introduce you to the various aspects of the API.\n+\n+**Note:** This docment is currently \"Work-in-progress\" and does not yet offer a complete picture of the Hub Framework architecture.",
        "path": "documentation/Architectual overview.md",
        "position": null,
        "original_position": 7,
        "commit_id": "8a89e8009b53556a56d467180d76ea6656121e32",
        "original_commit_id": "5829c7919f4708190b27115aae8fc57bb6e768ca",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Maybe this should be at the very top of the document (under the first heading)?",
        "created_at": "2017-01-04T19:53:35Z",
        "updated_at": "2017-01-12T14:48:33Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/262#discussion_r94653015",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/262",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/94653015"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/262#discussion_r94653015"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/262"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/94653211",
        "pull_request_review_id": 15183469,
        "id": 94653211,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk0NjUzMjEx",
        "diff_hunk": "@@ -0,0 +1,48 @@\n+# Hub Framework architectual overview\n+\n+Welcome to the Hub Framework architectual overview. This document is aimed at developers who are looking to contribute to the framework, as well as people who want to get a more thorough understanding of how the internals of the framework work. It's also meant to document what patterns that are used and why.\n+\n+For information on how to actually use the framework - see the other available guides, that will each introduce you to the various aspects of the API.\n+\n+**Note:** This docment is currently \"Work-in-progress\" and does not yet offer a complete picture of the Hub Framework architecture.",
        "path": "documentation/Architectual overview.md",
        "position": null,
        "original_position": 7,
        "commit_id": "8a89e8009b53556a56d467180d76ea6656121e32",
        "original_commit_id": "5829c7919f4708190b27115aae8fc57bb6e768ca",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Could also be:\r\n\r\n|  \u2139\ufe0f  | _In progress_ |  \u2139\ufe0f  |\r\n| ----- | :-----------: | ----- |\r\n| \u2139\ufe0f | **This docment is currently \u201cwork-in-progress\u201d and does not yet offer a complete picture of the Hub Framework architecture.** | \u2139\ufe0f |\r\n\r\n---\r\n\r\n```md\r\n|  \u2139\ufe0f  | _In progress_ |  \u2139\ufe0f  |\r\n| ----- | :-----------: | ----- |\r\n| \u2139\ufe0f | **This docment is currently \u201cwork-in-progress\u201d and does not yet offer a complete picture of the Hub Framework architecture.** | \u2139\ufe0f |\r\n```",
        "created_at": "2017-01-04T19:54:43Z",
        "updated_at": "2017-01-12T14:48:33Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/262#discussion_r94653211",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/262",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/94653211"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/262#discussion_r94653211"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/262"
            }
        },
        "in_reply_to_id": 94653015
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/94653474",
        "pull_request_review_id": 15183469,
        "id": 94653474,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk0NjUzNDc0",
        "diff_hunk": "@@ -0,0 +1,48 @@\n+# Hub Framework architectual overview\n+\n+Welcome to the Hub Framework architectual overview. This document is aimed at developers who are looking to contribute to the framework, as well as people who want to get a more thorough understanding of how the internals of the framework work. It's also meant to document what patterns that are used and why.\n+\n+For information on how to actually use the framework - see the other available guides, that will each introduce you to the various aspects of the API.\n+\n+**Note:** This docment is currently \"Work-in-progress\" and does not yet offer a complete picture of the Hub Framework architecture.\n+\n+## `HUBManager`\n+\n+`HUBManager` represents an insance of the Hub Framework. It's not a singleton, but rather a core object that an application using the framework creates and holds a reference to. The manager then provides access to all of the framework's features in a modular fashion.\n+\n+## Registries & factories",
        "path": "documentation/Architectual overview.md",
        "position": null,
        "original_position": 13,
        "commit_id": "8a89e8009b53556a56d467180d76ea6656121e32",
        "original_commit_id": "5829c7919f4708190b27115aae8fc57bb6e768ca",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "How about using `and` instead of `&`, i.e. \u201cRegistries and factories\u201d",
        "created_at": "2017-01-04T19:56:14Z",
        "updated_at": "2017-01-12T14:48:33Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/262#discussion_r94653474",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/262",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/94653474"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/262#discussion_r94653474"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/262"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/95844491",
        "pull_request_review_id": 16413073,
        "id": 95844491,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1ODQ0NDkx",
        "diff_hunk": "@@ -0,0 +1,50 @@\n+# Hub Framework architectual overview\n+\n+Welcome to the Hub Framework architectual overview. This document is aimed at developers who are looking to contribute to the framework, as well as people who want to get a more thorough understanding of how the internals of the framework work. It\u2019s also meant to document what patterns that are used and why.\n+\n+For information on how to use the framework see the other [available guides](https://spotify.github.io/HubFramework/index.html). Each guide introduces you to the various aspects of the framework, its APIs and [concepts](https://spotify.github.io/HubFramework/concept-guide.html).\n+\n+|  \u2139\ufe0f  | _In progress_ |  \u2139\ufe0f  |\n+| ----- | :-----------: | ----- |\n+| \u2139\ufe0f | **This docment is currently \u201cwork-in-progress\u201d and does not yet offer a complete picture of the Hub Framework architecture.** | \u2139\ufe0f |\n+\n+## `HUBManager`\n+\n+`HUBManager` represents an insance of the Hub Framework. It\u2019s not a singleton, but rather a core object that an application using the framework creates and holds a reference to. The manager then provides access to all of the framework\u2019s features in a modular fashion.",
        "path": "documentation/Architectual overview.md",
        "position": 13,
        "original_position": 13,
        "commit_id": "8a89e8009b53556a56d467180d76ea6656121e32",
        "original_commit_id": "8a89e8009b53556a56d467180d76ea6656121e32",
        "user": {
            "login": "hallski",
            "id": 541,
            "node_id": "MDQ6VXNlcjU0MQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/541?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hallski",
            "html_url": "https://github.com/hallski",
            "followers_url": "https://api.github.com/users/hallski/followers",
            "following_url": "https://api.github.com/users/hallski/following{/other_user}",
            "gists_url": "https://api.github.com/users/hallski/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hallski/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hallski/subscriptions",
            "organizations_url": "https://api.github.com/users/hallski/orgs",
            "repos_url": "https://api.github.com/users/hallski/repos",
            "events_url": "https://api.github.com/users/hallski/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hallski/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Typo on `instance` (missing t).",
        "created_at": "2017-01-12T17:40:45Z",
        "updated_at": "2017-01-12T17:40:45Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/262#discussion_r95844491",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/262",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/95844491"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/262#discussion_r95844491"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/262"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/94549950",
        "pull_request_review_id": 15076567,
        "id": 94549950,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk0NTQ5OTUw",
        "diff_hunk": "@@ -51,6 +52,23 @@ static inline BOOL HUBPropertyIsEqual(NSObject * _Nullable objectA, NSObject * _\n }\n \n /**\n+ *  Return whether an object conforms to a protocol\n+ *\n+ *  @param object The object\n+ *  @param aProtocol The protocol\n+ *\n+ *  This function allows checking protocol conformance without inheriting from NSObject.\n+ */\n+static inline BOOL HUBConformsToProtocol(id _Nullable object, Protocol *aProtocol)",
        "path": "sources/HUBUtilities.h",
        "position": 19,
        "original_position": 19,
        "commit_id": "dd34b1ab6c885f06d216656f680e080f00253fcf",
        "original_commit_id": "8f148adcde98f334c9e8bc2866c653842f81b15d",
        "user": {
            "login": "cerihughes",
            "id": 12008876,
            "node_id": "MDQ6VXNlcjEyMDA4ODc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12008876?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cerihughes",
            "html_url": "https://github.com/cerihughes",
            "followers_url": "https://api.github.com/users/cerihughes/followers",
            "following_url": "https://api.github.com/users/cerihughes/following{/other_user}",
            "gists_url": "https://api.github.com/users/cerihughes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cerihughes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cerihughes/subscriptions",
            "organizations_url": "https://api.github.com/users/cerihughes/orgs",
            "repos_url": "https://api.github.com/users/cerihughes/repos",
            "events_url": "https://api.github.com/users/cerihughes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cerihughes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I don't see any tests for `HUBConformsToProtocol`. Can we add some, considering it's now an important part of our codebase?",
        "created_at": "2017-01-04T09:18:35Z",
        "updated_at": "2017-02-01T10:27:16Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/265#discussion_r94549950",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/265",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/94549950"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/265#discussion_r94549950"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/265"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/95323785",
        "pull_request_review_id": 15873223,
        "id": 95323785,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1MzIzNzg1",
        "diff_hunk": "@@ -56,29 +58,30 @@ - (void)performOperationForViewURI:(NSURL *)viewURI\n                      previousError:(nullable NSError *)previousError\n {\n     self.isExecuting = YES;\n-    \n+\n+    id<HUBContentOperationContext> const context = ({",
        "path": "sources/HUBContentOperationWrapper.m",
        "position": 15,
        "original_position": 15,
        "commit_id": "8f9be25c028f126cdd75b64f982c3e3e3573f0b3",
        "original_commit_id": "9eaa043ee48d6ded1a8c8702323d6f417c23db33",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "What's the point of the `({ })`-scoping here? Haven't seen that pattern before \ud83d\ude2e ",
        "created_at": "2017-01-10T09:12:58Z",
        "updated_at": "2017-02-02T19:50:14Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/253#discussion_r95323785",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/253",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/95323785"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/253#discussion_r95323785"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/253"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/95400596",
        "pull_request_review_id": 15953805,
        "id": 95400596,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1NDAwNTk2",
        "diff_hunk": "@@ -56,29 +58,30 @@ - (void)performOperationForViewURI:(NSURL *)viewURI\n                      previousError:(nullable NSError *)previousError\n {\n     self.isExecuting = YES;\n-    \n+\n+    id<HUBContentOperationContext> const context = ({",
        "path": "sources/HUBContentOperationWrapper.m",
        "position": 15,
        "original_position": 15,
        "commit_id": "8f9be25c028f126cdd75b64f982c3e3e3573f0b3",
        "original_commit_id": "9eaa043ee48d6ded1a8c8702323d6f417c23db33",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It\u2019s a GNU C thingy (\u201c[statement expression](https://gcc.gnu.org/onlinedocs/gcc/Statement-Exprs.html)\u201d) that basically creates a new scope and then the last value is \u201creturned\u201d. The use-case here is to \u201ctrick\u201d Xcode into indenting the statement in a way that\u2019s nice to read. Which is all good since we use gnu11 as our C dialect :)",
        "created_at": "2017-01-10T16:25:19Z",
        "updated_at": "2017-02-02T19:50:14Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/253#discussion_r95400596",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/253",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/95400596"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/253#discussion_r95400596"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/253"
            }
        },
        "in_reply_to_id": 95323785
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/95402121",
        "pull_request_review_id": 15955430,
        "id": 95402121,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1NDAyMTIx",
        "diff_hunk": "@@ -56,29 +58,30 @@ - (void)performOperationForViewURI:(NSURL *)viewURI\n                      previousError:(nullable NSError *)previousError\n {\n     self.isExecuting = YES;\n-    \n+\n+    id<HUBContentOperationContext> const context = ({",
        "path": "sources/HUBContentOperationWrapper.m",
        "position": 15,
        "original_position": 15,
        "commit_id": "8f9be25c028f126cdd75b64f982c3e3e3573f0b3",
        "original_commit_id": "9eaa043ee48d6ded1a8c8702323d6f417c23db33",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Aha, cool :smile:\r\n\r\n![the more you know](https://media.giphy.com/media/tANpI4H9zlv1u/giphy.gif)",
        "created_at": "2017-01-10T16:31:57Z",
        "updated_at": "2017-02-02T19:50:14Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/253#discussion_r95402121",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/253",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/95402121"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/253#discussion_r95402121"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/253"
            }
        },
        "in_reply_to_id": 95323785
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/101144741",
        "pull_request_review_id": 21865619,
        "id": 101144741,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTE0NDc0MQ==",
        "diff_hunk": "@@ -432,6 +432,11 @@ - (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldReceive\n     UIView *currentView = touch.view;\n     \n     while (currentView != nil && currentView != self.view) {\n+",
        "path": "sources/HUBComponentWrapper.m",
        "position": 4,
        "original_position": 4,
        "commit_id": "449536f9333783ab63fbed4acb525cc91054a83b",
        "original_commit_id": "449536f9333783ab63fbed4acb525cc91054a83b",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\ud83c\udfa8 Remove the empty line",
        "created_at": "2017-02-14T21:15:02Z",
        "updated_at": "2017-02-14T21:18:14Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/283#discussion_r101144741",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/283",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/101144741"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/283#discussion_r101144741"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/283"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/101145101",
        "pull_request_review_id": 21865619,
        "id": 101145101,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTE0NTEwMQ==",
        "diff_hunk": "@@ -432,6 +432,11 @@ - (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldReceive\n     UIView *currentView = touch.view;\n     \n     while (currentView != nil && currentView != self.view) {\n+\n+        if ([currentView isKindOfClass:[UISegmentedControl class]]) {",
        "path": "sources/HUBComponentWrapper.m",
        "position": 5,
        "original_position": 5,
        "commit_id": "449536f9333783ab63fbed4acb525cc91054a83b",
        "original_commit_id": "449536f9333783ab63fbed4acb525cc91054a83b",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Wondering if we should not add this check and instead change the `UIButton` check to `UIControl`?\r\n\r\n@mhallendal @cerihughes What do you and CA think?",
        "created_at": "2017-02-14T21:16:48Z",
        "updated_at": "2017-02-14T21:18:14Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/283#discussion_r101145101",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/283",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/101145101"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/283#discussion_r101145101"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/283"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/101735811",
        "pull_request_review_id": 22473805,
        "id": 101735811,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTczNTgxMQ==",
        "diff_hunk": "@@ -42,6 +46,27 @@ - (void)setContentOffset:(CGPoint)contentOffset\n     [super setContentOffset:contentOffset];\n }\n \n+- (NSMutableSet<NSString *> *)registeredCollectionViewCellReuseIdentifiers\n+{\n+    if (!_registeredCollectionViewCellReuseIdentifiers) {\n+        _registeredCollectionViewCellReuseIdentifiers = [NSMutableSet new];\n+    }\n+\n+    return _registeredCollectionViewCellReuseIdentifiers;\n+}\n+\n+- (__kindof UICollectionViewCell *)dequeueReusableCellWithReuseIdentifier:(NSString *)identifier",
        "path": "sources/HUBCollectionView.m",
        "position": 27,
        "original_position": 27,
        "commit_id": "99785606781e0726423c4d2f0de26b5cb795cc70",
        "original_commit_id": "99785606781e0726423c4d2f0de26b5cb795cc70",
        "user": {
            "login": "cerihughes",
            "id": 12008876,
            "node_id": "MDQ6VXNlcjEyMDA4ODc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12008876?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cerihughes",
            "html_url": "https://github.com/cerihughes",
            "followers_url": "https://api.github.com/users/cerihughes/followers",
            "following_url": "https://api.github.com/users/cerihughes/following{/other_user}",
            "gists_url": "https://api.github.com/users/cerihughes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cerihughes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cerihughes/subscriptions",
            "organizations_url": "https://api.github.com/users/cerihughes/orgs",
            "repos_url": "https://api.github.com/users/cerihughes/repos",
            "events_url": "https://api.github.com/users/cerihughes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cerihughes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I don't really have a strong opinion, but would it be better to just add this logic into an overridden `registerClass: forCellWithReuseIdentifier:`? That way we wouldn't have to add to the public API of this class.",
        "created_at": "2017-02-17T11:12:31Z",
        "updated_at": "2017-02-17T11:12:51Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/286#discussion_r101735811",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/286",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/101735811"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/286#discussion_r101735811"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/286"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/102233009",
        "pull_request_review_id": 22982938,
        "id": 102233009,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjIzMzAwOQ==",
        "diff_hunk": "@@ -42,6 +46,27 @@ - (void)setContentOffset:(CGPoint)contentOffset\n     [super setContentOffset:contentOffset];\n }\n \n+- (NSMutableSet<NSString *> *)registeredCollectionViewCellReuseIdentifiers\n+{\n+    if (!_registeredCollectionViewCellReuseIdentifiers) {\n+        _registeredCollectionViewCellReuseIdentifiers = [NSMutableSet new];\n+    }\n+\n+    return _registeredCollectionViewCellReuseIdentifiers;\n+}\n+\n+- (__kindof UICollectionViewCell *)dequeueReusableCellWithReuseIdentifier:(NSString *)identifier\n+                                                             forIndexPath:(NSIndexPath *)indexPath\n+                                                cellClassWhenUnregistered:(Class)cellClass\n+{\n+    if (![self.registeredCollectionViewCellReuseIdentifiers containsObject:identifier]) {\n+        [self registerClass:cellClass forCellWithReuseIdentifier:identifier];",
        "path": "sources/HUBCollectionView.m",
        "position": 32,
        "original_position": 32,
        "commit_id": "99785606781e0726423c4d2f0de26b5cb795cc70",
        "original_commit_id": "99785606781e0726423c4d2f0de26b5cb795cc70",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@mhallendal How about doing this in the `loadCollectionViewIfNeeded` method? Would also allow us to not expose any new API. Or is there a specific reason we want to do it this way (i.e. JIT for when the cell is being dequeued)? Feels a bit scary and on the edge of the API constraints.",
        "created_at": "2017-02-21T15:24:59Z",
        "updated_at": "2017-02-21T15:25:11Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/286#discussion_r102233009",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/286",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/102233009"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/286#discussion_r102233009"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/286"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/102236916",
        "pull_request_review_id": 22987160,
        "id": 102236916,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjIzNjkxNg==",
        "diff_hunk": "@@ -42,6 +46,27 @@ - (void)setContentOffset:(CGPoint)contentOffset\n     [super setContentOffset:contentOffset];\n }\n \n+- (NSMutableSet<NSString *> *)registeredCollectionViewCellReuseIdentifiers\n+{\n+    if (!_registeredCollectionViewCellReuseIdentifiers) {\n+        _registeredCollectionViewCellReuseIdentifiers = [NSMutableSet new];\n+    }\n+\n+    return _registeredCollectionViewCellReuseIdentifiers;\n+}\n+\n+- (__kindof UICollectionViewCell *)dequeueReusableCellWithReuseIdentifier:(NSString *)identifier\n+                                                             forIndexPath:(NSIndexPath *)indexPath\n+                                                cellClassWhenUnregistered:(Class)cellClass\n+{\n+    if (![self.registeredCollectionViewCellReuseIdentifiers containsObject:identifier]) {\n+        [self registerClass:cellClass forCellWithReuseIdentifier:identifier];",
        "path": "sources/HUBCollectionView.m",
        "position": 32,
        "original_position": 32,
        "commit_id": "99785606781e0726423c4d2f0de26b5cb795cc70",
        "original_commit_id": "99785606781e0726423c4d2f0de26b5cb795cc70",
        "user": {
            "login": "hallski",
            "id": 541,
            "node_id": "MDQ6VXNlcjU0MQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/541?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hallski",
            "html_url": "https://github.com/hallski",
            "followers_url": "https://api.github.com/users/hallski/followers",
            "following_url": "https://api.github.com/users/hallski/following{/other_user}",
            "gists_url": "https://api.github.com/users/hallski/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hallski/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hallski/subscriptions",
            "organizations_url": "https://api.github.com/users/hallski/orgs",
            "repos_url": "https://api.github.com/users/hallski/repos",
            "events_url": "https://api.github.com/users/hallski/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hallski/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Not sure I follow here, we don't know all the potential identifiers in `loadCollectionViewIfNeeded`. This code is just copied over from `collectionView:cellForItemAtIndexPath:` which is where it's being called from still.",
        "created_at": "2017-02-21T15:39:33Z",
        "updated_at": "2017-02-21T15:39:33Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/286#discussion_r102236916",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/286",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/102236916"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/286#discussion_r102236916"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/286"
            }
        },
        "in_reply_to_id": 102233009
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/102238113",
        "pull_request_review_id": 22988466,
        "id": 102238113,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjIzODExMw==",
        "diff_hunk": "@@ -42,6 +46,27 @@ - (void)setContentOffset:(CGPoint)contentOffset\n     [super setContentOffset:contentOffset];\n }\n \n+- (NSMutableSet<NSString *> *)registeredCollectionViewCellReuseIdentifiers\n+{\n+    if (!_registeredCollectionViewCellReuseIdentifiers) {\n+        _registeredCollectionViewCellReuseIdentifiers = [NSMutableSet new];\n+    }\n+\n+    return _registeredCollectionViewCellReuseIdentifiers;\n+}\n+\n+- (__kindof UICollectionViewCell *)dequeueReusableCellWithReuseIdentifier:(NSString *)identifier",
        "path": "sources/HUBCollectionView.m",
        "position": 27,
        "original_position": 27,
        "commit_id": "99785606781e0726423c4d2f0de26b5cb795cc70",
        "original_commit_id": "99785606781e0726423c4d2f0de26b5cb795cc70",
        "user": {
            "login": "hallski",
            "id": 541,
            "node_id": "MDQ6VXNlcjU0MQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/541?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hallski",
            "html_url": "https://github.com/hallski",
            "followers_url": "https://api.github.com/users/hallski/followers",
            "following_url": "https://api.github.com/users/hallski/following{/other_user}",
            "gists_url": "https://api.github.com/users/hallski/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hallski/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hallski/subscriptions",
            "organizations_url": "https://api.github.com/users/hallski/orgs",
            "repos_url": "https://api.github.com/users/hallski/repos",
            "events_url": "https://api.github.com/users/hallski/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hallski/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I didn't want to change the semantics of that method in the subclass and since it's an internal class anyway I figured it's better to make it behave the same way and add another call for when we want specific behaviour.",
        "created_at": "2017-02-21T15:44:01Z",
        "updated_at": "2017-02-21T15:44:01Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/286#discussion_r102238113",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/286",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/102238113"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/286#discussion_r102238113"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/286"
            }
        },
        "in_reply_to_id": 101735811
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/102433748",
        "pull_request_review_id": 23187376,
        "id": 102433748,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjQzMzc0OA==",
        "diff_hunk": "@@ -20,55 +20,101 @@\n  */\n \n #import \"HUBComponentGestureRecognizer.h\"\n+#import \"HUBGestureRecognizerSynchronizing.h\"\n \n #import <UIKit/UIGestureRecognizerSubclass.h>\n \n NS_ASSUME_NONNULL_BEGIN\n \n+@interface HUBComponentGestureRecognizer ()\n+@property (nonatomic, strong, readonly) id<HUBGestureRecognizerSynchronizing> synchronizer;\n+@end\n+\n @implementation HUBComponentGestureRecognizer\n \n+#pragma mark - Object lifecycle\n+\n+- (instancetype)initWithSynchronizer:(id<HUBGestureRecognizerSynchronizing>)synchronizer\n+{\n+    NSParameterAssert(synchronizer);\n+\n+    self = [super initWithTarget:nil action:nil];\n+\n+    if (self) {\n+        _synchronizer = synchronizer;\n+    }\n+\n+    return self;\n+}\n+\n+#pragma mark - Changing state\n+\n+- (void)begin\n+{\n+    self.state = UIGestureRecognizerStateBegan;\n+    self.synchronizer.locked = YES;\n+}\n+\n+- (void)finishWithState:(UIGestureRecognizerState)state\n+{\n+    if ([self isHandlingTouch]) {\n+        self.synchronizer.locked = NO;\n+    }\n+    self.state = state;\n+}\n+\n #pragma mark - API\n \n - (void)cancel\n {\n-    self.state = UIGestureRecognizerStateCancelled;\n+    if ([self isHandlingTouch]) {\n+        [self finishWithState:UIGestureRecognizerStateCancelled];\n+    }\n }\n \n #pragma mark - UIGestureRecognizer\n \n - (void)touchesBegan:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event\n {\n     [super touchesBegan:touches withEvent:event];\n-    self.state = UIGestureRecognizerStateBegan;\n+\n+    if (self.synchronizer.locked) {\n+        [self finishWithState:UIGestureRecognizerStateFailed];\n+        return;\n+    }\n+   \n+    [self begin];\n }\n \n - (void)touchesMoved:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event\n {\n     [super touchesMoved:touches withEvent:event];\n-    \n+\n     UITouch * const touch = [touches anyObject];\n     CGPoint const touchLocation = [touch locationInView:self.view];\n-    \n-    if (touchLocation.y < 0 || touchLocation.y > CGRectGetHeight(self.view.bounds)) {\n-        self.state = UIGestureRecognizerStateFailed;\n-    } else if (touchLocation.x < 0 || touchLocation.x > CGRectGetWidth(self.view.bounds)) {\n-        self.state = UIGestureRecognizerStateFailed;\n+\n+    if (!CGRectContainsPoint(self.view.bounds, touchLocation)) {\n+        [self finishWithState:UIGestureRecognizerStateFailed];",
        "path": "sources/HUBComponentGestureRecognizer.m",
        "position": 90,
        "original_position": 86,
        "commit_id": "597d55039022cd097148a18dc880de454f78b646",
        "original_commit_id": "4730d7e30e336a1a05ddf95825c54538f4699226",
        "user": {
            "login": "hallski",
            "id": 541,
            "node_id": "MDQ6VXNlcjU0MQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/541?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hallski",
            "html_url": "https://github.com/hallski",
            "followers_url": "https://api.github.com/users/hallski/followers",
            "following_url": "https://api.github.com/users/hallski/following{/other_user}",
            "gists_url": "https://api.github.com/users/hallski/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hallski/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hallski/subscriptions",
            "organizations_url": "https://api.github.com/users/hallski/orgs",
            "repos_url": "https://api.github.com/users/hallski/repos",
            "events_url": "https://api.github.com/users/hallski/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hallski/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Nice cleanup!",
        "created_at": "2017-02-22T10:53:05Z",
        "updated_at": "2017-02-22T12:59:26Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/290#discussion_r102433748",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/290",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/102433748"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/290#discussion_r102433748"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/290"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/102471836",
        "pull_request_review_id": 23227102,
        "id": 102471836,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjQ3MTgzNg==",
        "diff_hunk": "@@ -70,8 +70,12 @@ extern HUBViewModelDiff *HUBDiffMyersAlgorithm(id<HUBViewModel>, id<HUBViewModel\n /// The index paths of any body components that were modified in the new view model. \n @property (nonatomic, strong, readonly) NSArray<NSIndexPath *> *reloadedBodyComponentIndexPaths;\n \n-/// A convenience property that returns YES if there are any inserts, deletes or reloads in this diff.\n-@property (nonatomic, readonly) BOOL hasChanges;",
        "path": "sources/HUBViewModelDiff.h",
        "position": null,
        "original_position": 5,
        "commit_id": "41fd080080750727b639f91ec96b31f3bbd37176",
        "original_commit_id": "c87e8069844ebe8d2828c450c09538b4bdb159fd",
        "user": {
            "login": "cerihughes",
            "id": 12008876,
            "node_id": "MDQ6VXNlcjEyMDA4ODc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12008876?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cerihughes",
            "html_url": "https://github.com/cerihughes",
            "followers_url": "https://api.github.com/users/cerihughes/followers",
            "following_url": "https://api.github.com/users/cerihughes/following{/other_user}",
            "gists_url": "https://api.github.com/users/cerihughes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cerihughes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cerihughes/subscriptions",
            "organizations_url": "https://api.github.com/users/cerihughes/orgs",
            "repos_url": "https://api.github.com/users/cerihughes/repos",
            "events_url": "https://api.github.com/users/cerihughes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cerihughes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I don't think we need to change this API. We're only interested in whether there are changes - we don't really care where they come from.",
        "created_at": "2017-02-22T14:20:47Z",
        "updated_at": "2017-02-22T18:17:35Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/291#discussion_r102471836",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/291",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/102471836"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/291#discussion_r102471836"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/291"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/102511583",
        "pull_request_review_id": 23269258,
        "id": 102511583,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjUxMTU4Mw==",
        "diff_hunk": "@@ -22,6 +22,7 @@\n \n #import \"HUBViewModelDiff.h\"\n #import \"HUBComponentModel.h\"\n+#import \"HUBIdentifier.h\"",
        "path": "sources/HUBViewModelDiff.m",
        "position": null,
        "original_position": 4,
        "commit_id": "41fd080080750727b639f91ec96b31f3bbd37176",
        "original_commit_id": "4d81327568710668afb67aa8ccd1d097199665b0",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Is this import used?",
        "created_at": "2017-02-22T16:46:21Z",
        "updated_at": "2017-02-22T18:17:35Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/291#discussion_r102511583",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/291",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/102511583"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/291#discussion_r102511583"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/291"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/102512463",
        "pull_request_review_id": 23269258,
        "id": 102512463,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjUxMjQ2Mw==",
        "diff_hunk": "@@ -70,7 +79,22 @@ - (BOOL)hasChanges\n {\n     return self.insertedBodyComponentIndexPaths.count > 0\n         || self.deletedBodyComponentIndexPaths.count > 0\n-        || self.reloadedBodyComponentIndexPaths.count > 0;\n+        || self.reloadedBodyComponentIndexPaths.count > 0\n+        || self.headerComponentIdentifierHasChanged;\n+}\n+\n+- (void)calculateHeaderChangesFromViewModel:(id<HUBViewModel>)fromViewModel toViewModel:(id<HUBViewModel>)toViewModel\n+{\n+    id<HUBComponentModel> fromHeaderModel = fromViewModel.headerComponentModel;\n+    id<HUBComponentModel> toHeaderModel = toViewModel.headerComponentModel;\n+\n+    if (!fromHeaderModel && !toHeaderModel) {\n+        return;\n+    }\n+\n+    if (![fromHeaderModel isEqual:toHeaderModel]) {\n+        self.headerComponentIdentifierHasChanged = YES;",
        "path": "sources/HUBViewModelDiff.m",
        "position": null,
        "original_position": 51,
        "commit_id": "41fd080080750727b639f91ec96b31f3bbd37176",
        "original_commit_id": "4d81327568710668afb67aa8ccd1d097199665b0",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Shouldn't this technically be `headerComponentHasChanged`, as you're comparing the entire model, rather than just the identifier?",
        "created_at": "2017-02-22T16:49:37Z",
        "updated_at": "2017-02-22T18:17:35Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/291#discussion_r102512463",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/291",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/102512463"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/291#discussion_r102512463"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/291"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/102512965",
        "pull_request_review_id": 23269258,
        "id": 102512965,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjUxMjk2NQ==",
        "diff_hunk": "@@ -57,7 +64,9 @@ + (instancetype)diffFromViewModel:(id<HUBViewModel>)fromViewModel\n                         algorithm:(HUBDiffAlgorithm)algorithm\n {\n     NSParameterAssert(algorithm);\n-    return algorithm(fromViewModel, toViewModel);\n+    HUBViewModelDiff *diff =  algorithm(fromViewModel, toViewModel);\n+    [diff calculateHeaderChangesFromViewModel:fromViewModel toViewModel:toViewModel];\n+    return diff;",
        "path": "sources/HUBViewModelDiff.m",
        "position": 20,
        "original_position": 28,
        "commit_id": "41fd080080750727b639f91ec96b31f3bbd37176",
        "original_commit_id": "4d81327568710668afb67aa8ccd1d097199665b0",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think it would make more sense to add this as a parameter to the initializer, and making the two algorithms perform the necessary comparison, especially if we'd ever need to perform more granular diffing on the child components of the header.",
        "created_at": "2017-02-22T16:51:33Z",
        "updated_at": "2017-02-22T18:17:35Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/291#discussion_r102512965",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/291",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/102512965"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/291#discussion_r102512965"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/291"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/102513808",
        "pull_request_review_id": 23271616,
        "id": 102513808,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjUxMzgwOA==",
        "diff_hunk": "@@ -37,6 +38,12 @@\n     return [indexPaths copy];\n }\n \n+@interface  HUBViewModelDiff ()\n+\n+@property (nonatomic, assign) BOOL headerComponentIdentifierHasChanged;",
        "path": "sources/HUBViewModelDiff.m",
        "position": null,
        "original_position": 14,
        "commit_id": "41fd080080750727b639f91ec96b31f3bbd37176",
        "original_commit_id": "4d81327568710668afb67aa8ccd1d097199665b0",
        "user": {
            "login": "cerihughes",
            "id": 12008876,
            "node_id": "MDQ6VXNlcjEyMDA4ODc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12008876?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cerihughes",
            "html_url": "https://github.com/cerihughes",
            "followers_url": "https://api.github.com/users/cerihughes/followers",
            "following_url": "https://api.github.com/users/cerihughes/following{/other_user}",
            "gists_url": "https://api.github.com/users/cerihughes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cerihughes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cerihughes/subscriptions",
            "organizations_url": "https://api.github.com/users/cerihughes/orgs",
            "repos_url": "https://api.github.com/users/cerihughes/repos",
            "events_url": "https://api.github.com/users/cerihughes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cerihughes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I actually made the opposite comment. None of the code that uses the diff cares which part of it has actually changed, so I don't think we need to change the API of this class.",
        "created_at": "2017-02-22T16:54:33Z",
        "updated_at": "2017-02-22T18:17:35Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/291#discussion_r102513808",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/291",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/102513808"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/291#discussion_r102513808"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/291"
            }
        },
        "in_reply_to_id": 102512304
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/102514712",
        "pull_request_review_id": 23272532,
        "id": 102514712,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjUxNDcxMg==",
        "diff_hunk": "@@ -57,7 +64,9 @@ + (instancetype)diffFromViewModel:(id<HUBViewModel>)fromViewModel\n                         algorithm:(HUBDiffAlgorithm)algorithm\n {\n     NSParameterAssert(algorithm);\n-    return algorithm(fromViewModel, toViewModel);\n+    HUBViewModelDiff *diff =  algorithm(fromViewModel, toViewModel);\n+    [diff calculateHeaderChangesFromViewModel:fromViewModel toViewModel:toViewModel];\n+    return diff;",
        "path": "sources/HUBViewModelDiff.m",
        "position": 20,
        "original_position": 28,
        "commit_id": "41fd080080750727b639f91ec96b31f3bbd37176",
        "original_commit_id": "4d81327568710668afb67aa8ccd1d097199665b0",
        "user": {
            "login": "cerihughes",
            "id": 12008876,
            "node_id": "MDQ6VXNlcjEyMDA4ODc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12008876?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cerihughes",
            "html_url": "https://github.com/cerihughes",
            "followers_url": "https://api.github.com/users/cerihughes/followers",
            "following_url": "https://api.github.com/users/cerihughes/following{/other_user}",
            "gists_url": "https://api.github.com/users/cerihughes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cerihughes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cerihughes/subscriptions",
            "organizations_url": "https://api.github.com/users/cerihughes/orgs",
            "repos_url": "https://api.github.com/users/cerihughes/repos",
            "events_url": "https://api.github.com/users/cerihughes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cerihughes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Isn't the header comparison totally separate from the diffing algorithm though? It's only possible to assign a single header component so why would we want every algorithm to make the same comparison? Maybe I've misunderstood what the diffing algorithm is doing...",
        "created_at": "2017-02-22T16:58:00Z",
        "updated_at": "2017-02-22T18:17:35Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/291#discussion_r102514712",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/291",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/102514712"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/291#discussion_r102514712"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/291"
            }
        },
        "in_reply_to_id": 102512965
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/102516184",
        "pull_request_review_id": 23274099,
        "id": 102516184,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjUxNjE4NA==",
        "diff_hunk": "@@ -57,7 +64,9 @@ + (instancetype)diffFromViewModel:(id<HUBViewModel>)fromViewModel\n                         algorithm:(HUBDiffAlgorithm)algorithm\n {\n     NSParameterAssert(algorithm);\n-    return algorithm(fromViewModel, toViewModel);\n+    HUBViewModelDiff *diff =  algorithm(fromViewModel, toViewModel);\n+    [diff calculateHeaderChangesFromViewModel:fromViewModel toViewModel:toViewModel];\n+    return diff;",
        "path": "sources/HUBViewModelDiff.m",
        "position": 20,
        "original_position": 28,
        "commit_id": "41fd080080750727b639f91ec96b31f3bbd37176",
        "original_commit_id": "4d81327568710668afb67aa8ccd1d097199665b0",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "As I see it, the role of the diffing algorithm is to find a set of changes between two view models \u2013\u00a0in which the header component resides. \r\nImplementation-wise, I guess the header component is used a bit different right now due to it not being handled by the UICollectionView, but iirc, we would probably like to change that in the future. In that case, we might want to diff the child components of the header / overlay components just as we do with body components.\r\n\r\nThe plan was actually to perform diffing for headers & overlays inside the algorithms when we first wrote this, which is why they both take the entire `HUBViewModel`s instead of just arrays of components, but it got deprioritized \ud83d\ude1b ",
        "created_at": "2017-02-22T17:03:36Z",
        "updated_at": "2017-02-22T18:17:35Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/291#discussion_r102516184",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/291",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/102516184"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/291#discussion_r102516184"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/291"
            }
        },
        "in_reply_to_id": 102512965
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/102517508",
        "pull_request_review_id": 23275487,
        "id": 102517508,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjUxNzUwOA==",
        "diff_hunk": "@@ -37,6 +38,12 @@\n     return [indexPaths copy];\n }\n \n+@interface  HUBViewModelDiff ()\n+\n+@property (nonatomic, assign) BOOL headerComponentIdentifierHasChanged;",
        "path": "sources/HUBViewModelDiff.m",
        "position": null,
        "original_position": 14,
        "commit_id": "41fd080080750727b639f91ec96b31f3bbd37176",
        "original_commit_id": "4d81327568710668afb67aa8ccd1d097199665b0",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Couldn't that make the API be a tad confusing though if the model reports no deletions/inserts/deletions, but still claims to have changes?",
        "created_at": "2017-02-22T17:08:55Z",
        "updated_at": "2017-02-22T18:17:35Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/291#discussion_r102517508",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/291",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/102517508"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/291#discussion_r102517508"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/291"
            }
        },
        "in_reply_to_id": 102512304
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/102520618",
        "pull_request_review_id": 23278777,
        "id": 102520618,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjUyMDYxOA==",
        "diff_hunk": "@@ -70,7 +79,22 @@ - (BOOL)hasChanges\n {\n     return self.insertedBodyComponentIndexPaths.count > 0\n         || self.deletedBodyComponentIndexPaths.count > 0\n-        || self.reloadedBodyComponentIndexPaths.count > 0;\n+        || self.reloadedBodyComponentIndexPaths.count > 0\n+        || self.headerComponentIdentifierHasChanged;\n+}\n+\n+- (void)calculateHeaderChangesFromViewModel:(id<HUBViewModel>)fromViewModel toViewModel:(id<HUBViewModel>)toViewModel\n+{\n+    id<HUBComponentModel> fromHeaderModel = fromViewModel.headerComponentModel;\n+    id<HUBComponentModel> toHeaderModel = toViewModel.headerComponentModel;\n+\n+    if (!fromHeaderModel && !toHeaderModel) {\n+        return;\n+    }\n+\n+    if (![fromHeaderModel isEqual:toHeaderModel]) {\n+        self.headerComponentIdentifierHasChanged = YES;",
        "path": "sources/HUBViewModelDiff.m",
        "position": null,
        "original_position": 51,
        "commit_id": "41fd080080750727b639f91ec96b31f3bbd37176",
        "original_commit_id": "4d81327568710668afb67aa8ccd1d097199665b0",
        "user": {
            "login": "quentar",
            "id": 1273032,
            "node_id": "MDQ6VXNlcjEyNzMwMzI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1273032?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/quentar",
            "html_url": "https://github.com/quentar",
            "followers_url": "https://api.github.com/users/quentar/followers",
            "following_url": "https://api.github.com/users/quentar/following{/other_user}",
            "gists_url": "https://api.github.com/users/quentar/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/quentar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/quentar/subscriptions",
            "organizations_url": "https://api.github.com/users/quentar/orgs",
            "repos_url": "https://api.github.com/users/quentar/repos",
            "events_url": "https://api.github.com/users/quentar/events{/privacy}",
            "received_events_url": "https://api.github.com/users/quentar/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Good catch, thanks, forgot to update the name.",
        "created_at": "2017-02-22T17:22:02Z",
        "updated_at": "2017-02-22T18:17:35Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/291#discussion_r102520618",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/291",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/102520618"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/291#discussion_r102520618"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/291"
            }
        },
        "in_reply_to_id": 102512463
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/102520713",
        "pull_request_review_id": 23278872,
        "id": 102520713,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjUyMDcxMw==",
        "diff_hunk": "@@ -22,6 +22,7 @@\n \n #import \"HUBViewModelDiff.h\"\n #import \"HUBComponentModel.h\"\n+#import \"HUBIdentifier.h\"",
        "path": "sources/HUBViewModelDiff.m",
        "position": null,
        "original_position": 4,
        "commit_id": "41fd080080750727b639f91ec96b31f3bbd37176",
        "original_commit_id": "4d81327568710668afb67aa8ccd1d097199665b0",
        "user": {
            "login": "quentar",
            "id": 1273032,
            "node_id": "MDQ6VXNlcjEyNzMwMzI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1273032?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/quentar",
            "html_url": "https://github.com/quentar",
            "followers_url": "https://api.github.com/users/quentar/followers",
            "following_url": "https://api.github.com/users/quentar/following{/other_user}",
            "gists_url": "https://api.github.com/users/quentar/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/quentar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/quentar/subscriptions",
            "organizations_url": "https://api.github.com/users/quentar/orgs",
            "repos_url": "https://api.github.com/users/quentar/repos",
            "events_url": "https://api.github.com/users/quentar/events{/privacy}",
            "received_events_url": "https://api.github.com/users/quentar/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Thanks for noticing, not anymore I think, I'll update it.",
        "created_at": "2017-02-22T17:22:30Z",
        "updated_at": "2017-02-22T18:17:35Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/291#discussion_r102520713",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/291",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/102520713"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/291#discussion_r102520713"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/291"
            }
        },
        "in_reply_to_id": 102511583
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/102531965",
        "pull_request_review_id": 23290593,
        "id": 102531965,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjUzMTk2NQ==",
        "diff_hunk": "@@ -57,7 +64,9 @@ + (instancetype)diffFromViewModel:(id<HUBViewModel>)fromViewModel\n                         algorithm:(HUBDiffAlgorithm)algorithm\n {\n     NSParameterAssert(algorithm);\n-    return algorithm(fromViewModel, toViewModel);\n+    HUBViewModelDiff *diff =  algorithm(fromViewModel, toViewModel);\n+    [diff calculateHeaderChangesFromViewModel:fromViewModel toViewModel:toViewModel];\n+    return diff;",
        "path": "sources/HUBViewModelDiff.m",
        "position": 20,
        "original_position": 28,
        "commit_id": "41fd080080750727b639f91ec96b31f3bbd37176",
        "original_commit_id": "4d81327568710668afb67aa8ccd1d097199665b0",
        "user": {
            "login": "quentar",
            "id": 1273032,
            "node_id": "MDQ6VXNlcjEyNzMwMzI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1273032?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/quentar",
            "html_url": "https://github.com/quentar",
            "followers_url": "https://api.github.com/users/quentar/followers",
            "following_url": "https://api.github.com/users/quentar/following{/other_user}",
            "gists_url": "https://api.github.com/users/quentar/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/quentar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/quentar/subscriptions",
            "organizations_url": "https://api.github.com/users/quentar/orgs",
            "repos_url": "https://api.github.com/users/quentar/repos",
            "events_url": "https://api.github.com/users/quentar/events{/privacy}",
            "received_events_url": "https://api.github.com/users/quentar/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This method is de facto used 'initializer'. Adding check for header changes seemed better than just reverting PR #277 which seems to be useful but causing bugs.",
        "created_at": "2017-02-22T18:10:21Z",
        "updated_at": "2017-02-22T18:17:35Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/291#discussion_r102531965",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/291",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/102531965"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/291#discussion_r102531965"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/291"
            }
        },
        "in_reply_to_id": 102512965
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/102531390",
        "pull_request_review_id": 23289979,
        "id": 102531390,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjUzMTM5MA==",
        "diff_hunk": "@@ -37,6 +38,12 @@\n     return [indexPaths copy];\n }\n \n+@interface  HUBViewModelDiff ()\n+\n+@property (nonatomic, assign) BOOL headerComponentIdentifierHasChanged;",
        "path": "sources/HUBViewModelDiff.m",
        "position": null,
        "original_position": 14,
        "commit_id": "41fd080080750727b639f91ec96b31f3bbd37176",
        "original_commit_id": "4d81327568710668afb67aa8ccd1d097199665b0",
        "user": {
            "login": "quentar",
            "id": 1273032,
            "node_id": "MDQ6VXNlcjEyNzMwMzI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1273032?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/quentar",
            "html_url": "https://github.com/quentar",
            "followers_url": "https://api.github.com/users/quentar/followers",
            "following_url": "https://api.github.com/users/quentar/following{/other_user}",
            "gists_url": "https://api.github.com/users/quentar/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/quentar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/quentar/subscriptions",
            "organizations_url": "https://api.github.com/users/quentar/orgs",
            "repos_url": "https://api.github.com/users/quentar/repos",
            "events_url": "https://api.github.com/users/quentar/events{/privacy}",
            "received_events_url": "https://api.github.com/users/quentar/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I don't have opinion whether to have two public APIs or one. Please decide if it is needed in scope of this PR as it can be of course changed easily later when needed. Now why have it if we don't need it.",
        "created_at": "2017-02-22T18:07:49Z",
        "updated_at": "2017-02-22T18:22:33Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/291#discussion_r102531390",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/291",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/102531390"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/291#discussion_r102531390"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/291"
            }
        },
        "in_reply_to_id": 102512304
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/102536783",
        "pull_request_review_id": 23295561,
        "id": 102536783,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjUzNjc4Mw==",
        "diff_hunk": "@@ -57,7 +64,9 @@ + (instancetype)diffFromViewModel:(id<HUBViewModel>)fromViewModel\n                         algorithm:(HUBDiffAlgorithm)algorithm\n {\n     NSParameterAssert(algorithm);\n-    return algorithm(fromViewModel, toViewModel);\n+    HUBViewModelDiff *diff =  algorithm(fromViewModel, toViewModel);\n+    [diff calculateHeaderChangesFromViewModel:fromViewModel toViewModel:toViewModel];\n+    return diff;",
        "path": "sources/HUBViewModelDiff.m",
        "position": 20,
        "original_position": 28,
        "commit_id": "41fd080080750727b639f91ec96b31f3bbd37176",
        "original_commit_id": "4d81327568710668afb67aa8ccd1d097199665b0",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'm not saying we should change the public convenience constructor, only that we introduce the `headerComponentHasChanged` parameter into the internal `initWithInserts:deletes:reloads:` initializer and performing the header comparison inside the algorithms. This way the diffing algorithms would still have full responsibility of all the diffing logic, and the `HUBViewModelDiff` would remain an immutable plain old data type.",
        "created_at": "2017-02-22T18:30:44Z",
        "updated_at": "2017-02-22T18:40:37Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/291#discussion_r102536783",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/291",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/102536783"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/291#discussion_r102536783"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/291"
            }
        },
        "in_reply_to_id": 102512965
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/102512304",
        "pull_request_review_id": 23269258,
        "id": 102512304,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjUxMjMwNA==",
        "diff_hunk": "@@ -37,6 +38,12 @@\n     return [indexPaths copy];\n }\n \n+@interface  HUBViewModelDiff ()\n+\n+@property (nonatomic, assign) BOOL headerComponentIdentifierHasChanged;",
        "path": "sources/HUBViewModelDiff.m",
        "position": null,
        "original_position": 14,
        "commit_id": "41fd080080750727b639f91ec96b31f3bbd37176",
        "original_commit_id": "4d81327568710668afb67aa8ccd1d097199665b0",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Wouldn't it make more sense to make this a public, readonly property? I'm thinking since the rest of the `HUBViewModelDiff` API is immutable, and it might be useful for the consumer of the diff to see whether or not the header has been modified.",
        "created_at": "2017-02-22T16:49:04Z",
        "updated_at": "2017-02-22T18:44:05Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/291#discussion_r102512304",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/291",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/102512304"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/291#discussion_r102512304"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/291"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/102541824",
        "pull_request_review_id": 23300896,
        "id": 102541824,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjU0MTgyNA==",
        "diff_hunk": "@@ -37,6 +38,12 @@\n     return [indexPaths copy];\n }\n \n+@interface  HUBViewModelDiff ()\n+\n+@property (nonatomic, assign) BOOL headerComponentIdentifierHasChanged;",
        "path": "sources/HUBViewModelDiff.m",
        "position": null,
        "original_position": 14,
        "commit_id": "41fd080080750727b639f91ec96b31f3bbd37176",
        "original_commit_id": "4d81327568710668afb67aa8ccd1d097199665b0",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think it could be useful to expose it for the sake of clarity, but I'm fine either way. I'd rather it be `readonly` though \ud83d\ude1b ",
        "created_at": "2017-02-22T18:52:02Z",
        "updated_at": "2017-02-22T18:52:02Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/291#discussion_r102541824",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/291",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/102541824"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/291#discussion_r102541824"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/291"
            }
        },
        "in_reply_to_id": 102512304
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/102558303",
        "pull_request_review_id": 23317903,
        "id": 102558303,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjU1ODMwMw==",
        "diff_hunk": "@@ -57,7 +64,9 @@ + (instancetype)diffFromViewModel:(id<HUBViewModel>)fromViewModel\n                         algorithm:(HUBDiffAlgorithm)algorithm\n {\n     NSParameterAssert(algorithm);\n-    return algorithm(fromViewModel, toViewModel);\n+    HUBViewModelDiff *diff =  algorithm(fromViewModel, toViewModel);\n+    [diff calculateHeaderChangesFromViewModel:fromViewModel toViewModel:toViewModel];\n+    return diff;",
        "path": "sources/HUBViewModelDiff.m",
        "position": 20,
        "original_position": 28,
        "commit_id": "41fd080080750727b639f91ec96b31f3bbd37176",
        "original_commit_id": "4d81327568710668afb67aa8ccd1d097199665b0",
        "user": {
            "login": "cerihughes",
            "id": 12008876,
            "node_id": "MDQ6VXNlcjEyMDA4ODc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12008876?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cerihughes",
            "html_url": "https://github.com/cerihughes",
            "followers_url": "https://api.github.com/users/cerihughes/followers",
            "following_url": "https://api.github.com/users/cerihughes/following{/other_user}",
            "gists_url": "https://api.github.com/users/cerihughes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cerihughes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cerihughes/subscriptions",
            "organizations_url": "https://api.github.com/users/cerihughes/orgs",
            "repos_url": "https://api.github.com/users/cerihughes/repos",
            "events_url": "https://api.github.com/users/cerihughes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cerihughes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "But isn't the point of the diffing algorithm to tell us which components have been added, removed and changed? Isn't that not something that we can even do for the header component?\r\nIf we did delegate this responsibility to the algorithm, would any algorithm implement it in any other way than `[header1 equalTo:header2]`?\r\n\r\nI don't really have a strong opinion either way... I'm just trying to understand the diffing a but better. :)",
        "created_at": "2017-02-22T20:00:13Z",
        "updated_at": "2017-02-22T20:01:34Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/291#discussion_r102558303",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/291",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/102558303"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/291#discussion_r102558303"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/291"
            }
        },
        "in_reply_to_id": 102512965
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/102570123",
        "pull_request_review_id": 23330178,
        "id": 102570123,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjU3MDEyMw==",
        "diff_hunk": "@@ -57,7 +64,9 @@ + (instancetype)diffFromViewModel:(id<HUBViewModel>)fromViewModel\n                         algorithm:(HUBDiffAlgorithm)algorithm\n {\n     NSParameterAssert(algorithm);\n-    return algorithm(fromViewModel, toViewModel);\n+    HUBViewModelDiff *diff =  algorithm(fromViewModel, toViewModel);\n+    [diff calculateHeaderChangesFromViewModel:fromViewModel toViewModel:toViewModel];\n+    return diff;",
        "path": "sources/HUBViewModelDiff.m",
        "position": 20,
        "original_position": 28,
        "commit_id": "41fd080080750727b639f91ec96b31f3bbd37176",
        "original_commit_id": "4d81327568710668afb67aa8ccd1d097199665b0",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yeah it would be implemented exactly the same way, only moved to a different place :smile:\r\n\r\nI'm only arguing that since the prototype of the diffing function implies that it takes two view models and returns a complete list of changes between them, that should also include whether or not the header changed, as it is a part of the view model. If we have to modify the diff after the algorithm has run, then the algorithms no longer deliver a complete diff.\r\n\r\nIn addition to that, if we would ever want to change the header diffing, (e.g. by differentiating between a completely new header and in-place updates to an existing header), then this could differ between algorithms, as the header can have list of child components, much like the view model's body components.",
        "created_at": "2017-02-22T20:55:50Z",
        "updated_at": "2017-02-22T21:02:20Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/291#discussion_r102570123",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/291",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/102570123"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/291#discussion_r102570123"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/291"
            }
        },
        "in_reply_to_id": 102512965
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/102664395",
        "pull_request_review_id": 23424270,
        "id": 102664395,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjY2NDM5NQ==",
        "diff_hunk": "@@ -57,7 +64,9 @@ + (instancetype)diffFromViewModel:(id<HUBViewModel>)fromViewModel\n                         algorithm:(HUBDiffAlgorithm)algorithm\n {\n     NSParameterAssert(algorithm);\n-    return algorithm(fromViewModel, toViewModel);\n+    HUBViewModelDiff *diff =  algorithm(fromViewModel, toViewModel);\n+    [diff calculateHeaderChangesFromViewModel:fromViewModel toViewModel:toViewModel];\n+    return diff;",
        "path": "sources/HUBViewModelDiff.m",
        "position": 20,
        "original_position": 28,
        "commit_id": "41fd080080750727b639f91ec96b31f3bbd37176",
        "original_commit_id": "4d81327568710668afb67aa8ccd1d097199665b0",
        "user": {
            "login": "cerihughes",
            "id": 12008876,
            "node_id": "MDQ6VXNlcjEyMDA4ODc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12008876?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cerihughes",
            "html_url": "https://github.com/cerihughes",
            "followers_url": "https://api.github.com/users/cerihughes/followers",
            "following_url": "https://api.github.com/users/cerihughes/following{/other_user}",
            "gists_url": "https://api.github.com/users/cerihughes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cerihughes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cerihughes/subscriptions",
            "organizations_url": "https://api.github.com/users/cerihughes/orgs",
            "repos_url": "https://api.github.com/users/cerihughes/repos",
            "events_url": "https://api.github.com/users/cerihughes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cerihughes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "What about when we include overlays in the diffing process (which we really should do). Wouldn't we want to reuse the diffing functions we already have for body components - i.e. remove the body specifics, make them more generic, then reuse them for the overlay components.\r\n\r\nIf we do that, considering the header components in those functions doesn't make sense either.",
        "created_at": "2017-02-23T08:52:22Z",
        "updated_at": "2017-02-23T08:52:22Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/291#discussion_r102664395",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/291",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/102664395"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/291#discussion_r102664395"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/291"
            }
        },
        "in_reply_to_id": 102512965
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/102950685",
        "pull_request_review_id": 23724572,
        "id": 102950685,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjk1MDY4NQ==",
        "diff_hunk": "@@ -0,0 +1,139 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import <CoreGraphics/CoreGraphics.h>\n+\n+NS_ASSUME_NONNULL_BEGIN\n+\n+#pragma mark Computing Values from CGFloats\n+\n+/**\n+ Round to largest integral value not greater than `value`.\n+ \n+ @note Consider using this function instead of the standard `floor` and `floorf` functions for `CGFloat` values. This\n+       function helps avoid implicit double promotion and loss of precision. Keeping the types correct regardless of\n+       if the backing type is `double` or `float`.\n+\n+ @param value The value that should be floored.\n+ @return The largest integral value not greater than `value`.\n+ */\n+static inline CGFloat HUBCGFloatFloor(CGFloat value)\n+{\n+#if CGFLOAT_IS_DOUBLE\n+    return floor(value);\n+#else\n+    return floorf(value);\n+#endif // CGFLOAT_IS_DOUBLE",
        "path": "sources/CGFloat+HUBMath.h",
        "position": 44,
        "original_position": 44,
        "commit_id": "bf55ff67a639cc72cf41f1d5f47ab52f18f1c2b4",
        "original_commit_id": "bf55ff67a639cc72cf41f1d5f47ab52f18f1c2b4",
        "user": {
            "login": "dflems",
            "id": 925850,
            "node_id": "MDQ6VXNlcjkyNTg1MA==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/925850?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dflems",
            "html_url": "https://github.com/dflems",
            "followers_url": "https://api.github.com/users/dflems/followers",
            "following_url": "https://api.github.com/users/dflems/following{/other_user}",
            "gists_url": "https://api.github.com/users/dflems/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dflems/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dflems/subscriptions",
            "organizations_url": "https://api.github.com/users/dflems/orgs",
            "repos_url": "https://api.github.com/users/dflems/repos",
            "events_url": "https://api.github.com/users/dflems/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dflems/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Can we use `tgmath.h` or C11 generic macros instead of our own helper functions?",
        "created_at": "2017-02-24T14:28:36Z",
        "updated_at": "2017-02-24T14:28:37Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/288#discussion_r102950685",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/288",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/102950685"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/288#discussion_r102950685"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/288"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/102968971",
        "pull_request_review_id": 23744687,
        "id": 102968971,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjk2ODk3MQ==",
        "diff_hunk": "@@ -0,0 +1,139 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import <CoreGraphics/CoreGraphics.h>\n+\n+NS_ASSUME_NONNULL_BEGIN\n+\n+#pragma mark Computing Values from CGFloats\n+\n+/**\n+ Round to largest integral value not greater than `value`.\n+ \n+ @note Consider using this function instead of the standard `floor` and `floorf` functions for `CGFloat` values. This\n+       function helps avoid implicit double promotion and loss of precision. Keeping the types correct regardless of\n+       if the backing type is `double` or `float`.\n+\n+ @param value The value that should be floored.\n+ @return The largest integral value not greater than `value`.\n+ */\n+static inline CGFloat HUBCGFloatFloor(CGFloat value)\n+{\n+#if CGFLOAT_IS_DOUBLE\n+    return floor(value);\n+#else\n+    return floorf(value);\n+#endif // CGFLOAT_IS_DOUBLE",
        "path": "sources/CGFloat+HUBMath.h",
        "position": 44,
        "original_position": 44,
        "commit_id": "bf55ff67a639cc72cf41f1d5f47ab52f18f1c2b4",
        "original_commit_id": "bf55ff67a639cc72cf41f1d5f47ab52f18f1c2b4",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@dflems `tgmath.h` is still [broken with clang modules](http://www.openradar.me/15638008) AFAIK.\r\n\r\n([SO topic](http://stackoverflow.com/questions/23333287/tgmath-h-doesnt-work-if-modules-are-enabled))",
        "created_at": "2017-02-24T15:54:01Z",
        "updated_at": "2017-02-24T15:54:01Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/288#discussion_r102968971",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/288",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/102968971"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/288#discussion_r102968971"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/288"
            }
        },
        "in_reply_to_id": 102950685
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/102974034",
        "pull_request_review_id": 23750086,
        "id": 102974034,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjk3NDAzNA==",
        "diff_hunk": "@@ -0,0 +1,139 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import <CoreGraphics/CoreGraphics.h>\n+\n+NS_ASSUME_NONNULL_BEGIN\n+\n+#pragma mark Computing Values from CGFloats\n+\n+/**\n+ Round to largest integral value not greater than `value`.\n+ \n+ @note Consider using this function instead of the standard `floor` and `floorf` functions for `CGFloat` values. This\n+       function helps avoid implicit double promotion and loss of precision. Keeping the types correct regardless of\n+       if the backing type is `double` or `float`.\n+\n+ @param value The value that should be floored.\n+ @return The largest integral value not greater than `value`.\n+ */\n+static inline CGFloat HUBCGFloatFloor(CGFloat value)\n+{\n+#if CGFLOAT_IS_DOUBLE\n+    return floor(value);\n+#else\n+    return floorf(value);\n+#endif // CGFLOAT_IS_DOUBLE",
        "path": "sources/CGFloat+HUBMath.h",
        "position": 44,
        "original_position": 44,
        "commit_id": "bf55ff67a639cc72cf41f1d5f47ab52f18f1c2b4",
        "original_commit_id": "bf55ff67a639cc72cf41f1d5f47ab52f18f1c2b4",
        "user": {
            "login": "dflems",
            "id": 925850,
            "node_id": "MDQ6VXNlcjkyNTg1MA==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/925850?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dflems",
            "html_url": "https://github.com/dflems",
            "followers_url": "https://api.github.com/users/dflems/followers",
            "following_url": "https://api.github.com/users/dflems/following{/other_user}",
            "gists_url": "https://api.github.com/users/dflems/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dflems/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dflems/subscriptions",
            "organizations_url": "https://api.github.com/users/dflems/orgs",
            "repos_url": "https://api.github.com/users/dflems/repos",
            "events_url": "https://api.github.com/users/dflems/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dflems/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Noted! Either way, I think many of these functions can be simplified:\r\n\r\n```objc\r\n#if CGFLOAT_IS_DOUBLE\r\n#define HUBCGFloatFloor floor\r\n#define HUBCGFloatAbs fabs\r\n#define HUBCGFloatMax fmax\r\n#define HUBCGFloatMin fmin\r\n#else\r\n#define HUBCGFloatFloor floorf\r\n#define HUBCGFloatAbs fabsf\r\n#define HUBCGFloatMax fmaxf\r\n#define HUBCGFloatMin fminf\r\n#endif\r\n```",
        "created_at": "2017-02-24T16:15:58Z",
        "updated_at": "2017-02-24T16:15:59Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/288#discussion_r102974034",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/288",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/102974034"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/288#discussion_r102974034"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/288"
            }
        },
        "in_reply_to_id": 102950685
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/102686000",
        "pull_request_review_id": 23446684,
        "id": 102686000,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjY4NjAwMA==",
        "diff_hunk": "@@ -57,7 +64,9 @@ + (instancetype)diffFromViewModel:(id<HUBViewModel>)fromViewModel\n                         algorithm:(HUBDiffAlgorithm)algorithm\n {\n     NSParameterAssert(algorithm);\n-    return algorithm(fromViewModel, toViewModel);\n+    HUBViewModelDiff *diff =  algorithm(fromViewModel, toViewModel);\n+    [diff calculateHeaderChangesFromViewModel:fromViewModel toViewModel:toViewModel];\n+    return diff;",
        "path": "sources/HUBViewModelDiff.m",
        "position": 20,
        "original_position": 28,
        "commit_id": "41fd080080750727b639f91ec96b31f3bbd37176",
        "original_commit_id": "4d81327568710668afb67aa8ccd1d097199665b0",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "My point is that the diffing functions are defined as diffing view models, not body components. That is, one call to the diffing function should return the _entire_ diff, including body components, overlays and header.\r\n\r\nWe could (and probably should) change this if we wanted to diff multiple lists of components, but then it should return something else than a HUBViewModelDiff.",
        "created_at": "2017-02-23T10:44:41Z",
        "updated_at": "2017-02-27T10:49:28Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/291#discussion_r102686000",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/291",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/102686000"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/291#discussion_r102686000"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/291"
            }
        },
        "in_reply_to_id": 102512965
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/105710057",
        "pull_request_review_id": 26602281,
        "id": 105710057,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNTcxMDA1Nw==",
        "diff_hunk": "@@ -174,6 +172,8 @@ - (BOOL)isLoading\n \n - (void)loadViewModel\n {\n+    [self.connectivityStateResolver addObserver:self];",
        "path": "sources/HUBViewModelLoaderImplementation.m",
        "position": 13,
        "original_position": 13,
        "commit_id": "4f07e6aa0cbb8b052712d33390ff3b4cc296c7a2",
        "original_commit_id": "4f07e6aa0cbb8b052712d33390ff3b4cc296c7a2",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@albhaf Could there be any issues with calling `addObserver:` multiple times? As `loadViewModel` is called whenever the view controller appears?",
        "created_at": "2017-03-13T16:46:05Z",
        "updated_at": "2017-03-13T16:46:05Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/296#discussion_r105710057",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/296",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/105710057"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/296#discussion_r105710057"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/296"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/105710521",
        "pull_request_review_id": 26602842,
        "id": 105710521,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNTcxMDUyMQ==",
        "diff_hunk": "@@ -174,6 +172,8 @@ - (BOOL)isLoading\n \n - (void)loadViewModel\n {\n+    [self.connectivityStateResolver addObserver:self];",
        "path": "sources/HUBViewModelLoaderImplementation.m",
        "position": 13,
        "original_position": 13,
        "commit_id": "4f07e6aa0cbb8b052712d33390ff3b4cc296c7a2",
        "original_commit_id": "4f07e6aa0cbb8b052712d33390ff3b4cc296c7a2",
        "user": {
            "login": "Goos",
            "id": 1166835,
            "node_id": "MDQ6VXNlcjExNjY4MzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1166835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Goos",
            "html_url": "https://github.com/Goos",
            "followers_url": "https://api.github.com/users/Goos/followers",
            "following_url": "https://api.github.com/users/Goos/following{/other_user}",
            "gists_url": "https://api.github.com/users/Goos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Goos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Goos/subscriptions",
            "organizations_url": "https://api.github.com/users/Goos/orgs",
            "repos_url": "https://api.github.com/users/Goos/repos",
            "events_url": "https://api.github.com/users/Goos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Goos/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Nevermind, it should be fine",
        "created_at": "2017-03-13T16:48:08Z",
        "updated_at": "2017-03-13T16:48:08Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/296#discussion_r105710521",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/296",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/105710521"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/296#discussion_r105710521"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/296"
            }
        },
        "in_reply_to_id": 105710057
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/105710897",
        "pull_request_review_id": 26603266,
        "id": 105710897,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNTcxMDg5Nw==",
        "diff_hunk": "@@ -174,6 +172,8 @@ - (BOOL)isLoading\n \n - (void)loadViewModel\n {\n+    [self.connectivityStateResolver addObserver:self];",
        "path": "sources/HUBViewModelLoaderImplementation.m",
        "position": 13,
        "original_position": 13,
        "commit_id": "4f07e6aa0cbb8b052712d33390ff3b4cc296c7a2",
        "original_commit_id": "4f07e6aa0cbb8b052712d33390ff3b4cc296c7a2",
        "user": {
            "login": "albhaf",
            "id": 62888,
            "node_id": "MDQ6VXNlcjYyODg4",
            "avatar_url": "https://avatars2.githubusercontent.com/u/62888?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/albhaf",
            "html_url": "https://github.com/albhaf",
            "followers_url": "https://api.github.com/users/albhaf/followers",
            "following_url": "https://api.github.com/users/albhaf/following{/other_user}",
            "gists_url": "https://api.github.com/users/albhaf/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/albhaf/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/albhaf/subscriptions",
            "organizations_url": "https://api.github.com/users/albhaf/orgs",
            "repos_url": "https://api.github.com/users/albhaf/repos",
            "events_url": "https://api.github.com/users/albhaf/events{/privacy}",
            "received_events_url": "https://api.github.com/users/albhaf/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yes, I checked that and it's idempotent",
        "created_at": "2017-03-13T16:49:33Z",
        "updated_at": "2017-03-13T16:49:33Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/296#discussion_r105710897",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/296",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/105710897"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/296#discussion_r105710897"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/296"
            }
        },
        "in_reply_to_id": 105710057
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/108614921",
        "pull_request_review_id": 29656044,
        "id": 108614921,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODYxNDkyMQ==",
        "diff_hunk": "@@ -50,6 +51,7 @@ - (instancetype)initWithFeatureIdentifier:(NSString *)featureIdentifier\n         _customJSONSchemaIdentifier = [customJSONSchemaIdentifier copy];\n         _actionHandler = actionHandler;\n         _viewControllerScrollHandler = viewControllerScrollHandler;\n+        _options = options;",
        "path": "sources/HUBFeatureRegistration.m",
        "position": 12,
        "original_position": 12,
        "commit_id": "aa864c06962de6f76263e1512f20dbd72b1bb5d6",
        "original_commit_id": "aa864c06962de6f76263e1512f20dbd72b1bb5d6",
        "user": {
            "login": "bubski",
            "id": 1083513,
            "node_id": "MDQ6VXNlcjEwODM1MTM=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1083513?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bubski",
            "html_url": "https://github.com/bubski",
            "followers_url": "https://api.github.com/users/bubski/followers",
            "following_url": "https://api.github.com/users/bubski/following{/other_user}",
            "gists_url": "https://api.github.com/users/bubski/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bubski/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bubski/subscriptions",
            "organizations_url": "https://api.github.com/users/bubski/orgs",
            "repos_url": "https://api.github.com/users/bubski/repos",
            "events_url": "https://api.github.com/users/bubski/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bubski/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Shouldn't this be `_options = [options copy]`?",
        "created_at": "2017-03-29T08:11:50Z",
        "updated_at": "2017-03-29T08:11:50Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/308#discussion_r108614921",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/308",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/108614921"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/308#discussion_r108614921"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/308"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/108629744",
        "pull_request_review_id": 29671626,
        "id": 108629744,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODYyOTc0NA==",
        "diff_hunk": "@@ -50,6 +51,7 @@ - (instancetype)initWithFeatureIdentifier:(NSString *)featureIdentifier\n         _customJSONSchemaIdentifier = [customJSONSchemaIdentifier copy];\n         _actionHandler = actionHandler;\n         _viewControllerScrollHandler = viewControllerScrollHandler;\n+        _options = options;",
        "path": "sources/HUBFeatureRegistration.m",
        "position": 12,
        "original_position": 12,
        "commit_id": "aa864c06962de6f76263e1512f20dbd72b1bb5d6",
        "original_commit_id": "aa864c06962de6f76263e1512f20dbd72b1bb5d6",
        "user": {
            "login": "ynmehel",
            "id": 638741,
            "node_id": "MDQ6VXNlcjYzODc0MQ==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/638741?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ynmehel",
            "html_url": "https://github.com/ynmehel",
            "followers_url": "https://api.github.com/users/ynmehel/followers",
            "following_url": "https://api.github.com/users/ynmehel/following{/other_user}",
            "gists_url": "https://api.github.com/users/ynmehel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ynmehel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ynmehel/subscriptions",
            "organizations_url": "https://api.github.com/users/ynmehel/orgs",
            "repos_url": "https://api.github.com/users/ynmehel/repos",
            "events_url": "https://api.github.com/users/ynmehel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ynmehel/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "+1",
        "created_at": "2017-03-29T09:25:30Z",
        "updated_at": "2017-03-29T09:25:37Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/308#discussion_r108629744",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/308",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/108629744"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/308#discussion_r108629744"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/308"
            }
        },
        "in_reply_to_id": 108614921
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/108645128",
        "pull_request_review_id": 29687787,
        "id": 108645128,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODY0NTEyOA==",
        "diff_hunk": "@@ -50,6 +51,7 @@ - (instancetype)initWithFeatureIdentifier:(NSString *)featureIdentifier\n         _customJSONSchemaIdentifier = [customJSONSchemaIdentifier copy];\n         _actionHandler = actionHandler;\n         _viewControllerScrollHandler = viewControllerScrollHandler;\n+        _options = options;",
        "path": "sources/HUBFeatureRegistration.m",
        "position": 12,
        "original_position": 12,
        "commit_id": "aa864c06962de6f76263e1512f20dbd72b1bb5d6",
        "original_commit_id": "aa864c06962de6f76263e1512f20dbd72b1bb5d6",
        "user": {
            "login": "cerihughes",
            "id": 12008876,
            "node_id": "MDQ6VXNlcjEyMDA4ODc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12008876?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cerihughes",
            "html_url": "https://github.com/cerihughes",
            "followers_url": "https://api.github.com/users/cerihughes/followers",
            "following_url": "https://api.github.com/users/cerihughes/following{/other_user}",
            "gists_url": "https://api.github.com/users/cerihughes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cerihughes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cerihughes/subscriptions",
            "organizations_url": "https://api.github.com/users/cerihughes/orgs",
            "repos_url": "https://api.github.com/users/cerihughes/repos",
            "events_url": "https://api.github.com/users/cerihughes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cerihughes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Agreed. I'll create a PR to fix it.",
        "created_at": "2017-03-29T10:44:03Z",
        "updated_at": "2017-03-29T10:44:03Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/308#discussion_r108645128",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/308",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/108645128"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/308#discussion_r108645128"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/308"
            }
        },
        "in_reply_to_id": 108614921
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/108912459",
        "pull_request_review_id": 29976765,
        "id": 108912459,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODkxMjQ1OQ==",
        "diff_hunk": "@@ -128,24 +113,17 @@ - (void)handleBytesAvailableForStream:(NSInputStream *)stream\n     }\n     \n     NSData * const data = [mutableData copy];\n-    \n-    if (self.viewController != nil && self.contentOperation != nil) {\n-        self.contentOperation.JSONData = data;\n+\n+    HUBLiveContentOperation *existingContentOperation = self.contentOperation;\n+    if (existingContentOperation != nil) {\n+        existingContentOperation.JSONData = data;\n         return;\n     }\n-    \n-    NSURL * const viewURI = [NSURL URLWithString:@\"hubframework:live\"];\n-    \n+\n     HUBLiveContentOperation * const contentOperation = [[HUBLiveContentOperation alloc] initWithJSONData:data];\n     self.contentOperation = contentOperation;\n-    \n-    HUBViewController * const viewController = [self.viewControllerFactory createViewControllerForViewURI:viewURI\n-                                                                                        contentOperations:@[contentOperation]\n-                                                                                        featureIdentifier:@\"live\"\n-                                                                                             featureTitle:@\"Hub Framework Live\"];\n-    \n-    self.viewController = viewController;\n-    [self.delegate liveService:self didCreateViewController:viewController];\n+\n+    [self.delegate liveService:self didCreateContentOperation:contentOperation];",
        "path": "sources/HUBLiveServiceImplementation.m",
        "position": 66,
        "original_position": 66,
        "commit_id": "f936e1d8119ad5ad539e4763ee026053708ed24d",
        "original_commit_id": "442c87cb3e94648be3d83ac6345c17c5968e0afe",
        "user": {
            "login": "cerihughes",
            "id": 12008876,
            "node_id": "MDQ6VXNlcjEyMDA4ODc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12008876?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cerihughes",
            "html_url": "https://github.com/cerihughes",
            "followers_url": "https://api.github.com/users/cerihughes/followers",
            "following_url": "https://api.github.com/users/cerihughes/following{/other_user}",
            "gists_url": "https://api.github.com/users/cerihughes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cerihughes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cerihughes/subscriptions",
            "organizations_url": "https://api.github.com/users/cerihughes/orgs",
            "repos_url": "https://api.github.com/users/cerihughes/repos",
            "events_url": "https://api.github.com/users/cerihughes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cerihughes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Does this mean we have to create a new VC every time some data comes in over the wire?",
        "created_at": "2017-03-30T12:28:58Z",
        "updated_at": "2017-03-30T12:34:17Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/318#discussion_r108912459",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/318",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/108912459"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/318#discussion_r108912459"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/318"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/108929764",
        "pull_request_review_id": 29995789,
        "id": 108929764,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODkyOTc2NA==",
        "diff_hunk": "@@ -128,24 +113,17 @@ - (void)handleBytesAvailableForStream:(NSInputStream *)stream\n     }\n     \n     NSData * const data = [mutableData copy];\n-    \n-    if (self.viewController != nil && self.contentOperation != nil) {\n-        self.contentOperation.JSONData = data;\n+\n+    HUBLiveContentOperation *existingContentOperation = self.contentOperation;\n+    if (existingContentOperation != nil) {\n+        existingContentOperation.JSONData = data;\n         return;\n     }\n-    \n-    NSURL * const viewURI = [NSURL URLWithString:@\"hubframework:live\"];\n-    \n+\n     HUBLiveContentOperation * const contentOperation = [[HUBLiveContentOperation alloc] initWithJSONData:data];\n     self.contentOperation = contentOperation;\n-    \n-    HUBViewController * const viewController = [self.viewControllerFactory createViewControllerForViewURI:viewURI\n-                                                                                        contentOperations:@[contentOperation]\n-                                                                                        featureIdentifier:@\"live\"\n-                                                                                             featureTitle:@\"Hub Framework Live\"];\n-    \n-    self.viewController = viewController;\n-    [self.delegate liveService:self didCreateViewController:viewController];\n+\n+    [self.delegate liveService:self didCreateContentOperation:contentOperation];",
        "path": "sources/HUBLiveServiceImplementation.m",
        "position": 66,
        "original_position": 66,
        "commit_id": "f936e1d8119ad5ad539e4763ee026053708ed24d",
        "original_commit_id": "442c87cb3e94648be3d83ac6345c17c5968e0afe",
        "user": {
            "login": "hallski",
            "id": 541,
            "node_id": "MDQ6VXNlcjU0MQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/541?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hallski",
            "html_url": "https://github.com/hallski",
            "followers_url": "https://api.github.com/users/hallski/followers",
            "following_url": "https://api.github.com/users/hallski/following{/other_user}",
            "gists_url": "https://api.github.com/users/hallski/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hallski/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hallski/subscriptions",
            "organizations_url": "https://api.github.com/users/hallski/orgs",
            "repos_url": "https://api.github.com/users/hallski/repos",
            "events_url": "https://api.github.com/users/hallski/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hallski/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "No, as long as we hold on to the content operation (which the view controller will do) it will be reused by the live service and the delegate method is not called.",
        "created_at": "2017-03-30T13:46:25Z",
        "updated_at": "2017-03-30T13:46:25Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/318#discussion_r108929764",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/318",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/108929764"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/318#discussion_r108929764"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/318"
            }
        },
        "in_reply_to_id": 108912459
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/109066991",
        "pull_request_review_id": 30145026,
        "id": 109066991,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTA2Njk5MQ==",
        "diff_hunk": "@@ -2222,31 +2232,27 @@\n \t\t8ABD6CAE1DF6EC36005BCB33 /* Debug */ = {\n \t\t\tisa = XCBuildConfiguration;\n \t\t\tbuildSettings = {\n-\t\t\t\tHUB_NON_ERROR_WARNINGS_0720 = \"\";\n-\t\t\t\tHUB_NON_ERROR_WARNINGS_0730 = \"$(HUB_NON_ERROR_WARNING_0720) -Wno-error=partial-availability\";\n \t\t\t\tINFOPLIST_FILE = tests/Info.plist;\n \t\t\t\tPRODUCT_BUNDLE_IDENTIFIER = com.spotify.HubFrameworkTests;\n \t\t\t\tPRODUCT_NAME = HubFrameworkTests;\n \t\t\t\tWARNING_CFLAGS = (\n \t\t\t\t\t\"$(inherited)\",\n-\t\t\t\t\t\"$(HUB_NON_ERROR_WARNINGS_$(XCODE_VERSION_MINOR))\",\n \t\t\t\t\t\"-Wno-documentation-unknown-command\",\n+\t\t\t\t\t\"-Wno-partial-availability\",",
        "path": "HubFramework.xcodeproj/project.pbxproj",
        "position": 97,
        "original_position": 97,
        "commit_id": "0a52a935e2e621fd7112c330b3e0d038257fc135",
        "original_commit_id": "0a52a935e2e621fd7112c330b3e0d038257fc135",
        "user": {
            "login": "dflems",
            "id": 925850,
            "node_id": "MDQ6VXNlcjkyNTg1MA==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/925850?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dflems",
            "html_url": "https://github.com/dflems",
            "followers_url": "https://api.github.com/users/dflems/followers",
            "following_url": "https://api.github.com/users/dflems/following{/other_user}",
            "gists_url": "https://api.github.com/users/dflems/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dflems/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dflems/subscriptions",
            "organizations_url": "https://api.github.com/users/dflems/orgs",
            "repos_url": "https://api.github.com/users/dflems/repos",
            "events_url": "https://api.github.com/users/dflems/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dflems/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This is for test targets when you import `XCTest` right? I'm pretty sure you can do this:\r\n\r\n```objc\r\n#pragma clang diagnostic push\r\n#pragma clang diagnostic ignored \"-Wpartial-availability\"\r\n#import <XCTest/XCTest.h>\r\n#pragma clang diagnostic push\r\n```\r\n\r\nI think you can just slap that in its own header like `HUBXCTest.h` then just import that header at the top of your test classes.",
        "created_at": "2017-03-31T00:21:52Z",
        "updated_at": "2017-03-31T00:21:52Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/317#discussion_r109066991",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/317",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/109066991"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/317#discussion_r109066991"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/317"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/109067058",
        "pull_request_review_id": 30145105,
        "id": 109067058,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTA2NzA1OA==",
        "diff_hunk": "@@ -2222,31 +2232,27 @@\n \t\t8ABD6CAE1DF6EC36005BCB33 /* Debug */ = {\n \t\t\tisa = XCBuildConfiguration;\n \t\t\tbuildSettings = {\n-\t\t\t\tHUB_NON_ERROR_WARNINGS_0720 = \"\";\n-\t\t\t\tHUB_NON_ERROR_WARNINGS_0730 = \"$(HUB_NON_ERROR_WARNING_0720) -Wno-error=partial-availability\";\n \t\t\t\tINFOPLIST_FILE = tests/Info.plist;\n \t\t\t\tPRODUCT_BUNDLE_IDENTIFIER = com.spotify.HubFrameworkTests;\n \t\t\t\tPRODUCT_NAME = HubFrameworkTests;\n \t\t\t\tWARNING_CFLAGS = (\n \t\t\t\t\t\"$(inherited)\",\n-\t\t\t\t\t\"$(HUB_NON_ERROR_WARNINGS_$(XCODE_VERSION_MINOR))\",\n \t\t\t\t\t\"-Wno-documentation-unknown-command\",\n+\t\t\t\t\t\"-Wno-partial-availability\",",
        "path": "HubFramework.xcodeproj/project.pbxproj",
        "position": 97,
        "original_position": 97,
        "commit_id": "0a52a935e2e621fd7112c330b3e0d038257fc135",
        "original_commit_id": "0a52a935e2e621fd7112c330b3e0d038257fc135",
        "user": {
            "login": "dflems",
            "id": 925850,
            "node_id": "MDQ6VXNlcjkyNTg1MA==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/925850?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dflems",
            "html_url": "https://github.com/dflems",
            "followers_url": "https://api.github.com/users/dflems/followers",
            "following_url": "https://api.github.com/users/dflems/following{/other_user}",
            "gists_url": "https://api.github.com/users/dflems/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dflems/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dflems/subscriptions",
            "organizations_url": "https://api.github.com/users/dflems/orgs",
            "repos_url": "https://api.github.com/users/dflems/repos",
            "events_url": "https://api.github.com/users/dflems/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dflems/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@rastersize?",
        "created_at": "2017-03-31T00:22:41Z",
        "updated_at": "2017-03-31T00:22:41Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/317#discussion_r109067058",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/317",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/109067058"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/317#discussion_r109067058"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/317"
            }
        },
        "in_reply_to_id": 109066991
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/109106605",
        "pull_request_review_id": 30186090,
        "id": 109106605,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTEwNjYwNQ==",
        "diff_hunk": "@@ -128,24 +113,17 @@ - (void)handleBytesAvailableForStream:(NSInputStream *)stream\n     }\n     \n     NSData * const data = [mutableData copy];\n-    \n-    if (self.viewController != nil && self.contentOperation != nil) {\n-        self.contentOperation.JSONData = data;\n+\n+    HUBLiveContentOperation *existingContentOperation = self.contentOperation;\n+    if (existingContentOperation != nil) {\n+        existingContentOperation.JSONData = data;\n         return;\n     }\n-    \n-    NSURL * const viewURI = [NSURL URLWithString:@\"hubframework:live\"];\n-    \n+\n     HUBLiveContentOperation * const contentOperation = [[HUBLiveContentOperation alloc] initWithJSONData:data];\n     self.contentOperation = contentOperation;\n-    \n-    HUBViewController * const viewController = [self.viewControllerFactory createViewControllerForViewURI:viewURI\n-                                                                                        contentOperations:@[contentOperation]\n-                                                                                        featureIdentifier:@\"live\"\n-                                                                                             featureTitle:@\"Hub Framework Live\"];\n-    \n-    self.viewController = viewController;\n-    [self.delegate liveService:self didCreateViewController:viewController];\n+\n+    [self.delegate liveService:self didCreateContentOperation:contentOperation];",
        "path": "sources/HUBLiveServiceImplementation.m",
        "position": 66,
        "original_position": 66,
        "commit_id": "f936e1d8119ad5ad539e4763ee026053708ed24d",
        "original_commit_id": "442c87cb3e94648be3d83ac6345c17c5968e0afe",
        "user": {
            "login": "cerihughes",
            "id": 12008876,
            "node_id": "MDQ6VXNlcjEyMDA4ODc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12008876?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cerihughes",
            "html_url": "https://github.com/cerihughes",
            "followers_url": "https://api.github.com/users/cerihughes/followers",
            "following_url": "https://api.github.com/users/cerihughes/following{/other_user}",
            "gists_url": "https://api.github.com/users/cerihughes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cerihughes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cerihughes/subscriptions",
            "organizations_url": "https://api.github.com/users/cerihughes/orgs",
            "repos_url": "https://api.github.com/users/cerihughes/repos",
            "events_url": "https://api.github.com/users/cerihughes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cerihughes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\ud83d\udc4d ",
        "created_at": "2017-03-31T07:55:22Z",
        "updated_at": "2017-03-31T07:55:22Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/318#discussion_r109106605",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/318",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/109106605"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/318#discussion_r109106605"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/318"
            }
        },
        "in_reply_to_id": 108912459
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/109136980",
        "pull_request_review_id": 30219664,
        "id": 109136980,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTEzNjk4MA==",
        "diff_hunk": "@@ -80,18 +81,38 @@ class HeaderComponentUITests: UITestCase {\n         let header = XCUIApplication().otherElements[\"header\"]\n         XCTAssertTrue(header.exists)\n         \n-        // Go to the top of the view\n-        (0..<numberOfSwipes + 1).forEach { _ in\n+        // Go to the top of the view and make sure that the header is now uncollapsed\n+        execute(block: {\n             collectionView.swipeDown()\n-        }\n-        \n-        // Make sure that the header is now uncollapsed\n-        XCTAssertEqual(header.frame.height, 250)\n+        }, until: header, hasHeight: 250)\n     }\n     \n     // MARK: - Utilities\n     \n     private func navigateToStickyHeaderFeature() {\n         XCUIApplication().collectionViews.staticTexts[\"Sticky header\"].tap()\n     }\n+\n+    private func execute(block:() -> Void, until header:XCUIElement, hasHeight expectedHeight:CGFloat) {",
        "path": "demo/tests/HeaderComponentUITests.swift",
        "position": null,
        "original_position": 34,
        "commit_id": "0ddc898a72195a716c25ef8d62a7c29e2133cb5c",
        "original_commit_id": "72b9dcbc1247343e2759564cd6f256336970b87b",
        "user": {
            "login": "hallski",
            "id": 541,
            "node_id": "MDQ6VXNlcjU0MQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/541?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hallski",
            "html_url": "https://github.com/hallski",
            "followers_url": "https://api.github.com/users/hallski/followers",
            "following_url": "https://api.github.com/users/hallski/following{/other_user}",
            "gists_url": "https://api.github.com/users/hallski/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hallski/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hallski/subscriptions",
            "organizations_url": "https://api.github.com/users/hallski/orgs",
            "repos_url": "https://api.github.com/users/hallski/repos",
            "events_url": "https://api.github.com/users/hallski/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hallski/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It's usually preferred if you can put the block as the last parameter. This will have two benefits:\r\n1. The call site will be a lot easier to read with:\r\n``` swift\r\nexecute(until: header, hasHeight: 250, block: ^{})\r\n```\r\n\r\n2. When the block is the last parameter you can even leave out that as an argument when calling:\r\n``` swift\r\nexecute(until: header, hasHeight: 250) {\r\n    collectionView.swipeDown()\r\n}\r\n```\r\n",
        "created_at": "2017-03-31T11:02:42Z",
        "updated_at": "2017-04-01T14:03:25Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/320#discussion_r109136980",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/320",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/109136980"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/320#discussion_r109136980"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/320"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/109414970",
        "pull_request_review_id": 30514071,
        "id": 109414970,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTQxNDk3MA==",
        "diff_hunk": "@@ -2222,31 +2232,27 @@\n \t\t8ABD6CAE1DF6EC36005BCB33 /* Debug */ = {\n \t\t\tisa = XCBuildConfiguration;\n \t\t\tbuildSettings = {\n-\t\t\t\tHUB_NON_ERROR_WARNINGS_0720 = \"\";\n-\t\t\t\tHUB_NON_ERROR_WARNINGS_0730 = \"$(HUB_NON_ERROR_WARNING_0720) -Wno-error=partial-availability\";\n \t\t\t\tINFOPLIST_FILE = tests/Info.plist;\n \t\t\t\tPRODUCT_BUNDLE_IDENTIFIER = com.spotify.HubFrameworkTests;\n \t\t\t\tPRODUCT_NAME = HubFrameworkTests;\n \t\t\t\tWARNING_CFLAGS = (\n \t\t\t\t\t\"$(inherited)\",\n-\t\t\t\t\t\"$(HUB_NON_ERROR_WARNINGS_$(XCODE_VERSION_MINOR))\",\n \t\t\t\t\t\"-Wno-documentation-unknown-command\",\n+\t\t\t\t\t\"-Wno-partial-availability\",",
        "path": "HubFramework.xcodeproj/project.pbxproj",
        "position": 97,
        "original_position": 97,
        "commit_id": "0a52a935e2e621fd7112c330b3e0d038257fc135",
        "original_commit_id": "0a52a935e2e621fd7112c330b3e0d038257fc135",
        "user": {
            "login": "cerihughes",
            "id": 12008876,
            "node_id": "MDQ6VXNlcjEyMDA4ODc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12008876?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cerihughes",
            "html_url": "https://github.com/cerihughes",
            "followers_url": "https://api.github.com/users/cerihughes/followers",
            "following_url": "https://api.github.com/users/cerihughes/following{/other_user}",
            "gists_url": "https://api.github.com/users/cerihughes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cerihughes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cerihughes/subscriptions",
            "organizations_url": "https://api.github.com/users/cerihughes/orgs",
            "repos_url": "https://api.github.com/users/cerihughes/repos",
            "events_url": "https://api.github.com/users/cerihughes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cerihughes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@dflems : Yes - as I understand it, we get partial availability errors when we import `XCTest`. Having another header to import just to get around this feels a bit like a hacky workaround, but I agree - switching off all partial availability warnings is a bit scary. Any ideas @rastersize @JensAyton ?",
        "created_at": "2017-04-03T13:23:36Z",
        "updated_at": "2017-04-03T13:23:37Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/317#discussion_r109414970",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/317",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/109414970"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/317#discussion_r109414970"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/317"
            }
        },
        "in_reply_to_id": 109066991
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/109418133",
        "pull_request_review_id": 30517441,
        "id": 109418133,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTQxODEzMw==",
        "diff_hunk": "@@ -2222,31 +2232,27 @@\n \t\t8ABD6CAE1DF6EC36005BCB33 /* Debug */ = {\n \t\t\tisa = XCBuildConfiguration;\n \t\t\tbuildSettings = {\n-\t\t\t\tHUB_NON_ERROR_WARNINGS_0720 = \"\";\n-\t\t\t\tHUB_NON_ERROR_WARNINGS_0730 = \"$(HUB_NON_ERROR_WARNING_0720) -Wno-error=partial-availability\";\n \t\t\t\tINFOPLIST_FILE = tests/Info.plist;\n \t\t\t\tPRODUCT_BUNDLE_IDENTIFIER = com.spotify.HubFrameworkTests;\n \t\t\t\tPRODUCT_NAME = HubFrameworkTests;\n \t\t\t\tWARNING_CFLAGS = (\n \t\t\t\t\t\"$(inherited)\",\n-\t\t\t\t\t\"$(HUB_NON_ERROR_WARNINGS_$(XCODE_VERSION_MINOR))\",\n \t\t\t\t\t\"-Wno-documentation-unknown-command\",\n+\t\t\t\t\t\"-Wno-partial-availability\",",
        "path": "HubFramework.xcodeproj/project.pbxproj",
        "position": 97,
        "original_position": 97,
        "commit_id": "0a52a935e2e621fd7112c330b3e0d038257fc135",
        "original_commit_id": "0a52a935e2e621fd7112c330b3e0d038257fc135",
        "user": {
            "login": "JensAyton",
            "id": 34759,
            "node_id": "MDQ6VXNlcjM0NzU5",
            "avatar_url": "https://avatars1.githubusercontent.com/u/34759?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JensAyton",
            "html_url": "https://github.com/JensAyton",
            "followers_url": "https://api.github.com/users/JensAyton/followers",
            "following_url": "https://api.github.com/users/JensAyton/following{/other_user}",
            "gists_url": "https://api.github.com/users/JensAyton/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JensAyton/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JensAyton/subscriptions",
            "organizations_url": "https://api.github.com/users/JensAyton/orgs",
            "repos_url": "https://api.github.com/users/JensAyton/repos",
            "events_url": "https://api.github.com/users/JensAyton/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JensAyton/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Partial availability warnings in test targets don\u2019t strike me as important enough to worry about.",
        "created_at": "2017-04-03T13:37:40Z",
        "updated_at": "2017-04-03T13:37:40Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/317#discussion_r109418133",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/317",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/109418133"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/317#discussion_r109418133"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/317"
            }
        },
        "in_reply_to_id": 109066991
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/109425370",
        "pull_request_review_id": 30525467,
        "id": 109425370,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTQyNTM3MA==",
        "diff_hunk": "@@ -2222,31 +2232,27 @@\n \t\t8ABD6CAE1DF6EC36005BCB33 /* Debug */ = {\n \t\t\tisa = XCBuildConfiguration;\n \t\t\tbuildSettings = {\n-\t\t\t\tHUB_NON_ERROR_WARNINGS_0720 = \"\";\n-\t\t\t\tHUB_NON_ERROR_WARNINGS_0730 = \"$(HUB_NON_ERROR_WARNING_0720) -Wno-error=partial-availability\";\n \t\t\t\tINFOPLIST_FILE = tests/Info.plist;\n \t\t\t\tPRODUCT_BUNDLE_IDENTIFIER = com.spotify.HubFrameworkTests;\n \t\t\t\tPRODUCT_NAME = HubFrameworkTests;\n \t\t\t\tWARNING_CFLAGS = (\n \t\t\t\t\t\"$(inherited)\",\n-\t\t\t\t\t\"$(HUB_NON_ERROR_WARNINGS_$(XCODE_VERSION_MINOR))\",\n \t\t\t\t\t\"-Wno-documentation-unknown-command\",\n+\t\t\t\t\t\"-Wno-partial-availability\",",
        "path": "HubFramework.xcodeproj/project.pbxproj",
        "position": 97,
        "original_position": 97,
        "commit_id": "0a52a935e2e621fd7112c330b3e0d038257fc135",
        "original_commit_id": "0a52a935e2e621fd7112c330b3e0d038257fc135",
        "user": {
            "login": "cerihughes",
            "id": 12008876,
            "node_id": "MDQ6VXNlcjEyMDA4ODc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12008876?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cerihughes",
            "html_url": "https://github.com/cerihughes",
            "followers_url": "https://api.github.com/users/cerihughes/followers",
            "following_url": "https://api.github.com/users/cerihughes/following{/other_user}",
            "gists_url": "https://api.github.com/users/cerihughes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cerihughes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cerihughes/subscriptions",
            "organizations_url": "https://api.github.com/users/cerihughes/orgs",
            "repos_url": "https://api.github.com/users/cerihughes/repos",
            "events_url": "https://api.github.com/users/cerihughes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cerihughes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Fair point. @dflems - are you happy to give the thumb?!",
        "created_at": "2017-04-03T14:07:29Z",
        "updated_at": "2017-04-03T14:07:30Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/317#discussion_r109425370",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/317",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/109425370"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/317#discussion_r109425370"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/317"
            }
        },
        "in_reply_to_id": 109066991
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/109450918",
        "pull_request_review_id": 30553608,
        "id": 109450918,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTQ1MDkxOA==",
        "diff_hunk": "@@ -2222,31 +2232,27 @@\n \t\t8ABD6CAE1DF6EC36005BCB33 /* Debug */ = {\n \t\t\tisa = XCBuildConfiguration;\n \t\t\tbuildSettings = {\n-\t\t\t\tHUB_NON_ERROR_WARNINGS_0720 = \"\";\n-\t\t\t\tHUB_NON_ERROR_WARNINGS_0730 = \"$(HUB_NON_ERROR_WARNING_0720) -Wno-error=partial-availability\";\n \t\t\t\tINFOPLIST_FILE = tests/Info.plist;\n \t\t\t\tPRODUCT_BUNDLE_IDENTIFIER = com.spotify.HubFrameworkTests;\n \t\t\t\tPRODUCT_NAME = HubFrameworkTests;\n \t\t\t\tWARNING_CFLAGS = (\n \t\t\t\t\t\"$(inherited)\",\n-\t\t\t\t\t\"$(HUB_NON_ERROR_WARNINGS_$(XCODE_VERSION_MINOR))\",\n \t\t\t\t\t\"-Wno-documentation-unknown-command\",\n+\t\t\t\t\t\"-Wno-partial-availability\",",
        "path": "HubFramework.xcodeproj/project.pbxproj",
        "position": 97,
        "original_position": 97,
        "commit_id": "0a52a935e2e621fd7112c330b3e0d038257fc135",
        "original_commit_id": "0a52a935e2e621fd7112c330b3e0d038257fc135",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I\u2019m good with disabling partial availability warnings for the unit test target. We can always revisit that specific issue in a separate PR.",
        "created_at": "2017-04-03T15:42:21Z",
        "updated_at": "2017-04-03T15:42:21Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/317#discussion_r109450918",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/317",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/109450918"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/317#discussion_r109450918"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/317"
            }
        },
        "in_reply_to_id": 109066991
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/109451228",
        "pull_request_review_id": 30553953,
        "id": 109451228,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTQ1MTIyOA==",
        "diff_hunk": "@@ -89,16 +91,16 @@ - (CGPoint)contentOffsetForDisplayingComponentAtIndex:(NSUInteger)componentIndex\n     CGFloat targetOffset = 0.0;\n \n     if (scrollPosition & HUBScrollPositionCenteredVertically) {\n-        targetOffset = CGRectGetMidY(componentFrame) - (viewHeight / 2.0f);\n+        targetOffset = CGRectGetMidY(componentFrame) - (viewHeight / (CGFloat)2.0);\n     } else if (scrollPosition & HUBScrollPositionBottom) {\n         targetOffset = CGRectGetMaxY(componentFrame) - viewHeight;\n     } else {\n         // Default to putting it at the top unless a proper position is provided\n         targetOffset = CGRectGetMinY(componentFrame);\n     }\n \n-    targetOffset = MAX(-contentInset.top, MIN(contentSize.height - viewHeight, targetOffset));\n-    return CGPointMake(0.0, (CGFloat)floor((double)targetOffset));\n+    targetOffset = HUBCGFloatMax(-contentInset.top, MIN(contentSize.height - viewHeight, targetOffset));",
        "path": "sources/HUBViewControllerDefaultScrollHandler.m",
        "position": 24,
        "original_position": 24,
        "commit_id": "0a52a935e2e621fd7112c330b3e0d038257fc135",
        "original_commit_id": "0a52a935e2e621fd7112c330b3e0d038257fc135",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@cerihughes Should we use `HUBSCGFloatMin` here (the nested one)?",
        "created_at": "2017-04-03T15:43:24Z",
        "updated_at": "2017-04-03T15:43:24Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/317#discussion_r109451228",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/317",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/109451228"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/317#discussion_r109451228"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/317"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/109459417",
        "pull_request_review_id": 30562800,
        "id": 109459417,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTQ1OTQxNw==",
        "diff_hunk": "@@ -89,16 +91,16 @@ - (CGPoint)contentOffsetForDisplayingComponentAtIndex:(NSUInteger)componentIndex\n     CGFloat targetOffset = 0.0;\n \n     if (scrollPosition & HUBScrollPositionCenteredVertically) {\n-        targetOffset = CGRectGetMidY(componentFrame) - (viewHeight / 2.0f);\n+        targetOffset = CGRectGetMidY(componentFrame) - (viewHeight / (CGFloat)2.0);\n     } else if (scrollPosition & HUBScrollPositionBottom) {\n         targetOffset = CGRectGetMaxY(componentFrame) - viewHeight;\n     } else {\n         // Default to putting it at the top unless a proper position is provided\n         targetOffset = CGRectGetMinY(componentFrame);\n     }\n \n-    targetOffset = MAX(-contentInset.top, MIN(contentSize.height - viewHeight, targetOffset));\n-    return CGPointMake(0.0, (CGFloat)floor((double)targetOffset));\n+    targetOffset = HUBCGFloatMax(-contentInset.top, MIN(contentSize.height - viewHeight, targetOffset));",
        "path": "sources/HUBViewControllerDefaultScrollHandler.m",
        "position": 24,
        "original_position": 24,
        "commit_id": "0a52a935e2e621fd7112c330b3e0d038257fc135",
        "original_commit_id": "0a52a935e2e621fd7112c330b3e0d038257fc135",
        "user": {
            "login": "cerihughes",
            "id": 12008876,
            "node_id": "MDQ6VXNlcjEyMDA4ODc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12008876?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cerihughes",
            "html_url": "https://github.com/cerihughes",
            "followers_url": "https://api.github.com/users/cerihughes/followers",
            "following_url": "https://api.github.com/users/cerihughes/following{/other_user}",
            "gists_url": "https://api.github.com/users/cerihughes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cerihughes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cerihughes/subscriptions",
            "organizations_url": "https://api.github.com/users/cerihughes/orgs",
            "repos_url": "https://api.github.com/users/cerihughes/repos",
            "events_url": "https://api.github.com/users/cerihughes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cerihughes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yep. Good point. I'll merge this (don't want to lose momentum) and deal with that in another PR.",
        "created_at": "2017-04-03T16:16:22Z",
        "updated_at": "2017-04-03T16:18:30Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/317#discussion_r109459417",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/317",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/109459417"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/317#discussion_r109459417"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/317"
            }
        },
        "in_reply_to_id": 109451228
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/109460955",
        "pull_request_review_id": 30564472,
        "id": 109460955,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTQ2MDk1NQ==",
        "diff_hunk": "@@ -89,16 +91,16 @@ - (CGPoint)contentOffsetForDisplayingComponentAtIndex:(NSUInteger)componentIndex\n     CGFloat targetOffset = 0.0;\n \n     if (scrollPosition & HUBScrollPositionCenteredVertically) {\n-        targetOffset = CGRectGetMidY(componentFrame) - (viewHeight / 2.0f);\n+        targetOffset = CGRectGetMidY(componentFrame) - (viewHeight / (CGFloat)2.0);\n     } else if (scrollPosition & HUBScrollPositionBottom) {\n         targetOffset = CGRectGetMaxY(componentFrame) - viewHeight;\n     } else {\n         // Default to putting it at the top unless a proper position is provided\n         targetOffset = CGRectGetMinY(componentFrame);\n     }\n \n-    targetOffset = MAX(-contentInset.top, MIN(contentSize.height - viewHeight, targetOffset));\n-    return CGPointMake(0.0, (CGFloat)floor((double)targetOffset));\n+    targetOffset = HUBCGFloatMax(-contentInset.top, MIN(contentSize.height - viewHeight, targetOffset));",
        "path": "sources/HUBViewControllerDefaultScrollHandler.m",
        "position": 24,
        "original_position": 24,
        "commit_id": "0a52a935e2e621fd7112c330b3e0d038257fc135",
        "original_commit_id": "0a52a935e2e621fd7112c330b3e0d038257fc135",
        "user": {
            "login": "cerihughes",
            "id": 12008876,
            "node_id": "MDQ6VXNlcjEyMDA4ODc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12008876?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cerihughes",
            "html_url": "https://github.com/cerihughes",
            "followers_url": "https://api.github.com/users/cerihughes/followers",
            "following_url": "https://api.github.com/users/cerihughes/following{/other_user}",
            "gists_url": "https://api.github.com/users/cerihughes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cerihughes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cerihughes/subscriptions",
            "organizations_url": "https://api.github.com/users/cerihughes/orgs",
            "repos_url": "https://api.github.com/users/cerihughes/repos",
            "events_url": "https://api.github.com/users/cerihughes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cerihughes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "https://github.com/spotify/HubFramework/pull/322",
        "created_at": "2017-04-03T16:22:35Z",
        "updated_at": "2017-04-03T16:22:35Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/317#discussion_r109460955",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/317",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/109460955"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/317#discussion_r109460955"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/317"
            }
        },
        "in_reply_to_id": 109451228
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/107451893",
        "pull_request_review_id": 28425205,
        "id": 107451893,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzQ1MTg5Mw==",
        "diff_hunk": "@@ -353,7 +353,7 @@\n \t\t8AE6C0A51DF6E40D0063B2B1 /* HUBComponentDefaults.m in Sources */ = {isa = PBXBuildFile; fileRef = 8A5D7A611CBBAC2200B987BA /* HUBComponentDefaults.m */; };\n \t\t8AE6C0A61DF6E40D0063B2B1 /* HUBDefaultComponentLayoutManager.h in Headers */ = {isa = PBXBuildFile; fileRef = 8AA124E51DE89B530076582D /* HUBDefaultComponentLayoutManager.h */; };\n \t\t8AE6C0A71DF6E40D0063B2B1 /* HUBDefaultComponentLayoutManager.m in Sources */ = {isa = PBXBuildFile; fileRef = 8AA124E61DE89B530076582D /* HUBDefaultComponentLayoutManager.m */; };\n-\t\t8AE6C0A81DF6E40D0063B2B1 /* HUBDefaultComponentFallbackHandler.h in Headers */ = {isa = PBXBuildFile; fileRef = 8AA127EC1DE8A1010076582D /* HUBDefaultComponentFallbackHandler.h */; };\n+\t\t8AE6C0A81DF6E40D0063B2B1 /* HUBDefaultComponentFallbackHandler.h in Headers */ = {isa = PBXBuildFile; fileRef = 8AA127EC1DE8A1010076582D /* HUBDefaultComponentFallbackHandler.h */; settings = {ATTRIBUTES = (Public, ); }; };",
        "path": "HubFramework.xcodeproj/project.pbxproj",
        "position": null,
        "original_position": 5,
        "commit_id": "cc2ddcdfccbc3891509882665d6f4127e60b61c4",
        "original_commit_id": "7c194be4830830dc3590b206624f010f3e45f8ef",
        "user": {
            "login": "cerihughes",
            "id": 12008876,
            "node_id": "MDQ6VXNlcjEyMDA4ODc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12008876?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cerihughes",
            "html_url": "https://github.com/cerihughes",
            "followers_url": "https://api.github.com/users/cerihughes/followers",
            "following_url": "https://api.github.com/users/cerihughes/following{/other_user}",
            "gists_url": "https://api.github.com/users/cerihughes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cerihughes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cerihughes/subscriptions",
            "organizations_url": "https://api.github.com/users/cerihughes/orgs",
            "repos_url": "https://api.github.com/users/cerihughes/repos",
            "events_url": "https://api.github.com/users/cerihughes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cerihughes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Was this an intentional change? Do we want to make this part of the public API?",
        "created_at": "2017-03-22T15:49:56Z",
        "updated_at": "2017-04-04T07:54:02Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/306#discussion_r107451893",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/306",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/107451893"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/306#discussion_r107451893"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/306"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/107458466",
        "pull_request_review_id": 28425205,
        "id": 107458466,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzQ1ODQ2Ng==",
        "diff_hunk": "@@ -71,7 +75,7 @@ import HubFramework\n     }\n     \n     func applicationDidEnterBackground(_ application: UIApplication) {\n-        hubManager.liveService?.stop()\n+//        hubManager.liveService?.stop()",
        "path": "demo/sources/AppDelegate.swift",
        "position": null,
        "original_position": 68,
        "commit_id": "cc2ddcdfccbc3891509882665d6f4127e60b61c4",
        "original_commit_id": "7c194be4830830dc3590b206624f010f3e45f8ef",
        "user": {
            "login": "cerihughes",
            "id": 12008876,
            "node_id": "MDQ6VXNlcjEyMDA4ODc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12008876?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cerihughes",
            "html_url": "https://github.com/cerihughes",
            "followers_url": "https://api.github.com/users/cerihughes/followers",
            "following_url": "https://api.github.com/users/cerihughes/following{/other_user}",
            "gists_url": "https://api.github.com/users/cerihughes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cerihughes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cerihughes/subscriptions",
            "organizations_url": "https://api.github.com/users/cerihughes/orgs",
            "repos_url": "https://api.github.com/users/cerihughes/repos",
            "events_url": "https://api.github.com/users/cerihughes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cerihughes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Let's get this working :)",
        "created_at": "2017-03-22T16:12:46Z",
        "updated_at": "2017-04-04T07:54:02Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/306#discussion_r107458466",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/306",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/107458466"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/306#discussion_r107458466"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/306"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/107619962",
        "pull_request_review_id": 28601753,
        "id": 107619962,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzYxOTk2Mg==",
        "diff_hunk": "@@ -0,0 +1,60 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import <Foundation/Foundation.h>\n+\n+@class HUBConfig;\n+@class HUBViewController;\n+@protocol HUBActionHandler;\n+@protocol HUBContentOperation;\n+@protocol HUBViewModel;\n+\n+NS_ASSUME_NONNULL_BEGIN\n+\n+/**\n+ *  `HUBViewController` factory that uses a `HUBConfig` for all the configuration needed to create a view controller.\n+ *\n+ *  This view controller allows for a fully configured `HUBViewController` to be created without going through the \n+ *  `HUBManager` and `HUBFeatureRegistration`.\n+ */\n+@interface HUBConfigViewControllerFactory : NSObject",
        "path": "include/HubFramework/HUBConfigViewControllerFactory.h",
        "position": 38,
        "original_position": 38,
        "commit_id": "cc2ddcdfccbc3891509882665d6f4127e60b61c4",
        "original_commit_id": "7c194be4830830dc3590b206624f010f3e45f8ef",
        "user": {
            "login": "cerihughes",
            "id": 12008876,
            "node_id": "MDQ6VXNlcjEyMDA4ODc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12008876?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cerihughes",
            "html_url": "https://github.com/cerihughes",
            "followers_url": "https://api.github.com/users/cerihughes/followers",
            "following_url": "https://api.github.com/users/cerihughes/following{/other_user}",
            "gists_url": "https://api.github.com/users/cerihughes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cerihughes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cerihughes/subscriptions",
            "organizations_url": "https://api.github.com/users/cerihughes/orgs",
            "repos_url": "https://api.github.com/users/cerihughes/repos",
            "events_url": "https://api.github.com/users/cerihughes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cerihughes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I was expecting this to conform to `HUBViewControllerFactory`.",
        "created_at": "2017-03-23T09:24:11Z",
        "updated_at": "2017-04-04T07:54:02Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/306#discussion_r107619962",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/306",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/107619962"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/306#discussion_r107619962"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/306"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/107667066",
        "pull_request_review_id": 28652039,
        "id": 107667066,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzY2NzA2Ng==",
        "diff_hunk": "@@ -0,0 +1,91 @@\n+/*\n+ *  Copyright (c) 2017 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import <CoreGraphics/CoreGraphics.h>\n+#import <Foundation/Foundation.h>\n+\n+#import \"HUBComponentCategories.h\"\n+\n+@protocol HUBActionRegistry;\n+@protocol HUBJSONSchema;\n+@protocol HUBComponent;\n+@protocol HUBComponentFallbackHandler;\n+@protocol HUBContentReloadPolicy;\n+@protocol HUBComponentLayoutManager;\n+@protocol HUBImageLoaderFactory;\n+@protocol HUBConnectivityStateResolver;\n+@protocol HUBIconImageResolver;\n+@protocol HUBViewControllerScrollHandler;\n+@protocol HUBComponentRegistry;\n+\n+\n+NS_ASSUME_NONNULL_BEGIN\n+\n+/**\n+ *  Configuration used to create view controllers when using Hub Framework without `HUBManager`.\n+ *\n+ *  This allows for using Hub Framework without the `HubManager` and feature registration.",
        "path": "include/HubFramework/HUBConfig.h",
        "position": null,
        "original_position": 45,
        "commit_id": "cc2ddcdfccbc3891509882665d6f4127e60b61c4",
        "original_commit_id": "7c194be4830830dc3590b206624f010f3e45f8ef",
        "user": {
            "login": "rastersize",
            "id": 23453,
            "node_id": "MDQ6VXNlcjIzNDUz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/23453?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rastersize",
            "html_url": "https://github.com/rastersize",
            "followers_url": "https://api.github.com/users/rastersize/followers",
            "following_url": "https://api.github.com/users/rastersize/following{/other_user}",
            "gists_url": "https://api.github.com/users/rastersize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rastersize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rastersize/subscriptions",
            "organizations_url": "https://api.github.com/users/rastersize/orgs",
            "repos_url": "https://api.github.com/users/rastersize/repos",
            "events_url": "https://api.github.com/users/rastersize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rastersize/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Could we add a sentence pointing the user to `HUBConfigBuilder`? The first questions that popped into my heads was \u201chow am I supposed to create one of these objects? all the properties are `readonly`?\u201d.",
        "created_at": "2017-03-23T13:29:44Z",
        "updated_at": "2017-04-04T07:54:02Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/306#discussion_r107667066",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/306",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/107667066"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/306#discussion_r107667066"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/306"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/107731363",
        "pull_request_review_id": 28721236,
        "id": 107731363,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzczMTM2Mw==",
        "diff_hunk": "@@ -353,7 +353,7 @@\n \t\t8AE6C0A51DF6E40D0063B2B1 /* HUBComponentDefaults.m in Sources */ = {isa = PBXBuildFile; fileRef = 8A5D7A611CBBAC2200B987BA /* HUBComponentDefaults.m */; };\n \t\t8AE6C0A61DF6E40D0063B2B1 /* HUBDefaultComponentLayoutManager.h in Headers */ = {isa = PBXBuildFile; fileRef = 8AA124E51DE89B530076582D /* HUBDefaultComponentLayoutManager.h */; };\n \t\t8AE6C0A71DF6E40D0063B2B1 /* HUBDefaultComponentLayoutManager.m in Sources */ = {isa = PBXBuildFile; fileRef = 8AA124E61DE89B530076582D /* HUBDefaultComponentLayoutManager.m */; };\n-\t\t8AE6C0A81DF6E40D0063B2B1 /* HUBDefaultComponentFallbackHandler.h in Headers */ = {isa = PBXBuildFile; fileRef = 8AA127EC1DE8A1010076582D /* HUBDefaultComponentFallbackHandler.h */; };\n+\t\t8AE6C0A81DF6E40D0063B2B1 /* HUBDefaultComponentFallbackHandler.h in Headers */ = {isa = PBXBuildFile; fileRef = 8AA127EC1DE8A1010076582D /* HUBDefaultComponentFallbackHandler.h */; settings = {ATTRIBUTES = (Public, ); }; };",
        "path": "HubFramework.xcodeproj/project.pbxproj",
        "position": null,
        "original_position": 5,
        "commit_id": "cc2ddcdfccbc3891509882665d6f4127e60b61c4",
        "original_commit_id": "7c194be4830830dc3590b206624f010f3e45f8ef",
        "user": {
            "login": "hallski",
            "id": 541,
            "node_id": "MDQ6VXNlcjU0MQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/541?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hallski",
            "html_url": "https://github.com/hallski",
            "followers_url": "https://api.github.com/users/hallski/followers",
            "following_url": "https://api.github.com/users/hallski/following{/other_user}",
            "gists_url": "https://api.github.com/users/hallski/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hallski/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hallski/subscriptions",
            "organizations_url": "https://api.github.com/users/hallski/orgs",
            "repos_url": "https://api.github.com/users/hallski/repos",
            "events_url": "https://api.github.com/users/hallski/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hallski/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It was, in order to expose the simple block based component fallback handler, however I'm not sure it makes sense. Especially if we are discussing removing the fallback handling.",
        "created_at": "2017-03-23T17:22:19Z",
        "updated_at": "2017-04-04T07:54:02Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/306#discussion_r107731363",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/306",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/107731363"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/306#discussion_r107731363"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/306"
            }
        },
        "in_reply_to_id": 107451893
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/107732227",
        "pull_request_review_id": 28722209,
        "id": 107732227,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzczMjIyNw==",
        "diff_hunk": "@@ -0,0 +1,60 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import <Foundation/Foundation.h>\n+\n+@class HUBConfig;\n+@class HUBViewController;\n+@protocol HUBActionHandler;\n+@protocol HUBContentOperation;\n+@protocol HUBViewModel;\n+\n+NS_ASSUME_NONNULL_BEGIN\n+\n+/**\n+ *  `HUBViewController` factory that uses a `HUBConfig` for all the configuration needed to create a view controller.\n+ *\n+ *  This view controller allows for a fully configured `HUBViewController` to be created without going through the \n+ *  `HUBManager` and `HUBFeatureRegistration`.\n+ */\n+@interface HUBConfigViewControllerFactory : NSObject",
        "path": "include/HubFramework/HUBConfigViewControllerFactory.h",
        "position": 38,
        "original_position": 38,
        "commit_id": "cc2ddcdfccbc3891509882665d6f4127e60b61c4",
        "original_commit_id": "7c194be4830830dc3590b206624f010f3e45f8ef",
        "user": {
            "login": "hallski",
            "id": 541,
            "node_id": "MDQ6VXNlcjU0MQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/541?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hallski",
            "html_url": "https://github.com/hallski",
            "followers_url": "https://api.github.com/users/hallski/followers",
            "following_url": "https://api.github.com/users/hallski/following{/other_user}",
            "gists_url": "https://api.github.com/users/hallski/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hallski/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hallski/subscriptions",
            "organizations_url": "https://api.github.com/users/hallski/orgs",
            "repos_url": "https://api.github.com/users/hallski/repos",
            "events_url": "https://api.github.com/users/hallski/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hallski/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Initially it didn't make a lot of sense and later I didn't revisit that decision. It could be changed to be configured with a configuration (rather than passing in the configuration to the `create...`-methos). However at least one of the methods in the `HUBViewControllerFactory` protocol does't make sense when used without `HUBManager`/`HUBFeatureRegistry`.",
        "created_at": "2017-03-23T17:25:36Z",
        "updated_at": "2017-04-04T07:54:02Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/306#discussion_r107732227",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/306",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/107732227"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/306#discussion_r107732227"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/306"
            }
        },
        "in_reply_to_id": 107619962
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/107736288",
        "pull_request_review_id": 28726738,
        "id": 107736288,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzczNjI4OA==",
        "diff_hunk": "@@ -0,0 +1,91 @@\n+/*\n+ *  Copyright (c) 2017 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import <CoreGraphics/CoreGraphics.h>\n+#import <Foundation/Foundation.h>\n+\n+#import \"HUBComponentCategories.h\"\n+\n+@protocol HUBActionRegistry;\n+@protocol HUBJSONSchema;\n+@protocol HUBComponent;\n+@protocol HUBComponentFallbackHandler;\n+@protocol HUBContentReloadPolicy;\n+@protocol HUBComponentLayoutManager;\n+@protocol HUBImageLoaderFactory;\n+@protocol HUBConnectivityStateResolver;\n+@protocol HUBIconImageResolver;\n+@protocol HUBViewControllerScrollHandler;\n+@protocol HUBComponentRegistry;\n+\n+\n+NS_ASSUME_NONNULL_BEGIN\n+\n+/**\n+ *  Configuration used to create view controllers when using Hub Framework without `HUBManager`.\n+ *\n+ *  This allows for using Hub Framework without the `HubManager` and feature registration.",
        "path": "include/HubFramework/HUBConfig.h",
        "position": null,
        "original_position": 45,
        "commit_id": "cc2ddcdfccbc3891509882665d6f4127e60b61c4",
        "original_commit_id": "7c194be4830830dc3590b206624f010f3e45f8ef",
        "user": {
            "login": "hallski",
            "id": 541,
            "node_id": "MDQ6VXNlcjU0MQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/541?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hallski",
            "html_url": "https://github.com/hallski",
            "followers_url": "https://api.github.com/users/hallski/followers",
            "following_url": "https://api.github.com/users/hallski/following{/other_user}",
            "gists_url": "https://api.github.com/users/hallski/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hallski/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hallski/subscriptions",
            "organizations_url": "https://api.github.com/users/hallski/orgs",
            "repos_url": "https://api.github.com/users/hallski/repos",
            "events_url": "https://api.github.com/users/hallski/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hallski/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Definitely, I thought I did but apparently not. Thanks for spotting.",
        "created_at": "2017-03-23T17:41:24Z",
        "updated_at": "2017-04-04T07:54:02Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/306#discussion_r107736288",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/306",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/107736288"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/306#discussion_r107736288"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/306"
            }
        },
        "in_reply_to_id": 107667066
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/108937081",
        "pull_request_review_id": 30003933,
        "id": 108937081,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODkzNzA4MQ==",
        "diff_hunk": "@@ -0,0 +1,60 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import <Foundation/Foundation.h>\n+\n+@class HUBConfig;\n+@class HUBViewController;\n+@protocol HUBActionHandler;\n+@protocol HUBContentOperation;\n+@protocol HUBViewModel;\n+\n+NS_ASSUME_NONNULL_BEGIN\n+\n+/**\n+ *  `HUBViewController` factory that uses a `HUBConfig` for all the configuration needed to create a view controller.\n+ *\n+ *  This view controller allows for a fully configured `HUBViewController` to be created without going through the \n+ *  `HUBManager` and `HUBFeatureRegistration`.\n+ */\n+@interface HUBConfigViewControllerFactory : NSObject",
        "path": "include/HubFramework/HUBConfigViewControllerFactory.h",
        "position": 38,
        "original_position": 38,
        "commit_id": "cc2ddcdfccbc3891509882665d6f4127e60b61c4",
        "original_commit_id": "7c194be4830830dc3590b206624f010f3e45f8ef",
        "user": {
            "login": "cerihughes",
            "id": 12008876,
            "node_id": "MDQ6VXNlcjEyMDA4ODc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12008876?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cerihughes",
            "html_url": "https://github.com/cerihughes",
            "followers_url": "https://api.github.com/users/cerihughes/followers",
            "following_url": "https://api.github.com/users/cerihughes/following{/other_user}",
            "gists_url": "https://api.github.com/users/cerihughes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cerihughes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cerihughes/subscriptions",
            "organizations_url": "https://api.github.com/users/cerihughes/orgs",
            "repos_url": "https://api.github.com/users/cerihughes/repos",
            "events_url": "https://api.github.com/users/cerihughes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cerihughes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Makes sense. I guess that means we're deprecating `HUBViewControllerFactory`, right?",
        "created_at": "2017-03-30T14:13:52Z",
        "updated_at": "2017-04-04T07:54:02Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/306#discussion_r108937081",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/306",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/108937081"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/306#discussion_r108937081"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/306"
            }
        },
        "in_reply_to_id": 107619962
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/110380363",
        "pull_request_review_id": 31550259,
        "id": 110380363,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDM4MDM2Mw==",
        "diff_hunk": "@@ -163,9 +163,22 @@ - (void)dealloc\n \n - (void)loadView\n {\n-    self.view = [[HUBContainerView alloc] initWithFrame:CGRectZero];\n+    HUBContainerView *containerView = [[HUBContainerView alloc] initWithFrame:CGRectZero];",
        "path": "sources/HUBViewControllerExperimentalImplementation.m",
        "position": 21,
        "original_position": 5,
        "commit_id": "02057bd15677d451efcd26592c63b10858e259aa",
        "original_commit_id": "21ded267f1aecae945cb77b220a91099a7c4e0b7",
        "user": {
            "login": "krris",
            "id": 1786612,
            "node_id": "MDQ6VXNlcjE3ODY2MTI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1786612?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krris",
            "html_url": "https://github.com/krris",
            "followers_url": "https://api.github.com/users/krris/followers",
            "following_url": "https://api.github.com/users/krris/following{/other_user}",
            "gists_url": "https://api.github.com/users/krris/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krris/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krris/subscriptions",
            "organizations_url": "https://api.github.com/users/krris/orgs",
            "repos_url": "https://api.github.com/users/krris/repos",
            "events_url": "https://api.github.com/users/krris/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krris/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You can add `const` to have a consistency across our codebase.",
        "created_at": "2017-04-07T12:42:21Z",
        "updated_at": "2017-04-07T12:56:39Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/327#discussion_r110380363",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/327",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/110380363"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/327#discussion_r110380363"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/327"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/110380781",
        "pull_request_review_id": 31550259,
        "id": 110380781,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDM4MDc4MQ==",
        "diff_hunk": "@@ -167,9 +167,22 @@ - (void)dealloc\n \n - (void)loadView\n {\n-    self.view = [[HUBContainerView alloc] initWithFrame:CGRectZero];\n+    HUBContainerView *containerView = [[HUBContainerView alloc] initWithFrame:CGRectZero];",
        "path": "sources/HUBViewControllerImplementation.m",
        "position": 21,
        "original_position": 5,
        "commit_id": "02057bd15677d451efcd26592c63b10858e259aa",
        "original_commit_id": "21ded267f1aecae945cb77b220a91099a7c4e0b7",
        "user": {
            "login": "krris",
            "id": 1786612,
            "node_id": "MDQ6VXNlcjE3ODY2MTI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1786612?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krris",
            "html_url": "https://github.com/krris",
            "followers_url": "https://api.github.com/users/krris/followers",
            "following_url": "https://api.github.com/users/krris/following{/other_user}",
            "gists_url": "https://api.github.com/users/krris/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krris/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krris/subscriptions",
            "organizations_url": "https://api.github.com/users/krris/orgs",
            "repos_url": "https://api.github.com/users/krris/repos",
            "events_url": "https://api.github.com/users/krris/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krris/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Same thing as before: `const` \ud83d\ude09 ",
        "created_at": "2017-04-07T12:45:03Z",
        "updated_at": "2017-04-07T12:56:39Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/327#discussion_r110380781",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/327",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/110380781"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/327#discussion_r110380781"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/327"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/110382586",
        "pull_request_review_id": 31550259,
        "id": 110382586,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDM4MjU4Ng==",
        "diff_hunk": "@@ -167,9 +165,23 @@ - (void)dealloc\n \n - (void)loadView\n {\n-    self.view = [[HUBContainerView alloc] initWithFrame:CGRectZero];\n+    HUBContainerView *containerView = [[HUBContainerView alloc] initWithFrame:CGRectZero];\n \n-    [self createCollectionViewIfNeeded];\n+    HUBCollectionView * const collectionView = [self.collectionViewFactory createCollectionView];\n+    self.collectionView = collectionView;\n+    collectionView.showsVerticalScrollIndicator = [self.scrollHandler shouldShowScrollIndicatorsInViewController:self];\n+    collectionView.showsHorizontalScrollIndicator = collectionView.showsVerticalScrollIndicator;\n+    collectionView.keyboardDismissMode = [self.scrollHandler keyboardDismissModeForViewController:self];\n+    collectionView.decelerationRate = [self.scrollHandler scrollDecelerationRateForViewController:self];\n+    collectionView.bounces = YES;",
        "path": "sources/HUBViewControllerImplementation.m",
        "position": 30,
        "original_position": 30,
        "commit_id": "02057bd15677d451efcd26592c63b10858e259aa",
        "original_commit_id": "02057bd15677d451efcd26592c63b10858e259aa",
        "user": {
            "login": "krris",
            "id": 1786612,
            "node_id": "MDQ6VXNlcjE3ODY2MTI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1786612?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krris",
            "html_url": "https://github.com/krris",
            "followers_url": "https://api.github.com/users/krris/followers",
            "following_url": "https://api.github.com/users/krris/following{/other_user}",
            "gists_url": "https://api.github.com/users/krris/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krris/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krris/subscriptions",
            "organizations_url": "https://api.github.com/users/krris/orgs",
            "repos_url": "https://api.github.com/users/krris/repos",
            "events_url": "https://api.github.com/users/krris/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krris/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Are you sure that none of the views in our app set it to `NO`?",
        "created_at": "2017-04-07T12:55:40Z",
        "updated_at": "2017-04-07T12:56:39Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/327#discussion_r110382586",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/327",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/110382586"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/327#discussion_r110382586"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/327"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/110383405",
        "pull_request_review_id": 31553709,
        "id": 110383405,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDM4MzQwNQ==",
        "diff_hunk": "@@ -167,9 +165,23 @@ - (void)dealloc\n \n - (void)loadView\n {\n-    self.view = [[HUBContainerView alloc] initWithFrame:CGRectZero];\n+    HUBContainerView *containerView = [[HUBContainerView alloc] initWithFrame:CGRectZero];\n \n-    [self createCollectionViewIfNeeded];\n+    HUBCollectionView * const collectionView = [self.collectionViewFactory createCollectionView];\n+    self.collectionView = collectionView;\n+    collectionView.showsVerticalScrollIndicator = [self.scrollHandler shouldShowScrollIndicatorsInViewController:self];\n+    collectionView.showsHorizontalScrollIndicator = collectionView.showsVerticalScrollIndicator;\n+    collectionView.keyboardDismissMode = [self.scrollHandler keyboardDismissModeForViewController:self];\n+    collectionView.decelerationRate = [self.scrollHandler scrollDecelerationRateForViewController:self];\n+    collectionView.bounces = YES;",
        "path": "sources/HUBViewControllerImplementation.m",
        "position": 30,
        "original_position": 30,
        "commit_id": "02057bd15677d451efcd26592c63b10858e259aa",
        "original_commit_id": "02057bd15677d451efcd26592c63b10858e259aa",
        "user": {
            "login": "cerihughes",
            "id": 12008876,
            "node_id": "MDQ6VXNlcjEyMDA4ODc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12008876?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cerihughes",
            "html_url": "https://github.com/cerihughes",
            "followers_url": "https://api.github.com/users/cerihughes/followers",
            "following_url": "https://api.github.com/users/cerihughes/following{/other_user}",
            "gists_url": "https://api.github.com/users/cerihughes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cerihughes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cerihughes/subscriptions",
            "organizations_url": "https://api.github.com/users/cerihughes/orgs",
            "repos_url": "https://api.github.com/users/cerihughes/repos",
            "events_url": "https://api.github.com/users/cerihughes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cerihughes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The API isn't used by anything. `client-ios` uses `alwaysBounceVertical`, but I'll be moving that API into the view layer.",
        "created_at": "2017-04-07T12:59:45Z",
        "updated_at": "2017-04-07T12:59:45Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/327#discussion_r110383405",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/327",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/110383405"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/327#discussion_r110383405"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/327"
            }
        },
        "in_reply_to_id": 110382586
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/110383523",
        "pull_request_review_id": 31553849,
        "id": 110383523,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDM4MzUyMw==",
        "diff_hunk": "@@ -167,9 +167,22 @@ - (void)dealloc\n \n - (void)loadView\n {\n-    self.view = [[HUBContainerView alloc] initWithFrame:CGRectZero];\n+    HUBContainerView *containerView = [[HUBContainerView alloc] initWithFrame:CGRectZero];",
        "path": "sources/HUBViewControllerImplementation.m",
        "position": 21,
        "original_position": 5,
        "commit_id": "02057bd15677d451efcd26592c63b10858e259aa",
        "original_commit_id": "21ded267f1aecae945cb77b220a91099a7c4e0b7",
        "user": {
            "login": "cerihughes",
            "id": 12008876,
            "node_id": "MDQ6VXNlcjEyMDA4ODc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12008876?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cerihughes",
            "html_url": "https://github.com/cerihughes",
            "followers_url": "https://api.github.com/users/cerihughes/followers",
            "following_url": "https://api.github.com/users/cerihughes/following{/other_user}",
            "gists_url": "https://api.github.com/users/cerihughes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cerihughes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cerihughes/subscriptions",
            "organizations_url": "https://api.github.com/users/cerihughes/orgs",
            "repos_url": "https://api.github.com/users/cerihughes/repos",
            "events_url": "https://api.github.com/users/cerihughes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cerihughes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Oh. Remembering to use `const` isn't one of my strong points :O",
        "created_at": "2017-04-07T13:00:30Z",
        "updated_at": "2017-04-07T13:00:30Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/327#discussion_r110383523",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/327",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/110383523"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/327#discussion_r110383523"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/327"
            }
        },
        "in_reply_to_id": 110380781
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/110383711",
        "pull_request_review_id": 31554038,
        "id": 110383711,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDM4MzcxMQ==",
        "diff_hunk": "@@ -0,0 +1,39 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import \"HUBContainerView.h\"\n+\n+NS_ASSUME_NONNULL_BEGIN\n+\n+/// A collection view-based implementation of the container view.\n+@interface HUBCollectionContainerView : HUBContainerView\n+\n+/**\n+ *  Redefine the container view property to be a UICollectionView, and makde it readwrite for internal use.",
        "path": "sources/HUBCollectionContainerView.h",
        "position": null,
        "original_position": 30,
        "commit_id": "3d012d55810c70a0e396931d81a4fa8bea87347d",
        "original_commit_id": "5c343842b0e5f7d2c170a5fb07254f48766d2a07",
        "user": {
            "login": "krris",
            "id": 1786612,
            "node_id": "MDQ6VXNlcjE3ODY2MTI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1786612?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krris",
            "html_url": "https://github.com/krris",
            "followers_url": "https://api.github.com/users/krris/followers",
            "following_url": "https://api.github.com/users/krris/following{/other_user}",
            "gists_url": "https://api.github.com/users/krris/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krris/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krris/subscriptions",
            "organizations_url": "https://api.github.com/users/krris/orgs",
            "repos_url": "https://api.github.com/users/krris/repos",
            "events_url": "https://api.github.com/users/krris/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krris/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\ud83d\udd2c Typo: `make`",
        "created_at": "2017-04-07T13:01:30Z",
        "updated_at": "2017-04-08T12:15:06Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/328#discussion_r110383711",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/328",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/110383711"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/328#discussion_r110383711"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/328"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/110384977",
        "pull_request_review_id": 31554038,
        "id": 110384977,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDM4NDk3Nw==",
        "diff_hunk": "@@ -165,7 +165,7 @@ - (void)dealloc\n \n - (void)loadView\n {\n-    HUBContainerView *containerView = [[HUBContainerView alloc] initWithFrame:CGRectZero];\n+    HUBCollectionContainerView *containerView = [[HUBCollectionContainerView alloc] initWithFrame:CGRectZero];",
        "path": "sources/HUBViewControllerImplementation.m",
        "position": null,
        "original_position": 14,
        "commit_id": "3d012d55810c70a0e396931d81a4fa8bea87347d",
        "original_commit_id": "5c343842b0e5f7d2c170a5fb07254f48766d2a07",
        "user": {
            "login": "krris",
            "id": 1786612,
            "node_id": "MDQ6VXNlcjE3ODY2MTI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1786612?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krris",
            "html_url": "https://github.com/krris",
            "followers_url": "https://api.github.com/users/krris/followers",
            "following_url": "https://api.github.com/users/krris/following{/other_user}",
            "gists_url": "https://api.github.com/users/krris/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krris/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krris/subscriptions",
            "organizations_url": "https://api.github.com/users/krris/orgs",
            "repos_url": "https://api.github.com/users/krris/repos",
            "events_url": "https://api.github.com/users/krris/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krris/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "What about adding a `const`? \ud83d\ude09 ",
        "created_at": "2017-04-07T13:08:48Z",
        "updated_at": "2017-04-08T12:15:06Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/328#discussion_r110384977",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/328",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/110384977"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/328#discussion_r110384977"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/328"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/110386181",
        "pull_request_review_id": 31554038,
        "id": 110386181,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDM4NjE4MQ==",
        "diff_hunk": "@@ -161,7 +160,7 @@ - (void)dealloc\n \n - (void)loadView\n {\n-    HUBContainerView *containerView = [[HUBContainerView alloc] initWithFrame:CGRectZero];\n+    HUBCollectionContainerView *containerView = [[HUBCollectionContainerView alloc] initWithFrame:CGRectZero];",
        "path": "sources/HUBViewControllerExperimentalImplementation.m",
        "position": null,
        "original_position": 22,
        "commit_id": "3d012d55810c70a0e396931d81a4fa8bea87347d",
        "original_commit_id": "dd38e381a5bd13ccefc95ef5b25a7c820a7873b6",
        "user": {
            "login": "krris",
            "id": 1786612,
            "node_id": "MDQ6VXNlcjE3ODY2MTI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1786612?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krris",
            "html_url": "https://github.com/krris",
            "followers_url": "https://api.github.com/users/krris/followers",
            "following_url": "https://api.github.com/users/krris/following{/other_user}",
            "gists_url": "https://api.github.com/users/krris/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krris/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krris/subscriptions",
            "organizations_url": "https://api.github.com/users/krris/orgs",
            "repos_url": "https://api.github.com/users/krris/repos",
            "events_url": "https://api.github.com/users/krris/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krris/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "What about adding a `const`? \ud83d\ude09",
        "created_at": "2017-04-07T13:14:46Z",
        "updated_at": "2017-04-08T12:15:06Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/328#discussion_r110386181",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/328",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/110386181"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/328#discussion_r110386181"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/328"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/110392838",
        "pull_request_review_id": 31564097,
        "id": 110392838,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDM5MjgzOA==",
        "diff_hunk": "@@ -165,7 +165,7 @@ - (void)dealloc\n \n - (void)loadView\n {\n-    HUBContainerView *containerView = [[HUBContainerView alloc] initWithFrame:CGRectZero];\n+    HUBCollectionContainerView *containerView = [[HUBCollectionContainerView alloc] initWithFrame:CGRectZero];",
        "path": "sources/HUBViewControllerImplementation.m",
        "position": null,
        "original_position": 14,
        "commit_id": "3d012d55810c70a0e396931d81a4fa8bea87347d",
        "original_commit_id": "5c343842b0e5f7d2c170a5fb07254f48766d2a07",
        "user": {
            "login": "cerihughes",
            "id": 12008876,
            "node_id": "MDQ6VXNlcjEyMDA4ODc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12008876?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cerihughes",
            "html_url": "https://github.com/cerihughes",
            "followers_url": "https://api.github.com/users/cerihughes/followers",
            "following_url": "https://api.github.com/users/cerihughes/following{/other_user}",
            "gists_url": "https://api.github.com/users/cerihughes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cerihughes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cerihughes/subscriptions",
            "organizations_url": "https://api.github.com/users/cerihughes/orgs",
            "repos_url": "https://api.github.com/users/cerihughes/repos",
            "events_url": "https://api.github.com/users/cerihughes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cerihughes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Will do.\r\n",
        "created_at": "2017-04-07T13:46:18Z",
        "updated_at": "2017-04-08T12:15:06Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/328#discussion_r110392838",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/328",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/110392838"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/328#discussion_r110392838"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/328"
            }
        },
        "in_reply_to_id": 110384977
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/110404185",
        "pull_request_review_id": 31576888,
        "id": 110404185,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDQwNDE4NQ==",
        "diff_hunk": "@@ -0,0 +1,39 @@\n+/*\n+ *  Copyright (c) 2016 Spotify AB.\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+#import \"HUBContainerView.h\"\n+\n+NS_ASSUME_NONNULL_BEGIN\n+\n+/// A collection view-based implementation of the container view.\n+@interface HUBCollectionContainerView : HUBContainerView\n+\n+/**\n+ *  Redefine the content view property to be a UICollectionView, and makde it readwrite for internal use.",
        "path": "sources/HUBCollectionContainerView.h",
        "position": null,
        "original_position": 30,
        "commit_id": "3d012d55810c70a0e396931d81a4fa8bea87347d",
        "original_commit_id": "dd38e381a5bd13ccefc95ef5b25a7c820a7873b6",
        "user": {
            "login": "bubski",
            "id": 1083513,
            "node_id": "MDQ6VXNlcjEwODM1MTM=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1083513?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bubski",
            "html_url": "https://github.com/bubski",
            "followers_url": "https://api.github.com/users/bubski/followers",
            "following_url": "https://api.github.com/users/bubski/following{/other_user}",
            "gists_url": "https://api.github.com/users/bubski/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bubski/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bubski/subscriptions",
            "organizations_url": "https://api.github.com/users/bubski/orgs",
            "repos_url": "https://api.github.com/users/bubski/repos",
            "events_url": "https://api.github.com/users/bubski/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bubski/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Typo\r\n>and makde it",
        "created_at": "2017-04-07T14:34:49Z",
        "updated_at": "2017-04-08T12:15:06Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/328#discussion_r110404185",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/328",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/110404185"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/328#discussion_r110404185"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/328"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/110404353",
        "pull_request_review_id": 31577066,
        "id": 110404353,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDQwNDM1Mw==",
        "diff_hunk": "@@ -174,6 +175,9 @@ NS_ASSUME_NONNULL_BEGIN\n /// The view controller's delegate. See `HUBViewControllerDelegate` for more information.\n @property (nonatomic, weak, nullable) id<HUBViewControllerDelegate> delegate;\n \n+/// Redeclare the view property to be a HUBContainerView.\n+@property(null_resettable, nonatomic, strong) HUBContainerView *view;",
        "path": "include/HubFramework/HUBViewController.h",
        "position": null,
        "original_position": 13,
        "commit_id": "3d012d55810c70a0e396931d81a4fa8bea87347d",
        "original_commit_id": "dd38e381a5bd13ccefc95ef5b25a7c820a7873b6",
        "user": {
            "login": "bubski",
            "id": 1083513,
            "node_id": "MDQ6VXNlcjEwODM1MTM=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1083513?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bubski",
            "html_url": "https://github.com/bubski",
            "followers_url": "https://api.github.com/users/bubski/followers",
            "following_url": "https://api.github.com/users/bubski/following{/other_user}",
            "gists_url": "https://api.github.com/users/bubski/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bubski/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bubski/subscriptions",
            "organizations_url": "https://api.github.com/users/bubski/orgs",
            "repos_url": "https://api.github.com/users/bubski/repos",
            "events_url": "https://api.github.com/users/bubski/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bubski/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Missing space after `@property`",
        "created_at": "2017-04-07T14:35:22Z",
        "updated_at": "2017-04-08T12:15:06Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/328#discussion_r110404353",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/328",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/110404353"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/328#discussion_r110404353"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/328"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/110851702",
        "pull_request_review_id": 32051555,
        "id": 110851702,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDg1MTcwMg==",
        "diff_hunk": "@@ -36,8 +37,10 @@ NS_ASSUME_NONNULL_BEGIN\n  *\n  *  To be able to specify which selection action to use (useful for tests), use this class'\n  *  designated initializer instead of this class constructor.\n+ *\n+ *  @param application The object exposing UIApplication's properties and methods\n  */\n-+ (instancetype)registryWithDefaultSelectionAction;\n++ (instancetype)registryWithDefaultSelectionActionAndApplication:(id<HUBApplicationProtocol>)application;",
        "path": "sources/HUBActionRegistryImplementation.h",
        "position": 16,
        "original_position": 16,
        "commit_id": "9d92344ac2a427f1ecb7469d09446859c12e68f4",
        "original_commit_id": "5c1bf8e7d392c03dafa9b7a80db4a126ec07ccdd",
        "user": {
            "login": "krris",
            "id": 1786612,
            "node_id": "MDQ6VXNlcjE3ODY2MTI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1786612?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/krris",
            "html_url": "https://github.com/krris",
            "followers_url": "https://api.github.com/users/krris/followers",
            "following_url": "https://api.github.com/users/krris/following{/other_user}",
            "gists_url": "https://api.github.com/users/krris/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/krris/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/krris/subscriptions",
            "organizations_url": "https://api.github.com/users/krris/orgs",
            "repos_url": "https://api.github.com/users/krris/repos",
            "events_url": "https://api.github.com/users/krris/events{/privacy}",
            "received_events_url": "https://api.github.com/users/krris/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I\u2019m not happy about naming here. Do you have any better ideas?",
        "created_at": "2017-04-11T09:14:25Z",
        "updated_at": "2017-04-25T07:38:27Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/329#discussion_r110851702",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/329",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/110851702"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/329#discussion_r110851702"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/329"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/115939457",
        "pull_request_review_id": 37519867,
        "id": 115939457,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTkzOTQ1Nw==",
        "diff_hunk": "@@ -716,11 +716,14 @@ - (void)collectionView:(UICollectionView *)collectionView\n     forItemAtIndexPath:(NSIndexPath *)indexPath\n {\n     HUBComponentWrapper * const componentWrapper = [self componentWrapperFromCell:(HUBComponentCollectionViewCell *)cell];\n+    UIView * const componentView = componentWrapper.view;\n \n-    [self.delegate viewController:self\n-               componentWithModel:componentWrapper.model\n-                     layoutTraits:componentWrapper.layoutTraits\n-             didDisappearFromView:cell];\n+    if (componentView) {",
        "path": "sources/HUBViewControllerExperimentalImplementation.m",
        "position": 11,
        "original_position": 10,
        "commit_id": "daf36e1266024efbe29fc9fdf600f53ff0349e55",
        "original_commit_id": "98ee18e7e36a99e3a24ce87f36d68ef7b32fb514",
        "user": {
            "login": "cerihughes",
            "id": 12008876,
            "node_id": "MDQ6VXNlcjEyMDA4ODc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12008876?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cerihughes",
            "html_url": "https://github.com/cerihughes",
            "followers_url": "https://api.github.com/users/cerihughes/followers",
            "following_url": "https://api.github.com/users/cerihughes/following{/other_user}",
            "gists_url": "https://api.github.com/users/cerihughes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cerihughes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cerihughes/subscriptions",
            "organizations_url": "https://api.github.com/users/cerihughes/orgs",
            "repos_url": "https://api.github.com/users/cerihughes/repos",
            "events_url": "https://api.github.com/users/cerihughes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cerihughes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "If we're not expecting the view to be `nil`, maybe we should add an assert here?",
        "created_at": "2017-05-11T09:06:23Z",
        "updated_at": "2017-05-11T13:56:08Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/335#discussion_r115939457",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/335",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/115939457"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/335#discussion_r115939457"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/335"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/115993394",
        "pull_request_review_id": 37579322,
        "id": 115993394,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTk5MzM5NA==",
        "diff_hunk": "@@ -727,11 +727,14 @@ - (void)collectionView:(UICollectionView *)collectionView\n     forItemAtIndexPath:(NSIndexPath *)indexPath\n {\n     HUBComponentWrapper * const componentWrapper = [self componentWrapperFromCell:(HUBComponentCollectionViewCell *)cell];\n+    UIView * const componentView = componentWrapper.view;",
        "path": "sources/HUBViewControllerImplementation.m",
        "position": null,
        "original_position": 4,
        "commit_id": "daf36e1266024efbe29fc9fdf600f53ff0349e55",
        "original_commit_id": "85b091d9f5af37e07c3b7b79c0edbf9bf1def43b",
        "user": {
            "login": "cerihughes",
            "id": 12008876,
            "node_id": "MDQ6VXNlcjEyMDA4ODc2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12008876?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cerihughes",
            "html_url": "https://github.com/cerihughes",
            "followers_url": "https://api.github.com/users/cerihughes/followers",
            "following_url": "https://api.github.com/users/cerihughes/following{/other_user}",
            "gists_url": "https://api.github.com/users/cerihughes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cerihughes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cerihughes/subscriptions",
            "organizations_url": "https://api.github.com/users/cerihughes/orgs",
            "repos_url": "https://api.github.com/users/cerihughes/repos",
            "events_url": "https://api.github.com/users/cerihughes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cerihughes/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Also here?",
        "created_at": "2017-05-11T13:45:15Z",
        "updated_at": "2017-05-11T13:56:08Z",
        "html_url": "https://github.com/spotify/HubFramework/pull/335#discussion_r115993394",
        "pull_request_url": "https://api.github.com/repos/spotify/HubFramework/pulls/335",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/comments/115993394"
            },
            "html": {
                "href": "https://github.com/spotify/HubFramework/pull/335#discussion_r115993394"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/spotify/HubFramework/pulls/335"
            }
        }
    }
]