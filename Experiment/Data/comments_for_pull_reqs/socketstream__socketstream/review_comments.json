[
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/910746",
        "pull_request_review_id": null,
        "id": 910746,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxMDc0Ng==",
        "diff_hunk": "@@ -20,42 +19,19 @@ consoleMessage =\n \n module.exports = (ss, options) ->\n \n-  handleFileChange = (action) ->\n+  watchDirs = for dir in options.liveReload\n+    pathlib.join ss.root, options.dirs[dir]\n+\n+  watcher = chokidar.watch watchDirs, { ignored: /(\\/\\.|~$)/ }\n+  watcher.on 'add', (path) -> onChange(path, 'added')\n+  watcher.on 'change', (path) -> onChange(path, 'changed')\n+  watcher.on 'unlink', (path) -> onChange(path, 'removed')\n+  watcher.on 'error', (path) -> console.log('\u270e'.red, \"Error: #{error}\".red)",
        "path": "src/client/live_reload.coffee",
        "position": null,
        "original_position": 30,
        "commit_id": "3e1b730c07f1d703b7c66cff1d6b71f8b54902bb",
        "original_commit_id": "035852274ca7f37bd29241fb65a6696a8bcacbae",
        "user": {
            "login": "madscoaducom",
            "id": 147324,
            "node_id": "MDQ6VXNlcjE0NzMyNA==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/147324?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/madscoaducom",
            "html_url": "https://github.com/madscoaducom",
            "followers_url": "https://api.github.com/users/madscoaducom/followers",
            "following_url": "https://api.github.com/users/madscoaducom/following{/other_user}",
            "gists_url": "https://api.github.com/users/madscoaducom/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/madscoaducom/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/madscoaducom/subscriptions",
            "organizations_url": "https://api.github.com/users/madscoaducom/orgs",
            "repos_url": "https://api.github.com/users/madscoaducom/repos",
            "events_url": "https://api.github.com/users/madscoaducom/events{/privacy}",
            "received_events_url": "https://api.github.com/users/madscoaducom/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Hi Michael,\nYou need to change `(path) ->`to `(error) ->`\n",
        "created_at": "2012-05-31T20:09:04Z",
        "updated_at": "2012-05-31T21:16:31Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/227#discussion_r910746",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/227",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/910746"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/227#discussion_r910746"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/227"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/24409322",
        "pull_request_review_id": null,
        "id": 24409322,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NDA5MzIy",
        "diff_hunk": "@@ -0,0 +1,3 @@\n+[submodule \"e2e_accept/appLib/laTrappe\"]\n+\tpath = e2e_accept/appLib/laTrappe",
        "path": ".gitmodules",
        "position": 2,
        "original_position": 2,
        "commit_id": "c9d3ae0c390dea5955593fd6f0ec562d977b2993",
        "original_commit_id": "c9d3ae0c390dea5955593fd6f0ec562d977b2993",
        "user": {
            "login": "thepian",
            "id": 72638,
            "node_id": "MDQ6VXNlcjcyNjM4",
            "avatar_url": "https://avatars3.githubusercontent.com/u/72638?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/thepian",
            "html_url": "https://github.com/thepian",
            "followers_url": "https://api.github.com/users/thepian/followers",
            "following_url": "https://api.github.com/users/thepian/following{/other_user}",
            "gists_url": "https://api.github.com/users/thepian/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/thepian/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/thepian/subscriptions",
            "organizations_url": "https://api.github.com/users/thepian/orgs",
            "repos_url": "https://api.github.com/users/thepian/repos",
            "events_url": "https://api.github.com/users/thepian/events{/privacy}",
            "received_events_url": "https://api.github.com/users/thepian/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I would suggest /test/e2e for the tests and /demo/laTrappe for the app.\n",
        "created_at": "2015-02-10T12:51:02Z",
        "updated_at": "2015-02-10T12:51:02Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/495#discussion_r24409322",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/495",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/24409322"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/495#discussion_r24409322"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/495"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/24409386",
        "pull_request_review_id": null,
        "id": 24409386,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NDA5Mzg2",
        "diff_hunk": "@@ -0,0 +1,3 @@\n+[submodule \"e2e_accept/appLib/laTrappe\"]\n+\tpath = e2e_accept/appLib/laTrappe\n+\turl = git@github.com:kulicuu/laTrappe.git",
        "path": ".gitmodules",
        "position": 3,
        "original_position": 3,
        "commit_id": "c9d3ae0c390dea5955593fd6f0ec562d977b2993",
        "original_commit_id": "c9d3ae0c390dea5955593fd6f0ec562d977b2993",
        "user": {
            "login": "thepian",
            "id": 72638,
            "node_id": "MDQ6VXNlcjcyNjM4",
            "avatar_url": "https://avatars3.githubusercontent.com/u/72638?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/thepian",
            "html_url": "https://github.com/thepian",
            "followers_url": "https://api.github.com/users/thepian/followers",
            "following_url": "https://api.github.com/users/thepian/following{/other_user}",
            "gists_url": "https://api.github.com/users/thepian/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/thepian/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/thepian/subscriptions",
            "organizations_url": "https://api.github.com/users/thepian/orgs",
            "repos_url": "https://api.github.com/users/thepian/repos",
            "events_url": "https://api.github.com/users/thepian/events{/privacy}",
            "received_events_url": "https://api.github.com/users/thepian/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "If a submodule is used I think it should be published under the socket stream org.\n\nI don't see the need for a submodule rather than a subfolder\n",
        "created_at": "2015-02-10T12:52:06Z",
        "updated_at": "2015-02-10T12:52:06Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/495#discussion_r24409386",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/495",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/24409386"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/495#discussion_r24409386"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/495"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/24409490",
        "pull_request_review_id": null,
        "id": 24409490,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NDA5NDkw",
        "diff_hunk": "@@ -20,14 +20,26 @@\n     \"Henrik Vendelbo\"\n   ],\n   \"dependencies\": {\n+    \"connect-static\": \"latest\",\n+    \"serve-static\": \"latest\",\n+    \"serve-favicon\": \"latest\",\n+    \"express-session\": \"latest\",\n+    \"keygrip\": \"latest\",\n+    \"cookies\": \"latest\",\n+    \"csurf\": \"latest\",\n+    \"body-parser\": \"latest\",\n+    \"cookie-session\": \"latest\",\n+    \"compression\": \"latest\",\n+    \"cookie-parser\": \"latest\",\n+    \"jwt-simple\":\"latest\",\n     \"apitree\": \"= 1.2.0\",\n     \"chokidar\": \"= 0.12.2\",\n     \"clean-css\": \"2.2.22\",\n     \"colors\": \"= 1.0.3\",\n     \"commander\": \"2.5.0\",\n-    \"connect\": \"2.27.6\",",
        "path": "package.json",
        "position": 21,
        "original_position": 21,
        "commit_id": "c9d3ae0c390dea5955593fd6f0ec562d977b2993",
        "original_commit_id": "c9d3ae0c390dea5955593fd6f0ec562d977b2993",
        "user": {
            "login": "thepian",
            "id": 72638,
            "node_id": "MDQ6VXNlcjcyNjM4",
            "avatar_url": "https://avatars3.githubusercontent.com/u/72638?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/thepian",
            "html_url": "https://github.com/thepian",
            "followers_url": "https://api.github.com/users/thepian/followers",
            "following_url": "https://api.github.com/users/thepian/following{/other_user}",
            "gists_url": "https://api.github.com/users/thepian/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/thepian/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/thepian/subscriptions",
            "organizations_url": "https://api.github.com/users/thepian/orgs",
            "repos_url": "https://api.github.com/users/thepian/repos",
            "events_url": "https://api.github.com/users/thepian/events{/privacy}",
            "received_events_url": "https://api.github.com/users/thepian/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Upgrading connect and engine.io is great, but shouldn't it be a separate feature branch ?\n",
        "created_at": "2015-02-10T12:54:41Z",
        "updated_at": "2015-02-10T12:54:41Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/495#discussion_r24409490",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/495",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/24409490"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/495#discussion_r24409490"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/495"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/24411068",
        "pull_request_review_id": null,
        "id": 24411068,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NDExMDY4",
        "diff_hunk": "@@ -0,0 +1,3 @@\n+[submodule \"e2e_accept/appLib/laTrappe\"]\n+\tpath = e2e_accept/appLib/laTrappe\n+\turl = git@github.com:kulicuu/laTrappe.git",
        "path": ".gitmodules",
        "position": 3,
        "original_position": 3,
        "commit_id": "c9d3ae0c390dea5955593fd6f0ec562d977b2993",
        "original_commit_id": "c9d3ae0c390dea5955593fd6f0ec562d977b2993",
        "user": {
            "login": "kulicuu",
            "id": 355726,
            "node_id": "MDQ6VXNlcjM1NTcyNg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/355726?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kulicuu",
            "html_url": "https://github.com/kulicuu",
            "followers_url": "https://api.github.com/users/kulicuu/followers",
            "following_url": "https://api.github.com/users/kulicuu/following{/other_user}",
            "gists_url": "https://api.github.com/users/kulicuu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kulicuu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kulicuu/subscriptions",
            "organizations_url": "https://api.github.com/users/kulicuu/orgs",
            "repos_url": "https://api.github.com/users/kulicuu/repos",
            "events_url": "https://api.github.com/users/kulicuu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kulicuu/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "so people don't need to have it downloaded with the clone.  Originally I was going to add the app (laTrappe) into the repository properly, but this is _much much_ better.  \n",
        "created_at": "2015-02-10T13:23:33Z",
        "updated_at": "2015-02-10T13:23:33Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/495#discussion_r24411068",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/495",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/24411068"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/495#discussion_r24411068"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/495"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27026061",
        "pull_request_review_id": null,
        "id": 27026061,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MDI2MDYx",
        "diff_hunk": "@@ -24,7 +20,7 @@ module.exports = function(ss, config) {\n       var k, stack, v;\n \n       // Load custom middleware      \n-      stack = existslib.existsSync(customDir) && apiTree.createApiTree(customDir) || {};\n+      stack = fs.existsSync(customDir) && apiTree.createApiTree(customDir) || {};",
        "path": "lib/request/middleware/index.js",
        "position": 22,
        "original_position": 22,
        "commit_id": "18e2ef8df2f62b6ad34752d59de185a5268c952a",
        "original_commit_id": "18e2ef8df2f62b6ad34752d59de185a5268c952a",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Line is too long.\n",
        "created_at": "2015-03-24T13:22:12Z",
        "updated_at": "2015-03-24T13:22:12Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/517#discussion_r27026061",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/517",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27026061"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/517#discussion_r27026061"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/517"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27026062",
        "pull_request_review_id": null,
        "id": 27026062,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MDI2MDYy",
        "diff_hunk": "@@ -3,13 +3,9 @@\n // Allows incoming requests to be pre-processed, transformed, or sent elsewhere\n 'use strict';\n \n-var apiTree, existslib, pathlib;\n-\n-pathlib = require('path');\n-\n-existslib = process.version.split('.')[1] === '6' && require('path') || require('fs');\n-\n-apiTree = require('apitree');\n+var pathlib = require('path');",
        "path": "lib/request/middleware/index.js",
        "position": 11,
        "original_position": 11,
        "commit_id": "18e2ef8df2f62b6ad34752d59de185a5268c952a",
        "original_commit_id": "18e2ef8df2f62b6ad34752d59de185a5268c952a",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'require' is not defined.\n",
        "created_at": "2015-03-24T13:22:12Z",
        "updated_at": "2015-03-24T13:22:12Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/517#discussion_r27026062",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/517",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27026062"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/517#discussion_r27026062"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/517"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27026064",
        "pull_request_review_id": null,
        "id": 27026064,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MDI2MDY0",
        "diff_hunk": "@@ -3,13 +3,9 @@\n // Allows incoming requests to be pre-processed, transformed, or sent elsewhere\n 'use strict';\n \n-var apiTree, existslib, pathlib;\n-\n-pathlib = require('path');\n-\n-existslib = process.version.split('.')[1] === '6' && require('path') || require('fs');\n-\n-apiTree = require('apitree');\n+var pathlib = require('path');\n+var fs = require('fs');",
        "path": "lib/request/middleware/index.js",
        "position": 12,
        "original_position": 12,
        "commit_id": "18e2ef8df2f62b6ad34752d59de185a5268c952a",
        "original_commit_id": "18e2ef8df2f62b6ad34752d59de185a5268c952a",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'require' is not defined.\n",
        "created_at": "2015-03-24T13:22:13Z",
        "updated_at": "2015-03-24T13:22:13Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/517#discussion_r27026064",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/517",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27026064"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/517#discussion_r27026064"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/517"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27026065",
        "pull_request_review_id": null,
        "id": 27026065,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MDI2MDY1",
        "diff_hunk": "@@ -3,13 +3,9 @@\n // Allows incoming requests to be pre-processed, transformed, or sent elsewhere\n 'use strict';\n \n-var apiTree, existslib, pathlib;\n-\n-pathlib = require('path');\n-\n-existslib = process.version.split('.')[1] === '6' && require('path') || require('fs');\n-\n-apiTree = require('apitree');\n+var pathlib = require('path');\n+var fs = require('fs');\n+var apiTree = require('apitree');",
        "path": "lib/request/middleware/index.js",
        "position": 13,
        "original_position": 13,
        "commit_id": "18e2ef8df2f62b6ad34752d59de185a5268c952a",
        "original_commit_id": "18e2ef8df2f62b6ad34752d59de185a5268c952a",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'require' is not defined.\n",
        "created_at": "2015-03-24T13:22:13Z",
        "updated_at": "2015-03-24T13:22:13Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/517#discussion_r27026065",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/517",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27026065"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/517#discussion_r27026065"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/517"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27026166",
        "pull_request_review_id": null,
        "id": 27026166,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MDI2MTY2",
        "diff_hunk": "@@ -3,13 +3,9 @@\n // Allows incoming requests to be pre-processed, transformed, or sent elsewhere\n 'use strict';\n \n-var apiTree, existslib, pathlib;\n-\n-pathlib = require('path');\n-\n-existslib = process.version.split('.')[1] === '6' && require('path') || require('fs');\n-\n-apiTree = require('apitree');\n+var pathlib = require('path');\n+var fs = require('fs');\n+var apiTree = require('apitree');",
        "path": "lib/request/middleware/index.js",
        "position": 13,
        "original_position": 13,
        "commit_id": "18e2ef8df2f62b6ad34752d59de185a5268c952a",
        "original_commit_id": "18e2ef8df2f62b6ad34752d59de185a5268c952a",
        "user": {
            "login": "arxpoetica",
            "id": 111424,
            "node_id": "MDQ6VXNlcjExMTQyNA==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/111424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/arxpoetica",
            "html_url": "https://github.com/arxpoetica",
            "followers_url": "https://api.github.com/users/arxpoetica/followers",
            "following_url": "https://api.github.com/users/arxpoetica/following{/other_user}",
            "gists_url": "https://api.github.com/users/arxpoetica/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/arxpoetica/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/arxpoetica/subscriptions",
            "organizations_url": "https://api.github.com/users/arxpoetica/orgs",
            "repos_url": "https://api.github.com/users/arxpoetica/repos",
            "events_url": "https://api.github.com/users/arxpoetica/events{/privacy}",
            "received_events_url": "https://api.github.com/users/arxpoetica/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Is this automatic hinting? Looks like we need to add a `.jshintrc` file and define a node environment.\n",
        "created_at": "2015-03-24T13:23:47Z",
        "updated_at": "2015-03-24T13:23:47Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/517#discussion_r27026166",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/517",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27026166"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/517#discussion_r27026166"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/517"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27062200",
        "pull_request_review_id": null,
        "id": 27062200,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MDYyMjAw",
        "diff_hunk": "@@ -3,13 +3,9 @@\n // Allows incoming requests to be pre-processed, transformed, or sent elsewhere\n 'use strict';\n \n-var apiTree, existslib, pathlib;\n-\n-pathlib = require('path');\n-\n-existslib = process.version.split('.')[1] === '6' && require('path') || require('fs');\n-\n-apiTree = require('apitree');\n+var pathlib = require('path');\n+var fs = require('fs');\n+var apiTree = require('apitree');",
        "path": "lib/request/middleware/index.js",
        "position": 13,
        "original_position": 13,
        "commit_id": "18e2ef8df2f62b6ad34752d59de185a5268c952a",
        "original_commit_id": "18e2ef8df2f62b6ad34752d59de185a5268c952a",
        "user": {
            "login": "thepian",
            "id": 72638,
            "node_id": "MDQ6VXNlcjcyNjM4",
            "avatar_url": "https://avatars3.githubusercontent.com/u/72638?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/thepian",
            "html_url": "https://github.com/thepian",
            "followers_url": "https://api.github.com/users/thepian/followers",
            "following_url": "https://api.github.com/users/thepian/following{/other_user}",
            "gists_url": "https://api.github.com/users/thepian/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/thepian/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/thepian/subscriptions",
            "organizations_url": "https://api.github.com/users/thepian/orgs",
            "repos_url": "https://api.github.com/users/thepian/repos",
            "events_url": "https://api.github.com/users/thepian/events{/privacy}",
            "received_events_url": "https://api.github.com/users/thepian/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yes I added it, but didn't look at configuration. Sry. I'll try to fix it, it's a bit noisy atm.\n\nThis might fix it https://github.com/socketstream/socketstream/commit/c14129f172b940fda7d908aa94fe463e6039f6cc\n",
        "created_at": "2015-03-24T19:05:41Z",
        "updated_at": "2015-03-24T19:05:41Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/517#discussion_r27062200",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/517",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27062200"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/517#discussion_r27062200"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/517"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27182401",
        "pull_request_review_id": null,
        "id": 27182401,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MTgyNDAx",
        "diff_hunk": "@@ -3,13 +3,9 @@\n // Allows incoming requests to be pre-processed, transformed, or sent elsewhere\n 'use strict';\n \n-var apiTree, existslib, pathlib;\n-\n-pathlib = require('path');\n-\n-existslib = process.version.split('.')[1] === '6' && require('path') || require('fs');\n-\n-apiTree = require('apitree');\n+var pathlib = require('path');\n+var fs = require('fs');\n+var apiTree = require('apitree');",
        "path": "lib/request/middleware/index.js",
        "position": 13,
        "original_position": 13,
        "commit_id": "18e2ef8df2f62b6ad34752d59de185a5268c952a",
        "original_commit_id": "18e2ef8df2f62b6ad34752d59de185a5268c952a",
        "user": {
            "login": "arxpoetica",
            "id": 111424,
            "node_id": "MDQ6VXNlcjExMTQyNA==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/111424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/arxpoetica",
            "html_url": "https://github.com/arxpoetica",
            "followers_url": "https://api.github.com/users/arxpoetica/followers",
            "following_url": "https://api.github.com/users/arxpoetica/following{/other_user}",
            "gists_url": "https://api.github.com/users/arxpoetica/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/arxpoetica/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/arxpoetica/subscriptions",
            "organizations_url": "https://api.github.com/users/arxpoetica/orgs",
            "repos_url": "https://api.github.com/users/arxpoetica/repos",
            "events_url": "https://api.github.com/users/arxpoetica/events{/privacy}",
            "received_events_url": "https://api.github.com/users/arxpoetica/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "cool\n",
        "created_at": "2015-03-26T01:28:00Z",
        "updated_at": "2015-03-26T01:28:00Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/517#discussion_r27182401",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/517",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27182401"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/517#discussion_r27182401"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/517"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/26903518",
        "pull_request_review_id": null,
        "id": 26903518,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2OTAzNTE4",
        "diff_hunk": "@@ -192,7 +196,8 @@ module.exports = function(ss,client,options){\n    * @returns {*}\n    */\n   function assetCSS(path, opts, cb) {\n-    return client.includes.css? ss.bundler.loadFile(path, 'css', opts, cb) : null;\n+    return client.includes.css? ss.bundler.loadFile(path, 'css', opts, cb,\n+      function(err) { return cb('/* couldn\\'t format ' + path + ' */'); }) : null;",
        "path": "lib/client/bundler/default.js",
        "position": null,
        "original_position": 33,
        "commit_id": "5a020477a9b2b731a8a88ac360d5c4264d8fbb26",
        "original_commit_id": "ad61b0276e798d76e62d999e0b43ab428af2263c",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Line is too long.<br>'err' is defined but never used.\n",
        "created_at": "2015-03-22T14:25:37Z",
        "updated_at": "2015-03-29T01:42:40Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/512#discussion_r26903518",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/512",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/26903518"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/512#discussion_r26903518"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/512"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/26903519",
        "pull_request_review_id": null,
        "id": 26903519,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2OTAzNTE5",
        "diff_hunk": "@@ -147,6 +147,8 @@ module.exports = function(ss,client,options){\n         output = ss.bundler.minifyJSFile(output, path);\n       }\n       return cb(output);\n+    }, function(err) {",
        "path": "lib/client/bundler/default.js",
        "position": null,
        "original_position": 13,
        "commit_id": "5a020477a9b2b731a8a88ac360d5c4264d8fbb26",
        "original_commit_id": "ad61b0276e798d76e62d999e0b43ab428af2263c",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'err' is defined but never used.\n",
        "created_at": "2015-03-22T14:25:37Z",
        "updated_at": "2015-03-29T01:42:40Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/512#discussion_r26903519",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/512",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/26903519"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/512#discussion_r26903519"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/512"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/26903520",
        "pull_request_review_id": null,
        "id": 26903520,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2OTAzNTIw",
        "diff_hunk": "@@ -163,6 +165,8 @@ module.exports = function(ss,client,options){\n         output = ss.bundler.minifyJSFile(output, path);\n       }\n       return cb(output);\n+    }, function(err) {",
        "path": "lib/client/bundler/default.js",
        "position": null,
        "original_position": 22,
        "commit_id": "5a020477a9b2b731a8a88ac360d5c4264d8fbb26",
        "original_commit_id": "ad61b0276e798d76e62d999e0b43ab428af2263c",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'err' is defined but never used.\n",
        "created_at": "2015-03-22T14:25:37Z",
        "updated_at": "2015-03-29T01:42:40Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/512#discussion_r26903520",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/512",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/26903520"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/512#discussion_r26903520"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/512"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/26903521",
        "pull_request_review_id": null,
        "id": 26903521,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2OTAzNTIx",
        "diff_hunk": "@@ -212,6 +217,8 @@ module.exports = function(ss,client,options){\n       }\n \n       cb(html);\n+    }, function(err) {",
        "path": "lib/client/bundler/default.js",
        "position": null,
        "original_position": 41,
        "commit_id": "5a020477a9b2b731a8a88ac360d5c4264d8fbb26",
        "original_commit_id": "ad61b0276e798d76e62d999e0b43ab428af2263c",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'err' is defined but never used.\n",
        "created_at": "2015-03-22T14:25:37Z",
        "updated_at": "2015-03-29T01:42:40Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/512#discussion_r26903521",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/512",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/26903521"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/512#discussion_r26903521"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/512"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/26917999",
        "pull_request_review_id": null,
        "id": 26917999,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2OTE3OTk5",
        "diff_hunk": "@@ -163,6 +165,8 @@ module.exports = function(ss,client,options){\n         output = ss.bundler.minifyJSFile(output, path);\n       }\n       return cb(output);\n+    }, function(err) {",
        "path": "lib/client/bundler/default.js",
        "position": null,
        "original_position": 22,
        "commit_id": "5a020477a9b2b731a8a88ac360d5c4264d8fbb26",
        "original_commit_id": "e87ac402f7517d13939d4370376185d51ec885a6",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'err' is defined but never used.\n",
        "created_at": "2015-03-23T07:43:14Z",
        "updated_at": "2015-03-29T01:42:40Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/512#discussion_r26917999",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/512",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/26917999"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/512#discussion_r26917999"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/512"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/26979483",
        "pull_request_review_id": null,
        "id": 26979483,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2OTc5NDgz",
        "diff_hunk": "@@ -268,6 +268,51 @@ NG_DOCS={\n     },\n     {\n       \"section\": \"api\",\n+      \"id\": \"client\",\n+      \"shortName\": \"client\",\n+      \"type\": \"service\",\n+      \"moduleName\": \"client\",\n+      \"shortDescription\": \"Client serving, bundling, development, building.\",\n+      \"keywords\": \"api building bundling client clients css defined development file html js module production require returned served service serving single socketstream\"",
        "path": "docs/js/docs-setup.js",
        "position": 18,
        "original_position": 9,
        "commit_id": "5a020477a9b2b731a8a88ac360d5c4264d8fbb26",
        "original_commit_id": "3009f4934b48120998c91ec5be3526337ed44ee7",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Line is too long.\n",
        "created_at": "2015-03-23T21:00:51Z",
        "updated_at": "2015-03-29T01:42:40Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/512#discussion_r26979483",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/512",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/26979483"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/512#discussion_r26979483"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/512"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/26979484",
        "pull_request_review_id": null,
        "id": 26979484,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2OTc5NDg0",
        "diff_hunk": "@@ -268,6 +268,51 @@ NG_DOCS={\n     },\n     {\n       \"section\": \"api\",\n+      \"id\": \"client\",\n+      \"shortName\": \"client\",\n+      \"type\": \"service\",\n+      \"moduleName\": \"client\",\n+      \"shortDescription\": \"Client serving, bundling, development, building.\",\n+      \"keywords\": \"api building bundling client clients css defined development file html js module production require returned served service serving single socketstream\"\n+    },\n+    {\n+      \"section\": \"api\",\n+      \"id\": \"client.define\",\n+      \"shortName\": \"client.define\",\n+      \"type\": \"service\",\n+      \"moduleName\": \"client\",\n+      \"shortDescription\": \"Define a client view to serve.\",\n+      \"keywords\": \"api client clientdefinition code css define definition function http logical my-view paths res route serve serveclient service ss tmpl view\"",
        "path": "docs/js/docs-setup.js",
        "position": 27,
        "original_position": 18,
        "commit_id": "5a020477a9b2b731a8a88ac360d5c4264d8fbb26",
        "original_commit_id": "3009f4934b48120998c91ec5be3526337ed44ee7",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Line is too long.\n",
        "created_at": "2015-03-23T21:00:51Z",
        "updated_at": "2015-03-29T01:42:40Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/512#discussion_r26979484",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/512",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/26979484"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/512#discussion_r26979484"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/512"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/26979485",
        "pull_request_review_id": null,
        "id": 26979485,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2OTc5NDg1",
        "diff_hunk": "@@ -268,6 +268,51 @@ NG_DOCS={\n     },\n     {\n       \"section\": \"api\",\n+      \"id\": \"client\",\n+      \"shortName\": \"client\",\n+      \"type\": \"service\",\n+      \"moduleName\": \"client\",\n+      \"shortDescription\": \"Client serving, bundling, development, building.\",\n+      \"keywords\": \"api building bundling client clients css defined development file html js module production require returned served service serving single socketstream\"\n+    },\n+    {\n+      \"section\": \"api\",\n+      \"id\": \"client.define\",\n+      \"shortName\": \"client.define\",\n+      \"type\": \"service\",\n+      \"moduleName\": \"client\",\n+      \"shortDescription\": \"Define a client view to serve.\",\n+      \"keywords\": \"api client clientdefinition code css define definition function http logical my-view paths res route serve serveclient service ss tmpl view\"\n+    },\n+    {\n+      \"section\": \"api\",\n+      \"id\": \"client.formatters:formatters\",\n+      \"shortName\": \"formatters\",\n+      \"type\": \"service\",\n+      \"moduleName\": \"client\",\n+      \"shortDescription\": \"Formatter registry\",\n+      \"keywords\": \"api client formatter formatters registry service\"\n+    },\n+    {\n+      \"section\": \"api\",\n+      \"id\": \"client.formatters:formatters\",\n+      \"shortName\": \"formatters\",\n+      \"type\": \"service\",\n+      \"moduleName\": \"client\",\n+      \"shortDescription\": \"This is for the module returned by require(&#39;socketstream&#39;).client.formatters.\",",
        "path": "docs/js/docs-setup.js",
        "position": 44,
        "original_position": 35,
        "commit_id": "5a020477a9b2b731a8a88ac360d5c4264d8fbb26",
        "original_commit_id": "3009f4934b48120998c91ec5be3526337ed44ee7",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Line is too long.\n",
        "created_at": "2015-03-23T21:00:52Z",
        "updated_at": "2015-03-29T01:42:40Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/512#discussion_r26979485",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/512",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/26979485"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/512#discussion_r26979485"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/512"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/26979486",
        "pull_request_review_id": null,
        "id": 26979486,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2OTc5NDg2",
        "diff_hunk": "@@ -268,6 +268,51 @@ NG_DOCS={\n     },\n     {\n       \"section\": \"api\",\n+      \"id\": \"client\",\n+      \"shortName\": \"client\",\n+      \"type\": \"service\",\n+      \"moduleName\": \"client\",\n+      \"shortDescription\": \"Client serving, bundling, development, building.\",\n+      \"keywords\": \"api building bundling client clients css defined development file html js module production require returned served service serving single socketstream\"\n+    },\n+    {\n+      \"section\": \"api\",\n+      \"id\": \"client.define\",\n+      \"shortName\": \"client.define\",\n+      \"type\": \"service\",\n+      \"moduleName\": \"client\",\n+      \"shortDescription\": \"Define a client view to serve.\",\n+      \"keywords\": \"api client clientdefinition code css define definition function http logical my-view paths res route serve serveclient service ss tmpl view\"\n+    },\n+    {\n+      \"section\": \"api\",\n+      \"id\": \"client.formatters:formatters\",\n+      \"shortName\": \"formatters\",\n+      \"type\": \"service\",\n+      \"moduleName\": \"client\",\n+      \"shortDescription\": \"Formatter registry\",\n+      \"keywords\": \"api client formatter formatters registry service\"\n+    },\n+    {\n+      \"section\": \"api\",\n+      \"id\": \"client.formatters:formatters\",\n+      \"shortName\": \"formatters\",\n+      \"type\": \"service\",\n+      \"moduleName\": \"client\",\n+      \"shortDescription\": \"This is for the module returned by require(&#39;socketstream&#39;).client.formatters.\",\n+      \"keywords\": \"add api asset client config configuring define formatter formatters method module nameormodule object parameters rendering require returned service socketstream\"",
        "path": "docs/js/docs-setup.js",
        "position": 45,
        "original_position": 36,
        "commit_id": "5a020477a9b2b731a8a88ac360d5c4264d8fbb26",
        "original_commit_id": "3009f4934b48120998c91ec5be3526337ed44ee7",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Line is too long.\n",
        "created_at": "2015-03-23T21:00:52Z",
        "updated_at": "2015-03-29T01:42:40Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/512#discussion_r26979486",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/512",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/26979486"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/512#discussion_r26979486"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/512"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/26979487",
        "pull_request_review_id": null,
        "id": 26979487,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2OTc5NDg3",
        "diff_hunk": "@@ -268,6 +268,51 @@ NG_DOCS={\n     },\n     {\n       \"section\": \"api\",\n+      \"id\": \"client\",\n+      \"shortName\": \"client\",\n+      \"type\": \"service\",\n+      \"moduleName\": \"client\",\n+      \"shortDescription\": \"Client serving, bundling, development, building.\",\n+      \"keywords\": \"api building bundling client clients css defined development file html js module production require returned served service serving single socketstream\"\n+    },\n+    {\n+      \"section\": \"api\",\n+      \"id\": \"client.define\",\n+      \"shortName\": \"client.define\",\n+      \"type\": \"service\",\n+      \"moduleName\": \"client\",\n+      \"shortDescription\": \"Define a client view to serve.\",\n+      \"keywords\": \"api client clientdefinition code css define definition function http logical my-view paths res route serve serveclient service ss tmpl view\"\n+    },\n+    {\n+      \"section\": \"api\",\n+      \"id\": \"client.formatters:formatters\",\n+      \"shortName\": \"formatters\",\n+      \"type\": \"service\",\n+      \"moduleName\": \"client\",\n+      \"shortDescription\": \"Formatter registry\",\n+      \"keywords\": \"api client formatter formatters registry service\"\n+    },\n+    {\n+      \"section\": \"api\",\n+      \"id\": \"client.formatters:formatters\",\n+      \"shortName\": \"formatters\",\n+      \"type\": \"service\",\n+      \"moduleName\": \"client\",\n+      \"shortDescription\": \"This is for the module returned by require(&#39;socketstream&#39;).client.formatters.\",\n+      \"keywords\": \"add api asset client config configuring define formatter formatters method module nameormodule object parameters rendering require returned service socketstream\"\n+    },\n+    {\n+      \"section\": \"api\",\n+      \"id\": \"client.templateEngine:templateEngine\",\n+      \"shortName\": \"templateEngine\",\n+      \"type\": \"service\",\n+      \"moduleName\": \"client\",\n+      \"shortDescription\": \"This is for the module returned by require(&#39;socketstream&#39;).client.templateEngine.\",",
        "path": "docs/js/docs-setup.js",
        "position": 53,
        "original_position": 44,
        "commit_id": "5a020477a9b2b731a8a88ac360d5c4264d8fbb26",
        "original_commit_id": "3009f4934b48120998c91ec5be3526337ed44ee7",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Line is too long.\n",
        "created_at": "2015-03-23T21:00:52Z",
        "updated_at": "2015-03-29T01:42:40Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/512#discussion_r26979487",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/512",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/26979487"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/512#discussion_r26979487"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/512"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/26979488",
        "pull_request_review_id": null,
        "id": 26979488,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2OTc5NDg4",
        "diff_hunk": "@@ -268,6 +268,51 @@ NG_DOCS={\n     },\n     {\n       \"section\": \"api\",\n+      \"id\": \"client\",\n+      \"shortName\": \"client\",\n+      \"type\": \"service\",\n+      \"moduleName\": \"client\",\n+      \"shortDescription\": \"Client serving, bundling, development, building.\",\n+      \"keywords\": \"api building bundling client clients css defined development file html js module production require returned served service serving single socketstream\"\n+    },\n+    {\n+      \"section\": \"api\",\n+      \"id\": \"client.define\",\n+      \"shortName\": \"client.define\",\n+      \"type\": \"service\",\n+      \"moduleName\": \"client\",\n+      \"shortDescription\": \"Define a client view to serve.\",\n+      \"keywords\": \"api client clientdefinition code css define definition function http logical my-view paths res route serve serveclient service ss tmpl view\"\n+    },\n+    {\n+      \"section\": \"api\",\n+      \"id\": \"client.formatters:formatters\",\n+      \"shortName\": \"formatters\",\n+      \"type\": \"service\",\n+      \"moduleName\": \"client\",\n+      \"shortDescription\": \"Formatter registry\",\n+      \"keywords\": \"api client formatter formatters registry service\"\n+    },\n+    {\n+      \"section\": \"api\",\n+      \"id\": \"client.formatters:formatters\",\n+      \"shortName\": \"formatters\",\n+      \"type\": \"service\",\n+      \"moduleName\": \"client\",\n+      \"shortDescription\": \"This is for the module returned by require(&#39;socketstream&#39;).client.formatters.\",\n+      \"keywords\": \"add api asset client config configuring define formatter formatters method module nameormodule object parameters rendering require returned service socketstream\"\n+    },\n+    {\n+      \"section\": \"api\",\n+      \"id\": \"client.templateEngine:templateEngine\",\n+      \"shortName\": \"templateEngine\",\n+      \"type\": \"service\",\n+      \"moduleName\": \"client\",\n+      \"shortDescription\": \"This is for the module returned by require(&#39;socketstream&#39;).client.templateEngine.\",\n+      \"keywords\": \"api built-in bundler callback cb client config default directories dirs engine engines enging entries error files function generate indicated instance making markup module object output passed receive render require returned service socketstream string template templateengine templates templating\"",
        "path": "docs/js/docs-setup.js",
        "position": null,
        "original_position": 45,
        "commit_id": "5a020477a9b2b731a8a88ac360d5c4264d8fbb26",
        "original_commit_id": "3009f4934b48120998c91ec5be3526337ed44ee7",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Line is too long.\n",
        "created_at": "2015-03-23T21:00:52Z",
        "updated_at": "2015-03-29T01:42:40Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/512#discussion_r26979488",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/512",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/26979488"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/512#discussion_r26979488"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/512"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/26979489",
        "pull_request_review_id": null,
        "id": 26979489,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2OTc5NDg5",
        "diff_hunk": "@@ -326,8 +371,8 @@ NG_DOCS={\n       \"shortName\": \"client\",\n       \"type\": \"service\",\n       \"moduleName\": \"ss\",\n-      \"shortDescription\": \"Client serving, bundling, development, building.\",\n-      \"keywords\": \"add allow allows api assets building bundling client clients code coffee compress content css defined development file flags format function html js lib library libs module options production require send served service serving single ss system type\"\n+      \"shortDescription\": \"Allow other libs to send assets to the client\",\n+      \"keywords\": \"add allow allows api assets client code coffee compress content flags format function js lib library libs module options require send service ss system type\"",
        "path": "docs/js/docs-setup.js",
        "position": 68,
        "original_position": 59,
        "commit_id": "5a020477a9b2b731a8a88ac360d5c4264d8fbb26",
        "original_commit_id": "3009f4934b48120998c91ec5be3526337ed44ee7",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Line is too long.\n",
        "created_at": "2015-03-23T21:00:53Z",
        "updated_at": "2015-03-29T01:42:40Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/512#discussion_r26979489",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/512",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/26979489"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/512#discussion_r26979489"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/512"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/26979490",
        "pull_request_review_id": null,
        "id": 26979490,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2OTc5NDkw",
        "diff_hunk": "@@ -344,7 +389,7 @@ NG_DOCS={\n       \"type\": \"service\",\n       \"moduleName\": \"ss\",\n       \"shortDescription\": \"Contains method stubs for logging to console (by default) or\",\n-      \"keywords\": \"api assigning choose console debug default error fairly function happened info informed keeping level log logging method override parameters provider require service socketstream ss stubs sysadmin takes time trivial unexpected var wakeup warn winston\"\n+      \"keywords\": \"api apply arguments assigning calls choose console debug default error fairly function happened info informed keeping level log logging method override parameters plugins provider require service socketstream ss stubs switch sysadmin takes time trace tracing trivial unexpected var wakeup warn winston\"",
        "path": "docs/js/docs-setup.js",
        "position": 77,
        "original_position": 68,
        "commit_id": "5a020477a9b2b731a8a88ac360d5c4264d8fbb26",
        "original_commit_id": "3009f4934b48120998c91ec5be3526337ed44ee7",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Line is too long.\n",
        "created_at": "2015-03-23T21:00:53Z",
        "updated_at": "2015-03-29T01:42:40Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/512#discussion_r26979490",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/512",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/26979490"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/512#discussion_r26979490"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/512"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/26998781",
        "pull_request_review_id": null,
        "id": 26998781,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2OTk4Nzgx",
        "diff_hunk": "@@ -344,7 +389,7 @@ NG_DOCS={\n       \"type\": \"service\",\n       \"moduleName\": \"ss\",\n       \"shortDescription\": \"Contains method stubs for logging to console (by default) or\",\n-      \"keywords\": \"api assigning choose console debug default error fairly function happened info informed keeping level log logging method override parameters provider require service socketstream ss stubs sysadmin takes time trivial unexpected var wakeup warn winston\"\n+      \"keywords\": \"api apply arguments assigning calls choose console debug default error fairly function happened info informed keeping level log logging method override parameters plugins provider require service socketstream ss stubs switch sysadmin takes time trace tracing trivial unexpected var wakeup warn winston\"",
        "path": "docs/js/docs-setup.js",
        "position": 77,
        "original_position": 68,
        "commit_id": "5a020477a9b2b731a8a88ac360d5c4264d8fbb26",
        "original_commit_id": "3009f4934b48120998c91ec5be3526337ed44ee7",
        "user": {
            "login": "arxpoetica",
            "id": 111424,
            "node_id": "MDQ6VXNlcjExMTQyNA==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/111424?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/arxpoetica",
            "html_url": "https://github.com/arxpoetica",
            "followers_url": "https://api.github.com/users/arxpoetica/followers",
            "following_url": "https://api.github.com/users/arxpoetica/following{/other_user}",
            "gists_url": "https://api.github.com/users/arxpoetica/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/arxpoetica/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/arxpoetica/subscriptions",
            "organizations_url": "https://api.github.com/users/arxpoetica/orgs",
            "repos_url": "https://api.github.com/users/arxpoetica/repos",
            "events_url": "https://api.github.com/users/arxpoetica/events{/privacy}",
            "received_events_url": "https://api.github.com/users/arxpoetica/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "^^^ are we really going to be hounded by lines too long? :stuck_out_tongue: \n",
        "created_at": "2015-03-24T02:12:03Z",
        "updated_at": "2015-03-29T01:42:40Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/512#discussion_r26998781",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/512",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/26998781"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/512#discussion_r26998781"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/512"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27061815",
        "pull_request_review_id": null,
        "id": 27061815,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MDYxODE1",
        "diff_hunk": "@@ -163,6 +165,8 @@ module.exports = function(ss,client,options){\n         output = ss.bundler.minifyJSFile(output, path);\n       }\n       return cb(output);\n+    }, function(err) {",
        "path": "lib/client/bundler/default.js",
        "position": null,
        "original_position": 22,
        "commit_id": "5a020477a9b2b731a8a88ac360d5c4264d8fbb26",
        "original_commit_id": "c14129f172b940fda7d908aa94fe463e6039f6cc",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'err' is defined but never used.\n",
        "created_at": "2015-03-24T19:01:47Z",
        "updated_at": "2015-03-29T01:42:40Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/512#discussion_r27061815",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/512",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27061815"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/512#discussion_r27061815"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/512"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27067308",
        "pull_request_review_id": null,
        "id": 27067308,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MDY3MzA4",
        "diff_hunk": "@@ -163,6 +165,8 @@ module.exports = function(ss,client,options){\n         output = ss.bundler.minifyJSFile(output, path);\n       }\n       return cb(output);\n+    }, function(err) {",
        "path": "lib/client/bundler/default.js",
        "position": null,
        "original_position": 22,
        "commit_id": "5a020477a9b2b731a8a88ac360d5c4264d8fbb26",
        "original_commit_id": "9efab599757153b03829ec05317ec444761e7ced",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'err' is defined but never used.\n",
        "created_at": "2015-03-24T20:05:24Z",
        "updated_at": "2015-03-29T01:42:40Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/512#discussion_r27067308",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/512",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27067308"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/512#discussion_r27067308"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/512"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27169877",
        "pull_request_review_id": null,
        "id": 27169877,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MTY5ODc3",
        "diff_hunk": "@@ -163,6 +165,8 @@ module.exports = function(ss,client,options){\n         output = ss.bundler.minifyJSFile(output, path);\n       }\n       return cb(output);\n+    }, function(err) {",
        "path": "lib/client/bundler/default.js",
        "position": null,
        "original_position": 22,
        "commit_id": "5a020477a9b2b731a8a88ac360d5c4264d8fbb26",
        "original_commit_id": "4f9cb6a31aa1ce4f39b5aedc1a3f98cbaa15e21f",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'err' is defined but never used.\n",
        "created_at": "2015-03-25T21:48:44Z",
        "updated_at": "2015-03-29T01:42:40Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/512#discussion_r27169877",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/512",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27169877"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/512#discussion_r27169877"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/512"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27345506",
        "pull_request_review_id": null,
        "id": 27345506,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MzQ1NTA2",
        "diff_hunk": "@@ -255,7 +255,7 @@ NG_DOCS={\n       \"type\": \"service\",\n       \"moduleName\": \"bundler\",\n       \"shortDescription\": \"The default bundler of HTML, CSS &amp; JS\",\n-      \"keywords\": \"api asset assetcss assethtml assetjs assetloader assetstart assettype assetworker bundler client code collection config css default define depending directory entries entry execution functions html implementation includes initcode js libs list load loader logical method module modules output pack registered registration relative require resource return script service start starting system systemassets systemmodule tominifiedcss tominifiedjs type view worker wrapcode\"\n+      \"keywords\": \"add api arguments array asset assetcss assethtml assetjs assetloader assets assetstart assettype assetworker attempt bundle bundler client collection config content css default define depending describes directory entries entry extension file functions html implementation importedfrom includes initcode js lib libs list load loader method module modules multiple names output pack pre-loaded production pulled relative require resource return service source special start system systemassets systemmodule tmpl tominifiedcss tominifiedjs type view worker\"",
        "path": "docs/js/docs-setup.js",
        "position": 5,
        "original_position": 5,
        "commit_id": "5a020477a9b2b731a8a88ac360d5c4264d8fbb26",
        "original_commit_id": "498d9c861a0b861a8380ba10b15ed9181eedd470",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Line is too long.\n",
        "created_at": "2015-03-28T14:40:45Z",
        "updated_at": "2015-03-29T01:42:40Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/512#discussion_r27345506",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/512",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27345506"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/512#discussion_r27345506"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/512"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27345507",
        "pull_request_review_id": null,
        "id": 27345507,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MzQ1NTA3",
        "diff_hunk": "@@ -268,6 +268,51 @@ NG_DOCS={\n     },\n     {\n       \"section\": \"api\",\n+      \"id\": \"client\",\n+      \"shortName\": \"client\",\n+      \"type\": \"service\",\n+      \"moduleName\": \"client\",\n+      \"shortDescription\": \"Client serving, bundling, development, building.\",\n+      \"keywords\": \"api building bundling client clients css defined development file html js module production require returned served service serving single socketstream\"\n+    },\n+    {\n+      \"section\": \"api\",\n+      \"id\": \"client.define\",\n+      \"shortName\": \"client.define\",\n+      \"type\": \"service\",\n+      \"moduleName\": \"client\",\n+      \"shortDescription\": \"Define a client view to serve.\",\n+      \"keywords\": \"api client clientdefinition code css define definition function http logical my-view paths res route serve serveclient service ss tmpl view\"\n+    },\n+    {\n+      \"section\": \"api\",\n+      \"id\": \"client.formatters:formatters\",\n+      \"shortName\": \"formatters\",\n+      \"type\": \"service\",\n+      \"moduleName\": \"client\",\n+      \"shortDescription\": \"Formatter registry\",\n+      \"keywords\": \"api client formatter formatters registry service\"\n+    },\n+    {\n+      \"section\": \"api\",\n+      \"id\": \"client.formatters:formatters\",\n+      \"shortName\": \"formatters\",\n+      \"type\": \"service\",\n+      \"moduleName\": \"client\",\n+      \"shortDescription\": \"This is for the module returned by require(&#39;socketstream&#39;).client.formatters.\",\n+      \"keywords\": \"add api asset client config configuring define formatter formatters method module nameormodule object parameters rendering require returned service socketstream\"\n+    },\n+    {\n+      \"section\": \"api\",\n+      \"id\": \"client.templateEngine:templateEngine\",\n+      \"shortName\": \"templateEngine\",\n+      \"type\": \"service\",\n+      \"moduleName\": \"client\",\n+      \"shortDescription\": \"This is for the module returned by require(&#39;socketstream&#39;).client.templateEngine.\",\n+      \"keywords\": \"angular api built-in bundler callback cb client config custom custom-engine default directories dirs ember engine engines enging entries error files function generate indicated instance making markup module object output passed receive render require returned service socketstream ss string template templateengine templates templating\"",
        "path": "docs/js/docs-setup.js",
        "position": 54,
        "original_position": 54,
        "commit_id": "5a020477a9b2b731a8a88ac360d5c4264d8fbb26",
        "original_commit_id": "498d9c861a0b861a8380ba10b15ed9181eedd470",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Line is too long.\n",
        "created_at": "2015-03-28T14:40:45Z",
        "updated_at": "2015-03-29T01:42:40Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/512#discussion_r27345507",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/512",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27345507"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/512#discussion_r27345507"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/512"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27345508",
        "pull_request_review_id": null,
        "id": 27345508,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MzQ1NTA4",
        "diff_hunk": "@@ -99,122 +100,85 @@ module.exports = function(ss,client,options){\n \n   /**\n    * @ngdoc method\n-   * @name bundler.default:default#assetLoader\n+   * @name bundler.default:default#system\n    * @methodOf bundler.default:default\n    * @function\n    * @description\n-   * Return entry for the JS loader depending on the includes.system client config.\n-   *\n-   * @returns {AssetEntry} Loader resource\n-   */\n-  function assetLoader() {\n-    return ss.bundler.systemLibs();\n-  }\n-\n-  /**\n-   * @ngdoc method\n-   * @name bundler.default:default#systemModule\n-   * @methodOf bundler.default:default\n-   * @function\n-   * @description\n-   * Return the resource for a registered system module by the given name. It uses\n-   * the default wrapCode for module registration with require.\n-   *\n-   * @param {String} name Logical Module Name\n-   * @returns {AssetEntry} Module resource\n-   */\n-  function systemModule(name) {\n-    switch(name) {\n-      //case \"eventemitter2\":\n-      //case \"socketstream\":\n-      default:\n-        return ss.bundler.systemModule(name)\n-    }\n-  }\n-\n-  /**\n-   *\n-   * @param path\n-   * @param opts\n-   * @param cb\n-   * @returns {*}\n-   */\n-  function assetJS(path, opts, cb) {\n-    return ss.bundler.loadFile(path, 'js', opts, function(output) {\n-      //TODO with options compress saved to avoid double compression\n-      output = ss.bundler.wrapCode(output, path, opts.pathPrefix);\n-      if (opts.compress && path.indexOf('.min') === -1) {\n-        output = ss.bundler.minifyJSFile(output, path);\n-      }\n-      return cb(output);\n-    });\n-  }\n-\n-  /**\n+   * Return entries for the loader/start/module depending on includes.system client config and system assets.\n+   * Multiple arguments will attempt to add module for the name.\n+   * Special module names are 'loader' and 'start'.\n    *\n-   * @param path\n-   * @param opts\n-   * @param cb\n-   * @returns {*}\n+   * @returns {AssetEntry} Resource entries array\n    */\n-  function assetWorker(path, opts, cb) {\n-    return ss.bundler.loadFile(path, 'js', opts, function(output) {\n-      if (opts.compress) {\n-        output = ss.bundler.minifyJSFile(output, path);\n+  function module(name) {",
        "path": "lib/client/bundler/default.js",
        "position": null,
        "original_position": 110,
        "commit_id": "5a020477a9b2b731a8a88ac360d5c4264d8fbb26",
        "original_commit_id": "498d9c861a0b861a8380ba10b15ed9181eedd470",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'module' is already defined.<br>'module' is defined but never used.\n",
        "created_at": "2015-03-28T14:40:45Z",
        "updated_at": "2015-03-29T01:42:40Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/512#discussion_r27345508",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/512",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27345508"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/512#discussion_r27345508"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/512"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27345509",
        "pull_request_review_id": null,
        "id": 27345509,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MzQ1NTA5",
        "diff_hunk": "@@ -99,122 +100,85 @@ module.exports = function(ss,client,options){\n \n   /**\n    * @ngdoc method\n-   * @name bundler.default:default#assetLoader\n+   * @name bundler.default:default#system\n    * @methodOf bundler.default:default\n    * @function\n    * @description\n-   * Return entry for the JS loader depending on the includes.system client config.\n-   *\n-   * @returns {AssetEntry} Loader resource\n-   */\n-  function assetLoader() {\n-    return ss.bundler.systemLibs();\n-  }\n-\n-  /**\n-   * @ngdoc method\n-   * @name bundler.default:default#systemModule\n-   * @methodOf bundler.default:default\n-   * @function\n-   * @description\n-   * Return the resource for a registered system module by the given name. It uses\n-   * the default wrapCode for module registration with require.\n-   *\n-   * @param {String} name Logical Module Name\n-   * @returns {AssetEntry} Module resource\n-   */\n-  function systemModule(name) {\n-    switch(name) {\n-      //case \"eventemitter2\":\n-      //case \"socketstream\":\n-      default:\n-        return ss.bundler.systemModule(name)\n-    }\n-  }\n-\n-  /**\n-   *\n-   * @param path\n-   * @param opts\n-   * @param cb\n-   * @returns {*}\n-   */\n-  function assetJS(path, opts, cb) {\n-    return ss.bundler.loadFile(path, 'js', opts, function(output) {\n-      //TODO with options compress saved to avoid double compression\n-      output = ss.bundler.wrapCode(output, path, opts.pathPrefix);\n-      if (opts.compress && path.indexOf('.min') === -1) {\n-        output = ss.bundler.minifyJSFile(output, path);\n-      }\n-      return cb(output);\n-    });\n-  }\n-\n-  /**\n+   * Return entries for the loader/start/module depending on includes.system client config and system assets.\n+   * Multiple arguments will attempt to add module for the name.\n+   * Special module names are 'loader' and 'start'.\n    *\n-   * @param path\n-   * @param opts\n-   * @param cb\n-   * @returns {*}\n+   * @returns {AssetEntry} Resource entries array\n    */\n-  function assetWorker(path, opts, cb) {\n-    return ss.bundler.loadFile(path, 'js', opts, function(output) {\n-      if (opts.compress) {\n-        output = ss.bundler.minifyJSFile(output, path);\n+  function module(name) {\n+    var entries = [];\n+\n+    for(var i= 0,name; name = arguments[i]; ++i) {",
        "path": "lib/client/bundler/default.js",
        "position": null,
        "original_position": 113,
        "commit_id": "5a020477a9b2b731a8a88ac360d5c4264d8fbb26",
        "original_commit_id": "498d9c861a0b861a8380ba10b15ed9181eedd470",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'name' is already defined.<br>Expected a conditional expression and instead saw an assignment.\n",
        "created_at": "2015-03-28T14:40:46Z",
        "updated_at": "2015-03-29T01:42:40Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/512#discussion_r27345509",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/512",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27345509"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/512#discussion_r27345509"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/512"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27345510",
        "pull_request_review_id": null,
        "id": 27345510,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MzQ1NTEw",
        "diff_hunk": "@@ -99,122 +100,85 @@ module.exports = function(ss,client,options){\n \n   /**\n    * @ngdoc method\n-   * @name bundler.default:default#assetLoader\n+   * @name bundler.default:default#system\n    * @methodOf bundler.default:default\n    * @function\n    * @description\n-   * Return entry for the JS loader depending on the includes.system client config.\n-   *\n-   * @returns {AssetEntry} Loader resource\n-   */\n-  function assetLoader() {\n-    return ss.bundler.systemLibs();\n-  }\n-\n-  /**\n-   * @ngdoc method\n-   * @name bundler.default:default#systemModule\n-   * @methodOf bundler.default:default\n-   * @function\n-   * @description\n-   * Return the resource for a registered system module by the given name. It uses\n-   * the default wrapCode for module registration with require.\n-   *\n-   * @param {String} name Logical Module Name\n-   * @returns {AssetEntry} Module resource\n-   */\n-  function systemModule(name) {\n-    switch(name) {\n-      //case \"eventemitter2\":\n-      //case \"socketstream\":\n-      default:\n-        return ss.bundler.systemModule(name)\n-    }\n-  }\n-\n-  /**\n-   *\n-   * @param path\n-   * @param opts\n-   * @param cb\n-   * @returns {*}\n-   */\n-  function assetJS(path, opts, cb) {\n-    return ss.bundler.loadFile(path, 'js', opts, function(output) {\n-      //TODO with options compress saved to avoid double compression\n-      output = ss.bundler.wrapCode(output, path, opts.pathPrefix);\n-      if (opts.compress && path.indexOf('.min') === -1) {\n-        output = ss.bundler.minifyJSFile(output, path);\n-      }\n-      return cb(output);\n-    });\n-  }\n-\n-  /**\n+   * Return entries for the loader/start/module depending on includes.system client config and system assets.\n+   * Multiple arguments will attempt to add module for the name.\n+   * Special module names are 'loader' and 'start'.\n    *\n-   * @param path\n-   * @param opts\n-   * @param cb\n-   * @returns {*}\n+   * @returns {AssetEntry} Resource entries array\n    */\n-  function assetWorker(path, opts, cb) {\n-    return ss.bundler.loadFile(path, 'js', opts, function(output) {\n-      if (opts.compress) {\n-        output = ss.bundler.minifyJSFile(output, path);\n+  function module(name) {\n+    var entries = [];\n+\n+    for(var i= 0,name; name = arguments[i]; ++i) {\n+      switch(name) {\n+        case 'loader':\n+          entries.push(ss.bundler.systemLibs());\n+          break;\n+        case 'start':\n+          entries = entries.concat(ss.bundler.constants(client));\n+          if (client.includes.initCode) {\n+            entries = entries.concat(ss.bundler.startCode(client));\n+          }\n+          break;\n+\n+        //case \"eventemitter2\":\n+        //case \"socketstream\":\n+        default:\n+          entries.push(ss.bundler.systemModule(name));\n+          break;\n       }\n-      return cb(output);\n-    });\n-  }\n-\n-  /**\n-   * @ngdoc method\n-   * @name bundler.default:default#assetStart\n-   * @methodOf bundler.default:default\n-   * @function\n-   * @description\n-   * Return the resource for starting the view. It is code for immediate execution at the end of the page.\n-   *\n-   * @returns {AssetEntry} Start Script resource\n-   */\n-  function assetStart() {\n-    var assets = ss.bundler.constants(client) ;\n-    if (client.includes.initCode) {\n-      assets = assets.concat( ss.bundler.startCode(client) );\n     }\n-    return  assets;\n-  }\n \n-  /**\n-   *\n-   * @param path\n-   * @param opts\n-   * @param cb\n-   * @returns {*}\n-   */\n-  function assetCSS(path, opts, cb) {\n-    return client.includes.css? ss.bundler.loadFile(path, 'css', opts, cb) : null;\n+    return entries;\n   }\n \n-  /**\n-   *\n-   * @param path\n-   * @param opts\n-   * @param cb\n-   * @returns {*}\n-   */\n-  function assetHTML(path, opts, cb) {\n-    return ss.bundler.loadFile(path, 'html', opts, function(html) {\n-\n-      // If passing optional tails for main view\n-      if (opts && opts.tail && !options.startInBundle) {\n-        html = html.replace('</body>', opts.tail + '</body>');\n-        html = html.replace('</BODY>', opts.tail + '</BODY>');\n-      }\n-\n-      cb(html);\n-    });\n+  function asset(entry, opts, cb) {\n+    ss.bundler.loadFile(entry, opts, null,\n+      function(output) {\n+        switch(entry.bundle) {\n+          case 'html':\n+            // If passing optional tails for main view\n+            if (opts && opts.tail && !options.startInBundle) {\n+              output = output.replace('</body>', opts.tail + '</body>');\n+              output = output.replace('</BODY>', opts.tail + '</BODY>');\n+            }\n+            return cb(output);\n+\n+          case 'css':\n+            return cb( client.includes.css? output:'');\n+          case 'worker':\n+            //TODO\n+            if (opts.compress && path.indexOf('.min') === -1) {",
        "path": "lib/client/bundler/default.js",
        "position": null,
        "original_position": 199,
        "commit_id": "5a020477a9b2b731a8a88ac360d5c4264d8fbb26",
        "original_commit_id": "498d9c861a0b861a8380ba10b15ed9181eedd470",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'path' is not defined.\n",
        "created_at": "2015-03-28T14:40:46Z",
        "updated_at": "2015-03-29T01:42:40Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/512#discussion_r27345510",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/512",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27345510"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/512#discussion_r27345510"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/512"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27349102",
        "pull_request_review_id": null,
        "id": 27349102,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MzQ5MTAy",
        "diff_hunk": "@@ -99,122 +100,85 @@ module.exports = function(ss,client,options){\n \n   /**\n    * @ngdoc method\n-   * @name bundler.default:default#assetLoader\n+   * @name bundler.default:default#system\n    * @methodOf bundler.default:default\n    * @function\n    * @description\n-   * Return entry for the JS loader depending on the includes.system client config.\n-   *\n-   * @returns {AssetEntry} Loader resource\n-   */\n-  function assetLoader() {\n-    return ss.bundler.systemLibs();\n-  }\n-\n-  /**\n-   * @ngdoc method\n-   * @name bundler.default:default#systemModule\n-   * @methodOf bundler.default:default\n-   * @function\n-   * @description\n-   * Return the resource for a registered system module by the given name. It uses\n-   * the default wrapCode for module registration with require.\n-   *\n-   * @param {String} name Logical Module Name\n-   * @returns {AssetEntry} Module resource\n-   */\n-  function systemModule(name) {\n-    switch(name) {\n-      //case \"eventemitter2\":\n-      //case \"socketstream\":\n-      default:\n-        return ss.bundler.systemModule(name)\n-    }\n-  }\n-\n-  /**\n-   *\n-   * @param path\n-   * @param opts\n-   * @param cb\n-   * @returns {*}\n-   */\n-  function assetJS(path, opts, cb) {\n-    return ss.bundler.loadFile(path, 'js', opts, function(output) {\n-      //TODO with options compress saved to avoid double compression\n-      output = ss.bundler.wrapCode(output, path, opts.pathPrefix);\n-      if (opts.compress && path.indexOf('.min') === -1) {\n-        output = ss.bundler.minifyJSFile(output, path);\n-      }\n-      return cb(output);\n-    });\n-  }\n-\n-  /**\n+   * Return entries for the loader/start/module depending on includes.system client config and system assets.\n+   * Multiple arguments will attempt to add module for the name.\n+   * Special module names are 'loader' and 'start'.\n    *\n-   * @param path\n-   * @param opts\n-   * @param cb\n-   * @returns {*}\n+   * @returns {AssetEntry} Resource entries array\n    */\n-  function assetWorker(path, opts, cb) {\n-    return ss.bundler.loadFile(path, 'js', opts, function(output) {\n-      if (opts.compress) {\n-        output = ss.bundler.minifyJSFile(output, path);\n+  function systemModule(first_name) {",
        "path": "lib/client/bundler/default.js",
        "position": 110,
        "original_position": 110,
        "commit_id": "5a020477a9b2b731a8a88ac360d5c4264d8fbb26",
        "original_commit_id": "ebf835aef3e0e4bc9473fb9c84307996e42ca10b",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Identifier 'first_name' is not in camel case.<br>'first_name' is defined but never used.\n",
        "created_at": "2015-03-28T21:59:44Z",
        "updated_at": "2015-03-29T01:42:40Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/512#discussion_r27349102",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/512",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27349102"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/512#discussion_r27349102"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/512"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27349103",
        "pull_request_review_id": null,
        "id": 27349103,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MzQ5MTAz",
        "diff_hunk": "@@ -99,122 +100,85 @@ module.exports = function(ss,client,options){\n \n   /**\n    * @ngdoc method\n-   * @name bundler.default:default#assetLoader\n+   * @name bundler.default:default#system\n    * @methodOf bundler.default:default\n    * @function\n    * @description\n-   * Return entry for the JS loader depending on the includes.system client config.\n-   *\n-   * @returns {AssetEntry} Loader resource\n-   */\n-  function assetLoader() {\n-    return ss.bundler.systemLibs();\n-  }\n-\n-  /**\n-   * @ngdoc method\n-   * @name bundler.default:default#systemModule\n-   * @methodOf bundler.default:default\n-   * @function\n-   * @description\n-   * Return the resource for a registered system module by the given name. It uses\n-   * the default wrapCode for module registration with require.\n-   *\n-   * @param {String} name Logical Module Name\n-   * @returns {AssetEntry} Module resource\n-   */\n-  function systemModule(name) {\n-    switch(name) {\n-      //case \"eventemitter2\":\n-      //case \"socketstream\":\n-      default:\n-        return ss.bundler.systemModule(name)\n-    }\n-  }\n-\n-  /**\n-   *\n-   * @param path\n-   * @param opts\n-   * @param cb\n-   * @returns {*}\n-   */\n-  function assetJS(path, opts, cb) {\n-    return ss.bundler.loadFile(path, 'js', opts, function(output) {\n-      //TODO with options compress saved to avoid double compression\n-      output = ss.bundler.wrapCode(output, path, opts.pathPrefix);\n-      if (opts.compress && path.indexOf('.min') === -1) {\n-        output = ss.bundler.minifyJSFile(output, path);\n-      }\n-      return cb(output);\n-    });\n-  }\n-\n-  /**\n+   * Return entries for the loader/start/module depending on includes.system client config and system assets.\n+   * Multiple arguments will attempt to add module for the name.\n+   * Special module names are 'loader' and 'start'.\n    *\n-   * @param path\n-   * @param opts\n-   * @param cb\n-   * @returns {*}\n+   * @returns {AssetEntry} Resource entries array\n    */\n-  function assetWorker(path, opts, cb) {\n-    return ss.bundler.loadFile(path, 'js', opts, function(output) {\n-      if (opts.compress) {\n-        output = ss.bundler.minifyJSFile(output, path);\n+  function systemModule(first_name) {\n+    var entries = [];\n+\n+    for(var i= 0,name; name = arguments[i]; ++i) {\n+      switch(name) {\n+        case 'loader':\n+          entries.push(ss.bundler.systemLibs());\n+          break;\n+        case 'start':\n+          entries = entries.concat(ss.bundler.constants(client));\n+          if (client.includes.initCode) {\n+            entries = entries.concat(ss.bundler.startCode(client));\n+          }\n+          break;\n+\n+        //case \"eventemitter2\":\n+        //case \"socketstream\":\n+        default:\n+          entries.push(ss.bundler.systemModule(name));\n+          break;\n       }\n-      return cb(output);\n-    });\n-  }\n-\n-  /**\n-   * @ngdoc method\n-   * @name bundler.default:default#assetStart\n-   * @methodOf bundler.default:default\n-   * @function\n-   * @description\n-   * Return the resource for starting the view. It is code for immediate execution at the end of the page.\n-   *\n-   * @returns {AssetEntry} Start Script resource\n-   */\n-  function assetStart() {\n-    var assets = ss.bundler.constants(client) ;\n-    if (client.includes.initCode) {\n-      assets = assets.concat( ss.bundler.startCode(client) );\n     }\n-    return  assets;\n-  }\n \n-  /**\n-   *\n-   * @param path\n-   * @param opts\n-   * @param cb\n-   * @returns {*}\n-   */\n-  function assetCSS(path, opts, cb) {\n-    return client.includes.css? ss.bundler.loadFile(path, 'css', opts, cb) : null;\n+    return entries;\n   }\n \n-  /**\n-   *\n-   * @param path\n-   * @param opts\n-   * @param cb\n-   * @returns {*}\n-   */\n-  function assetHTML(path, opts, cb) {\n-    return ss.bundler.loadFile(path, 'html', opts, function(html) {\n-\n-      // If passing optional tails for main view\n-      if (opts && opts.tail && !options.startInBundle) {\n-        html = html.replace('</body>', opts.tail + '</body>');\n-        html = html.replace('</BODY>', opts.tail + '</BODY>');\n-      }\n-\n-      cb(html);\n-    });\n+  function asset(entry, opts, cb) {\n+    ss.bundler.loadFile(entry, opts, null,\n+      function(output) {\n+        switch(entry.bundle) {\n+          case 'html':\n+            // If passing optional tails for main view\n+            if (opts && opts.tail && !options.startInBundle) {\n+              output = output.replace('</body>', opts.tail + '</body>');\n+              output = output.replace('</BODY>', opts.tail + '</BODY>');\n+            }\n+            return cb(output);\n+\n+          case 'css':\n+            return cb( client.includes.css? output:'');\n+          case 'worker':\n+            //TODO\n+            if (opts.compress && entry.file.indexOf('.min') === -1) {\n+              output = ss.bundler.minifyJSFile(output, entry.file);\n+            }\n+            break;\n+\n+          default:\n+            //TODO with options compress saved to avoid double compression\n+            output = ss.bundler.wrapCode(output, entry.file, opts.pathPrefix);\n+            if (opts.compress && path.indexOf('.min') === -1) {",
        "path": "lib/client/bundler/default.js",
        "position": 207,
        "original_position": 207,
        "commit_id": "5a020477a9b2b731a8a88ac360d5c4264d8fbb26",
        "original_commit_id": "ebf835aef3e0e4bc9473fb9c84307996e42ca10b",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'path' is not defined.\n",
        "created_at": "2015-03-28T21:59:44Z",
        "updated_at": "2015-03-29T01:42:40Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/512#discussion_r27349103",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/512",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27349103"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/512#discussion_r27349103"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/512"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27350581",
        "pull_request_review_id": null,
        "id": 27350581,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MzUwNTgx",
        "diff_hunk": "@@ -178,22 +188,26 @@ module.exports = function(ss,options) {\n \n     // API for implementing bundlers\n \n-    loadFile: function loadFile(fileName, type, opts, cb) {\n-      var dir = path.join(ss.root, options.dirs.client);\n-      var p = path.join(dir, fileName);\n-      var extension = path.extname(p);\n-      extension = extension && extension.substring(1); // argh!\n-      var formatter = ss.client.formatters[extension];\n-      if (p.substr(0, dir.length) !== dir) {\n-        throw new Error('Invalid path. Request for ' + p + ' must not live outside ' + dir);\n-      }\n+    loadFile: function loadFile(entry, opts, formatter, cb, errCb) {\n+      var type = entry.assetType || entry.bundle;\n+      formatter = formatter || ss.client.formatters[entry.ext];\n       if (!formatter) {\n-        throw new Error('Unsupported file extension \\'.' + extension + '\\' when we were expecting some type of ' + (type.toUpperCase()) + ' file. Please provide a formatter for ' + (p.substring(ss.root.length)) + ' or move it to /client/static');\n+        throw new Error('Unsupported file extension \\'.' + entry.ext + '\\' when we were expecting some type of ' + (type.toUpperCase()) + ' file. Please provide a formatter for ' + (p.substring(ss.root.length)) + ' or move it to /client/static');",
        "path": "lib/client/bundler/index.js",
        "position": 37,
        "original_position": 37,
        "commit_id": "5a020477a9b2b731a8a88ac360d5c4264d8fbb26",
        "original_commit_id": "5a020477a9b2b731a8a88ac360d5c4264d8fbb26",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Line is too long.<br>'p' is not defined.\n",
        "created_at": "2015-03-29T01:43:03Z",
        "updated_at": "2015-03-29T01:43:03Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/512#discussion_r27350581",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/512",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27350581"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/512#discussion_r27350581"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/512"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27350582",
        "pull_request_review_id": null,
        "id": 27350582,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MzUwNTgy",
        "diff_hunk": "@@ -178,22 +188,26 @@ module.exports = function(ss,options) {\n \n     // API for implementing bundlers\n \n-    loadFile: function loadFile(fileName, type, opts, cb) {\n-      var dir = path.join(ss.root, options.dirs.client);\n-      var p = path.join(dir, fileName);\n-      var extension = path.extname(p);\n-      extension = extension && extension.substring(1); // argh!\n-      var formatter = ss.client.formatters[extension];\n-      if (p.substr(0, dir.length) !== dir) {\n-        throw new Error('Invalid path. Request for ' + p + ' must not live outside ' + dir);\n-      }\n+    loadFile: function loadFile(entry, opts, formatter, cb, errCb) {\n+      var type = entry.assetType || entry.bundle;\n+      formatter = formatter || ss.client.formatters[entry.ext];\n       if (!formatter) {\n-        throw new Error('Unsupported file extension \\'.' + extension + '\\' when we were expecting some type of ' + (type.toUpperCase()) + ' file. Please provide a formatter for ' + (p.substring(ss.root.length)) + ' or move it to /client/static');\n+        throw new Error('Unsupported file extension \\'.' + entry.ext + '\\' when we were expecting some type of ' + (type.toUpperCase()) + ' file. Please provide a formatter for ' + (p.substring(ss.root.length)) + ' or move it to /client/static');\n       }\n       if (formatter.assetType !== type) {\n-        throw new Error('Unable to render \\'' + fileName + '\\' as this appears to be a ' + (formatter.assetType.toUpperCase()) + ' file. Expecting some type of ' + (type.toUpperCase()) + ' file in ' + (dir.substr(ss.root.length)) + ' instead');\n+        throw new Error('Unable to render \\'' + entry.file + '\\' as this appears to be a ' + (formatter.assetType.toUpperCase()) + ' file. Expecting some type of ' + (type.toUpperCase()) + ' file in ' + (dir.substr(ss.root.length)) + ' instead');",
        "path": "lib/client/bundler/index.js",
        "position": 41,
        "original_position": 41,
        "commit_id": "5a020477a9b2b731a8a88ac360d5c4264d8fbb26",
        "original_commit_id": "5a020477a9b2b731a8a88ac360d5c4264d8fbb26",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Line is too long.<br>'dir' is not defined.\n",
        "created_at": "2015-03-29T01:43:03Z",
        "updated_at": "2015-03-29T01:43:03Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/512#discussion_r27350582",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/512",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27350582"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/512#discussion_r27350582"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/512"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27350583",
        "pull_request_review_id": null,
        "id": 27350583,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MzUwNTgz",
        "diff_hunk": "@@ -443,39 +457,62 @@ module.exports = function(ss,options) {\n \n       var _entries = [],\n           bundler = getBundler(client),\n-          includeType;\n+          includeType,\n+          bundle;\n \n       switch(assetType) {\n         case 'css':\n           includeType = 'css';\n+          bundle = 'css';\n           client.paths['css'].forEach(pushMainEntries);\n           break;\n \n         case 'js':\n         case 'worker':\n           // Libs\n-          var libs = [bundler.asset.loader()];\n+          var libs = bundler.module('loader');\n \n           // Modules\n-          var mods = [],\n-            _ref = system.assets.modules;\n-          for (var name in _ref) {\n-            if (_ref.hasOwnProperty(name)) {\n-              mods.push( bundler.asset.systemModule(name) );\n-            }\n-          }\n+          var mods = bundler.module.apply(bundler, Object.keys(system.assets.modules));\n+\n           _entries = _entries.concat(libs).concat(mods);\n           includeType = false;\n+          //TODO worker instead of code ?\n           client.paths['code'].forEach(pushMainEntries);\n           if (options.startInBundle) {\n-            _entries = _entries.concat(bundler.asset.start());\n+            _entries = _entries.concat(bundler.module('start'));\n           }\n+          _entries = _entries.map(function(entry) {\n+            var extension = path.extname(entry.file);\n+            extension = extension && extension.substring(1); // argh!\n+            entry.ext = extension;\n+            entry.assetType = 'js';\n+            entry.bundle = 'js';\n+            return entry;\n+          });\n+          break;\n+\n+        case 'tmpl':\n+          includeType = 'html';\n+          bundle = 'tmpl';\n+          client.paths.tmpl.forEach(function(tmpl) {\n+            if (tmpl.substring(tmpl.length-2) === '/*') {\n+              var matching = magicPath.files(path.join(ss.root,options.dirs.client,tmpl.substring(0,tmpl.length-2)), '*');",
        "path": "lib/client/bundler/index.js",
        "position": 130,
        "original_position": 130,
        "commit_id": "5a020477a9b2b731a8a88ac360d5c4264d8fbb26",
        "original_commit_id": "5a020477a9b2b731a8a88ac360d5c4264d8fbb26",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Line is too long.\n",
        "created_at": "2015-03-29T01:43:03Z",
        "updated_at": "2015-03-29T01:43:03Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/512#discussion_r27350583",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/512",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27350583"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/512#discussion_r27350583"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/512"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27350584",
        "pull_request_review_id": null,
        "id": 27350584,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MzUwNTg0",
        "diff_hunk": "@@ -443,39 +457,62 @@ module.exports = function(ss,options) {\n \n       var _entries = [],\n           bundler = getBundler(client),\n-          includeType;\n+          includeType,\n+          bundle;\n \n       switch(assetType) {\n         case 'css':\n           includeType = 'css';\n+          bundle = 'css';\n           client.paths['css'].forEach(pushMainEntries);\n           break;\n \n         case 'js':\n         case 'worker':\n           // Libs\n-          var libs = [bundler.asset.loader()];\n+          var libs = bundler.module('loader');\n \n           // Modules\n-          var mods = [],\n-            _ref = system.assets.modules;\n-          for (var name in _ref) {\n-            if (_ref.hasOwnProperty(name)) {\n-              mods.push( bundler.asset.systemModule(name) );\n-            }\n-          }\n+          var mods = bundler.module.apply(bundler, Object.keys(system.assets.modules));\n+\n           _entries = _entries.concat(libs).concat(mods);\n           includeType = false;\n+          //TODO worker instead of code ?\n           client.paths['code'].forEach(pushMainEntries);\n           if (options.startInBundle) {\n-            _entries = _entries.concat(bundler.asset.start());\n+            _entries = _entries.concat(bundler.module('start'));\n           }\n+          _entries = _entries.map(function(entry) {\n+            var extension = path.extname(entry.file);\n+            extension = extension && extension.substring(1); // argh!\n+            entry.ext = extension;\n+            entry.assetType = 'js';\n+            entry.bundle = 'js';\n+            return entry;\n+          });\n+          break;\n+\n+        case 'tmpl':\n+          includeType = 'html';\n+          bundle = 'tmpl';\n+          client.paths.tmpl.forEach(function(tmpl) {\n+            if (tmpl.substring(tmpl.length-2) === '/*') {\n+              var matching = magicPath.files(path.join(ss.root,options.dirs.client,tmpl.substring(0,tmpl.length-2)), '*');\n+              matching.map(function(p) { return './' + path.join(tmpl.substring(0,tmpl.length-2),p); }).forEach(pushMainEntries);",
        "path": "lib/client/bundler/index.js",
        "position": 131,
        "original_position": 131,
        "commit_id": "5a020477a9b2b731a8a88ac360d5c4264d8fbb26",
        "original_commit_id": "5a020477a9b2b731a8a88ac360d5c4264d8fbb26",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Line is too long.\n",
        "created_at": "2015-03-29T01:43:03Z",
        "updated_at": "2015-03-29T01:43:03Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/512#discussion_r27350584",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/512",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27350584"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/512#discussion_r27350584"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/512"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27350585",
        "pull_request_review_id": null,
        "id": 27350585,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MzUwNTg1",
        "diff_hunk": "@@ -443,39 +457,62 @@ module.exports = function(ss,options) {\n \n       var _entries = [],\n           bundler = getBundler(client),\n-          includeType;\n+          includeType,\n+          bundle;\n \n       switch(assetType) {\n         case 'css':\n           includeType = 'css';\n+          bundle = 'css';\n           client.paths['css'].forEach(pushMainEntries);\n           break;\n \n         case 'js':\n         case 'worker':\n           // Libs\n-          var libs = [bundler.asset.loader()];\n+          var libs = bundler.module('loader');\n \n           // Modules\n-          var mods = [],\n-            _ref = system.assets.modules;\n-          for (var name in _ref) {\n-            if (_ref.hasOwnProperty(name)) {\n-              mods.push( bundler.asset.systemModule(name) );\n-            }\n-          }\n+          var mods = bundler.module.apply(bundler, Object.keys(system.assets.modules));\n+\n           _entries = _entries.concat(libs).concat(mods);\n           includeType = false;\n+          //TODO worker instead of code ?\n           client.paths['code'].forEach(pushMainEntries);\n           if (options.startInBundle) {\n-            _entries = _entries.concat(bundler.asset.start());\n+            _entries = _entries.concat(bundler.module('start'));\n           }\n+          _entries = _entries.map(function(entry) {\n+            var extension = path.extname(entry.file);\n+            extension = extension && extension.substring(1); // argh!\n+            entry.ext = extension;\n+            entry.assetType = 'js';\n+            entry.bundle = 'js';\n+            return entry;\n+          });\n+          break;\n+\n+        case 'tmpl':\n+          includeType = 'html';\n+          bundle = 'tmpl';\n+          client.paths.tmpl.forEach(function(tmpl) {\n+            if (tmpl.substring(tmpl.length-2) === '/*') {\n+              var matching = magicPath.files(path.join(ss.root,options.dirs.client,tmpl.substring(0,tmpl.length-2)), '*');\n+              matching.map(function(p) { return './' + path.join(tmpl.substring(0,tmpl.length-2),p); }).forEach(pushMainEntries);\n+            }\n+            else {\n+              pushMainEntries(tmpl);\n+            }\n+          });\n           break;\n       }\n \n       function pushMainEntries(from) {\n         return magicPath.files(path.join(ss.root, options.dirs.client), from).forEach(function(file) {\n-          return _entries.push({file:file,importedBy:from,includeType:includeType});\n+          var extension = path.extname(file);\n+          extension = extension && extension.substring(1); // argh!\n+          var assetType = bundle==='tmpl'? 'html':bundle\n+          return _entries.push({file:file,importedBy:from,includeType:includeType,ext:extension,bundle:bundle,assetType:assetType});",
        "path": "lib/client/bundler/index.js",
        "position": 146,
        "original_position": 146,
        "commit_id": "5a020477a9b2b731a8a88ac360d5c4264d8fbb26",
        "original_commit_id": "5a020477a9b2b731a8a88ac360d5c4264d8fbb26",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Line is too long.\n",
        "created_at": "2015-03-29T01:43:04Z",
        "updated_at": "2015-03-29T01:43:04Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/512#discussion_r27350585",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/512",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27350585"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/512#discussion_r27350585"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/512"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27350586",
        "pull_request_review_id": null,
        "id": 27350586,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MzUwNTg2",
        "diff_hunk": "@@ -443,39 +457,62 @@ module.exports = function(ss,options) {\n \n       var _entries = [],\n           bundler = getBundler(client),\n-          includeType;\n+          includeType,\n+          bundle;\n \n       switch(assetType) {\n         case 'css':\n           includeType = 'css';\n+          bundle = 'css';\n           client.paths['css'].forEach(pushMainEntries);\n           break;\n \n         case 'js':\n         case 'worker':\n           // Libs\n-          var libs = [bundler.asset.loader()];\n+          var libs = bundler.module('loader');\n \n           // Modules\n-          var mods = [],\n-            _ref = system.assets.modules;\n-          for (var name in _ref) {\n-            if (_ref.hasOwnProperty(name)) {\n-              mods.push( bundler.asset.systemModule(name) );\n-            }\n-          }\n+          var mods = bundler.module.apply(bundler, Object.keys(system.assets.modules));\n+\n           _entries = _entries.concat(libs).concat(mods);\n           includeType = false;\n+          //TODO worker instead of code ?\n           client.paths['code'].forEach(pushMainEntries);\n           if (options.startInBundle) {\n-            _entries = _entries.concat(bundler.asset.start());\n+            _entries = _entries.concat(bundler.module('start'));\n           }\n+          _entries = _entries.map(function(entry) {\n+            var extension = path.extname(entry.file);\n+            extension = extension && extension.substring(1); // argh!\n+            entry.ext = extension;\n+            entry.assetType = 'js';\n+            entry.bundle = 'js';\n+            return entry;\n+          });\n+          break;\n+\n+        case 'tmpl':\n+          includeType = 'html';\n+          bundle = 'tmpl';\n+          client.paths.tmpl.forEach(function(tmpl) {\n+            if (tmpl.substring(tmpl.length-2) === '/*') {\n+              var matching = magicPath.files(path.join(ss.root,options.dirs.client,tmpl.substring(0,tmpl.length-2)), '*');\n+              matching.map(function(p) { return './' + path.join(tmpl.substring(0,tmpl.length-2),p); }).forEach(pushMainEntries);\n+            }\n+            else {\n+              pushMainEntries(tmpl);\n+            }\n+          });\n           break;\n       }\n \n       function pushMainEntries(from) {\n         return magicPath.files(path.join(ss.root, options.dirs.client), from).forEach(function(file) {\n-          return _entries.push({file:file,importedBy:from,includeType:includeType});\n+          var extension = path.extname(file);\n+          extension = extension && extension.substring(1); // argh!\n+          var assetType = bundle==='tmpl'? 'html':bundle",
        "path": "lib/client/bundler/index.js",
        "position": 145,
        "original_position": 145,
        "commit_id": "5a020477a9b2b731a8a88ac360d5c4264d8fbb26",
        "original_commit_id": "5a020477a9b2b731a8a88ac360d5c4264d8fbb26",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Missing semicolon.\n",
        "created_at": "2015-03-29T01:43:04Z",
        "updated_at": "2015-03-29T01:43:04Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/512#discussion_r27350586",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/512",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27350586"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/512#discussion_r27350586"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/512"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27350587",
        "pull_request_review_id": null,
        "id": 27350587,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MzUwNTg3",
        "diff_hunk": "@@ -108,7 +108,7 @@ module.exports = function(ss, bundlers, bundlerById, options) {\n       var dests;\n \n       if (type == 'start') {\n-        return ['<script>' + this.asset.start(this.client).map(function(value) { return value.content; }).join('\\n') + '</script>'];\n+        return ['<script>' + this.module('start').map(function(value) { return value.content; }).join('\\n') + '</script>'];",
        "path": "lib/client/bundler/proto.js",
        "position": 23,
        "original_position": 23,
        "commit_id": "5a020477a9b2b731a8a88ac360d5c4264d8fbb26",
        "original_commit_id": "5a020477a9b2b731a8a88ac360d5c4264d8fbb26",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Line is too long.\n",
        "created_at": "2015-03-29T01:43:04Z",
        "updated_at": "2015-03-29T01:43:04Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/512#discussion_r27350587",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/512",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27350587"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/512#discussion_r27350587"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/512"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27472737",
        "pull_request_review_id": null,
        "id": 27472737,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NDcyNzM3",
        "diff_hunk": "@@ -132,6 +132,25 @@ module.exports = function(ss,options) {\n       }\n     },\n \n+    findEntryPoint: function(client) {\n+\n+      client.paths.code.forEach(function(rel) {\n+        var p = path.join(ss.root, options.dirs.client, rel)",
        "path": "lib/client/bundler/index.js",
        "position": null,
        "original_position": 7,
        "commit_id": "71af4fe6e70154221202a299822ca337fecebd74",
        "original_commit_id": "f5dd8799c5d524985ffcdbbcf4b8716821b7d1b9",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Missing semicolon.\n",
        "created_at": "2015-03-31T12:06:48Z",
        "updated_at": "2015-04-04T07:19:01Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/521#discussion_r27472737",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/521",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27472737"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/521#discussion_r27472737"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/521"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27472738",
        "pull_request_review_id": null,
        "id": 27472738,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NDcyNzM4",
        "diff_hunk": "@@ -141,6 +141,55 @@ module.exports = function(ss, bundlers, bundlerById, options) {\n       }\n     },\n \n+    // Before client-side code is sent to the browser any file which is NOT a library (e.g. /client/code/libs)\n+    // is wrapped in a module wrapper (to keep vars local and allow you to require() one file in another).\n+    // The 'system' directory is a special case - any module placed in this dir will not have a leading slash\n+    wrapCode: function wrapCode(code, entry, opts) {\n+      var pathAry = entry.file.split('/');\n+\n+      // Don't touch the code if it's in a 'libs' directory\n+      if (pathAry.indexOf('libs') >= 0) { //TODO [code,libs]\n+        return code;\n+      }\n+\n+      if (pathAry.indexOf('entry.js') === -1 && options && options.browserifyExcludePaths) {\n+        //TODO is this an array? should be revised\n+        for(var i, p; p = options.browserifyExcludePaths[i]; ++i) {",
        "path": "lib/client/bundler/proto.js",
        "position": null,
        "original_position": 17,
        "commit_id": "71af4fe6e70154221202a299822ca337fecebd74",
        "original_commit_id": "f5dd8799c5d524985ffcdbbcf4b8716821b7d1b9",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Expected a conditional expression and instead saw an assignment.\n",
        "created_at": "2015-03-31T12:06:48Z",
        "updated_at": "2015-04-04T07:19:01Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/521#discussion_r27472738",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/521",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27472738"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/521#discussion_r27472738"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/521"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27472739",
        "pull_request_review_id": null,
        "id": 27472739,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NDcyNzM5",
        "diff_hunk": "@@ -123,6 +126,7 @@ require.alias = function (from, to) {\n };\n \n require.define = function (filename, fn) {\n+    if (filename.substring(0,3) === '/./') filename = filename.substring(2);",
        "path": "lib/client/system/libs/browserify.js",
        "position": null,
        "original_position": 14,
        "commit_id": "71af4fe6e70154221202a299822ca337fecebd74",
        "original_commit_id": "f5dd8799c5d524985ffcdbbcf4b8716821b7d1b9",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Expected '{' and instead saw 'filename'.\n",
        "created_at": "2015-03-31T12:06:48Z",
        "updated_at": "2015-04-04T07:19:01Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/521#discussion_r27472739",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/521",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27472739"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/521#discussion_r27472739"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/521"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27472740",
        "pull_request_review_id": null,
        "id": 27472740,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NDcyNzQw",
        "diff_hunk": "@@ -268,63 +275,63 @@ resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n // path.normalize(path)\n // posix version\n exports.normalize = function(path) {\n-var isAbsolute = path.charAt(0) === '/',\n-    trailingSlash = path.slice(-1) === '/';\n-\n-// Normalize the path\n-path = normalizeArray(filter(path.split('/'), function(p) {\n-    return !!p;\n-  }), !isAbsolute).join('/');\n-\n-  if (!path && !isAbsolute) {\n-    path = '.';\n-  }\n-  if (path && trailingSlash) {\n-    path += '/';\n-  }\n-\n-  return (isAbsolute ? '/' : '') + path;\n-};\n-\n+  var isAbsolute = path.charAt(0) === '/',\n+      trailingSlash = path.slice(-1) === '/';\n \n-// posix version\n-exports.join = function() {\n-  var paths = Array.prototype.slice.call(arguments, 0);\n-  return exports.normalize(filter(paths, function(p, index) {\n-    return p && typeof p === 'string';\n-  }).join('/'));\n-};\n+  // Normalize the path\n+  path = normalizeArray(filter(path.split('/'), function(p) {\n+      return !!p;\n+    }), !isAbsolute).join('/');\n \n+    if (!path && !isAbsolute) {\n+      path = '.';\n+    }\n+    if (path && trailingSlash) {\n+      path += '/';\n+    }\n \n-exports.dirname = function(path) {\n-  var dir = splitPathRe.exec(path)[1] || '';\n-  var isWindows = false;\n-  if (!dir) {\n-    // No dirname\n-    return '.';\n-  } else if (dir.length === 1 ||\n-      (isWindows && dir.length <= 3 && dir.charAt(1) === ':')) {\n-    // It is just a slash or a drive letter with a slash\n-    return dir;\n-  } else {\n-    // It is a full dirname, strip trailing slash\n-    return dir.substring(0, dir.length - 1);\n-  }\n-};\n+    return (isAbsolute ? '/' : '') + path;\n+  };\n+\n+\n+  // posix version\n+  exports.join = function() {\n+    var paths = Array.prototype.slice.call(arguments, 0);\n+    return exports.normalize(filter(paths, function(p, index) {",
        "path": "lib/client/system/libs/browserify.js",
        "position": null,
        "original_position": 94,
        "commit_id": "71af4fe6e70154221202a299822ca337fecebd74",
        "original_commit_id": "f5dd8799c5d524985ffcdbbcf4b8716821b7d1b9",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'index' is defined but never used.\n",
        "created_at": "2015-03-31T12:06:49Z",
        "updated_at": "2015-04-04T07:19:01Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/521#discussion_r27472740",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/521",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27472740"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/521#discussion_r27472740"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/521"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27472742",
        "pull_request_review_id": null,
        "id": 27472742,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NDcyNzQy",
        "diff_hunk": "@@ -0,0 +1,92 @@\n+'use strict';\n+\n+var path    = require('path'),\n+  vm      = require('vm'),\n+  fs      = require('fs'),\n+  should  = require('should'),\n+  ss      = require( '../../../../lib/socketstream'),\n+  options = ss.client.options;",
        "path": "test/unit/client/system/browserify.test.js",
        "position": null,
        "original_position": 8,
        "commit_id": "71af4fe6e70154221202a299822ca337fecebd74",
        "original_commit_id": "f5dd8799c5d524985ffcdbbcf4b8716821b7d1b9",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'options' is defined but never used.\n",
        "created_at": "2015-03-31T12:06:49Z",
        "updated_at": "2015-04-04T07:19:01Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/521#discussion_r27472742",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/521",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27472742"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/521#discussion_r27472742"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/521"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27472743",
        "pull_request_review_id": null,
        "id": 27472743,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NDcyNzQz",
        "diff_hunk": "@@ -0,0 +1,92 @@\n+'use strict';\n+\n+var path    = require('path'),\n+  vm      = require('vm'),\n+  fs      = require('fs'),\n+  should  = require('should'),\n+  ss      = require( '../../../../lib/socketstream'),\n+  options = ss.client.options;\n+\n+describe('browserify', function() {\n+\n+  var browserify = fs.readFileSync( path.join(__dirname,'../../../..', 'lib/client/system/libs/browserify.js')),\n+      browser;\n+\n+  describe('require()', function () {\n+\n+    beforeEach(function() {\n+      browser = (function(){\n+        var window = {document:{}};\n+        window.window = window;\n+        vm.runInNewContext(browserify, window);\n+\n+        return window;\n+      })();\n+    });\n+\n+    it('should be sane',function() {\n+      should(browser.require).be.type('function');\n+    });\n+\n+    it('should resolve require with absolute path', function() {\n+      browser.require.define('/a/b/c/d',\n+        function(require, module, exports, __dirname, __filename) {",
        "path": "test/unit/client/system/browserify.test.js",
        "position": 116,
        "original_position": 33,
        "commit_id": "71af4fe6e70154221202a299822ca337fecebd74",
        "original_commit_id": "f5dd8799c5d524985ffcdbbcf4b8716821b7d1b9",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'__filename' is defined but never used.<br>'__dirname' is defined but never used.\n",
        "created_at": "2015-03-31T12:06:49Z",
        "updated_at": "2015-04-04T07:19:01Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/521#discussion_r27472743",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/521",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27472743"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/521#discussion_r27472743"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/521"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27530715",
        "pull_request_review_id": null,
        "id": 27530715,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NTMwNzE1",
        "diff_hunk": "@@ -21,77 +20,78 @@ require._core = {\n     'vm': true\n };\n \n-require.resolve = (function () {\n-    return function (x, cwd) {\n-        if (!cwd) cwd = '/';\n+require.resolve = function (x, cwd) {\n+    if (!cwd) cwd = '/';",
        "path": "lib/client/system/libs/browserify.js",
        "position": null,
        "original_position": 25,
        "commit_id": "71af4fe6e70154221202a299822ca337fecebd74",
        "original_commit_id": "6917adea6bb440ebbafe0576a11b505416f76cb3",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Expected '{' and instead saw 'cwd'.\n",
        "created_at": "2015-03-31T22:45:29Z",
        "updated_at": "2015-04-04T07:19:01Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/521#discussion_r27530715",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/521",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27530715"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/521#discussion_r27530715"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/521"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27530718",
        "pull_request_review_id": null,
        "id": 27530718,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NTMwNzE4",
        "diff_hunk": "@@ -21,77 +20,78 @@ require._core = {\n     'vm': true\n };\n \n-require.resolve = (function () {\n-    return function (x, cwd) {\n-        if (!cwd) cwd = '/';\n+require.resolve = function (x, cwd) {\n+    if (!cwd) cwd = '/';\n \n-        if (require._core[x]) return x;\n-        var path = require.modules.path();\n-        cwd = path.resolve('/', cwd);\n-        var y = cwd || '/';\n+    if (require._core[x]) return x;",
        "path": "lib/client/system/libs/browserify.js",
        "position": null,
        "original_position": 31,
        "commit_id": "71af4fe6e70154221202a299822ca337fecebd74",
        "original_commit_id": "6917adea6bb440ebbafe0576a11b505416f76cb3",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Expected '{' and instead saw 'return'.\n",
        "created_at": "2015-03-31T22:45:30Z",
        "updated_at": "2015-04-04T07:19:01Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/521#discussion_r27530718",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/521",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27530718"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/521#discussion_r27530718"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/521"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27530719",
        "pull_request_review_id": null,
        "id": 27530719,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NTMwNzE5",
        "diff_hunk": "@@ -21,77 +20,78 @@ require._core = {\n     'vm': true\n };\n \n-require.resolve = (function () {\n-    return function (x, cwd) {\n-        if (!cwd) cwd = '/';\n+require.resolve = function (x, cwd) {\n+    if (!cwd) cwd = '/';\n \n-        if (require._core[x]) return x;\n-        var path = require.modules.path();\n-        cwd = path.resolve('/', cwd);\n-        var y = cwd || '/';\n+    if (require._core[x]) return x;\n+    var path = require.modules.path();\n+    //cwd = path.resolve('/', cwd); // ruins require of builtin/sub-module\n \n-        if (x.match(/^(?:\\.\\.?\\/|\\/)/)) {\n-            var m = loadAsFileSync(path.resolve(y, x))\n-                || loadAsDirectorySync(path.resolve(y, x));\n-            if (m) return m;\n-        }\n+    // paths are ../ or ./ or /\n+    if (x.match(/^(?:\\.\\.?\\/|\\/)/)) {\n+        var m = loadAsFileSync(path.resolve(cwd, x))\n+            || loadAsDirectorySync(path.resolve(cwd, x));",
        "path": "lib/client/system/libs/browserify.js",
        "position": null,
        "original_position": 43,
        "commit_id": "71af4fe6e70154221202a299822ca337fecebd74",
        "original_commit_id": "6917adea6bb440ebbafe0576a11b505416f76cb3",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Bad line breaking before '||'.\n",
        "created_at": "2015-03-31T22:45:30Z",
        "updated_at": "2015-04-04T07:19:01Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/521#discussion_r27530719",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/521",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27530719"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/521#discussion_r27530719"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/521"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27530720",
        "pull_request_review_id": null,
        "id": 27530720,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NTMwNzIw",
        "diff_hunk": "@@ -21,77 +20,78 @@ require._core = {\n     'vm': true\n };\n \n-require.resolve = (function () {\n-    return function (x, cwd) {\n-        if (!cwd) cwd = '/';\n+require.resolve = function (x, cwd) {\n+    if (!cwd) cwd = '/';\n \n-        if (require._core[x]) return x;\n-        var path = require.modules.path();\n-        cwd = path.resolve('/', cwd);\n-        var y = cwd || '/';\n+    if (require._core[x]) return x;\n+    var path = require.modules.path();\n+    //cwd = path.resolve('/', cwd); // ruins require of builtin/sub-module\n \n-        if (x.match(/^(?:\\.\\.?\\/|\\/)/)) {\n-            var m = loadAsFileSync(path.resolve(y, x))\n-                || loadAsDirectorySync(path.resolve(y, x));\n-            if (m) return m;\n-        }\n+    // paths are ../ or ./ or /\n+    if (x.match(/^(?:\\.\\.?\\/|\\/)/)) {\n+        var m = loadAsFileSync(path.resolve(cwd, x))\n+            || loadAsDirectorySync(path.resolve(cwd, x));\n+        if (m) return m;",
        "path": "lib/client/system/libs/browserify.js",
        "position": null,
        "original_position": 44,
        "commit_id": "71af4fe6e70154221202a299822ca337fecebd74",
        "original_commit_id": "6917adea6bb440ebbafe0576a11b505416f76cb3",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Expected '{' and instead saw 'return'.\n",
        "created_at": "2015-03-31T22:45:30Z",
        "updated_at": "2015-04-04T07:19:01Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/521#discussion_r27530720",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/521",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27530720"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/521#discussion_r27530720"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/521"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27530721",
        "pull_request_review_id": null,
        "id": 27530721,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NTMwNzIx",
        "diff_hunk": "@@ -21,77 +20,78 @@ require._core = {\n     'vm': true\n };\n \n-require.resolve = (function () {\n-    return function (x, cwd) {\n-        if (!cwd) cwd = '/';\n+require.resolve = function (x, cwd) {\n+    if (!cwd) cwd = '/';\n \n-        if (require._core[x]) return x;\n-        var path = require.modules.path();\n-        cwd = path.resolve('/', cwd);\n-        var y = cwd || '/';\n+    if (require._core[x]) return x;\n+    var path = require.modules.path();\n+    //cwd = path.resolve('/', cwd); // ruins require of builtin/sub-module\n \n-        if (x.match(/^(?:\\.\\.?\\/|\\/)/)) {\n-            var m = loadAsFileSync(path.resolve(y, x))\n-                || loadAsDirectorySync(path.resolve(y, x));\n-            if (m) return m;\n-        }\n+    // paths are ../ or ./ or /\n+    if (x.match(/^(?:\\.\\.?\\/|\\/)/)) {\n+        var m = loadAsFileSync(path.resolve(cwd, x))\n+            || loadAsDirectorySync(path.resolve(cwd, x));\n+        if (m) return m;\n+    }\n \n-        var n = loadNodeModulesSync(x, y);\n-        if (n) return n;\n+    var n = loadNodeModulesSync(x, cwd);\n+    if (n) return n;",
        "path": "lib/client/system/libs/browserify.js",
        "position": null,
        "original_position": 50,
        "commit_id": "71af4fe6e70154221202a299822ca337fecebd74",
        "original_commit_id": "6917adea6bb440ebbafe0576a11b505416f76cb3",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Expected '{' and instead saw 'return'.\n",
        "created_at": "2015-03-31T22:45:30Z",
        "updated_at": "2015-04-04T07:19:01Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/521#discussion_r27530721",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/521",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27530721"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/521#discussion_r27530721"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/521"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27530722",
        "pull_request_review_id": null,
        "id": 27530722,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NTMwNzIy",
        "diff_hunk": "@@ -21,77 +20,78 @@ require._core = {\n     'vm': true\n };\n \n-require.resolve = (function () {\n-    return function (x, cwd) {\n-        if (!cwd) cwd = '/';\n+require.resolve = function (x, cwd) {\n+    if (!cwd) cwd = '/';\n \n-        if (require._core[x]) return x;\n-        var path = require.modules.path();\n-        cwd = path.resolve('/', cwd);\n-        var y = cwd || '/';\n+    if (require._core[x]) return x;\n+    var path = require.modules.path();\n+    //cwd = path.resolve('/', cwd); // ruins require of builtin/sub-module\n \n-        if (x.match(/^(?:\\.\\.?\\/|\\/)/)) {\n-            var m = loadAsFileSync(path.resolve(y, x))\n-                || loadAsDirectorySync(path.resolve(y, x));\n-            if (m) return m;\n-        }\n+    // paths are ../ or ./ or /\n+    if (x.match(/^(?:\\.\\.?\\/|\\/)/)) {\n+        var m = loadAsFileSync(path.resolve(cwd, x))\n+            || loadAsDirectorySync(path.resolve(cwd, x));\n+        if (m) return m;\n+    }\n \n-        var n = loadNodeModulesSync(x, y);\n-        if (n) return n;\n+    var n = loadNodeModulesSync(x, cwd);\n+    if (n) return n;\n \n-        throw new Error(\"Cannot find module '\" + x + \"'\");\n+    throw new Error(\"Cannot find module '\" + x + \"' within '\"+cwd+\"'\");",
        "path": "lib/client/system/libs/browserify.js",
        "position": null,
        "original_position": 53,
        "commit_id": "71af4fe6e70154221202a299822ca337fecebd74",
        "original_commit_id": "6917adea6bb440ebbafe0576a11b505416f76cb3",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Mixed double and single quotes.\n",
        "created_at": "2015-03-31T22:45:30Z",
        "updated_at": "2015-04-04T07:19:01Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/521#discussion_r27530722",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/521",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27530722"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/521#discussion_r27530722"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/521"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27530723",
        "pull_request_review_id": null,
        "id": 27530723,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NTMwNzIz",
        "diff_hunk": "@@ -21,77 +20,78 @@ require._core = {\n     'vm': true\n };\n \n-require.resolve = (function () {\n-    return function (x, cwd) {\n-        if (!cwd) cwd = '/';\n+require.resolve = function (x, cwd) {\n+    if (!cwd) cwd = '/';\n \n-        if (require._core[x]) return x;\n-        var path = require.modules.path();\n-        cwd = path.resolve('/', cwd);\n-        var y = cwd || '/';\n+    if (require._core[x]) return x;\n+    var path = require.modules.path();\n+    //cwd = path.resolve('/', cwd); // ruins require of builtin/sub-module\n \n-        if (x.match(/^(?:\\.\\.?\\/|\\/)/)) {\n-            var m = loadAsFileSync(path.resolve(y, x))\n-                || loadAsDirectorySync(path.resolve(y, x));\n-            if (m) return m;\n-        }\n+    // paths are ../ or ./ or /\n+    if (x.match(/^(?:\\.\\.?\\/|\\/)/)) {\n+        var m = loadAsFileSync(path.resolve(cwd, x))\n+            || loadAsDirectorySync(path.resolve(cwd, x));\n+        if (m) return m;\n+    }\n \n-        var n = loadNodeModulesSync(x, y);\n-        if (n) return n;\n+    var n = loadNodeModulesSync(x, cwd);\n+    if (n) return n;\n \n-        throw new Error(\"Cannot find module '\" + x + \"'\");\n+    throw new Error(\"Cannot find module '\" + x + \"' within '\"+cwd+\"'\");\n \n-        function matchWithModules (x) {\n-            var moduleNames = Object.keys(require.modules);\n-            for (var i = 0; i < moduleNames.length; i++) {\n-                if (moduleNames[i].indexOf(x) === 0) {\n-                    return moduleNames[i];\n-                }\n-            }\n-            return false;\n-        }\n-\n-        function loadAsFileSync (x) {\n-            if (require.modules[x] || (x = matchWithModules(x))) {\n-                return x;\n+    function matchWithModules (x) {\n+        var moduleNames = Object.keys(require.modules);\n+        for (var i = 0; i < moduleNames.length; i++) {\n+            if (moduleNames[i].indexOf(x) === 0) {\n+                return moduleNames[i];\n             }\n         }\n+        return false;\n+    }\n \n-        function loadAsDirectorySync (x) {\n-            x = x.replace(/\\/+$/, '');\n-            return loadAsFileSync(x + '/index');\n+    function loadAsFileSync (x) {\n+        //if (x.charAt(0) !== '.' && require.modules['.' + x]) {\n+        //  return '.' + x;\n+        //}\n+        if (require.modules[x] || (x = matchWithModules(x))) {\n+            return x;\n         }\n+    }\n \n-        function loadNodeModulesSync (x, start) {\n-            var dirs = nodeModulesPathsSync(start);\n-            for (var i = 0; i < dirs.length; i++) {\n-                var dir = dirs[i];\n-                var m = loadAsFileSync(dir + '/' + x);\n-                if (m) return m;\n-                var n = loadAsDirectorySync(dir + '/' + x);\n-                if (n) return n;\n-            }\n+    function loadAsDirectorySync (x) {\n+        x = x.replace(/\\/+$/, '');\n+        return loadAsFileSync(x + '/index');\n+    }\n \n-            var m = loadAsFileSync(x);\n+    function loadNodeModulesSync (x, start) {\n+        var dirs = nodeModulesPathsSync(start);\n+        for (var i = 0; i < dirs.length; i++) {\n+            var dir = dirs[i];\n+            var m = loadAsFileSync(dir + '/' + x);\n             if (m) return m;\n+            var n = loadAsDirectorySync(dir + '/' + x);\n+            if (n) return n;",
        "path": "lib/client/system/libs/browserify.js",
        "position": null,
        "original_position": 112,
        "commit_id": "71af4fe6e70154221202a299822ca337fecebd74",
        "original_commit_id": "6917adea6bb440ebbafe0576a11b505416f76cb3",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Expected '{' and instead saw 'return'.\n",
        "created_at": "2015-03-31T22:45:30Z",
        "updated_at": "2015-04-04T07:19:01Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/521#discussion_r27530723",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/521",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27530723"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/521#discussion_r27530723"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/521"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27530724",
        "pull_request_review_id": null,
        "id": 27530724,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NTMwNzI0",
        "diff_hunk": "@@ -21,77 +20,78 @@ require._core = {\n     'vm': true\n };\n \n-require.resolve = (function () {\n-    return function (x, cwd) {\n-        if (!cwd) cwd = '/';\n+require.resolve = function (x, cwd) {\n+    if (!cwd) cwd = '/';\n \n-        if (require._core[x]) return x;\n-        var path = require.modules.path();\n-        cwd = path.resolve('/', cwd);\n-        var y = cwd || '/';\n+    if (require._core[x]) return x;\n+    var path = require.modules.path();\n+    //cwd = path.resolve('/', cwd); // ruins require of builtin/sub-module\n \n-        if (x.match(/^(?:\\.\\.?\\/|\\/)/)) {\n-            var m = loadAsFileSync(path.resolve(y, x))\n-                || loadAsDirectorySync(path.resolve(y, x));\n-            if (m) return m;\n-        }\n+    // paths are ../ or ./ or /\n+    if (x.match(/^(?:\\.\\.?\\/|\\/)/)) {\n+        var m = loadAsFileSync(path.resolve(cwd, x))\n+            || loadAsDirectorySync(path.resolve(cwd, x));\n+        if (m) return m;\n+    }\n \n-        var n = loadNodeModulesSync(x, y);\n-        if (n) return n;\n+    var n = loadNodeModulesSync(x, cwd);\n+    if (n) return n;\n \n-        throw new Error(\"Cannot find module '\" + x + \"'\");\n+    throw new Error(\"Cannot find module '\" + x + \"' within '\"+cwd+\"'\");\n \n-        function matchWithModules (x) {\n-            var moduleNames = Object.keys(require.modules);\n-            for (var i = 0; i < moduleNames.length; i++) {\n-                if (moduleNames[i].indexOf(x) === 0) {\n-                    return moduleNames[i];\n-                }\n-            }\n-            return false;\n-        }\n-\n-        function loadAsFileSync (x) {\n-            if (require.modules[x] || (x = matchWithModules(x))) {\n-                return x;\n+    function matchWithModules (x) {\n+        var moduleNames = Object.keys(require.modules);\n+        for (var i = 0; i < moduleNames.length; i++) {\n+            if (moduleNames[i].indexOf(x) === 0) {\n+                return moduleNames[i];\n             }\n         }\n+        return false;\n+    }\n \n-        function loadAsDirectorySync (x) {\n-            x = x.replace(/\\/+$/, '');\n-            return loadAsFileSync(x + '/index');\n+    function loadAsFileSync (x) {\n+        //if (x.charAt(0) !== '.' && require.modules['.' + x]) {\n+        //  return '.' + x;\n+        //}\n+        if (require.modules[x] || (x = matchWithModules(x))) {\n+            return x;\n         }\n+    }\n \n-        function loadNodeModulesSync (x, start) {\n-            var dirs = nodeModulesPathsSync(start);\n-            for (var i = 0; i < dirs.length; i++) {\n-                var dir = dirs[i];\n-                var m = loadAsFileSync(dir + '/' + x);\n-                if (m) return m;\n-                var n = loadAsDirectorySync(dir + '/' + x);\n-                if (n) return n;\n-            }\n+    function loadAsDirectorySync (x) {\n+        x = x.replace(/\\/+$/, '');\n+        return loadAsFileSync(x + '/index');\n+    }\n \n-            var m = loadAsFileSync(x);\n+    function loadNodeModulesSync (x, start) {\n+        var dirs = nodeModulesPathsSync(start);\n+        for (var i = 0; i < dirs.length; i++) {\n+            var dir = dirs[i];\n+            var m = loadAsFileSync(dir + '/' + x);\n             if (m) return m;\n+            var n = loadAsDirectorySync(dir + '/' + x);\n+            if (n) return n;\n         }\n \n-        function nodeModulesPathsSync (start) {\n-            var parts;\n-            if (start === '/') parts = [ '' ];\n-            else parts = path.normalize(start).split('/');\n+        var m = loadAsFileSync(x);",
        "path": "lib/client/system/libs/browserify.js",
        "position": null,
        "original_position": 119,
        "commit_id": "71af4fe6e70154221202a299822ca337fecebd74",
        "original_commit_id": "6917adea6bb440ebbafe0576a11b505416f76cb3",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'m' is already defined.\n",
        "created_at": "2015-03-31T22:45:31Z",
        "updated_at": "2015-04-04T07:19:01Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/521#discussion_r27530724",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/521",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27530724"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/521#discussion_r27530724"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/521"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27530725",
        "pull_request_review_id": null,
        "id": 27530725,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NTMwNzI1",
        "diff_hunk": "@@ -21,77 +20,78 @@ require._core = {\n     'vm': true\n };\n \n-require.resolve = (function () {\n-    return function (x, cwd) {\n-        if (!cwd) cwd = '/';\n+require.resolve = function (x, cwd) {\n+    if (!cwd) cwd = '/';\n \n-        if (require._core[x]) return x;\n-        var path = require.modules.path();\n-        cwd = path.resolve('/', cwd);\n-        var y = cwd || '/';\n+    if (require._core[x]) return x;\n+    var path = require.modules.path();\n+    //cwd = path.resolve('/', cwd); // ruins require of builtin/sub-module\n \n-        if (x.match(/^(?:\\.\\.?\\/|\\/)/)) {\n-            var m = loadAsFileSync(path.resolve(y, x))\n-                || loadAsDirectorySync(path.resolve(y, x));\n-            if (m) return m;\n-        }\n+    // paths are ../ or ./ or /\n+    if (x.match(/^(?:\\.\\.?\\/|\\/)/)) {\n+        var m = loadAsFileSync(path.resolve(cwd, x))\n+            || loadAsDirectorySync(path.resolve(cwd, x));\n+        if (m) return m;\n+    }\n \n-        var n = loadNodeModulesSync(x, y);\n-        if (n) return n;\n+    var n = loadNodeModulesSync(x, cwd);\n+    if (n) return n;\n \n-        throw new Error(\"Cannot find module '\" + x + \"'\");\n+    throw new Error(\"Cannot find module '\" + x + \"' within '\"+cwd+\"'\");\n \n-        function matchWithModules (x) {\n-            var moduleNames = Object.keys(require.modules);\n-            for (var i = 0; i < moduleNames.length; i++) {\n-                if (moduleNames[i].indexOf(x) === 0) {\n-                    return moduleNames[i];\n-                }\n-            }\n-            return false;\n-        }\n-\n-        function loadAsFileSync (x) {\n-            if (require.modules[x] || (x = matchWithModules(x))) {\n-                return x;\n+    function matchWithModules (x) {\n+        var moduleNames = Object.keys(require.modules);\n+        for (var i = 0; i < moduleNames.length; i++) {\n+            if (moduleNames[i].indexOf(x) === 0) {\n+                return moduleNames[i];\n             }\n         }\n+        return false;\n+    }\n \n-        function loadAsDirectorySync (x) {\n-            x = x.replace(/\\/+$/, '');\n-            return loadAsFileSync(x + '/index');\n+    function loadAsFileSync (x) {\n+        //if (x.charAt(0) !== '.' && require.modules['.' + x]) {\n+        //  return '.' + x;\n+        //}\n+        if (require.modules[x] || (x = matchWithModules(x))) {\n+            return x;\n         }\n+    }\n \n-        function loadNodeModulesSync (x, start) {\n-            var dirs = nodeModulesPathsSync(start);\n-            for (var i = 0; i < dirs.length; i++) {\n-                var dir = dirs[i];\n-                var m = loadAsFileSync(dir + '/' + x);\n-                if (m) return m;\n-                var n = loadAsDirectorySync(dir + '/' + x);\n-                if (n) return n;\n-            }\n+    function loadAsDirectorySync (x) {\n+        x = x.replace(/\\/+$/, '');\n+        return loadAsFileSync(x + '/index');\n+    }\n \n-            var m = loadAsFileSync(x);\n+    function loadNodeModulesSync (x, start) {\n+        var dirs = nodeModulesPathsSync(start);\n+        for (var i = 0; i < dirs.length; i++) {\n+            var dir = dirs[i];\n+            var m = loadAsFileSync(dir + '/' + x);\n             if (m) return m;\n+            var n = loadAsDirectorySync(dir + '/' + x);\n+            if (n) return n;\n         }\n \n-        function nodeModulesPathsSync (start) {\n-            var parts;\n-            if (start === '/') parts = [ '' ];\n-            else parts = path.normalize(start).split('/');\n+        var m = loadAsFileSync(x);\n+        if (m) return m;",
        "path": "lib/client/system/libs/browserify.js",
        "position": null,
        "original_position": 120,
        "commit_id": "71af4fe6e70154221202a299822ca337fecebd74",
        "original_commit_id": "6917adea6bb440ebbafe0576a11b505416f76cb3",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Expected '{' and instead saw 'return'.\n",
        "created_at": "2015-03-31T22:45:31Z",
        "updated_at": "2015-04-04T07:19:01Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/521#discussion_r27530725",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/521",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27530725"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/521#discussion_r27530725"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/521"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27530726",
        "pull_request_review_id": null,
        "id": 27530726,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NTMwNzI2",
        "diff_hunk": "@@ -21,77 +20,78 @@ require._core = {\n     'vm': true\n };\n \n-require.resolve = (function () {\n-    return function (x, cwd) {\n-        if (!cwd) cwd = '/';\n+require.resolve = function (x, cwd) {\n+    if (!cwd) cwd = '/';\n \n-        if (require._core[x]) return x;\n-        var path = require.modules.path();\n-        cwd = path.resolve('/', cwd);\n-        var y = cwd || '/';\n+    if (require._core[x]) return x;\n+    var path = require.modules.path();\n+    //cwd = path.resolve('/', cwd); // ruins require of builtin/sub-module\n \n-        if (x.match(/^(?:\\.\\.?\\/|\\/)/)) {\n-            var m = loadAsFileSync(path.resolve(y, x))\n-                || loadAsDirectorySync(path.resolve(y, x));\n-            if (m) return m;\n-        }\n+    // paths are ../ or ./ or /\n+    if (x.match(/^(?:\\.\\.?\\/|\\/)/)) {\n+        var m = loadAsFileSync(path.resolve(cwd, x))\n+            || loadAsDirectorySync(path.resolve(cwd, x));\n+        if (m) return m;\n+    }\n \n-        var n = loadNodeModulesSync(x, y);\n-        if (n) return n;\n+    var n = loadNodeModulesSync(x, cwd);\n+    if (n) return n;\n \n-        throw new Error(\"Cannot find module '\" + x + \"'\");\n+    throw new Error(\"Cannot find module '\" + x + \"' within '\"+cwd+\"'\");\n \n-        function matchWithModules (x) {\n-            var moduleNames = Object.keys(require.modules);\n-            for (var i = 0; i < moduleNames.length; i++) {\n-                if (moduleNames[i].indexOf(x) === 0) {\n-                    return moduleNames[i];\n-                }\n-            }\n-            return false;\n-        }\n-\n-        function loadAsFileSync (x) {\n-            if (require.modules[x] || (x = matchWithModules(x))) {\n-                return x;\n+    function matchWithModules (x) {\n+        var moduleNames = Object.keys(require.modules);\n+        for (var i = 0; i < moduleNames.length; i++) {\n+            if (moduleNames[i].indexOf(x) === 0) {\n+                return moduleNames[i];\n             }\n         }\n+        return false;\n+    }\n \n-        function loadAsDirectorySync (x) {\n-            x = x.replace(/\\/+$/, '');\n-            return loadAsFileSync(x + '/index');\n+    function loadAsFileSync (x) {\n+        //if (x.charAt(0) !== '.' && require.modules['.' + x]) {\n+        //  return '.' + x;\n+        //}\n+        if (require.modules[x] || (x = matchWithModules(x))) {\n+            return x;\n         }\n+    }\n \n-        function loadNodeModulesSync (x, start) {\n-            var dirs = nodeModulesPathsSync(start);\n-            for (var i = 0; i < dirs.length; i++) {\n-                var dir = dirs[i];\n-                var m = loadAsFileSync(dir + '/' + x);\n-                if (m) return m;\n-                var n = loadAsDirectorySync(dir + '/' + x);\n-                if (n) return n;\n-            }\n+    function loadAsDirectorySync (x) {\n+        x = x.replace(/\\/+$/, '');\n+        return loadAsFileSync(x + '/index');\n+    }\n \n-            var m = loadAsFileSync(x);\n+    function loadNodeModulesSync (x, start) {\n+        var dirs = nodeModulesPathsSync(start);\n+        for (var i = 0; i < dirs.length; i++) {\n+            var dir = dirs[i];\n+            var m = loadAsFileSync(dir + '/' + x);\n             if (m) return m;\n+            var n = loadAsDirectorySync(dir + '/' + x);\n+            if (n) return n;\n         }\n \n-        function nodeModulesPathsSync (start) {\n-            var parts;\n-            if (start === '/') parts = [ '' ];\n-            else parts = path.normalize(start).split('/');\n+        var m = loadAsFileSync(x);\n+        if (m) return m;\n+    }\n \n-            var dirs = [];\n-            for (var i = parts.length - 1; i >= 0; i--) {\n-                if (parts[i] === 'node_modules') continue;\n-                var dir = parts.slice(0, i + 1).join('/') + '/node_modules';\n-                dirs.push(dir);\n-            }\n+    function nodeModulesPathsSync (start) {\n+        var parts;\n+        if (start === '/') parts = [ '' ];",
        "path": "lib/client/system/libs/browserify.js",
        "position": null,
        "original_position": 131,
        "commit_id": "71af4fe6e70154221202a299822ca337fecebd74",
        "original_commit_id": "6917adea6bb440ebbafe0576a11b505416f76cb3",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Expected '{' and instead saw 'parts'.\n",
        "created_at": "2015-03-31T22:45:31Z",
        "updated_at": "2015-04-04T07:19:01Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/521#discussion_r27530726",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/521",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27530726"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/521#discussion_r27530726"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/521"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27740267",
        "pull_request_review_id": null,
        "id": 27740267,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzQwMjY3",
        "diff_hunk": "@@ -2,96 +2,46 @@\n \n window.require = function (file, cwd) {\n     var resolved = require.resolve(file, cwd || '/');\n-    var mod = require.modules[resolved];\n+    var mod = require.modules[resolved] || require.initModule(resolved);\n     if (!mod) throw new Error(\n         'Failed to resolve module ' + file + ', tried ' + resolved\n     );\n-    var res = mod._cached ? mod._cached : mod();\n-    return res;\n-}\n+    return mod._cached ? mod._cached : mod();\n+};\n \n require.paths = [];\n require.modules = {};\n \n require._core = {\n-    'assert': true,\n-    'events': true,\n-    'fs': true,\n+    'events': true, // FUTURE_WORK, support events?\n     'path': true,\n-    'vm': true\n+    'vm': true // FUTURE_WORK, support vm ?\n };\n \n-require.resolve = (function () {\n-    return function (x, cwd) {\n-        if (!cwd) cwd = '/';\n-\n-        if (require._core[x]) return x;\n-        var path = require.modules.path();\n-        cwd = path.resolve('/', cwd);\n-        var y = cwd || '/';\n-\n-        if (x.match(/^(?:\\.\\.?\\/|\\/)/)) {\n-            var m = loadAsFileSync(path.resolve(y, x))\n-                || loadAsDirectorySync(path.resolve(y, x));\n-            if (m) return m;\n-        }\n-\n-        var n = loadNodeModulesSync(x, y);\n-        if (n) return n;\n-\n-        throw new Error(\"Cannot find module '\" + x + \"'\");\n-\n-        function matchWithModules (x) {\n-            var moduleNames = Object.keys(require.modules);\n-            for (var i = 0; i < moduleNames.length; i++) {\n-                if (moduleNames[i].indexOf(x) === 0) {\n-                    return moduleNames[i];\n-                }\n-            }\n-            return false;\n-        }\n-\n-        function loadAsFileSync (x) {\n-            if (require.modules[x] || (x = matchWithModules(x))) {\n-                return x;\n-            }\n-        }\n-\n-        function loadAsDirectorySync (x) {\n-            x = x.replace(/\\/+$/, '');\n-            return loadAsFileSync(x + '/index');\n-        }\n+require.resolve = function (x, cwd) {\n+  if (!cwd) cwd = '/';",
        "path": "lib/client/system/libs/browserify.js",
        "position": null,
        "original_position": 69,
        "commit_id": "71af4fe6e70154221202a299822ca337fecebd74",
        "original_commit_id": "2a41ea95804d52444108955bc1041288ab94aba3",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Expected '{' and instead saw 'cwd'.\n",
        "created_at": "2015-04-03T17:00:26Z",
        "updated_at": "2015-04-04T07:19:01Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/521#discussion_r27740267",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/521",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27740267"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/521#discussion_r27740267"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/521"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27740268",
        "pull_request_review_id": null,
        "id": 27740268,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzQwMjY4",
        "diff_hunk": "@@ -2,96 +2,46 @@\n \n window.require = function (file, cwd) {\n     var resolved = require.resolve(file, cwd || '/');\n-    var mod = require.modules[resolved];\n+    var mod = require.modules[resolved] || require.initModule(resolved);\n     if (!mod) throw new Error(\n         'Failed to resolve module ' + file + ', tried ' + resolved\n     );\n-    var res = mod._cached ? mod._cached : mod();\n-    return res;\n-}\n+    return mod._cached ? mod._cached : mod();\n+};\n \n require.paths = [];\n require.modules = {};\n \n require._core = {\n-    'assert': true,\n-    'events': true,\n-    'fs': true,\n+    'events': true, // FUTURE_WORK, support events?\n     'path': true,\n-    'vm': true\n+    'vm': true // FUTURE_WORK, support vm ?\n };\n \n-require.resolve = (function () {\n-    return function (x, cwd) {\n-        if (!cwd) cwd = '/';\n-\n-        if (require._core[x]) return x;\n-        var path = require.modules.path();\n-        cwd = path.resolve('/', cwd);\n-        var y = cwd || '/';\n-\n-        if (x.match(/^(?:\\.\\.?\\/|\\/)/)) {\n-            var m = loadAsFileSync(path.resolve(y, x))\n-                || loadAsDirectorySync(path.resolve(y, x));\n-            if (m) return m;\n-        }\n-\n-        var n = loadNodeModulesSync(x, y);\n-        if (n) return n;\n-\n-        throw new Error(\"Cannot find module '\" + x + \"'\");\n-\n-        function matchWithModules (x) {\n-            var moduleNames = Object.keys(require.modules);\n-            for (var i = 0; i < moduleNames.length; i++) {\n-                if (moduleNames[i].indexOf(x) === 0) {\n-                    return moduleNames[i];\n-                }\n-            }\n-            return false;\n-        }\n-\n-        function loadAsFileSync (x) {\n-            if (require.modules[x] || (x = matchWithModules(x))) {\n-                return x;\n-            }\n-        }\n-\n-        function loadAsDirectorySync (x) {\n-            x = x.replace(/\\/+$/, '');\n-            return loadAsFileSync(x + '/index');\n-        }\n+require.resolve = function (x, cwd) {\n+  if (!cwd) cwd = '/';\n \n-        function loadNodeModulesSync (x, start) {\n-            var dirs = nodeModulesPathsSync(start);\n-            for (var i = 0; i < dirs.length; i++) {\n-                var dir = dirs[i];\n-                var m = loadAsFileSync(dir + '/' + x);\n-                if (m) return m;\n-                var n = loadAsDirectorySync(dir + '/' + x);\n-                if (n) return n;\n-            }\n+  if (require._core[x]) return x;",
        "path": "lib/client/system/libs/browserify.js",
        "position": null,
        "original_position": 80,
        "commit_id": "71af4fe6e70154221202a299822ca337fecebd74",
        "original_commit_id": "2a41ea95804d52444108955bc1041288ab94aba3",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Expected '{' and instead saw 'return'.\n",
        "created_at": "2015-04-03T17:00:26Z",
        "updated_at": "2015-04-04T07:19:01Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/521#discussion_r27740268",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/521",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27740268"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/521#discussion_r27740268"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/521"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27740269",
        "pull_request_review_id": null,
        "id": 27740269,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzQwMjY5",
        "diff_hunk": "@@ -2,96 +2,46 @@\n \n window.require = function (file, cwd) {\n     var resolved = require.resolve(file, cwd || '/');\n-    var mod = require.modules[resolved];\n+    var mod = require.modules[resolved] || require.initModule(resolved);\n     if (!mod) throw new Error(\n         'Failed to resolve module ' + file + ', tried ' + resolved\n     );\n-    var res = mod._cached ? mod._cached : mod();\n-    return res;\n-}\n+    return mod._cached ? mod._cached : mod();\n+};\n \n require.paths = [];\n require.modules = {};\n \n require._core = {\n-    'assert': true,\n-    'events': true,\n-    'fs': true,\n+    'events': true, // FUTURE_WORK, support events?\n     'path': true,\n-    'vm': true\n+    'vm': true // FUTURE_WORK, support vm ?\n };\n \n-require.resolve = (function () {\n-    return function (x, cwd) {\n-        if (!cwd) cwd = '/';\n-\n-        if (require._core[x]) return x;\n-        var path = require.modules.path();\n-        cwd = path.resolve('/', cwd);\n-        var y = cwd || '/';\n-\n-        if (x.match(/^(?:\\.\\.?\\/|\\/)/)) {\n-            var m = loadAsFileSync(path.resolve(y, x))\n-                || loadAsDirectorySync(path.resolve(y, x));\n-            if (m) return m;\n-        }\n-\n-        var n = loadNodeModulesSync(x, y);\n-        if (n) return n;\n-\n-        throw new Error(\"Cannot find module '\" + x + \"'\");\n-\n-        function matchWithModules (x) {\n-            var moduleNames = Object.keys(require.modules);\n-            for (var i = 0; i < moduleNames.length; i++) {\n-                if (moduleNames[i].indexOf(x) === 0) {\n-                    return moduleNames[i];\n-                }\n-            }\n-            return false;\n-        }\n-\n-        function loadAsFileSync (x) {\n-            if (require.modules[x] || (x = matchWithModules(x))) {\n-                return x;\n-            }\n-        }\n-\n-        function loadAsDirectorySync (x) {\n-            x = x.replace(/\\/+$/, '');\n-            return loadAsFileSync(x + '/index');\n-        }\n+require.resolve = function (x, cwd) {\n+  if (!cwd) cwd = '/';\n \n-        function loadNodeModulesSync (x, start) {\n-            var dirs = nodeModulesPathsSync(start);\n-            for (var i = 0; i < dirs.length; i++) {\n-                var dir = dirs[i];\n-                var m = loadAsFileSync(dir + '/' + x);\n-                if (m) return m;\n-                var n = loadAsDirectorySync(dir + '/' + x);\n-                if (n) return n;\n-            }\n+  if (require._core[x]) return x;\n+  var path = require.modules.path();\n+  //cwd = path.resolve('/', cwd); // ruins require of builtin/sub-module\n \n-            var m = loadAsFileSync(x);\n-            if (m) return m;\n-        }\n+  // paths are ../ or ./ or /\n+  x = x.match(/^(?:\\.\\.?\\/|\\/)/) ? path.resolve(cwd,x) : x;\n \n-        function nodeModulesPathsSync (start) {\n-            var parts;\n-            if (start === '/') parts = [ '' ];\n-            else parts = path.normalize(start).split('/');\n+  var resolved = firstMatch(\n+    x, // as a file\n+    path.join(x,'index') // as a directory\n+  );\n+  if (resolved) return resolved;",
        "path": "lib/client/system/libs/browserify.js",
        "position": null,
        "original_position": 98,
        "commit_id": "71af4fe6e70154221202a299822ca337fecebd74",
        "original_commit_id": "2a41ea95804d52444108955bc1041288ab94aba3",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Expected '{' and instead saw 'return'.\n",
        "created_at": "2015-04-03T17:00:26Z",
        "updated_at": "2015-04-04T07:19:01Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/521#discussion_r27740269",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/521",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27740269"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/521#discussion_r27740269"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/521"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27740270",
        "pull_request_review_id": null,
        "id": 27740270,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzQwMjcw",
        "diff_hunk": "@@ -2,96 +2,46 @@\n \n window.require = function (file, cwd) {\n     var resolved = require.resolve(file, cwd || '/');\n-    var mod = require.modules[resolved];\n+    var mod = require.modules[resolved] || require.initModule(resolved);\n     if (!mod) throw new Error(\n         'Failed to resolve module ' + file + ', tried ' + resolved\n     );\n-    var res = mod._cached ? mod._cached : mod();\n-    return res;\n-}\n+    return mod._cached ? mod._cached : mod();\n+};\n \n require.paths = [];\n require.modules = {};\n \n require._core = {\n-    'assert': true,\n-    'events': true,\n-    'fs': true,\n+    'events': true, // FUTURE_WORK, support events?\n     'path': true,\n-    'vm': true\n+    'vm': true // FUTURE_WORK, support vm ?\n };\n \n-require.resolve = (function () {\n-    return function (x, cwd) {\n-        if (!cwd) cwd = '/';\n-\n-        if (require._core[x]) return x;\n-        var path = require.modules.path();\n-        cwd = path.resolve('/', cwd);\n-        var y = cwd || '/';\n-\n-        if (x.match(/^(?:\\.\\.?\\/|\\/)/)) {\n-            var m = loadAsFileSync(path.resolve(y, x))\n-                || loadAsDirectorySync(path.resolve(y, x));\n-            if (m) return m;\n-        }\n-\n-        var n = loadNodeModulesSync(x, y);\n-        if (n) return n;\n-\n-        throw new Error(\"Cannot find module '\" + x + \"'\");\n-\n-        function matchWithModules (x) {\n-            var moduleNames = Object.keys(require.modules);\n-            for (var i = 0; i < moduleNames.length; i++) {\n-                if (moduleNames[i].indexOf(x) === 0) {\n-                    return moduleNames[i];\n-                }\n-            }\n-            return false;\n-        }\n-\n-        function loadAsFileSync (x) {\n-            if (require.modules[x] || (x = matchWithModules(x))) {\n-                return x;\n-            }\n-        }\n-\n-        function loadAsDirectorySync (x) {\n-            x = x.replace(/\\/+$/, '');\n-            return loadAsFileSync(x + '/index');\n-        }\n+require.resolve = function (x, cwd) {\n+  if (!cwd) cwd = '/';\n \n-        function loadNodeModulesSync (x, start) {\n-            var dirs = nodeModulesPathsSync(start);\n-            for (var i = 0; i < dirs.length; i++) {\n-                var dir = dirs[i];\n-                var m = loadAsFileSync(dir + '/' + x);\n-                if (m) return m;\n-                var n = loadAsDirectorySync(dir + '/' + x);\n-                if (n) return n;\n-            }\n+  if (require._core[x]) return x;\n+  var path = require.modules.path();\n+  //cwd = path.resolve('/', cwd); // ruins require of builtin/sub-module\n \n-            var m = loadAsFileSync(x);\n-            if (m) return m;\n-        }\n+  // paths are ../ or ./ or /\n+  x = x.match(/^(?:\\.\\.?\\/|\\/)/) ? path.resolve(cwd,x) : x;\n \n-        function nodeModulesPathsSync (start) {\n-            var parts;\n-            if (start === '/') parts = [ '' ];\n-            else parts = path.normalize(start).split('/');\n+  var resolved = firstMatch(\n+    x, // as a file\n+    path.join(x,'index') // as a directory\n+  );\n+  if (resolved) return resolved;\n \n-            var dirs = [];\n-            for (var i = parts.length - 1; i >= 0; i--) {\n-                if (parts[i] === 'node_modules') continue;\n-                var dir = parts.slice(0, i + 1).join('/') + '/node_modules';\n-                dirs.push(dir);\n-            }\n+  throw new Error(\"Cannot find module '\" + x + \"' within '\"+cwd+\"'\");",
        "path": "lib/client/system/libs/browserify.js",
        "position": 107,
        "original_position": 106,
        "commit_id": "71af4fe6e70154221202a299822ca337fecebd74",
        "original_commit_id": "2a41ea95804d52444108955bc1041288ab94aba3",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Mixed double and single quotes.\n",
        "created_at": "2015-04-03T17:00:27Z",
        "updated_at": "2015-04-04T07:19:01Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/521#discussion_r27740270",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/521",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27740270"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/521#discussion_r27740270"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/521"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27740271",
        "pull_request_review_id": null,
        "id": 27740271,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzQwMjcx",
        "diff_hunk": "@@ -2,96 +2,46 @@\n \n window.require = function (file, cwd) {\n     var resolved = require.resolve(file, cwd || '/');\n-    var mod = require.modules[resolved];\n+    var mod = require.modules[resolved] || require.initModule(resolved);\n     if (!mod) throw new Error(\n         'Failed to resolve module ' + file + ', tried ' + resolved\n     );\n-    var res = mod._cached ? mod._cached : mod();\n-    return res;\n-}\n+    return mod._cached ? mod._cached : mod();\n+};\n \n require.paths = [];\n require.modules = {};\n \n require._core = {\n-    'assert': true,\n-    'events': true,\n-    'fs': true,\n+    'events': true, // FUTURE_WORK, support events?\n     'path': true,\n-    'vm': true\n+    'vm': true // FUTURE_WORK, support vm ?\n };\n \n-require.resolve = (function () {\n-    return function (x, cwd) {\n-        if (!cwd) cwd = '/';\n-\n-        if (require._core[x]) return x;\n-        var path = require.modules.path();\n-        cwd = path.resolve('/', cwd);\n-        var y = cwd || '/';\n-\n-        if (x.match(/^(?:\\.\\.?\\/|\\/)/)) {\n-            var m = loadAsFileSync(path.resolve(y, x))\n-                || loadAsDirectorySync(path.resolve(y, x));\n-            if (m) return m;\n-        }\n-\n-        var n = loadNodeModulesSync(x, y);\n-        if (n) return n;\n-\n-        throw new Error(\"Cannot find module '\" + x + \"'\");\n-\n-        function matchWithModules (x) {\n-            var moduleNames = Object.keys(require.modules);\n-            for (var i = 0; i < moduleNames.length; i++) {\n-                if (moduleNames[i].indexOf(x) === 0) {\n-                    return moduleNames[i];\n-                }\n-            }\n-            return false;\n-        }\n-\n-        function loadAsFileSync (x) {\n-            if (require.modules[x] || (x = matchWithModules(x))) {\n-                return x;\n-            }\n-        }\n-\n-        function loadAsDirectorySync (x) {\n-            x = x.replace(/\\/+$/, '');\n-            return loadAsFileSync(x + '/index');\n-        }\n+require.resolve = function (x, cwd) {\n+  if (!cwd) cwd = '/';\n \n-        function loadNodeModulesSync (x, start) {\n-            var dirs = nodeModulesPathsSync(start);\n-            for (var i = 0; i < dirs.length; i++) {\n-                var dir = dirs[i];\n-                var m = loadAsFileSync(dir + '/' + x);\n-                if (m) return m;\n-                var n = loadAsDirectorySync(dir + '/' + x);\n-                if (n) return n;\n-            }\n+  if (require._core[x]) return x;\n+  var path = require.modules.path();\n+  //cwd = path.resolve('/', cwd); // ruins require of builtin/sub-module\n \n-            var m = loadAsFileSync(x);\n-            if (m) return m;\n-        }\n+  // paths are ../ or ./ or /\n+  x = x.match(/^(?:\\.\\.?\\/|\\/)/) ? path.resolve(cwd,x) : x;\n \n-        function nodeModulesPathsSync (start) {\n-            var parts;\n-            if (start === '/') parts = [ '' ];\n-            else parts = path.normalize(start).split('/');\n+  var resolved = firstMatch(\n+    x, // as a file\n+    path.join(x,'index') // as a directory\n+  );\n+  if (resolved) return resolved;\n \n-            var dirs = [];\n-            for (var i = parts.length - 1; i >= 0; i--) {\n-                if (parts[i] === 'node_modules') continue;\n-                var dir = parts.slice(0, i + 1).join('/') + '/node_modules';\n-                dirs.push(dir);\n-            }\n+  throw new Error(\"Cannot find module '\" + x + \"' within '\"+cwd+\"'\");\n \n-            return dirs;\n-        }\n-    };\n-})();\n+  function firstMatch() {\n+    for(var i= 0,a; a = arguments[i]; ++i) {",
        "path": "lib/client/system/libs/browserify.js",
        "position": null,
        "original_position": 113,
        "commit_id": "71af4fe6e70154221202a299822ca337fecebd74",
        "original_commit_id": "2a41ea95804d52444108955bc1041288ab94aba3",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Expected a conditional expression and instead saw an assignment.\n",
        "created_at": "2015-04-03T17:00:27Z",
        "updated_at": "2015-04-04T07:19:01Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/521#discussion_r27740271",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/521",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27740271"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/521#discussion_r27740271"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/521"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27740272",
        "pull_request_review_id": null,
        "id": 27740272,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzQwMjcy",
        "diff_hunk": "@@ -191,140 +142,141 @@ if (!process.binding) process.binding = function (name) {\n \n if (!process.cwd) process.cwd = function () { return '.' };\n \n-require.define(\"path\", function (require, module, exports, __dirname, __filename) {\n-function filter (xs, fn) {\n-    var res = [];\n-    for (var i = 0; i < xs.length; i++) {\n-        if (fn(xs[i], i, xs)) res.push(xs[i]);\n-    }\n-    return res;\n-}\n-\n-// resolves . and .. elements in a path array with directory names there\n-// must be no slashes, empty elements, or device names (c:\\) in the array\n-// (so also no leading and trailing slashes - it does not distinguish\n-// relative and absolute paths)\n-function normalizeArray(parts, allowAboveRoot) {\n-  // if the path tries to go above the root, `up` ends up > 0\n-  var up = 0;\n-  for (var i = parts.length; i >= 0; i--) {\n-    var last = parts[i];\n-    if (last == '.') {\n-      parts.splice(i, 1);\n-    } else if (last === '..') {\n-      parts.splice(i, 1);\n-      up++;\n-    } else if (up) {\n-      parts.splice(i, 1);\n-      up--;\n-    }\n+require.define(\"path\", function (require, module, exports) {",
        "path": "lib/client/system/libs/browserify.js",
        "position": 161,
        "original_position": 160,
        "commit_id": "71af4fe6e70154221202a299822ca337fecebd74",
        "original_commit_id": "2a41ea95804d52444108955bc1041288ab94aba3",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Mixed double and single quotes.\n",
        "created_at": "2015-04-03T17:00:27Z",
        "updated_at": "2015-04-04T07:19:01Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/521#discussion_r27740272",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/521",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27740272"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/521#discussion_r27740272"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/521"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27740273",
        "pull_request_review_id": null,
        "id": 27740273,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzQwMjcz",
        "diff_hunk": "@@ -191,140 +142,141 @@ if (!process.binding) process.binding = function (name) {\n \n if (!process.cwd) process.cwd = function () { return '.' };\n \n-require.define(\"path\", function (require, module, exports, __dirname, __filename) {\n-function filter (xs, fn) {\n-    var res = [];\n-    for (var i = 0; i < xs.length; i++) {\n-        if (fn(xs[i], i, xs)) res.push(xs[i]);\n-    }\n-    return res;\n-}\n-\n-// resolves . and .. elements in a path array with directory names there\n-// must be no slashes, empty elements, or device names (c:\\) in the array\n-// (so also no leading and trailing slashes - it does not distinguish\n-// relative and absolute paths)\n-function normalizeArray(parts, allowAboveRoot) {\n-  // if the path tries to go above the root, `up` ends up > 0\n-  var up = 0;\n-  for (var i = parts.length; i >= 0; i--) {\n-    var last = parts[i];\n-    if (last == '.') {\n-      parts.splice(i, 1);\n-    } else if (last === '..') {\n-      parts.splice(i, 1);\n-      up++;\n-    } else if (up) {\n-      parts.splice(i, 1);\n-      up--;\n-    }\n+require.define(\"path\", function (require, module, exports) {\n+  // deprecated. Array.filter will be used in the future ES5 shim required for older browsers.\n+  function filter (xs, fn) {\n+      var res = [];\n+      for (var i = 0; i < xs.length; i++) {\n+          if (fn(xs[i], i, xs)) res.push(xs[i]);",
        "path": "lib/client/system/libs/browserify.js",
        "position": 166,
        "original_position": 165,
        "commit_id": "71af4fe6e70154221202a299822ca337fecebd74",
        "original_commit_id": "2a41ea95804d52444108955bc1041288ab94aba3",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Expected '{' and instead saw 'res'.\n",
        "created_at": "2015-04-03T17:00:27Z",
        "updated_at": "2015-04-04T07:19:01Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/521#discussion_r27740273",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/521",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27740273"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/521#discussion_r27740273"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/521"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27740274",
        "pull_request_review_id": null,
        "id": 27740274,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzQwMjc0",
        "diff_hunk": "@@ -191,140 +142,141 @@ if (!process.binding) process.binding = function (name) {\n \n if (!process.cwd) process.cwd = function () { return '.' };\n \n-require.define(\"path\", function (require, module, exports, __dirname, __filename) {\n-function filter (xs, fn) {\n-    var res = [];\n-    for (var i = 0; i < xs.length; i++) {\n-        if (fn(xs[i], i, xs)) res.push(xs[i]);\n-    }\n-    return res;\n-}\n-\n-// resolves . and .. elements in a path array with directory names there\n-// must be no slashes, empty elements, or device names (c:\\) in the array\n-// (so also no leading and trailing slashes - it does not distinguish\n-// relative and absolute paths)\n-function normalizeArray(parts, allowAboveRoot) {\n-  // if the path tries to go above the root, `up` ends up > 0\n-  var up = 0;\n-  for (var i = parts.length; i >= 0; i--) {\n-    var last = parts[i];\n-    if (last == '.') {\n-      parts.splice(i, 1);\n-    } else if (last === '..') {\n-      parts.splice(i, 1);\n-      up++;\n-    } else if (up) {\n-      parts.splice(i, 1);\n-      up--;\n-    }\n+require.define(\"path\", function (require, module, exports) {\n+  // deprecated. Array.filter will be used in the future ES5 shim required for older browsers.\n+  function filter (xs, fn) {\n+      var res = [];\n+      for (var i = 0; i < xs.length; i++) {\n+          if (fn(xs[i], i, xs)) res.push(xs[i]);\n+      }\n+      return res;\n   }\n \n-  // if the path is allowed to go above the root, restore leading ..s\n-  if (allowAboveRoot) {\n-    for (; up--; up) {\n-      parts.unshift('..');\n+  // resolves . and .. elements in a path array with directory names there\n+  // must be no slashes, empty elements, or device names (c:\\) in the array\n+  // (so also no leading and trailing slashes - it does not distinguish\n+  // relative and absolute paths)\n+  function normalizeArray(parts, allowAboveRoot) {\n+    // if the path tries to go above the root, `up` ends up > 0\n+    var up = 0;\n+    for (var i = parts.length; i >= 0; i--) {\n+      var last = parts[i];\n+      if (last == '.') {\n+        parts.splice(i, 1);\n+      } else if (last === '..') {\n+        parts.splice(i, 1);\n+        up++;\n+      } else if (up) {\n+        parts.splice(i, 1);\n+        up--;\n+      }\n     }\n-  }\n-\n-  return parts;\n-}\n-\n-// Regex to split a filename into [*, dir, basename, ext]\n-// posix version\n-var splitPathRe = /^(.+\\/(?!$)|\\/)?((?:.+?)?(\\.[^.]*)?)$/;\n-\n-// path.resolve([from ...], to)\n-// posix version\n-exports.resolve = function() {\n-var resolvedPath = '',\n-    resolvedAbsolute = false;\n \n-for (var i = arguments.length; i >= -1 && !resolvedAbsolute; i--) {\n-  var path = (i >= 0)\n-      ? arguments[i]\n-      : process.cwd();\n+    // if the path is allowed to go above the root, restore leading ..s\n+    if (allowAboveRoot) {\n+      for (; up--; up) {\n+        parts.unshift('..');\n+      }\n+    }\n \n-  // Skip empty and invalid entries\n-  if (typeof path !== 'string' || !path) {\n-    continue;\n+    return parts;\n   }\n \n-  resolvedPath = path + '/' + resolvedPath;\n-  resolvedAbsolute = path.charAt(0) === '/';\n-}\n+  // Regex to split a filename into [*, dir, basename, ext]\n+  // posix version\n+  var splitPathRe = /^(.+\\/(?!$)|\\/)?((?:.+?)?(\\.[^.]*)?)$/;\n \n-// At this point the path should be resolved to a full absolute path, but\n-// handle relative paths to be safe (might happen when process.cwd() fails)\n+  // path.resolve([from ...], to)\n+  // posix version\n+  exports.resolve = function() {\n+  var resolvedPath = '',\n+      resolvedAbsolute = false;\n \n-// Normalize the path\n-resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n-    return !!p;\n-  }), !resolvedAbsolute).join('/');\n+  for (var i = arguments.length; i >= -1 && !resolvedAbsolute; i--) {\n+    var path = (i >= 0)\n+        ? arguments[i]",
        "path": "lib/client/system/libs/browserify.js",
        "position": 247,
        "original_position": 246,
        "commit_id": "71af4fe6e70154221202a299822ca337fecebd74",
        "original_commit_id": "2a41ea95804d52444108955bc1041288ab94aba3",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Bad line breaking before '?'.\n",
        "created_at": "2015-04-03T17:00:28Z",
        "updated_at": "2015-04-04T07:19:01Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/521#discussion_r27740274",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/521",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27740274"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/521#discussion_r27740274"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/521"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27740275",
        "pull_request_review_id": null,
        "id": 27740275,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzQwMjc1",
        "diff_hunk": "@@ -0,0 +1,303 @@\n+'use strict';\n+\n+var path    = require('path'),\n+  vm      = require('vm'),\n+  fs      = require('fs'),\n+  should  = require('should'),\n+  ss      = require( '../../../../lib/socketstream');",
        "path": "test/unit/client/system/browserify.test.js",
        "position": 7,
        "original_position": 7,
        "commit_id": "71af4fe6e70154221202a299822ca337fecebd74",
        "original_commit_id": "2a41ea95804d52444108955bc1041288ab94aba3",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'ss' is defined but never used.\n",
        "created_at": "2015-04-03T17:00:28Z",
        "updated_at": "2015-04-04T07:19:01Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/521#discussion_r27740275",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/521",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27740275"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/521#discussion_r27740275"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/521"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27740277",
        "pull_request_review_id": null,
        "id": 27740277,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzQwMjc3",
        "diff_hunk": "@@ -0,0 +1,303 @@\n+'use strict';\n+\n+var path    = require('path'),\n+  vm      = require('vm'),\n+  fs      = require('fs'),\n+  should  = require('should'),\n+  ss      = require( '../../../../lib/socketstream');\n+\n+/**\n+ * directories are defined with a trailing /\n+ * JS and Coffee files are defined without\n+ * Code should not be registered with their extension\n+ *\n+ *\n+ * resolve:\n+ require(X) from module at path Y\n+ 1. If X is a core module,\n+ a. return the core module\n+ b. STOP\n+ 2. If X begins with './' or '/' or '../'\n+ a. LOAD_AS_FILE(Y + X)\n+ b. LOAD_AS_DIRECTORY(Y + X)\n+ 3. not relevant: LOAD_NODE_MODULES(X, dirname(Y))\n+ 4. THROW \"not found\"\n+\n+ LOAD_AS_FILE(X)\n+ 1. If X is a file, load X as JavaScript text.  STOP\n+ 2. If X.js is a file, load X.js as JavaScript text.  STOP\n+ 3. If X.json is a file, parse X.json to a JavaScript Object.  STOP\n+ 4. If X.node is a file, load X.node as binary addon.  STOP\n+\n+ LOAD_AS_DIRECTORY(X)\n+ 1. If X/package.json is a file,\n+ a. Parse X/package.json, and look for \"main\" field.\n+ b. let M = X + (json main field)\n+ c. LOAD_AS_FILE(M)\n+ 2. If X/index.js is a file, load X/index.js as JavaScript text.  STOP\n+ 3. If X/index.json is a file, parse X/index.json to a JavaScript object. STOP\n+ 4. If X/index.node is a file, load X/index.node as binary addon.  STOP\n+ */\n+describe('browserify', function() {\n+\n+  var browserify = fs.readFileSync( path.join(__dirname,'../../../..', 'lib/client/system/libs/browserify.js')),\n+      browser;\n+\n+  describe('require()', function () {\n+\n+    beforeEach(function() {\n+      browser = (function(){\n+        var window = {document:{}};\n+        window.window = window;\n+        vm.runInNewContext(browserify, window);\n+\n+        return window;\n+      })();\n+    });\n+\n+    it('should be sane',function() {\n+      should(browser.require).be.type('function');\n+    });\n+\n+    it('should have a functioning require.modules.path.resolve',function() {\n+      var bPath = browser.require.modules.path();\n+\n+      bPath.resolve('/').should.be.equal('/');\n+      bPath.resolve('abc/def','./ghi').should.be.equal('abc/def/ghi');\n+      bPath.resolve('foo/bar', '/tmp/file/', '..', 'a/../subfile').should.be.equal('/tmp/subfile');\n+    });\n+\n+    it('should have functioning require.modules.path.dirname',function() {\n+      var bPath = browser.require.modules.path();\n+\n+      bPath.dirname('/a/b/c/d').should.be.equal('/a/b/c');\n+      //bPath.dirname('/a/b/c/d/').should.be.equal('/a/b/c/d');\n+    });\n+\n+    it('should resolve /index directly or indirectly', function() {\n+      browser.require.define('/a/b/c/d',\n+        function(require, module, exports, __dirname, __filename) {",
        "path": "test/unit/client/system/browserify.test.js",
        "position": null,
        "original_position": 79,
        "commit_id": "71af4fe6e70154221202a299822ca337fecebd74",
        "original_commit_id": "2a41ea95804d52444108955bc1041288ab94aba3",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'__filename' is defined but never used.<br>'__dirname' is defined but never used.<br>'exports' is defined but never used.<br>'module' is defined but never used.<br>'require' is defined but never used.\n",
        "created_at": "2015-04-03T17:00:28Z",
        "updated_at": "2015-04-04T07:19:01Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/521#discussion_r27740277",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/521",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27740277"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/521#discussion_r27740277"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/521"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27767335",
        "pull_request_review_id": null,
        "id": 27767335,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzY3MzM1",
        "diff_hunk": "@@ -0,0 +1 @@\n+var e1 = 1;",
        "path": "test/fixtures/project/client/code/extras/e1.js",
        "position": 1,
        "original_position": 1,
        "commit_id": "71af4fe6e70154221202a299822ca337fecebd74",
        "original_commit_id": "71af4fe6e70154221202a299822ca337fecebd74",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'e1' is defined but never used.\n",
        "created_at": "2015-04-04T07:19:15Z",
        "updated_at": "2015-04-04T07:19:15Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/521#discussion_r27767335",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/521",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27767335"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/521#discussion_r27767335"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/521"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27767336",
        "pull_request_review_id": null,
        "id": 27767336,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzY3MzM2",
        "diff_hunk": "@@ -0,0 +1 @@\n+var e2 = 2;",
        "path": "test/fixtures/project/client/code/extras/e2.js",
        "position": 1,
        "original_position": 1,
        "commit_id": "71af4fe6e70154221202a299822ca337fecebd74",
        "original_commit_id": "71af4fe6e70154221202a299822ca337fecebd74",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'e2' is defined but never used.\n",
        "created_at": "2015-04-04T07:19:15Z",
        "updated_at": "2015-04-04T07:19:15Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/521#discussion_r27767336",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/521",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27767336"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/521#discussion_r27767336"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/521"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27767337",
        "pull_request_review_id": null,
        "id": 27767337,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzY3MzM3",
        "diff_hunk": "@@ -0,0 +1 @@\n+var kick = 'off';",
        "path": "test/fixtures/project/client/code/kickoff/entry.js",
        "position": 1,
        "original_position": 1,
        "commit_id": "71af4fe6e70154221202a299822ca337fecebd74",
        "original_commit_id": "71af4fe6e70154221202a299822ca337fecebd74",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'kick' is defined but never used.\n",
        "created_at": "2015-04-04T07:19:15Z",
        "updated_at": "2015-04-04T07:19:15Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/521#discussion_r27767337",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/521",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27767337"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/521#discussion_r27767337"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/521"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27767338",
        "pull_request_review_id": null,
        "id": 27767338,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzY3MzM4",
        "diff_hunk": "@@ -95,6 +95,33 @@ describe('default bundler', function () {\n     });\n   });\n \n+  describe('define code entry point', function() {\n+\n+    afterEach(function() {",
        "path": "test/unit/client/bundler/default.test.js",
        "position": 15,
        "original_position": 15,
        "commit_id": "71af4fe6e70154221202a299822ca337fecebd74",
        "original_commit_id": "71af4fe6e70154221202a299822ca337fecebd74",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'afterEach' is not defined.\n",
        "created_at": "2015-04-04T07:19:15Z",
        "updated_at": "2015-04-04T07:19:15Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/521#discussion_r27767338",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/521",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27767338"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/521#discussion_r27767338"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/521"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27768024",
        "pull_request_review_id": null,
        "id": 27768024,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzY4MDI0",
        "diff_hunk": "@@ -179,13 +179,19 @@ module.exports = function(root) {\n         app.use(settings.strategy.favicon(staticPath + '/favicon.ico'))\n       }\n       if (settings.strategy.session) {\n+        var cookie = {\n+          path: '/',\n+          httpOnly: false,\n+          maxAge: sessionOptions.maxAge,\n+          secure: settings.secure\n+        };\n+        if (settings.strategy.sessionCookie) {\n+          for(var k in settings.strategy.sessionCookie) {",
        "path": "lib/http/index.js",
        "position": 11,
        "original_position": 11,
        "commit_id": "72d6c63189fb0f9f3b1a8de4adb29009529ef88d",
        "original_commit_id": "72d6c63189fb0f9f3b1a8de4adb29009529ef88d",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The body of a for in should be wrapped in an if statement to filter unwanted properties from the prototype.\n",
        "created_at": "2015-04-04T09:52:10Z",
        "updated_at": "2015-04-04T09:52:10Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/523#discussion_r27768024",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/523",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27768024"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/523#discussion_r27768024"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/523"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27787293",
        "pull_request_review_id": null,
        "id": 27787293,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3Nzg3Mjkz",
        "diff_hunk": "@@ -67,12 +67,22 @@ module.exports = function(ss, router, options) {\n   function worker(request, response, path, cb) {\n     var thisUrl = url.parse(request.url),\n       params = qs.parse(thisUrl.query),\n-      bundler = ss.bundler.get(params);\n+      opts = {\n+        //TODO packAssets vs packedAssets\n+        compress: options.packAssets\n+      },\n+      formatter,\n+      entry = {\n+        file: '/workers' + path,\n+        bundle: 'worker',\n+        assetType: 'js',\n+        ext: 'js' //TODO calc\n+      };\n \n-    return bundler.asset(bundler.entryFor('worker',path), {\n-      //TODO packAssets vs packedAssets\n-      compress: options.packAssets\n-    }, cb);\n+    ss.bundler.loadFile(entry, opts, formatter, cb, function(err) {\n+      ss.log.clientIssue({name:'unknown','id':'unknown'},options,err,entry);\n+      cb('console.log(\"error\",\"'+ err.userInfoText +'\")')",
        "path": "lib/client/serve/ondemand.js",
        "position": null,
        "original_position": 23,
        "commit_id": "c26e403b88fbefd7dedee74a2d54aad54818455d",
        "original_commit_id": "1a5c91f408712a9ceccbe216cd092a26d2309ef8",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Missing semicolon.\n",
        "created_at": "2015-04-06T07:11:19Z",
        "updated_at": "2015-04-07T18:33:08Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/526#discussion_r27787293",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/526",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27787293"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/526#discussion_r27787293"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/526"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27787294",
        "pull_request_review_id": null,
        "id": 27787294,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3Nzg3Mjk0",
        "diff_hunk": "@@ -1,16 +1,65 @@\n 'use strict';\n \n+var path    = require('path'),\n+  should  = require('should'),\n+  ss      = require( '../../../../lib/socketstream'),\n+  Router = require('../../../../lib/http/router').Router,\n+  options = ss.client.options,\n+  defineAbcClient = require('../abcClient');\n+\n+var responseStub = {\n+  writeHead: function(status,headers) {},\n+  end: function(body) {\n+    this.body = body;\n+  }\n+};\n \n \n describe('production mode asset server', function () {\n \n+  var router = new Router();\n+\n+\n+  beforeEach(function() {\n+\n+    // back to initial client state\n+    ss.client.assets.unload();\n+    ss.client.assets.load();\n+    ss.client.formatters.add('javascript');\n+  });\n+\n+  afterEach(function() {",
        "path": "test/unit/client/serve/ondemand.test.js",
        "position": null,
        "original_position": 31,
        "commit_id": "c26e403b88fbefd7dedee74a2d54aad54818455d",
        "original_commit_id": "1a5c91f408712a9ceccbe216cd092a26d2309ef8",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'afterEach' is not defined.\n",
        "created_at": "2015-04-06T07:11:19Z",
        "updated_at": "2015-04-07T18:33:08Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/526#discussion_r27787294",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/526",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27787294"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/526#discussion_r27787294"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/526"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27787295",
        "pull_request_review_id": null,
        "id": 27787295,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3Nzg3Mjk1",
        "diff_hunk": "@@ -1,16 +1,65 @@\n 'use strict';\n \n+var path    = require('path'),",
        "path": "test/unit/client/serve/ondemand.test.js",
        "position": null,
        "original_position": 3,
        "commit_id": "c26e403b88fbefd7dedee74a2d54aad54818455d",
        "original_commit_id": "1a5c91f408712a9ceccbe216cd092a26d2309ef8",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'path' is defined but never used.\n",
        "created_at": "2015-04-06T07:11:20Z",
        "updated_at": "2015-04-07T18:33:08Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/526#discussion_r27787295",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/526",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27787295"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/526#discussion_r27787295"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/526"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27787296",
        "pull_request_review_id": null,
        "id": 27787296,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3Nzg3Mjk2",
        "diff_hunk": "@@ -1,16 +1,65 @@\n 'use strict';\n \n+var path    = require('path'),\n+  should  = require('should'),",
        "path": "test/unit/client/serve/ondemand.test.js",
        "position": null,
        "original_position": 4,
        "commit_id": "c26e403b88fbefd7dedee74a2d54aad54818455d",
        "original_commit_id": "1a5c91f408712a9ceccbe216cd092a26d2309ef8",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'should' is defined but never used.\n",
        "created_at": "2015-04-06T07:11:20Z",
        "updated_at": "2015-04-07T18:33:08Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/526#discussion_r27787296",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/526",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27787296"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/526#discussion_r27787296"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/526"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27787297",
        "pull_request_review_id": null,
        "id": 27787297,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3Nzg3Mjk3",
        "diff_hunk": "@@ -1,16 +1,65 @@\n 'use strict';\n \n+var path    = require('path'),\n+  should  = require('should'),\n+  ss      = require( '../../../../lib/socketstream'),\n+  Router = require('../../../../lib/http/router').Router,\n+  options = ss.client.options,\n+  defineAbcClient = require('../abcClient');\n+\n+var responseStub = {\n+  writeHead: function(status,headers) {},",
        "path": "test/unit/client/serve/ondemand.test.js",
        "position": null,
        "original_position": 11,
        "commit_id": "c26e403b88fbefd7dedee74a2d54aad54818455d",
        "original_commit_id": "1a5c91f408712a9ceccbe216cd092a26d2309ef8",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'headers' is defined but never used.<br>'status' is defined but never used.\n",
        "created_at": "2015-04-06T07:11:20Z",
        "updated_at": "2015-04-07T18:33:08Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/526#discussion_r27787297",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/526",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27787297"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/526#discussion_r27787297"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/526"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27787298",
        "pull_request_review_id": null,
        "id": 27787298,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3Nzg3Mjk4",
        "diff_hunk": "@@ -1,16 +1,65 @@\n 'use strict';\n \n+var path    = require('path'),\n+  should  = require('should'),\n+  ss      = require( '../../../../lib/socketstream'),\n+  Router = require('../../../../lib/http/router').Router,\n+  options = ss.client.options,\n+  defineAbcClient = require('../abcClient');\n+\n+var responseStub = {\n+  writeHead: function(status,headers) {},\n+  end: function(body) {\n+    this.body = body;\n+  }\n+};\n \n \n describe('production mode asset server', function () {\n \n+  var router = new Router();\n+\n+\n+  beforeEach(function() {\n+\n+    // back to initial client state\n+    ss.client.assets.unload();\n+    ss.client.assets.load();\n+    ss.client.formatters.add('javascript');\n+  });\n+\n+  afterEach(function() {\n+    ss.client.forget();\n+  });\n+\n \n+  /*TODO\n+  it('should provide a route for serving javascript code', function(){\n+    code: './abc/index.a'\n+  }, function() {\n+    require('../../../../lib/client/serve/ondemand')(ss.api, router, options);\n+  });\n \n-    it('should provide a route for serving javascript code');\n+  // dev time URL\n+  var req = {url: '/assets/abc/'+client.id+'.js?mod=loader' };\n+  router.route(req.url,req,responseStub).should.equal(true);\n+   responseStub.body.should.equal('// calc pi\\n');\n+  });\n+*/\n \n \n+    it('should provide a route for serving web worker requests', function() {\n+      var client = defineAbcClient({",
        "path": "test/unit/client/serve/ondemand.test.js",
        "position": null,
        "original_position": 53,
        "commit_id": "c26e403b88fbefd7dedee74a2d54aad54818455d",
        "original_commit_id": "1a5c91f408712a9ceccbe216cd092a26d2309ef8",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'client' is defined but never used.\n",
        "created_at": "2015-04-06T07:11:20Z",
        "updated_at": "2015-04-07T18:33:08Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/526#discussion_r27787298",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/526",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27787298"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/526#discussion_r27787298"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/526"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27903768",
        "pull_request_review_id": null,
        "id": 27903768,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3OTAzNzY4",
        "diff_hunk": "@@ -38,27 +38,29 @@ module.exports = function(ss, router, options) {\n     var output = [],\n         thisUrl = url.parse(request.url),\n         params = qs.parse(thisUrl.query),\n-        files = magicPath.files(ss.client.root, [path]); //TODO entries\n+        files = magicPath.files(ss.client.dirs.root, [path]); //TODO entries\n \n     return files.forEach(function(file) {\n       var description;\n       try {\n-        var bundler = ss.bundler.get(params);\n-        return bundler.asset.js(bundler.entryFor('js',file), {\n-          client: params.client,\n-          clientId: params.ts,\n-          //pathPrefix: options.globalModules? null : path,\n+        var opts = {\n           //TODO packAssets vs packedAssets\n           compress: options.packAssets\n-        }, function(js) {\n+        };\n+\n+        ss.bundler.loadFile(ss.bundler.entryFor('js','/code',path), opts, null, function(js) {\n           output.push(js);\n           if (output.length === files.length) {  // last file\n             return cb(output.join('\\n'));\n           }\n+        }, function(err) {\n+          ss.log.clientIssue({name:'unknown','id':'unknown'},options,err,entry);",
        "path": "lib/client/serve/ondemand.js",
        "position": 28,
        "original_position": 27,
        "commit_id": "c26e403b88fbefd7dedee74a2d54aad54818455d",
        "original_commit_id": "b1a2a11258c045f12b29e3157f497c7319669cf0",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'entry' is not defined.\n",
        "created_at": "2015-04-07T18:04:45Z",
        "updated_at": "2015-04-07T18:33:08Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/526#discussion_r27903768",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/526",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27903768"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/526#discussion_r27903768"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/526"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27903769",
        "pull_request_review_id": null,
        "id": 27903769,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3OTAzNzY5",
        "diff_hunk": "@@ -67,12 +69,15 @@ module.exports = function(ss, router, options) {\n   function worker(request, response, path, cb) {\n     var thisUrl = url.parse(request.url),\n       params = qs.parse(thisUrl.query),\n-      bundler = ss.bundler.get(params);\n+      opts = {\n+        //TODO packAssets vs packedAssets\n+        compress: options.packAssets\n+      };\n \n-    return bundler.asset(bundler.entryFor('worker',path), {\n-      //TODO packAssets vs packedAssets\n-      compress: options.packAssets\n-    }, cb);\n+    ss.bundler.loadFile(ss.bundler.entryFor('worker','/workers',path), opts, null, cb, function(err) {\n+      ss.log.clientIssue({name:'unknown','id':'unknown'},options,err,entry);",
        "path": "lib/client/serve/ondemand.js",
        "position": null,
        "original_position": 53,
        "commit_id": "c26e403b88fbefd7dedee74a2d54aad54818455d",
        "original_commit_id": "b1a2a11258c045f12b29e3157f497c7319669cf0",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'entry' is not defined.\n",
        "created_at": "2015-04-07T18:04:46Z",
        "updated_at": "2015-04-07T18:33:08Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/526#discussion_r27903769",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/526",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27903769"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/526#discussion_r27903769"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/526"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27903770",
        "pull_request_review_id": null,
        "id": 27903770,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3OTAzNzcw",
        "diff_hunk": "@@ -1,16 +1,68 @@\n 'use strict';\n \n+var path    = require('path'),\n+  should  = require('should'),\n+  ss      = require( '../../../../lib/socketstream'),\n+  Router = require('../../../../lib/http/router').Router,\n+  options = ss.client.options,\n+  defineAbcClient = require('../abcClient');\n+\n+var responseStub = {\n+  writeHead: function(status,headers) {},\n+  end: function(body) {\n+    this.body = body;\n+  }\n+};\n \n \n describe('production mode asset server', function () {\n \n+  var router = new Router();\n+  ss.root = ss.api.root = path.join(__dirname, '../../../../fixtures/project');\n+\n+\n+  beforeEach(function() {\n+\n+    // back to initial client state\n+    ss.client.assets.unload();\n+    ss.client.assets.load();\n+    ss.client.formatters.add('javascript');\n+    console.log(ss.api.client.root,'is client root');\n+    console.log(ss.api.root, ss.client.options.dirs.client);\n+  });\n+\n+  afterEach(function() {\n+    ss.client.forget();\n+  });\n+\n \n+  it('should provide a route for serving javascript code', function(){\n+    var client = defineAbcClient({",
        "path": "test/unit/client/serve/ondemand.test.js",
        "position": null,
        "original_position": 40,
        "commit_id": "c26e403b88fbefd7dedee74a2d54aad54818455d",
        "original_commit_id": "b1a2a11258c045f12b29e3157f497c7319669cf0",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'client' is defined but never used.\n",
        "created_at": "2015-04-07T18:04:46Z",
        "updated_at": "2015-04-07T18:33:08Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/526#discussion_r27903770",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/526",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27903770"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/526#discussion_r27903770"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/526"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27903772",
        "pull_request_review_id": null,
        "id": 27903772,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3OTAzNzcy",
        "diff_hunk": "@@ -1,16 +1,68 @@\n 'use strict';\n \n+var path    = require('path'),\n+  should  = require('should'),\n+  ss      = require( '../../../../lib/socketstream'),\n+  Router = require('../../../../lib/http/router').Router,\n+  options = ss.client.options,\n+  defineAbcClient = require('../abcClient');\n+\n+var responseStub = {\n+  writeHead: function(status,headers) {},\n+  end: function(body) {\n+    this.body = body;\n+  }\n+};\n \n \n describe('production mode asset server', function () {\n \n+  var router = new Router();\n+  ss.root = ss.api.root = path.join(__dirname, '../../../../fixtures/project');\n+\n+\n+  beforeEach(function() {\n+\n+    // back to initial client state\n+    ss.client.assets.unload();\n+    ss.client.assets.load();\n+    ss.client.formatters.add('javascript');\n+    console.log(ss.api.client.root,'is client root');\n+    console.log(ss.api.root, ss.client.options.dirs.client);\n+  });\n+\n+  afterEach(function() {\n+    ss.client.forget();\n+  });\n+\n \n+  it('should provide a route for serving javascript code', function(){\n+    var client = defineAbcClient({\n+      code: './abc/index.a'\n+    }, function() {\n+      require('../../../../lib/client/serve/ondemand')(ss.api, router, options);\n+    });\n \n-    it('should provide a route for serving javascript code');\n+    // dev time URL\n+    var req = {url: '/_serve/code?extras/e1.js' };\n+    router.route(req.url,req,responseStub).should.equal(true);\n+    responseStub.body.should.equal('var e1 = 1;\\n');\n+  });\n \n+  it('should provide a bundle of javascript code for a directory entry');\n \n+  it('should provide a route for serving web worker requests', function() {\n+    var client = defineAbcClient({",
        "path": "test/unit/client/serve/ondemand.test.js",
        "position": null,
        "original_position": 56,
        "commit_id": "c26e403b88fbefd7dedee74a2d54aad54818455d",
        "original_commit_id": "b1a2a11258c045f12b29e3157f497c7319669cf0",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'client' is defined but never used.\n",
        "created_at": "2015-04-07T18:04:46Z",
        "updated_at": "2015-04-07T18:33:08Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/526#discussion_r27903772",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/526",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27903772"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/526#discussion_r27903772"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/526"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27906324",
        "pull_request_review_id": null,
        "id": 27906324,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3OTA2MzI0",
        "diff_hunk": "@@ -1,16 +1,67 @@\n 'use strict';\n \n+require('should');\n+var ss      = require( '../../../../lib/socketstream'),\n+    Router = require('../../../../lib/http/router').Router,\n+    options = ss.client.options,\n+    defineAbcClient = require('../abcClient');\n+\n+var responseStub = {\n+  writeHead: function() {},\n+  end: function(body) {\n+    this.body = body;\n+  }\n+};\n \n \n describe('production mode asset server', function () {\n \n+  var router = new Router();\n+  ss.root = ss.api.root = path.join(__dirname, '../../../../fixtures/project');",
        "path": "test/unit/client/serve/ondemand.test.js",
        "position": 21,
        "original_position": 20,
        "commit_id": "c26e403b88fbefd7dedee74a2d54aad54818455d",
        "original_commit_id": "cfa8a8b3e9f63517a144022b4c5ecbacf1d81ea9",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'path' is not defined.\n",
        "created_at": "2015-04-07T18:29:49Z",
        "updated_at": "2015-04-07T18:33:08Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/526#discussion_r27906324",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/526",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/27906324"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/526#discussion_r27906324"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/526"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28004572",
        "pull_request_review_id": null,
        "id": 28004572,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4MDA0NTcy",
        "diff_hunk": "@@ -28,9 +30,60 @@ describe('constants',function() {\n     ss.client.forget();\n   });\n \n+  var newEngine = function newEngine(api,config,options) {\n+    api.should.equal(ss.api);\n+    options.should.equal(ss.client.options);\n+    return {\n+      name: 'New',\n+      process: function (template, path, id, opts) {\n+        return '<script id=\"new-' + id + '\" type=\"text/x-tmpl\">' + template + JSON.stringify(opts.constants) + '</script>';\n+      }\n+    }",
        "path": "test/unit/client/constants.test.js",
        "position": 36,
        "original_position": 26,
        "commit_id": "ba5e83fd2090f51a64e0c2ba9bc626d42c091519",
        "original_commit_id": "24ab079f55f886b03a0769bd78868af20e75946f",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Missing semicolon.\n",
        "created_at": "2015-04-08T19:32:49Z",
        "updated_at": "2015-04-10T10:22:03Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/528#discussion_r28004572",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/528",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28004572"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/528#discussion_r28004572"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/528"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28004573",
        "pull_request_review_id": null,
        "id": 28004573,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4MDA0NTcz",
        "diff_hunk": "@@ -28,9 +30,60 @@ describe('constants',function() {\n     ss.client.forget();\n   });\n \n+  var newEngine = function newEngine(api,config,options) {\n+    api.should.equal(ss.api);\n+    options.should.equal(ss.client.options);\n+    return {\n+      name: 'New',\n+      process: function (template, path, id, opts) {\n+        return '<script id=\"new-' + id + '\" type=\"text/x-tmpl\">' + template + JSON.stringify(opts.constants) + '</script>';\n+      }\n+    }\n+  };\n+\n+  it('should be available in template engine formatters', function(done) {\n+\n+    var compileOptions = null;\n+\n+    defineAbcClient({ constants:{def:\"def\"} },function() {",
        "path": "test/unit/client/constants.test.js",
        "position": null,
        "original_position": 33,
        "commit_id": "ba5e83fd2090f51a64e0c2ba9bc626d42c091519",
        "original_commit_id": "24ab079f55f886b03a0769bd78868af20e75946f",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Mixed double and single quotes.\n",
        "created_at": "2015-04-08T19:32:49Z",
        "updated_at": "2015-04-10T10:22:03Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/528#discussion_r28004573",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/528",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28004573"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/528#discussion_r28004573"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/528"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28004574",
        "pull_request_review_id": null,
        "id": 28004574,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4MDA0NTc0",
        "diff_hunk": "@@ -54,22 +106,43 @@ describe('constants',function() {\n       };\n \n       ss.client.formatters.add(formatter,{});\n-      //ss.client.templateEngine.use('angular');\n     });\n \n \n     // dev time URL\n     var req = {url: '/assets/abc/'+client.id+'.js?_=./abc/index.a' };\n     router.route(req.url,req,responseStub).should.equal(true);\n-    //TODO assert formatter.compile is called\n+    compileOptions.constants.should.be.type('object');\n+    compileOptions.constants.abc.should.equal('abc');\n \n     //TODO packAssetSet\n     var bundler = ss.api.bundler.get(client);\n     //ss.api.bundler.packAssetSet('js', client, bundler.toMinifiedJS);\n   });\n \n-  it('should be loaded in the browser as globals', function() {\n+  it('should be loaded in the browser as globals', function(done) {\n+\n+    var compileOptions = null,\n+      client = defineAbcClient({ constants:{\"def\":\"def\"} }, function() {",
        "path": "test/unit/client/constants.test.js",
        "position": null,
        "original_position": 110,
        "commit_id": "ba5e83fd2090f51a64e0c2ba9bc626d42c091519",
        "original_commit_id": "24ab079f55f886b03a0769bd78868af20e75946f",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Mixed double and single quotes.\n",
        "created_at": "2015-04-08T19:32:50Z",
        "updated_at": "2015-04-10T10:22:03Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/528#discussion_r28004574",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/528",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28004574"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/528#discussion_r28004574"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/528"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28004575",
        "pull_request_review_id": null,
        "id": 28004575,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4MDA0NTc1",
        "diff_hunk": "@@ -89,16 +162,67 @@ describe('locals', function() {\n     ss.client.forget();\n   });\n \n+  var newEngine = function newEngine(api,config,options) {\n+    api.should.equal(ss.api);\n+    options.should.equal(ss.client.options);\n+    return {\n+      name: 'New',\n+      process: function (template, path, id, opts) {\n+        return '<script id=\"new-' + id + '\" type=\"text/x-tmpl\">' + template + JSON.stringify(opts.locals) + '</script>';\n+      }\n+    }",
        "path": "test/unit/client/constants.test.js",
        "position": null,
        "original_position": 145,
        "commit_id": "ba5e83fd2090f51a64e0c2ba9bc626d42c091519",
        "original_commit_id": "24ab079f55f886b03a0769bd78868af20e75946f",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Missing semicolon.\n",
        "created_at": "2015-04-08T19:32:50Z",
        "updated_at": "2015-04-10T10:22:03Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/528#discussion_r28004575",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/528",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28004575"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/528#discussion_r28004575"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/528"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28004576",
        "pull_request_review_id": null,
        "id": 28004576,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4MDA0NTc2",
        "diff_hunk": "@@ -89,16 +162,67 @@ describe('locals', function() {\n     ss.client.forget();\n   });\n \n+  var newEngine = function newEngine(api,config,options) {\n+    api.should.equal(ss.api);\n+    options.should.equal(ss.client.options);\n+    return {\n+      name: 'New',\n+      process: function (template, path, id, opts) {\n+        return '<script id=\"new-' + id + '\" type=\"text/x-tmpl\">' + template + JSON.stringify(opts.locals) + '</script>';\n+      }\n+    }\n+  };\n+\n+  it('should be available in template engine formatters', function(done) {\n+\n+    var compileOptions = null;\n+\n+    defineAbcClient({ locals:{def:\"def\"} },function() {",
        "path": "test/unit/client/constants.test.js",
        "position": null,
        "original_position": 152,
        "commit_id": "ba5e83fd2090f51a64e0c2ba9bc626d42c091519",
        "original_commit_id": "24ab079f55f886b03a0769bd78868af20e75946f",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Mixed double and single quotes.\n",
        "created_at": "2015-04-08T19:32:50Z",
        "updated_at": "2015-04-10T10:22:03Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/528#discussion_r28004576",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/528",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28004576"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/528#discussion_r28004576"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/528"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28004577",
        "pull_request_review_id": null,
        "id": 28004577,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4MDA0NTc3",
        "diff_hunk": "@@ -54,22 +106,43 @@ describe('constants',function() {\n       };\n \n       ss.client.formatters.add(formatter,{});\n-      //ss.client.templateEngine.use('angular');\n     });\n \n \n     // dev time URL\n     var req = {url: '/assets/abc/'+client.id+'.js?_=./abc/index.a' };\n     router.route(req.url,req,responseStub).should.equal(true);\n-    //TODO assert formatter.compile is called\n+    compileOptions.constants.should.be.type('object');\n+    compileOptions.constants.abc.should.equal('abc');\n \n     //TODO packAssetSet\n     var bundler = ss.api.bundler.get(client);\n     //ss.api.bundler.packAssetSet('js', client, bundler.toMinifiedJS);\n   });\n \n-  it('should be loaded in the browser as globals', function() {\n+  it('should be loaded in the browser as globals', function(done) {\n+\n+    var compileOptions = null,",
        "path": "test/unit/client/constants.test.js",
        "position": null,
        "original_position": 109,
        "commit_id": "ba5e83fd2090f51a64e0c2ba9bc626d42c091519",
        "original_commit_id": "24ab079f55f886b03a0769bd78868af20e75946f",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'compileOptions' is defined but never used.\n",
        "created_at": "2015-04-08T19:32:50Z",
        "updated_at": "2015-04-10T10:22:03Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/528#discussion_r28004577",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/528",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28004577"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/528#discussion_r28004577"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/528"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28083856",
        "pull_request_review_id": null,
        "id": 28083856,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4MDgzODU2",
        "diff_hunk": "@@ -0,0 +1,4 @@\n+window.require=function(e,t){var n=require.resolve(e,t||\"/\"),r=require.modules[n]||require.initModule(n);if(!r)throw new Error(\"Failed to resolve module \"+e+\", tried \"+n);return r._cached?r._cached:r()},require.paths=[],require.modules={},require._core={events:!0,path:!0,vm:!0},require.resolve=function(e,t){function i(){for(var e=0,t;t=arguments[e];++e)if(require.modules[t])return t}t||(t=\"/\");if(require._core[e])return e;var n=require.modules.path();e=e.charAt(0)===\"/\"?n.resolve(t,e.substring(1)):e,e=e.match(/^(?:\\.\\.?\\/)/)?n.resolve(t,e):e;var r=i(e,n.join(e,\"index\"));if(r)return r;throw new Error(\"Cannot find module '\"+e+\"' within '\"+t+\"'\")},require.alias=function(e,t){var n=require.modules.path(),r=null;try{r=require.resolve(e+\"/package.json\",\"/\")}catch(i){r=require.resolve(e,\"/\")}var s=n.dirname(r),o=(Object.keys||function(e){var t=[];for(var n in e)t.push(n);return t})(require.modules);for(var u=0;u<o.length;u++){var a=o[u];if(a.slice(0,s.length+1)===s+\"/\"){var f=a.slice(s.length);require.modules[t+f]=require.modules[s+f]}else a===s&&(require.modules[t]=require.modules[s])}},require.define=function(e,t){var n=require._core[e]?\"\":require.modules.path().dirname(e),r=function(e){return require(e,n)};r.resolve=function(e){return require.resolve(e,n)},r.modules=require.modules,r.define=require.define;var i={exports:{}};require.modules[e]=function(){return require.modules[e]._cached=i.exports,t.call(i.exports,r,i,i.exports,n,e),require.modules[e]._cached=i.exports,i.exports}},typeof process==\"undefined\"&&(process={}),process.nextTick||(process.nextTick=function(){var e=[],t=typeof window!=\"undefined\"&&window.postMessage&&window.addEventListener;return t&&window.addEventListener(\"message\",function(t){if(t.source===window&&t.data===\"browserify-tick\"){t.stopPropagation();if(e.length>0){var n=e.shift();n()}}},!0),function(n){t?(e.push(n),window.postMessage(\"browserify-tick\",\"*\")):setTimeout(n,0)}}()),process.title||(process.title=\"browser\"),process.binding||(process.binding=function(e){if(e===\"evals\")return require(\"vm\");throw new Error(\"No such module\")}),process.cwd||(process.cwd=function(){return\".\"}),require.define(\"path\",function(e,t,n){function r(e,t){var n=[];for(var r=0;r<e.length;r++)t(e[r],r,e)&&n.push(e[r]);return n}function i(e,t){var n=0;for(var r=e.length;r>=0;r--){var i=e[r];i==\".\"?e.splice(r,1):i===\"..\"?(e.splice(r,1),n++):n&&(e.splice(r,1),n--)}if(t)for(;n--;n)e.unshift(\"..\");return e}var s=/^(.+\\/(?!$)|\\/)?((?:.+?)?(\\.[^.]*)?)$/;n.resolve=function(){var e=\"\",t=!1;for(var n=arguments.length;n>=-1&&!t;n--){var s=n>=0?arguments[n]:process.cwd();if(typeof s!=\"string\"||!s)continue;e=s+\"/\"+e,t=s.charAt(0)===\"/\"}return e=e.replace(/\\/\\.\\//,\"/\"),e=i(r(e.split(\"/\"),function(e){return!!e}),!t).join(\"/\"),(t?\"/\":\"\")+e||\".\"},n.normalize=function(e){var t=e.charAt(0)===\"/\",n=e.slice(-1)===\"/\";return e=i(r(e.split(\"/\"),function(e){return!!e}),!t).join(\"/\"),!e&&!t&&(e=\".\"),e&&n&&(e+=\"/\"),(t?\"/\":\"\")+e},n.join=function(){var e=Array.prototype.slice.call(arguments,0);return n.normalize(r(e,function(e){return e&&typeof e==\"string\"}).join(\"/\"))},n.dirname=function(e){var t=s.exec(e)[1]||\"\";return t?t===\"/\"?t:t.substring(0,t.length-1):\".\"},n.basename=function(e,t){var n=s.exec(e)[2]||\"\";return t&&n.substr(-1*t.length)===t&&(n=n.substr(0,n.length-t.length)),n},n.extname=function(e){return s.exec(e)[3]||\"\"}});",
        "path": "test/fixtures/project/client/abc/expected.js",
        "position": null,
        "original_position": 1,
        "commit_id": "ba5e83fd2090f51a64e0c2ba9bc626d42c091519",
        "original_commit_id": "320d1243f12fc6ccb1ea46313b9686d7559cf7fd",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Line is too long.<br>Missing semicolon.<br>Expected a conditional expression and instead saw an assignment.<br>Expected an assignment or function call and instead saw an expression.<br>The body of a for in should be wrapped in an if statement to filter unwanted properties from the prototype.<br>Wrap an immediate function invocation in parens to assist the reader in understanding that the expression is the result of a function, and not the function itself.<br>'r' is already defined.<br>'i' is already defined.\n",
        "created_at": "2015-04-09T17:36:39Z",
        "updated_at": "2015-04-10T10:22:03Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/528#discussion_r28083856",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/528",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28083856"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/528#discussion_r28083856"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/528"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28083857",
        "pull_request_review_id": null,
        "id": 28083857,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4MDgzODU3",
        "diff_hunk": "@@ -0,0 +1,4 @@\n+window.require=function(e,t){var n=require.resolve(e,t||\"/\"),r=require.modules[n]||require.initModule(n);if(!r)throw new Error(\"Failed to resolve module \"+e+\", tried \"+n);return r._cached?r._cached:r()},require.paths=[],require.modules={},require._core={events:!0,path:!0,vm:!0},require.resolve=function(e,t){function i(){for(var e=0,t;t=arguments[e];++e)if(require.modules[t])return t}t||(t=\"/\");if(require._core[e])return e;var n=require.modules.path();e=e.charAt(0)===\"/\"?n.resolve(t,e.substring(1)):e,e=e.match(/^(?:\\.\\.?\\/)/)?n.resolve(t,e):e;var r=i(e,n.join(e,\"index\"));if(r)return r;throw new Error(\"Cannot find module '\"+e+\"' within '\"+t+\"'\")},require.alias=function(e,t){var n=require.modules.path(),r=null;try{r=require.resolve(e+\"/package.json\",\"/\")}catch(i){r=require.resolve(e,\"/\")}var s=n.dirname(r),o=(Object.keys||function(e){var t=[];for(var n in e)t.push(n);return t})(require.modules);for(var u=0;u<o.length;u++){var a=o[u];if(a.slice(0,s.length+1)===s+\"/\"){var f=a.slice(s.length);require.modules[t+f]=require.modules[s+f]}else a===s&&(require.modules[t]=require.modules[s])}},require.define=function(e,t){var n=require._core[e]?\"\":require.modules.path().dirname(e),r=function(e){return require(e,n)};r.resolve=function(e){return require.resolve(e,n)},r.modules=require.modules,r.define=require.define;var i={exports:{}};require.modules[e]=function(){return require.modules[e]._cached=i.exports,t.call(i.exports,r,i,i.exports,n,e),require.modules[e]._cached=i.exports,i.exports}},typeof process==\"undefined\"&&(process={}),process.nextTick||(process.nextTick=function(){var e=[],t=typeof window!=\"undefined\"&&window.postMessage&&window.addEventListener;return t&&window.addEventListener(\"message\",function(t){if(t.source===window&&t.data===\"browserify-tick\"){t.stopPropagation();if(e.length>0){var n=e.shift();n()}}},!0),function(n){t?(e.push(n),window.postMessage(\"browserify-tick\",\"*\")):setTimeout(n,0)}}()),process.title||(process.title=\"browser\"),process.binding||(process.binding=function(e){if(e===\"evals\")return require(\"vm\");throw new Error(\"No such module\")}),process.cwd||(process.cwd=function(){return\".\"}),require.define(\"path\",function(e,t,n){function r(e,t){var n=[];for(var r=0;r<e.length;r++)t(e[r],r,e)&&n.push(e[r]);return n}function i(e,t){var n=0;for(var r=e.length;r>=0;r--){var i=e[r];i==\".\"?e.splice(r,1):i===\"..\"?(e.splice(r,1),n++):n&&(e.splice(r,1),n--)}if(t)for(;n--;n)e.unshift(\"..\");return e}var s=/^(.+\\/(?!$)|\\/)?((?:.+?)?(\\.[^.]*)?)$/;n.resolve=function(){var e=\"\",t=!1;for(var n=arguments.length;n>=-1&&!t;n--){var s=n>=0?arguments[n]:process.cwd();if(typeof s!=\"string\"||!s)continue;e=s+\"/\"+e,t=s.charAt(0)===\"/\"}return e=e.replace(/\\/\\.\\//,\"/\"),e=i(r(e.split(\"/\"),function(e){return!!e}),!t).join(\"/\"),(t?\"/\":\"\")+e||\".\"},n.normalize=function(e){var t=e.charAt(0)===\"/\",n=e.slice(-1)===\"/\";return e=i(r(e.split(\"/\"),function(e){return!!e}),!t).join(\"/\"),!e&&!t&&(e=\".\"),e&&n&&(e+=\"/\"),(t?\"/\":\"\")+e},n.join=function(){var e=Array.prototype.slice.call(arguments,0);return n.normalize(r(e,function(e){return e&&typeof e==\"string\"}).join(\"/\"))},n.dirname=function(e){var t=s.exec(e)[1]||\"\";return t?t===\"/\"?t:t.substring(0,t.length-1):\".\"},n.basename=function(e,t){var n=s.exec(e)[2]||\"\";return t&&n.substr(-1*t.length)===t&&(n=n.substr(0,n.length-t.length)),n},n.extname=function(e){return s.exec(e)[3]||\"\"}});\n+require.define(\"eventemitter2\",function(e,t,n,r,i){!function(e,t){function i(){this._events=new Object}function s(e){e&&(this.wildcard=e.wildcard,this.delimiter=e.delimiter||\".\",this.wildcard&&(this.listenerTree=new Object))}function o(e){this._events=new Object,s.call(this,e)}function u(e,t,n,r){if(!n)return;var i;if(r===t.length&&n._listeners){if(typeof n._listeners==\"function\")return e&&e.push(n._listeners),n;for(var s=0,o=n._listeners.length;s<o;s++)e&&e.push(n._listeners[s]);return n}if(t[r]===\"*\"||n[t[r]]){if(t[r]===\"*\"){for(var a in n)a!==\"_listeners\"&&n.hasOwnProperty(a)&&(i=u(e,t,n[a],r+1));return i}i=u(e,t,n[t[r]],r+1)}return n[\"*\"]&&u(e,t,n[\"*\"],r+1),i}function a(e,t){e=typeof e==\"string\"?e.split(this.delimiter):e.slice();var i=this.listenerTree,s=e.shift();while(s){i[s]||(i[s]=new Object),i=i[s];if(e.length===0){if(!i._listeners)i._listeners=t;else if(typeof i._listeners==\"function\")i._listeners=[i._listeners,t];else if(n(i._listeners)){i._listeners.push(t);if(!i._listeners.warned){var o=r;o>0&&i._listeners.length>o&&(i._listeners.warned=!0,console.error(\"(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.\",i._listeners.length),console.trace())}}return!0}s=e.shift()}return!0}var n=Array.isArray?Array.isArray:function(t){return Object.prototype.toString.call(t)===\"[object Array]\"},r=10;o.prototype.setMaxListeners=function(e){this._events||i.call(this),this._events.maxListeners=e},o.prototype.event=\"\",o.prototype.once=function(e,t){return this.many(e,1,t),this},o.prototype.many=function(e,t,n){function i(){--t===0&&r.off(e,i),n.apply(null,arguments)}var r=this;if(typeof n!=\"function\")throw new Error(\"many only accepts instances of Function\");return i._origin=n,this.on(e,i),r},o.prototype.emit=function(){this._events||i.call(this);var e=arguments[0];if(e===\"newListener\"&&!this._events.newListener)return!1;if(this._all){var t=arguments.length,n=new Array(t-1);for(var r=1;r<t;r++)n[r-1]=arguments[r];for(r=0,t=this._all.length;r<t;r++)this.event=e,this._all[r].apply(this,n)}if(e===\"error\"&&!this._all&&!this._events.error&&(!this.wildcard||!this.listenerTree.error))throw arguments[1]instanceof Error?arguments[1]:new Error(\"Uncaught, unspecified 'error' event.\");var s;if(this.wildcard){s=[];var o=typeof e==\"string\"?e.split(this.delimiter):e.slice();u.call(this,s,o,this.listenerTree,0)}else s=this._events[e];if(typeof s==\"function\"){this.event=e;if(arguments.length===1)s.call(this);else if(arguments.length>1)switch(arguments.length){case 2:s.call(this,arguments[1]);break;case 3:s.call(this,arguments[1],arguments[2]);break;default:var t=arguments.length,n=new Array(t-1);for(var r=1;r<t;r++)n[r-1]=arguments[r];s.apply(this,n)}return!0}if(s){var t=arguments.length,n=new Array(t-1);for(var r=1;r<t;r++)n[r-1]=arguments[r];var a=s.slice();for(var r=0,t=a.length;r<t;r++)this.event=e,a[r].apply(this,n);return!0}},o.prototype.on=function(e,s){this._events||i.call(this),this.emit(\"newListener\",e,s);if(this.wildcard)return a.call(this,e,s),this;if(!this._events[e])this._events[e]=s;else if(typeof this._events[e]==\"function\")this._events[e]=[this._events[e],s];else if(n(this._events[e])){this._events[e].push(s);if(!this._events[e].warned){var o;this._events.maxListeners!==t?o=this._events.maxListeners:o=r,o&&o>0&&this._events[e].length>o&&(this._events[e].warned=!0,console.error(\"(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.\",this._events[e].length),console.trace())}}return this},o.prototype.onAny=function(e){this._all||(this._all=[]);if(typeof e!=\"function\")throw new Error(\"onAny only accepts instances of Function\");return this._all.push(e),this},o.prototype.addListener=o.prototype.on,o.prototype.off=function(e,t){if(typeof t!=\"function\")throw new Error(\"removeListener only takes instances of Function\");var r;if(this.wildcard){var i=typeof e==\"string\"?e.split(this.delimiter):e.slice(),s=u.call(this,null,i,this.listenerTree,0);if(\"undefined\"==typeof s)return this;r=s._listeners}else{if(!this._events[e])return this;r=this._events[e]}if(n(r)){var o=-1;for(var a=0,f=r.length;a<f;a++)if(r[a]===t||r[a].listener&&r[a].listener===t||r[a]._origin&&r[a]._origin===t){o=a;break}if(o<0)return this;this.wildcard?s._listeners.splice(o,1):this._events[e].splice(o,1),r.length===0&&(this.wildcard?delete s._listeners:delete this._events[e])}else if(r===t||r.listener&&r.listener===t||r._origin&&r._origin===t)this.wildcard?delete s._listeners:delete this._events[e];return this},o.prototype.offAny=function(e){var t=0,n=0,r;if(e&&this._all&&this._all.length>0){r=this._all;for(t=0,n=r.length;t<n;t++)if(e===r[t])return r.splice(t,1),this}else this._all=[];return this},o.prototype.removeListener=o.prototype.off,o.prototype.removeAllListeners=function(e){if(arguments.length===0)return!this._events||i.call(this),this;if(this.wildcard){var t=typeof e==\"string\"?e.split(this.delimiter):e.slice(),n=u.call(this,null,t,this.listenerTree,0);if(\"undefined\"==typeof n)return this;n._listeners=null}else{if(!this._events[e])return this;this._events[e]=null}return this},o.prototype.listeners=function(e){if(this.wildcard){var t=[],r=typeof e==\"string\"?e.split(this.delimiter):e.slice();return u.call(this,t,r,this.listenerTree,0),t}return this._events||i.call(this),this._events[e]||(this._events[e]=[]),n(this._events[e])||(this._events[e]=[this._events[e]]),this._events[e]},o.prototype.listenersAny=function(){return this._all?this._all:[]},e.EventEmitter2=o}(typeof n==\"undefined\"?window:n)});",
        "path": "test/fixtures/project/client/abc/expected.js",
        "position": null,
        "original_position": 2,
        "commit_id": "ba5e83fd2090f51a64e0c2ba9bc626d42c091519",
        "original_commit_id": "320d1243f12fc6ccb1ea46313b9686d7559cf7fd",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Line is too long.<br>Missing '()' invoking a constructor.<br>Missing semicolon.<br>Too many errors. (50% scanned).\n",
        "created_at": "2015-04-09T17:36:39Z",
        "updated_at": "2015-04-10T10:22:03Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/528#discussion_r28083857",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/528",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28083857"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/528#discussion_r28083857"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/528"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28083858",
        "pull_request_review_id": null,
        "id": 28083858,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4MDgzODU4",
        "diff_hunk": "@@ -0,0 +1,59 @@\n+'use strict';\n+\n+var path    = require('path'),\n+  fs      = require('fs'),\n+  should  = require('should'),\n+  ss      = require( '../../../lib/socketstream'),\n+  options = ss.client.options,\n+  defineAbcClient = require('./abcClient');\n+\n+describe('pack',function() {\n+\n+\n+  beforeEach(function() {\n+\n+    // back to initial client state\n+    ss.client.assets.unload();\n+    ss.client.assets.load();\n+  });\n+\n+  afterEach(function() {\n+    ss.client.forget();\n+  });\n+\n+  var newEngine = function newEngine(api,config,options) {\n+    api.should.equal(ss.api);\n+    options.should.equal(ss.client.options);\n+    return {\n+      name: 'New',\n+      process: function (template, path, id, opts) {\n+        return '<script id=\"new-' + id + '\" type=\"text/x-tmpl\">' + template + JSON.stringify(opts.constants) + '</script>';\n+      }\n+    }",
        "path": "test/unit/client/pack.test.js",
        "position": 31,
        "original_position": 32,
        "commit_id": "ba5e83fd2090f51a64e0c2ba9bc626d42c091519",
        "original_commit_id": "320d1243f12fc6ccb1ea46313b9686d7559cf7fd",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Missing semicolon.\n",
        "created_at": "2015-04-09T17:36:40Z",
        "updated_at": "2015-04-10T10:22:03Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/528#discussion_r28083858",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/528",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28083858"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/528#discussion_r28083858"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/528"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28083859",
        "pull_request_review_id": null,
        "id": 28083859,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4MDgzODU5",
        "diff_hunk": "@@ -0,0 +1,59 @@\n+'use strict';\n+\n+var path    = require('path'),\n+  fs      = require('fs'),\n+  should  = require('should'),\n+  ss      = require( '../../../lib/socketstream'),\n+  options = ss.client.options,\n+  defineAbcClient = require('./abcClient');\n+\n+describe('pack',function() {\n+\n+\n+  beforeEach(function() {\n+\n+    // back to initial client state\n+    ss.client.assets.unload();\n+    ss.client.assets.load();\n+  });\n+\n+  afterEach(function() {\n+    ss.client.forget();\n+  });\n+\n+  var newEngine = function newEngine(api,config,options) {\n+    api.should.equal(ss.api);\n+    options.should.equal(ss.client.options);\n+    return {\n+      name: 'New',\n+      process: function (template, path, id, opts) {\n+        return '<script id=\"new-' + id + '\" type=\"text/x-tmpl\">' + template + JSON.stringify(opts.constants) + '</script>';\n+      }\n+    }\n+  };\n+\n+  it('should be available in formatters pack simple css and js', function() {\n+\n+    var client = defineAbcClient({ }, function() {\n+\n+        ss.api.client.send('constant','abc','abc');\n+\n+        ss.client.formatters.add('html');\n+        ss.client.formatters.add('css');\n+        ss.client.formatters.add('javascript');\n+      });\n+\n+    ss.api.bundler.pack(client);\n+\n+    var html = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.html'),'utf-8');\n+    var js = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.js'),'utf-8');\n+    var css = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.css'),'utf-8');\n+    var expected_html = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/abc/expected.html'),'utf-8');",
        "path": "test/unit/client/pack.test.js",
        "position": 72,
        "original_position": 51,
        "commit_id": "ba5e83fd2090f51a64e0c2ba9bc626d42c091519",
        "original_commit_id": "320d1243f12fc6ccb1ea46313b9686d7559cf7fd",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Identifier 'expected_html' is not in camel case.\n",
        "created_at": "2015-04-09T17:36:40Z",
        "updated_at": "2015-04-10T10:22:03Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/528#discussion_r28083859",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/528",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28083859"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/528#discussion_r28083859"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/528"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28083860",
        "pull_request_review_id": null,
        "id": 28083860,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4MDgzODYw",
        "diff_hunk": "@@ -0,0 +1,59 @@\n+'use strict';\n+\n+var path    = require('path'),\n+  fs      = require('fs'),\n+  should  = require('should'),\n+  ss      = require( '../../../lib/socketstream'),\n+  options = ss.client.options,\n+  defineAbcClient = require('./abcClient');\n+\n+describe('pack',function() {\n+\n+\n+  beforeEach(function() {\n+\n+    // back to initial client state\n+    ss.client.assets.unload();\n+    ss.client.assets.load();\n+  });\n+\n+  afterEach(function() {\n+    ss.client.forget();\n+  });\n+\n+  var newEngine = function newEngine(api,config,options) {\n+    api.should.equal(ss.api);\n+    options.should.equal(ss.client.options);\n+    return {\n+      name: 'New',\n+      process: function (template, path, id, opts) {\n+        return '<script id=\"new-' + id + '\" type=\"text/x-tmpl\">' + template + JSON.stringify(opts.constants) + '</script>';\n+      }\n+    }\n+  };\n+\n+  it('should be available in formatters pack simple css and js', function() {\n+\n+    var client = defineAbcClient({ }, function() {\n+\n+        ss.api.client.send('constant','abc','abc');\n+\n+        ss.client.formatters.add('html');\n+        ss.client.formatters.add('css');\n+        ss.client.formatters.add('javascript');\n+      });\n+\n+    ss.api.bundler.pack(client);\n+\n+    var html = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.html'),'utf-8');\n+    var js = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.js'),'utf-8');\n+    var css = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.css'),'utf-8');\n+    var expected_html = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/abc/expected.html'),'utf-8');\n+    var expected_js = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/abc/expected.js'),'utf-8');",
        "path": "test/unit/client/pack.test.js",
        "position": null,
        "original_position": 52,
        "commit_id": "ba5e83fd2090f51a64e0c2ba9bc626d42c091519",
        "original_commit_id": "320d1243f12fc6ccb1ea46313b9686d7559cf7fd",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Identifier 'expected_js' is not in camel case.\n",
        "created_at": "2015-04-09T17:36:40Z",
        "updated_at": "2015-04-10T10:22:03Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/528#discussion_r28083860",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/528",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28083860"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/528#discussion_r28083860"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/528"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28083861",
        "pull_request_review_id": null,
        "id": 28083861,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4MDgzODYx",
        "diff_hunk": "@@ -0,0 +1,59 @@\n+'use strict';\n+\n+var path    = require('path'),\n+  fs      = require('fs'),\n+  should  = require('should'),\n+  ss      = require( '../../../lib/socketstream'),\n+  options = ss.client.options,\n+  defineAbcClient = require('./abcClient');\n+\n+describe('pack',function() {\n+\n+\n+  beforeEach(function() {\n+\n+    // back to initial client state\n+    ss.client.assets.unload();\n+    ss.client.assets.load();\n+  });\n+\n+  afterEach(function() {\n+    ss.client.forget();\n+  });\n+\n+  var newEngine = function newEngine(api,config,options) {\n+    api.should.equal(ss.api);\n+    options.should.equal(ss.client.options);\n+    return {\n+      name: 'New',\n+      process: function (template, path, id, opts) {\n+        return '<script id=\"new-' + id + '\" type=\"text/x-tmpl\">' + template + JSON.stringify(opts.constants) + '</script>';\n+      }\n+    }\n+  };\n+\n+  it('should be available in formatters pack simple css and js', function() {\n+\n+    var client = defineAbcClient({ }, function() {\n+\n+        ss.api.client.send('constant','abc','abc');\n+\n+        ss.client.formatters.add('html');\n+        ss.client.formatters.add('css');\n+        ss.client.formatters.add('javascript');\n+      });\n+\n+    ss.api.bundler.pack(client);\n+\n+    var html = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.html'),'utf-8');\n+    var js = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.js'),'utf-8');\n+    var css = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.css'),'utf-8');\n+    var expected_html = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/abc/expected.html'),'utf-8');\n+    var expected_js = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/abc/expected.js'),'utf-8');\n+\n+    html.should.equal(expected_html);",
        "path": "test/unit/client/pack.test.js",
        "position": null,
        "original_position": 54,
        "commit_id": "ba5e83fd2090f51a64e0c2ba9bc626d42c091519",
        "original_commit_id": "320d1243f12fc6ccb1ea46313b9686d7559cf7fd",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Identifier 'expected_html' is not in camel case.\n",
        "created_at": "2015-04-09T17:36:40Z",
        "updated_at": "2015-04-10T10:22:03Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/528#discussion_r28083861",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/528",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28083861"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/528#discussion_r28083861"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/528"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28083862",
        "pull_request_review_id": null,
        "id": 28083862,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4MDgzODYy",
        "diff_hunk": "@@ -0,0 +1,59 @@\n+'use strict';\n+\n+var path    = require('path'),\n+  fs      = require('fs'),\n+  should  = require('should'),\n+  ss      = require( '../../../lib/socketstream'),\n+  options = ss.client.options,\n+  defineAbcClient = require('./abcClient');\n+\n+describe('pack',function() {\n+\n+\n+  beforeEach(function() {\n+\n+    // back to initial client state\n+    ss.client.assets.unload();\n+    ss.client.assets.load();\n+  });\n+\n+  afterEach(function() {\n+    ss.client.forget();\n+  });\n+\n+  var newEngine = function newEngine(api,config,options) {\n+    api.should.equal(ss.api);\n+    options.should.equal(ss.client.options);\n+    return {\n+      name: 'New',\n+      process: function (template, path, id, opts) {\n+        return '<script id=\"new-' + id + '\" type=\"text/x-tmpl\">' + template + JSON.stringify(opts.constants) + '</script>';\n+      }\n+    }\n+  };\n+\n+  it('should be available in formatters pack simple css and js', function() {\n+\n+    var client = defineAbcClient({ }, function() {\n+\n+        ss.api.client.send('constant','abc','abc');\n+\n+        ss.client.formatters.add('html');\n+        ss.client.formatters.add('css');\n+        ss.client.formatters.add('javascript');\n+      });\n+\n+    ss.api.bundler.pack(client);\n+\n+    var html = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.html'),'utf-8');\n+    var js = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.js'),'utf-8');\n+    var css = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.css'),'utf-8');\n+    var expected_html = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/abc/expected.html'),'utf-8');\n+    var expected_js = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/abc/expected.js'),'utf-8');\n+\n+    html.should.equal(expected_html);\n+    js.should.equal(expected_js);",
        "path": "test/unit/client/pack.test.js",
        "position": null,
        "original_position": 55,
        "commit_id": "ba5e83fd2090f51a64e0c2ba9bc626d42c091519",
        "original_commit_id": "320d1243f12fc6ccb1ea46313b9686d7559cf7fd",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Identifier 'expected_js' is not in camel case.\n",
        "created_at": "2015-04-09T17:36:40Z",
        "updated_at": "2015-04-10T10:22:03Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/528#discussion_r28083862",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/528",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28083862"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/528#discussion_r28083862"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/528"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28083863",
        "pull_request_review_id": null,
        "id": 28083863,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4MDgzODYz",
        "diff_hunk": "@@ -0,0 +1,59 @@\n+'use strict';\n+\n+var path    = require('path'),\n+  fs      = require('fs'),\n+  should  = require('should'),",
        "path": "test/unit/client/pack.test.js",
        "position": null,
        "original_position": 5,
        "commit_id": "ba5e83fd2090f51a64e0c2ba9bc626d42c091519",
        "original_commit_id": "320d1243f12fc6ccb1ea46313b9686d7559cf7fd",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'should' is defined but never used.\n",
        "created_at": "2015-04-09T17:36:41Z",
        "updated_at": "2015-04-10T10:22:03Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/528#discussion_r28083863",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/528",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28083863"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/528#discussion_r28083863"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/528"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28083864",
        "pull_request_review_id": null,
        "id": 28083864,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4MDgzODY0",
        "diff_hunk": "@@ -0,0 +1,59 @@\n+'use strict';\n+\n+var path    = require('path'),\n+  fs      = require('fs'),\n+  should  = require('should'),\n+  ss      = require( '../../../lib/socketstream'),\n+  options = ss.client.options,",
        "path": "test/unit/client/pack.test.js",
        "position": null,
        "original_position": 7,
        "commit_id": "ba5e83fd2090f51a64e0c2ba9bc626d42c091519",
        "original_commit_id": "320d1243f12fc6ccb1ea46313b9686d7559cf7fd",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'options' is defined but never used.\n",
        "created_at": "2015-04-09T17:36:41Z",
        "updated_at": "2015-04-10T10:22:03Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/528#discussion_r28083864",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/528",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28083864"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/528#discussion_r28083864"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/528"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28094252",
        "pull_request_review_id": null,
        "id": 28094252,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4MDk0MjUy",
        "diff_hunk": "@@ -0,0 +1,85 @@\n+'use strict';\n+\n+var path    = require('path'),\n+  fs      = require('fs'),\n+  should  = require('should'),\n+  ss      = require( '../../../lib/socketstream'),\n+  options = ss.client.options,\n+  defineAbcClient = require('./abcClient');\n+\n+describe('pack',function() {\n+\n+\n+  beforeEach(function() {\n+\n+    // back to initial client state\n+    ss.client.assets.unload();\n+    ss.client.assets.load();\n+  });\n+\n+  afterEach(function() {\n+    ss.client.forget();\n+  });\n+\n+  var newEngine = function newEngine(api,config,options) {\n+    api.should.equal(ss.api);\n+    options.should.equal(ss.client.options);\n+    return {\n+      name: 'New',\n+      process: function (template, path, id, opts) {\n+        return '<script id=\"new-' + id + '\" type=\"text/x-tmpl\">' + template + JSON.stringify(opts.constants) + '</script>';\n+      }\n+    }\n+  };\n+\n+  it('should make blank css and js bundles when nothing is defined', function() {\n+\n+    var client = defineAbcClient({\n+      code: undefined,\n+      css: undefined\n+    }, function() {\n+\n+      ss.client.formatters.add('html');\n+      ss.client.formatters.add('css');\n+      ss.client.formatters.add('javascript');\n+    });\n+\n+    ss.api.bundler.pack(client);\n+\n+    js.should.equal('');",
        "path": "test/unit/client/pack.test.js",
        "position": null,
        "original_position": 49,
        "commit_id": "ba5e83fd2090f51a64e0c2ba9bc626d42c091519",
        "original_commit_id": "3ef7ee76e1e62d28be2d21c733b0fa7bb14c4226",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'js' is not defined.\n",
        "created_at": "2015-04-09T19:27:18Z",
        "updated_at": "2015-04-10T10:22:03Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/528#discussion_r28094252",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/528",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28094252"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/528#discussion_r28094252"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/528"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28094253",
        "pull_request_review_id": null,
        "id": 28094253,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4MDk0MjUz",
        "diff_hunk": "@@ -0,0 +1,85 @@\n+'use strict';\n+\n+var path    = require('path'),\n+  fs      = require('fs'),\n+  should  = require('should'),\n+  ss      = require( '../../../lib/socketstream'),\n+  options = ss.client.options,\n+  defineAbcClient = require('./abcClient');\n+\n+describe('pack',function() {\n+\n+\n+  beforeEach(function() {\n+\n+    // back to initial client state\n+    ss.client.assets.unload();\n+    ss.client.assets.load();\n+  });\n+\n+  afterEach(function() {\n+    ss.client.forget();\n+  });\n+\n+  var newEngine = function newEngine(api,config,options) {\n+    api.should.equal(ss.api);\n+    options.should.equal(ss.client.options);\n+    return {\n+      name: 'New',\n+      process: function (template, path, id, opts) {\n+        return '<script id=\"new-' + id + '\" type=\"text/x-tmpl\">' + template + JSON.stringify(opts.constants) + '</script>';\n+      }\n+    }\n+  };\n+\n+  it('should make blank css and js bundles when nothing is defined', function() {\n+\n+    var client = defineAbcClient({\n+      code: undefined,\n+      css: undefined\n+    }, function() {\n+\n+      ss.client.formatters.add('html');\n+      ss.client.formatters.add('css');\n+      ss.client.formatters.add('javascript');\n+    });\n+\n+    ss.api.bundler.pack(client);\n+\n+    js.should.equal('');\n+    css.should.equal('');",
        "path": "test/unit/client/pack.test.js",
        "position": null,
        "original_position": 50,
        "commit_id": "ba5e83fd2090f51a64e0c2ba9bc626d42c091519",
        "original_commit_id": "3ef7ee76e1e62d28be2d21c733b0fa7bb14c4226",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'css' is not defined.\n",
        "created_at": "2015-04-09T19:27:18Z",
        "updated_at": "2015-04-10T10:22:03Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/528#discussion_r28094253",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/528",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28094253"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/528#discussion_r28094253"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/528"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28097380",
        "pull_request_review_id": null,
        "id": 28097380,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4MDk3Mzgw",
        "diff_hunk": "@@ -0,0 +1,3 @@\n+window.require=function(e,t){var n=require.resolve(e,t||\"/\"),r=require.modules[n]||require.initModule(n);if(!r)throw new Error(\"Failed to resolve module \"+e+\", tried \"+n);return r._cached?r._cached:r()},require.paths=[],require.modules={},require._core={events:!0,path:!0,vm:!0},require.resolve=function(e,t){function i(){for(var e=0,t;t=arguments[e];++e)if(require.modules[t])return t}t||(t=\"/\");if(require._core[e])return e;var n=require.modules.path();e=e.charAt(0)===\"/\"?n.resolve(t,e.substring(1)):e,e=e.match(/^(?:\\.\\.?\\/)/)?n.resolve(t,e):e;var r=i(e,n.join(e,\"index\"));if(r)return r;throw new Error(\"Cannot find module '\"+e+\"' within '\"+t+\"'\")},require.alias=function(e,t){var n=require.modules.path(),r=null;try{r=require.resolve(e+\"/package.json\",\"/\")}catch(i){r=require.resolve(e,\"/\")}var s=n.dirname(r),o=(Object.keys||function(e){var t=[];for(var n in e)t.push(n);return t})(require.modules);for(var u=0;u<o.length;u++){var a=o[u];if(a.slice(0,s.length+1)===s+\"/\"){var f=a.slice(s.length);require.modules[t+f]=require.modules[s+f]}else a===s&&(require.modules[t]=require.modules[s])}},require.define=function(e,t){var n=require._core[e]?\"\":require.modules.path().dirname(e),r=function(e){return require(e,n)};r.resolve=function(e){return require.resolve(e,n)},r.modules=require.modules,r.define=require.define;var i={exports:{}};require.modules[e]=function(){return require.modules[e]._cached=i.exports,t.call(i.exports,r,i,i.exports,n,e),require.modules[e]._cached=i.exports,i.exports}},typeof process==\"undefined\"&&(process={}),process.nextTick||(process.nextTick=function(){var e=[],t=typeof window!=\"undefined\"&&window.postMessage&&window.addEventListener;return t&&window.addEventListener(\"message\",function(t){if(t.source===window&&t.data===\"browserify-tick\"){t.stopPropagation();if(e.length>0){var n=e.shift();n()}}},!0),function(n){t?(e.push(n),window.postMessage(\"browserify-tick\",\"*\")):setTimeout(n,0)}}()),process.title||(process.title=\"browser\"),process.binding||(process.binding=function(e){if(e===\"evals\")return require(\"vm\");throw new Error(\"No such module\")}),process.cwd||(process.cwd=function(){return\".\"}),require.define(\"path\",function(e,t,n){function r(e,t){var n=[];for(var r=0;r<e.length;r++)t(e[r],r,e)&&n.push(e[r]);return n}function i(e,t){var n=0;for(var r=e.length;r>=0;r--){var i=e[r];i==\".\"?e.splice(r,1):i===\"..\"?(e.splice(r,1),n++):n&&(e.splice(r,1),n--)}if(t)for(;n--;n)e.unshift(\"..\");return e}var s=/^(.+\\/(?!$)|\\/)?((?:.+?)?(\\.[^.]*)?)$/;n.resolve=function(){var e=\"\",t=!1;for(var n=arguments.length;n>=-1&&!t;n--){var s=n>=0?arguments[n]:process.cwd();if(typeof s!=\"string\"||!s)continue;e=s+\"/\"+e,t=s.charAt(0)===\"/\"}return e=e.replace(/\\/\\.\\//,\"/\"),e=i(r(e.split(\"/\"),function(e){return!!e}),!t).join(\"/\"),(t?\"/\":\"\")+e||\".\"},n.normalize=function(e){var t=e.charAt(0)===\"/\",n=e.slice(-1)===\"/\";return e=i(r(e.split(\"/\"),function(e){return!!e}),!t).join(\"/\"),!e&&!t&&(e=\".\"),e&&n&&(e+=\"/\"),(t?\"/\":\"\")+e},n.join=function(){var e=Array.prototype.slice.call(arguments,0);return n.normalize(r(e,function(e){return e&&typeof e==\"string\"}).join(\"/\"))},n.dirname=function(e){var t=s.exec(e)[1]||\"\";return t?t===\"/\"?t:t.substring(0,t.length-1):\".\"},n.basename=function(e,t){var n=s.exec(e)[2]||\"\";return t&&n.substr(-1*t.length)===t&&(n=n.substr(0,n.length-t.length)),n},n.extname=function(e){return s.exec(e)[3]||\"\"}});",
        "path": "test/fixtures/project/client/abc/empty-expected.js",
        "position": null,
        "original_position": 1,
        "commit_id": "ba5e83fd2090f51a64e0c2ba9bc626d42c091519",
        "original_commit_id": "58cdf76ec861c571393fb2678e8edb6e71103a50",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Line is too long.<br>Missing semicolon.<br>Expected a conditional expression and instead saw an assignment.<br>Expected an assignment or function call and instead saw an expression.<br>The body of a for in should be wrapped in an if statement to filter unwanted properties from the prototype.<br>Wrap an immediate function invocation in parens to assist the reader in understanding that the expression is the result of a function, and not the function itself.<br>'r' is already defined.<br>'i' is already defined.\n",
        "created_at": "2015-04-09T20:05:23Z",
        "updated_at": "2015-04-10T10:22:03Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/528#discussion_r28097380",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/528",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28097380"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/528#discussion_r28097380"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/528"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28097382",
        "pull_request_review_id": null,
        "id": 28097382,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4MDk3Mzgy",
        "diff_hunk": "@@ -0,0 +1,3 @@\n+window.require=function(e,t){var n=require.resolve(e,t||\"/\"),r=require.modules[n]||require.initModule(n);if(!r)throw new Error(\"Failed to resolve module \"+e+\", tried \"+n);return r._cached?r._cached:r()},require.paths=[],require.modules={},require._core={events:!0,path:!0,vm:!0},require.resolve=function(e,t){function i(){for(var e=0,t;t=arguments[e];++e)if(require.modules[t])return t}t||(t=\"/\");if(require._core[e])return e;var n=require.modules.path();e=e.charAt(0)===\"/\"?n.resolve(t,e.substring(1)):e,e=e.match(/^(?:\\.\\.?\\/)/)?n.resolve(t,e):e;var r=i(e,n.join(e,\"index\"));if(r)return r;throw new Error(\"Cannot find module '\"+e+\"' within '\"+t+\"'\")},require.alias=function(e,t){var n=require.modules.path(),r=null;try{r=require.resolve(e+\"/package.json\",\"/\")}catch(i){r=require.resolve(e,\"/\")}var s=n.dirname(r),o=(Object.keys||function(e){var t=[];for(var n in e)t.push(n);return t})(require.modules);for(var u=0;u<o.length;u++){var a=o[u];if(a.slice(0,s.length+1)===s+\"/\"){var f=a.slice(s.length);require.modules[t+f]=require.modules[s+f]}else a===s&&(require.modules[t]=require.modules[s])}},require.define=function(e,t){var n=require._core[e]?\"\":require.modules.path().dirname(e),r=function(e){return require(e,n)};r.resolve=function(e){return require.resolve(e,n)},r.modules=require.modules,r.define=require.define;var i={exports:{}};require.modules[e]=function(){return require.modules[e]._cached=i.exports,t.call(i.exports,r,i,i.exports,n,e),require.modules[e]._cached=i.exports,i.exports}},typeof process==\"undefined\"&&(process={}),process.nextTick||(process.nextTick=function(){var e=[],t=typeof window!=\"undefined\"&&window.postMessage&&window.addEventListener;return t&&window.addEventListener(\"message\",function(t){if(t.source===window&&t.data===\"browserify-tick\"){t.stopPropagation();if(e.length>0){var n=e.shift();n()}}},!0),function(n){t?(e.push(n),window.postMessage(\"browserify-tick\",\"*\")):setTimeout(n,0)}}()),process.title||(process.title=\"browser\"),process.binding||(process.binding=function(e){if(e===\"evals\")return require(\"vm\");throw new Error(\"No such module\")}),process.cwd||(process.cwd=function(){return\".\"}),require.define(\"path\",function(e,t,n){function r(e,t){var n=[];for(var r=0;r<e.length;r++)t(e[r],r,e)&&n.push(e[r]);return n}function i(e,t){var n=0;for(var r=e.length;r>=0;r--){var i=e[r];i==\".\"?e.splice(r,1):i===\"..\"?(e.splice(r,1),n++):n&&(e.splice(r,1),n--)}if(t)for(;n--;n)e.unshift(\"..\");return e}var s=/^(.+\\/(?!$)|\\/)?((?:.+?)?(\\.[^.]*)?)$/;n.resolve=function(){var e=\"\",t=!1;for(var n=arguments.length;n>=-1&&!t;n--){var s=n>=0?arguments[n]:process.cwd();if(typeof s!=\"string\"||!s)continue;e=s+\"/\"+e,t=s.charAt(0)===\"/\"}return e=e.replace(/\\/\\.\\//,\"/\"),e=i(r(e.split(\"/\"),function(e){return!!e}),!t).join(\"/\"),(t?\"/\":\"\")+e||\".\"},n.normalize=function(e){var t=e.charAt(0)===\"/\",n=e.slice(-1)===\"/\";return e=i(r(e.split(\"/\"),function(e){return!!e}),!t).join(\"/\"),!e&&!t&&(e=\".\"),e&&n&&(e+=\"/\"),(t?\"/\":\"\")+e},n.join=function(){var e=Array.prototype.slice.call(arguments,0);return n.normalize(r(e,function(e){return e&&typeof e==\"string\"}).join(\"/\"))},n.dirname=function(e){var t=s.exec(e)[1]||\"\";return t?t===\"/\"?t:t.substring(0,t.length-1):\".\"},n.basename=function(e,t){var n=s.exec(e)[2]||\"\";return t&&n.substr(-1*t.length)===t&&(n=n.substr(0,n.length-t.length)),n},n.extname=function(e){return s.exec(e)[3]||\"\"}});\n+require.define(\"eventemitter2\",function(e,t,n,r,i){!function(e,t){function i(){this._events=new Object}function s(e){e&&(this.wildcard=e.wildcard,this.delimiter=e.delimiter||\".\",this.wildcard&&(this.listenerTree=new Object))}function o(e){this._events=new Object,s.call(this,e)}function u(e,t,n,r){if(!n)return;var i;if(r===t.length&&n._listeners){if(typeof n._listeners==\"function\")return e&&e.push(n._listeners),n;for(var s=0,o=n._listeners.length;s<o;s++)e&&e.push(n._listeners[s]);return n}if(t[r]===\"*\"||n[t[r]]){if(t[r]===\"*\"){for(var a in n)a!==\"_listeners\"&&n.hasOwnProperty(a)&&(i=u(e,t,n[a],r+1));return i}i=u(e,t,n[t[r]],r+1)}return n[\"*\"]&&u(e,t,n[\"*\"],r+1),i}function a(e,t){e=typeof e==\"string\"?e.split(this.delimiter):e.slice();var i=this.listenerTree,s=e.shift();while(s){i[s]||(i[s]=new Object),i=i[s];if(e.length===0){if(!i._listeners)i._listeners=t;else if(typeof i._listeners==\"function\")i._listeners=[i._listeners,t];else if(n(i._listeners)){i._listeners.push(t);if(!i._listeners.warned){var o=r;o>0&&i._listeners.length>o&&(i._listeners.warned=!0,console.error(\"(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.\",i._listeners.length),console.trace())}}return!0}s=e.shift()}return!0}var n=Array.isArray?Array.isArray:function(t){return Object.prototype.toString.call(t)===\"[object Array]\"},r=10;o.prototype.setMaxListeners=function(e){this._events||i.call(this),this._events.maxListeners=e},o.prototype.event=\"\",o.prototype.once=function(e,t){return this.many(e,1,t),this},o.prototype.many=function(e,t,n){function i(){--t===0&&r.off(e,i),n.apply(null,arguments)}var r=this;if(typeof n!=\"function\")throw new Error(\"many only accepts instances of Function\");return i._origin=n,this.on(e,i),r},o.prototype.emit=function(){this._events||i.call(this);var e=arguments[0];if(e===\"newListener\"&&!this._events.newListener)return!1;if(this._all){var t=arguments.length,n=new Array(t-1);for(var r=1;r<t;r++)n[r-1]=arguments[r];for(r=0,t=this._all.length;r<t;r++)this.event=e,this._all[r].apply(this,n)}if(e===\"error\"&&!this._all&&!this._events.error&&(!this.wildcard||!this.listenerTree.error))throw arguments[1]instanceof Error?arguments[1]:new Error(\"Uncaught, unspecified 'error' event.\");var s;if(this.wildcard){s=[];var o=typeof e==\"string\"?e.split(this.delimiter):e.slice();u.call(this,s,o,this.listenerTree,0)}else s=this._events[e];if(typeof s==\"function\"){this.event=e;if(arguments.length===1)s.call(this);else if(arguments.length>1)switch(arguments.length){case 2:s.call(this,arguments[1]);break;case 3:s.call(this,arguments[1],arguments[2]);break;default:var t=arguments.length,n=new Array(t-1);for(var r=1;r<t;r++)n[r-1]=arguments[r];s.apply(this,n)}return!0}if(s){var t=arguments.length,n=new Array(t-1);for(var r=1;r<t;r++)n[r-1]=arguments[r];var a=s.slice();for(var r=0,t=a.length;r<t;r++)this.event=e,a[r].apply(this,n);return!0}},o.prototype.on=function(e,s){this._events||i.call(this),this.emit(\"newListener\",e,s);if(this.wildcard)return a.call(this,e,s),this;if(!this._events[e])this._events[e]=s;else if(typeof this._events[e]==\"function\")this._events[e]=[this._events[e],s];else if(n(this._events[e])){this._events[e].push(s);if(!this._events[e].warned){var o;this._events.maxListeners!==t?o=this._events.maxListeners:o=r,o&&o>0&&this._events[e].length>o&&(this._events[e].warned=!0,console.error(\"(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.\",this._events[e].length),console.trace())}}return this},o.prototype.onAny=function(e){this._all||(this._all=[]);if(typeof e!=\"function\")throw new Error(\"onAny only accepts instances of Function\");return this._all.push(e),this},o.prototype.addListener=o.prototype.on,o.prototype.off=function(e,t){if(typeof t!=\"function\")throw new Error(\"removeListener only takes instances of Function\");var r;if(this.wildcard){var i=typeof e==\"string\"?e.split(this.delimiter):e.slice(),s=u.call(this,null,i,this.listenerTree,0);if(\"undefined\"==typeof s)return this;r=s._listeners}else{if(!this._events[e])return this;r=this._events[e]}if(n(r)){var o=-1;for(var a=0,f=r.length;a<f;a++)if(r[a]===t||r[a].listener&&r[a].listener===t||r[a]._origin&&r[a]._origin===t){o=a;break}if(o<0)return this;this.wildcard?s._listeners.splice(o,1):this._events[e].splice(o,1),r.length===0&&(this.wildcard?delete s._listeners:delete this._events[e])}else if(r===t||r.listener&&r.listener===t||r._origin&&r._origin===t)this.wildcard?delete s._listeners:delete this._events[e];return this},o.prototype.offAny=function(e){var t=0,n=0,r;if(e&&this._all&&this._all.length>0){r=this._all;for(t=0,n=r.length;t<n;t++)if(e===r[t])return r.splice(t,1),this}else this._all=[];return this},o.prototype.removeListener=o.prototype.off,o.prototype.removeAllListeners=function(e){if(arguments.length===0)return!this._events||i.call(this),this;if(this.wildcard){var t=typeof e==\"string\"?e.split(this.delimiter):e.slice(),n=u.call(this,null,t,this.listenerTree,0);if(\"undefined\"==typeof n)return this;n._listeners=null}else{if(!this._events[e])return this;this._events[e]=null}return this},o.prototype.listeners=function(e){if(this.wildcard){var t=[],r=typeof e==\"string\"?e.split(this.delimiter):e.slice();return u.call(this,t,r,this.listenerTree,0),t}return this._events||i.call(this),this._events[e]||(this._events[e]=[]),n(this._events[e])||(this._events[e]=[this._events[e]]),this._events[e]},o.prototype.listenersAny=function(){return this._all?this._all:[]},e.EventEmitter2=o}(typeof n==\"undefined\"?window:n)});",
        "path": "test/fixtures/project/client/abc/empty-expected.js",
        "position": null,
        "original_position": 2,
        "commit_id": "ba5e83fd2090f51a64e0c2ba9bc626d42c091519",
        "original_commit_id": "58cdf76ec861c571393fb2678e8edb6e71103a50",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Line is too long.<br>Missing '()' invoking a constructor.<br>Missing semicolon.<br>Too many errors. (66% scanned).\n",
        "created_at": "2015-04-09T20:05:24Z",
        "updated_at": "2015-04-10T10:22:03Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/528#discussion_r28097382",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/528",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28097382"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/528#discussion_r28097382"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/528"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28097384",
        "pull_request_review_id": null,
        "id": 28097384,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4MDk3Mzg0",
        "diff_hunk": "@@ -0,0 +1,89 @@\n+'use strict';\n+\n+var path    = require('path'),\n+  fs      = require('fs'),\n+  should  = require('should'),\n+  ss      = require( '../../../lib/socketstream'),\n+  options = ss.client.options,\n+  defineAbcClient = require('./abcClient');\n+\n+describe('pack',function() {\n+\n+\n+  beforeEach(function() {\n+\n+    // back to initial client state\n+    ss.client.assets.unload();\n+    ss.client.assets.load();\n+  });\n+\n+  afterEach(function() {\n+    ss.client.forget();\n+  });\n+\n+  var newEngine = function newEngine(api,config,options) {\n+    api.should.equal(ss.api);\n+    options.should.equal(ss.client.options);\n+    return {\n+      name: 'New',\n+      process: function (template, path, id, opts) {\n+        return '<script id=\"new-' + id + '\" type=\"text/x-tmpl\">' + template + JSON.stringify(opts.constants) + '</script>';\n+      }\n+    }\n+  };\n+\n+  it('should make blank css and minimal js bundles when nothing is defined', function() {\n+\n+    var client = defineAbcClient({\n+      code: undefined,\n+      css: undefined\n+    }, function() {\n+\n+      ss.client.formatters.add('html');\n+      ss.client.formatters.add('css');\n+      ss.client.formatters.add('javascript');\n+    });\n+\n+    ss.api.bundler.pack(client);\n+\n+    var js = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.js'),'utf-8');\n+    var css = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.css'),'utf-8');\n+    var expected_js = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/abc/empty-expected.js'),'utf-8');",
        "path": "test/unit/client/pack.test.js",
        "position": null,
        "original_position": 51,
        "commit_id": "ba5e83fd2090f51a64e0c2ba9bc626d42c091519",
        "original_commit_id": "58cdf76ec861c571393fb2678e8edb6e71103a50",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Identifier 'expected_js' is not in camel case.\n",
        "created_at": "2015-04-09T20:05:24Z",
        "updated_at": "2015-04-10T10:22:03Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/528#discussion_r28097384",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/528",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28097384"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/528#discussion_r28097384"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/528"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28097385",
        "pull_request_review_id": null,
        "id": 28097385,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4MDk3Mzg1",
        "diff_hunk": "@@ -0,0 +1,89 @@\n+'use strict';\n+\n+var path    = require('path'),\n+  fs      = require('fs'),\n+  should  = require('should'),\n+  ss      = require( '../../../lib/socketstream'),\n+  options = ss.client.options,\n+  defineAbcClient = require('./abcClient');\n+\n+describe('pack',function() {\n+\n+\n+  beforeEach(function() {\n+\n+    // back to initial client state\n+    ss.client.assets.unload();\n+    ss.client.assets.load();\n+  });\n+\n+  afterEach(function() {\n+    ss.client.forget();\n+  });\n+\n+  var newEngine = function newEngine(api,config,options) {\n+    api.should.equal(ss.api);\n+    options.should.equal(ss.client.options);\n+    return {\n+      name: 'New',\n+      process: function (template, path, id, opts) {\n+        return '<script id=\"new-' + id + '\" type=\"text/x-tmpl\">' + template + JSON.stringify(opts.constants) + '</script>';\n+      }\n+    }\n+  };\n+\n+  it('should make blank css and minimal js bundles when nothing is defined', function() {\n+\n+    var client = defineAbcClient({\n+      code: undefined,\n+      css: undefined\n+    }, function() {\n+\n+      ss.client.formatters.add('html');\n+      ss.client.formatters.add('css');\n+      ss.client.formatters.add('javascript');\n+    });\n+\n+    ss.api.bundler.pack(client);\n+\n+    var js = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.js'),'utf-8');\n+    var css = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.css'),'utf-8');\n+    var expected_js = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/abc/empty-expected.js'),'utf-8');\n+\n+    js.should.equal(expected_js);",
        "path": "test/unit/client/pack.test.js",
        "position": null,
        "original_position": 53,
        "commit_id": "ba5e83fd2090f51a64e0c2ba9bc626d42c091519",
        "original_commit_id": "58cdf76ec861c571393fb2678e8edb6e71103a50",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Identifier 'expected_js' is not in camel case.\n",
        "created_at": "2015-04-09T20:05:24Z",
        "updated_at": "2015-04-10T10:22:03Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/528#discussion_r28097385",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/528",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28097385"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/528#discussion_r28097385"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/528"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28134703",
        "pull_request_review_id": null,
        "id": 28134703,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4MTM0NzAz",
        "diff_hunk": "@@ -1,15 +1,13 @@\n 'use strict';\n \n-var path    = require('path'),\n-  should  = require('should'),\n-  sinon   = require('sinon'),\n-  ss      = require( '../../../lib/socketstream'),\n-  options = ss.client.options,\n+var ss      = require( '../../../lib/socketstream'),\n   defineAbcClient = require('./abcClient');\n \n \n   describe('code formatter loading API', function () {\n \n+    var sinon = require('sinon')",
        "path": "test/unit/client/formatters.test.js",
        "position": 14,
        "original_position": 14,
        "commit_id": "ba5e83fd2090f51a64e0c2ba9bc626d42c091519",
        "original_commit_id": "ba5e83fd2090f51a64e0c2ba9bc626d42c091519",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Missing semicolon.\n",
        "created_at": "2015-04-10T10:22:32Z",
        "updated_at": "2015-04-10T10:22:32Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/528#discussion_r28134703",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/528",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28134703"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/528#discussion_r28134703"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/528"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28134704",
        "pull_request_review_id": null,
        "id": 28134704,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4MTM0NzA0",
        "diff_hunk": "@@ -0,0 +1,88 @@\n+'use strict';\n+\n+var path    = require('path'),\n+  fs      = require('fs'),\n+  ss      = require( '../../../lib/socketstream'),\n+  options = ss.client.options,\n+  defineAbcClient = require('./abcClient');\n+\n+describe('pack',function() {\n+\n+\n+  beforeEach(function() {\n+\n+    // back to initial client state\n+    ss.client.assets.unload();\n+    ss.client.assets.load();\n+  });\n+\n+  afterEach(function() {\n+    ss.client.forget();\n+  });\n+\n+  var newEngine = function newEngine(api,config,options) {\n+    api.should.equal(ss.api);\n+    options.should.equal(ss.client.options);\n+    return {\n+      name: 'New',\n+      process: function (template, path, id, opts) {\n+        return '<script id=\"new-' + id + '\" type=\"text/x-tmpl\">' + template + JSON.stringify(opts.constants) + '</script>';\n+      }\n+    }\n+  };\n+\n+  it('should make blank css and minimal js bundles when nothing is defined', function() {\n+\n+    var client = defineAbcClient({\n+      code: undefined,\n+      css: undefined\n+    }, function() {\n+\n+      ss.client.formatters.add('html');\n+      ss.client.formatters.add('css');\n+      ss.client.formatters.add('javascript');\n+    });\n+\n+    ss.api.bundler.pack(client);\n+\n+    var js = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.js'),'utf-8');\n+    var css = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.css'),'utf-8');\n+    var expected_js = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/abc/empty-expected.min.js'),'utf-8');",
        "path": "test/unit/client/pack.test.js",
        "position": 50,
        "original_position": 50,
        "commit_id": "ba5e83fd2090f51a64e0c2ba9bc626d42c091519",
        "original_commit_id": "ba5e83fd2090f51a64e0c2ba9bc626d42c091519",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Identifier 'expected_js' is not in camel case.\n",
        "created_at": "2015-04-10T10:22:32Z",
        "updated_at": "2015-04-10T10:22:32Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/528#discussion_r28134704",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/528",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28134704"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/528#discussion_r28134704"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/528"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28134705",
        "pull_request_review_id": null,
        "id": 28134705,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4MTM0NzA1",
        "diff_hunk": "@@ -0,0 +1,88 @@\n+'use strict';\n+\n+var path    = require('path'),\n+  fs      = require('fs'),\n+  ss      = require( '../../../lib/socketstream'),\n+  options = ss.client.options,\n+  defineAbcClient = require('./abcClient');\n+\n+describe('pack',function() {\n+\n+\n+  beforeEach(function() {\n+\n+    // back to initial client state\n+    ss.client.assets.unload();\n+    ss.client.assets.load();\n+  });\n+\n+  afterEach(function() {\n+    ss.client.forget();\n+  });\n+\n+  var newEngine = function newEngine(api,config,options) {\n+    api.should.equal(ss.api);\n+    options.should.equal(ss.client.options);\n+    return {\n+      name: 'New',\n+      process: function (template, path, id, opts) {\n+        return '<script id=\"new-' + id + '\" type=\"text/x-tmpl\">' + template + JSON.stringify(opts.constants) + '</script>';\n+      }\n+    }\n+  };\n+\n+  it('should make blank css and minimal js bundles when nothing is defined', function() {\n+\n+    var client = defineAbcClient({\n+      code: undefined,\n+      css: undefined\n+    }, function() {\n+\n+      ss.client.formatters.add('html');\n+      ss.client.formatters.add('css');\n+      ss.client.formatters.add('javascript');\n+    });\n+\n+    ss.api.bundler.pack(client);\n+\n+    var js = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.js'),'utf-8');\n+    var css = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.css'),'utf-8');\n+    var expected_js = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/abc/empty-expected.min.js'),'utf-8');\n+\n+    js.should.equal(expected_js);\n+    css.should.equal('');\n+  });\n+\n+  it('should be available in formatters pack simple css and js', function() {\n+\n+    var client = defineAbcClient({ }, function() {\n+\n+        ss.api.client.send('constant','abc','abc');\n+\n+        ss.client.formatters.add('html');\n+        ss.client.formatters.add('css');\n+        ss.client.formatters.add('javascript');\n+      });\n+\n+    ss.api.bundler.pack(client);\n+\n+    var html = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.html'),'utf-8');\n+    var js = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.js'),'utf-8');\n+    var css = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.css'),'utf-8');\n+    var expected_html = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/abc/expected.html'),'utf-8');\n+    var expected_js = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/abc/expected.min.js'),'utf-8');",
        "path": "test/unit/client/pack.test.js",
        "position": 73,
        "original_position": 73,
        "commit_id": "ba5e83fd2090f51a64e0c2ba9bc626d42c091519",
        "original_commit_id": "ba5e83fd2090f51a64e0c2ba9bc626d42c091519",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Identifier 'expected_js' is not in camel case.\n",
        "created_at": "2015-04-10T10:22:32Z",
        "updated_at": "2015-04-10T10:22:32Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/528#discussion_r28134705",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/528",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28134705"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/528#discussion_r28134705"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/528"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28134706",
        "pull_request_review_id": null,
        "id": 28134706,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4MTM0NzA2",
        "diff_hunk": "@@ -0,0 +1,88 @@\n+'use strict';\n+\n+var path    = require('path'),\n+  fs      = require('fs'),\n+  ss      = require( '../../../lib/socketstream'),\n+  options = ss.client.options,\n+  defineAbcClient = require('./abcClient');\n+\n+describe('pack',function() {\n+\n+\n+  beforeEach(function() {\n+\n+    // back to initial client state\n+    ss.client.assets.unload();\n+    ss.client.assets.load();\n+  });\n+\n+  afterEach(function() {\n+    ss.client.forget();\n+  });\n+\n+  var newEngine = function newEngine(api,config,options) {\n+    api.should.equal(ss.api);\n+    options.should.equal(ss.client.options);\n+    return {\n+      name: 'New',\n+      process: function (template, path, id, opts) {\n+        return '<script id=\"new-' + id + '\" type=\"text/x-tmpl\">' + template + JSON.stringify(opts.constants) + '</script>';\n+      }\n+    }\n+  };\n+\n+  it('should make blank css and minimal js bundles when nothing is defined', function() {\n+\n+    var client = defineAbcClient({\n+      code: undefined,\n+      css: undefined\n+    }, function() {\n+\n+      ss.client.formatters.add('html');\n+      ss.client.formatters.add('css');\n+      ss.client.formatters.add('javascript');\n+    });\n+\n+    ss.api.bundler.pack(client);\n+\n+    var js = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.js'),'utf-8');\n+    var css = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.css'),'utf-8');\n+    var expected_js = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/abc/empty-expected.min.js'),'utf-8');\n+\n+    js.should.equal(expected_js);\n+    css.should.equal('');\n+  });\n+\n+  it('should be available in formatters pack simple css and js', function() {\n+\n+    var client = defineAbcClient({ }, function() {\n+\n+        ss.api.client.send('constant','abc','abc');\n+\n+        ss.client.formatters.add('html');\n+        ss.client.formatters.add('css');\n+        ss.client.formatters.add('javascript');\n+      });\n+\n+    ss.api.bundler.pack(client);\n+\n+    var html = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.html'),'utf-8');\n+    var js = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.js'),'utf-8');\n+    var css = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.css'),'utf-8');\n+    var expected_html = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/abc/expected.html'),'utf-8');\n+    var expected_js = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/abc/expected.min.js'),'utf-8');\n+\n+    html.should.equal(expected_html);",
        "path": "test/unit/client/pack.test.js",
        "position": 75,
        "original_position": 75,
        "commit_id": "ba5e83fd2090f51a64e0c2ba9bc626d42c091519",
        "original_commit_id": "ba5e83fd2090f51a64e0c2ba9bc626d42c091519",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Identifier 'expected_html' is not in camel case.\n",
        "created_at": "2015-04-10T10:22:32Z",
        "updated_at": "2015-04-10T10:22:32Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/528#discussion_r28134706",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/528",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28134706"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/528#discussion_r28134706"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/528"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28134707",
        "pull_request_review_id": null,
        "id": 28134707,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4MTM0NzA3",
        "diff_hunk": "@@ -0,0 +1,88 @@\n+'use strict';\n+\n+var path    = require('path'),\n+  fs      = require('fs'),\n+  ss      = require( '../../../lib/socketstream'),\n+  options = ss.client.options,\n+  defineAbcClient = require('./abcClient');\n+\n+describe('pack',function() {\n+\n+\n+  beforeEach(function() {\n+\n+    // back to initial client state\n+    ss.client.assets.unload();\n+    ss.client.assets.load();\n+  });\n+\n+  afterEach(function() {\n+    ss.client.forget();\n+  });\n+\n+  var newEngine = function newEngine(api,config,options) {\n+    api.should.equal(ss.api);\n+    options.should.equal(ss.client.options);\n+    return {\n+      name: 'New',\n+      process: function (template, path, id, opts) {\n+        return '<script id=\"new-' + id + '\" type=\"text/x-tmpl\">' + template + JSON.stringify(opts.constants) + '</script>';\n+      }\n+    }\n+  };\n+\n+  it('should make blank css and minimal js bundles when nothing is defined', function() {\n+\n+    var client = defineAbcClient({\n+      code: undefined,\n+      css: undefined\n+    }, function() {\n+\n+      ss.client.formatters.add('html');\n+      ss.client.formatters.add('css');\n+      ss.client.formatters.add('javascript');\n+    });\n+\n+    ss.api.bundler.pack(client);\n+\n+    var js = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.js'),'utf-8');\n+    var css = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.css'),'utf-8');\n+    var expected_js = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/abc/empty-expected.min.js'),'utf-8');\n+\n+    js.should.equal(expected_js);\n+    css.should.equal('');\n+  });\n+\n+  it('should be available in formatters pack simple css and js', function() {\n+\n+    var client = defineAbcClient({ }, function() {\n+\n+        ss.api.client.send('constant','abc','abc');\n+\n+        ss.client.formatters.add('html');\n+        ss.client.formatters.add('css');\n+        ss.client.formatters.add('javascript');\n+      });\n+\n+    ss.api.bundler.pack(client);\n+\n+    var html = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.html'),'utf-8');\n+    var js = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.js'),'utf-8');\n+    var css = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.css'),'utf-8');\n+    var expected_html = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/abc/expected.html'),'utf-8');\n+    var expected_js = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/abc/expected.min.js'),'utf-8');\n+\n+    html.should.equal(expected_html);\n+    js.should.equal(expected_js);",
        "path": "test/unit/client/pack.test.js",
        "position": 76,
        "original_position": 76,
        "commit_id": "ba5e83fd2090f51a64e0c2ba9bc626d42c091519",
        "original_commit_id": "ba5e83fd2090f51a64e0c2ba9bc626d42c091519",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Identifier 'expected_js' is not in camel case.\n",
        "created_at": "2015-04-10T10:22:33Z",
        "updated_at": "2015-04-10T10:22:33Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/528#discussion_r28134707",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/528",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28134707"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/528#discussion_r28134707"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/528"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28134708",
        "pull_request_review_id": null,
        "id": 28134708,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4MTM0NzA4",
        "diff_hunk": "@@ -0,0 +1,88 @@\n+'use strict';\n+\n+var path    = require('path'),\n+  fs      = require('fs'),\n+  ss      = require( '../../../lib/socketstream'),\n+  options = ss.client.options,",
        "path": "test/unit/client/pack.test.js",
        "position": 6,
        "original_position": 6,
        "commit_id": "ba5e83fd2090f51a64e0c2ba9bc626d42c091519",
        "original_commit_id": "ba5e83fd2090f51a64e0c2ba9bc626d42c091519",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'options' is defined but never used.\n",
        "created_at": "2015-04-10T10:22:33Z",
        "updated_at": "2015-04-10T10:22:33Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/528#discussion_r28134708",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/528",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28134708"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/528#discussion_r28134708"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/528"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28205517",
        "pull_request_review_id": null,
        "id": 28205517,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4MjA1NTE3",
        "diff_hunk": "@@ -485,7 +497,7 @@ module.exports = function(ss,options) {\n           //pathPrefix: entry.importedBy,\n           compress: true\n         };\n-        if (entry.content) {\n+        if (typeof entry.content === \"string\") {",
        "path": "lib/client/bundler/index.js",
        "position": 33,
        "original_position": 33,
        "commit_id": "8eeac72e649886f372ca4c8e459754289dfca268",
        "original_commit_id": "fb162bd37405f6b4f82f622cb0722d18733bf638",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Mixed double and single quotes.\n",
        "created_at": "2015-04-12T17:36:46Z",
        "updated_at": "2015-04-12T18:42:29Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/530#discussion_r28205517",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/530",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28205517"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/530#discussion_r28205517"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/530"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28206020",
        "pull_request_review_id": null,
        "id": 28206020,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4MjA2MDIw",
        "diff_hunk": "@@ -69,40 +66,36 @@ describe('client system library', function () {\n \n         //TODO options.entryModuleName\n         //TODO options.defaultEntryInit\n-    });\n-\n-\n-\n-    describe('#load', function () {\n-\n-\n-\n-    });\n-\n-\n-\n-    describe('#serve', function () {\n-\n-\n-\n-        describe('#js', function () {\n-\n-\n-\n-        });\n-\n-\n-\n-        describe('#initCode', function () {\n-\n-\n-\n-        });\n-\n-\n \n+      it('should add start code to bootstrap',function() {\n+        var client = {};\n+        var startLength = ss.api.bundler.startCode(client).length;",
        "path": "test/unit/client/system/index.test.js",
        "position": null,
        "original_position": 65,
        "commit_id": "8eeac72e649886f372ca4c8e459754289dfca268",
        "original_commit_id": "6c2eb58a895be49e8ed9a38d2f69e58d3c36cb1c",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'startLength' is defined but never used.\n",
        "created_at": "2015-04-12T18:38:40Z",
        "updated_at": "2015-04-12T18:42:29Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/530#discussion_r28206020",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/530",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/28206020"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/530#discussion_r28206020"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/530"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/30473173",
        "pull_request_review_id": null,
        "id": 30473173,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNDczMTcz",
        "diff_hunk": "@@ -5,19 +5,18 @@\n \n \n \n-var channels, connect, create, sessionStore, subscriptions, uid;\n+var create, sessionSecret;\n \n-connect = require('connect');\n var expressSession = require('express-session');\n \n-channels = require('./channels');\n+var channels = require('./channels');\n \n-subscriptions = require('../websocket/subscriptions');\n+var subscriptions = require('../websocket/subscriptions');\n \n-uid = require('uid2');\n+var uid = require('uid2');\n \n // Define default session store\n-sessionStore = new expressSession.MemoryStore;\n+var sessionStore = new expressSession.MemoryStore;",
        "path": "lib/session/index.js",
        "position": 21,
        "original_position": 21,
        "commit_id": "e4f5b34625b2b74bc4b6f1bd35c468095639fdfd",
        "original_commit_id": "e4f5b34625b2b74bc4b6f1bd35c468095639fdfd",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Missing '()' invoking a constructor.\n",
        "created_at": "2015-05-17T18:37:08Z",
        "updated_at": "2015-05-17T18:37:08Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/545#discussion_r30473173",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/545",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/30473173"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/545#discussion_r30473173"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/545"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/30473174",
        "pull_request_review_id": null,
        "id": 30473174,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNDczMTc0",
        "diff_hunk": "@@ -36,6 +35,11 @@ exports.store = {\n   }\n };\n \n+// TODO: expand this functionality; expose the sessions options as part of the ss API\n+exports.setSecret(secret) {",
        "path": "lib/session/index.js",
        "position": 30,
        "original_position": 30,
        "commit_id": "e4f5b34625b2b74bc4b6f1bd35c468095639fdfd",
        "original_commit_id": "e4f5b34625b2b74bc4b6f1bd35c468095639fdfd",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Missing semicolon.<br>'secret' is not defined.\n",
        "created_at": "2015-05-17T18:37:08Z",
        "updated_at": "2015-05-17T18:37:08Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/545#discussion_r30473174",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/545",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/30473174"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/545#discussion_r30473174"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/545"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/30473175",
        "pull_request_review_id": null,
        "id": 30473175,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNDczMTc1",
        "diff_hunk": "@@ -36,6 +35,11 @@ exports.store = {\n   }\n };\n \n+// TODO: expand this functionality; expose the sessions options as part of the ss API\n+exports.setSecret(secret) {\n+  sessionSecret = secret;\n+};",
        "path": "lib/session/index.js",
        "position": 32,
        "original_position": 32,
        "commit_id": "e4f5b34625b2b74bc4b6f1bd35c468095639fdfd",
        "original_commit_id": "e4f5b34625b2b74bc4b6f1bd35c468095639fdfd",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Unnecessary semicolon.\n",
        "created_at": "2015-05-17T18:37:09Z",
        "updated_at": "2015-05-17T18:37:09Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/545#discussion_r30473175",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/545",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/30473175"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/545#discussion_r30473175"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/545"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/30473176",
        "pull_request_review_id": null,
        "id": 30473176,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNDczMTc2",
        "diff_hunk": "@@ -36,6 +35,11 @@ exports.store = {\n   }\n };\n \n+// TODO: expand this functionality; expose the sessions options as part of the ss API\n+exports.setSecret(secret) {\n+  sessionSecret = secret;",
        "path": "lib/session/index.js",
        "position": 31,
        "original_position": 31,
        "commit_id": "e4f5b34625b2b74bc4b6f1bd35c468095639fdfd",
        "original_commit_id": "e4f5b34625b2b74bc4b6f1bd35c468095639fdfd",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'secret' is not defined.\n",
        "created_at": "2015-05-17T18:37:09Z",
        "updated_at": "2015-05-17T18:37:09Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/545#discussion_r30473176",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/545",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/30473176"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/545#discussion_r30473176"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/545"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/30579987",
        "pull_request_review_id": null,
        "id": 30579987,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNTc5OTg3",
        "diff_hunk": "@@ -21,7 +21,8 @@ sessionStore = new expressSession.MemoryStore;\n \n // Expose options which can be changed in your app\n exports.options = {\n-  maxAge: null // by default session exists for duration of user agent (e.g. until browser is closed)\n+  maxAge: null, // by default session exists for duration of user agent (e.g. until browser is closed)\n+  secret: \"SocketStream\"",
        "path": "lib/session/index.js",
        "position": 6,
        "original_position": 6,
        "commit_id": "6dbca7f2c33171b5114aae6dd50391dfc0a73ba3",
        "original_commit_id": "6dbca7f2c33171b5114aae6dd50391dfc0a73ba3",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Mixed double and single quotes.\n",
        "created_at": "2015-05-19T08:50:43Z",
        "updated_at": "2015-05-19T08:50:43Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/546#discussion_r30579987",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/546",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/30579987"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/546#discussion_r30579987"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/546"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/30739494",
        "pull_request_review_id": null,
        "id": 30739494,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNzM5NDk0",
        "diff_hunk": "@@ -9,13 +9,13 @@ var openSocketsById = {};\n \n var processSession = function(socket) {\n   try {\n-    var raw= socket.request.headers.cookie.split(';');\n-    if (raw.length === 1) {\n-      socket.sessionId = (raw[0].split('='))[1];\n-    }\n-    else {\n-      socket.sessionId = (raw[1].split('='))[1];\n-    }\n+    socket.request.headers.cookie.split(';').some(function(item) {\n+        var item_di = item.split('=');\n+        if (item_di[0].trim() == 'connect.sid') {",
        "path": "lib/websocket/transports/engineio/index.js",
        "position": 13,
        "original_position": 13,
        "commit_id": "2149570b91be0a25e943f3562577d5035309bdc6",
        "original_commit_id": "2149570b91be0a25e943f3562577d5035309bdc6",
        "user": {
            "login": "thepian",
            "id": 72638,
            "node_id": "MDQ6VXNlcjcyNjM4",
            "avatar_url": "https://avatars3.githubusercontent.com/u/72638?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/thepian",
            "html_url": "https://github.com/thepian",
            "followers_url": "https://api.github.com/users/thepian/followers",
            "following_url": "https://api.github.com/users/thepian/following{/other_user}",
            "gists_url": "https://api.github.com/users/thepian/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/thepian/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/thepian/subscriptions",
            "organizations_url": "https://api.github.com/users/thepian/orgs",
            "repos_url": "https://api.github.com/users/thepian/repos",
            "events_url": "https://api.github.com/users/thepian/events{/privacy}",
            "received_events_url": "https://api.github.com/users/thepian/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "shouldn't this be using configuration ?\n",
        "created_at": "2015-05-20T19:27:56Z",
        "updated_at": "2015-05-20T19:27:56Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/537#discussion_r30739494",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/537",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/30739494"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/537#discussion_r30739494"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/537"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/30774113",
        "pull_request_review_id": null,
        "id": 30774113,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNzc0MTEz",
        "diff_hunk": "@@ -9,13 +9,13 @@ var openSocketsById = {};\n \n var processSession = function(socket) {\n   try {\n-    var raw= socket.request.headers.cookie.split(';');\n-    if (raw.length === 1) {\n-      socket.sessionId = (raw[0].split('='))[1];\n-    }\n-    else {\n-      socket.sessionId = (raw[1].split('='))[1];\n-    }\n+    socket.request.headers.cookie.split(';').some(function(item) {\n+        var item_di = item.split('=');\n+        if (item_di[0].trim() == 'connect.sid') {",
        "path": "lib/websocket/transports/engineio/index.js",
        "position": 13,
        "original_position": 13,
        "commit_id": "2149570b91be0a25e943f3562577d5035309bdc6",
        "original_commit_id": "2149570b91be0a25e943f3562577d5035309bdc6",
        "user": {
            "login": "kulicuu",
            "id": 355726,
            "node_id": "MDQ6VXNlcjM1NTcyNg==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/355726?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kulicuu",
            "html_url": "https://github.com/kulicuu",
            "followers_url": "https://api.github.com/users/kulicuu/followers",
            "following_url": "https://api.github.com/users/kulicuu/following{/other_user}",
            "gists_url": "https://api.github.com/users/kulicuu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kulicuu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kulicuu/subscriptions",
            "organizations_url": "https://api.github.com/users/kulicuu/orgs",
            "repos_url": "https://api.github.com/users/kulicuu/repos",
            "events_url": "https://api.github.com/users/kulicuu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kulicuu/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It's a bit different now that I've fixed #543 , in that the cookieParser secret is injected.  Are there more config variables that should be brought in here ?\n",
        "created_at": "2015-05-21T05:42:02Z",
        "updated_at": "2015-05-21T05:42:02Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/537#discussion_r30774113",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/537",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/30774113"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/537#discussion_r30774113"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/537"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/30908633",
        "pull_request_review_id": null,
        "id": 30908633,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwOTA4NjMz",
        "diff_hunk": "@@ -66,145 +125,250 @@ module.exports = function(ss, bundlers, bundlerById, options) {\n     }\n   }\n \n-  return {\n-    constants: function() {\n-      var result = {}, k;\n+  /**\n+   * @ngdoc method\n+   * @name bundler.default:default#entries\n+   * @methodOf bundler.default:default\n+   * @function\n+   * @description\n+   * Provides the view and the pack functions with a\n+   * list of entries for an asset type relative to the client directory.\n+   * The default implementation is used.\n+   *\n+   * An entry describes:\n+   * - file: source file name relative to client directory\n+   * - importedFrom: Pulled in by require in other file\n+   * - content: If pre-loaded\n+   * - type: If system asset it will have type lib/mod\n+   * - bundle: which production bundle (html, tmpl, css, js, worker)\n+   * - assetType: css, js, html\n+   * - extension: source file extension\n+   *\n+   * @param {String} assetType js/css/tmpl\n+   * @param {Object} systemAssets Collection of libs, modules, initCode\n+   * @returns {[AssetEntry]} List of output entries\n+   */\n+  function entries(assetType,systemAssets) {\n+    // jshint validthis:true\n+    var includes = this.client.includes;\n+    return ss.bundler.entries(this.client, assetType, systemAssets).filter(function(entry) {\n+      return entry.includeType? includes[entry.includeType] : true;\n+    });\n+  }\n \n-      // mixin system constants\n-      for(k in system.assets.constants) {\n-        result[k] = system.assets.constants[k].value;\n-      }\n+  /**\n+   * @ngdoc method\n+   * @name bundler.default:default#system\n+   * @methodOf bundler.default:default\n+   * @function\n+   * @description\n+   * Return entries for the loader/start/module depending on includes.system client config and system assets.\n+   * Multiple arguments will attempt to add module for the name.\n+   * Special module names are 'loader' and 'start'.\n+   *\n+   * @returns {AssetEntry} Resource entries array\n+   */\n+  function systemModule(/* first_name */) {\n+    var entries = [],\n+        // jshint validthis:true\n+        client = this.client;\n+\n+    /*jshint -W084 */\n+    for(var i= 0,name; name = arguments[i]; ++i) {\n+      switch(name) {\n+        case 'loader':\n+          entries.push(ss.bundler.browserifyLoader());\n+          break;\n+        case 'libs':\n+          entries.push(ss.bundler.systemLibs());\n+          break;\n+        case 'start':\n+          entries = entries.concat(ss.bundler.constants(client));\n+          if (client.includes.initCode) {\n+            entries = entries.concat(ss.bundler.startCode(client));\n+          }\n+          break;\n \n-      // mixin client constants\n-      var client = this.client;\n-      if (client.constants) {\n-        for(k in client.constants) {\n-          result[k] = client.constants[k];\n-        }\n+        //case \"eventemitter2\":\n+        //case \"socketstream\":\n+        default:\n+          entries.push(ss.bundler.systemModule(name));\n+          break;\n       }\n+    }\n \n-      return result;\n-    },\n+    return entries;\n+  }\n \n-    locals: function() {\n-      var result = {}, k;\n+  function constants() {\n+    var result = {}, k;\n \n-      // mixin system locals\n-      for(k in system.assets.locals) {\n-        result[k] = system.assets.locals[k].value;\n-      }\n+    // mixin system constants\n+    for(k in system.assets.constants) {",
        "path": "lib/client/bundler/proto.js",
        "position": 183,
        "original_position": 183,
        "commit_id": "6bd5ed7af7ad0c86c5126a6a10c5dd4f96ec2141",
        "original_commit_id": "6bd5ed7af7ad0c86c5126a6a10c5dd4f96ec2141",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The body of a for in should be wrapped in an if statement to filter unwanted properties from the prototype.\n",
        "created_at": "2015-05-22T16:12:24Z",
        "updated_at": "2015-05-22T16:12:24Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/536#discussion_r30908633",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/536",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/30908633"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/536#discussion_r30908633"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/536"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/30908635",
        "pull_request_review_id": null,
        "id": 30908635,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwOTA4NjM1",
        "diff_hunk": "@@ -66,145 +125,250 @@ module.exports = function(ss, bundlers, bundlerById, options) {\n     }\n   }\n \n-  return {\n-    constants: function() {\n-      var result = {}, k;\n+  /**\n+   * @ngdoc method\n+   * @name bundler.default:default#entries\n+   * @methodOf bundler.default:default\n+   * @function\n+   * @description\n+   * Provides the view and the pack functions with a\n+   * list of entries for an asset type relative to the client directory.\n+   * The default implementation is used.\n+   *\n+   * An entry describes:\n+   * - file: source file name relative to client directory\n+   * - importedFrom: Pulled in by require in other file\n+   * - content: If pre-loaded\n+   * - type: If system asset it will have type lib/mod\n+   * - bundle: which production bundle (html, tmpl, css, js, worker)\n+   * - assetType: css, js, html\n+   * - extension: source file extension\n+   *\n+   * @param {String} assetType js/css/tmpl\n+   * @param {Object} systemAssets Collection of libs, modules, initCode\n+   * @returns {[AssetEntry]} List of output entries\n+   */\n+  function entries(assetType,systemAssets) {\n+    // jshint validthis:true\n+    var includes = this.client.includes;\n+    return ss.bundler.entries(this.client, assetType, systemAssets).filter(function(entry) {\n+      return entry.includeType? includes[entry.includeType] : true;\n+    });\n+  }\n \n-      // mixin system constants\n-      for(k in system.assets.constants) {\n-        result[k] = system.assets.constants[k].value;\n-      }\n+  /**\n+   * @ngdoc method\n+   * @name bundler.default:default#system\n+   * @methodOf bundler.default:default\n+   * @function\n+   * @description\n+   * Return entries for the loader/start/module depending on includes.system client config and system assets.\n+   * Multiple arguments will attempt to add module for the name.\n+   * Special module names are 'loader' and 'start'.\n+   *\n+   * @returns {AssetEntry} Resource entries array\n+   */\n+  function systemModule(/* first_name */) {\n+    var entries = [],\n+        // jshint validthis:true\n+        client = this.client;\n+\n+    /*jshint -W084 */\n+    for(var i= 0,name; name = arguments[i]; ++i) {\n+      switch(name) {\n+        case 'loader':\n+          entries.push(ss.bundler.browserifyLoader());\n+          break;\n+        case 'libs':\n+          entries.push(ss.bundler.systemLibs());\n+          break;\n+        case 'start':\n+          entries = entries.concat(ss.bundler.constants(client));\n+          if (client.includes.initCode) {\n+            entries = entries.concat(ss.bundler.startCode(client));\n+          }\n+          break;\n \n-      // mixin client constants\n-      var client = this.client;\n-      if (client.constants) {\n-        for(k in client.constants) {\n-          result[k] = client.constants[k];\n-        }\n+        //case \"eventemitter2\":\n+        //case \"socketstream\":\n+        default:\n+          entries.push(ss.bundler.systemModule(name));\n+          break;\n       }\n+    }\n \n-      return result;\n-    },\n+    return entries;\n+  }\n \n-    locals: function() {\n-      var result = {}, k;\n+  function constants() {\n+    var result = {}, k;\n \n-      // mixin system locals\n-      for(k in system.assets.locals) {\n-        result[k] = system.assets.locals[k].value;\n-      }\n+    // mixin system constants\n+    for(k in system.assets.constants) {\n+      result[k] = system.assets.constants[k].value;\n+    }\n \n-      // mixin client constants\n-      var client = this.client;\n-      if (client.locals) {\n-        for(k in client.locals) {\n-          result[k] = client.locals[k];\n-        }\n+    // mixin client constants\n+    // jshint validthis:true\n+    var client = this.client;\n+    if (client.constants) {\n+      for(k in client.constants) {",
        "path": "lib/client/bundler/proto.js",
        "position": 197,
        "original_position": 197,
        "commit_id": "6bd5ed7af7ad0c86c5126a6a10c5dd4f96ec2141",
        "original_commit_id": "6bd5ed7af7ad0c86c5126a6a10c5dd4f96ec2141",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The body of a for in should be wrapped in an if statement to filter unwanted properties from the prototype.\n",
        "created_at": "2015-05-22T16:12:24Z",
        "updated_at": "2015-05-22T16:12:24Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/536#discussion_r30908635",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/536",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/30908635"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/536#discussion_r30908635"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/536"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/30908636",
        "pull_request_review_id": null,
        "id": 30908636,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwOTA4NjM2",
        "diff_hunk": "@@ -66,145 +125,250 @@ module.exports = function(ss, bundlers, bundlerById, options) {\n     }\n   }\n \n-  return {\n-    constants: function() {\n-      var result = {}, k;\n+  /**\n+   * @ngdoc method\n+   * @name bundler.default:default#entries\n+   * @methodOf bundler.default:default\n+   * @function\n+   * @description\n+   * Provides the view and the pack functions with a\n+   * list of entries for an asset type relative to the client directory.\n+   * The default implementation is used.\n+   *\n+   * An entry describes:\n+   * - file: source file name relative to client directory\n+   * - importedFrom: Pulled in by require in other file\n+   * - content: If pre-loaded\n+   * - type: If system asset it will have type lib/mod\n+   * - bundle: which production bundle (html, tmpl, css, js, worker)\n+   * - assetType: css, js, html\n+   * - extension: source file extension\n+   *\n+   * @param {String} assetType js/css/tmpl\n+   * @param {Object} systemAssets Collection of libs, modules, initCode\n+   * @returns {[AssetEntry]} List of output entries\n+   */\n+  function entries(assetType,systemAssets) {\n+    // jshint validthis:true\n+    var includes = this.client.includes;\n+    return ss.bundler.entries(this.client, assetType, systemAssets).filter(function(entry) {\n+      return entry.includeType? includes[entry.includeType] : true;\n+    });\n+  }\n \n-      // mixin system constants\n-      for(k in system.assets.constants) {\n-        result[k] = system.assets.constants[k].value;\n-      }\n+  /**\n+   * @ngdoc method\n+   * @name bundler.default:default#system\n+   * @methodOf bundler.default:default\n+   * @function\n+   * @description\n+   * Return entries for the loader/start/module depending on includes.system client config and system assets.\n+   * Multiple arguments will attempt to add module for the name.\n+   * Special module names are 'loader' and 'start'.\n+   *\n+   * @returns {AssetEntry} Resource entries array\n+   */\n+  function systemModule(/* first_name */) {\n+    var entries = [],\n+        // jshint validthis:true\n+        client = this.client;\n+\n+    /*jshint -W084 */\n+    for(var i= 0,name; name = arguments[i]; ++i) {\n+      switch(name) {\n+        case 'loader':\n+          entries.push(ss.bundler.browserifyLoader());\n+          break;\n+        case 'libs':\n+          entries.push(ss.bundler.systemLibs());\n+          break;\n+        case 'start':\n+          entries = entries.concat(ss.bundler.constants(client));\n+          if (client.includes.initCode) {\n+            entries = entries.concat(ss.bundler.startCode(client));\n+          }\n+          break;\n \n-      // mixin client constants\n-      var client = this.client;\n-      if (client.constants) {\n-        for(k in client.constants) {\n-          result[k] = client.constants[k];\n-        }\n+        //case \"eventemitter2\":\n+        //case \"socketstream\":\n+        default:\n+          entries.push(ss.bundler.systemModule(name));\n+          break;\n       }\n+    }\n \n-      return result;\n-    },\n+    return entries;\n+  }\n \n-    locals: function() {\n-      var result = {}, k;\n+  function constants() {\n+    var result = {}, k;\n \n-      // mixin system locals\n-      for(k in system.assets.locals) {\n-        result[k] = system.assets.locals[k].value;\n-      }\n+    // mixin system constants\n+    for(k in system.assets.constants) {\n+      result[k] = system.assets.constants[k].value;\n+    }\n \n-      // mixin client constants\n-      var client = this.client;\n-      if (client.locals) {\n-        for(k in client.locals) {\n-          result[k] = client.locals[k];\n-        }\n+    // mixin client constants\n+    // jshint validthis:true\n+    var client = this.client;\n+    if (client.constants) {\n+      for(k in client.constants) {\n+        result[k] = client.constants[k];\n       }\n+    }\n \n-      return result;\n-    },\n+    return result;\n+  }\n \n-    htmlTags: function(type,pack) {\n-      var dests;\n+  function locals() {\n+    var result = {}, k;\n \n-      if (type === 'start') {\n-        return ['<script>' + this.module('start').map(function(value) { return value.content; }).join('\\n') + '</script>'];\n-      }\n+    // mixin system locals\n+    for(k in system.assets.locals) {",
        "path": "lib/client/bundler/proto.js",
        "position": 216,
        "original_position": 216,
        "commit_id": "6bd5ed7af7ad0c86c5126a6a10c5dd4f96ec2141",
        "original_commit_id": "6bd5ed7af7ad0c86c5126a6a10c5dd4f96ec2141",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The body of a for in should be wrapped in an if statement to filter unwanted properties from the prototype.\n",
        "created_at": "2015-05-22T16:12:24Z",
        "updated_at": "2015-05-22T16:12:24Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/536#discussion_r30908636",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/536",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/30908636"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/536#discussion_r30908636"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/536"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/30908638",
        "pull_request_review_id": null,
        "id": 30908638,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwOTA4NjM4",
        "diff_hunk": "@@ -66,145 +125,250 @@ module.exports = function(ss, bundlers, bundlerById, options) {\n     }\n   }\n \n-  return {\n-    constants: function() {\n-      var result = {}, k;\n+  /**\n+   * @ngdoc method\n+   * @name bundler.default:default#entries\n+   * @methodOf bundler.default:default\n+   * @function\n+   * @description\n+   * Provides the view and the pack functions with a\n+   * list of entries for an asset type relative to the client directory.\n+   * The default implementation is used.\n+   *\n+   * An entry describes:\n+   * - file: source file name relative to client directory\n+   * - importedFrom: Pulled in by require in other file\n+   * - content: If pre-loaded\n+   * - type: If system asset it will have type lib/mod\n+   * - bundle: which production bundle (html, tmpl, css, js, worker)\n+   * - assetType: css, js, html\n+   * - extension: source file extension\n+   *\n+   * @param {String} assetType js/css/tmpl\n+   * @param {Object} systemAssets Collection of libs, modules, initCode\n+   * @returns {[AssetEntry]} List of output entries\n+   */\n+  function entries(assetType,systemAssets) {\n+    // jshint validthis:true\n+    var includes = this.client.includes;\n+    return ss.bundler.entries(this.client, assetType, systemAssets).filter(function(entry) {\n+      return entry.includeType? includes[entry.includeType] : true;\n+    });\n+  }\n \n-      // mixin system constants\n-      for(k in system.assets.constants) {\n-        result[k] = system.assets.constants[k].value;\n-      }\n+  /**\n+   * @ngdoc method\n+   * @name bundler.default:default#system\n+   * @methodOf bundler.default:default\n+   * @function\n+   * @description\n+   * Return entries for the loader/start/module depending on includes.system client config and system assets.\n+   * Multiple arguments will attempt to add module for the name.\n+   * Special module names are 'loader' and 'start'.\n+   *\n+   * @returns {AssetEntry} Resource entries array\n+   */\n+  function systemModule(/* first_name */) {\n+    var entries = [],\n+        // jshint validthis:true\n+        client = this.client;\n+\n+    /*jshint -W084 */\n+    for(var i= 0,name; name = arguments[i]; ++i) {\n+      switch(name) {\n+        case 'loader':\n+          entries.push(ss.bundler.browserifyLoader());\n+          break;\n+        case 'libs':\n+          entries.push(ss.bundler.systemLibs());\n+          break;\n+        case 'start':\n+          entries = entries.concat(ss.bundler.constants(client));\n+          if (client.includes.initCode) {\n+            entries = entries.concat(ss.bundler.startCode(client));\n+          }\n+          break;\n \n-      // mixin client constants\n-      var client = this.client;\n-      if (client.constants) {\n-        for(k in client.constants) {\n-          result[k] = client.constants[k];\n-        }\n+        //case \"eventemitter2\":\n+        //case \"socketstream\":\n+        default:\n+          entries.push(ss.bundler.systemModule(name));\n+          break;\n       }\n+    }\n \n-      return result;\n-    },\n+    return entries;\n+  }\n \n-    locals: function() {\n-      var result = {}, k;\n+  function constants() {\n+    var result = {}, k;\n \n-      // mixin system locals\n-      for(k in system.assets.locals) {\n-        result[k] = system.assets.locals[k].value;\n-      }\n+    // mixin system constants\n+    for(k in system.assets.constants) {\n+      result[k] = system.assets.constants[k].value;\n+    }\n \n-      // mixin client constants\n-      var client = this.client;\n-      if (client.locals) {\n-        for(k in client.locals) {\n-          result[k] = client.locals[k];\n-        }\n+    // mixin client constants\n+    // jshint validthis:true\n+    var client = this.client;\n+    if (client.constants) {\n+      for(k in client.constants) {\n+        result[k] = client.constants[k];\n       }\n+    }\n \n-      return result;\n-    },\n+    return result;\n+  }\n \n-    htmlTags: function(type,pack) {\n-      var dests;\n+  function locals() {\n+    var result = {}, k;\n \n-      if (type === 'start') {\n-        return ['<script>' + this.module('start').map(function(value) { return value.content; }).join('\\n') + '</script>'];\n-      }\n+    // mixin system locals\n+    for(k in system.assets.locals) {\n+      result[k] = system.assets.locals[k].value;\n+    }\n \n-      if (pack) {\n-        dests = { urls: {} };\n-        dests.urls[type] = resolveAssetLink(this.client, type);\n-        return [ htmlTag[type](dests) ];\n-      } else {\n-        var entries = this.entries(type);\n-        dests = this.dests;\n-        return entries.map(function(entry) {\n-          return htmlTag[type](dests,entry);\n-        });\n+    // mixin client constants\n+    // jshint validthis:true\n+    var client = this.client;\n+    if (client.locals) {\n+      for(k in client.locals) {",
        "path": "lib/client/bundler/proto.js",
        "position": 234,
        "original_position": 234,
        "commit_id": "6bd5ed7af7ad0c86c5126a6a10c5dd4f96ec2141",
        "original_commit_id": "6bd5ed7af7ad0c86c5126a6a10c5dd4f96ec2141",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The body of a for in should be wrapped in an if statement to filter unwanted properties from the prototype.\n",
        "created_at": "2015-05-22T16:12:24Z",
        "updated_at": "2015-05-22T16:12:24Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/536#discussion_r30908638",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/536",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/30908638"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/536#discussion_r30908638"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/536"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/30908639",
        "pull_request_review_id": null,
        "id": 30908639,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwOTA4NjM5",
        "diff_hunk": "@@ -66,145 +125,250 @@ module.exports = function(ss, bundlers, bundlerById, options) {\n     }\n   }\n \n-  return {\n-    constants: function() {\n-      var result = {}, k;\n+  /**\n+   * @ngdoc method\n+   * @name bundler.default:default#entries\n+   * @methodOf bundler.default:default\n+   * @function\n+   * @description\n+   * Provides the view and the pack functions with a\n+   * list of entries for an asset type relative to the client directory.\n+   * The default implementation is used.\n+   *\n+   * An entry describes:\n+   * - file: source file name relative to client directory\n+   * - importedFrom: Pulled in by require in other file\n+   * - content: If pre-loaded\n+   * - type: If system asset it will have type lib/mod\n+   * - bundle: which production bundle (html, tmpl, css, js, worker)\n+   * - assetType: css, js, html\n+   * - extension: source file extension\n+   *\n+   * @param {String} assetType js/css/tmpl\n+   * @param {Object} systemAssets Collection of libs, modules, initCode\n+   * @returns {[AssetEntry]} List of output entries\n+   */\n+  function entries(assetType,systemAssets) {\n+    // jshint validthis:true\n+    var includes = this.client.includes;\n+    return ss.bundler.entries(this.client, assetType, systemAssets).filter(function(entry) {\n+      return entry.includeType? includes[entry.includeType] : true;\n+    });\n+  }\n \n-      // mixin system constants\n-      for(k in system.assets.constants) {\n-        result[k] = system.assets.constants[k].value;\n-      }\n+  /**\n+   * @ngdoc method\n+   * @name bundler.default:default#system\n+   * @methodOf bundler.default:default\n+   * @function\n+   * @description\n+   * Return entries for the loader/start/module depending on includes.system client config and system assets.\n+   * Multiple arguments will attempt to add module for the name.\n+   * Special module names are 'loader' and 'start'.\n+   *\n+   * @returns {AssetEntry} Resource entries array\n+   */\n+  function systemModule(/* first_name */) {\n+    var entries = [],\n+        // jshint validthis:true\n+        client = this.client;\n+\n+    /*jshint -W084 */\n+    for(var i= 0,name; name = arguments[i]; ++i) {\n+      switch(name) {\n+        case 'loader':\n+          entries.push(ss.bundler.browserifyLoader());\n+          break;\n+        case 'libs':\n+          entries.push(ss.bundler.systemLibs());\n+          break;\n+        case 'start':\n+          entries = entries.concat(ss.bundler.constants(client));\n+          if (client.includes.initCode) {\n+            entries = entries.concat(ss.bundler.startCode(client));\n+          }\n+          break;\n \n-      // mixin client constants\n-      var client = this.client;\n-      if (client.constants) {\n-        for(k in client.constants) {\n-          result[k] = client.constants[k];\n-        }\n+        //case \"eventemitter2\":\n+        //case \"socketstream\":\n+        default:\n+          entries.push(ss.bundler.systemModule(name));\n+          break;\n       }\n+    }\n \n-      return result;\n-    },\n+    return entries;\n+  }\n \n-    locals: function() {\n-      var result = {}, k;\n+  function constants() {\n+    var result = {}, k;\n \n-      // mixin system locals\n-      for(k in system.assets.locals) {\n-        result[k] = system.assets.locals[k].value;\n-      }\n+    // mixin system constants\n+    for(k in system.assets.constants) {\n+      result[k] = system.assets.constants[k].value;\n+    }\n \n-      // mixin client constants\n-      var client = this.client;\n-      if (client.locals) {\n-        for(k in client.locals) {\n-          result[k] = client.locals[k];\n-        }\n+    // mixin client constants\n+    // jshint validthis:true\n+    var client = this.client;\n+    if (client.constants) {\n+      for(k in client.constants) {\n+        result[k] = client.constants[k];\n       }\n+    }\n \n-      return result;\n-    },\n+    return result;\n+  }\n \n-    htmlTags: function(type,pack) {\n-      var dests;\n+  function locals() {\n+    var result = {}, k;\n \n-      if (type === 'start') {\n-        return ['<script>' + this.module('start').map(function(value) { return value.content; }).join('\\n') + '</script>'];\n-      }\n+    // mixin system locals\n+    for(k in system.assets.locals) {\n+      result[k] = system.assets.locals[k].value;\n+    }\n \n-      if (pack) {\n-        dests = { urls: {} };\n-        dests.urls[type] = resolveAssetLink(this.client, type);\n-        return [ htmlTag[type](dests) ];\n-      } else {\n-        var entries = this.entries(type);\n-        dests = this.dests;\n-        return entries.map(function(entry) {\n-          return htmlTag[type](dests,entry);\n-        });\n+    // mixin client constants\n+    // jshint validthis:true\n+    var client = this.client;\n+    if (client.locals) {\n+      for(k in client.locals) {\n+        result[k] = client.locals[k];\n       }\n-    },\n+    }\n \n-    // TODO: Improve to test for complete set\n-    //TODO: Update for new id scheme\n-    // Very basic check to see if we can find pre-packed assets\n-    determineLatestsPackedId : function() {\n-      try {\n-        var files = fs.readdirSync(path.join(ss.root, options.dirs.assets, this.client.name));\n-        var latestId = files.sort().pop();\n-        var id = latestId.split('.')[0];\n-        if (id.length !== 9) {\n-          throw 'Invalid Client ID length';\n-        }\n-        this.latestPackedId = id;\n-      } catch (e) {\n-        this.latestPackedId = false;\n-      }\n-    },\n+    return result;\n+  }\n \n-    // Before client-side code is sent to the browser any file which is NOT a library (e.g. /client/code/libs)\n-    // is wrapped in a module wrapper (to keep vars local and allow you to require() one file in another).\n-    // The 'system' directory is a special case - any module placed in this dir will not have a leading slash\n-    wrapCode: function wrapCode(code, entry, opts) {\n-      var pathAry = entry.file.split('/');\n+  /**\n+   * @ngdoc method\n+   * @name bundler.default:default#htmlTags\n+   * @methodOf bundler.default:default\n+   * @function\n+   * @description\n+   * Function called by view.js to build the view HTML\n+   *\n+   *\n+   * @param {String} type Either start/js/css\n+   * @param {Boolean} pack Pack with resolveAssetLink ?\n+   * @returns {[String]} List of script tag strings\n+   */\n+  function htmlTags(type,pack) {\n+    var dests;\n+\n+    // jshint validthis:true\n+    if (type === 'start') {\n+      return ['<script>' + this.module('start').map(function(value) { return value.content; }).join('\\n') + '</script>'];\n+    }\n \n-      pathAry[0] = ''; // remove leading .\n+    if (pack) {\n+      dests = { urls: {} };\n+      // jshint validthis:true\n+      dests.urls[type] = resolveAssetLink(this.client, type);\n+      return [ htmlTag[type](dests) ];\n+    } else {\n+      // jshint validthis:true\n+      var entries = this.entries(type);\n+      dests = this.dests;\n+      return entries.map(function(entry) {\n+        return htmlTag[type](dests,entry);\n+      });\n+    }\n+  }\n \n-      // Don't touch the code if it's in a 'libs' directory\n-      if (pathAry.indexOf('libs') >= 0) { //TODO [code,libs] & options.dirs.libs location\n-        return code;\n-      }\n+  /**\n+   * @ngdoc method\n+   * @name bundler.default:default#wrapCode\n+   * @methodOf bundler.default:default\n+   * @function\n+   * @description\n+   * Before client-side code is sent to the browser any file which is NOT a library (e.g. /client/code/libs)\n+   * is wrapped in a module wrapper (to keep vars local and allow you to require() one file in another).\n+   *\n+   * The 'system' directory is a special case - any module placed in this dir will not have a leading slash\n+   *\n+   * @param {String} assetType js/css/tmpl\n+   * @param {Object} systemAssets Collection of libs, modules, initCode\n+   * @returns {[AssetEntry]} List of output entries\n+   */\n+  function wrapCode(code, entry, opts) {\n+    var pathAry = entry.file.split('/');\n+\n+    pathAry[0] = ''; // remove leading .\n+\n+    // Don't touch the code if it's in a 'libs' directory\n+    if (pathAry.indexOf('libs') >= 0) { //TODO [code,libs] & options.dirs.libs location\n+      return code;\n+    }\n \n-      if (pathAry.indexOf('entry.js') === -1 && options && options.browserifyExcludePaths) {\n-        for(var i, p; (p = options.browserifyExcludePaths[i]); ++i) {\n-            if ( entry.file.split( p )[0] === '' ) {\n-              return code;\n-            }\n+    if (pathAry.indexOf('entry.js') === -1 && options && options.browserifyExcludePaths) {\n+      for(var i, p; (p = options.browserifyExcludePaths[i]); ++i) {\n+        if ( entry.file.split( p )[0] === '' ) {\n+          return code;\n         }\n       }\n+    }\n \n-      var last = pathAry[pathAry.length-1],\n-          modPath,\n-          systemRel = path.relative(options.dirs.client, options.dirs['system']),\n-          extPos = last.lastIndexOf('.');\n-      if (extPos > -1) {\n-        pathAry[pathAry.length-1] = last.substring(0,extPos);\n-      }\n+    var last = pathAry[pathAry.length-1],\n+      modPath,\n+      systemRel = path.relative(options.dirs.client, options.dirs['system']),",
        "path": "lib/client/bundler/proto.js",
        "position": 352,
        "original_position": 352,
        "commit_id": "6bd5ed7af7ad0c86c5126a6a10c5dd4f96ec2141",
        "original_commit_id": "6bd5ed7af7ad0c86c5126a6a10c5dd4f96ec2141",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "['system'] is better written in dot notation.\n",
        "created_at": "2015-05-22T16:12:25Z",
        "updated_at": "2015-05-22T16:12:25Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/536#discussion_r30908639",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/536",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/30908639"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/536#discussion_r30908639"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/536"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/30908641",
        "pull_request_review_id": null,
        "id": 30908641,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwOTA4NjQx",
        "diff_hunk": "@@ -21,7 +21,8 @@ sessionStore = new expressSession.MemoryStore;\n \n // Expose options which can be changed in your app\n exports.options = {\n-  maxAge: null // by default session exists for duration of user agent (e.g. until browser is closed)\n+  maxAge: null, // by default session exists for duration of user agent (e.g. until browser is closed)\n+  secret: \"SocketStream\"",
        "path": "lib/session/index.js",
        "position": 6,
        "original_position": 6,
        "commit_id": "6bd5ed7af7ad0c86c5126a6a10c5dd4f96ec2141",
        "original_commit_id": "6bd5ed7af7ad0c86c5126a6a10c5dd4f96ec2141",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Mixed double and single quotes.\n",
        "created_at": "2015-05-22T16:12:25Z",
        "updated_at": "2015-05-22T16:12:25Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/536#discussion_r30908641",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/536",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/30908641"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/536#discussion_r30908641"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/536"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/30908642",
        "pull_request_review_id": null,
        "id": 30908642,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwOTA4NjQy",
        "diff_hunk": "@@ -0,0 +1,67 @@\n+'use strict';\n+\n+var path    = require('path'),",
        "path": "test/unit/client/bundler/custom.test.js",
        "position": 3,
        "original_position": 3,
        "commit_id": "6bd5ed7af7ad0c86c5126a6a10c5dd4f96ec2141",
        "original_commit_id": "6bd5ed7af7ad0c86c5126a6a10c5dd4f96ec2141",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'path' is defined but never used.\n",
        "created_at": "2015-05-22T16:12:25Z",
        "updated_at": "2015-05-22T16:12:25Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/536#discussion_r30908642",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/536",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/30908642"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/536#discussion_r30908642"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/536"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/30908643",
        "pull_request_review_id": null,
        "id": 30908643,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwOTA4NjQz",
        "diff_hunk": "@@ -0,0 +1,67 @@\n+'use strict';\n+\n+var path    = require('path'),\n+  ss      = require( '../../../../lib/socketstream'),\n+  options = ss.client.options,",
        "path": "test/unit/client/bundler/custom.test.js",
        "position": 5,
        "original_position": 5,
        "commit_id": "6bd5ed7af7ad0c86c5126a6a10c5dd4f96ec2141",
        "original_commit_id": "6bd5ed7af7ad0c86c5126a6a10c5dd4f96ec2141",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'options' is defined but never used.\n",
        "created_at": "2015-05-22T16:12:25Z",
        "updated_at": "2015-05-22T16:12:25Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/536#discussion_r30908643",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/536",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/30908643"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/536#discussion_r30908643"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/536"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/30908644",
        "pull_request_review_id": null,
        "id": 30908644,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwOTA4NjQ0",
        "diff_hunk": "@@ -0,0 +1,67 @@\n+'use strict';\n+\n+var path    = require('path'),\n+  ss      = require( '../../../../lib/socketstream'),\n+  options = ss.client.options,\n+  defineAbcClient = require('../abcClient');\n+\n+describe('custom bundler', function () {\n+\n+  describe('system modules', function() {\n+\n+    beforeEach(function() {\n+\n+      // back to initial client state\n+      ss.client.assets.unload();\n+      ss.client.assets.load();\n+    });\n+\n+    afterEach(function() {\n+      ss.client.forget();\n+    });\n+\n+\n+    it('should be rendered correctly as htmlTags', function() {\n+\n+      function customBundler(ss, client, options) {",
        "path": "test/unit/client/bundler/custom.test.js",
        "position": 26,
        "original_position": 26,
        "commit_id": "6bd5ed7af7ad0c86c5126a6a10c5dd4f96ec2141",
        "original_commit_id": "6bd5ed7af7ad0c86c5126a6a10c5dd4f96ec2141",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'options' is defined but never used.\n",
        "created_at": "2015-05-22T16:12:25Z",
        "updated_at": "2015-05-22T16:12:25Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/536#discussion_r30908644",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/536",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/30908644"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/536#discussion_r30908644"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/536"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/30908645",
        "pull_request_review_id": null,
        "id": 30908645,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwOTA4NjQ1",
        "diff_hunk": "@@ -513,8 +517,38 @@ describe('default bundler', function () {\n \n       ss.client.formatters.add('javascript');\n \n-      var client = defineAbcClient({ },function() { });\n+      client = defineAbcClient({ },function() { });\n       bundler = ss.api.bundler.get(client);\n+\n+      ss.client.assets.send('libs','extra','function extra(){};')",
        "path": "test/unit/client/bundler/default.test.js",
        "position": 53,
        "original_position": 53,
        "commit_id": "6bd5ed7af7ad0c86c5126a6a10c5dd4f96ec2141",
        "original_commit_id": "6bd5ed7af7ad0c86c5126a6a10c5dd4f96ec2141",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Missing semicolon.\n",
        "created_at": "2015-05-22T16:12:25Z",
        "updated_at": "2015-05-22T16:12:25Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/536#discussion_r30908645",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/536",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/30908645"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/536#discussion_r30908645"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/536"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31122662",
        "pull_request_review_id": null,
        "id": 31122662,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTIyNjYy",
        "diff_hunk": "@@ -0,0 +1,132 @@\n+'use strict';\n+\n+\n+\n+// Dependencies\n+//\n+var assert  = require('assert');\n+var path    = require('path');\n+var index   = require('../../../lib/request/index');\n+\n+\n+\n+describe('index()', function () {\n+\n+  it('should return an object with add, load, and clear functions', function (done) {\n+\n+    var ss          = {root:'/some/path'};\n+    var loadedIndex = index(ss);\n+    assert(typeof loadedIndex === 'object');\n+    assert(typeof loadedIndex.add === 'function');\n+    assert(typeof loadedIndex.load === 'function');\n+    assert(typeof loadedIndex.clear === 'function');\n+    done();\n+\n+  });\n+\n+  describe('clear()', function () {\n+\n+    it('should set default middleware to false, so that they are not loaded', function (done) {\n+\n+      var ss          = {root:'/some/path'};\n+      var loadedIndex = index(ss);\n+      assert.equal(false,loadedIndex.clear());\n+      assert.deepEqual(loadedIndex.load(), {});\n+      done();\n+\n+    });\n+\n+  });\n+\n+  describe('load()', function () {\n+\n+    it('should load the events and rpc responders by default', function (done) {\n+\n+      var ss          = {root: path.join(__dirname,'../../../','new_project'), client: {send: function () {}}};\n+      var loadedIndex = index(ss);\n+      var fullLoad    = loadedIndex.load();\n+      assert.deepEqual(fullLoad['0'].name, 'events');\n+      assert.deepEqual(fullLoad['1'].name, 'rpc');\n+      assert(typeof fullLoad['0'].interfaces.websocket === 'function');\n+      assert(typeof fullLoad['1'].interfaces.websocket === 'function');\n+      assert(typeof fullLoad['1'].interfaces.internal === 'function');\n+      done();\n+\n+    });\n+\n+  });\n+\n+  describe('add()', function () {\n+\n+    describe('when given a name of a request responder', function () {\n+\n+      it('should load that request responder from inside of SocketStream\\'s responders folder', function (done) {\n+\n+        var ss          = {root: path.join(__dirname,'../../../','new_project'), client: {send: function () {}}};\n+        var loadedIndex = index(ss);\n+        var fullLoad    = loadedIndex.add('rpc');\n+        assert.equal(fullLoad.name,'rpc');\n+        assert(typeof fullLoad.interfaces === 'function');\n+        done();\n+\n+      });\n+\n+    });\n+\n+    describe('when given a name of a request responder that does not exist', function () {\n+\n+      it('should throw an error', function (done) {\n+\n+        var ss          = {root: path.join(__dirname,'../../../','new_project'), client: {send: function () {}}};\n+        var loadedIndex = index(ss);\n+        assert.throws(function () {\n+          loadedIndex.add('webrtc');\n+        });\n+        done();\n+\n+      });\n+\n+    });\n+\n+    describe('when given a function', function () {\n+\n+      it('should load the function as a request responder', function (done) {\n+\n+        var responderFunc = function () {\n+          return {\n+            name: 'customResponder',\n+            interfaces: function () {}\n+          }",
        "path": "test/unit/request/index.test.js",
        "position": 99,
        "original_position": 99,
        "commit_id": "77fbfbae9f10690e6d3ae50f3b07e80008d49e6f",
        "original_commit_id": "77fbfbae9f10690e6d3ae50f3b07e80008d49e6f",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Missing semicolon.\n",
        "created_at": "2015-05-27T11:09:22Z",
        "updated_at": "2015-05-27T11:09:22Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/554#discussion_r31122662",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/554",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31122662"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/554#discussion_r31122662"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/554"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31157096",
        "pull_request_review_id": null,
        "id": 31157096,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTU3MDk2",
        "diff_hunk": "@@ -0,0 +1,123 @@\n+'use strict';\n+\n+\n+\n+// Dependencies\n+//\n+var assert    = require('assert');\n+var internal  = require('../../../../lib/request/middleware/internal');\n+var logHook   = require('../../../helpers/loghook.js');\n+\n+\n+\n+describe('internal()', function () {\n+\n+  it('should return an object containing debug and session functions', function (done) {\n+\n+    var loadedInternal = internal();\n+    assert(typeof loadedInternal === 'object');\n+    assert(typeof loadedInternal.debug === 'function');\n+    assert(typeof loadedInternal.session === 'function');\n+    done();\n+\n+  });\n+\n+\n+  describe('#debug', function () {\n+\n+    describe('when no color is passed', function () {\n+\n+      it('should return a function that logs a request with the color yellow', function (done) {\n+        var _logs;\n+        logHook.on();\n+        var loadedInternal  = internal();\n+        var debugFunc       = loadedInternal.debug();\n+        assert(typeof debugFunc === 'function');\n+        var fakeReq   = {};\n+        var fakeRes   = {};\n+        var fakeNext  = function () {\n+          _logs = logHook.off();\n+          assert(_logs[0] === '\\u001b[33mDebug incoming message >>\\n\\u001b[39m {}');\n+          done();\n+        }",
        "path": "test/unit/request/middleware/internal.test.js",
        "position": 42,
        "original_position": 42,
        "commit_id": "01718001527aba26501c9c3bf72e7618a325608c",
        "original_commit_id": "a9c7b54a9b254a5421244d4e20d4c77a9de527e0",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Missing semicolon.\n",
        "created_at": "2015-05-27T17:13:53Z",
        "updated_at": "2015-05-27T17:24:05Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/555#discussion_r31157096",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/555",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31157096"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/555#discussion_r31157096"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/555"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31157097",
        "pull_request_review_id": null,
        "id": 31157097,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTU3MDk3",
        "diff_hunk": "@@ -0,0 +1,123 @@\n+'use strict';\n+\n+\n+\n+// Dependencies\n+//\n+var assert    = require('assert');\n+var internal  = require('../../../../lib/request/middleware/internal');\n+var logHook   = require('../../../helpers/loghook.js');\n+\n+\n+\n+describe('internal()', function () {\n+\n+  it('should return an object containing debug and session functions', function (done) {\n+\n+    var loadedInternal = internal();\n+    assert(typeof loadedInternal === 'object');\n+    assert(typeof loadedInternal.debug === 'function');\n+    assert(typeof loadedInternal.session === 'function');\n+    done();\n+\n+  });\n+\n+\n+  describe('#debug', function () {\n+\n+    describe('when no color is passed', function () {\n+\n+      it('should return a function that logs a request with the color yellow', function (done) {\n+        var _logs;\n+        logHook.on();\n+        var loadedInternal  = internal();\n+        var debugFunc       = loadedInternal.debug();\n+        assert(typeof debugFunc === 'function');\n+        var fakeReq   = {};\n+        var fakeRes   = {};\n+        var fakeNext  = function () {\n+          _logs = logHook.off();\n+          assert(_logs[0] === '\\u001b[33mDebug incoming message >>\\n\\u001b[39m {}');\n+          done();\n+        }\n+        debugFunc(fakeReq,fakeRes,fakeNext);\n+\n+      });\n+\n+    });\n+\n+\n+    describe('when a color is passed', function () {\n+\n+      it('should return a function that logs a request with given color', function (done) {\n+        var _logs;\n+        logHook.on();\n+        var loadedInternal  = internal();\n+        var debugFunc       = loadedInternal.debug('blue');\n+        assert(typeof debugFunc === 'function');\n+        var fakeReq   = {};\n+        var fakeRes   = {};\n+        var fakeNext  = function () {\n+          _logs = logHook.off();\n+          assert(_logs[0] === '\\u001b[34mDebug incoming message >>\\n\\u001b[39m {}');\n+          done();\n+        }",
        "path": "test/unit/request/middleware/internal.test.js",
        "position": 64,
        "original_position": 64,
        "commit_id": "01718001527aba26501c9c3bf72e7618a325608c",
        "original_commit_id": "a9c7b54a9b254a5421244d4e20d4c77a9de527e0",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Missing semicolon.\n",
        "created_at": "2015-05-27T17:13:53Z",
        "updated_at": "2015-05-27T17:24:05Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/555#discussion_r31157097",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/555",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31157097"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/555#discussion_r31157097"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/555"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31085963",
        "pull_request_review_id": null,
        "id": 31085963,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMDg1OTYz",
        "diff_hunk": "@@ -9,6 +9,7 @@ var path    = require('path'),\n \n describe('angular.js template engine', function () {\n \n+  var should = require('should');",
        "path": "test/unit/client/template_engines/angular.test.js",
        "position": 4,
        "original_position": 4,
        "commit_id": "2b527dc84a64e4ed606673fb07c3cca3bd201225",
        "original_commit_id": "cc45e99396707695c5eb67f3f90f3601fa7e3ad2",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'should' is defined but never used.\n",
        "created_at": "2015-05-26T22:22:59Z",
        "updated_at": "2015-06-01T22:21:09Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/553#discussion_r31085963",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/553",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31085963"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/553#discussion_r31085963"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/553"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31391961",
        "pull_request_review_id": null,
        "id": 31391961,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMzkxOTYx",
        "diff_hunk": "@@ -167,4 +167,21 @@ describe('bundler', function () {\n \n   });\n \n+  it('should identify CSS when mixed with JS', function() {\n+      var client = ss.client.define('abc2',{\n+        view: 'main2.html',\n+        css: './abc',\n+        code: './abc',\n+        tmpl: './abc'\n+      });\n+\n+      ss.api.bundler.load();\n+\n+      ss.api.client.templateEngines = ss.client.templateEngine.load();\n+      ss.api.client.formatters = ss.client.formatters.load();\n+\n+      var templates = ss.api.bundler.entries(client,'tmpl');",
        "path": "test/unit/client/bundler/index.test.js",
        "position": null,
        "original_position": 17,
        "commit_id": "2b527dc84a64e4ed606673fb07c3cca3bd201225",
        "original_commit_id": "4ed3a9341d707d76ea00b0577f4a932a02b4961d",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'templates' is defined but never used.\n",
        "created_at": "2015-05-31T16:46:25Z",
        "updated_at": "2015-06-01T22:21:09Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/553#discussion_r31391961",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/553",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31391961"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/553#discussion_r31391961"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/553"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31395306",
        "pull_request_review_id": null,
        "id": 31395306,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMzk1MzA2",
        "diff_hunk": "@@ -590,11 +584,26 @@ module.exports = function(ss,options) {\n         return magicPath.files(path.join(ss.root, options.dirs.client), from).forEach(function(file) {\n           var extension = path.extname(file);\n           extension = extension && extension.substring(1); // argh!\n-          var assetType = bundle==='tmpl'? 'html':bundle\n-          return _entries.push({file:file,importedBy:from,includeType:includeType,ext:extension,bundle:bundle,assetType:assetType});\n+          var assetType = bundle==='tmpl'? 'html':bundle;\n+          var entry = {file:file,importedBy:from,includeType:includeType,ext:extension,bundle:bundle,assetType:assetType};\n+          if (isAssetType(entry)) {\n+            _entries.push(entry);\n+          }\n         });\n       }\n \n+      function isAssetType(entry) {\n+        if (ss.client.formatters == null) {",
        "path": "lib/client/bundler/index.js",
        "position": 36,
        "original_position": 39,
        "commit_id": "2b527dc84a64e4ed606673fb07c3cca3bd201225",
        "original_commit_id": "ac2873fd52137f596da89b4fab09bd6d9e22cef5",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Use '===' to compare with 'null'.\n",
        "created_at": "2015-05-31T23:11:17Z",
        "updated_at": "2015-06-01T22:21:09Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/553#discussion_r31395306",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/553",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31395306"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/553#discussion_r31395306"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/553"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31395307",
        "pull_request_review_id": null,
        "id": 31395307,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMzk1MzA3",
        "diff_hunk": "@@ -590,11 +584,26 @@ module.exports = function(ss,options) {\n         return magicPath.files(path.join(ss.root, options.dirs.client), from).forEach(function(file) {\n           var extension = path.extname(file);\n           extension = extension && extension.substring(1); // argh!\n-          var assetType = bundle==='tmpl'? 'html':bundle\n-          return _entries.push({file:file,importedBy:from,includeType:includeType,ext:extension,bundle:bundle,assetType:assetType});\n+          var assetType = bundle==='tmpl'? 'html':bundle;\n+          var entry = {file:file,importedBy:from,includeType:includeType,ext:extension,bundle:bundle,assetType:assetType};\n+          if (isAssetType(entry)) {\n+            _entries.push(entry);\n+          }\n         });\n       }\n \n+      function isAssetType(entry) {\n+        if (ss.client.formatters == null) {\n+          return false;\n+        }\n+        var formatter = ss.client.formatters[entry.ext];\n+        if (formatter == null) {",
        "path": "lib/client/bundler/index.js",
        "position": 40,
        "original_position": 43,
        "commit_id": "2b527dc84a64e4ed606673fb07c3cca3bd201225",
        "original_commit_id": "ac2873fd52137f596da89b4fab09bd6d9e22cef5",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Use '===' to compare with 'null'.\n",
        "created_at": "2015-05-31T23:11:17Z",
        "updated_at": "2015-06-01T22:21:09Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/553#discussion_r31395307",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/553",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31395307"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/553#discussion_r31395307"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/553"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31395308",
        "pull_request_review_id": null,
        "id": 31395308,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMzk1MzA4",
        "diff_hunk": "@@ -167,4 +158,18 @@ describe('bundler', function () {\n \n   });\n \n+  it('should identify CSS when mixed with JS', function() {\n+      var client = defineAbcClient('abc2',{\n+        view: 'main2.html',\n+        css: './abc',\n+        code: './abc',\n+        tmpl: './abc'\n+      }, function() {\n+        ss.client.formatters.add('html');\n+      });\n+\n+      var templates = ss.api.bundler.entries(client,'tmpl');",
        "path": "test/unit/client/bundler/index.test.js",
        "position": 80,
        "original_position": 80,
        "commit_id": "2b527dc84a64e4ed606673fb07c3cca3bd201225",
        "original_commit_id": "ac2873fd52137f596da89b4fab09bd6d9e22cef5",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'templates' is defined but never used.\n",
        "created_at": "2015-05-31T23:11:17Z",
        "updated_at": "2015-06-01T22:21:09Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/553#discussion_r31395308",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/553",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31395308"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/553#discussion_r31395308"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/553"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31474223",
        "pull_request_review_id": null,
        "id": 31474223,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNDc0MjIz",
        "diff_hunk": "@@ -66,6 +66,47 @@ describe('default bundler:', function () {\n \n   });\n \n+  describe('client with standard code modules', function() {\n+\n+    var client;\n+\n+    beforeEach(function() {\n+      client = defineAbcClient({\n+        css: 'main.styl',\n+        code: ['libs','kickoff'],\n+        view: 'main.jade'\n+      },function() {\n+        ss.client.formatters.add('css');\n+        ss.client.formatters.add('javascript');\n+      });\n+    });\n+\n+    afterEach(function() {\n+      ss.client.forget();\n+    });\n+\n+    it('should have correct entry point and module definition', function() {\n+      client.id.should.be.type('string');\n+\n+      client.entryInitPath.should.be.equal('/code/kickoff/entry');\n+\n+      var bundler = ss.api.bundler.get('abc'),\n+          entriesCSS = bundler.entries('css'),\n+          entriesJS = bundler.entries('js');\n+\n+      entriesJS.length.should.be.equal(7);\n+      entriesJS[6].file.should.equal('code/kickoff/entry.js');\n+\n+      var opts = {\n+\n+      };\n+      var code = 'alert()';\n+      var wrappedAlert = bundler.wrapCode(code, entriesJS[6], opts);\n+      wrappedAlert.should.equal('require.define(\"' + client.entryInitPath.substring(1) + '\", function (require, module, exports, __dirname, __filename){\\n' + code + '\\n});');",
        "path": "test/unit/client/bundler/default.test.js",
        "position": null,
        "original_position": 40,
        "commit_id": "2b527dc84a64e4ed606673fb07c3cca3bd201225",
        "original_commit_id": "10986d945a137d93602b7084383c45dc811dd961",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Line is too long.\n",
        "created_at": "2015-06-01T21:47:53Z",
        "updated_at": "2015-06-01T22:21:09Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/553#discussion_r31474223",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/553",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31474223"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/553#discussion_r31474223"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/553"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31474224",
        "pull_request_review_id": null,
        "id": 31474224,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNDc0MjI0",
        "diff_hunk": "@@ -66,6 +66,47 @@ describe('default bundler:', function () {\n \n   });\n \n+  describe('client with standard code modules', function() {\n+\n+    var client;\n+\n+    beforeEach(function() {\n+      client = defineAbcClient({\n+        css: 'main.styl',\n+        code: ['libs','kickoff'],\n+        view: 'main.jade'\n+      },function() {\n+        ss.client.formatters.add('css');\n+        ss.client.formatters.add('javascript');\n+      });\n+    });\n+\n+    afterEach(function() {\n+      ss.client.forget();\n+    });\n+\n+    it('should have correct entry point and module definition', function() {\n+      client.id.should.be.type('string');\n+\n+      client.entryInitPath.should.be.equal('/code/kickoff/entry');\n+\n+      var bundler = ss.api.bundler.get('abc'),\n+          entriesCSS = bundler.entries('css'),",
        "path": "test/unit/client/bundler/default.test.js",
        "position": null,
        "original_position": 29,
        "commit_id": "2b527dc84a64e4ed606673fb07c3cca3bd201225",
        "original_commit_id": "10986d945a137d93602b7084383c45dc811dd961",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'entriesCSS' is defined but never used.\n",
        "created_at": "2015-06-01T21:47:53Z",
        "updated_at": "2015-06-01T22:21:09Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/553#discussion_r31474224",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/553",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31474224"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/553#discussion_r31474224"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/553"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31583034",
        "pull_request_review_id": null,
        "id": 31583034,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNTgzMDM0",
        "diff_hunk": "@@ -0,0 +1,17 @@\n+var fs = require('fs-extra'),\n+    path = require('path');\n+\n+exports.project = path.join(__dirname, 'project');\n+exports.files = path.join(__dirname, 'files');\n+exports.readDirSync = path.join(__dirname, 'readDirSync');\n+\n+exports.reset = function(done) {\n+  require('child_process').exec('cd '+__dirname + ' && git checkout project/client/static/assets');\n+\n+  // generated abc client assets\n+  fs.emptyDir(path.join(__dirname,'project/client/static/assets/abc'),function() {\n+    if (done) {\n+      done();\n+    }\n+  });\n+}",
        "path": "test/fixtures/index.js",
        "position": 17,
        "original_position": 17,
        "commit_id": "2fc311dd30f39579549d397993f797a1baf134ae",
        "original_commit_id": "2fc311dd30f39579549d397993f797a1baf134ae",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Missing semicolon.\n",
        "created_at": "2015-06-02T23:51:23Z",
        "updated_at": "2015-06-02T23:51:23Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/557#discussion_r31583034",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/557",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31583034"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/557#discussion_r31583034"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/557"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31583037",
        "pull_request_review_id": null,
        "id": 31583037,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNTgzMDM3",
        "diff_hunk": "@@ -3,13 +3,14 @@\n var path    = require('path'),\n     ss      = require( '../../../../lib/socketstream'),\n     options = ss.client.options,\n-    defineAbcClient = require('../abcClient');\n+    defineAbcClient = require('../abcClient'),",
        "path": "test/unit/client/bundler/index.test.js",
        "position": 5,
        "original_position": 5,
        "commit_id": "2fc311dd30f39579549d397993f797a1baf134ae",
        "original_commit_id": "2fc311dd30f39579549d397993f797a1baf134ae",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'defineAbcClient' is defined but never used.\n",
        "created_at": "2015-06-02T23:51:23Z",
        "updated_at": "2015-06-02T23:51:23Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/557#discussion_r31583037",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/557",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31583037"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/557#discussion_r31583037"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/557"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31583038",
        "pull_request_review_id": null,
        "id": 31583038,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNTgzMDM4",
        "diff_hunk": "@@ -3,12 +3,13 @@\n var path    = require('path'),\n   fs      = require('fs'),\n   ss      = require( '../../../lib/socketstream'),\n-  options = ss.client.options;\n+  options = ss.client.options,",
        "path": "test/unit/client/clientIssue.test.js",
        "position": 5,
        "original_position": 5,
        "commit_id": "2fc311dd30f39579549d397993f797a1baf134ae",
        "original_commit_id": "2fc311dd30f39579549d397993f797a1baf134ae",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'options' is defined but never used.\n",
        "created_at": "2015-06-02T23:51:23Z",
        "updated_at": "2015-06-02T23:51:23Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/557#discussion_r31583038",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/557",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31583038"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/557#discussion_r31583038"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/557"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31583039",
        "pull_request_review_id": null,
        "id": 31583039,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNTgzMDM5",
        "diff_hunk": "@@ -138,11 +139,11 @@ describe('client asset manager index', function () {\n         ss.client.load();\n         logHook.off();\n \n-        var html = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.html'),'utf-8');\n-        var js = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.js'),'utf-8');\n-        var css = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.css'),'utf-8');\n-        var expected_html = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/abc/expected.html'),'utf-8');\n-        var expected_js = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/abc/expected.min.js'),'utf-8');\n+        var html = fs.readFileSync(path.join(fixtures.project,'client/static/assets/abc/' + client.id + '.html'),'utf-8');\n+        var js = fs.readFileSync(path.join(fixtures.project,'client/static/assets/abc/' + client.id + '.js'),'utf-8');\n+        var css = fs.readFileSync(path.join(fixtures.project,'client/static/assets/abc/' + client.id + '.css'),'utf-8');\n+        var expected_html = fs.readFileSync(path.join(fixtures.project,'client/abc/expected.html'),'utf-8');",
        "path": "test/unit/client/index.test.js",
        "position": 70,
        "original_position": 70,
        "commit_id": "2fc311dd30f39579549d397993f797a1baf134ae",
        "original_commit_id": "2fc311dd30f39579549d397993f797a1baf134ae",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Identifier 'expected_html' is not in camel case.\n",
        "created_at": "2015-06-02T23:51:23Z",
        "updated_at": "2015-06-02T23:51:23Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/557#discussion_r31583039",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/557",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31583039"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/557#discussion_r31583039"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/557"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31583041",
        "pull_request_review_id": null,
        "id": 31583041,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNTgzMDQx",
        "diff_hunk": "@@ -138,11 +139,11 @@ describe('client asset manager index', function () {\n         ss.client.load();\n         logHook.off();\n \n-        var html = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.html'),'utf-8');\n-        var js = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.js'),'utf-8');\n-        var css = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.css'),'utf-8');\n-        var expected_html = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/abc/expected.html'),'utf-8');\n-        var expected_js = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/abc/expected.min.js'),'utf-8');\n+        var html = fs.readFileSync(path.join(fixtures.project,'client/static/assets/abc/' + client.id + '.html'),'utf-8');\n+        var js = fs.readFileSync(path.join(fixtures.project,'client/static/assets/abc/' + client.id + '.js'),'utf-8');\n+        var css = fs.readFileSync(path.join(fixtures.project,'client/static/assets/abc/' + client.id + '.css'),'utf-8');\n+        var expected_html = fs.readFileSync(path.join(fixtures.project,'client/abc/expected.html'),'utf-8');\n+        var expected_js = fs.readFileSync(path.join(fixtures.project,'client/abc/expected.min.js'),'utf-8');",
        "path": "test/unit/client/index.test.js",
        "position": 71,
        "original_position": 71,
        "commit_id": "2fc311dd30f39579549d397993f797a1baf134ae",
        "original_commit_id": "2fc311dd30f39579549d397993f797a1baf134ae",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Identifier 'expected_js' is not in camel case.\n",
        "created_at": "2015-06-02T23:51:24Z",
        "updated_at": "2015-06-02T23:51:24Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/557#discussion_r31583041",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/557",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31583041"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/557#discussion_r31583041"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/557"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31583042",
        "pull_request_review_id": null,
        "id": 31583042,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNTgzMDQy",
        "diff_hunk": "@@ -5,7 +5,8 @@ var path    = require('path'),\n   ss      = require( '../../../lib/socketstream'),\n   chokidar = require('chokidar'),\n   logHook = require('../../helpers/logHook.js'),\n-  options = ss.client.options;\n+  options = ss.client.options,",
        "path": "test/unit/client/live_reload.test.js",
        "position": 5,
        "original_position": 5,
        "commit_id": "2fc311dd30f39579549d397993f797a1baf134ae",
        "original_commit_id": "2fc311dd30f39579549d397993f797a1baf134ae",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'options' is defined but never used.\n",
        "created_at": "2015-06-02T23:51:24Z",
        "updated_at": "2015-06-02T23:51:24Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/557#discussion_r31583042",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/557",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31583042"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/557#discussion_r31583042"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/557"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31583043",
        "pull_request_review_id": null,
        "id": 31583043,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNTgzMDQz",
        "diff_hunk": "@@ -50,16 +53,14 @@ describe('pack',function() {\n     var outs = logHook.off();\n     outs[0].should.match(/Pre-packing and minifying the .abc. client.../);\n     outs[1].should.match(/3 previous packaged files deleted/);\n-    //outs.should.match();\n-    //  '\\u001b[90m  Minified CSS from 0 KB to 0 KB\\u001b[39m',\n-    //  '\\u001b[32m\u2713\\u001b[39m Packed 0 files into /client/static/assets/abc/'+client.id+'.css',\n-    //  '\\u001b[32m\u2713\\u001b[39m Packed 4 files into /client/static/assets/abc/'+client.id+'.js',\n-    //  '\\u001b[32m\u2713\\u001b[39m Created and cached HTML file /client/static/assets/abc/'+client.id+'.html' ]\n-    //);\n+    outs[2].should.match(/Minified CSS from 0 KB to 0 KB/);\n+    outs[3].should.match(new RegExp('Packed 0 files into /client/static/assets/abc/'+client.id+'.css'));\n+    outs[4].should.match(new RegExp('Packed 4 files into /client/static/assets/abc/'+client.id+'.js'));\n+    outs[5].should.match(new RegExp('Created and cached HTML file /client/static/assets/abc/'+client.id+'.html'));\n \n-    var js = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.js'),'utf-8');\n-    var css = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.css'),'utf-8');\n-    var expected_js = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/abc/empty-expected.min.js'),'utf-8');\n+    var js = fs.readFileSync(path.join(fixtures.project,'client/static/assets/abc/' + client.id + '.js'),'utf-8');\n+    var css = fs.readFileSync(path.join(fixtures.project,'client/static/assets/abc/' + client.id + '.css'),'utf-8');\n+    var expected_js = fs.readFileSync(path.join(fixtures.project,'client/abc/empty-expected.min.js'),'utf-8');",
        "path": "test/unit/client/pack.test.js",
        "position": 44,
        "original_position": 44,
        "commit_id": "2fc311dd30f39579549d397993f797a1baf134ae",
        "original_commit_id": "2fc311dd30f39579549d397993f797a1baf134ae",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Identifier 'expected_js' is not in camel case.\n",
        "created_at": "2015-06-02T23:51:24Z",
        "updated_at": "2015-06-02T23:51:24Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/557#discussion_r31583043",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/557",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31583043"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/557#discussion_r31583043"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/557"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31583044",
        "pull_request_review_id": null,
        "id": 31583044,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNTgzMDQ0",
        "diff_hunk": "@@ -87,11 +88,11 @@ describe('pack',function() {\n     //  '\\u001b[32m\u2713\\u001b[39m Packed 5 files into /client/static/assets/abc/'+client.id+'.js',\n     //  '\\u001b[32m\u2713\\u001b[39m Created and cached HTML file /client/static/assets/abc/'+client.id+'.html' ]);\n \n-    var html = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.html'),'utf-8');\n-    var js = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.js'),'utf-8');\n-    var css = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.css'),'utf-8');\n-    var expected_html = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/abc/expected-with-abc-constants.html'),'utf-8');\n-    var expected_js = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/abc/expected.min.js'),'utf-8');\n+    var html = fs.readFileSync(path.join(fixtures.project,'client/static/assets/abc/' + client.id + '.html'),'utf-8');\n+    var js = fs.readFileSync(path.join(fixtures.project,'client/static/assets/abc/' + client.id + '.js'),'utf-8');\n+    var css = fs.readFileSync(path.join(fixtures.project,'client/static/assets/abc/' + client.id + '.css'),'utf-8');\n+    var expected_html = fs.readFileSync(path.join(fixtures.project,'client/abc/expected-with-abc-constants.html'),'utf-8');",
        "path": "test/unit/client/pack.test.js",
        "position": 60,
        "original_position": 60,
        "commit_id": "2fc311dd30f39579549d397993f797a1baf134ae",
        "original_commit_id": "2fc311dd30f39579549d397993f797a1baf134ae",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Identifier 'expected_html' is not in camel case.\n",
        "created_at": "2015-06-02T23:51:24Z",
        "updated_at": "2015-06-02T23:51:24Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/557#discussion_r31583044",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/557",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31583044"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/557#discussion_r31583044"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/557"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31583045",
        "pull_request_review_id": null,
        "id": 31583045,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNTgzMDQ1",
        "diff_hunk": "@@ -87,11 +88,11 @@ describe('pack',function() {\n     //  '\\u001b[32m\u2713\\u001b[39m Packed 5 files into /client/static/assets/abc/'+client.id+'.js',\n     //  '\\u001b[32m\u2713\\u001b[39m Created and cached HTML file /client/static/assets/abc/'+client.id+'.html' ]);\n \n-    var html = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.html'),'utf-8');\n-    var js = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.js'),'utf-8');\n-    var css = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.css'),'utf-8');\n-    var expected_html = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/abc/expected-with-abc-constants.html'),'utf-8');\n-    var expected_js = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/abc/expected.min.js'),'utf-8');\n+    var html = fs.readFileSync(path.join(fixtures.project,'client/static/assets/abc/' + client.id + '.html'),'utf-8');\n+    var js = fs.readFileSync(path.join(fixtures.project,'client/static/assets/abc/' + client.id + '.js'),'utf-8');\n+    var css = fs.readFileSync(path.join(fixtures.project,'client/static/assets/abc/' + client.id + '.css'),'utf-8');\n+    var expected_html = fs.readFileSync(path.join(fixtures.project,'client/abc/expected-with-abc-constants.html'),'utf-8');\n+    var expected_js = fs.readFileSync(path.join(fixtures.project,'client/abc/expected.min.js'),'utf-8');",
        "path": "test/unit/client/pack.test.js",
        "position": 61,
        "original_position": 61,
        "commit_id": "2fc311dd30f39579549d397993f797a1baf134ae",
        "original_commit_id": "2fc311dd30f39579549d397993f797a1baf134ae",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Identifier 'expected_js' is not in camel case.\n",
        "created_at": "2015-06-02T23:51:24Z",
        "updated_at": "2015-06-02T23:51:24Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/557#discussion_r31583045",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/557",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31583045"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/557#discussion_r31583045"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/557"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31583046",
        "pull_request_review_id": null,
        "id": 31583046,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNTgzMDQ2",
        "diff_hunk": "@@ -5,7 +5,8 @@\n // Dependencies\n \n var uncachedRequire               = require('../helpers/uncache'),\n-  path = require('path');\n+  path = require('path'),",
        "path": "test/unit/socketstream.test.js",
        "position": 5,
        "original_position": 5,
        "commit_id": "2fc311dd30f39579549d397993f797a1baf134ae",
        "original_commit_id": "2fc311dd30f39579549d397993f797a1baf134ae",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'path' is defined but never used.\n",
        "created_at": "2015-06-02T23:51:25Z",
        "updated_at": "2015-06-02T23:51:25Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/557#discussion_r31583046",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/557",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31583046"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/557#discussion_r31583046"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/557"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31842817",
        "pull_request_review_id": null,
        "id": 31842817,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxODQyODE3",
        "diff_hunk": "@@ -0,0 +1,17 @@\n+var fs = require('fs-extra'),\n+    path = require('path');\n+\n+exports.project = path.join(__dirname, 'project');\n+exports.files = path.join(__dirname, 'files');\n+exports.readDirSync = path.join(__dirname, 'readDirSync');\n+\n+exports.reset = function(done) {\n+  require('child_process').exec('cd '+__dirname + ' && git checkout project/client/static/assets');\n+\n+  // generated abc client assets\n+  fs.emptyDir(path.join(__dirname,'project/client/static/assets/abc'),function() {\n+    if (done) {\n+      done();\n+    }\n+  });\n+}",
        "path": "test/fixtures/index.js",
        "position": null,
        "original_position": 17,
        "commit_id": "cc57af59b2f7865719f9b3a213e081c1b8726721",
        "original_commit_id": "2fc311dd30f39579549d397993f797a1baf134ae",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Missing semicolon.\n",
        "created_at": "2015-06-05T19:14:59Z",
        "updated_at": "2015-06-07T13:01:50Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/558#discussion_r31842817",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/558",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31842817"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/558#discussion_r31842817"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/558"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31842818",
        "pull_request_review_id": null,
        "id": 31842818,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxODQyODE4",
        "diff_hunk": "@@ -3,13 +3,14 @@\n var path    = require('path'),\n     ss      = require( '../../../../lib/socketstream'),\n     options = ss.client.options,\n-    defineAbcClient = require('../abcClient');\n+    defineAbcClient = require('../abcClient'),",
        "path": "test/unit/client/bundler/index.test.js",
        "position": 5,
        "original_position": 5,
        "commit_id": "cc57af59b2f7865719f9b3a213e081c1b8726721",
        "original_commit_id": "2fc311dd30f39579549d397993f797a1baf134ae",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'defineAbcClient' is defined but never used.\n",
        "created_at": "2015-06-05T19:15:00Z",
        "updated_at": "2015-06-07T13:01:50Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/558#discussion_r31842818",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/558",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31842818"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/558#discussion_r31842818"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/558"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31842819",
        "pull_request_review_id": null,
        "id": 31842819,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxODQyODE5",
        "diff_hunk": "@@ -3,12 +3,13 @@\n var path    = require('path'),\n   fs      = require('fs'),\n   ss      = require( '../../../lib/socketstream'),\n-  options = ss.client.options;\n+  options = ss.client.options,",
        "path": "test/unit/client/clientIssue.test.js",
        "position": null,
        "original_position": 5,
        "commit_id": "cc57af59b2f7865719f9b3a213e081c1b8726721",
        "original_commit_id": "2fc311dd30f39579549d397993f797a1baf134ae",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'options' is defined but never used.\n",
        "created_at": "2015-06-05T19:15:00Z",
        "updated_at": "2015-06-07T13:01:50Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/558#discussion_r31842819",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/558",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31842819"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/558#discussion_r31842819"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/558"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31842820",
        "pull_request_review_id": null,
        "id": 31842820,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxODQyODIw",
        "diff_hunk": "@@ -138,11 +139,11 @@ describe('client asset manager index', function () {\n         ss.client.load();\n         logHook.off();\n \n-        var html = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.html'),'utf-8');\n-        var js = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.js'),'utf-8');\n-        var css = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.css'),'utf-8');\n-        var expected_html = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/abc/expected.html'),'utf-8');\n-        var expected_js = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/abc/expected.min.js'),'utf-8');\n+        var html = fs.readFileSync(path.join(fixtures.project,'client/static/assets/abc/' + client.id + '.html'),'utf-8');\n+        var js = fs.readFileSync(path.join(fixtures.project,'client/static/assets/abc/' + client.id + '.js'),'utf-8');\n+        var css = fs.readFileSync(path.join(fixtures.project,'client/static/assets/abc/' + client.id + '.css'),'utf-8');\n+        var expected_html = fs.readFileSync(path.join(fixtures.project,'client/abc/expected.html'),'utf-8');",
        "path": "test/unit/client/index.test.js",
        "position": 70,
        "original_position": 70,
        "commit_id": "cc57af59b2f7865719f9b3a213e081c1b8726721",
        "original_commit_id": "2fc311dd30f39579549d397993f797a1baf134ae",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Identifier 'expected_html' is not in camel case.\n",
        "created_at": "2015-06-05T19:15:00Z",
        "updated_at": "2015-06-07T13:01:50Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/558#discussion_r31842820",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/558",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31842820"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/558#discussion_r31842820"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/558"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31842821",
        "pull_request_review_id": null,
        "id": 31842821,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxODQyODIx",
        "diff_hunk": "@@ -138,11 +139,11 @@ describe('client asset manager index', function () {\n         ss.client.load();\n         logHook.off();\n \n-        var html = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.html'),'utf-8');\n-        var js = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.js'),'utf-8');\n-        var css = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.css'),'utf-8');\n-        var expected_html = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/abc/expected.html'),'utf-8');\n-        var expected_js = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/abc/expected.min.js'),'utf-8');\n+        var html = fs.readFileSync(path.join(fixtures.project,'client/static/assets/abc/' + client.id + '.html'),'utf-8');\n+        var js = fs.readFileSync(path.join(fixtures.project,'client/static/assets/abc/' + client.id + '.js'),'utf-8');\n+        var css = fs.readFileSync(path.join(fixtures.project,'client/static/assets/abc/' + client.id + '.css'),'utf-8');\n+        var expected_html = fs.readFileSync(path.join(fixtures.project,'client/abc/expected.html'),'utf-8');\n+        var expected_js = fs.readFileSync(path.join(fixtures.project,'client/abc/expected.min.js'),'utf-8');",
        "path": "test/unit/client/index.test.js",
        "position": 71,
        "original_position": 71,
        "commit_id": "cc57af59b2f7865719f9b3a213e081c1b8726721",
        "original_commit_id": "2fc311dd30f39579549d397993f797a1baf134ae",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Identifier 'expected_js' is not in camel case.\n",
        "created_at": "2015-06-05T19:15:00Z",
        "updated_at": "2015-06-07T13:01:50Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/558#discussion_r31842821",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/558",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31842821"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/558#discussion_r31842821"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/558"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31842822",
        "pull_request_review_id": null,
        "id": 31842822,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxODQyODIy",
        "diff_hunk": "@@ -5,7 +5,8 @@ var path    = require('path'),\n   ss      = require( '../../../lib/socketstream'),\n   chokidar = require('chokidar'),\n   logHook = require('../../helpers/logHook.js'),\n-  options = ss.client.options;\n+  options = ss.client.options,",
        "path": "test/unit/client/live_reload.test.js",
        "position": null,
        "original_position": 5,
        "commit_id": "cc57af59b2f7865719f9b3a213e081c1b8726721",
        "original_commit_id": "2fc311dd30f39579549d397993f797a1baf134ae",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'options' is defined but never used.\n",
        "created_at": "2015-06-05T19:15:00Z",
        "updated_at": "2015-06-07T13:01:50Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/558#discussion_r31842822",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/558",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31842822"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/558#discussion_r31842822"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/558"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31842825",
        "pull_request_review_id": null,
        "id": 31842825,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxODQyODI1",
        "diff_hunk": "@@ -50,16 +53,14 @@ describe('pack',function() {\n     var outs = logHook.off();\n     outs[0].should.match(/Pre-packing and minifying the .abc. client.../);\n     outs[1].should.match(/3 previous packaged files deleted/);\n-    //outs.should.match();\n-    //  '\\u001b[90m  Minified CSS from 0 KB to 0 KB\\u001b[39m',\n-    //  '\\u001b[32m\u2713\\u001b[39m Packed 0 files into /client/static/assets/abc/'+client.id+'.css',\n-    //  '\\u001b[32m\u2713\\u001b[39m Packed 4 files into /client/static/assets/abc/'+client.id+'.js',\n-    //  '\\u001b[32m\u2713\\u001b[39m Created and cached HTML file /client/static/assets/abc/'+client.id+'.html' ]\n-    //);\n+    outs[2].should.match(/Minified CSS from 0 KB to 0 KB/);\n+    outs[3].should.match(new RegExp('Packed 0 files into /client/static/assets/abc/'+client.id+'.css'));\n+    outs[4].should.match(new RegExp('Packed 4 files into /client/static/assets/abc/'+client.id+'.js'));\n+    outs[5].should.match(new RegExp('Created and cached HTML file /client/static/assets/abc/'+client.id+'.html'));\n \n-    var js = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.js'),'utf-8');\n-    var css = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.css'),'utf-8');\n-    var expected_js = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/abc/empty-expected.min.js'),'utf-8');\n+    var js = fs.readFileSync(path.join(fixtures.project,'client/static/assets/abc/' + client.id + '.js'),'utf-8');\n+    var css = fs.readFileSync(path.join(fixtures.project,'client/static/assets/abc/' + client.id + '.css'),'utf-8');\n+    var expected_js = fs.readFileSync(path.join(fixtures.project,'client/abc/empty-expected.min.js'),'utf-8');",
        "path": "test/unit/client/pack.test.js",
        "position": null,
        "original_position": 44,
        "commit_id": "cc57af59b2f7865719f9b3a213e081c1b8726721",
        "original_commit_id": "2fc311dd30f39579549d397993f797a1baf134ae",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Identifier 'expected_js' is not in camel case.\n",
        "created_at": "2015-06-05T19:15:00Z",
        "updated_at": "2015-06-07T13:01:50Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/558#discussion_r31842825",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/558",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31842825"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/558#discussion_r31842825"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/558"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31842827",
        "pull_request_review_id": null,
        "id": 31842827,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxODQyODI3",
        "diff_hunk": "@@ -87,11 +88,11 @@ describe('pack',function() {\n     //  '\\u001b[32m\u2713\\u001b[39m Packed 5 files into /client/static/assets/abc/'+client.id+'.js',\n     //  '\\u001b[32m\u2713\\u001b[39m Created and cached HTML file /client/static/assets/abc/'+client.id+'.html' ]);\n \n-    var html = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.html'),'utf-8');\n-    var js = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.js'),'utf-8');\n-    var css = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.css'),'utf-8');\n-    var expected_html = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/abc/expected-with-abc-constants.html'),'utf-8');\n-    var expected_js = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/abc/expected.min.js'),'utf-8');\n+    var html = fs.readFileSync(path.join(fixtures.project,'client/static/assets/abc/' + client.id + '.html'),'utf-8');\n+    var js = fs.readFileSync(path.join(fixtures.project,'client/static/assets/abc/' + client.id + '.js'),'utf-8');\n+    var css = fs.readFileSync(path.join(fixtures.project,'client/static/assets/abc/' + client.id + '.css'),'utf-8');\n+    var expected_html = fs.readFileSync(path.join(fixtures.project,'client/abc/expected-with-abc-constants.html'),'utf-8');",
        "path": "test/unit/client/pack.test.js",
        "position": null,
        "original_position": 60,
        "commit_id": "cc57af59b2f7865719f9b3a213e081c1b8726721",
        "original_commit_id": "2fc311dd30f39579549d397993f797a1baf134ae",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Identifier 'expected_html' is not in camel case.\n",
        "created_at": "2015-06-05T19:15:01Z",
        "updated_at": "2015-06-07T13:01:50Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/558#discussion_r31842827",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/558",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31842827"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/558#discussion_r31842827"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/558"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31842828",
        "pull_request_review_id": null,
        "id": 31842828,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxODQyODI4",
        "diff_hunk": "@@ -87,11 +88,11 @@ describe('pack',function() {\n     //  '\\u001b[32m\u2713\\u001b[39m Packed 5 files into /client/static/assets/abc/'+client.id+'.js',\n     //  '\\u001b[32m\u2713\\u001b[39m Created and cached HTML file /client/static/assets/abc/'+client.id+'.html' ]);\n \n-    var html = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.html'),'utf-8');\n-    var js = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.js'),'utf-8');\n-    var css = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.css'),'utf-8');\n-    var expected_html = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/abc/expected-with-abc-constants.html'),'utf-8');\n-    var expected_js = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/abc/expected.min.js'),'utf-8');\n+    var html = fs.readFileSync(path.join(fixtures.project,'client/static/assets/abc/' + client.id + '.html'),'utf-8');\n+    var js = fs.readFileSync(path.join(fixtures.project,'client/static/assets/abc/' + client.id + '.js'),'utf-8');\n+    var css = fs.readFileSync(path.join(fixtures.project,'client/static/assets/abc/' + client.id + '.css'),'utf-8');\n+    var expected_html = fs.readFileSync(path.join(fixtures.project,'client/abc/expected-with-abc-constants.html'),'utf-8');\n+    var expected_js = fs.readFileSync(path.join(fixtures.project,'client/abc/expected.min.js'),'utf-8');",
        "path": "test/unit/client/pack.test.js",
        "position": 83,
        "original_position": 61,
        "commit_id": "cc57af59b2f7865719f9b3a213e081c1b8726721",
        "original_commit_id": "2fc311dd30f39579549d397993f797a1baf134ae",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Identifier 'expected_js' is not in camel case.\n",
        "created_at": "2015-06-05T19:15:01Z",
        "updated_at": "2015-06-07T13:01:50Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/558#discussion_r31842828",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/558",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31842828"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/558#discussion_r31842828"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/558"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31842829",
        "pull_request_review_id": null,
        "id": 31842829,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxODQyODI5",
        "diff_hunk": "@@ -5,7 +5,8 @@\n // Dependencies\n \n var uncachedRequire               = require('../helpers/uncache'),\n-  path = require('path');\n+  path = require('path'),",
        "path": "test/unit/socketstream.test.js",
        "position": null,
        "original_position": 5,
        "commit_id": "cc57af59b2f7865719f9b3a213e081c1b8726721",
        "original_commit_id": "2fc311dd30f39579549d397993f797a1baf134ae",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'path' is defined but never used.\n",
        "created_at": "2015-06-05T19:15:01Z",
        "updated_at": "2015-06-07T13:01:50Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/558#discussion_r31842829",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/558",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31842829"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/558#discussion_r31842829"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/558"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31855225",
        "pull_request_review_id": null,
        "id": 31855225,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxODU1MjI1",
        "diff_hunk": "@@ -49,17 +53,15 @@ describe('pack',function() {\n     ss.api.bundler.pack(client);\n     var outs = logHook.off();\n     outs[0].should.match(/Pre-packing and minifying the .abc. client.../);\n-    outs[1].should.match(/3 previous packaged files deleted/);\n-    //outs.should.match();\n-    //  '\\u001b[90m  Minified CSS from 0 KB to 0 KB\\u001b[39m',\n-    //  '\\u001b[32m\u2713\\u001b[39m Packed 0 files into /client/static/assets/abc/'+client.id+'.css',\n-    //  '\\u001b[32m\u2713\\u001b[39m Packed 4 files into /client/static/assets/abc/'+client.id+'.js',\n-    //  '\\u001b[32m\u2713\\u001b[39m Created and cached HTML file /client/static/assets/abc/'+client.id+'.html' ]\n-    //);\n-\n-    var js = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.js'),'utf-8');\n-    var css = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.css'),'utf-8');\n-    var expected_js = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/abc/empty-expected.min.js'),'utf-8');\n+    //outs[1].should.match(/3 previous packaged files deleted/);\n+    outs[1].should.match(/Minified CSS from 0 KB to 0 KB/);\n+    outs[2].should.match(new RegExp('Packed 0 files into /client/static/assets/abc/'+client.id+'.css'));\n+    outs[3].should.match(new RegExp('Packed 4 files into /client/static/assets/abc/'+client.id+'.js'));\n+    outs[4].should.match(new RegExp('Created and cached HTML file /client/static/assets/abc/'+client.id+'.html'));\n+\n+    var js = fs.readFileSync(path.join(fixtures.project,'client/static/assets/abc/' + client.id + '.js'),'utf-8');\n+    var css = fs.readFileSync(path.join(fixtures.project,'client/static/assets/abc/' + client.id + '.css'),'utf-8');\n+    var expected_js = fs.readFileSync(path.join(fixtures.project,'client/abc/empty-expected.min.js'),'utf-8');",
        "path": "test/unit/client/pack.test.js",
        "position": 51,
        "original_position": 51,
        "commit_id": "cc57af59b2f7865719f9b3a213e081c1b8726721",
        "original_commit_id": "19461975da1538972eec8304d14c8b9bc160d38a",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Identifier 'expected_js' is not in camel case.\n",
        "created_at": "2015-06-05T21:55:37Z",
        "updated_at": "2015-06-07T13:01:50Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/558#discussion_r31855225",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/558",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31855225"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/558#discussion_r31855225"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/558"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31855226",
        "pull_request_review_id": null,
        "id": 31855226,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxODU1MjI2",
        "diff_hunk": "@@ -79,19 +81,18 @@ describe('pack',function() {\n     logHook.on();\n     ss.api.bundler.pack(client);\n     var outs = logHook.off();\n-    //outs.should.equal([ '\\u001b[33mPre-packing and minifying the \\'abc\\' client...\\u001b[39m',\n-    //  '\\u001b[32m\u2713\\u001b[39m 3 previous packaged files deleted',\n-    //  '\\u001b[90m  Minified CSS from 0.016 KB to 0 KB\\u001b[39m',\n-    //  '\\u001b[32m\u2713\\u001b[39m Packed 1 files into /client/static/assets/abc/'+client.id+'.css',\n-    //  '\\u001b[90m  Minified ./abc/index.js from 0.099 KB to 0.049 KB\\u001b[39m',\n-    //  '\\u001b[32m\u2713\\u001b[39m Packed 5 files into /client/static/assets/abc/'+client.id+'.js',\n-    //  '\\u001b[32m\u2713\\u001b[39m Created and cached HTML file /client/static/assets/abc/'+client.id+'.html' ]);\n-\n-    var html = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.html'),'utf-8');\n-    var js = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.js'),'utf-8');\n-    var css = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/static/assets/abc/' + client.id + '.css'),'utf-8');\n-    var expected_html = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/abc/expected-with-abc-constants.html'),'utf-8');\n-    var expected_js = fs.readFileSync(path.join(__dirname,'../../fixtures/project/client/abc/expected.min.js'),'utf-8');\n+    outs[0].should.match(/Pre-packing and minifying the .abc. client.../);\n+    outs[1].should.match(/Minified CSS from 0.016 KB to 0 KB/);\n+    outs[2].should.match(new RegExp('Packed 1 files into /client/static/assets/abc/'+client.id+'.css'));\n+    outs[3].should.match(/Minified .\\/abc\\/index.js from 0.099 KB to 0.049 KB/);\n+    outs[4].should.match(new RegExp('Packed 5 files into /client/static/assets/abc/'+client.id+'.js'));\n+    outs[5].should.match(new RegExp('Created and cached HTML file /client/static/assets/abc/'+client.id+'.html'));\n+\n+    var html = fs.readFileSync(path.join(fixtures.project,'client/static/assets/abc/' + client.id + '.html'),'utf-8');\n+    var js = fs.readFileSync(path.join(fixtures.project,'client/static/assets/abc/' + client.id + '.js'),'utf-8');\n+    var css = fs.readFileSync(path.join(fixtures.project,'client/static/assets/abc/' + client.id + '.css'),'utf-8');\n+    var expected_html = fs.readFileSync(path.join(fixtures.project,'client/abc/expected-with-abc-constants.html'),'utf-8');",
        "path": "test/unit/client/pack.test.js",
        "position": 82,
        "original_position": 82,
        "commit_id": "cc57af59b2f7865719f9b3a213e081c1b8726721",
        "original_commit_id": "19461975da1538972eec8304d14c8b9bc160d38a",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Identifier 'expected_html' is not in camel case.\n",
        "created_at": "2015-06-05T21:55:37Z",
        "updated_at": "2015-06-07T13:01:50Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/558#discussion_r31855226",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/558",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/31855226"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/558#discussion_r31855226"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/558"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/32191739",
        "pull_request_review_id": null,
        "id": 32191739,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMTkxNzM5",
        "diff_hunk": "@@ -105,12 +110,19 @@ describe('default bundler:', function () {\n         '\", function (require, module, exports, __dirname, __filename){\\n' + code + '\\n});');\n     });\n \n+    it('should recognise existing asset bundle', function() {\n+      var bundler = ss.api.bundler.get({ client: 'abc' });\n+      bundler.latestPackedId.should.be.equal('123456789');\n+    });\n+\n   });\n \n   describe('client with relative css+code+tmpl', function() {\n \n     var client;\n \n+    beforeEach(function(done){ fixtures.reset(done); });",
        "path": "test/unit/client/bundler/default.test.js",
        "position": 51,
        "original_position": 51,
        "commit_id": "cc57af59b2f7865719f9b3a213e081c1b8726721",
        "original_commit_id": "cc57af59b2f7865719f9b3a213e081c1b8726721",
        "user": {
            "login": "paulbjensen",
            "id": 3840,
            "node_id": "MDQ6VXNlcjM4NDA=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/3840?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/paulbjensen",
            "html_url": "https://github.com/paulbjensen",
            "followers_url": "https://api.github.com/users/paulbjensen/followers",
            "following_url": "https://api.github.com/users/paulbjensen/following{/other_user}",
            "gists_url": "https://api.github.com/users/paulbjensen/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/paulbjensen/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/paulbjensen/subscriptions",
            "organizations_url": "https://api.github.com/users/paulbjensen/orgs",
            "repos_url": "https://api.github.com/users/paulbjensen/repos",
            "events_url": "https://api.github.com/users/paulbjensen/events{/privacy}",
            "received_events_url": "https://api.github.com/users/paulbjensen/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Doesn't need to be changed, but this could be shortened to <code>beforeEach(fixtures.reset);</code>.\n",
        "created_at": "2015-06-11T05:55:29Z",
        "updated_at": "2015-06-11T05:55:29Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/558#discussion_r32191739",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/558",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/32191739"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/558#discussion_r32191739"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/558"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/37545418",
        "pull_request_review_id": null,
        "id": 37545418,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ1NDE4",
        "diff_hunk": "@@ -0,0 +1,75 @@\n+'use strict';\n+\n+var ss = require( '../../../lib/socketstream'),\n+    options = ss.client.options,",
        "path": "test/unit/tasks/index.test.js",
        "position": null,
        "original_position": 4,
        "commit_id": "f6f6e9e5329b079804d99ddd09e9d757f23eaba6",
        "original_commit_id": "62d0dc136cb641cfe501b329c82a600a87940c05",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'options' is defined but never used.\n",
        "created_at": "2015-08-20T15:45:54Z",
        "updated_at": "2015-08-23T18:43:16Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/569#discussion_r37545418",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/569",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/37545418"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/569#discussion_r37545418"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/569"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/37545419",
        "pull_request_review_id": null,
        "id": 37545419,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ1NDE5",
        "diff_hunk": "@@ -5,6 +5,7 @@\n // Dependencies\n \n var uncachedRequire = require('../helpers/uncache'),\n+    sinon = require('sinon'),",
        "path": "test/unit/socketstream.test.js",
        "position": null,
        "original_position": 4,
        "commit_id": "f6f6e9e5329b079804d99ddd09e9d757f23eaba6",
        "original_commit_id": "62d0dc136cb641cfe501b329c82a600a87940c05",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Redefinition of 'sinon'.\n",
        "created_at": "2015-08-20T15:45:54Z",
        "updated_at": "2015-08-23T18:43:16Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/569#discussion_r37545419",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/569",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/37545419"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/569#discussion_r37545419"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/569"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/37545420",
        "pull_request_review_id": null,
        "id": 37545420,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ1NDIw",
        "diff_hunk": "@@ -5,7 +5,8 @@ var path    = require('path'),\n     ss      = require( '../../../lib/socketstream'),\n     logHook = require('../../helpers/logHook.js'),\n     options = ss.client.options,\n-  fixtures = require('../../fixtures');\n+    defineAbcClient = require('./abcClient'),",
        "path": "test/unit/client/index.test.js",
        "position": null,
        "original_position": 5,
        "commit_id": "f6f6e9e5329b079804d99ddd09e9d757f23eaba6",
        "original_commit_id": "62d0dc136cb641cfe501b329c82a600a87940c05",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'defineAbcClient' is defined but never used.\n",
        "created_at": "2015-08-20T15:45:54Z",
        "updated_at": "2015-08-23T18:43:16Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/569#discussion_r37545420",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/569",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/37545420"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/569#discussion_r37545420"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/569"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/37545421",
        "pull_request_review_id": null,
        "id": 37545421,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ1NDIx",
        "diff_hunk": "@@ -3,33 +3,28 @@\n // Handles everything to do with the websocket transport and message responders\n 'use strict';\n \n-var EventEmitter2, emitter;\n-\n-EventEmitter2 = require('eventemitter2').EventEmitter2;\n-\n-emitter = new EventEmitter2({\n-  wildcard: true\n-});\n+var EventEmitter2 = require('eventemitter2').EventEmitter2,\n+    emitter = new EventEmitter2({\n+      wildcard: true\n+    });\n \n module.exports = function(ss) {\n-  var transport;\n  \n   // Return API\n-  transport = require('./transport')(ss, emitter);\n+  var transport = require('./transport')(ss, emitter);\n  \n   return {\n     transport: transport,\n     unload: function() {},\n     load: function(httpServer, responders, eventTransport, sessionOptions) {\n-      var id, responder, thisTransport;\n-      thisTransport = transport.load(httpServer, sessionOptions);\n+      var thisTransport = transport.load(httpServer, sessionOptions);\n \n       // Dispatch incoming events to websocket clients      \n       require('./event_dispatcher')(eventTransport, thisTransport, emitter);\n \n       // Listen to incoming requests and invoke server.request      \n-      for (id in responders) {\n-        responder = responders[id];\n+      for (var id in responders) {",
        "path": "lib/websocket/index.js",
        "position": 37,
        "original_position": 37,
        "commit_id": "f6f6e9e5329b079804d99ddd09e9d757f23eaba6",
        "original_commit_id": "62d0dc136cb641cfe501b329c82a600a87940c05",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The body of a for in should be wrapped in an if statement to filter unwanted properties from the prototype.\n",
        "created_at": "2015-08-20T15:45:55Z",
        "updated_at": "2015-08-23T18:43:16Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/569#discussion_r37545421",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/569",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/37545421"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/569#discussion_r37545421"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/569"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/37545422",
        "pull_request_review_id": null,
        "id": 37545422,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ1NDIy",
        "diff_hunk": "@@ -0,0 +1,139 @@\n+'use strict';\n+\n+// logging\n+var http = require('http'),\n+    log = require('../utils/log'),\n+    ondemandRoutes = require('../client/serve/ondemand'),\n+    devRoutes = require('../client/serve/dev'),\n+    liveReload = require('./live_reload');\n+\n+\n+module.exports = function(ss, router, options) {\n+\n+  return {\n+    plan: function(args) {\n+      var plan = {}, httpServer = args[0];\n+      plan.targets = Array.prototype.slice.call(args);\n+      if (args.length === 0 || typeof httpServer === 'string' || httpServer instanceof Array) {\n+        plan.httpServer = null;\n+      } else {\n+        plan.httpServer = httpServer;\n+        plan.targets.shift();\n+      }\n+      if (plan.targets[0] instanceof Array) {\n+        plan.targets = plan.targets[0];\n+      }\n+      if (plan.targets.length === 0) {\n+        plan.targets.push('default');\n+      }\n+\n+      return plan;\n+    },\n+\n+    load: function() {\n+\n+      // task: ondemand\n+      // Listen out for requests to async load new assets\n+      ss.orchestrator.add('serve', function serveOndemand() {\n+        ondemandRoutes(ss, router, options);\n+      });\n+\n+      ss.orchestrator.add('live-assets', function() {\n+        devRoutes(ss, router, options);\n+      });\n+\n+      ss.orchestrator.add('live-reload', function() {\n+        liveReload(ss, options);\n+      });\n+\n+      // if the app doesn't define how to start the server, this is the default\n+      if (!ss.orchestrator.hasTask('start-server')) {\n+        ss.orchestrator.add('start-server',function(done) {\n+          var server = http.createServer(ss.http.middleware);\n+          server.listen(3000, function() {\n+            ss.stream(server);\n+            done();\n+          });\n+        });\n+      }\n+\n+      ss.orchestrator.add('stop-server', function() {\n+        if (ss.server.httServer) {\n+          ss.server.httServer.close();\n+        }\n+      });\n+\n+      if (!ss.orchestrator.hasTask('default')) {\n+        var defaultTasks = [];\n+\n+        // if the server was passed in ss.start(httpServer) one shouldn't be started\n+        if (ss.server.httpServer == null) {\n+          defaultTasks.push('start-server');\n+        }\n+        if (options.packedAssets) {\n+          defaultTasks.push(options.packedAssets.all? 'pack-all':'pack-if-needed');\n+        } else {\n+          defaultTasks.push('live-assets');\n+        }\n+        if (options.liveReload) {\n+          defaultTasks.push('live-reload');\n+        }\n+        // if (httpServer)\n+        defaultTasks.push('serve');\n+\n+        ss.orchestrator.add('default',defaultTasks);\n+      }\n+\n+      this._addTasks();\n+    },\n+\n+    unload: function() {\n+      liveReload.unload();\n+    },\n+\n+    forget: function() {\n+      for(var n in ss.orchestrator.tasks) {\n+        delete ss.orchestrator.tasks[n];\n+      }\n+    },\n+    _addTasks: function() {\n+      ss.bundler.forEach(function(bundler) {\n+\n+        // Pack Assets\n+        ss.orchestrator.add(bundler.client.name+':pack',function() {\n+          ss.bundler.pack(bundler.client); //TODO bundler.pack();\n+          bundler.packNeeded = false;\n+        });\n+      });\n+\n+      ss.orchestrator.add('pack-all', this._packTasks(true));\n+      ss.orchestrator.add('pack-if-needed', this._packTasks());\n+      ss.orchestrator.add('pack-report', function() {\n+        log.info('i'.green, 'Attempting to find pre-packed assets... (force repack with SS_PACK=1)'.grey);\n+        ss.bundler.forEach(function(bundler) {\n+          if (bundler.packNeeded) {\n+            log.info('!'.red, ('Unable to find pre-packed assets for \\'' + bundler.client.name + '\\'. All assets will be repacked').grey);\n+          } else {\n+            log.info('\u2713'.green, ('Serving client \\'' + bundler.client.name + '\\' using pre-packed assets (ID ' + bundler.client.servingAssetId + ')').grey);\n+          }\n+        });\n+      });\n+    },\n+\n+    _packTasks: function(all) {\n+      var tasks = ['pack-report'];\n+      ss.bundler.forEach(function(bundler){\n+        if (all || bundler.packNeeded) {\n+          tasks.push(bundler.client.name + \":pack\");",
        "path": "lib/tasks/index.js",
        "position": null,
        "original_position": 127,
        "commit_id": "f6f6e9e5329b079804d99ddd09e9d757f23eaba6",
        "original_commit_id": "62d0dc136cb641cfe501b329c82a600a87940c05",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Mixed double and single quotes.\n",
        "created_at": "2015-08-20T15:45:55Z",
        "updated_at": "2015-08-23T18:43:16Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/569#discussion_r37545422",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/569",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/37545422"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/569#discussion_r37545422"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/569"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/37545423",
        "pull_request_review_id": null,
        "id": 37545423,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ1NDIz",
        "diff_hunk": "@@ -0,0 +1,139 @@\n+'use strict';\n+\n+// logging\n+var http = require('http'),\n+    log = require('../utils/log'),\n+    ondemandRoutes = require('../client/serve/ondemand'),\n+    devRoutes = require('../client/serve/dev'),\n+    liveReload = require('./live_reload');\n+\n+\n+module.exports = function(ss, router, options) {\n+\n+  return {\n+    plan: function(args) {\n+      var plan = {}, httpServer = args[0];\n+      plan.targets = Array.prototype.slice.call(args);\n+      if (args.length === 0 || typeof httpServer === 'string' || httpServer instanceof Array) {\n+        plan.httpServer = null;\n+      } else {\n+        plan.httpServer = httpServer;\n+        plan.targets.shift();\n+      }\n+      if (plan.targets[0] instanceof Array) {\n+        plan.targets = plan.targets[0];\n+      }\n+      if (plan.targets.length === 0) {\n+        plan.targets.push('default');\n+      }\n+\n+      return plan;\n+    },\n+\n+    load: function() {\n+\n+      // task: ondemand\n+      // Listen out for requests to async load new assets\n+      ss.orchestrator.add('serve', function serveOndemand() {\n+        ondemandRoutes(ss, router, options);\n+      });\n+\n+      ss.orchestrator.add('live-assets', function() {\n+        devRoutes(ss, router, options);\n+      });\n+\n+      ss.orchestrator.add('live-reload', function() {\n+        liveReload(ss, options);\n+      });\n+\n+      // if the app doesn't define how to start the server, this is the default\n+      if (!ss.orchestrator.hasTask('start-server')) {\n+        ss.orchestrator.add('start-server',function(done) {\n+          var server = http.createServer(ss.http.middleware);\n+          server.listen(3000, function() {\n+            ss.stream(server);\n+            done();\n+          });\n+        });\n+      }\n+\n+      ss.orchestrator.add('stop-server', function() {\n+        if (ss.server.httServer) {\n+          ss.server.httServer.close();\n+        }\n+      });\n+\n+      if (!ss.orchestrator.hasTask('default')) {\n+        var defaultTasks = [];\n+\n+        // if the server was passed in ss.start(httpServer) one shouldn't be started\n+        if (ss.server.httpServer == null) {\n+          defaultTasks.push('start-server');\n+        }\n+        if (options.packedAssets) {\n+          defaultTasks.push(options.packedAssets.all? 'pack-all':'pack-if-needed');\n+        } else {\n+          defaultTasks.push('live-assets');\n+        }\n+        if (options.liveReload) {\n+          defaultTasks.push('live-reload');\n+        }\n+        // if (httpServer)\n+        defaultTasks.push('serve');\n+\n+        ss.orchestrator.add('default',defaultTasks);\n+      }\n+\n+      this._addTasks();\n+    },\n+\n+    unload: function() {\n+      liveReload.unload();\n+    },\n+\n+    forget: function() {\n+      for(var n in ss.orchestrator.tasks) {\n+        delete ss.orchestrator.tasks[n];\n+      }\n+    },\n+    _addTasks: function() {\n+      ss.bundler.forEach(function(bundler) {\n+\n+        // Pack Assets\n+        ss.orchestrator.add(bundler.client.name+':pack',function() {\n+          ss.bundler.pack(bundler.client); //TODO bundler.pack();\n+          bundler.packNeeded = false;\n+        });\n+      });\n+\n+      ss.orchestrator.add('pack-all', this._packTasks(true));\n+      ss.orchestrator.add('pack-if-needed', this._packTasks());\n+      ss.orchestrator.add('pack-report', function() {\n+        log.info('i'.green, 'Attempting to find pre-packed assets... (force repack with SS_PACK=1)'.grey);\n+        ss.bundler.forEach(function(bundler) {\n+          if (bundler.packNeeded) {\n+            log.info('!'.red, ('Unable to find pre-packed assets for \\'' + bundler.client.name + '\\'. All assets will be repacked').grey);\n+          } else {\n+            log.info('\u2713'.green, ('Serving client \\'' + bundler.client.name + '\\' using pre-packed assets (ID ' + bundler.client.servingAssetId + ')').grey);",
        "path": "lib/tasks/index.js",
        "position": null,
        "original_position": 117,
        "commit_id": "f6f6e9e5329b079804d99ddd09e9d757f23eaba6",
        "original_commit_id": "62d0dc136cb641cfe501b329c82a600a87940c05",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Line is too long.\n",
        "created_at": "2015-08-20T15:45:55Z",
        "updated_at": "2015-08-23T18:43:16Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/569#discussion_r37545423",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/569",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/37545423"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/569#discussion_r37545423"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/569"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/37545426",
        "pull_request_review_id": null,
        "id": 37545426,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ1NDI2",
        "diff_hunk": "@@ -0,0 +1,139 @@\n+'use strict';\n+\n+// logging\n+var http = require('http'),\n+    log = require('../utils/log'),\n+    ondemandRoutes = require('../client/serve/ondemand'),\n+    devRoutes = require('../client/serve/dev'),\n+    liveReload = require('./live_reload');\n+\n+\n+module.exports = function(ss, router, options) {\n+\n+  return {\n+    plan: function(args) {\n+      var plan = {}, httpServer = args[0];\n+      plan.targets = Array.prototype.slice.call(args);\n+      if (args.length === 0 || typeof httpServer === 'string' || httpServer instanceof Array) {\n+        plan.httpServer = null;\n+      } else {\n+        plan.httpServer = httpServer;\n+        plan.targets.shift();\n+      }\n+      if (plan.targets[0] instanceof Array) {\n+        plan.targets = plan.targets[0];\n+      }\n+      if (plan.targets.length === 0) {\n+        plan.targets.push('default');\n+      }\n+\n+      return plan;\n+    },\n+\n+    load: function() {\n+\n+      // task: ondemand\n+      // Listen out for requests to async load new assets\n+      ss.orchestrator.add('serve', function serveOndemand() {\n+        ondemandRoutes(ss, router, options);\n+      });\n+\n+      ss.orchestrator.add('live-assets', function() {\n+        devRoutes(ss, router, options);\n+      });\n+\n+      ss.orchestrator.add('live-reload', function() {\n+        liveReload(ss, options);\n+      });\n+\n+      // if the app doesn't define how to start the server, this is the default\n+      if (!ss.orchestrator.hasTask('start-server')) {\n+        ss.orchestrator.add('start-server',function(done) {\n+          var server = http.createServer(ss.http.middleware);\n+          server.listen(3000, function() {\n+            ss.stream(server);\n+            done();\n+          });\n+        });\n+      }\n+\n+      ss.orchestrator.add('stop-server', function() {\n+        if (ss.server.httServer) {\n+          ss.server.httServer.close();\n+        }\n+      });\n+\n+      if (!ss.orchestrator.hasTask('default')) {\n+        var defaultTasks = [];\n+\n+        // if the server was passed in ss.start(httpServer) one shouldn't be started\n+        if (ss.server.httpServer == null) {\n+          defaultTasks.push('start-server');\n+        }\n+        if (options.packedAssets) {\n+          defaultTasks.push(options.packedAssets.all? 'pack-all':'pack-if-needed');\n+        } else {\n+          defaultTasks.push('live-assets');\n+        }\n+        if (options.liveReload) {\n+          defaultTasks.push('live-reload');\n+        }\n+        // if (httpServer)\n+        defaultTasks.push('serve');\n+\n+        ss.orchestrator.add('default',defaultTasks);\n+      }\n+\n+      this._addTasks();\n+    },\n+\n+    unload: function() {\n+      liveReload.unload();\n+    },\n+\n+    forget: function() {\n+      for(var n in ss.orchestrator.tasks) {",
        "path": "lib/tasks/index.js",
        "position": 113,
        "original_position": 95,
        "commit_id": "f6f6e9e5329b079804d99ddd09e9d757f23eaba6",
        "original_commit_id": "62d0dc136cb641cfe501b329c82a600a87940c05",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The body of a for in should be wrapped in an if statement to filter unwanted properties from the prototype.\n",
        "created_at": "2015-08-20T15:45:55Z",
        "updated_at": "2015-08-23T18:43:16Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/569#discussion_r37545426",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/569",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/37545426"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/569#discussion_r37545426"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/569"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/37545427",
        "pull_request_review_id": null,
        "id": 37545427,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ1NDI3",
        "diff_hunk": "@@ -142,31 +186,29 @@ var serverInstance = null;\n  * @description\n  * Starts the development or production server\n  */\n-function start(httpServer) {\n+function start() {\n \n-  // Load SocketStream server instance\n-  var server = {\n-      responders:      responders.load(),\n-      eventTransport:  publish.transport.load(),\n-      sessionStore:    session.store.get()\n-    };\n+  var plan = tasks.plan(arguments),\n+      httpServer = plan.httpServer,\n+      targets = plan.targets;\n \n-  // Extend the internal API with a publish object you can call from your own server-side code\n-  api.publish = publish.api(server.eventTransport);\n+  var server = getServer();\n \n-  // Start web stack\n+  // Hook in streaming if called with HTTP server\n   if (httpServer) {\n+    stream(httpServer);\n+  }\n \n-    api.log.info('Starting SocketStream %s in %s mode...'.green, version, env);\n+  // Append SocketStream middleware to stack\n+  http.load(client.options.dirs['static'], client.options.dirs['assets'], server.sessionStore, session.options);\n \n-    // Bind responders to websocket\n-    ws.load(httpServer, server.responders, server.eventTransport, session.options);\n+  // Load Client Asset Manager\n+  client.load();\n \n-    // Append SocketStream middleware to stack\n-    http.load(client.options.dirs['static'], client.options.dirs['assets'], server.sessionStore, session.options);\n+  tasks.load();\n \n-    // Load Client Asset Manager\n-    client.load();\n+  function done(err) {",
        "path": "lib/socketstream.js",
        "position": null,
        "original_position": 138,
        "commit_id": "f6f6e9e5329b079804d99ddd09e9d757f23eaba6",
        "original_commit_id": "62d0dc136cb641cfe501b329c82a600a87940c05",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'err' is defined but never used.\n",
        "created_at": "2015-08-20T15:45:56Z",
        "updated_at": "2015-08-23T18:43:16Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/569#discussion_r37545427",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/569",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/37545427"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/569#discussion_r37545427"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/569"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/37545429",
        "pull_request_review_id": null,
        "id": 37545429,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ1NDI5",
        "diff_hunk": "@@ -142,31 +186,29 @@ var serverInstance = null;\n  * @description\n  * Starts the development or production server\n  */\n-function start(httpServer) {\n+function start() {\n \n-  // Load SocketStream server instance\n-  var server = {\n-      responders:      responders.load(),\n-      eventTransport:  publish.transport.load(),\n-      sessionStore:    session.store.get()\n-    };\n+  var plan = tasks.plan(arguments),\n+      httpServer = plan.httpServer,\n+      targets = plan.targets;\n \n-  // Extend the internal API with a publish object you can call from your own server-side code\n-  api.publish = publish.api(server.eventTransport);\n+  var server = getServer();\n \n-  // Start web stack\n+  // Hook in streaming if called with HTTP server\n   if (httpServer) {\n+    stream(httpServer);\n+  }\n \n-    api.log.info('Starting SocketStream %s in %s mode...'.green, version, env);\n+  // Append SocketStream middleware to stack\n+  http.load(client.options.dirs['static'], client.options.dirs['assets'], server.sessionStore, session.options);",
        "path": "lib/socketstream.js",
        "position": null,
        "original_position": 125,
        "commit_id": "f6f6e9e5329b079804d99ddd09e9d757f23eaba6",
        "original_commit_id": "62d0dc136cb641cfe501b329c82a600a87940c05",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "['assets'] is better written in dot notation.\n",
        "created_at": "2015-08-20T15:45:56Z",
        "updated_at": "2015-08-23T18:43:16Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/569#discussion_r37545429",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/569",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/37545429"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/569#discussion_r37545429"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/569"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/37545430",
        "pull_request_review_id": null,
        "id": 37545430,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ1NDMw",
        "diff_hunk": "@@ -19,9 +19,9 @@ var options = {};\n function setDefaultOptions(options) {\n \n   // Determine if assets should be (re)packed on startup\n-  var packAssets = process.env['SS_PACK'];\n+  var packEnv = process.env['SS_PACK'];",
        "path": "lib/client/index.js",
        "position": 5,
        "original_position": 5,
        "commit_id": "f6f6e9e5329b079804d99ddd09e9d757f23eaba6",
        "original_commit_id": "62d0dc136cb641cfe501b329c82a600a87940c05",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "['SS_PACK'] is better written in dot notation.\n",
        "created_at": "2015-08-20T15:45:56Z",
        "updated_at": "2015-08-23T18:43:16Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/569#discussion_r37545430",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/569",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/37545430"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/569#discussion_r37545430"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/569"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/37705918",
        "pull_request_review_id": null,
        "id": 37705918,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA1OTE4",
        "diff_hunk": "@@ -0,0 +1,179 @@\n+'use strict';\n+\n+// logging\n+var http = require('http'),\n+    log = require('../utils/log'),\n+    ondemandRoutes = require('../client/serve/ondemand'),\n+    devRoutes = require('../client/serve/dev'),\n+    liveReload = require('./live_reload');\n+\n+\n+module.exports = function(ss, router, options) {\n+\n+  return {\n+    plan: function(args) {\n+      var plan = {}, httpServer = args[0];\n+      plan.targets = Array.prototype.slice.call(args);\n+      if (args.length === 0 || typeof httpServer === 'string' || httpServer instanceof Array) {\n+        plan.httpServer = null;\n+      } else {\n+        plan.httpServer = httpServer;\n+        plan.targets.shift();\n+      }\n+      if (plan.targets[0] instanceof Array) {\n+        plan.targets = plan.targets[0];\n+      }\n+      if (plan.targets.length === 0) {\n+        plan.targets.push('default');\n+      }\n+\n+      return plan;\n+    },\n+\n+    // the passing of http is temporary, not the best dependency\n+    load: function(ss_http, client, session) {\n+\n+      // if the app doesn't define how to start the server, this is the default\n+      if (!ss.orchestrator.hasTask('start-server')) {\n+        ss.orchestrator.add('start-server',function(done) {\n+          var server = http.Server(ss_http.middleware);\n+          server.listen(3000, function() {\n+            ss.stream(server); // probably shouldn't be on internal API\n+            done();\n+          });\n+        });\n+      }\n+\n+      ss.orchestrator.add('load-socketstream', function() {\n+        // Append SocketStream middleware to stack\n+        ss_http.load(client.options.dirs['static'], client.options.dirs['assets'], ss.server.sessionStore, session.options);",
        "path": "lib/tasks/index.js",
        "position": null,
        "original_position": 49,
        "commit_id": "f6f6e9e5329b079804d99ddd09e9d757f23eaba6",
        "original_commit_id": "6ee5c346a93fcd533ddd17b02f776fcddf9127d6",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "['assets'] is better written in dot notation.\n",
        "created_at": "2015-08-23T13:42:27Z",
        "updated_at": "2015-08-23T18:43:16Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/569#discussion_r37705918",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/569",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/37705918"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/569#discussion_r37705918"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/569"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/37705919",
        "pull_request_review_id": null,
        "id": 37705919,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA1OTE5",
        "diff_hunk": "@@ -142,71 +186,69 @@ var serverInstance = null;\n  * @description\n  * Starts the development or production server\n  */\n-function start(httpServer) {\n+function start() {\n \n-  // Load SocketStream server instance\n-  var server = {\n-      responders:      responders.load(),\n-      eventTransport:  publish.transport.load(),\n-      sessionStore:    session.store.get()\n-    };\n+  var plan = tasks.plan(arguments),\n+      httpServer = plan.httpServer,\n+      targets = plan.targets;\n \n-  // Extend the internal API with a publish object you can call from your own server-side code\n-  api.publish = publish.api(server.eventTransport);\n+  var server = getServer();",
        "path": "lib/socketstream.js",
        "position": null,
        "original_position": 124,
        "commit_id": "f6f6e9e5329b079804d99ddd09e9d757f23eaba6",
        "original_commit_id": "6ee5c346a93fcd533ddd17b02f776fcddf9127d6",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'server' is defined but never used.\n",
        "created_at": "2015-08-23T13:42:27Z",
        "updated_at": "2015-08-23T18:43:16Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/569#discussion_r37705919",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/569",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/37705919"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/569#discussion_r37705919"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/569"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/37705920",
        "pull_request_review_id": null,
        "id": 37705920,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA1OTIw",
        "diff_hunk": "@@ -103,7 +116,7 @@ var api = exports.api = {\n  *\n  * 'server:start' is emitted when the server starts. If in production the assets will be saved before the event.\n  */\n-var events = exports.events = new EventEmitter2();\n+var events = exports.events = api.events = new EventEmitter2();",
        "path": "lib/socketstream.js",
        "position": 53,
        "original_position": 43,
        "commit_id": "f6f6e9e5329b079804d99ddd09e9d757f23eaba6",
        "original_commit_id": "6ee5c346a93fcd533ddd17b02f776fcddf9127d6",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'events' is defined but never used.\n",
        "created_at": "2015-08-23T13:42:28Z",
        "updated_at": "2015-08-23T18:43:16Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/569#discussion_r37705920",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/569",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/37705920"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/569#discussion_r37705920"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/569"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/37709222",
        "pull_request_review_id": null,
        "id": 37709222,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA5MjIy",
        "diff_hunk": "@@ -142,71 +228,28 @@ var serverInstance = null;\n  * @description\n  * Starts the development or production server\n  */\n-function start(httpServer) {\n-\n-  // Load SocketStream server instance\n-  var server = {\n-      responders:      responders.load(),\n-      eventTransport:  publish.transport.load(),\n-      sessionStore:    session.store.get()\n-    };\n-\n-  // Extend the internal API with a publish object you can call from your own server-side code\n-  api.publish = publish.api(server.eventTransport);\n-\n-  // Start web stack\n-  if (httpServer) {\n-\n-    api.log.info('Starting SocketStream %s in %s mode...'.green, version, env);\n-\n-    // Bind responders to websocket\n-    ws.load(httpServer, server.responders, server.eventTransport, session.options);\n-\n-    // Append SocketStream middleware to stack\n-    http.load(client.options.dirs['static'], client.options.dirs['assets'], server.sessionStore, session.options);\n-\n-    // Load Client Asset Manager\n-    client.load();\n-\n-    // Send server instance to any registered modules (e.g. console)\n-    events.emit('server:start', server);\n-\n-    process.on('exit', function() {\n-      events.emit('server:stop', server);\n-      client.unload();\n-      http.unload();\n-      ws.unload();\n-    });\n-\n-  // If no HTTP server is passed return an API to allow for server-side testing\n-  // Note this feature is currently considered 'experimental' and the implementation will\n-  // be changed in SocketStream 0.4 to ensure any type of Request Responder can be tested\n-  } else {\n-    var sessionID = session.create();\n-\n-    // jshint loopfunc:true\n-    for (var id in server.responders) {\n-      if (server.responders.hasOwnProperty(id)) {\n-        var responder = server.responders[id];\n-\n-        if (responder.name && responder.interfaces.internal) {\n-          var fn = function(){\n-            var args = Array.prototype.slice.call(arguments),\n-                cb = args.pop();\n-\n-            return responder.interfaces.internal(args, {sessionId: sessionID, transport: 'test'}, function(err, params){ cb(params); });\n-          };\n-          api.add(responder.name, fn);\n-        }\n-      }\n-    }\n+function start() {\n+\n+  var plan = tasks.plan(arguments),\n+      server = getServer();",
        "path": "lib/socketstream.js",
        "position": 214,
        "original_position": 214,
        "commit_id": "f6f6e9e5329b079804d99ddd09e9d757f23eaba6",
        "original_commit_id": "f6f6e9e5329b079804d99ddd09e9d757f23eaba6",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'server' is defined but never used.\n",
        "created_at": "2015-08-23T18:43:39Z",
        "updated_at": "2015-08-23T18:43:39Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/569#discussion_r37709222",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/569",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/37709222"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/569#discussion_r37709222"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/569"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/37709223",
        "pull_request_review_id": null,
        "id": 37709223,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA5MjIz",
        "diff_hunk": "@@ -135,6 +177,50 @@ var ws = exports.ws = require('./websocket/index')(api);\n // Only one instance of the server can be started at once\n var serverInstance = null;\n \n+// In the future the server will just be a middleware to use\n+// Ensure server can only be started once\n+exports.start = function() {\n+  return serverInstance || (serverInstance = start.apply(null,arguments));\n+};\n+\n+exports.stream = api.stream = stream;\n+\n+function stream(httpServer) {\n+\n+  var server = getServer();\n+  server.httpServer = httpServer;\n+}\n+\n+var loaded = false;\n+\n+function load() {\n+  if (loaded) return;\n+  loaded = true;\n+\n+  api.log.info('Starting SocketStream %s in %s mode...'.green, version, env);\n+\n+  var server = getServer();\n+\n+  // Bind responders to websocket\n+  ws.load(server.httpServer, server.responders, server.eventTransport, api.session.options);\n+\n+  // Append SocketStream middleware to stack\n+  http.load(client.options.dirs['static'], client.options.dirs['assets'], session.store.get(), session.options);",
        "path": "lib/socketstream.js",
        "position": 130,
        "original_position": 130,
        "commit_id": "f6f6e9e5329b079804d99ddd09e9d757f23eaba6",
        "original_commit_id": "f6f6e9e5329b079804d99ddd09e9d757f23eaba6",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "['assets'] is better written in dot notation.\n",
        "created_at": "2015-08-23T18:43:41Z",
        "updated_at": "2015-08-23T18:43:41Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/569#discussion_r37709223",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/569",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/37709223"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/569#discussion_r37709223"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/569"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/37709224",
        "pull_request_review_id": null,
        "id": 37709224,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA5MjI0",
        "diff_hunk": "@@ -135,6 +177,50 @@ var ws = exports.ws = require('./websocket/index')(api);\n // Only one instance of the server can be started at once\n var serverInstance = null;\n \n+// In the future the server will just be a middleware to use\n+// Ensure server can only be started once\n+exports.start = function() {\n+  return serverInstance || (serverInstance = start.apply(null,arguments));\n+};\n+\n+exports.stream = api.stream = stream;\n+\n+function stream(httpServer) {\n+\n+  var server = getServer();\n+  server.httpServer = httpServer;\n+}\n+\n+var loaded = false;\n+\n+function load() {\n+  if (loaded) return;",
        "path": "lib/socketstream.js",
        "position": 119,
        "original_position": 119,
        "commit_id": "f6f6e9e5329b079804d99ddd09e9d757f23eaba6",
        "original_commit_id": "f6f6e9e5329b079804d99ddd09e9d757f23eaba6",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Expected '{' and instead saw 'return'.\n",
        "created_at": "2015-08-23T18:43:41Z",
        "updated_at": "2015-08-23T18:43:41Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/569#discussion_r37709224",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/569",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/37709224"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/569#discussion_r37709224"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/569"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/37709225",
        "pull_request_review_id": null,
        "id": 37709225,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA5MjI1",
        "diff_hunk": "@@ -156,8 +156,8 @@ exports.generate = function(program) {\n     }\n \n     /* Generate app.js */\n-    appjs = '// My SocketStream 0.4 app\\n\\nvar http = require(\\'http\\'),\\n    ss = require(\\'socketstream\\');\\n\\n'+\n-            '// Define a single-page client called \\'main\\'\\nss.client.define(\\'main\\', {\\n  view: \\'app.' + viewExtension + '\\',\\n  css:  [\\'' + (clientFiles.css.join('\\', \\'')) + '\\'],\\n  code: [\\'' + (clientFiles.code.join('\\', \\'')) + '\\'],\\n  tmpl: \\'*\\'\\n});\\n\\n// Serve this client on the root URL\\nss.http.route(\\'/\\', function(req, res){\\n  res.serveClient(\\'main\\');\\n});\\n';\n+    appjs = '// My SocketStream 0.4 app\\n\\nvar ss = require(\\'socketstream\\');\\n\\n'+\n+            '// Define a single-page client called \\'main\\'\\nss.client.define(\\'main\\', {\\n  view: \\'app.' + viewExtension + '\\',\\n  css:  [\\'' + (clientFiles.css.join('\\', \\'')) + '\\'],\\n  code: [\\'' + (clientFiles.code.join('\\', \\'')) + '\\'],\\n  tmpl: \\'chat\\'\\n});\\n\\n// Serve this client on the root URL\\nss.http.route(\\'/\\', function(req, res){\\n  res.serveClient(\\'main\\');\\n});\\n';",
        "path": "lib/cli/generate.js",
        "position": 7,
        "original_position": 7,
        "commit_id": "f6f6e9e5329b079804d99ddd09e9d757f23eaba6",
        "original_commit_id": "f6f6e9e5329b079804d99ddd09e9d757f23eaba6",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Line is too long.\n",
        "created_at": "2015-08-23T18:43:41Z",
        "updated_at": "2015-08-23T18:43:41Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/569#discussion_r37709225",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/569",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/37709225"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/569#discussion_r37709225"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/569"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/38266401",
        "pull_request_review_id": null,
        "id": 38266401,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY2NDAx",
        "diff_hunk": "@@ -146,9 +146,9 @@ describe('client asset manager', function () {\n         ss.tasks.load(ss.http);\n \n         ss.api.orchestrator.tasks.default.dep.should.eql(['load-socketstream','pack-if-needed','live-reload','serve']);\n-        ss.api.orchestrator.tasks['pack-if-needed'].dep.should.eql(['pack-report','abc:pack']);\n+        ss.api.orchestrator.tasks['pack-if-needed'].dep.should.eql(['pack-prepare','abc:pack']);\n \n-        ss.tasks.start(['pack-if-needed'],function() {\n+        ss.tasks.start(['pack-if-needed'],function(err) { //TODO pack tasks passes error",
        "path": "test/unit/client/index.test.js",
        "position": null,
        "original_position": 8,
        "commit_id": "159e8d5cfbd73dfc7a1f6ee2daf7208d9539a344",
        "original_commit_id": "7c9b788768fd20843e2f936f489c360996e2c8f1",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'err' is defined but never used.\n",
        "created_at": "2015-08-29T21:57:44Z",
        "updated_at": "2015-09-16T22:09:44Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/574#discussion_r38266401",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/574",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/38266401"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/574#discussion_r38266401"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/574"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/38266403",
        "pull_request_review_id": null,
        "id": 38266403,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY2NDAz",
        "diff_hunk": "@@ -102,59 +105,85 @@ module.exports = function(ss, router, options) {\n         ss.orchestrator.add('default',defaultTasks);\n       }\n \n-      this._addTasks();\n-    },\n+      ss.bundler.forEach(function(bundler) {\n+        var name = bundler.client.name;\n+        ss.orchestrator.add(name+':pack-unneeded', function(done) {",
        "path": "lib/tasks/index.js",
        "position": null,
        "original_position": 57,
        "commit_id": "159e8d5cfbd73dfc7a1f6ee2daf7208d9539a344",
        "original_commit_id": "7c9b788768fd20843e2f936f489c360996e2c8f1",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'done' is defined but never used.\n",
        "created_at": "2015-08-29T21:57:45Z",
        "updated_at": "2015-09-16T22:09:44Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/574#discussion_r38266403",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/574",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/38266403"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/574#discussion_r38266403"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/574"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/38266404",
        "pull_request_review_id": null,
        "id": 38266404,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY2NDA0",
        "diff_hunk": "@@ -102,59 +105,85 @@ module.exports = function(ss, router, options) {\n         ss.orchestrator.add('default',defaultTasks);\n       }\n \n-      this._addTasks();\n-    },\n+      ss.bundler.forEach(function(bundler) {\n+        var name = bundler.client.name;\n+        ss.orchestrator.add(name+':pack-unneeded', function(done) {\n+          log.info('\u2713'.green, ('Serving client \\'' + name + '\\' using pre-packed assets (ID ' +\n+              bundler.client.id + ')').grey);\n+        });\n+        ss.orchestrator.add(name+':pack-needed', function(done) {\n+          log.info('!'.red, ('Unable to find pre-packed assets for \\'' +\n+              name + '\\'. All assets will be repacked').grey);\n+          bundler.client.pack = true;\n+          log.info(('Pre-packing and minifying the \\'' + name + '\\' client...').yellow);\n+\n+          //\u00a0Prepare folder\n+          mkdir(bundler.dests.containerDir); //TODO async\n+          mkdir(bundler.dests.dir);\n+          if (!(options.packedAssets && options.packedAssets.keepOldFiles)) {\n+            deleteOldFiles(bundler.dests.dir);\n+          }\n+          done();\n \n-    unload: function() {\n-      liveReload.unload();\n-    },\n+          //TODO add the tasks to an async queue that can be asserted on in tests\n+        });\n \n-    forget: function() {\n-      for(var n in ss.orchestrator.tasks) {\n-        delete ss.orchestrator.tasks[n];\n-      }\n-    },\n-    _addTasks: function() {\n-      ss.bundler.forEach(function(bundler) {\n+        ss.orchestrator.add(bundler.client.name+':pack-css', function(done) {\n+          ss.bundler.packAssetSet('css', bundler.client, bundler.toMinifiedCSS,done);\n+        });\n \n-        // Pack Assets\n-        ss.orchestrator.add(bundler.client.name+':pack',function(done) {\n-          ss.bundler.pack(bundler.client, function(err) {\n-            if (!err) {\n-              console.info('Bundler',bundler.client.name,'packed.');\n-              bundler.packNeeded = false;\n-            }\n-            return done(err);\n-          }); //TODO bundler.pack();\n+        ss.orchestrator.add(bundler.client.name+':pack-js', function(done) {\n+          ss.bundler.packAssetSet('js', bundler.client, bundler.toMinifiedJS,done);\n+        });\n+\n+        ss.orchestrator.add(bundler.client.name+':pack-html', function(done) {\n+          view(ss, bundler.client, options, function(html) {\n+            fs.writeFileSync(bundler.dests.paths.html, html);\n+            ss.log.info('\u2713'.green, 'Created and cached HTML file ' + bundler.dests.relPaths.html);\n+\n+            //TODO perhaps put this in pack-completion target\n+            console.info('Bundler',bundler.client.name,'packed.');\n+            bundler.packNeeded = false;\n+            done();\n+          });\n         });\n+        ss.orchestrator.add(name+':pack', [\n+          name+':pack-needed',\n+          name+':pack-css',\n+          name+':pack-js',\n+          name+':pack-html']);\n       });\n \n       ss.orchestrator.add('pack-all', this._packTasks(true));\n       ss.orchestrator.add('pack-if-needed', this._packTasks());\n-      ss.orchestrator.add('pack-report', function() {\n+      ss.orchestrator.add('pack-prepare', function() {\n         log.info('i'.green, 'Attempting to find pre-packed assets... (force repack with SS_PACK=1)'.grey);\n-        ss.bundler.forEach(function(bundler) {\n-          if (bundler.packNeeded) {\n-            log.info('!'.red, ('Unable to find pre-packed assets for \\'' +\n-            bundler.client.name + '\\'. All assets will be repacked').grey);\n-          } else {\n-            log.info('\u2713'.green, ('Serving client \\'' + bundler.client.name + '\\' using pre-packed assets (ID ' +\n-              bundler.client.servingAssetId + ')').grey);\n-          }\n-        });\n+        ss.load();\n       });\n     },\n \n     _packTasks: function(all) {\n-      var tasks = ['pack-report'];\n+      var tasks = ['pack-prepare'];\n       ss.bundler.forEach(function(bundler){\n         if (all || bundler.packNeeded) {\n           tasks.push(bundler.client.name + ':pack');\n+        } else {\n+          tasks.push(bundler.client.name + ':pack-unneeded');\n         }\n       });\n       return tasks;\n     },\n \n+    unload: function() {\n+      liveReload.unload();\n+    },\n+\n+    forget: function() {\n+      for(var n in ss.orchestrator.tasks) {",
        "path": "lib/tasks/index.js",
        "position": null,
        "original_position": 159,
        "commit_id": "159e8d5cfbd73dfc7a1f6ee2daf7208d9539a344",
        "original_commit_id": "7c9b788768fd20843e2f936f489c360996e2c8f1",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The body of a for in should be wrapped in an if statement to filter unwanted properties from the prototype.\n",
        "created_at": "2015-08-29T21:57:45Z",
        "updated_at": "2015-09-16T22:09:44Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/574#discussion_r38266404",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/574",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/38266404"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/574#discussion_r38266404"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/574"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/38389766",
        "pull_request_review_id": null,
        "id": 38389766,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg5NzY2",
        "diff_hunk": "@@ -0,0 +1,25 @@\n+'use strict';\n+// This file automatically gets called first by SocketStream and must always exist\n+\n+// Make 'ss' available to all modules and the browser console\n+window.ss = require('socketstream');\n+\n+ss.server.on('disconnect', function(){\n+  console.log('Connection down :-(');\n+});\n+\n+ss.server.on('reconnect', function(){\n+  console.log('Connection back up :-)');\n+});\n+\n+ss.server.on('ready', function(){",
        "path": "myapp/client/code/app/entry.js",
        "position": null,
        "original_position": 15,
        "commit_id": "159e8d5cfbd73dfc7a1f6ee2daf7208d9539a344",
        "original_commit_id": "5482b083a9654de6db51abdd42ade29df35940b0",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'ss' is not defined.\n",
        "created_at": "2015-09-01T06:45:20Z",
        "updated_at": "2015-09-16T22:09:44Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/574#discussion_r38389766",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/574",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/38389766"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/574#discussion_r38389766"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/574"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/38389767",
        "pull_request_review_id": null,
        "id": 38389767,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg5NzY3",
        "diff_hunk": "@@ -0,0 +1,25 @@\n+'use strict';\n+// This file automatically gets called first by SocketStream and must always exist\n+\n+// Make 'ss' available to all modules and the browser console\n+window.ss = require('socketstream');\n+\n+ss.server.on('disconnect', function(){\n+  console.log('Connection down :-(');\n+});\n+\n+ss.server.on('reconnect', function(){",
        "path": "myapp/client/code/app/entry.js",
        "position": null,
        "original_position": 11,
        "commit_id": "159e8d5cfbd73dfc7a1f6ee2daf7208d9539a344",
        "original_commit_id": "5482b083a9654de6db51abdd42ade29df35940b0",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'ss' is not defined.\n",
        "created_at": "2015-09-01T06:45:20Z",
        "updated_at": "2015-09-16T22:09:44Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/574#discussion_r38389767",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/574",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/38389767"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/574#discussion_r38389767"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/574"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/38389768",
        "pull_request_review_id": null,
        "id": 38389768,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg5NzY4",
        "diff_hunk": "@@ -0,0 +1,25 @@\n+'use strict';\n+// This file automatically gets called first by SocketStream and must always exist\n+\n+// Make 'ss' available to all modules and the browser console\n+window.ss = require('socketstream');\n+\n+ss.server.on('disconnect', function(){",
        "path": "myapp/client/code/app/entry.js",
        "position": null,
        "original_position": 7,
        "commit_id": "159e8d5cfbd73dfc7a1f6ee2daf7208d9539a344",
        "original_commit_id": "5482b083a9654de6db51abdd42ade29df35940b0",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'ss' is not defined.\n",
        "created_at": "2015-09-01T06:45:20Z",
        "updated_at": "2015-09-16T22:09:44Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/574#discussion_r38389768",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/574",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/38389768"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/574#discussion_r38389768"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/574"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/38389769",
        "pull_request_review_id": null,
        "id": 38389769,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg5NzY5",
        "diff_hunk": "@@ -0,0 +1,58 @@\n+'use strict';\n+/* QUICK CHAT DEMO */\n+\n+// Delete this file once you've seen how the demo works\n+\n+// Listen out for newMessage events coming from the server\n+ss.event.on('newMessage', function(message) {\n+\n+  // Example of using the Hogan Template in client/templates/chat/message.jade to generate HTML for each message\n+  var html = ss.tmpl['chat-message'].render({\n+    message: message,\n+    time: function() { return timestamp(); }\n+  });\n+\n+  // Append it to the #chatlog div and show effect\n+  return $(html).hide().appendTo('#chatlog').slideDown();\n+});\n+\n+// Show the chat form and bind to the submit action\n+$('#demo').on('submit', function() {\n+\n+  // Grab the message from the text box\n+  var text = $('#myMessage').val();\n+\n+  // Call the 'send' funtion (below) to ensure it's valid before sending to the server\n+  return exports.send(text, function(success) {\n+    if (success) {\n+      return $('#myMessage').val('');\n+    } else {\n+      return alert('Oops! Unable to send message');\n+    }\n+  });\n+});\n+\n+// Demonstrates sharing code between modules by exporting function\n+exports.send = function(text, cb) {\n+  if (valid(text)) {\n+    return ss.rpc('demo.sendMessage', text, cb);",
        "path": "myapp/client/code/app/app.js",
        "position": null,
        "original_position": 38,
        "commit_id": "159e8d5cfbd73dfc7a1f6ee2daf7208d9539a344",
        "original_commit_id": "5482b083a9654de6db51abdd42ade29df35940b0",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'ss' is not defined.\n",
        "created_at": "2015-09-01T06:45:21Z",
        "updated_at": "2015-09-16T22:09:44Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/574#discussion_r38389769",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/574",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/38389769"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/574#discussion_r38389769"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/574"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/38389771",
        "pull_request_review_id": null,
        "id": 38389771,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg5Nzcx",
        "diff_hunk": "@@ -0,0 +1,58 @@\n+'use strict';\n+/* QUICK CHAT DEMO */\n+\n+// Delete this file once you've seen how the demo works\n+\n+// Listen out for newMessage events coming from the server\n+ss.event.on('newMessage', function(message) {\n+\n+  // Example of using the Hogan Template in client/templates/chat/message.jade to generate HTML for each message\n+  var html = ss.tmpl['chat-message'].render({",
        "path": "myapp/client/code/app/app.js",
        "position": null,
        "original_position": 10,
        "commit_id": "159e8d5cfbd73dfc7a1f6ee2daf7208d9539a344",
        "original_commit_id": "5482b083a9654de6db51abdd42ade29df35940b0",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'ss' is not defined.\n",
        "created_at": "2015-09-01T06:45:21Z",
        "updated_at": "2015-09-16T22:09:44Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/574#discussion_r38389771",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/574",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/38389771"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/574#discussion_r38389771"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/574"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/38389772",
        "pull_request_review_id": null,
        "id": 38389772,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg5Nzcy",
        "diff_hunk": "@@ -0,0 +1,58 @@\n+'use strict';\n+/* QUICK CHAT DEMO */\n+\n+// Delete this file once you've seen how the demo works\n+\n+// Listen out for newMessage events coming from the server\n+ss.event.on('newMessage', function(message) {",
        "path": "myapp/client/code/app/app.js",
        "position": null,
        "original_position": 7,
        "commit_id": "159e8d5cfbd73dfc7a1f6ee2daf7208d9539a344",
        "original_commit_id": "5482b083a9654de6db51abdd42ade29df35940b0",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'ss' is not defined.\n",
        "created_at": "2015-09-01T06:45:21Z",
        "updated_at": "2015-09-16T22:09:44Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/574#discussion_r38389772",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/574",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/38389772"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/574#discussion_r38389772"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/574"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/38389773",
        "pull_request_review_id": null,
        "id": 38389773,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg5Nzcz",
        "diff_hunk": "@@ -0,0 +1,26 @@\n+// My SocketStream 0.4 app\n+\n+var http = require('http'),",
        "path": "myapp/app.js",
        "position": null,
        "original_position": 3,
        "commit_id": "159e8d5cfbd73dfc7a1f6ee2daf7208d9539a344",
        "original_commit_id": "5482b083a9654de6db51abdd42ade29df35940b0",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'http' is defined but never used.\n",
        "created_at": "2015-09-01T06:45:21Z",
        "updated_at": "2015-09-16T22:09:44Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/574#discussion_r38389773",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/574",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/38389773"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/574#discussion_r38389773"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/574"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/38389774",
        "pull_request_review_id": null,
        "id": 38389774,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg5Nzc0",
        "diff_hunk": "@@ -0,0 +1,26 @@\n+// My SocketStream 0.4 app\n+\n+var http = require('http'),\n+    ss = require('socketstream');\n+\n+// Define a single-page client called 'main'\n+ss.client.define('main', {\n+  view: 'app.html',\n+  css:  ['libs/reset.css', 'app.css'],\n+  code: ['libs/jquery.min.js', 'app'],\n+  tmpl: '*'\n+});\n+\n+// Serve this client on the root URL\n+ss.http.route('/', function(req, res){\n+  res.serveClient('main');\n+});\n+\n+// Use server-side compiled Hogan (Mustache) templates. Others engines available\n+ss.client.templateEngine.use(require('ss-hogan'));\n+\n+// Minimize and pack assets if you type: SS_ENV=production node app.js\n+if (ss.env === 'production') ss.client.packAssets();",
        "path": "myapp/app.js",
        "position": null,
        "original_position": 23,
        "commit_id": "159e8d5cfbd73dfc7a1f6ee2daf7208d9539a344",
        "original_commit_id": "5482b083a9654de6db51abdd42ade29df35940b0",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Expected '{' and instead saw 'ss'.\n",
        "created_at": "2015-09-01T06:45:22Z",
        "updated_at": "2015-09-16T22:09:44Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/574#discussion_r38389774",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/574",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/38389774"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/574#discussion_r38389774"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/574"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/38389775",
        "pull_request_review_id": null,
        "id": 38389775,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg5Nzc1",
        "diff_hunk": "@@ -1,12 +1,11 @@\n 'use strict';\n \n-// logging\n-var http = require('http'),\n+var fs = require('fs'),\n+    path = require('path'),",
        "path": "lib/tasks/index.js",
        "position": null,
        "original_position": 6,
        "commit_id": "159e8d5cfbd73dfc7a1f6ee2daf7208d9539a344",
        "original_commit_id": "5482b083a9654de6db51abdd42ade29df35940b0",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'path' is defined but never used.\n",
        "created_at": "2015-09-01T06:45:22Z",
        "updated_at": "2015-09-16T22:09:44Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/574#discussion_r38389775",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/574",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/38389775"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/574#discussion_r38389775"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/574"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/38389777",
        "pull_request_review_id": null,
        "id": 38389777,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg5Nzc3",
        "diff_hunk": "@@ -1,12 +1,11 @@\n 'use strict';\n \n-// logging\n-var http = require('http'),\n+var fs = require('fs'),",
        "path": "lib/tasks/index.js",
        "position": null,
        "original_position": 5,
        "commit_id": "159e8d5cfbd73dfc7a1f6ee2daf7208d9539a344",
        "original_commit_id": "5482b083a9654de6db51abdd42ade29df35940b0",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'fs' is defined but never used.\n",
        "created_at": "2015-09-01T06:45:22Z",
        "updated_at": "2015-09-16T22:09:44Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/574#discussion_r38389777",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/574",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/38389777"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/574#discussion_r38389777"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/574"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/38389779",
        "pull_request_review_id": null,
        "id": 38389779,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg5Nzc5",
        "diff_hunk": "@@ -0,0 +1,149 @@\n+'use strict';\n+\n+var http = require('http'),\n+    fs = require('fs'),\n+    log = require('../utils/log'),\n+    view = require('../client/view'),\n+    ondemandRoutes = require('../client/serve/ondemand'),\n+    devRoutes = require('../client/serve/dev'),\n+    liveReload = require('./live_reload');\n+\n+module.exports = function(ss, router, options, orchestrator) {\n+\n+  return function() {\n+\n+    ss.defaultTask('start-server',function(done) {\n+      var server = http.Server(ss.http.middleware);\n+      server.listen(3000, function() {\n+        ss.stream(server);\n+        done();\n+      });\n+    });\n+\n+    ss.defaultTask('load-api', function() {\n+      ss.load();\n+    });\n+\n+    // if the server was passed in ss.start(httpServer) one shouldn't be started\n+    ss.defaultTask('load-socketstream', (ss.server.httpServer == null)? ['start-server','load-api']:['load-api']);\n+\n+    // task: ondemand\n+    // Listen out for requests to async load new assets\n+    ss.defaultTask('serve', function serveOndemand(done) {\n+      ondemandRoutes(ss, router, options);\n+\n+      // Send server instance to any registered modules (e.g. console)\n+      ss.events.emit('server:start', ss.server);\n+\n+      process.on('exit', function() {\n+        if (done) {\n+          done();\n+        }\n+        ss.events.emit('server:stop', ss.server);\n+        orchestrator.start('stop-server',function() {\n+          ss.server = null;\n+        });\n+      });\n+    });\n+\n+    ss.defaultTask('live-assets', function() {\n+      devRoutes(ss, router, options);\n+    });\n+\n+    ss.defaultTask('live-reload', function() {\n+      liveReload(ss, options);\n+    });\n+\n+    ss.defaultTask('stop-server', function() {\n+      if (ss.server.httServer) {\n+        ss.server.httServer.close();\n+      }\n+    });\n+\n+    var defaultDeps = [];\n+\n+    defaultDeps.push('load-socketstream');\n+    if (options.packedAssets) {\n+      defaultDeps.push(options.packedAssets.all? 'pack-all':'pack-if-needed');\n+    } else {\n+      defaultDeps.push('live-assets');\n+    }\n+    if (options.liveReload) {\n+      defaultDeps.push('live-reload');\n+    }\n+    // if (httpServer)\n+    defaultDeps.push('serve');\n+\n+    ss.defaultTask('default',defaultDeps);\n+\n+    ss.bundler.forEach(function(bundler) {\n+      var name = bundler.client.name;\n+      ss.defaultTask(name+':pack-unneeded', function(done) {",
        "path": "lib/tasks/defaults.js",
        "position": null,
        "original_position": 81,
        "commit_id": "159e8d5cfbd73dfc7a1f6ee2daf7208d9539a344",
        "original_commit_id": "5482b083a9654de6db51abdd42ade29df35940b0",
        "user": {
            "login": "houndci-bot",
            "id": 6697940,
            "node_id": "MDQ6VXNlcjY2OTc5NDA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6697940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/houndci-bot",
            "html_url": "https://github.com/houndci-bot",
            "followers_url": "https://api.github.com/users/houndci-bot/followers",
            "following_url": "https://api.github.com/users/houndci-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/houndci-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/houndci-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/houndci-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/houndci-bot/orgs",
            "repos_url": "https://api.github.com/users/houndci-bot/repos",
            "events_url": "https://api.github.com/users/houndci-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/houndci-bot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "'done' is defined but never used.\n",
        "created_at": "2015-09-01T06:45:23Z",
        "updated_at": "2015-09-16T22:09:44Z",
        "html_url": "https://github.com/socketstream/socketstream/pull/574#discussion_r38389779",
        "pull_request_url": "https://api.github.com/repos/socketstream/socketstream/pulls/574",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/comments/38389779"
            },
            "html": {
                "href": "https://github.com/socketstream/socketstream/pull/574#discussion_r38389779"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/socketstream/socketstream/pulls/574"
            }
        }
    }
]