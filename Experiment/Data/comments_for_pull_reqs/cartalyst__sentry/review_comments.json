[
    {
        "url": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/2614732",
        "pull_request_review_id": null,
        "id": 2614732,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2MTQ3MzI=",
        "diff_hunk": "@@ -0,0 +1,199 @@\n+<?php namespace Cartalyst\\Sentry\\Cookies;\n+/**\n+ * Part of the Sentry Package.\n+ *\n+ * NOTICE OF LICENSE\n+ *\n+ * Licensed under the 3-clause BSD License.\n+ *\n+ * This source file is subject to the 3-clause BSD License that is\n+ * bundled with this package in the LICENSE file.  It is also available at\n+ * the following URL: http://www.opensource.org/licenses/BSD-3-Clause\n+ *\n+ * @package    Sentry\n+ * @version    2.0\n+ * @author     Cartalyst LLC\n+ * @license    BSD License (3-clause)\n+ * @copyright  (c) 2011 - 2013, Cartalyst LLC\n+ * @link       http://cartalyst.com\n+ */\n+\n+class SentryCookieException extends \\Exception {};\n+\n+class SentryCookie implements CookieInterface {\n+\n+    /**\n+     * The key used in the Cookie.\n+     *\n+     * @var string\n+     */\n+    protected $key = null;\n+\n+    /**\n+     * The value of the actual Cookie.\n+     *\n+     * @var string\n+     */\n+    protected $value = null;\n+\n+    /**\n+     * The lifetime of the actual Cookie.\n+     *\n+     * @var int\n+     */\n+    protected $lifetime = null;\n+\n+    /**\n+     * Default settings\n+     *\n+     * @var array\n+     */\n+    protected $defaults = array();\n+\n+    /**\n+     * Creates a new cookie instance.\n+     *\n+     * @param  Illuminate\\CookieJar  $jar\n+     * @return void\n+     */\n+    public function __construct($config = array())\n+    {\n+\n+        // Defining default settings\n+        $sentryDefaults = array(\n+            'name'      => 'cartalyst_sentry',\n+            'time'      => time() + 300,\n+            'domain'    => '',\n+            'path'      => '/',\n+            'secure'    => false,\n+            'httpOnly'  => false,\n+        );\n+\n+        // Merging settings\n+        $this->defaults = array_merge($sentryDefaults, $config);\n+    }\n+\n+    /**\n+     * Returns the cookie key.\n+     *\n+     * @return string\n+     */\n+    public function getKey()\n+    {\n+        if (!is_null($this->key)) {\n+            return $this->key;\n+        } else {\n+            throw new SentryCookieException(\"Can't get key of current cookie since it hasn't been set yet!\");\n+        }\n+    }\n+\n+    /**\n+     * Create a cookie.\n+     *\n+     * @param  string  $key\n+     * @param  mixed   $value\n+     * @param  int     $minutes\n+     * @return void\n+     */\n+    public function put($key, $value, $minutes)\n+    {\n+        $lifetime = time() + $minutes;\n+\n+        setcookie(\n+            $key,\n+            $value,\n+            $lifetime,\n+            $this->defaults['path'],\n+            $this->defaults['domain'],\n+            $this->defaults['secure'],\n+            $this->defaults['httpOnly']\n+        );\n+\n+        $this->key = $key;\n+        $this->value = $value;\n+        $this->lifetime = $lifetime;\n+    }\n+\n+    /**\n+     * Create a cookie which lasts \"forever\".\n+     *\n+     * @param  string  $key\n+     * @param  mixed   $value\n+     * @return void\n+     */\n+    public function forever($key, $value)\n+    {\n+        $this->put($key, $value, time() + 60*60*24*31*12*5);\n+    }\n+\n+    /**\n+     * Get the requested cookie's value.\n+     *\n+     * @param  string  $key\n+     * @param  mixed   $default\n+     * @return mixed\n+     */\n+    public function get($key, $default = null)\n+    {\n+        if (isset($_COOKIE[$key])) {\n+            return $_COOKIE[$key];\n+        } elseif(!is_null($default)) {\n+            return $default;\n+        } else {\n+            throw new SentryCookieException(\"Requested cookie doesn't exist!\");\n+        }\n+    }\n+\n+    /**\n+     * Remove the cookie.\n+     *\n+     * @param  string  $key\n+     * @return void\n+     */\n+    public function forget($key)\n+    {\n+        $this->put($key, null, time() - 65535);\n+    }\n+\n+    /**\n+     * Alias for forget().\n+     *\n+     * @return void\n+     */\n+    public function flush()\n+    {\n+        $this->forget($this->key);\n+    }\n+\n+    /**\n+     * Get the cookies queued by the driver (not here).\n+     *\n+     * @return array\n+     */\n+    public function getQueuedCookies()\n+    {\n+        // validate this please!\n+        throw new SentryCookieException(\"Called function on native Cookie Driver!\");",
        "path": "src/Cartalyst/Sentry/Cookies/SentryCookie.php",
        "position": null,
        "original_position": 176,
        "commit_id": "4ae94d6445c4379cb433fa8a8bbe0c232617e11e",
        "original_commit_id": "35f3fdeaf40efef5f2f17e1d20a0f4cb7bde39c4",
        "user": {
            "login": "bencorlett",
            "id": 181919,
            "node_id": "MDQ6VXNlcjE4MTkxOQ==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/181919?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bencorlett",
            "html_url": "https://github.com/bencorlett",
            "followers_url": "https://api.github.com/users/bencorlett/followers",
            "following_url": "https://api.github.com/users/bencorlett/following{/other_user}",
            "gists_url": "https://api.github.com/users/bencorlett/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bencorlett/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bencorlett/subscriptions",
            "organizations_url": "https://api.github.com/users/bencorlett/orgs",
            "repos_url": "https://api.github.com/users/bencorlett/repos",
            "events_url": "https://api.github.com/users/bencorlett/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bencorlett/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'd return an empty array() here. I need to revisit the interface but for now can you do that? thanks :)\n",
        "created_at": "2013-01-11T04:55:51Z",
        "updated_at": "2013-01-11T05:09:03Z",
        "html_url": "https://github.com/cartalyst/sentry/pull/61#discussion_r2614732",
        "pull_request_url": "https://api.github.com/repos/cartalyst/sentry/pulls/61",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/2614732"
            },
            "html": {
                "href": "https://github.com/cartalyst/sentry/pull/61#discussion_r2614732"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/61"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/2614736",
        "pull_request_review_id": null,
        "id": 2614736,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2MTQ3MzY=",
        "diff_hunk": "@@ -0,0 +1,102 @@\n+<?php\n+/**\n+ * Part of the Sentry Package.\n+ *\n+ * NOTICE OF LICENSE\n+ *\n+ * Licensed under the 3-clause BSD License.\n+ *\n+ * This source file is subject to the 3-clause BSD License that is\n+ * bundled with this package in the LICENSE file.  It is also available at\n+ * the following URL: http://www.opensource.org/licenses/BSD-3-Clause\n+ *\n+ * @package    Sentry\n+ * @version    2.0\n+ * @author     Cartalyst LLC\n+ * @license    BSD License (3-clause)\n+ * @copyright  (c) 2011 - 2013, Cartalyst LLC\n+ * @link       http://cartalyst.com\n+ */\n+\n+use Cartalyst\\Sentry\\Cookies\\SentryCookie;\n+\n+class SentryCookieTest extends PHPUnit_Framework_TestCase {\n+\n+    protected $cookie;\n+\n+    /**\n+     * Setup test.\n+     *\n+     * @return void\n+     */\n+    public function setUp()\n+    {\n+        $this->cookie = new SentryCookie();",
        "path": "tests/SentryCookieTest.php",
        "position": null,
        "original_position": 34,
        "commit_id": "4ae94d6445c4379cb433fa8a8bbe0c232617e11e",
        "original_commit_id": "35f3fdeaf40efef5f2f17e1d20a0f4cb7bde39c4",
        "user": {
            "login": "bencorlett",
            "id": 181919,
            "node_id": "MDQ6VXNlcjE4MTkxOQ==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/181919?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bencorlett",
            "html_url": "https://github.com/bencorlett",
            "followers_url": "https://api.github.com/users/bencorlett/followers",
            "following_url": "https://api.github.com/users/bencorlett/following{/other_user}",
            "gists_url": "https://api.github.com/users/bencorlett/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bencorlett/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bencorlett/subscriptions",
            "organizations_url": "https://api.github.com/users/bencorlett/orgs",
            "repos_url": "https://api.github.com/users/bencorlett/repos",
            "events_url": "https://api.github.com/users/bencorlett/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bencorlett/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Just as a real anal thing, we don't need to put the `()` at the end, `new SentryCookie;` will suffice and is more in-line with what we've been doing :)\n",
        "created_at": "2013-01-11T04:58:32Z",
        "updated_at": "2013-01-11T05:09:04Z",
        "html_url": "https://github.com/cartalyst/sentry/pull/61#discussion_r2614736",
        "pull_request_url": "https://api.github.com/repos/cartalyst/sentry/pulls/61",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/2614736"
            },
            "html": {
                "href": "https://github.com/cartalyst/sentry/pull/61#discussion_r2614736"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/61"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/3240092",
        "pull_request_review_id": null,
        "id": 3240092,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNDAwOTI=",
        "diff_hunk": "@@ -151,6 +151,58 @@ public function findByCredentials(array $credentials)\n \t}\n \n \t/**\n+\t * Finds a user by the user activation code.\n+\t *\n+\t * @param  string  $code\n+\t * @return Cartalyst\\Sentry\\Users\\UserInterface\n+\t * @throws Cartalyst\\Sentry\\Users\\UserNotFoundException\n+\t */\n+\tpublic function findByActivationCode($code)\n+\t{\n+\t\t$model = $this->createModel();\n+\n+\t\t$result = $model->newQuery()->where('activation_code', '=', $code)->get();\n+\n+\t\tif (($count = $result->count()) > 1)\n+\t\t{\n+\t\t\tthrow new \\RuntimeException('Found ['.$count.'] users with the same activation code.');",
        "path": "src/Cartalyst/Sentry/Users/Eloquent/Provider.php",
        "position": null,
        "original_position": 18,
        "commit_id": "66f58f8c912d39b6beb219c4be08549073b2016e",
        "original_commit_id": "7fe3e436b8aec1a1081ee4bd4c60cc612854c1aa",
        "user": {
            "login": "bencorlett",
            "id": 181919,
            "node_id": "MDQ6VXNlcjE4MTkxOQ==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/181919?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bencorlett",
            "html_url": "https://github.com/bencorlett",
            "followers_url": "https://api.github.com/users/bencorlett/followers",
            "following_url": "https://api.github.com/users/bencorlett/following{/other_user}",
            "gists_url": "https://api.github.com/users/bencorlett/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bencorlett/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bencorlett/subscriptions",
            "organizations_url": "https://api.github.com/users/bencorlett/orgs",
            "repos_url": "https://api.github.com/users/bencorlett/repos",
            "events_url": "https://api.github.com/users/bencorlett/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bencorlett/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Hey Bruno please use double quotes and just put the variable in the string, like everywhere else in Sentry / Laravel :)\n",
        "created_at": "2013-03-05T09:25:00Z",
        "updated_at": "2013-03-05T18:03:29Z",
        "html_url": "https://github.com/cartalyst/sentry/pull/126#discussion_r3240092",
        "pull_request_url": "https://api.github.com/repos/cartalyst/sentry/pulls/126",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/3240092"
            },
            "html": {
                "href": "https://github.com/cartalyst/sentry/pull/126#discussion_r3240092"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/126"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/3937693",
        "pull_request_review_id": null,
        "id": 3937693,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc2OTM=",
        "diff_hunk": "@@ -25,6 +25,10 @@ If the provided user was not found, this exception will be thrown.\n \n When the provided user is not activated, this exception will be thrown.\n \n+##### Cartalyst\\Sentry\\Users\\WrongPasswordException\n+\n+When the provided passoword is wrong, this exception will be thrown.",
        "path": "docs/authentication/index.md",
        "position": 6,
        "original_position": 6,
        "commit_id": "2725e2c368451b437d51e7f9fff2f0696cc57852",
        "original_commit_id": "2725e2c368451b437d51e7f9fff2f0696cc57852",
        "user": {
            "login": "brunogaspar",
            "id": 2285372,
            "node_id": "MDQ6VXNlcjIyODUzNzI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/2285372?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brunogaspar",
            "html_url": "https://github.com/brunogaspar",
            "followers_url": "https://api.github.com/users/brunogaspar/followers",
            "following_url": "https://api.github.com/users/brunogaspar/following{/other_user}",
            "gists_url": "https://api.github.com/users/brunogaspar/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brunogaspar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brunogaspar/subscriptions",
            "organizations_url": "https://api.github.com/users/brunogaspar/orgs",
            "repos_url": "https://api.github.com/users/brunogaspar/repos",
            "events_url": "https://api.github.com/users/brunogaspar/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brunogaspar/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Typo on \"passoword\" fix this and i'll merge it!\n\nThanks =)\n",
        "created_at": "2013-04-24T14:30:43Z",
        "updated_at": "2013-04-24T14:30:43Z",
        "html_url": "https://github.com/cartalyst/sentry/pull/181#discussion_r3937693",
        "pull_request_url": "https://api.github.com/repos/cartalyst/sentry/pulls/181",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/3937693"
            },
            "html": {
                "href": "https://github.com/cartalyst/sentry/pull/181#discussion_r3937693"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/181"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/4581333",
        "pull_request_review_id": null,
        "id": 4581333,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEzMzM=",
        "diff_hunk": "@@ -190,7 +190,9 @@ protected function registerSession()\n \t{\n \t\t$this->app['sentry.session'] = $this->app->share(function($app)\n \t\t{\n-\t\t\treturn new IlluminateSession($app['session']);\n+\t\t\t$cookie_key = $app['config']['cartalyst/sentry::cookie.key'];",
        "path": "src/Cartalyst/Sentry/SentryServiceProvider.php",
        "position": null,
        "original_position": 5,
        "commit_id": "41a43f98c02de9d91af1334f3745e680f5246ccc",
        "original_commit_id": "074f5065a13efc3da25c87a9bfa6c1c67365643c",
        "user": {
            "login": "bencorlett",
            "id": 181919,
            "node_id": "MDQ6VXNlcjE4MTkxOQ==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/181919?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bencorlett",
            "html_url": "https://github.com/bencorlett",
            "followers_url": "https://api.github.com/users/bencorlett/followers",
            "following_url": "https://api.github.com/users/bencorlett/following{/other_user}",
            "gists_url": "https://api.github.com/users/bencorlett/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bencorlett/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bencorlett/subscriptions",
            "organizations_url": "https://api.github.com/users/bencorlett/orgs",
            "repos_url": "https://api.github.com/users/bencorlett/repos",
            "events_url": "https://api.github.com/users/bencorlett/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bencorlett/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Hi, this is great. Can you please change `$cookie_Key` to `$key` please or `$cookieKey` just to be consistent. I should be able to merge it in then :)\n",
        "created_at": "2013-06-07T00:51:36Z",
        "updated_at": "2013-06-07T01:03:01Z",
        "html_url": "https://github.com/cartalyst/sentry/pull/209#discussion_r4581333",
        "pull_request_url": "https://api.github.com/repos/cartalyst/sentry/pulls/209",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/4581333"
            },
            "html": {
                "href": "https://github.com/cartalyst/sentry/pull/209#discussion_r4581333"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/209"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/4581338",
        "pull_request_review_id": null,
        "id": 4581338,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEzMzg=",
        "diff_hunk": "@@ -47,6 +47,32 @@\n \t*/\n \n \t'hasher' => 'native',\n+  \n+\t/*\n+\t|--------------------------------------------------------------------------\n+\t| Cookie\n+\t|--------------------------------------------------------------------------\n+\t|\n+\t| Configuration specific to the cookie component of Sentry.\n+\t|\n+\t*/\n+\n+\t'cookie' => array(\n+    \n+\t\t/*\n+\t\t|--------------------------------------------------------------------------\n+\t\t| Default Cookie Key\n+\t\t|--------------------------------------------------------------------------\n+\t\t|\n+\t\t| This option allows you to specify the default cookie key used by Sentry",
        "path": "src/config/config.php",
        "position": null,
        "original_position": 21,
        "commit_id": "41a43f98c02de9d91af1334f3745e680f5246ccc",
        "original_commit_id": "074f5065a13efc3da25c87a9bfa6c1c67365643c",
        "user": {
            "login": "bencorlett",
            "id": 181919,
            "node_id": "MDQ6VXNlcjE4MTkxOQ==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/181919?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bencorlett",
            "html_url": "https://github.com/bencorlett",
            "followers_url": "https://api.github.com/users/bencorlett/followers",
            "following_url": "https://api.github.com/users/bencorlett/following{/other_user}",
            "gists_url": "https://api.github.com/users/bencorlett/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bencorlett/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bencorlett/subscriptions",
            "organizations_url": "https://api.github.com/users/bencorlett/orgs",
            "repos_url": "https://api.github.com/users/bencorlett/repos",
            "events_url": "https://api.github.com/users/bencorlett/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bencorlett/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "And put a full-stop (period) after here.\n\n```\nThis option allows you to specify the default cookie key used by Sentry\n```\n",
        "created_at": "2013-06-07T00:52:43Z",
        "updated_at": "2013-06-07T01:03:01Z",
        "html_url": "https://github.com/cartalyst/sentry/pull/209#discussion_r4581338",
        "pull_request_url": "https://api.github.com/repos/cartalyst/sentry/pulls/209",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/4581338"
            },
            "html": {
                "href": "https://github.com/cartalyst/sentry/pull/209#discussion_r4581338"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/209"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/5614779",
        "pull_request_review_id": null,
        "id": 5614779,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTQ3Nzk=",
        "diff_hunk": "@@ -0,0 +1,892 @@\n+<?php namespace Cartalyst\\Sentry\\Users\\Kohana;\n+/**\n+ * Part of the Sentry package.\n+ *\n+ * NOTICE OF LICENSE\n+ *\n+ * Licensed under the 3-clause BSD License.\n+ *\n+ * This source file is subject to the 3-clause BSD License that is\n+ * bundled with this package in the LICENSE file.  It is also available at\n+ * the following URL: http://www.opensource.org/licenses/BSD-3-Clause\n+ *\n+ * @package    Sentry\n+ * @version    2.0.0\n+ * @author     Cartalyst LLC\n+ * @license    BSD License (3-clause)\n+ * @copyright  (c) 2011 - 2013, Cartalyst LLC\n+ * @link       http://cartalyst.com\n+ */\n+\n+use Cartalyst\\Sentry\\Groups\\GroupInterface;\n+use Cartalyst\\Sentry\\Hashing\\HasherInterface;\n+use Cartalyst\\Sentry\\Users\\LoginRequiredException;\n+use Cartalyst\\Sentry\\Users\\PasswordRequiredException;\n+use Cartalyst\\Sentry\\Users\\UserAlreadyActivatedException;\n+use Cartalyst\\Sentry\\Users\\UserExistsException;\n+use Cartalyst\\Sentry\\Users\\UserInterface;\n+use DateTime;\n+\n+class User extends \\ORM implements UserInterface {\n+\n+\t/**\n+\t * The table associated with the model.\n+\t *\n+\t * @var string\n+\t */\n+\tprotected $_table_name = 'users';\n+\tprotected $_object_name = 'user';\n+\tprotected $_object_plural = 'users';\n+\tprotected $_errors_filename = 'user';\n+\n+\t/**\n+\t * auto-set the updated_at column\n+\t * @var array\n+\t */\n+\tprotected $_updated_column = array('column' => 'updated_at', 'format' => 'Y-m-d H:i:s');\n+\n+\t/**\n+\t * Auto-set the created_at column\n+\t * @var array\n+\t */\n+\tprotected $_created_column = array('column' => 'created_at', 'format' => 'Y-m-d H:i:s');\n+\n+\t/**\n+\t * Define the has many relations\n+\t * @var array\n+\t */\n+\tprotected $_has_many = array(\n+\t\t'groups'    => array('model' => 'Group', 'through' => 'users_groups')\n+\t);\n+\n+\tprotected $_has_one = array(\n+\t\t'throttle' => array('model' => 'Throttle')\n+\t);\n+\n+\tpublic function rules() {\n+\t\treturn array(\n+\t\t\t'email' => array(\n+\t\t\t\tarray('not_empty'),\n+\t\t\t\tarray('email'),\n+\t\t\t\tarray(array($this, 'unique_key_exists'), array(':value', 'email'))\n+\t\t\t),\n+\t\t\t'password' => array(\n+\t\t\t\tarray('not_empty')\n+\t\t\t)\n+\t\t);\n+\t}\n+\t/**\n+\t * Attributes that should be hashed.\n+\t *\n+\t * @var array\n+\t */\n+\tprotected $hashableAttributes = array(\n+\t\t'password',\n+\t\t'persist_code',\n+\t);\n+\n+\t/**\n+\t * Allowed permissions values.\n+\t *\n+\t * Possible options:\n+\t *   -1 => Deny (adds to array, but denies regardless of user's group).\n+\t *    0 => Remove.\n+\t *    1 => Add.\n+\t *\n+\t * @var array\n+\t */\n+\tprotected $allowedPermissionsValues = array(-1, 0, 1);\n+\n+\t/**\n+\t * The login attribute.\n+\t *\n+\t * @var string\n+\t */\n+\tprotected static $loginAttribute = 'email';\n+\n+\t/**\n+\t * The hasher the model uses.\n+\t *\n+\t * @var Cartalyst\\Sentry\\Hashing\\HasherInterface\n+\t */\n+\tprotected static $hasher;\n+\n+\t/**\n+\t * The user groups.\n+\t *\n+\t * @var array\n+\t */\n+\tprotected $userGroups;\n+\n+\t/**\n+\t * The user merged permissions.\n+\t *\n+\t * @var array\n+\t */\n+\tprotected $mergedPermissions;\n+\n+\t/**\n+\t * Returns the user's ID.\n+\t *\n+\t * @return  mixed\n+\t */\n+\tpublic function getId()\n+\t{\n+\t\treturn $this->pk();\n+\t}\n+\n+\t/**\n+\t * Returns the name for the user's login.\n+\t *\n+\t * @return string\n+\t */\n+\tpublic function getLoginName()\n+\t{\n+\t\treturn static::$loginAttribute;\n+\t}\n+\n+\t/**\n+\t * Returns the user's login.\n+\t *\n+\t * @return mixed\n+\t */\n+\tpublic function getLogin()\n+\t{\n+\t\treturn $this->{$this->getLoginName()};\n+\t}\n+\n+\t/**\n+\t * Returns the name for the user's password.\n+\t *\n+\t * @return string\n+\t */\n+\tpublic function getPasswordName()\n+\t{\n+\t\treturn 'password';\n+\t}\n+\n+\t/**\n+\t * Returns the user's password (hashed).\n+\t *\n+\t * @return string\n+\t */\n+\tpublic function getPassword()\n+\t{\n+\t\treturn $this->password;\n+\t}\n+\n+\t/**\n+\t * Returns permissions for the user.\n+\t *\n+\t * @return array\n+\t */\n+\tpublic function getPermissions()\n+\t{\n+\t\treturn $this->permissions;\n+\t}\n+\n+\t/**\n+\t * Check if the user is activated.\n+\t *\n+\t * @return bool\n+\t */\n+\tpublic function isActivated()\n+\t{\n+\t\treturn (bool) $this->activated;\n+\t}\n+\n+\t/**\n+\t * Get mutator for giving the activated property.\n+\t *\n+\t * @param  mixed  $activated\n+\t * @return bool\n+\t */\n+\tpublic function getActivatedAttribute($activated)\n+\t{\n+\t\treturn (bool) $activated;\n+\t}\n+\n+\t/**\n+\t * Mutator for giving permissions.\n+\t *\n+\t * @param  mixed  $permissions\n+\t * @return array  $_permissions\n+\t */\n+\tpublic function getPermissionsAttribute($permissions)\n+\t{\n+\t\tif ( ! $permissions)\n+\t\t{\n+\t\t\treturn array();\n+\t\t}\n+\n+\t\tif (is_array($permissions))\n+\t\t{\n+\t\t\treturn $permissions;\n+\t\t}\n+\n+\t\tif ( ! $_permissions = json_decode($permissions, true))\n+\t\t{\n+\t\t\tthrow new \\InvalidArgumentException(\"Cannot JSON decode permissions [$permissions].\");\n+\t\t}\n+\n+\t\treturn $_permissions;\n+\t}\n+\n+\t/**\n+\t * Mutator for taking permissions.\n+\t *\n+\t * @param  array  $permissions\n+\t * @return string\n+\t */\n+\tpublic function setPermissionsAttribute(array $permissions)\n+\t{\n+\t\t// Merge permissions\n+\t\t$permissions = array_merge($this->getPermissions(), $permissions);\n+\n+\t\t// Loop through and adjust permissions as needed\n+\t\tforeach ($permissions as $permission => &$value)\n+\t\t{\n+\t\t\t// Lets make sure there is a valid permission value\n+\t\t\tif ( ! in_array($value = (int) $value, $this->allowedPermissionsValues))\n+\t\t\t{\n+\t\t\t\tthrow new \\InvalidArgumentException(\"Invalid value [$value] for permission [$permission] given.\");\n+\t\t\t}\n+\n+\t\t\t// If the value is 0, delete it\n+\t\t\tif ($value === 0)\n+\t\t\t{\n+\t\t\t\tunset($permissions[$permission]);\n+\t\t\t}\n+\t\t}\n+\n+\t\t$this->attributes['permissions'] = ( ! empty($permissions)) ? json_encode($permissions) : '';\n+\t}\n+\n+\t/**\n+\t * Checks if the user is a super user - has\n+\t * access to everything regardless of permissions.\n+\t *\n+\t * @return bool\n+\t */\n+\tpublic function isSuperUser()\n+\t{\n+\t\treturn $this->hasPermission('superuser');\n+\t}\n+\n+\t/**\n+\t * Validates the user and throws a number of\n+\t * Exceptions if validation fails.\n+\t *\n+\t * @return bool\n+\t * @throws ORM_Validation_Exception\n+\t */\n+\tpublic function validate()\n+\t{\n+\t\treturn $this->check();\n+\t}\n+\n+\t/**\n+\t * Saves the user.\n+\t *\n+\t * @param  array  $options\n+\t * @return bool\n+\t */\n+\tpublic function save(Validation $validation = NULL)\n+\t{\n+\t\t$this->validate();\n+\n+\t\treturn parent::save($validation);\n+\t}\n+\n+\tpublic function set($column, $value) {\n+\t\t$dates = array('activated_at', 'last_login');\n+\n+\t\tif(in_array($column, $dates) && $value != null)\n+\t\t\t$value = $value->format('Y-m-d H:i:s');",
        "path": "src/Cartalyst/Sentry/Users/Kohana/User.php",
        "position": null,
        "original_position": 305,
        "commit_id": "c9a59cc352f353dd904d4adf0d0af3e2caddd2c6",
        "original_commit_id": "ac76b77cb4af368f86eceeb6bc3c95f97c3468ea",
        "user": {
            "login": "bencorlett",
            "id": 181919,
            "node_id": "MDQ6VXNlcjE4MTkxOQ==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/181919?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bencorlett",
            "html_url": "https://github.com/bencorlett",
            "followers_url": "https://api.github.com/users/bencorlett/followers",
            "following_url": "https://api.github.com/users/bencorlett/following{/other_user}",
            "gists_url": "https://api.github.com/users/bencorlett/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bencorlett/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bencorlett/subscriptions",
            "organizations_url": "https://api.github.com/users/bencorlett/orgs",
            "repos_url": "https://api.github.com/users/bencorlett/repos",
            "events_url": "https://api.github.com/users/bencorlett/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bencorlett/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Can you please use brackets here and anywhere else this appears \n",
        "created_at": "2013-08-06T20:02:53Z",
        "updated_at": "2013-08-09T19:34:25Z",
        "html_url": "https://github.com/cartalyst/sentry/pull/253#discussion_r5614779",
        "pull_request_url": "https://api.github.com/repos/cartalyst/sentry/pulls/253",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/5614779"
            },
            "html": {
                "href": "https://github.com/cartalyst/sentry/pull/253#discussion_r5614779"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/253"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/5614803",
        "pull_request_review_id": null,
        "id": 5614803,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTQ4MDM=",
        "diff_hunk": "@@ -0,0 +1,892 @@\n+<?php namespace Cartalyst\\Sentry\\Users\\Kohana;\n+/**\n+ * Part of the Sentry package.\n+ *\n+ * NOTICE OF LICENSE\n+ *\n+ * Licensed under the 3-clause BSD License.\n+ *\n+ * This source file is subject to the 3-clause BSD License that is\n+ * bundled with this package in the LICENSE file.  It is also available at\n+ * the following URL: http://www.opensource.org/licenses/BSD-3-Clause\n+ *\n+ * @package    Sentry\n+ * @version    2.0.0\n+ * @author     Cartalyst LLC\n+ * @license    BSD License (3-clause)\n+ * @copyright  (c) 2011 - 2013, Cartalyst LLC\n+ * @link       http://cartalyst.com\n+ */\n+\n+use Cartalyst\\Sentry\\Groups\\GroupInterface;\n+use Cartalyst\\Sentry\\Hashing\\HasherInterface;\n+use Cartalyst\\Sentry\\Users\\LoginRequiredException;\n+use Cartalyst\\Sentry\\Users\\PasswordRequiredException;\n+use Cartalyst\\Sentry\\Users\\UserAlreadyActivatedException;\n+use Cartalyst\\Sentry\\Users\\UserExistsException;\n+use Cartalyst\\Sentry\\Users\\UserInterface;\n+use DateTime;\n+\n+class User extends \\ORM implements UserInterface {\n+\n+\t/**\n+\t * The table associated with the model.\n+\t *\n+\t * @var string\n+\t */\n+\tprotected $_table_name = 'users';\n+\tprotected $_object_name = 'user';\n+\tprotected $_object_plural = 'users';\n+\tprotected $_errors_filename = 'user';\n+\n+\t/**\n+\t * auto-set the updated_at column\n+\t * @var array\n+\t */\n+\tprotected $_updated_column = array('column' => 'updated_at', 'format' => 'Y-m-d H:i:s');\n+\n+\t/**\n+\t * Auto-set the created_at column\n+\t * @var array\n+\t */\n+\tprotected $_created_column = array('column' => 'created_at', 'format' => 'Y-m-d H:i:s');\n+\n+\t/**\n+\t * Define the has many relations\n+\t * @var array\n+\t */\n+\tprotected $_has_many = array(\n+\t\t'groups'    => array('model' => 'Group', 'through' => 'users_groups')\n+\t);\n+\n+\tprotected $_has_one = array(\n+\t\t'throttle' => array('model' => 'Throttle')\n+\t);\n+\n+\tpublic function rules() {\n+\t\treturn array(\n+\t\t\t'email' => array(\n+\t\t\t\tarray('not_empty'),\n+\t\t\t\tarray('email'),\n+\t\t\t\tarray(array($this, 'unique_key_exists'), array(':value', 'email'))\n+\t\t\t),\n+\t\t\t'password' => array(\n+\t\t\t\tarray('not_empty')\n+\t\t\t)\n+\t\t);\n+\t}\n+\t/**\n+\t * Attributes that should be hashed.\n+\t *\n+\t * @var array\n+\t */\n+\tprotected $hashableAttributes = array(\n+\t\t'password',\n+\t\t'persist_code',\n+\t);\n+\n+\t/**\n+\t * Allowed permissions values.\n+\t *\n+\t * Possible options:\n+\t *   -1 => Deny (adds to array, but denies regardless of user's group).\n+\t *    0 => Remove.\n+\t *    1 => Add.\n+\t *\n+\t * @var array\n+\t */\n+\tprotected $allowedPermissionsValues = array(-1, 0, 1);\n+\n+\t/**\n+\t * The login attribute.\n+\t *\n+\t * @var string\n+\t */\n+\tprotected static $loginAttribute = 'email';\n+\n+\t/**\n+\t * The hasher the model uses.\n+\t *\n+\t * @var Cartalyst\\Sentry\\Hashing\\HasherInterface\n+\t */\n+\tprotected static $hasher;\n+\n+\t/**\n+\t * The user groups.\n+\t *\n+\t * @var array\n+\t */\n+\tprotected $userGroups;\n+\n+\t/**\n+\t * The user merged permissions.\n+\t *\n+\t * @var array\n+\t */\n+\tprotected $mergedPermissions;\n+\n+\t/**\n+\t * Returns the user's ID.\n+\t *\n+\t * @return  mixed\n+\t */\n+\tpublic function getId()\n+\t{\n+\t\treturn $this->pk();\n+\t}\n+\n+\t/**\n+\t * Returns the name for the user's login.\n+\t *\n+\t * @return string\n+\t */\n+\tpublic function getLoginName()\n+\t{\n+\t\treturn static::$loginAttribute;\n+\t}\n+\n+\t/**\n+\t * Returns the user's login.\n+\t *\n+\t * @return mixed\n+\t */\n+\tpublic function getLogin()\n+\t{\n+\t\treturn $this->{$this->getLoginName()};\n+\t}\n+\n+\t/**\n+\t * Returns the name for the user's password.\n+\t *\n+\t * @return string\n+\t */\n+\tpublic function getPasswordName()\n+\t{\n+\t\treturn 'password';\n+\t}\n+\n+\t/**\n+\t * Returns the user's password (hashed).\n+\t *\n+\t * @return string\n+\t */\n+\tpublic function getPassword()\n+\t{\n+\t\treturn $this->password;\n+\t}\n+\n+\t/**\n+\t * Returns permissions for the user.\n+\t *\n+\t * @return array\n+\t */\n+\tpublic function getPermissions()\n+\t{\n+\t\treturn $this->permissions;\n+\t}\n+\n+\t/**\n+\t * Check if the user is activated.\n+\t *\n+\t * @return bool\n+\t */\n+\tpublic function isActivated()\n+\t{\n+\t\treturn (bool) $this->activated;\n+\t}\n+\n+\t/**\n+\t * Get mutator for giving the activated property.\n+\t *\n+\t * @param  mixed  $activated\n+\t * @return bool\n+\t */\n+\tpublic function getActivatedAttribute($activated)\n+\t{\n+\t\treturn (bool) $activated;\n+\t}\n+\n+\t/**\n+\t * Mutator for giving permissions.\n+\t *\n+\t * @param  mixed  $permissions\n+\t * @return array  $_permissions\n+\t */\n+\tpublic function getPermissionsAttribute($permissions)\n+\t{\n+\t\tif ( ! $permissions)\n+\t\t{\n+\t\t\treturn array();\n+\t\t}\n+\n+\t\tif (is_array($permissions))\n+\t\t{\n+\t\t\treturn $permissions;\n+\t\t}\n+\n+\t\tif ( ! $_permissions = json_decode($permissions, true))\n+\t\t{\n+\t\t\tthrow new \\InvalidArgumentException(\"Cannot JSON decode permissions [$permissions].\");\n+\t\t}\n+\n+\t\treturn $_permissions;\n+\t}\n+\n+\t/**\n+\t * Mutator for taking permissions.\n+\t *\n+\t * @param  array  $permissions\n+\t * @return string\n+\t */\n+\tpublic function setPermissionsAttribute(array $permissions)\n+\t{\n+\t\t// Merge permissions\n+\t\t$permissions = array_merge($this->getPermissions(), $permissions);\n+\n+\t\t// Loop through and adjust permissions as needed\n+\t\tforeach ($permissions as $permission => &$value)\n+\t\t{\n+\t\t\t// Lets make sure there is a valid permission value\n+\t\t\tif ( ! in_array($value = (int) $value, $this->allowedPermissionsValues))\n+\t\t\t{\n+\t\t\t\tthrow new \\InvalidArgumentException(\"Invalid value [$value] for permission [$permission] given.\");\n+\t\t\t}\n+\n+\t\t\t// If the value is 0, delete it\n+\t\t\tif ($value === 0)\n+\t\t\t{\n+\t\t\t\tunset($permissions[$permission]);\n+\t\t\t}\n+\t\t}\n+\n+\t\t$this->attributes['permissions'] = ( ! empty($permissions)) ? json_encode($permissions) : '';\n+\t}\n+\n+\t/**\n+\t * Checks if the user is a super user - has\n+\t * access to everything regardless of permissions.\n+\t *\n+\t * @return bool\n+\t */\n+\tpublic function isSuperUser()\n+\t{\n+\t\treturn $this->hasPermission('superuser');\n+\t}\n+\n+\t/**\n+\t * Validates the user and throws a number of\n+\t * Exceptions if validation fails.\n+\t *\n+\t * @return bool\n+\t * @throws ORM_Validation_Exception\n+\t */\n+\tpublic function validate()\n+\t{\n+\t\treturn $this->check();\n+\t}\n+\n+\t/**\n+\t * Saves the user.\n+\t *\n+\t * @param  array  $options\n+\t * @return bool\n+\t */\n+\tpublic function save(Validation $validation = NULL)\n+\t{\n+\t\t$this->validate();\n+\n+\t\treturn parent::save($validation);\n+\t}\n+\n+\tpublic function set($column, $value) {\n+\t\t$dates = array('activated_at', 'last_login');\n+\n+\t\tif(in_array($column, $dates) && $value != null)",
        "path": "src/Cartalyst/Sentry/Users/Kohana/User.php",
        "position": null,
        "original_position": 304,
        "commit_id": "c9a59cc352f353dd904d4adf0d0af3e2caddd2c6",
        "original_commit_id": "ac76b77cb4af368f86eceeb6bc3c95f97c3468ea",
        "user": {
            "login": "bencorlett",
            "id": 181919,
            "node_id": "MDQ6VXNlcjE4MTkxOQ==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/181919?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bencorlett",
            "html_url": "https://github.com/bencorlett",
            "followers_url": "https://api.github.com/users/bencorlett/followers",
            "following_url": "https://api.github.com/users/bencorlett/following{/other_user}",
            "gists_url": "https://api.github.com/users/bencorlett/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bencorlett/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bencorlett/subscriptions",
            "organizations_url": "https://api.github.com/users/bencorlett/orgs",
            "repos_url": "https://api.github.com/users/bencorlett/repos",
            "events_url": "https://api.github.com/users/bencorlett/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bencorlett/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Can you please us `and` `or` instead of && and || throughout \n",
        "created_at": "2013-08-06T20:03:57Z",
        "updated_at": "2013-08-09T19:34:25Z",
        "html_url": "https://github.com/cartalyst/sentry/pull/253#discussion_r5614803",
        "pull_request_url": "https://api.github.com/repos/cartalyst/sentry/pulls/253",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/5614803"
            },
            "html": {
                "href": "https://github.com/cartalyst/sentry/pull/253#discussion_r5614803"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/253"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/5614847",
        "pull_request_review_id": null,
        "id": 5614847,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTQ4NDc=",
        "diff_hunk": "@@ -0,0 +1,892 @@\n+<?php namespace Cartalyst\\Sentry\\Users\\Kohana;\n+/**\n+ * Part of the Sentry package.\n+ *\n+ * NOTICE OF LICENSE\n+ *\n+ * Licensed under the 3-clause BSD License.\n+ *\n+ * This source file is subject to the 3-clause BSD License that is\n+ * bundled with this package in the LICENSE file.  It is also available at\n+ * the following URL: http://www.opensource.org/licenses/BSD-3-Clause\n+ *\n+ * @package    Sentry\n+ * @version    2.0.0\n+ * @author     Cartalyst LLC\n+ * @license    BSD License (3-clause)\n+ * @copyright  (c) 2011 - 2013, Cartalyst LLC\n+ * @link       http://cartalyst.com\n+ */\n+\n+use Cartalyst\\Sentry\\Groups\\GroupInterface;\n+use Cartalyst\\Sentry\\Hashing\\HasherInterface;\n+use Cartalyst\\Sentry\\Users\\LoginRequiredException;\n+use Cartalyst\\Sentry\\Users\\PasswordRequiredException;\n+use Cartalyst\\Sentry\\Users\\UserAlreadyActivatedException;\n+use Cartalyst\\Sentry\\Users\\UserExistsException;\n+use Cartalyst\\Sentry\\Users\\UserInterface;\n+use DateTime;\n+\n+class User extends \\ORM implements UserInterface {\n+\n+\t/**\n+\t * The table associated with the model.\n+\t *\n+\t * @var string\n+\t */\n+\tprotected $_table_name = 'users';\n+\tprotected $_object_name = 'user';\n+\tprotected $_object_plural = 'users';\n+\tprotected $_errors_filename = 'user';\n+\n+\t/**\n+\t * auto-set the updated_at column\n+\t * @var array\n+\t */\n+\tprotected $_updated_column = array('column' => 'updated_at', 'format' => 'Y-m-d H:i:s');\n+\n+\t/**\n+\t * Auto-set the created_at column\n+\t * @var array\n+\t */\n+\tprotected $_created_column = array('column' => 'created_at', 'format' => 'Y-m-d H:i:s');\n+\n+\t/**\n+\t * Define the has many relations\n+\t * @var array\n+\t */\n+\tprotected $_has_many = array(\n+\t\t'groups'    => array('model' => 'Group', 'through' => 'users_groups')\n+\t);\n+\n+\tprotected $_has_one = array(\n+\t\t'throttle' => array('model' => 'Throttle')\n+\t);\n+\n+\tpublic function rules() {\n+\t\treturn array(\n+\t\t\t'email' => array(\n+\t\t\t\tarray('not_empty'),\n+\t\t\t\tarray('email'),\n+\t\t\t\tarray(array($this, 'unique_key_exists'), array(':value', 'email'))\n+\t\t\t),\n+\t\t\t'password' => array(\n+\t\t\t\tarray('not_empty')\n+\t\t\t)\n+\t\t);\n+\t}\n+\t/**\n+\t * Attributes that should be hashed.\n+\t *\n+\t * @var array\n+\t */\n+\tprotected $hashableAttributes = array(\n+\t\t'password',\n+\t\t'persist_code',\n+\t);\n+\n+\t/**\n+\t * Allowed permissions values.\n+\t *\n+\t * Possible options:\n+\t *   -1 => Deny (adds to array, but denies regardless of user's group).\n+\t *    0 => Remove.\n+\t *    1 => Add.\n+\t *\n+\t * @var array\n+\t */\n+\tprotected $allowedPermissionsValues = array(-1, 0, 1);\n+\n+\t/**\n+\t * The login attribute.\n+\t *\n+\t * @var string\n+\t */\n+\tprotected static $loginAttribute = 'email';\n+\n+\t/**\n+\t * The hasher the model uses.\n+\t *\n+\t * @var Cartalyst\\Sentry\\Hashing\\HasherInterface\n+\t */\n+\tprotected static $hasher;\n+\n+\t/**\n+\t * The user groups.\n+\t *\n+\t * @var array\n+\t */\n+\tprotected $userGroups;\n+\n+\t/**\n+\t * The user merged permissions.\n+\t *\n+\t * @var array\n+\t */\n+\tprotected $mergedPermissions;\n+\n+\t/**\n+\t * Returns the user's ID.\n+\t *\n+\t * @return  mixed\n+\t */\n+\tpublic function getId()\n+\t{\n+\t\treturn $this->pk();\n+\t}\n+\n+\t/**\n+\t * Returns the name for the user's login.\n+\t *\n+\t * @return string\n+\t */\n+\tpublic function getLoginName()\n+\t{\n+\t\treturn static::$loginAttribute;\n+\t}\n+\n+\t/**\n+\t * Returns the user's login.\n+\t *\n+\t * @return mixed\n+\t */\n+\tpublic function getLogin()\n+\t{\n+\t\treturn $this->{$this->getLoginName()};\n+\t}\n+\n+\t/**\n+\t * Returns the name for the user's password.\n+\t *\n+\t * @return string\n+\t */\n+\tpublic function getPasswordName()\n+\t{\n+\t\treturn 'password';\n+\t}\n+\n+\t/**\n+\t * Returns the user's password (hashed).\n+\t *\n+\t * @return string\n+\t */\n+\tpublic function getPassword()\n+\t{\n+\t\treturn $this->password;\n+\t}\n+\n+\t/**\n+\t * Returns permissions for the user.\n+\t *\n+\t * @return array\n+\t */\n+\tpublic function getPermissions()\n+\t{\n+\t\treturn $this->permissions;\n+\t}\n+\n+\t/**\n+\t * Check if the user is activated.\n+\t *\n+\t * @return bool\n+\t */\n+\tpublic function isActivated()\n+\t{\n+\t\treturn (bool) $this->activated;\n+\t}\n+\n+\t/**\n+\t * Get mutator for giving the activated property.\n+\t *\n+\t * @param  mixed  $activated\n+\t * @return bool\n+\t */\n+\tpublic function getActivatedAttribute($activated)\n+\t{\n+\t\treturn (bool) $activated;\n+\t}\n+\n+\t/**\n+\t * Mutator for giving permissions.\n+\t *\n+\t * @param  mixed  $permissions\n+\t * @return array  $_permissions\n+\t */\n+\tpublic function getPermissionsAttribute($permissions)\n+\t{\n+\t\tif ( ! $permissions)\n+\t\t{\n+\t\t\treturn array();\n+\t\t}\n+\n+\t\tif (is_array($permissions))\n+\t\t{\n+\t\t\treturn $permissions;\n+\t\t}\n+\n+\t\tif ( ! $_permissions = json_decode($permissions, true))\n+\t\t{\n+\t\t\tthrow new \\InvalidArgumentException(\"Cannot JSON decode permissions [$permissions].\");\n+\t\t}\n+\n+\t\treturn $_permissions;\n+\t}\n+\n+\t/**\n+\t * Mutator for taking permissions.\n+\t *\n+\t * @param  array  $permissions\n+\t * @return string\n+\t */\n+\tpublic function setPermissionsAttribute(array $permissions)\n+\t{\n+\t\t// Merge permissions\n+\t\t$permissions = array_merge($this->getPermissions(), $permissions);\n+\n+\t\t// Loop through and adjust permissions as needed\n+\t\tforeach ($permissions as $permission => &$value)\n+\t\t{\n+\t\t\t// Lets make sure there is a valid permission value\n+\t\t\tif ( ! in_array($value = (int) $value, $this->allowedPermissionsValues))\n+\t\t\t{\n+\t\t\t\tthrow new \\InvalidArgumentException(\"Invalid value [$value] for permission [$permission] given.\");\n+\t\t\t}\n+\n+\t\t\t// If the value is 0, delete it\n+\t\t\tif ($value === 0)\n+\t\t\t{\n+\t\t\t\tunset($permissions[$permission]);\n+\t\t\t}\n+\t\t}\n+\n+\t\t$this->attributes['permissions'] = ( ! empty($permissions)) ? json_encode($permissions) : '';\n+\t}\n+\n+\t/**\n+\t * Checks if the user is a super user - has\n+\t * access to everything regardless of permissions.\n+\t *\n+\t * @return bool\n+\t */\n+\tpublic function isSuperUser()\n+\t{\n+\t\treturn $this->hasPermission('superuser');\n+\t}\n+\n+\t/**\n+\t * Validates the user and throws a number of\n+\t * Exceptions if validation fails.\n+\t *\n+\t * @return bool\n+\t * @throws ORM_Validation_Exception\n+\t */\n+\tpublic function validate()\n+\t{\n+\t\treturn $this->check();\n+\t}\n+\n+\t/**\n+\t * Saves the user.\n+\t *\n+\t * @param  array  $options\n+\t * @return bool\n+\t */\n+\tpublic function save(Validation $validation = NULL)\n+\t{\n+\t\t$this->validate();\n+\n+\t\treturn parent::save($validation);\n+\t}\n+\n+\tpublic function set($column, $value) {",
        "path": "src/Cartalyst/Sentry/Users/Kohana/User.php",
        "position": null,
        "original_position": 301,
        "commit_id": "c9a59cc352f353dd904d4adf0d0af3e2caddd2c6",
        "original_commit_id": "ac76b77cb4af368f86eceeb6bc3c95f97c3468ea",
        "user": {
            "login": "bencorlett",
            "id": 181919,
            "node_id": "MDQ6VXNlcjE4MTkxOQ==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/181919?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bencorlett",
            "html_url": "https://github.com/bencorlett",
            "followers_url": "https://api.github.com/users/bencorlett/followers",
            "following_url": "https://api.github.com/users/bencorlett/following{/other_user}",
            "gists_url": "https://api.github.com/users/bencorlett/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bencorlett/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bencorlett/subscriptions",
            "organizations_url": "https://api.github.com/users/bencorlett/orgs",
            "repos_url": "https://api.github.com/users/bencorlett/repos",
            "events_url": "https://api.github.com/users/bencorlett/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bencorlett/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "There's a few sports the brackets are like this. Can you please use the same coding standard was we do (which is essentially allman style) for consistency. There's a few spots this has crept up \n",
        "created_at": "2013-08-06T20:05:32Z",
        "updated_at": "2013-08-09T19:34:25Z",
        "html_url": "https://github.com/cartalyst/sentry/pull/253#discussion_r5614847",
        "pull_request_url": "https://api.github.com/repos/cartalyst/sentry/pulls/253",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/5614847"
            },
            "html": {
                "href": "https://github.com/cartalyst/sentry/pull/253#discussion_r5614847"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/253"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/5614921",
        "pull_request_review_id": null,
        "id": 5614921,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTQ5MjE=",
        "diff_hunk": "@@ -27,6 +27,11 @@\n \t\t\t\"name\": \"Bruno Gaspar\",\n \t\t\t\"email\": \"bruno.gaspar@cartalyst.com\",\n \t\t\t\"role\": \"Developer\"\n+\t\t},\n+\t\t{\n+\t\t\t\"name\"    :\"Maxim Kerstens\",\n+\t\t\t\"email\"   :\"admin@happydemon.org\",\n+\t\t\t\"role\"    :\"Developer\"",
        "path": "composer.json",
        "position": null,
        "original_position": 17,
        "commit_id": "c9a59cc352f353dd904d4adf0d0af3e2caddd2c6",
        "original_commit_id": "ac76b77cb4af368f86eceeb6bc3c95f97c3468ea",
        "user": {
            "login": "bencorlett",
            "id": 181919,
            "node_id": "MDQ6VXNlcjE4MTkxOQ==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/181919?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bencorlett",
            "html_url": "https://github.com/bencorlett",
            "followers_url": "https://api.github.com/users/bencorlett/followers",
            "following_url": "https://api.github.com/users/bencorlett/following{/other_user}",
            "gists_url": "https://api.github.com/users/bencorlett/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bencorlett/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bencorlett/subscriptions",
            "organizations_url": "https://api.github.com/users/bencorlett/orgs",
            "repos_url": "https://api.github.com/users/bencorlett/repos",
            "events_url": "https://api.github.com/users/bencorlett/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bencorlett/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "With this part, are you able to please remove this? You'll be in the contributors list, but the authors component of composer.json is reserved for Cartalyst employees, we use it internally here as well\n",
        "created_at": "2013-08-06T20:08:11Z",
        "updated_at": "2013-08-09T19:34:25Z",
        "html_url": "https://github.com/cartalyst/sentry/pull/253#discussion_r5614921",
        "pull_request_url": "https://api.github.com/repos/cartalyst/sentry/pulls/253",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/5614921"
            },
            "html": {
                "href": "https://github.com/cartalyst/sentry/pull/253#discussion_r5614921"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/253"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/5614957",
        "pull_request_review_id": null,
        "id": 5614957,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTQ5NTc=",
        "diff_hunk": "@@ -86,3 +86,7 @@ CREATE TABLE `users_groups` (\n   `group_id` int(10) unsigned NOT NULL,\n   PRIMARY KEY (`id`)\n ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\n+\n+ALTER TABLE `users_groups`",
        "path": "schema/mysql.sql",
        "position": null,
        "original_position": 79,
        "commit_id": "c9a59cc352f353dd904d4adf0d0af3e2caddd2c6",
        "original_commit_id": "ac76b77cb4af368f86eceeb6bc3c95f97c3468ea",
        "user": {
            "login": "bencorlett",
            "id": 181919,
            "node_id": "MDQ6VXNlcjE4MTkxOQ==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/181919?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bencorlett",
            "html_url": "https://github.com/bencorlett",
            "followers_url": "https://api.github.com/users/bencorlett/followers",
            "following_url": "https://api.github.com/users/bencorlett/following{/other_user}",
            "gists_url": "https://api.github.com/users/bencorlett/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bencorlett/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bencorlett/subscriptions",
            "organizations_url": "https://api.github.com/users/bencorlett/orgs",
            "repos_url": "https://api.github.com/users/bencorlett/repos",
            "events_url": "https://api.github.com/users/bencorlett/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bencorlett/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "By design we are choosing not to have foreign keys. They annoy the crap out of us. Are you able to remove the FKs from the default SQLplease?\n",
        "created_at": "2013-08-06T20:09:47Z",
        "updated_at": "2013-08-09T19:34:25Z",
        "html_url": "https://github.com/cartalyst/sentry/pull/253#discussion_r5614957",
        "pull_request_url": "https://api.github.com/repos/cartalyst/sentry/pulls/253",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/5614957"
            },
            "html": {
                "href": "https://github.com/cartalyst/sentry/pull/253#discussion_r5614957"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/253"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/5615001",
        "pull_request_review_id": null,
        "id": 5615001,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTUwMDE=",
        "diff_hunk": "@@ -0,0 +1,74 @@\n+<?php namespace Cartalyst\\Sentry\\Facades\\Kohana;\n+/**\n+ * Part of the Sentry package.\n+ *\n+ * NOTICE OF LICENSE\n+ *\n+ * Licensed under the 3-clause BSD License.\n+ *\n+ * This source file is subject to the 3-clause BSD License that is\n+ * bundled with this package in the LICENSE file.  It is also available at\n+ * the following URL: http://www.opensource.org/licenses/BSD-3-Clause\n+ *\n+ * @package    Sentry\n+ * @version    2.0.0\n+ * @author     Cartalyst LLC\n+ * @license    BSD License (3-clause)\n+ * @copyright  (c) 2011 - 2013, Cartalyst LLC\n+ * @link       http://cartalyst.com\n+ */\n+\n+use Cartalyst\\Sentry\\Cookies\\KohanaCookie;\n+use Cartalyst\\Sentry\\Facades\\Facade;\n+use Cartalyst\\Sentry\\Groups\\Kohana\\Provider as GroupProvider;\n+use Cartalyst\\Sentry\\Sessions\\KohanaSession;\n+use Cartalyst\\Sentry\\Sentry as BaseSentry;\n+use Cartalyst\\Sentry\\Throttling\\Kohana\\Provider as ThrottleProvider;\n+use Cartalyst\\Sentry\\Users\\Kohana\\Provider as UserProvider;\n+\n+class Sentry extends Facade {\n+\n+\t/**\n+\t * Creates a new instance of Sentry.\n+\t *\n+\t * @return Cartalyst\\Sentry\\Sentry\n+\t */\n+\tpublic static function createSentry()\n+\t{\n+\t\t$config = \\Kohana::$config->load('sentry')->as_array();\n+\n+\t\t//if the user hasn't defined a config file offer defaults\n+\t\tif(count($config) == 0) {",
        "path": "src/Cartalyst/Sentry/Facades/Kohana/Sentry.php",
        "position": null,
        "original_position": 41,
        "commit_id": "c9a59cc352f353dd904d4adf0d0af3e2caddd2c6",
        "original_commit_id": "ac76b77cb4af368f86eceeb6bc3c95f97c3468ea",
        "user": {
            "login": "bencorlett",
            "id": 181919,
            "node_id": "MDQ6VXNlcjE4MTkxOQ==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/181919?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bencorlett",
            "html_url": "https://github.com/bencorlett",
            "followers_url": "https://api.github.com/users/bencorlett/followers",
            "following_url": "https://api.github.com/users/bencorlett/following{/other_user}",
            "gists_url": "https://api.github.com/users/bencorlett/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bencorlett/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bencorlett/subscriptions",
            "organizations_url": "https://api.github.com/users/bencorlett/orgs",
            "repos_url": "https://api.github.com/users/bencorlett/repos",
            "events_url": "https://api.github.com/users/bencorlett/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bencorlett/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "In addition to allman style, we have a space after keywords like `if elseif for each switch`\n",
        "created_at": "2013-08-06T20:11:11Z",
        "updated_at": "2013-08-09T19:34:25Z",
        "html_url": "https://github.com/cartalyst/sentry/pull/253#discussion_r5615001",
        "pull_request_url": "https://api.github.com/repos/cartalyst/sentry/pulls/253",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/5615001"
            },
            "html": {
                "href": "https://github.com/cartalyst/sentry/pull/253#discussion_r5615001"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/253"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/5615031",
        "pull_request_review_id": null,
        "id": 5615031,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTUwMzE=",
        "diff_hunk": "@@ -0,0 +1,74 @@\n+<?php namespace Cartalyst\\Sentry\\Facades\\Kohana;\n+/**\n+ * Part of the Sentry package.\n+ *\n+ * NOTICE OF LICENSE\n+ *\n+ * Licensed under the 3-clause BSD License.\n+ *\n+ * This source file is subject to the 3-clause BSD License that is\n+ * bundled with this package in the LICENSE file.  It is also available at\n+ * the following URL: http://www.opensource.org/licenses/BSD-3-Clause\n+ *\n+ * @package    Sentry\n+ * @version    2.0.0\n+ * @author     Cartalyst LLC\n+ * @license    BSD License (3-clause)\n+ * @copyright  (c) 2011 - 2013, Cartalyst LLC\n+ * @link       http://cartalyst.com\n+ */\n+\n+use Cartalyst\\Sentry\\Cookies\\KohanaCookie;\n+use Cartalyst\\Sentry\\Facades\\Facade;\n+use Cartalyst\\Sentry\\Groups\\Kohana\\Provider as GroupProvider;\n+use Cartalyst\\Sentry\\Sessions\\KohanaSession;\n+use Cartalyst\\Sentry\\Sentry as BaseSentry;\n+use Cartalyst\\Sentry\\Throttling\\Kohana\\Provider as ThrottleProvider;\n+use Cartalyst\\Sentry\\Users\\Kohana\\Provider as UserProvider;\n+\n+class Sentry extends Facade {\n+\n+\t/**\n+\t * Creates a new instance of Sentry.\n+\t *\n+\t * @return Cartalyst\\Sentry\\Sentry\n+\t */\n+\tpublic static function createSentry()\n+\t{\n+\t\t$config = \\Kohana::$config->load('sentry')->as_array();\n+\n+\t\t//if the user hasn't defined a config file offer defaults",
        "path": "src/Cartalyst/Sentry/Facades/Kohana/Sentry.php",
        "position": null,
        "original_position": 40,
        "commit_id": "c9a59cc352f353dd904d4adf0d0af3e2caddd2c6",
        "original_commit_id": "ac76b77cb4af368f86eceeb6bc3c95f97c3468ea",
        "user": {
            "login": "bencorlett",
            "id": 181919,
            "node_id": "MDQ6VXNlcjE4MTkxOQ==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/181919?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bencorlett",
            "html_url": "https://github.com/bencorlett",
            "followers_url": "https://api.github.com/users/bencorlett/followers",
            "following_url": "https://api.github.com/users/bencorlett/following{/other_user}",
            "gists_url": "https://api.github.com/users/bencorlett/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bencorlett/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bencorlett/subscriptions",
            "organizations_url": "https://api.github.com/users/bencorlett/orgs",
            "repos_url": "https://api.github.com/users/bencorlett/repos",
            "events_url": "https://api.github.com/users/bencorlett/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bencorlett/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I know I'm a nazi on this. Our comments start with a a capital letter and have a space between them and the double slash. Single line comments have no full stop and multiple line comments have a full stop (period)\n",
        "created_at": "2013-08-06T20:12:28Z",
        "updated_at": "2013-08-09T19:34:25Z",
        "html_url": "https://github.com/cartalyst/sentry/pull/253#discussion_r5615031",
        "pull_request_url": "https://api.github.com/repos/cartalyst/sentry/pulls/253",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/5615031"
            },
            "html": {
                "href": "https://github.com/cartalyst/sentry/pull/253#discussion_r5615031"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/253"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/6930802",
        "pull_request_review_id": null,
        "id": 6930802,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MzA4MDI=",
        "diff_hunk": "@@ -478,6 +478,23 @@ public function getGroups()\n \n \t\treturn $this->userGroups;\n \t}\n+\t\n+\t/**\n+\t * Return an array of group names which the given\n+\t * user belongs to.\n+\t *\n+\t * @return array\n+\t **/\n+\tpublic function getGroupNames()\n+\t{\n+\t\t$groupNames = [];",
        "path": "src/Cartalyst/Sentry/Users/Eloquent/User.php",
        "position": null,
        "original_position": 13,
        "commit_id": "ae83bbc85cc1433bf7515ab8c1071b560fbc67c8",
        "original_commit_id": "ccf06634e7227106df9f2ef030ea4fc846af9856",
        "user": {
            "login": "brunogaspar",
            "id": 2285372,
            "node_id": "MDQ6VXNlcjIyODUzNzI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/2285372?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brunogaspar",
            "html_url": "https://github.com/brunogaspar",
            "followers_url": "https://api.github.com/users/brunogaspar/followers",
            "following_url": "https://api.github.com/users/brunogaspar/following{/other_user}",
            "gists_url": "https://api.github.com/users/brunogaspar/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brunogaspar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brunogaspar/subscriptions",
            "organizations_url": "https://api.github.com/users/brunogaspar/orgs",
            "repos_url": "https://api.github.com/users/brunogaspar/repos",
            "events_url": "https://api.github.com/users/brunogaspar/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brunogaspar/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "this is not valid on PHP 5.3, change it to array()\n",
        "created_at": "2013-10-12T05:52:23Z",
        "updated_at": "2013-10-12T06:15:47Z",
        "html_url": "https://github.com/cartalyst/sentry/pull/291#discussion_r6930802",
        "pull_request_url": "https://api.github.com/repos/cartalyst/sentry/pulls/291",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/6930802"
            },
            "html": {
                "href": "https://github.com/cartalyst/sentry/pull/291#discussion_r6930802"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/291"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/6930803",
        "pull_request_review_id": null,
        "id": 6930803,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MzA4MDM=",
        "diff_hunk": "@@ -478,6 +478,23 @@ public function getGroups()\n \n \t\treturn $this->userGroups;\n \t}\n+\t\n+\t/**\n+\t * Return an array of group names which the given\n+\t * user belongs to.\n+\t *\n+\t * @return array\n+\t **/\n+\tpublic function getGroupNames()\n+\t{\n+\t\t$groupNames = [];\n+\n+\t\tforeach ($this->getGroups() as $group) {",
        "path": "src/Cartalyst/Sentry/Users/Eloquent/User.php",
        "position": null,
        "original_position": 15,
        "commit_id": "ae83bbc85cc1433bf7515ab8c1071b560fbc67c8",
        "original_commit_id": "ccf06634e7227106df9f2ef030ea4fc846af9856",
        "user": {
            "login": "brunogaspar",
            "id": 2285372,
            "node_id": "MDQ6VXNlcjIyODUzNzI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/2285372?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brunogaspar",
            "html_url": "https://github.com/brunogaspar",
            "followers_url": "https://api.github.com/users/brunogaspar/followers",
            "following_url": "https://api.github.com/users/brunogaspar/following{/other_user}",
            "gists_url": "https://api.github.com/users/brunogaspar/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brunogaspar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brunogaspar/subscriptions",
            "organizations_url": "https://api.github.com/users/brunogaspar/orgs",
            "repos_url": "https://api.github.com/users/brunogaspar/repos",
            "events_url": "https://api.github.com/users/brunogaspar/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brunogaspar/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "curly bracket should be on it's own line\n",
        "created_at": "2013-10-12T05:52:25Z",
        "updated_at": "2013-10-12T06:15:47Z",
        "html_url": "https://github.com/cartalyst/sentry/pull/291#discussion_r6930803",
        "pull_request_url": "https://api.github.com/repos/cartalyst/sentry/pulls/291",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/6930803"
            },
            "html": {
                "href": "https://github.com/cartalyst/sentry/pull/291#discussion_r6930803"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/291"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/6930804",
        "pull_request_review_id": null,
        "id": 6930804,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MzA4MDQ=",
        "diff_hunk": "@@ -507,6 +507,23 @@ public function getGroups()\n \n \t\treturn $this->userGroups;\n \t}\n+\t\n+\t/**\n+\t * Return an array of group names which the given\n+\t * user belongs to.\n+\t *\n+\t * @return array\n+\t **/\n+\tpublic function getGroupNames()\n+\t{\n+\t\t$groupNames = [];",
        "path": "src/Cartalyst/Sentry/Users/Kohana/User.php",
        "position": null,
        "original_position": 13,
        "commit_id": "ae83bbc85cc1433bf7515ab8c1071b560fbc67c8",
        "original_commit_id": "ccf06634e7227106df9f2ef030ea4fc846af9856",
        "user": {
            "login": "brunogaspar",
            "id": 2285372,
            "node_id": "MDQ6VXNlcjIyODUzNzI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/2285372?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brunogaspar",
            "html_url": "https://github.com/brunogaspar",
            "followers_url": "https://api.github.com/users/brunogaspar/followers",
            "following_url": "https://api.github.com/users/brunogaspar/following{/other_user}",
            "gists_url": "https://api.github.com/users/brunogaspar/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brunogaspar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brunogaspar/subscriptions",
            "organizations_url": "https://api.github.com/users/brunogaspar/orgs",
            "repos_url": "https://api.github.com/users/brunogaspar/repos",
            "events_url": "https://api.github.com/users/brunogaspar/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brunogaspar/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "this is not valid on PHP 5.3, change it to array()\n",
        "created_at": "2013-10-12T05:52:27Z",
        "updated_at": "2013-10-12T06:15:47Z",
        "html_url": "https://github.com/cartalyst/sentry/pull/291#discussion_r6930804",
        "pull_request_url": "https://api.github.com/repos/cartalyst/sentry/pulls/291",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/6930804"
            },
            "html": {
                "href": "https://github.com/cartalyst/sentry/pull/291#discussion_r6930804"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/291"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/6930805",
        "pull_request_review_id": null,
        "id": 6930805,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MzA4MDU=",
        "diff_hunk": "@@ -507,6 +507,23 @@ public function getGroups()\n \n \t\treturn $this->userGroups;\n \t}\n+\t\n+\t/**\n+\t * Return an array of group names which the given\n+\t * user belongs to.\n+\t *\n+\t * @return array\n+\t **/\n+\tpublic function getGroupNames()\n+\t{\n+\t\t$groupNames = [];\n+\n+\t\tforeach ($this->getGroups() as $group) {",
        "path": "src/Cartalyst/Sentry/Users/Kohana/User.php",
        "position": null,
        "original_position": 15,
        "commit_id": "ae83bbc85cc1433bf7515ab8c1071b560fbc67c8",
        "original_commit_id": "ccf06634e7227106df9f2ef030ea4fc846af9856",
        "user": {
            "login": "brunogaspar",
            "id": 2285372,
            "node_id": "MDQ6VXNlcjIyODUzNzI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/2285372?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brunogaspar",
            "html_url": "https://github.com/brunogaspar",
            "followers_url": "https://api.github.com/users/brunogaspar/followers",
            "following_url": "https://api.github.com/users/brunogaspar/following{/other_user}",
            "gists_url": "https://api.github.com/users/brunogaspar/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brunogaspar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brunogaspar/subscriptions",
            "organizations_url": "https://api.github.com/users/brunogaspar/orgs",
            "repos_url": "https://api.github.com/users/brunogaspar/repos",
            "events_url": "https://api.github.com/users/brunogaspar/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brunogaspar/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "curly bracket should be on it's own line\n",
        "created_at": "2013-10-12T05:52:28Z",
        "updated_at": "2013-10-12T06:15:47Z",
        "html_url": "https://github.com/cartalyst/sentry/pull/291#discussion_r6930805",
        "pull_request_url": "https://api.github.com/repos/cartalyst/sentry/pulls/291",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/6930805"
            },
            "html": {
                "href": "https://github.com/cartalyst/sentry/pull/291#discussion_r6930805"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/291"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/6934244",
        "pull_request_review_id": null,
        "id": 6934244,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MzQyNDQ=",
        "diff_hunk": "@@ -92,6 +92,15 @@ public function getLoginAttempts()\n \n \t\treturn $this->attempts;\n \t}\n+\t/**",
        "path": "src/Cartalyst/Sentry/Throttling/Eloquent/Throttle.php",
        "position": null,
        "original_position": 4,
        "commit_id": "ba0aa29f78f50395a6043696c0076082b96f4f91",
        "original_commit_id": "96aa14c1e54074a583f1ac383e5c97b7d6776fbd",
        "user": {
            "login": "brunogaspar",
            "id": 2285372,
            "node_id": "MDQ6VXNlcjIyODUzNzI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/2285372?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brunogaspar",
            "html_url": "https://github.com/brunogaspar",
            "followers_url": "https://api.github.com/users/brunogaspar/followers",
            "following_url": "https://api.github.com/users/brunogaspar/following{/other_user}",
            "gists_url": "https://api.github.com/users/brunogaspar/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brunogaspar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brunogaspar/subscriptions",
            "organizations_url": "https://api.github.com/users/brunogaspar/orgs",
            "repos_url": "https://api.github.com/users/brunogaspar/repos",
            "events_url": "https://api.github.com/users/brunogaspar/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brunogaspar/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Can you add an enter here?\n",
        "created_at": "2013-10-13T11:48:53Z",
        "updated_at": "2013-10-13T17:30:13Z",
        "html_url": "https://github.com/cartalyst/sentry/pull/293#discussion_r6934244",
        "pull_request_url": "https://api.github.com/repos/cartalyst/sentry/pulls/293",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/6934244"
            },
            "html": {
                "href": "https://github.com/cartalyst/sentry/pull/293#discussion_r6934244"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/293"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/6934245",
        "pull_request_review_id": null,
        "id": 6934245,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MzQyNDU=",
        "diff_hunk": "@@ -417,4 +426,29 @@ public static function getSuspensionTime()\n \t\treturn static::$suspensionTime;\n \t}\n \n+\t/**\n+\t * Get the remaining time on a suspension in minutes rounded up. Returns\n+\t * 0 if user is not suspended.\n+\t *\n+\t * @return int\n+\t */\n+\tpublic function getRemainingSuspensionTime()\n+\t{\n+\t\tif(!$this->isSuspended())\n+\t\t\treturn 0;\n+\n+\t\t$lastAttempt = clone $this->last_attempt_at;\n+\n+\t\t$suspensionTime  = static::$suspensionTime;\n+\t\t$clearAttemptsAt = $lastAttempt->modify(\"+{$suspensionTime} minutes\");\n+\t\t$now             = new Datetime;\n+\n+\t\t$timeLeft = $clearAttemptsAt->diff($now);\n+\n+\t\t$minutesLeft = ($timeLeft->s != 0 ?",
        "path": "src/Cartalyst/Sentry/Throttling/Eloquent/Throttle.php",
        "position": 40,
        "original_position": 39,
        "commit_id": "ba0aa29f78f50395a6043696c0076082b96f4f91",
        "original_commit_id": "96aa14c1e54074a583f1ac383e5c97b7d6776fbd",
        "user": {
            "login": "brunogaspar",
            "id": 2285372,
            "node_id": "MDQ6VXNlcjIyODUzNzI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/2285372?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brunogaspar",
            "html_url": "https://github.com/brunogaspar",
            "followers_url": "https://api.github.com/users/brunogaspar/followers",
            "following_url": "https://api.github.com/users/brunogaspar/following{/other_user}",
            "gists_url": "https://api.github.com/users/brunogaspar/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brunogaspar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brunogaspar/subscriptions",
            "organizations_url": "https://api.github.com/users/brunogaspar/orgs",
            "repos_url": "https://api.github.com/users/brunogaspar/repos",
            "events_url": "https://api.github.com/users/brunogaspar/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brunogaspar/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I believe that these 3 lines can be tweaked a bit, to avoid repetitive stuff and you can return it right away instead of saving it on a variable and return later\n",
        "created_at": "2013-10-13T11:48:56Z",
        "updated_at": "2013-10-13T17:30:13Z",
        "html_url": "https://github.com/cartalyst/sentry/pull/293#discussion_r6934245",
        "pull_request_url": "https://api.github.com/repos/cartalyst/sentry/pulls/293",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/6934245"
            },
            "html": {
                "href": "https://github.com/cartalyst/sentry/pull/293#discussion_r6934245"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/293"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/6935153",
        "pull_request_review_id": null,
        "id": 6935153,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MzUxNTM=",
        "diff_hunk": "@@ -417,4 +426,29 @@ public static function getSuspensionTime()\n \t\treturn static::$suspensionTime;\n \t}\n \n+\t/**\n+\t * Get the remaining time on a suspension in minutes rounded up. Returns\n+\t * 0 if user is not suspended.\n+\t *\n+\t * @return int\n+\t */\n+\tpublic function getRemainingSuspensionTime()\n+\t{\n+\t\tif(!$this->isSuspended())\n+\t\t\treturn 0;\n+\n+\t\t$lastAttempt = clone $this->last_attempt_at;\n+\n+\t\t$suspensionTime  = static::$suspensionTime;\n+\t\t$clearAttemptsAt = $lastAttempt->modify(\"+{$suspensionTime} minutes\");\n+\t\t$now             = new Datetime;\n+\n+\t\t$timeLeft = $clearAttemptsAt->diff($now);\n+\n+\t\t$minutesLeft = ($timeLeft->s != 0 ?",
        "path": "src/Cartalyst/Sentry/Throttling/Eloquent/Throttle.php",
        "position": 40,
        "original_position": 39,
        "commit_id": "ba0aa29f78f50395a6043696c0076082b96f4f91",
        "original_commit_id": "96aa14c1e54074a583f1ac383e5c97b7d6776fbd",
        "user": {
            "login": "JohnMaguire",
            "id": 440033,
            "node_id": "MDQ6VXNlcjQ0MDAzMw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/440033?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnMaguire",
            "html_url": "https://github.com/JohnMaguire",
            "followers_url": "https://api.github.com/users/JohnMaguire/followers",
            "following_url": "https://api.github.com/users/JohnMaguire/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnMaguire/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnMaguire/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnMaguire/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnMaguire/orgs",
            "repos_url": "https://api.github.com/users/JohnMaguire/repos",
            "events_url": "https://api.github.com/users/JohnMaguire/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnMaguire/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "There very well may be. The reason I did it this way was to be as clear as possible. Time stuff like this can be sort of confusing to follow and so I tried to make it very readable. Just tell me how you'd like it changed though and I can do that.\n",
        "created_at": "2013-10-13T17:28:56Z",
        "updated_at": "2013-10-13T17:30:13Z",
        "html_url": "https://github.com/cartalyst/sentry/pull/293#discussion_r6935153",
        "pull_request_url": "https://api.github.com/repos/cartalyst/sentry/pulls/293",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/6935153"
            },
            "html": {
                "href": "https://github.com/cartalyst/sentry/pull/293#discussion_r6935153"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/293"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/6935158",
        "pull_request_review_id": null,
        "id": 6935158,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MzUxNTg=",
        "diff_hunk": "@@ -92,6 +92,15 @@ public function getLoginAttempts()\n \n \t\treturn $this->attempts;\n \t}\n+\t/**",
        "path": "src/Cartalyst/Sentry/Throttling/Eloquent/Throttle.php",
        "position": null,
        "original_position": 4,
        "commit_id": "ba0aa29f78f50395a6043696c0076082b96f4f91",
        "original_commit_id": "96aa14c1e54074a583f1ac383e5c97b7d6776fbd",
        "user": {
            "login": "JohnMaguire",
            "id": 440033,
            "node_id": "MDQ6VXNlcjQ0MDAzMw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/440033?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JohnMaguire",
            "html_url": "https://github.com/JohnMaguire",
            "followers_url": "https://api.github.com/users/JohnMaguire/followers",
            "following_url": "https://api.github.com/users/JohnMaguire/following{/other_user}",
            "gists_url": "https://api.github.com/users/JohnMaguire/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JohnMaguire/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JohnMaguire/subscriptions",
            "organizations_url": "https://api.github.com/users/JohnMaguire/orgs",
            "repos_url": "https://api.github.com/users/JohnMaguire/repos",
            "events_url": "https://api.github.com/users/JohnMaguire/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JohnMaguire/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Done.\n",
        "created_at": "2013-10-13T17:31:07Z",
        "updated_at": "2013-10-13T17:31:07Z",
        "html_url": "https://github.com/cartalyst/sentry/pull/293#discussion_r6935158",
        "pull_request_url": "https://api.github.com/repos/cartalyst/sentry/pulls/293",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/6935158"
            },
            "html": {
                "href": "https://github.com/cartalyst/sentry/pull/293#discussion_r6935158"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/293"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/9171970",
        "pull_request_review_id": null,
        "id": 9171970,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxNzE5NzA=",
        "diff_hunk": "@@ -17,7 +17,11 @@ public function up()\n \n \t\tSchema::table('groups_users', function(Blueprint $table)\n \t\t{\n-\t\t\t$table->timestamps();",
        "path": "src/migrations/2013_11_26_024557_migration_cartalyst_sentry_rename_alter_groups_users_pivot.php",
        "position": 4,
        "original_position": 4,
        "commit_id": "615886a30837ed7cbc81e95e1957d93fb9cd64eb",
        "original_commit_id": "89493b52d11538c9d77d9bb8930fdcd59015bd5f",
        "user": {
            "login": "brunogaspar",
            "id": 2285372,
            "node_id": "MDQ6VXNlcjIyODUzNzI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/2285372?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brunogaspar",
            "html_url": "https://github.com/brunogaspar",
            "followers_url": "https://api.github.com/users/brunogaspar/followers",
            "following_url": "https://api.github.com/users/brunogaspar/following{/other_user}",
            "gists_url": "https://api.github.com/users/brunogaspar/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brunogaspar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brunogaspar/subscriptions",
            "organizations_url": "https://api.github.com/users/brunogaspar/orgs",
            "repos_url": "https://api.github.com/users/brunogaspar/repos",
            "events_url": "https://api.github.com/users/brunogaspar/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brunogaspar/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I believe here you can just use the `$table->nullableTimestamps();` instead of this whole if.\n\nWe are using that on a private repository where it was giving issues with PgSQL.\n",
        "created_at": "2014-01-25T16:32:47Z",
        "updated_at": "2014-01-26T18:27:26Z",
        "html_url": "https://github.com/cartalyst/sentry/pull/351#discussion_r9171970",
        "pull_request_url": "https://api.github.com/repos/cartalyst/sentry/pulls/351",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/9171970"
            },
            "html": {
                "href": "https://github.com/cartalyst/sentry/pull/351#discussion_r9171970"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/351"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/9176761",
        "pull_request_review_id": null,
        "id": 9176761,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxNzY3NjE=",
        "diff_hunk": "@@ -17,7 +17,11 @@ public function up()\n \n \t\tSchema::table('groups_users', function(Blueprint $table)\n \t\t{\n-\t\t\t$table->timestamps();",
        "path": "src/migrations/2013_11_26_024557_migration_cartalyst_sentry_rename_alter_groups_users_pivot.php",
        "position": 4,
        "original_position": 4,
        "commit_id": "615886a30837ed7cbc81e95e1957d93fb9cd64eb",
        "original_commit_id": "89493b52d11538c9d77d9bb8930fdcd59015bd5f",
        "user": {
            "login": "joshuajabbour",
            "id": 66879,
            "node_id": "MDQ6VXNlcjY2ODc5",
            "avatar_url": "https://avatars1.githubusercontent.com/u/66879?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/joshuajabbour",
            "html_url": "https://github.com/joshuajabbour",
            "followers_url": "https://api.github.com/users/joshuajabbour/followers",
            "following_url": "https://api.github.com/users/joshuajabbour/following{/other_user}",
            "gists_url": "https://api.github.com/users/joshuajabbour/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/joshuajabbour/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/joshuajabbour/subscriptions",
            "organizations_url": "https://api.github.com/users/joshuajabbour/orgs",
            "repos_url": "https://api.github.com/users/joshuajabbour/repos",
            "events_url": "https://api.github.com/users/joshuajabbour/events{/privacy}",
            "received_events_url": "https://api.github.com/users/joshuajabbour/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@brunogaspar Okay, will do. Was trying not to functionally alter the code as little as possible, but the if is dumb.\n",
        "created_at": "2014-01-26T18:25:43Z",
        "updated_at": "2014-01-26T18:27:26Z",
        "html_url": "https://github.com/cartalyst/sentry/pull/351#discussion_r9176761",
        "pull_request_url": "https://api.github.com/repos/cartalyst/sentry/pulls/351",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/9176761"
            },
            "html": {
                "href": "https://github.com/cartalyst/sentry/pull/351#discussion_r9176761"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/351"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/9177100",
        "pull_request_review_id": null,
        "id": 9177100,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxNzcxMDA=",
        "diff_hunk": "@@ -17,7 +17,11 @@ public function up()\n \n \t\tSchema::table('groups_users', function(Blueprint $table)\n \t\t{\n-\t\t\t$table->timestamps();",
        "path": "src/migrations/2013_11_26_024557_migration_cartalyst_sentry_rename_alter_groups_users_pivot.php",
        "position": 4,
        "original_position": 4,
        "commit_id": "615886a30837ed7cbc81e95e1957d93fb9cd64eb",
        "original_commit_id": "89493b52d11538c9d77d9bb8930fdcd59015bd5f",
        "user": {
            "login": "bencorlett",
            "id": 181919,
            "node_id": "MDQ6VXNlcjE4MTkxOQ==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/181919?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bencorlett",
            "html_url": "https://github.com/bencorlett",
            "followers_url": "https://api.github.com/users/bencorlett/followers",
            "following_url": "https://api.github.com/users/bencorlett/following{/other_user}",
            "gists_url": "https://api.github.com/users/bencorlett/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bencorlett/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bencorlett/subscriptions",
            "organizations_url": "https://api.github.com/users/bencorlett/orgs",
            "repos_url": "https://api.github.com/users/bencorlett/repos",
            "events_url": "https://api.github.com/users/bencorlett/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bencorlett/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I should review this either today or tomorrow \n\nSent from my iPhone\nPlease excuse my brevity\n\n> On 27 Jan 2014, at 5:25 am, Joshua Jabbour notifications@github.com wrote:\n> \n> In src/migrations/2013_11_26_024557_migration_cartalyst_sentry_rename_alter_groups_users_pivot.php:\n> \n> > @@ -17,7 +17,11 @@ public function up()\n> > \n> > ```\n> >     Schema::table('groups_users', function(Blueprint $table)\n> >     {\n> > ```\n> > -           $table->timestamps();\n> >   @brunogaspar Okay, will do. Was trying not to functionally alter the code as little as possible.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n",
        "created_at": "2014-01-26T19:56:15Z",
        "updated_at": "2014-01-26T19:56:15Z",
        "html_url": "https://github.com/cartalyst/sentry/pull/351#discussion_r9177100",
        "pull_request_url": "https://api.github.com/repos/cartalyst/sentry/pulls/351",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/9177100"
            },
            "html": {
                "href": "https://github.com/cartalyst/sentry/pull/351#discussion_r9177100"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/351"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/8887895",
        "pull_request_review_id": null,
        "id": 8887895,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4ODc4OTU=",
        "diff_hunk": "@@ -11,710 +11,922 @@\n  * the following URL: http://www.opensource.org/licenses/BSD-3-Clause\n  *\n  * @package    Sentry\n- * @version    2.0.0\n+ * @version    3.0.0\n  * @author     Cartalyst LLC\n  * @license    BSD License (3-clause)\n- * @copyright  (c) 2011 - 2013, Cartalyst LLC\n+ * @copyright  (c) 2011-2014, Cartalyst LLC\n  * @link       http://cartalyst.com\n  */\n \n-use Cartalyst\\Sentry\\Cookies\\CookieInterface;\n+use Cartalyst\\Sentry\\Activations\\IlluminateActivationRepository;\n+use Cartalyst\\Sentry\\Activations\\ActivationRepositoryInterface;\n+use Cartalyst\\Sentry\\Checkpoints\\CheckpointInterface;\n use Cartalyst\\Sentry\\Cookies\\NativeCookie;\n-use Cartalyst\\Sentry\\Groups\\Eloquent\\Provider as GroupProvider;\n-use Cartalyst\\Sentry\\Groups\\ProviderInterface as GroupProviderInterface;\n+use Cartalyst\\Sentry\\Groups\\IlluminateGroupRepository;\n+use Cartalyst\\Sentry\\Groups\\GroupRepositoryInterface;\n use Cartalyst\\Sentry\\Hashing\\NativeHasher;\n+use Cartalyst\\Sentry\\Persistence\\PersistenceInterface;\n+use Cartalyst\\Sentry\\Persistence\\SentryPersistence;\n+use Cartalyst\\Sentry\\Reminders\\IlluminateReminderRepository;\n+use Cartalyst\\Sentry\\Reminders\\ReminderRepositoryInterface;\n use Cartalyst\\Sentry\\Sessions\\NativeSession;\n-use Cartalyst\\Sentry\\Sessions\\SessionInterface;\n-use Cartalyst\\Sentry\\Throttling\\Eloquent\\Provider as ThrottleProvider;\n-use Cartalyst\\Sentry\\Throttling\\ProviderInterface as ThrottleProviderInterface;\n-use Cartalyst\\Sentry\\Users\\LoginRequiredException;\n-use Cartalyst\\Sentry\\Users\\PasswordRequiredException;\n-use Cartalyst\\Sentry\\Users\\Eloquent\\Provider as UserProvider;\n-use Cartalyst\\Sentry\\Users\\ProviderInterface as UserProviderInterface;\n+use Cartalyst\\Sentry\\Users\\IlluminateUserRepository;\n+use Cartalyst\\Sentry\\Users\\UserRepositoryInterface;\n use Cartalyst\\Sentry\\Users\\UserInterface;\n-use Cartalyst\\Sentry\\Users\\UserNotFoundException;\n-use Cartalyst\\Sentry\\Users\\UserNotActivatedException;\n+use Closure;\n+use Illuminate\\Events\\Dispatcher;\n \n class Sentry {\n \n \t/**\n-\t * The user that's been retrieved and is used\n-\t * for authentication. Authentication methods\n-\t * are available for finding the user to set\n-\t * here.\n+\t * The current cached, logged in user.\n \t *\n \t * @var \\Cartalyst\\Sentry\\Users\\UserInterface\n \t */\n \tprotected $user;\n \n \t/**\n-\t * The session driver used by Sentry.\n+\t * The persistence driver (the class which actually manages sessions).\n \t *\n-\t * @var \\Cartalyst\\Sentry\\Sessions\\SessionInterface\n+\t * @var \\Cartalyst\\Sentry\\Persistence\\PersistenceInterface\n \t */\n-\tprotected $session;\n+\tprotected $persistence;\n \n \t/**\n-\t * The cookie driver used by Sentry.\n+\t * User repository.\n \t *\n-\t * @var \\Cartalyst\\Sentry\\Cookies\\CookieInterface\n+\t * @var \\Cartalyst\\Sentry\\Users\\UserRepositoryInterface\n \t */\n-\tprotected $cookie;\n+\tprotected $users;\n \n \t/**\n-\t * The user provider, used for retrieving\n-\t * objects which implement the Sentry user\n-\t * interface.\n+\t * Cached, available methods on the user repository, used for dynamic calls.\n \t *\n-\t * @var \\Cartalyst\\Sentry\\Users\\ProviderInterface\n+\t * @var array\n \t */\n-\tprotected $userProvider;\n+\tprotected $userMethods = array();\n \n \t/**\n-\t * The group provider, used for retrieving\n-\t * objects which implement the Sentry group\n-\t * interface.\n+\t * Group repository.\n \t *\n-\t * @var \\Cartalyst\\Sentry\\Groups\\ProviderInterface\n+\t * @var \\Cartalyst\\Sentry\\Groups\\GroupRepositoryInterface\n \t */\n-\tprotected $groupProvider;\n+\tprotected $groups;\n \n \t/**\n-\t * The throttle provider, used for retrieving\n-\t * objects which implement the Sentry throttling\n-\t * interface.\n+\t * Event dispatcher.\n \t *\n-\t * @var \\Cartalyst\\Sentry\\Throttling\\ProviderInterface\n+\t * @var \\Illuminate\\Events\\Dispatcher\n \t */\n-\tprotected $throttleProvider;\n+\tprotected $dispatcher;\n \n \t/**\n-\t * The client's IP address associated with Sentry.\n+\t * Array that holds all the enabled checkpoints.\n \t *\n-\t * @var string\n+\t * @var array\n \t */\n-\tprotected $ipAddress = '0.0.0.0';\n+\tprotected $checkpoints = array();\n \n \t/**\n-\t * Create a new Sentry object.\n+\t * Activations repository.\n \t *\n-\t * @param  \\Cartalyst\\Sentry\\Users\\ProviderInterface $userProvider\n-\t * @param  \\Cartalyst\\Sentry\\Groups\\ProviderInterface $groupProvider\n-\t * @param  \\Cartalyst\\Sentry\\Throttling\\ProviderInterface $throttleProvider\n-\t * @param  \\Cartalyst\\Sentry\\Sessions\\SessionInterface $session\n-\t * @param  \\Cartalyst\\Sentry\\Cookies\\CookieInterface $cookie\n-\t * @param  string $ipAddress\n-\t * @return void\n+\t * @var \\Cartalyst\\Sentry\\Activations\\ActivationRepositoryInterface\n+\t */\n+\tprotected $activations;\n+\n+\t/**\n+\t * Reminders repository.\n+\t *\n+\t * @var \\Cartalyst\\Sentry\\Reminders\\ReminderRepositoryInterface\n+\t */\n+\tprotected $reminders;\n+\n+\t/**\n+\t * The closure to retrieve request credentials.\n+\t *\n+\t * @var \\Closure\n \t */\n-\tpublic function __construct(\n-\t\tUserProviderInterface $userProvider = null,\n-\t\tGroupProviderInterface $groupProvider = null,\n-\t\tThrottleProviderInterface $throttleProvider = null,\n-\t\tSessionInterface $session = null,\n-\t\tCookieInterface $cookie = null,\n-\t\t$ipAddress = null\n-\t)\n+\tprotected $requestCredentials;\n+\n+\t/**\n+\t * The closure used to create a basic response for failed HTTP auth.\n+\t *\n+\t * @var \\Closure\n+\t */\n+\tprotected $basicResponse;\n+\n+\t/**\n+\t * Create a new Sentry instance.\n+\t *\n+\t * @param  \\Cartalyst\\Sentry\\Persistence\\PersistenceInterface  $persistence\n+\t * @param  \\Cartalyst\\Sentry\\Groups\\GroupRepositoryInterface  $groups\n+\t * @param  \\Cartalyst\\Sentry\\Users\\UserRepositoryInterface  $users\n+\t */\n+\tpublic function __construct(PersistenceInterface $persistence = null, UserRepositoryInterface $users = null, GroupRepositoryInterface $groups = null)\n \t{\n-\t\t$this->userProvider     = $userProvider ?: new UserProvider(new NativeHasher);\n-\t\t$this->groupProvider    = $groupProvider ?: new GroupProvider;\n-\t\t$this->throttleProvider = $throttleProvider ?: new ThrottleProvider($this->userProvider);\n+\t\tif (isset($persistence))\n+\t\t{\n+\t\t\t$this->persistence = $persistence;\n+\t\t}\n \n-\t\t$this->session          = $session ?: new NativeSession;\n-\t\t$this->cookie           = $cookie ?: new NativeCookie;\n+\t\tif (isset($users))\n+\t\t{\n+\t\t\t$this->users = $users;\n+\t\t}\n \n-\t\tif (isset($ipAddress))\n+\t\tif (isset($groups))\n \t\t{\n-\t\t\t$this->ipAddress = $ipAddress;\n+\t\t\t$this->groups = $groups;\n \t\t}\n \t}\n \n \t/**\n-\t * Registers a user by giving the required credentials\n-\t * and an optional flag for whether to activate the user.\n+\t * Registers a user. You may provide a callback to occur before the user\n+\t * is saved, or provide a true boolean as a shortcut to activation.\n \t *\n \t * @param  array  $credentials\n-\t * @param  bool   $activate\n-\t * @return \\Cartalyst\\Sentry\\Users\\UserInterface\n+\t * @param  \\Closure|bool  $callback\n+\t * @return \\Cartalyst\\Sentry\\Users\\UserInteface|bool\n+\t * @throws \\InvalidArgumentException\n \t */\n-\tpublic function register(array $credentials, $activate = false)\n+\tpublic function register(array $credentials, $callback = null)\n \t{\n-\t\t$user = $this->userProvider->create($credentials);\n+\t\tif ($callback !== null and ! $callback instanceof Closure and ! is_bool($callback))\n+\t\t{\n+\t\t\tthrow new \\InvalidArgumentException('You must provide a closure or a boolean.');\n+\t\t}\n+\n+\t\t$valid = $this->users->validForCreation($credentials);\n \n-\t\tif ($activate)\n+\t\tif ($valid === false)\n \t\t{\n-\t\t\t$user->attemptActivation($user->getActivationCode());\n+\t\t\treturn false;\n \t\t}\n \n-\t\treturn $this->user = $user;\n-\t}\n+\t\t$argument = $callback instanceof Closure ? $callback : null;\n \n+\t\t$user = $this->users->create($credentials, $argument);\n+\n+\t\tif ($callback === true)\n+\t\t{\n+\t\t\t$this->activate($user);\n+\t\t}\n+\n+\t\treturn $user;\n+\t}\n \n \t/**\n-\t * Attempts to authenticate the given user\n-\t * according to the passed credentials.\n+\t * Registers and activates the user.\n \t *\n \t * @param  array  $credentials\n-\t * @param  bool   $remember\n-\t * @return \\Cartalyst\\Sentry\\Users\\UserInterface\n-\t * @throws \\Cartalyst\\Sentry\\Throttling\\UserBannedException\n-\t * @throws \\Cartalyst\\Sentry\\Throttling\\UserSuspendedException\n-\t * @throws \\Cartalyst\\Sentry\\Users\\LoginRequiredException\n-\t * @throws \\Cartalyst\\Sentry\\Users\\PasswordRequiredException\n-\t * @throws \\Cartalyst\\Sentry\\Users\\UserNotFoundException\n+\t * @return \\Cartalyst\\Sentry\\Users\\UserInteface|bool\n \t */\n-\tpublic function authenticate(array $credentials, $remember = false)\n+\tpublic function registerAndActivate(array $credentials)\n \t{\n-\t\t// We'll default to the login name field, but fallback to a hard-coded\n-\t\t// 'login' key in the array that was passed.\n-\t\t$loginName = $this->userProvider->getEmptyUser()->getLoginName();\n-\t\t$loginCredentialKey = (isset($credentials[$loginName])) ? $loginName : 'login';\n+\t\treturn $this->register($credentials, true);\n+\t}\n \n-\t\tif (empty($credentials[$loginCredentialKey]))\n+\t/**\n+\t * Activates the given user.\n+\t *\n+\t * @param  \\Cartalyst\\Sentry\\Users\\UserInterface  $user\n+\t * @return bool\n+\t * @throws \\InvalidArgumentException\n+\t */\n+\tpublic function activate($user)\n+\t{\n+\t\tif (is_string($user))\n \t\t{\n-\t\t\tthrow new LoginRequiredException(\"The [$loginCredentialKey] attribute is required.\");\n-\t\t}\n+\t\t\t$users = $this->getUserRepository();\n \n-\t\tif (empty($credentials['password']))\n-\t\t{\n-\t\t\tthrow new PasswordRequiredException('The password attribute is required.');\n+\t\t\t$user = $users->findById($user);\n \t\t}\n-\n-\t\t// If the user did the fallback 'login' key for the login code which\n-\t\t// did not match the actual login name, we'll adjust the array so the\n-\t\t// actual login name is provided.\n-\t\tif ($loginCredentialKey !== $loginName)\n+\t\telseif (is_array($user))\n \t\t{\n-\t\t\t$credentials[$loginName] = $credentials[$loginCredentialKey];\n-\t\t\tunset($credentials[$loginCredentialKey]);\n+\t\t\t$users = $this->getUserRepository();\n+\n+\t\t\t$user = $users->findByCredentials($user);\n \t\t}\n \n-\t\t// If throttling is enabled, we'll firstly check the throttle.\n-\t\t// This will tell us if the user is banned before we even attempt\n-\t\t// to authenticate them\n-\t\tif ($throttlingEnabled = $this->throttleProvider->isEnabled())\n+\t\tif ( ! $user instanceof UserInterface)\n \t\t{\n-\t\t\tif ($throttle = $this->throttleProvider->findByUserLogin($credentials[$loginName], $this->ipAddress))\n-\t\t\t{\n-\t\t\t\t$throttle->check();\n-\t\t\t}\n+\t\t\tthrow new \\InvalidArgumentException('No valid user was provided.');\n \t\t}\n \n-\t\ttry\n+\t\t$activations = $this->getActivationsRepository();\n+\n+\t\t$code = $activations->create($user);\n+\n+\t\treturn $activations->complete($user, $code);\n+\t}\n+\n+\t/**\n+\t * Checks to see if a user is logged in.\n+\t *\n+\t * @return \\Cartalyst\\Sentry\\Users\\UserInterface|bool\n+\t * @todo   IS this where we would throw exceptions? (Not Activated etc)\n+\t */\n+\tpublic function check()\n+\t{\n+\t\t$code = $this->persistence->check();\n+\n+\t\tif ($code === null)\n \t\t{\n-\t\t\t$user = $this->userProvider->findByCredentials($credentials);\n+\t\t\treturn false;\n \t\t}\n-\t\tcatch (UserNotFoundException $e)\n-\t\t{\n-\t\t\tif ($throttlingEnabled and isset($throttle))\n-\t\t\t{\n-\t\t\t\t$throttle->addLoginAttempt();\n-\t\t\t}\n \n-\t\t\tthrow $e;\n-\t\t}\n+\t\t$user = $this->users->findByPersistenceCode($code);\n \n-\t\tif ($throttlingEnabled and isset($throttle))\n+\t\tif ($user === null)\n \t\t{\n-\t\t\t$throttle->clearLoginAttempts();\n+\t\t\treturn false;\n \t\t}\n \n-\t\t$user->clearResetPassword();\n+\t\tif ( ! $this->cycleCheckpoints('check', $user))\n+\t\t{\n+\t\t\treturn false;\n+\t\t}\n \n-\t\t$this->login($user, $remember);\n+\t\treturn $this->user = $user;\n+\t}\n \n-\t\treturn $this->user;\n+\t/**\n+\t * Checks to see if a user is logged in, bypassing checkpoints\n+\t *\n+\t * @return \\Cartalyst\\Sentry\\Users\\UserInterface|bool\n+\t */\n+\tpublic function forceCheck()\n+\t{\n+\t\treturn $this->bypassCheckpoints(function($sentry)\n+\t\t{\n+\t\t\treturn $sentry->check();\n+\t\t});\n \t}\n \n \t/**\n-\t * Alias for authenticating with the remember flag checked.\n+\t * Returns if we are currently a guest.\n \t *\n-\t * @param  array  $credentials\n-\t * @return \\Cartalyst\\Sentry\\Users\\UserInterface\n+\t * @return \\Cartalyst\\Sentry\\Users\\UserInterface|bool\n \t */\n-\tpublic function authenticateAndRemember(array $credentials)\n+\tpublic function guest()\n \t{\n-\t\treturn $this->authenticate($credentials, true);\n+\t\treturn ! $this->check();\n \t}\n \n \t/**\n-\t * Check to see if the user is logged in and activated, and hasn't been banned or suspended.\n+\t * Authenticates a user, with \"remember\" flag.\n \t *\n-\t * @return bool\n+\t * @param  \\Cartalyst\\Sentry\\Users\\UserInterface|array  $credentials\n+\t * @param  bool  $remember\n+\t * @param  bool  $bool\n+\t * @return \\Cartalyst\\Sentry\\Users\\UserInterface|bool\n \t */\n-\tpublic function check()\n+\tpublic function authenticate($credentials, $remember = false, $login = true)\n \t{\n-\t\tif (is_null($this->user))\n+\t\tif ($credentials instanceof UserInterface)\n \t\t{\n-\t\t\t// Check session first, follow by cookie\n-\t\t\tif ( ! $userArray = $this->session->get() and ! $userArray = $this->cookie->get())\n-\t\t\t{\n-\t\t\t\treturn false;\n-\t\t\t}\n-\n-\t\t\t// Now check our user is an array with two elements,\n-\t\t\t// the username followed by the persist code\n-\t\t\tif ( ! is_array($userArray) or count($userArray) !== 2)\n-\t\t\t{\n-\t\t\t\treturn false;\n-\t\t\t}\n+\t\t\t$user = $credentials;\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\t$user = $this->users->findByCredentials($credentials);\n \n-\t\t\tlist($id, $persistCode) = $userArray;\n+\t\t\t$valid = $user !== null ? $this->users->validateCredentials($user, $credentials) : false;\n \n-\t\t\t// Let's find our user\n-\t\t\ttry\n+\t\t\tif ($user === null or $valid === false)\n \t\t\t{\n-\t\t\t\t$user = $this->getUserProvider()->findById($id);\n-\t\t\t}\n-\t\t\tcatch (UserNotFoundException $e)\n-\t\t\t{\n-\t\t\t\treturn false;\n-\t\t\t}\n+\t\t\t\t$this->cycleCheckpoints('fail', $user, false);\n \n-\t\t\t// Great! Let's check the session's persist code\n-\t\t\t// against the user. If it fails, somebody has tampered\n-\t\t\t// with the cookie / session data and we're not allowing\n-\t\t\t// a login\n-\t\t\tif ( ! $user->checkPersistCode($persistCode))\n-\t\t\t{\n \t\t\t\treturn false;\n \t\t\t}\n-\n-\t\t\t// Now we'll set the user property on Sentry\n-\t\t\t$this->user = $user;\n \t\t}\n \n-\t\t// Let's check our cached user is indeed activated\n-\t\tif ( ! $user = $this->getUser() or ! $user->isActivated())\n+\t\tif ( ! $this->cycleCheckpoints('login', $user))\n \t\t{\n \t\t\treturn false;\n \t\t}\n-\t\t// If throttling is enabled we check it's status\n-\t\tif( $this->getThrottleProvider()->isEnabled())\n-\t\t{\n-\t\t\t// Check the throttle status\n-\t\t\t$throttle = $this->getThrottleProvider()->findByUser( $user );\n \n-\t\t\tif( $throttle->isBanned() or $throttle->isSuspended())\n-\t\t\t{\n-\t\t\t\t$this->logout();\n-\t\t\t\treturn false;\n-\t\t\t}\n+\t\tif ($login === false)\n+\t\t{\n+\t\t\treturn true;",
        "path": "src/Cartalyst/Sentry/Sentry.php",
        "position": null,
        "original_position": 477,
        "commit_id": "4e6abef300ec3713b40e85177c01c8d7192fc582",
        "original_commit_id": "15dede22d38a1a9323ad1a94c45c73dba0505c19",
        "user": {
            "login": "suwardany",
            "id": 2053770,
            "node_id": "MDQ6VXNlcjIwNTM3NzA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/2053770?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/suwardany",
            "html_url": "https://github.com/suwardany",
            "followers_url": "https://api.github.com/users/suwardany/followers",
            "following_url": "https://api.github.com/users/suwardany/following{/other_user}",
            "gists_url": "https://api.github.com/users/suwardany/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/suwardany/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/suwardany/subscriptions",
            "organizations_url": "https://api.github.com/users/suwardany/orgs",
            "repos_url": "https://api.github.com/users/suwardany/repos",
            "events_url": "https://api.github.com/users/suwardany/events{/privacy}",
            "received_events_url": "https://api.github.com/users/suwardany/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Hey @bencorlett does it make sense to return the user here instead of true ? for the stateless authentication.\n",
        "created_at": "2014-01-15T06:57:11Z",
        "updated_at": "2014-05-26T10:00:32Z",
        "html_url": "https://github.com/cartalyst/sentry/pull/317#discussion_r8887895",
        "pull_request_url": "https://api.github.com/repos/cartalyst/sentry/pulls/317",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/8887895"
            },
            "html": {
                "href": "https://github.com/cartalyst/sentry/pull/317#discussion_r8887895"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/317"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/8890096",
        "pull_request_review_id": null,
        "id": 8890096,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4OTAwOTY=",
        "diff_hunk": "@@ -11,710 +11,922 @@\n  * the following URL: http://www.opensource.org/licenses/BSD-3-Clause\n  *\n  * @package    Sentry\n- * @version    2.0.0\n+ * @version    3.0.0\n  * @author     Cartalyst LLC\n  * @license    BSD License (3-clause)\n- * @copyright  (c) 2011 - 2013, Cartalyst LLC\n+ * @copyright  (c) 2011-2014, Cartalyst LLC\n  * @link       http://cartalyst.com\n  */\n \n-use Cartalyst\\Sentry\\Cookies\\CookieInterface;\n+use Cartalyst\\Sentry\\Activations\\IlluminateActivationRepository;\n+use Cartalyst\\Sentry\\Activations\\ActivationRepositoryInterface;\n+use Cartalyst\\Sentry\\Checkpoints\\CheckpointInterface;\n use Cartalyst\\Sentry\\Cookies\\NativeCookie;\n-use Cartalyst\\Sentry\\Groups\\Eloquent\\Provider as GroupProvider;\n-use Cartalyst\\Sentry\\Groups\\ProviderInterface as GroupProviderInterface;\n+use Cartalyst\\Sentry\\Groups\\IlluminateGroupRepository;\n+use Cartalyst\\Sentry\\Groups\\GroupRepositoryInterface;\n use Cartalyst\\Sentry\\Hashing\\NativeHasher;\n+use Cartalyst\\Sentry\\Persistence\\PersistenceInterface;\n+use Cartalyst\\Sentry\\Persistence\\SentryPersistence;\n+use Cartalyst\\Sentry\\Reminders\\IlluminateReminderRepository;\n+use Cartalyst\\Sentry\\Reminders\\ReminderRepositoryInterface;\n use Cartalyst\\Sentry\\Sessions\\NativeSession;\n-use Cartalyst\\Sentry\\Sessions\\SessionInterface;\n-use Cartalyst\\Sentry\\Throttling\\Eloquent\\Provider as ThrottleProvider;\n-use Cartalyst\\Sentry\\Throttling\\ProviderInterface as ThrottleProviderInterface;\n-use Cartalyst\\Sentry\\Users\\LoginRequiredException;\n-use Cartalyst\\Sentry\\Users\\PasswordRequiredException;\n-use Cartalyst\\Sentry\\Users\\Eloquent\\Provider as UserProvider;\n-use Cartalyst\\Sentry\\Users\\ProviderInterface as UserProviderInterface;\n+use Cartalyst\\Sentry\\Users\\IlluminateUserRepository;\n+use Cartalyst\\Sentry\\Users\\UserRepositoryInterface;\n use Cartalyst\\Sentry\\Users\\UserInterface;\n-use Cartalyst\\Sentry\\Users\\UserNotFoundException;\n-use Cartalyst\\Sentry\\Users\\UserNotActivatedException;\n+use Closure;\n+use Illuminate\\Events\\Dispatcher;\n \n class Sentry {\n \n \t/**\n-\t * The user that's been retrieved and is used\n-\t * for authentication. Authentication methods\n-\t * are available for finding the user to set\n-\t * here.\n+\t * The current cached, logged in user.\n \t *\n \t * @var \\Cartalyst\\Sentry\\Users\\UserInterface\n \t */\n \tprotected $user;\n \n \t/**\n-\t * The session driver used by Sentry.\n+\t * The persistence driver (the class which actually manages sessions).\n \t *\n-\t * @var \\Cartalyst\\Sentry\\Sessions\\SessionInterface\n+\t * @var \\Cartalyst\\Sentry\\Persistence\\PersistenceInterface\n \t */\n-\tprotected $session;\n+\tprotected $persistence;\n \n \t/**\n-\t * The cookie driver used by Sentry.\n+\t * User repository.\n \t *\n-\t * @var \\Cartalyst\\Sentry\\Cookies\\CookieInterface\n+\t * @var \\Cartalyst\\Sentry\\Users\\UserRepositoryInterface\n \t */\n-\tprotected $cookie;\n+\tprotected $users;\n \n \t/**\n-\t * The user provider, used for retrieving\n-\t * objects which implement the Sentry user\n-\t * interface.\n+\t * Cached, available methods on the user repository, used for dynamic calls.\n \t *\n-\t * @var \\Cartalyst\\Sentry\\Users\\ProviderInterface\n+\t * @var array\n \t */\n-\tprotected $userProvider;\n+\tprotected $userMethods = array();\n \n \t/**\n-\t * The group provider, used for retrieving\n-\t * objects which implement the Sentry group\n-\t * interface.\n+\t * Group repository.\n \t *\n-\t * @var \\Cartalyst\\Sentry\\Groups\\ProviderInterface\n+\t * @var \\Cartalyst\\Sentry\\Groups\\GroupRepositoryInterface\n \t */\n-\tprotected $groupProvider;\n+\tprotected $groups;\n \n \t/**\n-\t * The throttle provider, used for retrieving\n-\t * objects which implement the Sentry throttling\n-\t * interface.\n+\t * Event dispatcher.\n \t *\n-\t * @var \\Cartalyst\\Sentry\\Throttling\\ProviderInterface\n+\t * @var \\Illuminate\\Events\\Dispatcher\n \t */\n-\tprotected $throttleProvider;\n+\tprotected $dispatcher;\n \n \t/**\n-\t * The client's IP address associated with Sentry.\n+\t * Array that holds all the enabled checkpoints.\n \t *\n-\t * @var string\n+\t * @var array\n \t */\n-\tprotected $ipAddress = '0.0.0.0';\n+\tprotected $checkpoints = array();\n \n \t/**\n-\t * Create a new Sentry object.\n+\t * Activations repository.\n \t *\n-\t * @param  \\Cartalyst\\Sentry\\Users\\ProviderInterface $userProvider\n-\t * @param  \\Cartalyst\\Sentry\\Groups\\ProviderInterface $groupProvider\n-\t * @param  \\Cartalyst\\Sentry\\Throttling\\ProviderInterface $throttleProvider\n-\t * @param  \\Cartalyst\\Sentry\\Sessions\\SessionInterface $session\n-\t * @param  \\Cartalyst\\Sentry\\Cookies\\CookieInterface $cookie\n-\t * @param  string $ipAddress\n-\t * @return void\n+\t * @var \\Cartalyst\\Sentry\\Activations\\ActivationRepositoryInterface\n+\t */\n+\tprotected $activations;\n+\n+\t/**\n+\t * Reminders repository.\n+\t *\n+\t * @var \\Cartalyst\\Sentry\\Reminders\\ReminderRepositoryInterface\n+\t */\n+\tprotected $reminders;\n+\n+\t/**\n+\t * The closure to retrieve request credentials.\n+\t *\n+\t * @var \\Closure\n \t */\n-\tpublic function __construct(\n-\t\tUserProviderInterface $userProvider = null,\n-\t\tGroupProviderInterface $groupProvider = null,\n-\t\tThrottleProviderInterface $throttleProvider = null,\n-\t\tSessionInterface $session = null,\n-\t\tCookieInterface $cookie = null,\n-\t\t$ipAddress = null\n-\t)\n+\tprotected $requestCredentials;\n+\n+\t/**\n+\t * The closure used to create a basic response for failed HTTP auth.\n+\t *\n+\t * @var \\Closure\n+\t */\n+\tprotected $basicResponse;\n+\n+\t/**\n+\t * Create a new Sentry instance.\n+\t *\n+\t * @param  \\Cartalyst\\Sentry\\Persistence\\PersistenceInterface  $persistence\n+\t * @param  \\Cartalyst\\Sentry\\Groups\\GroupRepositoryInterface  $groups\n+\t * @param  \\Cartalyst\\Sentry\\Users\\UserRepositoryInterface  $users\n+\t */\n+\tpublic function __construct(PersistenceInterface $persistence = null, UserRepositoryInterface $users = null, GroupRepositoryInterface $groups = null)\n \t{\n-\t\t$this->userProvider     = $userProvider ?: new UserProvider(new NativeHasher);\n-\t\t$this->groupProvider    = $groupProvider ?: new GroupProvider;\n-\t\t$this->throttleProvider = $throttleProvider ?: new ThrottleProvider($this->userProvider);\n+\t\tif (isset($persistence))\n+\t\t{\n+\t\t\t$this->persistence = $persistence;\n+\t\t}\n \n-\t\t$this->session          = $session ?: new NativeSession;\n-\t\t$this->cookie           = $cookie ?: new NativeCookie;\n+\t\tif (isset($users))\n+\t\t{\n+\t\t\t$this->users = $users;\n+\t\t}\n \n-\t\tif (isset($ipAddress))\n+\t\tif (isset($groups))\n \t\t{\n-\t\t\t$this->ipAddress = $ipAddress;\n+\t\t\t$this->groups = $groups;\n \t\t}\n \t}\n \n \t/**\n-\t * Registers a user by giving the required credentials\n-\t * and an optional flag for whether to activate the user.\n+\t * Registers a user. You may provide a callback to occur before the user\n+\t * is saved, or provide a true boolean as a shortcut to activation.\n \t *\n \t * @param  array  $credentials\n-\t * @param  bool   $activate\n-\t * @return \\Cartalyst\\Sentry\\Users\\UserInterface\n+\t * @param  \\Closure|bool  $callback\n+\t * @return \\Cartalyst\\Sentry\\Users\\UserInteface|bool\n+\t * @throws \\InvalidArgumentException\n \t */\n-\tpublic function register(array $credentials, $activate = false)\n+\tpublic function register(array $credentials, $callback = null)\n \t{\n-\t\t$user = $this->userProvider->create($credentials);\n+\t\tif ($callback !== null and ! $callback instanceof Closure and ! is_bool($callback))\n+\t\t{\n+\t\t\tthrow new \\InvalidArgumentException('You must provide a closure or a boolean.');\n+\t\t}\n+\n+\t\t$valid = $this->users->validForCreation($credentials);\n \n-\t\tif ($activate)\n+\t\tif ($valid === false)\n \t\t{\n-\t\t\t$user->attemptActivation($user->getActivationCode());\n+\t\t\treturn false;\n \t\t}\n \n-\t\treturn $this->user = $user;\n-\t}\n+\t\t$argument = $callback instanceof Closure ? $callback : null;\n \n+\t\t$user = $this->users->create($credentials, $argument);\n+\n+\t\tif ($callback === true)\n+\t\t{\n+\t\t\t$this->activate($user);\n+\t\t}\n+\n+\t\treturn $user;\n+\t}\n \n \t/**\n-\t * Attempts to authenticate the given user\n-\t * according to the passed credentials.\n+\t * Registers and activates the user.\n \t *\n \t * @param  array  $credentials\n-\t * @param  bool   $remember\n-\t * @return \\Cartalyst\\Sentry\\Users\\UserInterface\n-\t * @throws \\Cartalyst\\Sentry\\Throttling\\UserBannedException\n-\t * @throws \\Cartalyst\\Sentry\\Throttling\\UserSuspendedException\n-\t * @throws \\Cartalyst\\Sentry\\Users\\LoginRequiredException\n-\t * @throws \\Cartalyst\\Sentry\\Users\\PasswordRequiredException\n-\t * @throws \\Cartalyst\\Sentry\\Users\\UserNotFoundException\n+\t * @return \\Cartalyst\\Sentry\\Users\\UserInteface|bool\n \t */\n-\tpublic function authenticate(array $credentials, $remember = false)\n+\tpublic function registerAndActivate(array $credentials)\n \t{\n-\t\t// We'll default to the login name field, but fallback to a hard-coded\n-\t\t// 'login' key in the array that was passed.\n-\t\t$loginName = $this->userProvider->getEmptyUser()->getLoginName();\n-\t\t$loginCredentialKey = (isset($credentials[$loginName])) ? $loginName : 'login';\n+\t\treturn $this->register($credentials, true);\n+\t}\n \n-\t\tif (empty($credentials[$loginCredentialKey]))\n+\t/**\n+\t * Activates the given user.\n+\t *\n+\t * @param  \\Cartalyst\\Sentry\\Users\\UserInterface  $user\n+\t * @return bool\n+\t * @throws \\InvalidArgumentException\n+\t */\n+\tpublic function activate($user)\n+\t{\n+\t\tif (is_string($user))\n \t\t{\n-\t\t\tthrow new LoginRequiredException(\"The [$loginCredentialKey] attribute is required.\");\n-\t\t}\n+\t\t\t$users = $this->getUserRepository();\n \n-\t\tif (empty($credentials['password']))\n-\t\t{\n-\t\t\tthrow new PasswordRequiredException('The password attribute is required.');\n+\t\t\t$user = $users->findById($user);\n \t\t}\n-\n-\t\t// If the user did the fallback 'login' key for the login code which\n-\t\t// did not match the actual login name, we'll adjust the array so the\n-\t\t// actual login name is provided.\n-\t\tif ($loginCredentialKey !== $loginName)\n+\t\telseif (is_array($user))\n \t\t{\n-\t\t\t$credentials[$loginName] = $credentials[$loginCredentialKey];\n-\t\t\tunset($credentials[$loginCredentialKey]);\n+\t\t\t$users = $this->getUserRepository();\n+\n+\t\t\t$user = $users->findByCredentials($user);\n \t\t}\n \n-\t\t// If throttling is enabled, we'll firstly check the throttle.\n-\t\t// This will tell us if the user is banned before we even attempt\n-\t\t// to authenticate them\n-\t\tif ($throttlingEnabled = $this->throttleProvider->isEnabled())\n+\t\tif ( ! $user instanceof UserInterface)\n \t\t{\n-\t\t\tif ($throttle = $this->throttleProvider->findByUserLogin($credentials[$loginName], $this->ipAddress))\n-\t\t\t{\n-\t\t\t\t$throttle->check();\n-\t\t\t}\n+\t\t\tthrow new \\InvalidArgumentException('No valid user was provided.');\n \t\t}\n \n-\t\ttry\n+\t\t$activations = $this->getActivationsRepository();\n+\n+\t\t$code = $activations->create($user);\n+\n+\t\treturn $activations->complete($user, $code);\n+\t}\n+\n+\t/**\n+\t * Checks to see if a user is logged in.\n+\t *\n+\t * @return \\Cartalyst\\Sentry\\Users\\UserInterface|bool\n+\t * @todo   IS this where we would throw exceptions? (Not Activated etc)\n+\t */\n+\tpublic function check()\n+\t{\n+\t\t$code = $this->persistence->check();\n+\n+\t\tif ($code === null)\n \t\t{\n-\t\t\t$user = $this->userProvider->findByCredentials($credentials);\n+\t\t\treturn false;\n \t\t}\n-\t\tcatch (UserNotFoundException $e)\n-\t\t{\n-\t\t\tif ($throttlingEnabled and isset($throttle))\n-\t\t\t{\n-\t\t\t\t$throttle->addLoginAttempt();\n-\t\t\t}\n \n-\t\t\tthrow $e;\n-\t\t}\n+\t\t$user = $this->users->findByPersistenceCode($code);\n \n-\t\tif ($throttlingEnabled and isset($throttle))\n+\t\tif ($user === null)\n \t\t{\n-\t\t\t$throttle->clearLoginAttempts();\n+\t\t\treturn false;\n \t\t}\n \n-\t\t$user->clearResetPassword();\n+\t\tif ( ! $this->cycleCheckpoints('check', $user))\n+\t\t{\n+\t\t\treturn false;\n+\t\t}\n \n-\t\t$this->login($user, $remember);\n+\t\treturn $this->user = $user;\n+\t}\n \n-\t\treturn $this->user;\n+\t/**\n+\t * Checks to see if a user is logged in, bypassing checkpoints\n+\t *\n+\t * @return \\Cartalyst\\Sentry\\Users\\UserInterface|bool\n+\t */\n+\tpublic function forceCheck()\n+\t{\n+\t\treturn $this->bypassCheckpoints(function($sentry)\n+\t\t{\n+\t\t\treturn $sentry->check();\n+\t\t});\n \t}\n \n \t/**\n-\t * Alias for authenticating with the remember flag checked.\n+\t * Returns if we are currently a guest.\n \t *\n-\t * @param  array  $credentials\n-\t * @return \\Cartalyst\\Sentry\\Users\\UserInterface\n+\t * @return \\Cartalyst\\Sentry\\Users\\UserInterface|bool\n \t */\n-\tpublic function authenticateAndRemember(array $credentials)\n+\tpublic function guest()\n \t{\n-\t\treturn $this->authenticate($credentials, true);\n+\t\treturn ! $this->check();\n \t}\n \n \t/**\n-\t * Check to see if the user is logged in and activated, and hasn't been banned or suspended.\n+\t * Authenticates a user, with \"remember\" flag.\n \t *\n-\t * @return bool\n+\t * @param  \\Cartalyst\\Sentry\\Users\\UserInterface|array  $credentials\n+\t * @param  bool  $remember\n+\t * @param  bool  $bool\n+\t * @return \\Cartalyst\\Sentry\\Users\\UserInterface|bool\n \t */\n-\tpublic function check()\n+\tpublic function authenticate($credentials, $remember = false, $login = true)\n \t{\n-\t\tif (is_null($this->user))\n+\t\tif ($credentials instanceof UserInterface)\n \t\t{\n-\t\t\t// Check session first, follow by cookie\n-\t\t\tif ( ! $userArray = $this->session->get() and ! $userArray = $this->cookie->get())\n-\t\t\t{\n-\t\t\t\treturn false;\n-\t\t\t}\n-\n-\t\t\t// Now check our user is an array with two elements,\n-\t\t\t// the username followed by the persist code\n-\t\t\tif ( ! is_array($userArray) or count($userArray) !== 2)\n-\t\t\t{\n-\t\t\t\treturn false;\n-\t\t\t}\n+\t\t\t$user = $credentials;\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\t$user = $this->users->findByCredentials($credentials);\n \n-\t\t\tlist($id, $persistCode) = $userArray;\n+\t\t\t$valid = $user !== null ? $this->users->validateCredentials($user, $credentials) : false;\n \n-\t\t\t// Let's find our user\n-\t\t\ttry\n+\t\t\tif ($user === null or $valid === false)\n \t\t\t{\n-\t\t\t\t$user = $this->getUserProvider()->findById($id);\n-\t\t\t}\n-\t\t\tcatch (UserNotFoundException $e)\n-\t\t\t{\n-\t\t\t\treturn false;\n-\t\t\t}\n+\t\t\t\t$this->cycleCheckpoints('fail', $user, false);\n \n-\t\t\t// Great! Let's check the session's persist code\n-\t\t\t// against the user. If it fails, somebody has tampered\n-\t\t\t// with the cookie / session data and we're not allowing\n-\t\t\t// a login\n-\t\t\tif ( ! $user->checkPersistCode($persistCode))\n-\t\t\t{\n \t\t\t\treturn false;\n \t\t\t}\n-\n-\t\t\t// Now we'll set the user property on Sentry\n-\t\t\t$this->user = $user;\n \t\t}\n \n-\t\t// Let's check our cached user is indeed activated\n-\t\tif ( ! $user = $this->getUser() or ! $user->isActivated())\n+\t\tif ( ! $this->cycleCheckpoints('login', $user))\n \t\t{\n \t\t\treturn false;\n \t\t}\n-\t\t// If throttling is enabled we check it's status\n-\t\tif( $this->getThrottleProvider()->isEnabled())\n-\t\t{\n-\t\t\t// Check the throttle status\n-\t\t\t$throttle = $this->getThrottleProvider()->findByUser( $user );\n \n-\t\t\tif( $throttle->isBanned() or $throttle->isSuspended())\n-\t\t\t{\n-\t\t\t\t$this->logout();\n-\t\t\t\treturn false;\n-\t\t\t}\n+\t\tif ($login === false)\n+\t\t{\n+\t\t\treturn true;",
        "path": "src/Cartalyst/Sentry/Sentry.php",
        "position": null,
        "original_position": 477,
        "commit_id": "4e6abef300ec3713b40e85177c01c8d7192fc582",
        "original_commit_id": "15dede22d38a1a9323ad1a94c45c73dba0505c19",
        "user": {
            "login": "bencorlett",
            "id": 181919,
            "node_id": "MDQ6VXNlcjE4MTkxOQ==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/181919?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bencorlett",
            "html_url": "https://github.com/bencorlett",
            "followers_url": "https://api.github.com/users/bencorlett/followers",
            "following_url": "https://api.github.com/users/bencorlett/following{/other_user}",
            "gists_url": "https://api.github.com/users/bencorlett/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bencorlett/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bencorlett/subscriptions",
            "organizations_url": "https://api.github.com/users/bencorlett/orgs",
            "repos_url": "https://api.github.com/users/bencorlett/repos",
            "events_url": "https://api.github.com/users/bencorlett/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bencorlett/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "What does the other auth method return? As long as they're consistent I guess \n\nSent from my iPhone\nPlease excuse my brevity\n\n> On 15 Jan 2014, at 5:57 pm, Suhayb El Wardany notifications@github.com wrote:\n> \n> In src/Cartalyst/Sentry/Sentry.php:\n> \n> > -           if( $throttle->isBanned() or $throttle->isSuspended())\n> > -           {\n> > -               $this->logout();\n> > -               return false;\n> > -           }\n> > -       if ($login === false)\n> > -       {\n> > -           return true;\n> >   Hey @bencorlett does it make sense to return the user here instead of true ? for the stateless authentication.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n",
        "created_at": "2014-01-15T09:24:22Z",
        "updated_at": "2014-05-26T10:00:32Z",
        "html_url": "https://github.com/cartalyst/sentry/pull/317#discussion_r8890096",
        "pull_request_url": "https://api.github.com/repos/cartalyst/sentry/pulls/317",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/8890096"
            },
            "html": {
                "href": "https://github.com/cartalyst/sentry/pull/317#discussion_r8890096"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/317"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/8890745",
        "pull_request_review_id": null,
        "id": 8890745,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4OTA3NDU=",
        "diff_hunk": "@@ -11,710 +11,922 @@\n  * the following URL: http://www.opensource.org/licenses/BSD-3-Clause\n  *\n  * @package    Sentry\n- * @version    2.0.0\n+ * @version    3.0.0\n  * @author     Cartalyst LLC\n  * @license    BSD License (3-clause)\n- * @copyright  (c) 2011 - 2013, Cartalyst LLC\n+ * @copyright  (c) 2011-2014, Cartalyst LLC\n  * @link       http://cartalyst.com\n  */\n \n-use Cartalyst\\Sentry\\Cookies\\CookieInterface;\n+use Cartalyst\\Sentry\\Activations\\IlluminateActivationRepository;\n+use Cartalyst\\Sentry\\Activations\\ActivationRepositoryInterface;\n+use Cartalyst\\Sentry\\Checkpoints\\CheckpointInterface;\n use Cartalyst\\Sentry\\Cookies\\NativeCookie;\n-use Cartalyst\\Sentry\\Groups\\Eloquent\\Provider as GroupProvider;\n-use Cartalyst\\Sentry\\Groups\\ProviderInterface as GroupProviderInterface;\n+use Cartalyst\\Sentry\\Groups\\IlluminateGroupRepository;\n+use Cartalyst\\Sentry\\Groups\\GroupRepositoryInterface;\n use Cartalyst\\Sentry\\Hashing\\NativeHasher;\n+use Cartalyst\\Sentry\\Persistence\\PersistenceInterface;\n+use Cartalyst\\Sentry\\Persistence\\SentryPersistence;\n+use Cartalyst\\Sentry\\Reminders\\IlluminateReminderRepository;\n+use Cartalyst\\Sentry\\Reminders\\ReminderRepositoryInterface;\n use Cartalyst\\Sentry\\Sessions\\NativeSession;\n-use Cartalyst\\Sentry\\Sessions\\SessionInterface;\n-use Cartalyst\\Sentry\\Throttling\\Eloquent\\Provider as ThrottleProvider;\n-use Cartalyst\\Sentry\\Throttling\\ProviderInterface as ThrottleProviderInterface;\n-use Cartalyst\\Sentry\\Users\\LoginRequiredException;\n-use Cartalyst\\Sentry\\Users\\PasswordRequiredException;\n-use Cartalyst\\Sentry\\Users\\Eloquent\\Provider as UserProvider;\n-use Cartalyst\\Sentry\\Users\\ProviderInterface as UserProviderInterface;\n+use Cartalyst\\Sentry\\Users\\IlluminateUserRepository;\n+use Cartalyst\\Sentry\\Users\\UserRepositoryInterface;\n use Cartalyst\\Sentry\\Users\\UserInterface;\n-use Cartalyst\\Sentry\\Users\\UserNotFoundException;\n-use Cartalyst\\Sentry\\Users\\UserNotActivatedException;\n+use Closure;\n+use Illuminate\\Events\\Dispatcher;\n \n class Sentry {\n \n \t/**\n-\t * The user that's been retrieved and is used\n-\t * for authentication. Authentication methods\n-\t * are available for finding the user to set\n-\t * here.\n+\t * The current cached, logged in user.\n \t *\n \t * @var \\Cartalyst\\Sentry\\Users\\UserInterface\n \t */\n \tprotected $user;\n \n \t/**\n-\t * The session driver used by Sentry.\n+\t * The persistence driver (the class which actually manages sessions).\n \t *\n-\t * @var \\Cartalyst\\Sentry\\Sessions\\SessionInterface\n+\t * @var \\Cartalyst\\Sentry\\Persistence\\PersistenceInterface\n \t */\n-\tprotected $session;\n+\tprotected $persistence;\n \n \t/**\n-\t * The cookie driver used by Sentry.\n+\t * User repository.\n \t *\n-\t * @var \\Cartalyst\\Sentry\\Cookies\\CookieInterface\n+\t * @var \\Cartalyst\\Sentry\\Users\\UserRepositoryInterface\n \t */\n-\tprotected $cookie;\n+\tprotected $users;\n \n \t/**\n-\t * The user provider, used for retrieving\n-\t * objects which implement the Sentry user\n-\t * interface.\n+\t * Cached, available methods on the user repository, used for dynamic calls.\n \t *\n-\t * @var \\Cartalyst\\Sentry\\Users\\ProviderInterface\n+\t * @var array\n \t */\n-\tprotected $userProvider;\n+\tprotected $userMethods = array();\n \n \t/**\n-\t * The group provider, used for retrieving\n-\t * objects which implement the Sentry group\n-\t * interface.\n+\t * Group repository.\n \t *\n-\t * @var \\Cartalyst\\Sentry\\Groups\\ProviderInterface\n+\t * @var \\Cartalyst\\Sentry\\Groups\\GroupRepositoryInterface\n \t */\n-\tprotected $groupProvider;\n+\tprotected $groups;\n \n \t/**\n-\t * The throttle provider, used for retrieving\n-\t * objects which implement the Sentry throttling\n-\t * interface.\n+\t * Event dispatcher.\n \t *\n-\t * @var \\Cartalyst\\Sentry\\Throttling\\ProviderInterface\n+\t * @var \\Illuminate\\Events\\Dispatcher\n \t */\n-\tprotected $throttleProvider;\n+\tprotected $dispatcher;\n \n \t/**\n-\t * The client's IP address associated with Sentry.\n+\t * Array that holds all the enabled checkpoints.\n \t *\n-\t * @var string\n+\t * @var array\n \t */\n-\tprotected $ipAddress = '0.0.0.0';\n+\tprotected $checkpoints = array();\n \n \t/**\n-\t * Create a new Sentry object.\n+\t * Activations repository.\n \t *\n-\t * @param  \\Cartalyst\\Sentry\\Users\\ProviderInterface $userProvider\n-\t * @param  \\Cartalyst\\Sentry\\Groups\\ProviderInterface $groupProvider\n-\t * @param  \\Cartalyst\\Sentry\\Throttling\\ProviderInterface $throttleProvider\n-\t * @param  \\Cartalyst\\Sentry\\Sessions\\SessionInterface $session\n-\t * @param  \\Cartalyst\\Sentry\\Cookies\\CookieInterface $cookie\n-\t * @param  string $ipAddress\n-\t * @return void\n+\t * @var \\Cartalyst\\Sentry\\Activations\\ActivationRepositoryInterface\n+\t */\n+\tprotected $activations;\n+\n+\t/**\n+\t * Reminders repository.\n+\t *\n+\t * @var \\Cartalyst\\Sentry\\Reminders\\ReminderRepositoryInterface\n+\t */\n+\tprotected $reminders;\n+\n+\t/**\n+\t * The closure to retrieve request credentials.\n+\t *\n+\t * @var \\Closure\n \t */\n-\tpublic function __construct(\n-\t\tUserProviderInterface $userProvider = null,\n-\t\tGroupProviderInterface $groupProvider = null,\n-\t\tThrottleProviderInterface $throttleProvider = null,\n-\t\tSessionInterface $session = null,\n-\t\tCookieInterface $cookie = null,\n-\t\t$ipAddress = null\n-\t)\n+\tprotected $requestCredentials;\n+\n+\t/**\n+\t * The closure used to create a basic response for failed HTTP auth.\n+\t *\n+\t * @var \\Closure\n+\t */\n+\tprotected $basicResponse;\n+\n+\t/**\n+\t * Create a new Sentry instance.\n+\t *\n+\t * @param  \\Cartalyst\\Sentry\\Persistence\\PersistenceInterface  $persistence\n+\t * @param  \\Cartalyst\\Sentry\\Groups\\GroupRepositoryInterface  $groups\n+\t * @param  \\Cartalyst\\Sentry\\Users\\UserRepositoryInterface  $users\n+\t */\n+\tpublic function __construct(PersistenceInterface $persistence = null, UserRepositoryInterface $users = null, GroupRepositoryInterface $groups = null)\n \t{\n-\t\t$this->userProvider     = $userProvider ?: new UserProvider(new NativeHasher);\n-\t\t$this->groupProvider    = $groupProvider ?: new GroupProvider;\n-\t\t$this->throttleProvider = $throttleProvider ?: new ThrottleProvider($this->userProvider);\n+\t\tif (isset($persistence))\n+\t\t{\n+\t\t\t$this->persistence = $persistence;\n+\t\t}\n \n-\t\t$this->session          = $session ?: new NativeSession;\n-\t\t$this->cookie           = $cookie ?: new NativeCookie;\n+\t\tif (isset($users))\n+\t\t{\n+\t\t\t$this->users = $users;\n+\t\t}\n \n-\t\tif (isset($ipAddress))\n+\t\tif (isset($groups))\n \t\t{\n-\t\t\t$this->ipAddress = $ipAddress;\n+\t\t\t$this->groups = $groups;\n \t\t}\n \t}\n \n \t/**\n-\t * Registers a user by giving the required credentials\n-\t * and an optional flag for whether to activate the user.\n+\t * Registers a user. You may provide a callback to occur before the user\n+\t * is saved, or provide a true boolean as a shortcut to activation.\n \t *\n \t * @param  array  $credentials\n-\t * @param  bool   $activate\n-\t * @return \\Cartalyst\\Sentry\\Users\\UserInterface\n+\t * @param  \\Closure|bool  $callback\n+\t * @return \\Cartalyst\\Sentry\\Users\\UserInteface|bool\n+\t * @throws \\InvalidArgumentException\n \t */\n-\tpublic function register(array $credentials, $activate = false)\n+\tpublic function register(array $credentials, $callback = null)\n \t{\n-\t\t$user = $this->userProvider->create($credentials);\n+\t\tif ($callback !== null and ! $callback instanceof Closure and ! is_bool($callback))\n+\t\t{\n+\t\t\tthrow new \\InvalidArgumentException('You must provide a closure or a boolean.');\n+\t\t}\n+\n+\t\t$valid = $this->users->validForCreation($credentials);\n \n-\t\tif ($activate)\n+\t\tif ($valid === false)\n \t\t{\n-\t\t\t$user->attemptActivation($user->getActivationCode());\n+\t\t\treturn false;\n \t\t}\n \n-\t\treturn $this->user = $user;\n-\t}\n+\t\t$argument = $callback instanceof Closure ? $callback : null;\n \n+\t\t$user = $this->users->create($credentials, $argument);\n+\n+\t\tif ($callback === true)\n+\t\t{\n+\t\t\t$this->activate($user);\n+\t\t}\n+\n+\t\treturn $user;\n+\t}\n \n \t/**\n-\t * Attempts to authenticate the given user\n-\t * according to the passed credentials.\n+\t * Registers and activates the user.\n \t *\n \t * @param  array  $credentials\n-\t * @param  bool   $remember\n-\t * @return \\Cartalyst\\Sentry\\Users\\UserInterface\n-\t * @throws \\Cartalyst\\Sentry\\Throttling\\UserBannedException\n-\t * @throws \\Cartalyst\\Sentry\\Throttling\\UserSuspendedException\n-\t * @throws \\Cartalyst\\Sentry\\Users\\LoginRequiredException\n-\t * @throws \\Cartalyst\\Sentry\\Users\\PasswordRequiredException\n-\t * @throws \\Cartalyst\\Sentry\\Users\\UserNotFoundException\n+\t * @return \\Cartalyst\\Sentry\\Users\\UserInteface|bool\n \t */\n-\tpublic function authenticate(array $credentials, $remember = false)\n+\tpublic function registerAndActivate(array $credentials)\n \t{\n-\t\t// We'll default to the login name field, but fallback to a hard-coded\n-\t\t// 'login' key in the array that was passed.\n-\t\t$loginName = $this->userProvider->getEmptyUser()->getLoginName();\n-\t\t$loginCredentialKey = (isset($credentials[$loginName])) ? $loginName : 'login';\n+\t\treturn $this->register($credentials, true);\n+\t}\n \n-\t\tif (empty($credentials[$loginCredentialKey]))\n+\t/**\n+\t * Activates the given user.\n+\t *\n+\t * @param  \\Cartalyst\\Sentry\\Users\\UserInterface  $user\n+\t * @return bool\n+\t * @throws \\InvalidArgumentException\n+\t */\n+\tpublic function activate($user)\n+\t{\n+\t\tif (is_string($user))\n \t\t{\n-\t\t\tthrow new LoginRequiredException(\"The [$loginCredentialKey] attribute is required.\");\n-\t\t}\n+\t\t\t$users = $this->getUserRepository();\n \n-\t\tif (empty($credentials['password']))\n-\t\t{\n-\t\t\tthrow new PasswordRequiredException('The password attribute is required.');\n+\t\t\t$user = $users->findById($user);\n \t\t}\n-\n-\t\t// If the user did the fallback 'login' key for the login code which\n-\t\t// did not match the actual login name, we'll adjust the array so the\n-\t\t// actual login name is provided.\n-\t\tif ($loginCredentialKey !== $loginName)\n+\t\telseif (is_array($user))\n \t\t{\n-\t\t\t$credentials[$loginName] = $credentials[$loginCredentialKey];\n-\t\t\tunset($credentials[$loginCredentialKey]);\n+\t\t\t$users = $this->getUserRepository();\n+\n+\t\t\t$user = $users->findByCredentials($user);\n \t\t}\n \n-\t\t// If throttling is enabled, we'll firstly check the throttle.\n-\t\t// This will tell us if the user is banned before we even attempt\n-\t\t// to authenticate them\n-\t\tif ($throttlingEnabled = $this->throttleProvider->isEnabled())\n+\t\tif ( ! $user instanceof UserInterface)\n \t\t{\n-\t\t\tif ($throttle = $this->throttleProvider->findByUserLogin($credentials[$loginName], $this->ipAddress))\n-\t\t\t{\n-\t\t\t\t$throttle->check();\n-\t\t\t}\n+\t\t\tthrow new \\InvalidArgumentException('No valid user was provided.');\n \t\t}\n \n-\t\ttry\n+\t\t$activations = $this->getActivationsRepository();\n+\n+\t\t$code = $activations->create($user);\n+\n+\t\treturn $activations->complete($user, $code);\n+\t}\n+\n+\t/**\n+\t * Checks to see if a user is logged in.\n+\t *\n+\t * @return \\Cartalyst\\Sentry\\Users\\UserInterface|bool\n+\t * @todo   IS this where we would throw exceptions? (Not Activated etc)\n+\t */\n+\tpublic function check()\n+\t{\n+\t\t$code = $this->persistence->check();\n+\n+\t\tif ($code === null)\n \t\t{\n-\t\t\t$user = $this->userProvider->findByCredentials($credentials);\n+\t\t\treturn false;\n \t\t}\n-\t\tcatch (UserNotFoundException $e)\n-\t\t{\n-\t\t\tif ($throttlingEnabled and isset($throttle))\n-\t\t\t{\n-\t\t\t\t$throttle->addLoginAttempt();\n-\t\t\t}\n \n-\t\t\tthrow $e;\n-\t\t}\n+\t\t$user = $this->users->findByPersistenceCode($code);\n \n-\t\tif ($throttlingEnabled and isset($throttle))\n+\t\tif ($user === null)\n \t\t{\n-\t\t\t$throttle->clearLoginAttempts();\n+\t\t\treturn false;\n \t\t}\n \n-\t\t$user->clearResetPassword();\n+\t\tif ( ! $this->cycleCheckpoints('check', $user))\n+\t\t{\n+\t\t\treturn false;\n+\t\t}\n \n-\t\t$this->login($user, $remember);\n+\t\treturn $this->user = $user;\n+\t}\n \n-\t\treturn $this->user;\n+\t/**\n+\t * Checks to see if a user is logged in, bypassing checkpoints\n+\t *\n+\t * @return \\Cartalyst\\Sentry\\Users\\UserInterface|bool\n+\t */\n+\tpublic function forceCheck()\n+\t{\n+\t\treturn $this->bypassCheckpoints(function($sentry)\n+\t\t{\n+\t\t\treturn $sentry->check();\n+\t\t});\n \t}\n \n \t/**\n-\t * Alias for authenticating with the remember flag checked.\n+\t * Returns if we are currently a guest.\n \t *\n-\t * @param  array  $credentials\n-\t * @return \\Cartalyst\\Sentry\\Users\\UserInterface\n+\t * @return \\Cartalyst\\Sentry\\Users\\UserInterface|bool\n \t */\n-\tpublic function authenticateAndRemember(array $credentials)\n+\tpublic function guest()\n \t{\n-\t\treturn $this->authenticate($credentials, true);\n+\t\treturn ! $this->check();\n \t}\n \n \t/**\n-\t * Check to see if the user is logged in and activated, and hasn't been banned or suspended.\n+\t * Authenticates a user, with \"remember\" flag.\n \t *\n-\t * @return bool\n+\t * @param  \\Cartalyst\\Sentry\\Users\\UserInterface|array  $credentials\n+\t * @param  bool  $remember\n+\t * @param  bool  $bool\n+\t * @return \\Cartalyst\\Sentry\\Users\\UserInterface|bool\n \t */\n-\tpublic function check()\n+\tpublic function authenticate($credentials, $remember = false, $login = true)\n \t{\n-\t\tif (is_null($this->user))\n+\t\tif ($credentials instanceof UserInterface)\n \t\t{\n-\t\t\t// Check session first, follow by cookie\n-\t\t\tif ( ! $userArray = $this->session->get() and ! $userArray = $this->cookie->get())\n-\t\t\t{\n-\t\t\t\treturn false;\n-\t\t\t}\n-\n-\t\t\t// Now check our user is an array with two elements,\n-\t\t\t// the username followed by the persist code\n-\t\t\tif ( ! is_array($userArray) or count($userArray) !== 2)\n-\t\t\t{\n-\t\t\t\treturn false;\n-\t\t\t}\n+\t\t\t$user = $credentials;\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\t$user = $this->users->findByCredentials($credentials);\n \n-\t\t\tlist($id, $persistCode) = $userArray;\n+\t\t\t$valid = $user !== null ? $this->users->validateCredentials($user, $credentials) : false;\n \n-\t\t\t// Let's find our user\n-\t\t\ttry\n+\t\t\tif ($user === null or $valid === false)\n \t\t\t{\n-\t\t\t\t$user = $this->getUserProvider()->findById($id);\n-\t\t\t}\n-\t\t\tcatch (UserNotFoundException $e)\n-\t\t\t{\n-\t\t\t\treturn false;\n-\t\t\t}\n+\t\t\t\t$this->cycleCheckpoints('fail', $user, false);\n \n-\t\t\t// Great! Let's check the session's persist code\n-\t\t\t// against the user. If it fails, somebody has tampered\n-\t\t\t// with the cookie / session data and we're not allowing\n-\t\t\t// a login\n-\t\t\tif ( ! $user->checkPersistCode($persistCode))\n-\t\t\t{\n \t\t\t\treturn false;\n \t\t\t}\n-\n-\t\t\t// Now we'll set the user property on Sentry\n-\t\t\t$this->user = $user;\n \t\t}\n \n-\t\t// Let's check our cached user is indeed activated\n-\t\tif ( ! $user = $this->getUser() or ! $user->isActivated())\n+\t\tif ( ! $this->cycleCheckpoints('login', $user))\n \t\t{\n \t\t\treturn false;\n \t\t}\n-\t\t// If throttling is enabled we check it's status\n-\t\tif( $this->getThrottleProvider()->isEnabled())\n-\t\t{\n-\t\t\t// Check the throttle status\n-\t\t\t$throttle = $this->getThrottleProvider()->findByUser( $user );\n \n-\t\t\tif( $throttle->isBanned() or $throttle->isSuspended())\n-\t\t\t{\n-\t\t\t\t$this->logout();\n-\t\t\t\treturn false;\n-\t\t\t}\n+\t\tif ($login === false)\n+\t\t{\n+\t\t\treturn true;",
        "path": "src/Cartalyst/Sentry/Sentry.php",
        "position": null,
        "original_position": 477,
        "commit_id": "4e6abef300ec3713b40e85177c01c8d7192fc582",
        "original_commit_id": "15dede22d38a1a9323ad1a94c45c73dba0505c19",
        "user": {
            "login": "suwardany",
            "id": 2053770,
            "node_id": "MDQ6VXNlcjIwNTM3NzA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/2053770?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/suwardany",
            "html_url": "https://github.com/suwardany",
            "followers_url": "https://api.github.com/users/suwardany/followers",
            "following_url": "https://api.github.com/users/suwardany/following{/other_user}",
            "gists_url": "https://api.github.com/users/suwardany/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/suwardany/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/suwardany/subscriptions",
            "organizations_url": "https://api.github.com/users/suwardany/orgs",
            "repos_url": "https://api.github.com/users/suwardany/repos",
            "events_url": "https://api.github.com/users/suwardany/events{/privacy}",
            "received_events_url": "https://api.github.com/users/suwardany/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Right now it's bool too, but i guess it'd come in handy to return the user or false, don't you think?\n",
        "created_at": "2014-01-15T09:54:55Z",
        "updated_at": "2014-05-26T10:00:32Z",
        "html_url": "https://github.com/cartalyst/sentry/pull/317#discussion_r8890745",
        "pull_request_url": "https://api.github.com/repos/cartalyst/sentry/pulls/317",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/8890745"
            },
            "html": {
                "href": "https://github.com/cartalyst/sentry/pull/317#discussion_r8890745"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/317"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/8892455",
        "pull_request_review_id": null,
        "id": 8892455,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4OTI0NTU=",
        "diff_hunk": "@@ -11,710 +11,922 @@\n  * the following URL: http://www.opensource.org/licenses/BSD-3-Clause\n  *\n  * @package    Sentry\n- * @version    2.0.0\n+ * @version    3.0.0\n  * @author     Cartalyst LLC\n  * @license    BSD License (3-clause)\n- * @copyright  (c) 2011 - 2013, Cartalyst LLC\n+ * @copyright  (c) 2011-2014, Cartalyst LLC\n  * @link       http://cartalyst.com\n  */\n \n-use Cartalyst\\Sentry\\Cookies\\CookieInterface;\n+use Cartalyst\\Sentry\\Activations\\IlluminateActivationRepository;\n+use Cartalyst\\Sentry\\Activations\\ActivationRepositoryInterface;\n+use Cartalyst\\Sentry\\Checkpoints\\CheckpointInterface;\n use Cartalyst\\Sentry\\Cookies\\NativeCookie;\n-use Cartalyst\\Sentry\\Groups\\Eloquent\\Provider as GroupProvider;\n-use Cartalyst\\Sentry\\Groups\\ProviderInterface as GroupProviderInterface;\n+use Cartalyst\\Sentry\\Groups\\IlluminateGroupRepository;\n+use Cartalyst\\Sentry\\Groups\\GroupRepositoryInterface;\n use Cartalyst\\Sentry\\Hashing\\NativeHasher;\n+use Cartalyst\\Sentry\\Persistence\\PersistenceInterface;\n+use Cartalyst\\Sentry\\Persistence\\SentryPersistence;\n+use Cartalyst\\Sentry\\Reminders\\IlluminateReminderRepository;\n+use Cartalyst\\Sentry\\Reminders\\ReminderRepositoryInterface;\n use Cartalyst\\Sentry\\Sessions\\NativeSession;\n-use Cartalyst\\Sentry\\Sessions\\SessionInterface;\n-use Cartalyst\\Sentry\\Throttling\\Eloquent\\Provider as ThrottleProvider;\n-use Cartalyst\\Sentry\\Throttling\\ProviderInterface as ThrottleProviderInterface;\n-use Cartalyst\\Sentry\\Users\\LoginRequiredException;\n-use Cartalyst\\Sentry\\Users\\PasswordRequiredException;\n-use Cartalyst\\Sentry\\Users\\Eloquent\\Provider as UserProvider;\n-use Cartalyst\\Sentry\\Users\\ProviderInterface as UserProviderInterface;\n+use Cartalyst\\Sentry\\Users\\IlluminateUserRepository;\n+use Cartalyst\\Sentry\\Users\\UserRepositoryInterface;\n use Cartalyst\\Sentry\\Users\\UserInterface;\n-use Cartalyst\\Sentry\\Users\\UserNotFoundException;\n-use Cartalyst\\Sentry\\Users\\UserNotActivatedException;\n+use Closure;\n+use Illuminate\\Events\\Dispatcher;\n \n class Sentry {\n \n \t/**\n-\t * The user that's been retrieved and is used\n-\t * for authentication. Authentication methods\n-\t * are available for finding the user to set\n-\t * here.\n+\t * The current cached, logged in user.\n \t *\n \t * @var \\Cartalyst\\Sentry\\Users\\UserInterface\n \t */\n \tprotected $user;\n \n \t/**\n-\t * The session driver used by Sentry.\n+\t * The persistence driver (the class which actually manages sessions).\n \t *\n-\t * @var \\Cartalyst\\Sentry\\Sessions\\SessionInterface\n+\t * @var \\Cartalyst\\Sentry\\Persistence\\PersistenceInterface\n \t */\n-\tprotected $session;\n+\tprotected $persistence;\n \n \t/**\n-\t * The cookie driver used by Sentry.\n+\t * User repository.\n \t *\n-\t * @var \\Cartalyst\\Sentry\\Cookies\\CookieInterface\n+\t * @var \\Cartalyst\\Sentry\\Users\\UserRepositoryInterface\n \t */\n-\tprotected $cookie;\n+\tprotected $users;\n \n \t/**\n-\t * The user provider, used for retrieving\n-\t * objects which implement the Sentry user\n-\t * interface.\n+\t * Cached, available methods on the user repository, used for dynamic calls.\n \t *\n-\t * @var \\Cartalyst\\Sentry\\Users\\ProviderInterface\n+\t * @var array\n \t */\n-\tprotected $userProvider;\n+\tprotected $userMethods = array();\n \n \t/**\n-\t * The group provider, used for retrieving\n-\t * objects which implement the Sentry group\n-\t * interface.\n+\t * Group repository.\n \t *\n-\t * @var \\Cartalyst\\Sentry\\Groups\\ProviderInterface\n+\t * @var \\Cartalyst\\Sentry\\Groups\\GroupRepositoryInterface\n \t */\n-\tprotected $groupProvider;\n+\tprotected $groups;\n \n \t/**\n-\t * The throttle provider, used for retrieving\n-\t * objects which implement the Sentry throttling\n-\t * interface.\n+\t * Event dispatcher.\n \t *\n-\t * @var \\Cartalyst\\Sentry\\Throttling\\ProviderInterface\n+\t * @var \\Illuminate\\Events\\Dispatcher\n \t */\n-\tprotected $throttleProvider;\n+\tprotected $dispatcher;\n \n \t/**\n-\t * The client's IP address associated with Sentry.\n+\t * Array that holds all the enabled checkpoints.\n \t *\n-\t * @var string\n+\t * @var array\n \t */\n-\tprotected $ipAddress = '0.0.0.0';\n+\tprotected $checkpoints = array();\n \n \t/**\n-\t * Create a new Sentry object.\n+\t * Activations repository.\n \t *\n-\t * @param  \\Cartalyst\\Sentry\\Users\\ProviderInterface $userProvider\n-\t * @param  \\Cartalyst\\Sentry\\Groups\\ProviderInterface $groupProvider\n-\t * @param  \\Cartalyst\\Sentry\\Throttling\\ProviderInterface $throttleProvider\n-\t * @param  \\Cartalyst\\Sentry\\Sessions\\SessionInterface $session\n-\t * @param  \\Cartalyst\\Sentry\\Cookies\\CookieInterface $cookie\n-\t * @param  string $ipAddress\n-\t * @return void\n+\t * @var \\Cartalyst\\Sentry\\Activations\\ActivationRepositoryInterface\n+\t */\n+\tprotected $activations;\n+\n+\t/**\n+\t * Reminders repository.\n+\t *\n+\t * @var \\Cartalyst\\Sentry\\Reminders\\ReminderRepositoryInterface\n+\t */\n+\tprotected $reminders;\n+\n+\t/**\n+\t * The closure to retrieve request credentials.\n+\t *\n+\t * @var \\Closure\n \t */\n-\tpublic function __construct(\n-\t\tUserProviderInterface $userProvider = null,\n-\t\tGroupProviderInterface $groupProvider = null,\n-\t\tThrottleProviderInterface $throttleProvider = null,\n-\t\tSessionInterface $session = null,\n-\t\tCookieInterface $cookie = null,\n-\t\t$ipAddress = null\n-\t)\n+\tprotected $requestCredentials;\n+\n+\t/**\n+\t * The closure used to create a basic response for failed HTTP auth.\n+\t *\n+\t * @var \\Closure\n+\t */\n+\tprotected $basicResponse;\n+\n+\t/**\n+\t * Create a new Sentry instance.\n+\t *\n+\t * @param  \\Cartalyst\\Sentry\\Persistence\\PersistenceInterface  $persistence\n+\t * @param  \\Cartalyst\\Sentry\\Groups\\GroupRepositoryInterface  $groups\n+\t * @param  \\Cartalyst\\Sentry\\Users\\UserRepositoryInterface  $users\n+\t */\n+\tpublic function __construct(PersistenceInterface $persistence = null, UserRepositoryInterface $users = null, GroupRepositoryInterface $groups = null)\n \t{\n-\t\t$this->userProvider     = $userProvider ?: new UserProvider(new NativeHasher);\n-\t\t$this->groupProvider    = $groupProvider ?: new GroupProvider;\n-\t\t$this->throttleProvider = $throttleProvider ?: new ThrottleProvider($this->userProvider);\n+\t\tif (isset($persistence))\n+\t\t{\n+\t\t\t$this->persistence = $persistence;\n+\t\t}\n \n-\t\t$this->session          = $session ?: new NativeSession;\n-\t\t$this->cookie           = $cookie ?: new NativeCookie;\n+\t\tif (isset($users))\n+\t\t{\n+\t\t\t$this->users = $users;\n+\t\t}\n \n-\t\tif (isset($ipAddress))\n+\t\tif (isset($groups))\n \t\t{\n-\t\t\t$this->ipAddress = $ipAddress;\n+\t\t\t$this->groups = $groups;\n \t\t}\n \t}\n \n \t/**\n-\t * Registers a user by giving the required credentials\n-\t * and an optional flag for whether to activate the user.\n+\t * Registers a user. You may provide a callback to occur before the user\n+\t * is saved, or provide a true boolean as a shortcut to activation.\n \t *\n \t * @param  array  $credentials\n-\t * @param  bool   $activate\n-\t * @return \\Cartalyst\\Sentry\\Users\\UserInterface\n+\t * @param  \\Closure|bool  $callback\n+\t * @return \\Cartalyst\\Sentry\\Users\\UserInteface|bool\n+\t * @throws \\InvalidArgumentException\n \t */\n-\tpublic function register(array $credentials, $activate = false)\n+\tpublic function register(array $credentials, $callback = null)\n \t{\n-\t\t$user = $this->userProvider->create($credentials);\n+\t\tif ($callback !== null and ! $callback instanceof Closure and ! is_bool($callback))\n+\t\t{\n+\t\t\tthrow new \\InvalidArgumentException('You must provide a closure or a boolean.');\n+\t\t}\n+\n+\t\t$valid = $this->users->validForCreation($credentials);\n \n-\t\tif ($activate)\n+\t\tif ($valid === false)\n \t\t{\n-\t\t\t$user->attemptActivation($user->getActivationCode());\n+\t\t\treturn false;\n \t\t}\n \n-\t\treturn $this->user = $user;\n-\t}\n+\t\t$argument = $callback instanceof Closure ? $callback : null;\n \n+\t\t$user = $this->users->create($credentials, $argument);\n+\n+\t\tif ($callback === true)\n+\t\t{\n+\t\t\t$this->activate($user);\n+\t\t}\n+\n+\t\treturn $user;\n+\t}\n \n \t/**\n-\t * Attempts to authenticate the given user\n-\t * according to the passed credentials.\n+\t * Registers and activates the user.\n \t *\n \t * @param  array  $credentials\n-\t * @param  bool   $remember\n-\t * @return \\Cartalyst\\Sentry\\Users\\UserInterface\n-\t * @throws \\Cartalyst\\Sentry\\Throttling\\UserBannedException\n-\t * @throws \\Cartalyst\\Sentry\\Throttling\\UserSuspendedException\n-\t * @throws \\Cartalyst\\Sentry\\Users\\LoginRequiredException\n-\t * @throws \\Cartalyst\\Sentry\\Users\\PasswordRequiredException\n-\t * @throws \\Cartalyst\\Sentry\\Users\\UserNotFoundException\n+\t * @return \\Cartalyst\\Sentry\\Users\\UserInteface|bool\n \t */\n-\tpublic function authenticate(array $credentials, $remember = false)\n+\tpublic function registerAndActivate(array $credentials)\n \t{\n-\t\t// We'll default to the login name field, but fallback to a hard-coded\n-\t\t// 'login' key in the array that was passed.\n-\t\t$loginName = $this->userProvider->getEmptyUser()->getLoginName();\n-\t\t$loginCredentialKey = (isset($credentials[$loginName])) ? $loginName : 'login';\n+\t\treturn $this->register($credentials, true);\n+\t}\n \n-\t\tif (empty($credentials[$loginCredentialKey]))\n+\t/**\n+\t * Activates the given user.\n+\t *\n+\t * @param  \\Cartalyst\\Sentry\\Users\\UserInterface  $user\n+\t * @return bool\n+\t * @throws \\InvalidArgumentException\n+\t */\n+\tpublic function activate($user)\n+\t{\n+\t\tif (is_string($user))\n \t\t{\n-\t\t\tthrow new LoginRequiredException(\"The [$loginCredentialKey] attribute is required.\");\n-\t\t}\n+\t\t\t$users = $this->getUserRepository();\n \n-\t\tif (empty($credentials['password']))\n-\t\t{\n-\t\t\tthrow new PasswordRequiredException('The password attribute is required.');\n+\t\t\t$user = $users->findById($user);\n \t\t}\n-\n-\t\t// If the user did the fallback 'login' key for the login code which\n-\t\t// did not match the actual login name, we'll adjust the array so the\n-\t\t// actual login name is provided.\n-\t\tif ($loginCredentialKey !== $loginName)\n+\t\telseif (is_array($user))\n \t\t{\n-\t\t\t$credentials[$loginName] = $credentials[$loginCredentialKey];\n-\t\t\tunset($credentials[$loginCredentialKey]);\n+\t\t\t$users = $this->getUserRepository();\n+\n+\t\t\t$user = $users->findByCredentials($user);\n \t\t}\n \n-\t\t// If throttling is enabled, we'll firstly check the throttle.\n-\t\t// This will tell us if the user is banned before we even attempt\n-\t\t// to authenticate them\n-\t\tif ($throttlingEnabled = $this->throttleProvider->isEnabled())\n+\t\tif ( ! $user instanceof UserInterface)\n \t\t{\n-\t\t\tif ($throttle = $this->throttleProvider->findByUserLogin($credentials[$loginName], $this->ipAddress))\n-\t\t\t{\n-\t\t\t\t$throttle->check();\n-\t\t\t}\n+\t\t\tthrow new \\InvalidArgumentException('No valid user was provided.');\n \t\t}\n \n-\t\ttry\n+\t\t$activations = $this->getActivationsRepository();\n+\n+\t\t$code = $activations->create($user);\n+\n+\t\treturn $activations->complete($user, $code);\n+\t}\n+\n+\t/**\n+\t * Checks to see if a user is logged in.\n+\t *\n+\t * @return \\Cartalyst\\Sentry\\Users\\UserInterface|bool\n+\t * @todo   IS this where we would throw exceptions? (Not Activated etc)\n+\t */\n+\tpublic function check()\n+\t{\n+\t\t$code = $this->persistence->check();\n+\n+\t\tif ($code === null)\n \t\t{\n-\t\t\t$user = $this->userProvider->findByCredentials($credentials);\n+\t\t\treturn false;\n \t\t}\n-\t\tcatch (UserNotFoundException $e)\n-\t\t{\n-\t\t\tif ($throttlingEnabled and isset($throttle))\n-\t\t\t{\n-\t\t\t\t$throttle->addLoginAttempt();\n-\t\t\t}\n \n-\t\t\tthrow $e;\n-\t\t}\n+\t\t$user = $this->users->findByPersistenceCode($code);\n \n-\t\tif ($throttlingEnabled and isset($throttle))\n+\t\tif ($user === null)\n \t\t{\n-\t\t\t$throttle->clearLoginAttempts();\n+\t\t\treturn false;\n \t\t}\n \n-\t\t$user->clearResetPassword();\n+\t\tif ( ! $this->cycleCheckpoints('check', $user))\n+\t\t{\n+\t\t\treturn false;\n+\t\t}\n \n-\t\t$this->login($user, $remember);\n+\t\treturn $this->user = $user;\n+\t}\n \n-\t\treturn $this->user;\n+\t/**\n+\t * Checks to see if a user is logged in, bypassing checkpoints\n+\t *\n+\t * @return \\Cartalyst\\Sentry\\Users\\UserInterface|bool\n+\t */\n+\tpublic function forceCheck()\n+\t{\n+\t\treturn $this->bypassCheckpoints(function($sentry)\n+\t\t{\n+\t\t\treturn $sentry->check();\n+\t\t});\n \t}\n \n \t/**\n-\t * Alias for authenticating with the remember flag checked.\n+\t * Returns if we are currently a guest.\n \t *\n-\t * @param  array  $credentials\n-\t * @return \\Cartalyst\\Sentry\\Users\\UserInterface\n+\t * @return \\Cartalyst\\Sentry\\Users\\UserInterface|bool\n \t */\n-\tpublic function authenticateAndRemember(array $credentials)\n+\tpublic function guest()\n \t{\n-\t\treturn $this->authenticate($credentials, true);\n+\t\treturn ! $this->check();\n \t}\n \n \t/**\n-\t * Check to see if the user is logged in and activated, and hasn't been banned or suspended.\n+\t * Authenticates a user, with \"remember\" flag.\n \t *\n-\t * @return bool\n+\t * @param  \\Cartalyst\\Sentry\\Users\\UserInterface|array  $credentials\n+\t * @param  bool  $remember\n+\t * @param  bool  $bool\n+\t * @return \\Cartalyst\\Sentry\\Users\\UserInterface|bool\n \t */\n-\tpublic function check()\n+\tpublic function authenticate($credentials, $remember = false, $login = true)\n \t{\n-\t\tif (is_null($this->user))\n+\t\tif ($credentials instanceof UserInterface)\n \t\t{\n-\t\t\t// Check session first, follow by cookie\n-\t\t\tif ( ! $userArray = $this->session->get() and ! $userArray = $this->cookie->get())\n-\t\t\t{\n-\t\t\t\treturn false;\n-\t\t\t}\n-\n-\t\t\t// Now check our user is an array with two elements,\n-\t\t\t// the username followed by the persist code\n-\t\t\tif ( ! is_array($userArray) or count($userArray) !== 2)\n-\t\t\t{\n-\t\t\t\treturn false;\n-\t\t\t}\n+\t\t\t$user = $credentials;\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\t$user = $this->users->findByCredentials($credentials);\n \n-\t\t\tlist($id, $persistCode) = $userArray;\n+\t\t\t$valid = $user !== null ? $this->users->validateCredentials($user, $credentials) : false;\n \n-\t\t\t// Let's find our user\n-\t\t\ttry\n+\t\t\tif ($user === null or $valid === false)\n \t\t\t{\n-\t\t\t\t$user = $this->getUserProvider()->findById($id);\n-\t\t\t}\n-\t\t\tcatch (UserNotFoundException $e)\n-\t\t\t{\n-\t\t\t\treturn false;\n-\t\t\t}\n+\t\t\t\t$this->cycleCheckpoints('fail', $user, false);\n \n-\t\t\t// Great! Let's check the session's persist code\n-\t\t\t// against the user. If it fails, somebody has tampered\n-\t\t\t// with the cookie / session data and we're not allowing\n-\t\t\t// a login\n-\t\t\tif ( ! $user->checkPersistCode($persistCode))\n-\t\t\t{\n \t\t\t\treturn false;\n \t\t\t}\n-\n-\t\t\t// Now we'll set the user property on Sentry\n-\t\t\t$this->user = $user;\n \t\t}\n \n-\t\t// Let's check our cached user is indeed activated\n-\t\tif ( ! $user = $this->getUser() or ! $user->isActivated())\n+\t\tif ( ! $this->cycleCheckpoints('login', $user))\n \t\t{\n \t\t\treturn false;\n \t\t}\n-\t\t// If throttling is enabled we check it's status\n-\t\tif( $this->getThrottleProvider()->isEnabled())\n-\t\t{\n-\t\t\t// Check the throttle status\n-\t\t\t$throttle = $this->getThrottleProvider()->findByUser( $user );\n \n-\t\t\tif( $throttle->isBanned() or $throttle->isSuspended())\n-\t\t\t{\n-\t\t\t\t$this->logout();\n-\t\t\t\treturn false;\n-\t\t\t}\n+\t\tif ($login === false)\n+\t\t{\n+\t\t\treturn true;",
        "path": "src/Cartalyst/Sentry/Sentry.php",
        "position": null,
        "original_position": 477,
        "commit_id": "4e6abef300ec3713b40e85177c01c8d7192fc582",
        "original_commit_id": "15dede22d38a1a9323ad1a94c45c73dba0505c19",
        "user": {
            "login": "bencorlett",
            "id": 181919,
            "node_id": "MDQ6VXNlcjE4MTkxOQ==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/181919?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bencorlett",
            "html_url": "https://github.com/bencorlett",
            "followers_url": "https://api.github.com/users/bencorlett/followers",
            "following_url": "https://api.github.com/users/bencorlett/following{/other_user}",
            "gists_url": "https://api.github.com/users/bencorlett/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bencorlett/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bencorlett/subscriptions",
            "organizations_url": "https://api.github.com/users/bencorlett/orgs",
            "repos_url": "https://api.github.com/users/bencorlett/repos",
            "events_url": "https://api.github.com/users/bencorlett/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bencorlett/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Sure thing, add it in :)\nOn 15 Jan 2014, at 8:54 pm, Suhayb El Wardany notifications@github.com wrote:\n\n> In src/Cartalyst/Sentry/Sentry.php:\n> \n> > -           if( $throttle->isBanned() or $throttle->isSuspended())\n> > -           {\n> > -               $this->logout();\n> > -               return false;\n> > -           }\n> > -       if ($login === false)\n> > -       {\n> > -           return true;\n> >   Right now it's bool too, but i guess it'd come in handy to return the user or false, don't you think?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n",
        "created_at": "2014-01-15T11:21:06Z",
        "updated_at": "2014-05-26T10:00:32Z",
        "html_url": "https://github.com/cartalyst/sentry/pull/317#discussion_r8892455",
        "pull_request_url": "https://api.github.com/repos/cartalyst/sentry/pulls/317",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/8892455"
            },
            "html": {
                "href": "https://github.com/cartalyst/sentry/pull/317#discussion_r8892455"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/317"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/22285693",
        "pull_request_review_id": null,
        "id": 22285693,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMjg1Njkz",
        "diff_hunk": "@@ -66,7 +64,7 @@ class IlluminateCookie implements CookieInterface {\n \t * @param  \\Illuminate\\Http\\Request  $request\n \t * @param  \\Illuminate\\Cookie\\CookieJar  $jar\n \t * @param  string  $key\n-\t * @return void",
        "path": "src/Cartalyst/Sentry/Cookies/IlluminateCookie.php",
        "position": null,
        "original_position": 15,
        "commit_id": "ba7eabbd90be5a4955080b7ee03b2937b787b729",
        "original_commit_id": "a84443fcf5bbf193a34aef519dff6a36fb1bb358",
        "user": {
            "login": "brunogaspar",
            "id": 2285372,
            "node_id": "MDQ6VXNlcjIyODUzNzI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/2285372?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brunogaspar",
            "html_url": "https://github.com/brunogaspar",
            "followers_url": "https://api.github.com/users/brunogaspar/followers",
            "following_url": "https://api.github.com/users/brunogaspar/following{/other_user}",
            "gists_url": "https://api.github.com/users/brunogaspar/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brunogaspar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brunogaspar/subscriptions",
            "organizations_url": "https://api.github.com/users/brunogaspar/orgs",
            "repos_url": "https://api.github.com/users/brunogaspar/repos",
            "events_url": "https://api.github.com/users/brunogaspar/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brunogaspar/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Don't remove the `@return void`, pretty much happens for the rest of the PR.\n",
        "created_at": "2014-12-26T17:11:41Z",
        "updated_at": "2014-12-26T20:37:01Z",
        "html_url": "https://github.com/cartalyst/sentry/pull/498#discussion_r22285693",
        "pull_request_url": "https://api.github.com/repos/cartalyst/sentry/pulls/498",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/22285693"
            },
            "html": {
                "href": "https://github.com/cartalyst/sentry/pull/498#discussion_r22285693"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/498"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/22285722",
        "pull_request_review_id": null,
        "id": 22285722,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMjg1NzIy",
        "diff_hunk": "@@ -50,9 +50,8 @@ class Provider implements ProviderInterface {\n \t/**\n \t * Creates a new throttle provider.\n \t *\n-\t * @param \\Cartalyst\\Sentry\\Users\\ProviderInterface $userProvider\n+\t * @param UserProviderInterface $userProvider",
        "path": "src/Cartalyst/Sentry/Throttling/Eloquent/Provider.php",
        "position": null,
        "original_position": 15,
        "commit_id": "ba7eabbd90be5a4955080b7ee03b2937b787b729",
        "original_commit_id": "a84443fcf5bbf193a34aef519dff6a36fb1bb358",
        "user": {
            "login": "brunogaspar",
            "id": 2285372,
            "node_id": "MDQ6VXNlcjIyODUzNzI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/2285372?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brunogaspar",
            "html_url": "https://github.com/brunogaspar",
            "followers_url": "https://api.github.com/users/brunogaspar/followers",
            "following_url": "https://api.github.com/users/brunogaspar/following{/other_user}",
            "gists_url": "https://api.github.com/users/brunogaspar/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brunogaspar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brunogaspar/subscriptions",
            "organizations_url": "https://api.github.com/users/brunogaspar/orgs",
            "repos_url": "https://api.github.com/users/brunogaspar/repos",
            "events_url": "https://api.github.com/users/brunogaspar/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brunogaspar/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It should be the full namespace as it was, pretty much where you changed you'll need to revert and you should use the `ProviderInterface` and not `UserProviderInterface` as the later is an alias.\n",
        "created_at": "2014-12-26T17:14:26Z",
        "updated_at": "2014-12-26T20:37:01Z",
        "html_url": "https://github.com/cartalyst/sentry/pull/498#discussion_r22285722",
        "pull_request_url": "https://api.github.com/repos/cartalyst/sentry/pulls/498",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/22285722"
            },
            "html": {
                "href": "https://github.com/cartalyst/sentry/pull/498#discussion_r22285722"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/498"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/22285725",
        "pull_request_review_id": null,
        "id": 22285725,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMjg1NzI1",
        "diff_hunk": "@@ -882,7 +883,7 @@ public function setAttribute($key, $value)\n \t\t\t$value = $this->hash($value);\n \t\t}\n \n-\t\treturn parent::setAttribute($key, $value);\n+\t\tparent::setAttribute($key, $value);",
        "path": "src/Cartalyst/Sentry/Users/Eloquent/User.php",
        "position": 56,
        "original_position": 56,
        "commit_id": "ba7eabbd90be5a4955080b7ee03b2937b787b729",
        "original_commit_id": "a84443fcf5bbf193a34aef519dff6a36fb1bb358",
        "user": {
            "login": "brunogaspar",
            "id": 2285372,
            "node_id": "MDQ6VXNlcjIyODUzNzI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/2285372?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brunogaspar",
            "html_url": "https://github.com/brunogaspar",
            "followers_url": "https://api.github.com/users/brunogaspar/followers",
            "following_url": "https://api.github.com/users/brunogaspar/following{/other_user}",
            "gists_url": "https://api.github.com/users/brunogaspar/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brunogaspar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brunogaspar/subscriptions",
            "organizations_url": "https://api.github.com/users/brunogaspar/orgs",
            "repos_url": "https://api.github.com/users/brunogaspar/repos",
            "events_url": "https://api.github.com/users/brunogaspar/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brunogaspar/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Why have you removed the `return`?\n",
        "created_at": "2014-12-26T17:14:40Z",
        "updated_at": "2014-12-26T20:37:01Z",
        "html_url": "https://github.com/cartalyst/sentry/pull/498#discussion_r22285725",
        "pull_request_url": "https://api.github.com/repos/cartalyst/sentry/pulls/498",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/22285725"
            },
            "html": {
                "href": "https://github.com/cartalyst/sentry/pull/498#discussion_r22285725"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/498"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/22287888",
        "pull_request_review_id": null,
        "id": 22287888,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMjg3ODg4",
        "diff_hunk": "@@ -882,7 +883,7 @@ public function setAttribute($key, $value)\n \t\t\t$value = $this->hash($value);\n \t\t}\n \n-\t\treturn parent::setAttribute($key, $value);\n+\t\tparent::setAttribute($key, $value);",
        "path": "src/Cartalyst/Sentry/Users/Eloquent/User.php",
        "position": 56,
        "original_position": 56,
        "commit_id": "ba7eabbd90be5a4955080b7ee03b2937b787b729",
        "original_commit_id": "a84443fcf5bbf193a34aef519dff6a36fb1bb358",
        "user": {
            "login": "irfanevrens",
            "id": 166640,
            "node_id": "MDQ6VXNlcjE2NjY0MA==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/166640?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/irfanevrens",
            "html_url": "https://github.com/irfanevrens",
            "followers_url": "https://api.github.com/users/irfanevrens/followers",
            "following_url": "https://api.github.com/users/irfanevrens/following{/other_user}",
            "gists_url": "https://api.github.com/users/irfanevrens/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/irfanevrens/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/irfanevrens/subscriptions",
            "organizations_url": "https://api.github.com/users/irfanevrens/orgs",
            "repos_url": "https://api.github.com/users/irfanevrens/repos",
            "events_url": "https://api.github.com/users/irfanevrens/events{/privacy}",
            "received_events_url": "https://api.github.com/users/irfanevrens/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Set an attribute is a void process I think.\n",
        "created_at": "2014-12-26T20:19:52Z",
        "updated_at": "2014-12-26T20:37:01Z",
        "html_url": "https://github.com/cartalyst/sentry/pull/498#discussion_r22287888",
        "pull_request_url": "https://api.github.com/repos/cartalyst/sentry/pulls/498",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/22287888"
            },
            "html": {
                "href": "https://github.com/cartalyst/sentry/pull/498#discussion_r22287888"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/498"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/22287896",
        "pull_request_review_id": null,
        "id": 22287896,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMjg3ODk2",
        "diff_hunk": "@@ -50,9 +50,8 @@ class Provider implements ProviderInterface {\n \t/**\n \t * Creates a new throttle provider.\n \t *\n-\t * @param \\Cartalyst\\Sentry\\Users\\ProviderInterface $userProvider\n+\t * @param UserProviderInterface $userProvider",
        "path": "src/Cartalyst/Sentry/Throttling/Eloquent/Provider.php",
        "position": null,
        "original_position": 15,
        "commit_id": "ba7eabbd90be5a4955080b7ee03b2937b787b729",
        "original_commit_id": "a84443fcf5bbf193a34aef519dff6a36fb1bb358",
        "user": {
            "login": "irfanevrens",
            "id": 166640,
            "node_id": "MDQ6VXNlcjE2NjY0MA==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/166640?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/irfanevrens",
            "html_url": "https://github.com/irfanevrens",
            "followers_url": "https://api.github.com/users/irfanevrens/followers",
            "following_url": "https://api.github.com/users/irfanevrens/following{/other_user}",
            "gists_url": "https://api.github.com/users/irfanevrens/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/irfanevrens/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/irfanevrens/subscriptions",
            "organizations_url": "https://api.github.com/users/irfanevrens/orgs",
            "repos_url": "https://api.github.com/users/irfanevrens/repos",
            "events_url": "https://api.github.com/users/irfanevrens/events{/privacy}",
            "received_events_url": "https://api.github.com/users/irfanevrens/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Thanks, I will be change it again.\n",
        "created_at": "2014-12-26T20:20:19Z",
        "updated_at": "2014-12-26T20:37:01Z",
        "html_url": "https://github.com/cartalyst/sentry/pull/498#discussion_r22287896",
        "pull_request_url": "https://api.github.com/repos/cartalyst/sentry/pulls/498",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/22287896"
            },
            "html": {
                "href": "https://github.com/cartalyst/sentry/pull/498#discussion_r22287896"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/498"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/22287900",
        "pull_request_review_id": null,
        "id": 22287900,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMjg3OTAw",
        "diff_hunk": "@@ -66,7 +64,7 @@ class IlluminateCookie implements CookieInterface {\n \t * @param  \\Illuminate\\Http\\Request  $request\n \t * @param  \\Illuminate\\Cookie\\CookieJar  $jar\n \t * @param  string  $key\n-\t * @return void",
        "path": "src/Cartalyst/Sentry/Cookies/IlluminateCookie.php",
        "position": null,
        "original_position": 15,
        "commit_id": "ba7eabbd90be5a4955080b7ee03b2937b787b729",
        "original_commit_id": "a84443fcf5bbf193a34aef519dff6a36fb1bb358",
        "user": {
            "login": "irfanevrens",
            "id": 166640,
            "node_id": "MDQ6VXNlcjE2NjY0MA==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/166640?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/irfanevrens",
            "html_url": "https://github.com/irfanevrens",
            "followers_url": "https://api.github.com/users/irfanevrens/followers",
            "following_url": "https://api.github.com/users/irfanevrens/following{/other_user}",
            "gists_url": "https://api.github.com/users/irfanevrens/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/irfanevrens/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/irfanevrens/subscriptions",
            "organizations_url": "https://api.github.com/users/irfanevrens/orgs",
            "repos_url": "https://api.github.com/users/irfanevrens/repos",
            "events_url": "https://api.github.com/users/irfanevrens/events{/privacy}",
            "received_events_url": "https://api.github.com/users/irfanevrens/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Thanks, I will be change it again as original.\n",
        "created_at": "2014-12-26T20:20:48Z",
        "updated_at": "2014-12-26T20:37:01Z",
        "html_url": "https://github.com/cartalyst/sentry/pull/498#discussion_r22287900",
        "pull_request_url": "https://api.github.com/repos/cartalyst/sentry/pulls/498",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/22287900"
            },
            "html": {
                "href": "https://github.com/cartalyst/sentry/pull/498#discussion_r22287900"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/498"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/22287905",
        "pull_request_review_id": null,
        "id": 22287905,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMjg3OTA1",
        "diff_hunk": "@@ -53,13 +56,13 @@ public static function createSentry()\n \t\t{\n \t\t\tdefault:\n \t\t\tcase 'Bcrypt':\n-\t\t\t\t$hasher = new \\Cartalyst\\Sentry\\Hashing\\BcryptHasher;\n+\t\t\t\t$hasher = new BcryptHasher;\n \t\t\t\tbreak;\n \t\t\tcase 'Native':\n-\t\t\t\t$hasher = new \\Cartalyst\\Sentry\\Hashing\\NativeHasher;\n+\t\t\t\t$hasher = new NativeHasher;\n \t\t\t\tbreak;\n \t\t\tcase 'Sha256':\n-\t\t\t\t$hasher = new \\Cartalyst\\Sentry\\Hashing\\Sha256Hasher;\n+\t\t\t\t$hasher = new Sha256Hasher;",
        "path": "src/Cartalyst/Sentry/Facades/Kohana/Sentry.php",
        "position": 26,
        "original_position": 26,
        "commit_id": "ba7eabbd90be5a4955080b7ee03b2937b787b729",
        "original_commit_id": "a84443fcf5bbf193a34aef519dff6a36fb1bb358",
        "user": {
            "login": "irfanevrens",
            "id": 166640,
            "node_id": "MDQ6VXNlcjE2NjY0MA==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/166640?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/irfanevrens",
            "html_url": "https://github.com/irfanevrens",
            "followers_url": "https://api.github.com/users/irfanevrens/followers",
            "following_url": "https://api.github.com/users/irfanevrens/following{/other_user}",
            "gists_url": "https://api.github.com/users/irfanevrens/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/irfanevrens/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/irfanevrens/subscriptions",
            "organizations_url": "https://api.github.com/users/irfanevrens/orgs",
            "repos_url": "https://api.github.com/users/irfanevrens/repos",
            "events_url": "https://api.github.com/users/irfanevrens/events{/privacy}",
            "received_events_url": "https://api.github.com/users/irfanevrens/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "How about these changes?\n",
        "created_at": "2014-12-26T20:21:07Z",
        "updated_at": "2014-12-26T20:37:01Z",
        "html_url": "https://github.com/cartalyst/sentry/pull/498#discussion_r22287905",
        "pull_request_url": "https://api.github.com/repos/cartalyst/sentry/pulls/498",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/22287905"
            },
            "html": {
                "href": "https://github.com/cartalyst/sentry/pull/498#discussion_r22287905"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/498"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/22287950",
        "pull_request_review_id": null,
        "id": 22287950,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMjg3OTUw",
        "diff_hunk": "@@ -66,7 +64,7 @@ class IlluminateCookie implements CookieInterface {\n \t * @param  \\Illuminate\\Http\\Request  $request\n \t * @param  \\Illuminate\\Cookie\\CookieJar  $jar\n \t * @param  string  $key\n-\t * @return void",
        "path": "src/Cartalyst/Sentry/Cookies/IlluminateCookie.php",
        "position": null,
        "original_position": 15,
        "commit_id": "ba7eabbd90be5a4955080b7ee03b2937b787b729",
        "original_commit_id": "a84443fcf5bbf193a34aef519dff6a36fb1bb358",
        "user": {
            "login": "irfanevrens",
            "id": 166640,
            "node_id": "MDQ6VXNlcjE2NjY0MA==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/166640?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/irfanevrens",
            "html_url": "https://github.com/irfanevrens",
            "followers_url": "https://api.github.com/users/irfanevrens/followers",
            "following_url": "https://api.github.com/users/irfanevrens/following{/other_user}",
            "gists_url": "https://api.github.com/users/irfanevrens/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/irfanevrens/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/irfanevrens/subscriptions",
            "organizations_url": "https://api.github.com/users/irfanevrens/orgs",
            "repos_url": "https://api.github.com/users/irfanevrens/repos",
            "events_url": "https://api.github.com/users/irfanevrens/events{/privacy}",
            "received_events_url": "https://api.github.com/users/irfanevrens/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "As a note, __construct is a void function I think.\n",
        "created_at": "2014-12-26T20:24:53Z",
        "updated_at": "2014-12-26T20:37:01Z",
        "html_url": "https://github.com/cartalyst/sentry/pull/498#discussion_r22287950",
        "pull_request_url": "https://api.github.com/repos/cartalyst/sentry/pulls/498",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/22287950"
            },
            "html": {
                "href": "https://github.com/cartalyst/sentry/pull/498#discussion_r22287950"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/498"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/24270585",
        "pull_request_review_id": null,
        "id": 24270585,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjcwNTg1",
        "diff_hunk": "@@ -53,13 +56,13 @@ public static function createSentry()\n \t\t{\n \t\t\tdefault:\n \t\t\tcase 'Bcrypt':\n-\t\t\t\t$hasher = new \\Cartalyst\\Sentry\\Hashing\\BcryptHasher;\n+\t\t\t\t$hasher = new BcryptHasher;\n \t\t\t\tbreak;\n \t\t\tcase 'Native':\n-\t\t\t\t$hasher = new \\Cartalyst\\Sentry\\Hashing\\NativeHasher;\n+\t\t\t\t$hasher = new NativeHasher;\n \t\t\t\tbreak;\n \t\t\tcase 'Sha256':\n-\t\t\t\t$hasher = new \\Cartalyst\\Sentry\\Hashing\\Sha256Hasher;\n+\t\t\t\t$hasher = new Sha256Hasher;",
        "path": "src/Cartalyst/Sentry/Facades/Kohana/Sentry.php",
        "position": 26,
        "original_position": 26,
        "commit_id": "ba7eabbd90be5a4955080b7ee03b2937b787b729",
        "original_commit_id": "a84443fcf5bbf193a34aef519dff6a36fb1bb358",
        "user": {
            "login": "brunogaspar",
            "id": 2285372,
            "node_id": "MDQ6VXNlcjIyODUzNzI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/2285372?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brunogaspar",
            "html_url": "https://github.com/brunogaspar",
            "followers_url": "https://api.github.com/users/brunogaspar/followers",
            "following_url": "https://api.github.com/users/brunogaspar/following{/other_user}",
            "gists_url": "https://api.github.com/users/brunogaspar/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brunogaspar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brunogaspar/subscriptions",
            "organizations_url": "https://api.github.com/users/brunogaspar/orgs",
            "repos_url": "https://api.github.com/users/brunogaspar/repos",
            "events_url": "https://api.github.com/users/brunogaspar/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brunogaspar/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Changes here are fine.\n",
        "created_at": "2015-02-06T20:44:09Z",
        "updated_at": "2015-02-06T20:44:09Z",
        "html_url": "https://github.com/cartalyst/sentry/pull/498#discussion_r24270585",
        "pull_request_url": "https://api.github.com/repos/cartalyst/sentry/pulls/498",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/24270585"
            },
            "html": {
                "href": "https://github.com/cartalyst/sentry/pull/498#discussion_r24270585"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/498"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/24270593",
        "pull_request_review_id": null,
        "id": 24270593,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjcwNTkz",
        "diff_hunk": "@@ -52,7 +52,6 @@ class Provider implements ProviderInterface {\n \t *\n \t * @param \\Cartalyst\\Sentry\\Users\\ProviderInterface $userProvider\n \t * @param  string $model\n-\t * @return void",
        "path": "src/Cartalyst/Sentry/Throttling/Eloquent/Provider.php",
        "position": 14,
        "original_position": 14,
        "commit_id": "ba7eabbd90be5a4955080b7ee03b2937b787b729",
        "original_commit_id": "ba7eabbd90be5a4955080b7ee03b2937b787b729",
        "user": {
            "login": "brunogaspar",
            "id": 2285372,
            "node_id": "MDQ6VXNlcjIyODUzNzI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/2285372?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brunogaspar",
            "html_url": "https://github.com/brunogaspar",
            "followers_url": "https://api.github.com/users/brunogaspar/followers",
            "following_url": "https://api.github.com/users/brunogaspar/following{/other_user}",
            "gists_url": "https://api.github.com/users/brunogaspar/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brunogaspar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brunogaspar/subscriptions",
            "organizations_url": "https://api.github.com/users/brunogaspar/orgs",
            "repos_url": "https://api.github.com/users/brunogaspar/repos",
            "events_url": "https://api.github.com/users/brunogaspar/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brunogaspar/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This should be as is.\n",
        "created_at": "2015-02-06T20:44:18Z",
        "updated_at": "2015-02-06T20:44:18Z",
        "html_url": "https://github.com/cartalyst/sentry/pull/498#discussion_r24270593",
        "pull_request_url": "https://api.github.com/repos/cartalyst/sentry/pulls/498",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/24270593"
            },
            "html": {
                "href": "https://github.com/cartalyst/sentry/pull/498#discussion_r24270593"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/498"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/24270599",
        "pull_request_review_id": null,
        "id": 24270599,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjcwNTk5",
        "diff_hunk": "@@ -69,7 +68,7 @@ public function __construct(UserProviderInterface $userProvider, $model = null)\n \t *\n \t * @param  \\Cartalyst\\Sentry\\Users\\UserInterface $user\n \t * @param  string  $ipAddress\n-\t * @return \\Cartalyst\\Sentry\\Throttling\\ThrottleInterface",
        "path": "src/Cartalyst/Sentry/Throttling/Eloquent/Provider.php",
        "position": 22,
        "original_position": 22,
        "commit_id": "ba7eabbd90be5a4955080b7ee03b2937b787b729",
        "original_commit_id": "ba7eabbd90be5a4955080b7ee03b2937b787b729",
        "user": {
            "login": "brunogaspar",
            "id": 2285372,
            "node_id": "MDQ6VXNlcjIyODUzNzI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/2285372?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brunogaspar",
            "html_url": "https://github.com/brunogaspar",
            "followers_url": "https://api.github.com/users/brunogaspar/followers",
            "following_url": "https://api.github.com/users/brunogaspar/following{/other_user}",
            "gists_url": "https://api.github.com/users/brunogaspar/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brunogaspar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brunogaspar/subscriptions",
            "organizations_url": "https://api.github.com/users/brunogaspar/orgs",
            "repos_url": "https://api.github.com/users/brunogaspar/repos",
            "events_url": "https://api.github.com/users/brunogaspar/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brunogaspar/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This should be as is.\n",
        "created_at": "2015-02-06T20:44:23Z",
        "updated_at": "2015-02-06T20:44:23Z",
        "html_url": "https://github.com/cartalyst/sentry/pull/498#discussion_r24270599",
        "pull_request_url": "https://api.github.com/repos/cartalyst/sentry/pulls/498",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/24270599"
            },
            "html": {
                "href": "https://github.com/cartalyst/sentry/pull/498#discussion_r24270599"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/498"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/24270600",
        "pull_request_review_id": null,
        "id": 24270600,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjcwNjAw",
        "diff_hunk": "@@ -99,7 +98,7 @@ public function findByUser(UserInterface $user, $ipAddress = null)\n \t *\n \t * @param  mixed   $id\n \t * @param  string  $ipAddress\n-\t * @return \\Cartalyst\\Sentry\\Throttling\\ThrottleInterface",
        "path": "src/Cartalyst/Sentry/Throttling/Eloquent/Provider.php",
        "position": 31,
        "original_position": 31,
        "commit_id": "ba7eabbd90be5a4955080b7ee03b2937b787b729",
        "original_commit_id": "ba7eabbd90be5a4955080b7ee03b2937b787b729",
        "user": {
            "login": "brunogaspar",
            "id": 2285372,
            "node_id": "MDQ6VXNlcjIyODUzNzI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/2285372?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brunogaspar",
            "html_url": "https://github.com/brunogaspar",
            "followers_url": "https://api.github.com/users/brunogaspar/followers",
            "following_url": "https://api.github.com/users/brunogaspar/following{/other_user}",
            "gists_url": "https://api.github.com/users/brunogaspar/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brunogaspar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brunogaspar/subscriptions",
            "organizations_url": "https://api.github.com/users/brunogaspar/orgs",
            "repos_url": "https://api.github.com/users/brunogaspar/repos",
            "events_url": "https://api.github.com/users/brunogaspar/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brunogaspar/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This should be as is.\n",
        "created_at": "2015-02-06T20:44:24Z",
        "updated_at": "2015-02-06T20:44:24Z",
        "html_url": "https://github.com/cartalyst/sentry/pull/498#discussion_r24270600",
        "pull_request_url": "https://api.github.com/repos/cartalyst/sentry/pulls/498",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/24270600"
            },
            "html": {
                "href": "https://github.com/cartalyst/sentry/pull/498#discussion_r24270600"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/498"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/24270603",
        "pull_request_review_id": null,
        "id": 24270603,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjcwNjAz",
        "diff_hunk": "@@ -111,7 +110,7 @@ public function findByUserId($id, $ipAddress = null)\n \t *\n \t * @param  string  $login\n \t * @param  string  $ipAddress\n-\t * @return \\Cartalyst\\Sentry\\Throttling\\ThrottleInterface",
        "path": "src/Cartalyst/Sentry/Throttling/Eloquent/Provider.php",
        "position": 40,
        "original_position": 40,
        "commit_id": "ba7eabbd90be5a4955080b7ee03b2937b787b729",
        "original_commit_id": "ba7eabbd90be5a4955080b7ee03b2937b787b729",
        "user": {
            "login": "brunogaspar",
            "id": 2285372,
            "node_id": "MDQ6VXNlcjIyODUzNzI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/2285372?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brunogaspar",
            "html_url": "https://github.com/brunogaspar",
            "followers_url": "https://api.github.com/users/brunogaspar/followers",
            "following_url": "https://api.github.com/users/brunogaspar/following{/other_user}",
            "gists_url": "https://api.github.com/users/brunogaspar/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brunogaspar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brunogaspar/subscriptions",
            "organizations_url": "https://api.github.com/users/brunogaspar/orgs",
            "repos_url": "https://api.github.com/users/brunogaspar/repos",
            "events_url": "https://api.github.com/users/brunogaspar/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brunogaspar/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This should be as is.\n",
        "created_at": "2015-02-06T20:44:27Z",
        "updated_at": "2015-02-06T20:44:27Z",
        "html_url": "https://github.com/cartalyst/sentry/pull/498#discussion_r24270603",
        "pull_request_url": "https://api.github.com/repos/cartalyst/sentry/pulls/498",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/24270603"
            },
            "html": {
                "href": "https://github.com/cartalyst/sentry/pull/498#discussion_r24270603"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/498"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/24270605",
        "pull_request_review_id": null,
        "id": 24270605,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjcwNjA1",
        "diff_hunk": "@@ -52,7 +52,6 @@ class Provider implements ProviderInterface {\n \t *\n \t * @param  \\Cartalyst\\Sentry\\Users\\ProviderInterface $userProvider\n \t * @param  string $model\n-\t * @return void",
        "path": "src/Cartalyst/Sentry/Throttling/Kohana/Provider.php",
        "position": 14,
        "original_position": 14,
        "commit_id": "ba7eabbd90be5a4955080b7ee03b2937b787b729",
        "original_commit_id": "ba7eabbd90be5a4955080b7ee03b2937b787b729",
        "user": {
            "login": "brunogaspar",
            "id": 2285372,
            "node_id": "MDQ6VXNlcjIyODUzNzI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/2285372?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brunogaspar",
            "html_url": "https://github.com/brunogaspar",
            "followers_url": "https://api.github.com/users/brunogaspar/followers",
            "following_url": "https://api.github.com/users/brunogaspar/following{/other_user}",
            "gists_url": "https://api.github.com/users/brunogaspar/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brunogaspar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brunogaspar/subscriptions",
            "organizations_url": "https://api.github.com/users/brunogaspar/orgs",
            "repos_url": "https://api.github.com/users/brunogaspar/repos",
            "events_url": "https://api.github.com/users/brunogaspar/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brunogaspar/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This should be as is.\n",
        "created_at": "2015-02-06T20:44:30Z",
        "updated_at": "2015-02-06T20:44:30Z",
        "html_url": "https://github.com/cartalyst/sentry/pull/498#discussion_r24270605",
        "pull_request_url": "https://api.github.com/repos/cartalyst/sentry/pulls/498",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/24270605"
            },
            "html": {
                "href": "https://github.com/cartalyst/sentry/pull/498#discussion_r24270605"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/498"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/24270609",
        "pull_request_review_id": null,
        "id": 24270609,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjcwNjA5",
        "diff_hunk": "@@ -67,9 +66,9 @@ public function __construct(UserProviderInterface $userProvider, $model = null)\n \t/**\n \t * Finds a throttler by the given user ID.\n \t *\n-\t * @param  mixed   $id\n+\t * @param  UserInterface   $user\n \t * @param  string  $ipAddress\n-\t * @return \\Cartalyst\\Sentry\\Throttling\\ThrottleInterface",
        "path": "src/Cartalyst/Sentry/Throttling/Kohana/Provider.php",
        "position": 25,
        "original_position": 25,
        "commit_id": "ba7eabbd90be5a4955080b7ee03b2937b787b729",
        "original_commit_id": "ba7eabbd90be5a4955080b7ee03b2937b787b729",
        "user": {
            "login": "brunogaspar",
            "id": 2285372,
            "node_id": "MDQ6VXNlcjIyODUzNzI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/2285372?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brunogaspar",
            "html_url": "https://github.com/brunogaspar",
            "followers_url": "https://api.github.com/users/brunogaspar/followers",
            "following_url": "https://api.github.com/users/brunogaspar/following{/other_user}",
            "gists_url": "https://api.github.com/users/brunogaspar/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brunogaspar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brunogaspar/subscriptions",
            "organizations_url": "https://api.github.com/users/brunogaspar/orgs",
            "repos_url": "https://api.github.com/users/brunogaspar/repos",
            "events_url": "https://api.github.com/users/brunogaspar/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brunogaspar/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This should be as is.\n",
        "created_at": "2015-02-06T20:44:32Z",
        "updated_at": "2015-02-06T20:44:32Z",
        "html_url": "https://github.com/cartalyst/sentry/pull/498#discussion_r24270609",
        "pull_request_url": "https://api.github.com/repos/cartalyst/sentry/pulls/498",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/24270609"
            },
            "html": {
                "href": "https://github.com/cartalyst/sentry/pull/498#discussion_r24270609"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/498"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/24270610",
        "pull_request_review_id": null,
        "id": 24270610,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjcwNjEw",
        "diff_hunk": "@@ -99,7 +98,7 @@ public function findByUser(UserInterface $user, $ipAddress = null)\n \t *\n \t * @param  mixed   $id\n \t * @param  string  $ipAddress\n-\t * @return \\Cartalyst\\Sentry\\Throttling\\ThrottleInterface",
        "path": "src/Cartalyst/Sentry/Throttling/Kohana/Provider.php",
        "position": 34,
        "original_position": 34,
        "commit_id": "ba7eabbd90be5a4955080b7ee03b2937b787b729",
        "original_commit_id": "ba7eabbd90be5a4955080b7ee03b2937b787b729",
        "user": {
            "login": "brunogaspar",
            "id": 2285372,
            "node_id": "MDQ6VXNlcjIyODUzNzI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/2285372?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brunogaspar",
            "html_url": "https://github.com/brunogaspar",
            "followers_url": "https://api.github.com/users/brunogaspar/followers",
            "following_url": "https://api.github.com/users/brunogaspar/following{/other_user}",
            "gists_url": "https://api.github.com/users/brunogaspar/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brunogaspar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brunogaspar/subscriptions",
            "organizations_url": "https://api.github.com/users/brunogaspar/orgs",
            "repos_url": "https://api.github.com/users/brunogaspar/repos",
            "events_url": "https://api.github.com/users/brunogaspar/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brunogaspar/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This should be as is.\n",
        "created_at": "2015-02-06T20:44:33Z",
        "updated_at": "2015-02-06T20:44:33Z",
        "html_url": "https://github.com/cartalyst/sentry/pull/498#discussion_r24270610",
        "pull_request_url": "https://api.github.com/repos/cartalyst/sentry/pulls/498",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/24270610"
            },
            "html": {
                "href": "https://github.com/cartalyst/sentry/pull/498#discussion_r24270610"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/498"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/24270614",
        "pull_request_review_id": null,
        "id": 24270614,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjcwNjE0",
        "diff_hunk": "@@ -111,7 +110,7 @@ public function findByUserId($id, $ipAddress = null)\n \t *\n \t * @param  string  $login\n \t * @param  string  $ipAddress\n-\t * @return \\Cartalyst\\Sentry\\Throttling\\ThrottleInterface",
        "path": "src/Cartalyst/Sentry/Throttling/Kohana/Provider.php",
        "position": 43,
        "original_position": 43,
        "commit_id": "ba7eabbd90be5a4955080b7ee03b2937b787b729",
        "original_commit_id": "ba7eabbd90be5a4955080b7ee03b2937b787b729",
        "user": {
            "login": "brunogaspar",
            "id": 2285372,
            "node_id": "MDQ6VXNlcjIyODUzNzI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/2285372?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brunogaspar",
            "html_url": "https://github.com/brunogaspar",
            "followers_url": "https://api.github.com/users/brunogaspar/followers",
            "following_url": "https://api.github.com/users/brunogaspar/following{/other_user}",
            "gists_url": "https://api.github.com/users/brunogaspar/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brunogaspar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brunogaspar/subscriptions",
            "organizations_url": "https://api.github.com/users/brunogaspar/orgs",
            "repos_url": "https://api.github.com/users/brunogaspar/repos",
            "events_url": "https://api.github.com/users/brunogaspar/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brunogaspar/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This should be as is.\n",
        "created_at": "2015-02-06T20:44:35Z",
        "updated_at": "2015-02-06T20:44:35Z",
        "html_url": "https://github.com/cartalyst/sentry/pull/498#discussion_r24270614",
        "pull_request_url": "https://api.github.com/repos/cartalyst/sentry/pulls/498",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/24270614"
            },
            "html": {
                "href": "https://github.com/cartalyst/sentry/pull/498#discussion_r24270614"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/498"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/24270620",
        "pull_request_review_id": null,
        "id": 24270620,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjcwNjIw",
        "diff_hunk": "@@ -511,7 +511,7 @@ public function invalidateUserGroupsCache()\n \t/**\n \t * Adds the user to the given group.\n \t *\n-\t * @param \\Cartalyst\\Sentry\\Groups\\GroupInterface  $group",
        "path": "src/Cartalyst/Sentry/Users/Eloquent/User.php",
        "position": 20,
        "original_position": 20,
        "commit_id": "ba7eabbd90be5a4955080b7ee03b2937b787b729",
        "original_commit_id": "ba7eabbd90be5a4955080b7ee03b2937b787b729",
        "user": {
            "login": "brunogaspar",
            "id": 2285372,
            "node_id": "MDQ6VXNlcjIyODUzNzI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/2285372?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brunogaspar",
            "html_url": "https://github.com/brunogaspar",
            "followers_url": "https://api.github.com/users/brunogaspar/followers",
            "following_url": "https://api.github.com/users/brunogaspar/following{/other_user}",
            "gists_url": "https://api.github.com/users/brunogaspar/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brunogaspar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brunogaspar/subscriptions",
            "organizations_url": "https://api.github.com/users/brunogaspar/orgs",
            "repos_url": "https://api.github.com/users/brunogaspar/repos",
            "events_url": "https://api.github.com/users/brunogaspar/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brunogaspar/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This should be as is.\n",
        "created_at": "2015-02-06T20:44:38Z",
        "updated_at": "2015-02-06T20:44:38Z",
        "html_url": "https://github.com/cartalyst/sentry/pull/498#discussion_r24270620",
        "pull_request_url": "https://api.github.com/repos/cartalyst/sentry/pulls/498",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/24270620"
            },
            "html": {
                "href": "https://github.com/cartalyst/sentry/pull/498#discussion_r24270620"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/498"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/24270628",
        "pull_request_review_id": null,
        "id": 24270628,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjcwNjI4",
        "diff_hunk": "@@ -529,7 +529,7 @@ public function addGroup(GroupInterface $group)\n \t/**\n \t * Removes the user from the given group.\n \t *\n-\t * @param \\Cartalyst\\Sentry\\Groups\\GroupInterface  $group",
        "path": "src/Cartalyst/Sentry/Users/Eloquent/User.php",
        "position": 29,
        "original_position": 29,
        "commit_id": "ba7eabbd90be5a4955080b7ee03b2937b787b729",
        "original_commit_id": "ba7eabbd90be5a4955080b7ee03b2937b787b729",
        "user": {
            "login": "brunogaspar",
            "id": 2285372,
            "node_id": "MDQ6VXNlcjIyODUzNzI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/2285372?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brunogaspar",
            "html_url": "https://github.com/brunogaspar",
            "followers_url": "https://api.github.com/users/brunogaspar/followers",
            "following_url": "https://api.github.com/users/brunogaspar/following{/other_user}",
            "gists_url": "https://api.github.com/users/brunogaspar/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brunogaspar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brunogaspar/subscriptions",
            "organizations_url": "https://api.github.com/users/brunogaspar/orgs",
            "repos_url": "https://api.github.com/users/brunogaspar/repos",
            "events_url": "https://api.github.com/users/brunogaspar/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brunogaspar/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This should be as is.\n",
        "created_at": "2015-02-06T20:44:43Z",
        "updated_at": "2015-02-06T20:44:43Z",
        "html_url": "https://github.com/cartalyst/sentry/pull/498#discussion_r24270628",
        "pull_request_url": "https://api.github.com/repos/cartalyst/sentry/pulls/498",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/24270628"
            },
            "html": {
                "href": "https://github.com/cartalyst/sentry/pull/498#discussion_r24270628"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/498"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/24270629",
        "pull_request_review_id": null,
        "id": 24270629,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjcwNjI5",
        "diff_hunk": "@@ -547,7 +547,7 @@ public function removeGroup(GroupInterface $group)\n \t/**\n \t * See if the user is in the given group.\n \t *\n-\t * @param \\Cartalyst\\Sentry\\Groups\\GroupInterface  $group",
        "path": "src/Cartalyst/Sentry/Users/Eloquent/User.php",
        "position": 38,
        "original_position": 38,
        "commit_id": "ba7eabbd90be5a4955080b7ee03b2937b787b729",
        "original_commit_id": "ba7eabbd90be5a4955080b7ee03b2937b787b729",
        "user": {
            "login": "brunogaspar",
            "id": 2285372,
            "node_id": "MDQ6VXNlcjIyODUzNzI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/2285372?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brunogaspar",
            "html_url": "https://github.com/brunogaspar",
            "followers_url": "https://api.github.com/users/brunogaspar/followers",
            "following_url": "https://api.github.com/users/brunogaspar/following{/other_user}",
            "gists_url": "https://api.github.com/users/brunogaspar/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brunogaspar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brunogaspar/subscriptions",
            "organizations_url": "https://api.github.com/users/brunogaspar/orgs",
            "repos_url": "https://api.github.com/users/brunogaspar/repos",
            "events_url": "https://api.github.com/users/brunogaspar/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brunogaspar/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This should be as is.\n",
        "created_at": "2015-02-06T20:44:46Z",
        "updated_at": "2015-02-06T20:44:46Z",
        "html_url": "https://github.com/cartalyst/sentry/pull/498#discussion_r24270629",
        "pull_request_url": "https://api.github.com/repos/cartalyst/sentry/pulls/498",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/24270629"
            },
            "html": {
                "href": "https://github.com/cartalyst/sentry/pull/498#discussion_r24270629"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/498"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/24270651",
        "pull_request_review_id": null,
        "id": 24270651,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjcwNjUx",
        "diff_hunk": "@@ -67,9 +66,9 @@ public function __construct(UserProviderInterface $userProvider, $model = null)\n \t/**\n \t * Finds a throttler by the given user ID.\n \t *\n-\t * @param  mixed   $id\n+\t * @param  UserInterface   $user",
        "path": "src/Cartalyst/Sentry/Throttling/Kohana/Provider.php",
        "position": 23,
        "original_position": 23,
        "commit_id": "ba7eabbd90be5a4955080b7ee03b2937b787b729",
        "original_commit_id": "ba7eabbd90be5a4955080b7ee03b2937b787b729",
        "user": {
            "login": "brunogaspar",
            "id": 2285372,
            "node_id": "MDQ6VXNlcjIyODUzNzI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/2285372?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brunogaspar",
            "html_url": "https://github.com/brunogaspar",
            "followers_url": "https://api.github.com/users/brunogaspar/followers",
            "following_url": "https://api.github.com/users/brunogaspar/following{/other_user}",
            "gists_url": "https://api.github.com/users/brunogaspar/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brunogaspar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brunogaspar/subscriptions",
            "organizations_url": "https://api.github.com/users/brunogaspar/orgs",
            "repos_url": "https://api.github.com/users/brunogaspar/repos",
            "events_url": "https://api.github.com/users/brunogaspar/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brunogaspar/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "To keep it consistent, it should be the FQN, like the others.\n",
        "created_at": "2015-02-06T20:45:01Z",
        "updated_at": "2015-02-06T20:45:01Z",
        "html_url": "https://github.com/cartalyst/sentry/pull/498#discussion_r24270651",
        "pull_request_url": "https://api.github.com/repos/cartalyst/sentry/pulls/498",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/comments/24270651"
            },
            "html": {
                "href": "https://github.com/cartalyst/sentry/pull/498#discussion_r24270651"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cartalyst/sentry/pulls/498"
            }
        }
    }
]